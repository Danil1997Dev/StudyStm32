
Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ddb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003230  0801df48  0801df48  0002df48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021178  08021178  0004024c  2**0
                  CONTENTS
  4 .ARM          00000008  08021178  08021178  00031178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021180  08021180  0004024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021180  08021180  00031180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021184  08021184  00031184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08021188  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004024c  2**0
                  CONTENTS
 10 .bss          0000aaa8  2000024c  2000024c  0004024c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000acf4  2000acf4  0004024c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004027c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003264e  00000000  00000000  000402bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008d02  00000000  00000000  0007290d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002460  00000000  00000000  0007b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c78  00000000  00000000  0007da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034e49  00000000  00000000  0007f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d3b8  00000000  00000000  000b4531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e95b8  00000000  00000000  000f18e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009d2c  00000000  00000000  001daea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001e4bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801df30 	.word	0x0801df30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0801df30 	.word	0x0801df30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f001 f926 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f82e 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f90a 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f8e0 	bl	8000750 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8b4 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000594:	f01b fd0e 	bl	801bfb4 <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 8000598:	f009 fe92 	bl	800a2c0 <MX_LWIP_Init>
  MX_FATFS_Init();
 800059c:	f009 fce8 	bl	8009f70 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 80005a0:	f000 f88c 	bl	80006bc <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
  HAL_UART_Receive_DMA(&huart3, RX_buff, 15);
 80005a4:	220f      	movs	r2, #15
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <main+0x58>)
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <main+0x5c>)
 80005aa:	f006 fb53 	bl	8006c54 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //tcp_client_init();
  while (gnetif.ip_addr.addr == 0)
 80005ae:	e001      	b.n	80005b4 <main+0x38>
  {
	  MX_LWIP_Process();
 80005b0:	f009 fed8 	bl	800a364 <MX_LWIP_Process>
  while (gnetif.ip_addr.addr == 0)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x60>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <main+0x34>
  }

  tcp_client_init();
 80005bc:	f000 fdbe 	bl	800113c <tcp_client_init>
  {
	  //HAL_UART_Transmit(&huart3, TX_buff, sizeof(TX_buff),0xFFFF);
	  //HAL_Delay(5000);


	  MX_LWIP_Process();
 80005c0:	f009 fed0 	bl	800a364 <MX_LWIP_Process>
	  if (gnetif.ip_addr.addr != 0)
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <main+0x60>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f9      	beq.n	80005c0 <main+0x44>
	  {
		  a = 1;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <main+0x64>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 80005d2:	e7f5      	b.n	80005c0 <main+0x44>
 80005d4:	200003f4 	.word	0x200003f4
 80005d8:	200002ec 	.word	0x200002ec
 80005dc:	2000045c 	.word	0x2000045c
 80005e0:	20000418 	.word	0x20000418

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f01c fdd7 	bl	801d1a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xd4>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000654:	2319      	movs	r3, #25
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000660:	2303      	movs	r3, #3
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fb77 	bl	8004d5c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f000 f8fc 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fdd8 	bl	800524c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f000 f8e5 	bl	8000870 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006a6:	f004 feb7 	bl	8005418 <HAL_RCC_EnableCSS>
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006c2:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <MX_SDIO_SD_Init+0x3c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <MX_SDIO_SD_Init+0x38>)
 80006e6:	2224      	movs	r2, #36	; 0x24
 80006e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	20000268 	.word	0x20000268
 80006f8:	40012c00 	.word	0x40012c00

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f006 f9ce 	bl	8006ad4 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f897 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002ec 	.word	0x200002ec
 800074c:	40004800 	.word	0x40004800

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_DMA_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_DMA_Init+0x4c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200c      	movs	r0, #12
 8000778:	f001 f99b 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800077c:	200c      	movs	r0, #12
 800077e:	f001 f9b4 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	200e      	movs	r0, #14
 8000788:	f001 f993 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800078c:	200e      	movs	r0, #14
 800078e:	f001 f9ac 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0xa0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_GPIO_Init+0xa0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_GPIO_Init+0xa0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_GPIO_Init+0xa0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	371c      	adds	r7, #28
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	if (huart == &huart3)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_UART_RxCpltCallback+0x24>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d104      	bne.n	800085e <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_DMA(&huart3, RX_buff, 2);
 8000854:	2202      	movs	r2, #2
 8000856:	4905      	ldr	r1, [pc, #20]	; (800086c <HAL_UART_RxCpltCallback+0x28>)
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <HAL_UART_RxCpltCallback+0x24>)
 800085a:	f006 f9fb 	bl	8006c54 <HAL_UART_Receive_DMA>
#ifndef COM_PORT
		byteNum++;
		wr = 1;
#endif
	}
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002ec 	.word	0x200002ec
 800086c:	200003f4 	.word	0x200003f4

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2c      	ldr	r2, [pc, #176]	; (800099c <HAL_SD_MspInit+0xd0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d152      	bne.n	8000994 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 80008f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_SD_MspInit+0xd4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000942:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000954:	230c      	movs	r3, #12
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <HAL_SD_MspInit+0xd8>)
 8000960:	f002 fde2 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000964:	2304      	movs	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000974:	230c      	movs	r3, #12
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <HAL_SD_MspInit+0xdc>)
 8000980:	f002 fdd2 	bl	8003528 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2031      	movs	r0, #49	; 0x31
 800098a:	f001 f892 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800098e:	2031      	movs	r0, #49	; 0x31
 8000990:	f001 f8ab 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <HAL_UART_MspInit+0x160>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	f040 809a 	bne.w	8000b04 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <HAL_UART_MspInit+0x164>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	483b      	ldr	r0, [pc, #236]	; (8000b14 <HAL_UART_MspInit+0x168>)
 8000a26:	f002 fd7f 	bl	8003528 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a2c:	4a3b      	ldr	r2, [pc, #236]	; (8000b1c <HAL_UART_MspInit+0x170>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a30:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000a58:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a6a:	482b      	ldr	r0, [pc, #172]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a6c:	f001 f858 	bl	8001b20 <HAL_DMA_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a76:	f7ff fefb 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_UART_MspInit+0x16c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000a88:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <HAL_UART_MspInit+0x178>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a92:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ac8:	2203      	movs	r2, #3
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000ada:	f001 f821 	bl	8001b20 <HAL_DMA_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000ae4:	f7ff fec4 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <HAL_UART_MspInit+0x174>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2027      	movs	r0, #39	; 0x27
 8000afa:	f000 ffda 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000afe:	2027      	movs	r0, #39	; 0x27
 8000b00:	f000 fff3 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40004800 	.word	0x40004800
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	20000334 	.word	0x20000334
 8000b1c:	40026028 	.word	0x40026028
 8000b20:	20000394 	.word	0x20000394
 8000b24:	40026058 	.word	0x40026058

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b2c:	f004 fd7a 	bl	8005624 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x8>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 fe7c 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Stream1_IRQHandler+0x10>)
 8000b86:	f001 f963 	bl	8001e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000334 	.word	0x20000334

08000b94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA1_Stream3_IRQHandler+0x10>)
 8000b9a:	f001 f959 	bl	8001e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000394 	.word	0x20000394

08000ba8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART3_IRQHandler+0x10>)
 8000bae:	f006 f877 	bl	8006ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, RX_buff, sizeof(RX_buff));
  //HAL_UART_Transmit_IT(&huart3, TX_buff_it, sizeof(TX_buff_it));

  /* USER CODE END USART3_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002ec 	.word	0x200002ec

08000bbc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <SDIO_IRQHandler+0x10>)
 8000bc2:	f005 f96f 	bl	8005ea4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000268 	.word	0x20000268

08000bd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <OTG_FS_IRQHandler+0x10>)
 8000bd6:	f002 ff87 	bl	8003ae8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20009fc0 	.word	0x20009fc0

08000be4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <OTG_HS_IRQHandler+0x10>)
 8000bea:	f002 ff7d 	bl	8003ae8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000a4a4 	.word	0x2000a4a4

08000bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return 1;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_kill>:

int _kill(int pid, int sig)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_kill+0x20>)
 8000c14:	2216      	movs	r2, #22
 8000c16:	601a      	str	r2, [r3, #0]
  return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	2000ace4 	.word	0x2000ace4

08000c2c <_exit>:

void _exit (int status)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffe5 	bl	8000c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c3e:	e7fe      	b.n	8000c3e <_exit+0x12>

08000c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e00a      	b.n	8000c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c52:	f3af 8000 	nop.w
 8000c56:	4601      	mov	r1, r0
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf0      	blt.n	8000c52 <_read+0x12>
  }

  return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e009      	b.n	8000ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf1      	blt.n	8000c8c <_write+0x12>
  }
  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_close>:

int _close(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	605a      	str	r2, [r3, #4]
  return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_isatty>:

int _isatty(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d205      	bcs.n	8000d58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <_sbrk+0x6c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	2000041c 	.word	0x2000041c
 8000d84:	2000acf8 	.word	0x2000acf8
 8000d88:	2000ace4 	.word	0x2000ace4

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <tcp_client_send>:
static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void input_config_data();

static void tcp_client_send(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	struct pbuf *ptrBuf;
	err_t wr_err = ERR_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]


	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000dbe:	e02d      	b.n	8000e1c <tcp_client_send+0x6c>
	{
		ptrBuf = es->p;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]

		wr_err = tcp_write(newpcb, ptrBuf->payload, ptrBuf->len, TCP_WRITE_FLAG_COPY);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6859      	ldr	r1, [r3, #4]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	895a      	ldrh	r2, [r3, #10]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f014 fb2b 	bl	801542c <tcp_write>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8000dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11c      	bne.n	8000e1c <tcp_client_send+0x6c>
		{
			u16_t len;
			int cnt;

			len = ptrBuf->len;
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	895b      	ldrh	r3, [r3, #10]
 8000de6:	81fb      	strh	r3, [r7, #14]

			es->p = ptrBuf->next;
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]

			if (es->p != NULL)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <tcp_client_send+0x52>
			{
				pbuf_ref(es->p);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00f fd5b 	bl	80108b8 <pbuf_ref>

			}

			do
			{
				cnt = pbuf_free(ptrBuf);
 8000e02:	6938      	ldr	r0, [r7, #16]
 8000e04:	f00f fcb8 	bl	8010778 <pbuf_free>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]

			}
			while(cnt == 0);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f7      	beq.n	8000e02 <tcp_client_send+0x52>

			tcp_recved(newpcb, len);
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	4619      	mov	r1, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f010 fc06 	bl	8011628 <tcp_recved>
	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <tcp_client_send+0x8c>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <tcp_client_send+0x8c>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	895a      	ldrh	r2, [r3, #10]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d9c1      	bls.n	8000dc0 <tcp_client_send+0x10>

		}

	}

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <tcp_client_handler>:

static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
 8000e50:	466b      	mov	r3, sp
 8000e52:	461e      	mov	r6, r3
	//struct tcp_client_struct *esTX;

	char bufRX[es->p->len];
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	8959      	ldrh	r1, [r3, #10]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	b28b      	uxth	r3, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	4698      	mov	r8, r3
 8000e66:	4691      	mov	r9, r2
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e7c:	b28b      	uxth	r3, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	461c      	mov	r4, r3
 8000e82:	4615      	mov	r5, r2
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	00eb      	lsls	r3, r5, #3
 8000e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e92:	00e2      	lsls	r2, r4, #3
 8000e94:	460b      	mov	r3, r1
 8000e96:	3307      	adds	r3, #7
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea0:	466b      	mov	r3, sp
 8000ea2:	3300      	adds	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]

	memset((void *)bufRX,'\0', es->p->len);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	895b      	ldrh	r3, [r3, #10]
 8000eac:	461a      	mov	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	68b8      	ldr	r0, [r7, #8]
 8000eb2:	f01c f978 	bl	801d1a6 <memset>

	strncpy (bufRX, es->p->payload, es->p->len);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f01c f976 	bl	801d1b6 <strncpy>

	strncpy (tcpRX, es->p->payload, es->p->len);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	6859      	ldr	r1, [r3, #4]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	895b      	ldrh	r3, [r3, #10]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <tcp_client_handler+0xbc>)
 8000eda:	f01c f96c 	bl	801d1b6 <strncpy>

	HAL_UART_Transmit_DMA(&huart3, bufRX, es->p->len);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	895b      	ldrh	r3, [r3, #10]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <tcp_client_handler+0xc0>)
 8000eea:	f005 fe43 	bl	8006b74 <HAL_UART_Transmit_DMA>

	//tcp_client_send(newpcb, es);

	//pbuf_free(es->p);

	esBuff = es;
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <tcp_client_handler+0xc4>)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	46b5      	mov	sp, r6




}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f00:	20000428 	.word	0x20000428
 8000f04:	200002ec 	.word	0x200002ec
 8000f08:	2000043c 	.word	0x2000043c

08000f0c <tcp_client_connectin_close>:

static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]

	tcp_arg(newpcb, NULL);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f011 fb5d 	bl	80125d8 <tcp_arg>
	tcp_recv(newpcb, NULL);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f011 fb6b 	bl	80125fc <tcp_recv>
	tcp_sent(newpcb, NULL);
 8000f26:	2100      	movs	r1, #0
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f011 fb89 	bl	8012640 <tcp_sent>
	tcp_poll(newpcb, NULL, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f011 fbc8 	bl	80126c8 <tcp_poll>
	tcp_err(newpcb, NULL);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f011 fba2 	bl	8012684 <tcp_err>

	mem_free(es);
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f00e fa31 	bl	800f3a8 <mem_free>

	tcp_close(newpcb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f010 fa1e 	bl	8011388 <tcp_close>

}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <input_config_data>:

static void input_config_data(struct entry_struct *newEntry, char *msg, int msgSize, int del, const int byteN)
{
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	b08c      	sub	sp, #48	; 0x30
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	466b      	mov	r3, sp
 8000f66:	469a      	mov	sl, r3

	char NumStr = newEntry->NumStr;//REMOTE_IP_ADDRESS{Num = 0,Num = 1,Num = 2,Num = 3}, one Num of REMOTE_IP_ADDRESS is three strCnt of UserRxBufferFS
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	77bb      	strb	r3, [r7, #30]
	char NumColum = newEntry->NumColum;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	777b      	strb	r3, [r7, #29]
	uint8_t *pStore = newEntry->pstore;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c

	int Num = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	int strCntRX = 0;//UserRxBufferFS{strCnt = 0,strCnt = 1,strCnt = 2,strCnt = 3,strCnt = ...}
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	char ipBuffchr[NumColum];
 8000f82:	7f7e      	ldrb	r6, [r7, #29]
 8000f84:	4633      	mov	r3, r6
 8000f86:	3b01      	subs	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	b2f3      	uxtb	r3, r6
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4698      	mov	r8, r3
 8000f90:	4691      	mov	r9, r2
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fa6:	b2f3      	uxtb	r3, r6
 8000fa8:	2200      	movs	r2, #0
 8000faa:	461c      	mov	r4, r3
 8000fac:	4615      	mov	r5, r2
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	00eb      	lsls	r3, r5, #3
 8000fb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fbc:	00e2      	lsls	r2, r4, #3
 8000fbe:	4633      	mov	r3, r6
 8000fc0:	3307      	adds	r3, #7
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000fca:	466b      	mov	r3, sp
 8000fcc:	3300      	adds	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
	int ipBuffint = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
	int strCntBuff = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]

	memset(pStore, '\0', NumStr);
 8000fd8:	7fbb      	ldrb	r3, [r7, #30]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe0:	f01c f8e1 	bl	801d1a6 <memset>
	memset(ipBuffchr, '\0', NumColum);
 8000fe4:	7f7b      	ldrb	r3, [r7, #29]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f01c f8db 	bl	801d1a6 <memset>

	HAL_Delay(del*1000);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc5a 	bl	80018b4 <HAL_Delay>

#ifdef COM_PORT
	CDC_Transmit_FS((uint8_t *)msg, (uint16_t)msgSize);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4619      	mov	r1, r3
 8001006:	68b8      	ldr	r0, [r7, #8]
 8001008:	f01b f8ca 	bl	801c1a0 <CDC_Transmit_FS>
#else
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, (uint16_t)msgSize);
#endif

	while (byteNum < byteN + 1)
 800100c:	bf00      	nop
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <input_config_data+0x1dc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001014:	429a      	cmp	r2, r3
 8001016:	dafa      	bge.n	800100e <input_config_data+0xba>
	{
		;
	}

	if (wr)
 8001018:	4b46      	ldr	r3, [pc, #280]	; (8001134 <input_config_data+0x1e0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8081 	beq.w	8001124 <input_config_data+0x1d0>
	{
		while (Num < NumStr)
 8001022:	e054      	b.n	80010ce <input_config_data+0x17a>
#else
				while ((char)RX_buff[strCntRX] != '.' & (char)RX_buff[strCntRX] != '\0' )
#endif
			{
#ifdef COM_PORT
				ipBuffchr[strCntBuff] = (char)UserRxBufferFS[strCntRX];
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <input_config_data+0x1e4>)
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	4413      	add	r3, r2
 800102a:	7819      	ldrb	r1, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	460a      	mov	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
#else
				ipBuffchr[strCntBuff] = (char)RX_buff[strCntRX];
#endif

				strCntRX++;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
				strCntBuff++;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	3301      	adds	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
			while ((char)UserRxBufferFS[strCntRX] != '.' & (char)UserRxBufferFS[strCntRX] != '\0' )
 8001042:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <input_config_data+0x1e4>)
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b2e      	cmp	r3, #46	; 0x2e
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4938      	ldr	r1, [pc, #224]	; (8001138 <input_config_data+0x1e4>)
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	440b      	add	r3, r1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4013      	ands	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1da      	bne.n	8001024 <input_config_data+0xd0>
			}

			strCntBuff = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
			strCntRX++;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	3301      	adds	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24


			for (char n = 0;n < NumColum;n++)
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
 800107c:	e00c      	b.n	8001098 <input_config_data+0x144>
			{
				ipBuffint |= (ipBuffchr[n] << 8*n);
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	461a      	mov	r2, r3
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
			for (char n = 0;n < NumColum;n++)
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	3301      	adds	r3, #1
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	7ffa      	ldrb	r2, [r7, #31]
 800109a:	7f7b      	ldrb	r3, [r7, #29]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3ee      	bcc.n	800107e <input_config_data+0x12a>


			}

			*pStore = atoi((char *)&ipBuffint);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4618      	mov	r0, r3
 80010a6:	f01b fe89 	bl	801cdbc <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	701a      	strb	r2, [r3, #0]

			pStore++;
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	3301      	adds	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			Num++;
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	3301      	adds	r3, #1
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28

			memset(ipBuffchr, '\0', sizeof(ipBuffchr));
 80010be:	4633      	mov	r3, r6
 80010c0:	461a      	mov	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f01c f86e 	bl	801d1a6 <memset>
			ipBuffint = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
		while (Num < NumStr)
 80010ce:	7fbb      	ldrb	r3, [r7, #30]
 80010d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbb5      	blt.n	8001042 <input_config_data+0xee>
		}

		wr = 0;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <input_config_data+0x1e0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
#ifdef COM_PORT
		UserRxBufferFS[strCntRX-1] = '\n';
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3b01      	subs	r3, #1
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <input_config_data+0x1e4>)
 80010e2:	210a      	movs	r1, #10
 80010e4:	54d1      	strb	r1, [r2, r3]
		UserRxBufferFS[strCntRX] = '\r';
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <input_config_data+0x1e4>)
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	4413      	add	r3, r2
 80010ec:	220d      	movs	r2, #13
 80010ee:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t *)UserRxBufferFS, (uint16_t) (strCntRX+2));
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3302      	adds	r3, #2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	480f      	ldr	r0, [pc, #60]	; (8001138 <input_config_data+0x1e4>)
 80010fc:	f01b f850 	bl	801c1a0 <CDC_Transmit_FS>
		memset(UserRxBufferFS, '\0', sizeof(UserRxBufferFS));
 8001100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001104:	2100      	movs	r1, #0
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <input_config_data+0x1e4>)
 8001108:	f01c f84d 	bl	801d1a6 <memset>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)RX_buff, (uint16_t) (strCntRX+2));
		HAL_Delay(10);
		memset(RX_buff, '\0', sizeof(RX_buff));
#endif

		memset(pStore, '\0', NumStr);
 800110c:	7fbb      	ldrb	r3, [r7, #30]
 800110e:	461a      	mov	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001114:	f01c f847 	bl	801d1a6 <memset>
		memset(ipBuffchr, '\0', NumColum);
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	461a      	mov	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f01c f841 	bl	801d1a6 <memset>
 8001124:	46d5      	mov	sp, sl

	}
}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001130:	20000414 	.word	0x20000414
 8001134:	20000437 	.word	0x20000437
 8001138:	20008dc0 	.word	0x20008dc0

0800113c <tcp_client_init>:




void tcp_client_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
	err_t ret_err;

	dhcp_set_struct(&gnetif, sdhcp);
 8001142:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <tcp_client_init+0x144>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	484e      	ldr	r0, [pc, #312]	; (8001284 <tcp_client_init+0x148>)
 800114a:	f017 f8cb 	bl	80182e4 <dhcp_set_struct>
	dhcp_start(&gnetif);
 800114e:	484d      	ldr	r0, [pc, #308]	; (8001284 <tcp_client_init+0x148>)
 8001150:	f017 f902 	bl	8018358 <dhcp_start>


	entry = (struct entry_struct *) mem_malloc(sizeof(struct entry_struct *));
 8001154:	2004      	movs	r0, #4
 8001156:	f00e fa8d 	bl	800f674 <mem_malloc>
 800115a:	4603      	mov	r3, r0
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <tcp_client_init+0x14c>)
 800115e:	6013      	str	r3, [r2, #0]



	entry->NumColum = 3;
 8001160:	4b49      	ldr	r3, [pc, #292]	; (8001288 <tcp_client_init+0x14c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2203      	movs	r2, #3
 8001166:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_IP_ADDRESS);
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <tcp_client_init+0x14c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2204      	movs	r2, #4
 800116e:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_IP_ADDRESS;
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <tcp_client_init+0x14c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a45      	ldr	r2, [pc, #276]	; (800128c <tcp_client_init+0x150>)
 8001176:	605a      	str	r2, [r3, #4]


	input_config_data(entry, (char *)"Enter IP address: ", strlen("Enter IP address: "), 7, byteNum);
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <tcp_client_init+0x14c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	4b44      	ldr	r3, [pc, #272]	; (8001290 <tcp_client_init+0x154>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2307      	movs	r3, #7
 8001184:	2212      	movs	r2, #18
 8001186:	4943      	ldr	r1, [pc, #268]	; (8001294 <tcp_client_init+0x158>)
 8001188:	f7ff fee4 	bl	8000f54 <input_config_data>



	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
 800118c:	4b3f      	ldr	r3, [pc, #252]	; (800128c <tcp_client_init+0x150>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	061a      	lsls	r2, r3, #24
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <tcp_client_init+0x150>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	431a      	orrs	r2, r3
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <tcp_client_init+0x150>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	4313      	orrs	r3, r2
 80011a2:	4a3a      	ldr	r2, [pc, #232]	; (800128c <tcp_client_init+0x150>)
 80011a4:	78d2      	ldrb	r2, [r2, #3]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	061a      	lsls	r2, r3, #24
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <tcp_client_init+0x150>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0619      	lsls	r1, r3, #24
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <tcp_client_init+0x150>)
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	4319      	orrs	r1, r3
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <tcp_client_init+0x150>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	430b      	orrs	r3, r1
 80011c0:	4932      	ldr	r1, [pc, #200]	; (800128c <tcp_client_init+0x150>)
 80011c2:	78c9      	ldrb	r1, [r1, #3]
 80011c4:	430b      	orrs	r3, r1
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <tcp_client_init+0x150>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0619      	lsls	r1, r3, #24
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <tcp_client_init+0x150>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	4319      	orrs	r1, r3
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <tcp_client_init+0x150>)
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	430b      	orrs	r3, r1
 80011e4:	4929      	ldr	r1, [pc, #164]	; (800128c <tcp_client_init+0x150>)
 80011e6:	78c9      	ldrb	r1, [r1, #3]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011f0:	431a      	orrs	r2, r3
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <tcp_client_init+0x150>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0619      	lsls	r1, r3, #24
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <tcp_client_init+0x150>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	4319      	orrs	r1, r3
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <tcp_client_init+0x150>)
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	430b      	orrs	r3, r1
 8001208:	4920      	ldr	r1, [pc, #128]	; (800128c <tcp_client_init+0x150>)
 800120a:	78c9      	ldrb	r1, [r1, #3]
 800120c:	430b      	orrs	r3, r1
 800120e:	0e1b      	lsrs	r3, r3, #24
 8001210:	4313      	orrs	r3, r2
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <tcp_client_init+0x15c>)
 8001214:	6013      	str	r3, [r2, #0]

	entry->NumColum = 2;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <tcp_client_init+0x14c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2202      	movs	r2, #2
 800121c:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_PORT);
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <tcp_client_init+0x14c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_PORT;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <tcp_client_init+0x14c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <tcp_client_init+0x160>)
 800122c:	605a      	str	r2, [r3, #4]

	input_config_data(entry, (char *)"Enter PORT: ", strlen("Enter PORT: "), 1, byteNum);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <tcp_client_init+0x14c>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <tcp_client_init+0x154>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	220c      	movs	r2, #12
 800123c:	4918      	ldr	r1, [pc, #96]	; (80012a0 <tcp_client_init+0x164>)
 800123e:	f7ff fe89 	bl	8000f54 <input_config_data>
//	memset(REMOTE_IP_ADDRESS, '\0', 4);
//	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
//
//	REMOTE_PORT[0] = 0;

	cppcb = tcp_new();
 8001242:	f011 f9c1 	bl	80125c8 <tcp_new>
 8001246:	4603      	mov	r3, r0
 8001248:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <tcp_client_init+0x168>)
 800124a:	6013      	str	r3, [r2, #0]

	if (cppcb != NULL)
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <tcp_client_init+0x168>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <tcp_client_init+0x130>
	{
		ret_err = tcp_connect(cppcb, &remote_ipaddr, REMOTE_PORT[0], tcp_client_connect);
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <tcp_client_init+0x168>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <tcp_client_init+0x160>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <tcp_client_init+0x16c>)
 8001260:	490d      	ldr	r1, [pc, #52]	; (8001298 <tcp_client_init+0x15c>)
 8001262:	f010 fa77 	bl	8011754 <tcp_connect>
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	else
	{
		memp_free(MEMP_TCP_PCB, cppcb);

	}
}
 800126a:	e005      	b.n	8001278 <tcp_client_init+0x13c>
		memp_free(MEMP_TCP_PCB, cppcb);
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <tcp_client_init+0x168>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	2001      	movs	r0, #1
 8001274:	f00e fbfe 	bl	800fa74 <memp_free>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000454 	.word	0x20000454
 8001284:	2000045c 	.word	0x2000045c
 8001288:	20000438 	.word	0x20000438
 800128c:	20000420 	.word	0x20000420
 8001290:	20000414 	.word	0x20000414
 8001294:	0801df48 	.word	0x0801df48
 8001298:	20000444 	.word	0x20000444
 800129c:	20000424 	.word	0x20000424
 80012a0:	0801df5c 	.word	0x0801df5c
 80012a4:	20000440 	.word	0x20000440
 80012a8:	080012ad 	.word	0x080012ad

080012ac <tcp_client_connect>:

static err_t tcp_client_connect(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
	err_t ret_err;

	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)memp_malloc(sizeof(struct tcp_client_struct *));
 80012ba:	2004      	movs	r0, #4
 80012bc:	f00e fb6a 	bl	800f994 <memp_malloc>
 80012c0:	6138      	str	r0, [r7, #16]

//	es = (struct tcp_client_struct *)arg;

	if (es != NULL)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01f      	beq.n	8001308 <tcp_client_connect+0x5c>
	{

		es->p = NULL;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
		es->pcb = newpcb;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	609a      	str	r2, [r3, #8]
		es->state = ES_C_CONNECT;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]

		//*pwr = 1;

		tcp_arg(newpcb, es);
 80012da:	6939      	ldr	r1, [r7, #16]
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f011 f97b 	bl	80125d8 <tcp_arg>

		tcp_recv(newpcb, tcp_client_recive);
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <tcp_client_connect+0x74>)
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f011 f989 	bl	80125fc <tcp_recv>

		tcp_err(newpcb, tcp_client_err);
 80012ea:	490e      	ldr	r1, [pc, #56]	; (8001324 <tcp_client_connect+0x78>)
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f011 f9c9 	bl	8012684 <tcp_err>

		tcp_poll(newpcb, tcp_client_poll, 5);
 80012f2:	2205      	movs	r2, #5
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <tcp_client_connect+0x7c>)
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f011 f9e6 	bl	80126c8 <tcp_poll>

		esBuff = es;
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <tcp_client_connect+0x80>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6013      	str	r3, [r2, #0]

		ret_err = ERR_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
 8001306:	e005      	b.n	8001314 <tcp_client_connect+0x68>

	}
	else
	{

		tcp_client_connectin_close(newpcb, es);
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f7ff fdfe 	bl	8000f0c <tcp_client_connectin_close>

		ret_err = ERR_MEM;
 8001310:	23ff      	movs	r3, #255	; 0xff
 8001312:	75fb      	strb	r3, [r7, #23]
	}

	return ret_err;
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08001331 	.word	0x08001331
 8001324:	0800149d 	.word	0x0800149d
 8001328:	080013dd 	.word	0x080013dd
 800132c:	2000043c 	.word	0x2000043c

08001330 <tcp_client_recive>:
	return ret_err;

}

static err_t tcp_client_recive(void *arg, struct tcp_pcb *newpcb, struct pbuf *p, err_t err)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)arg;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	613b      	str	r3, [r7, #16]

	if (es == NULL)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <tcp_client_recive+0x34>
	{
		es->state = ES_C_CLOSE;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2204      	movs	r2, #4
 800134c:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <tcp_client_recive+0x2e>
		{
			tcp_client_connectin_close(newpcb, es);
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f7ff fdd7 	bl	8000f0c <tcp_client_connectin_close>

		}

		ret_err = ERR_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
 8001362:	e034      	b.n	80013ce <tcp_client_recive+0x9e>
	}
	else if (err != ERR_OK)
 8001364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <tcp_client_recive+0x4c>
	{
		ret_err = err;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	75fb      	strb	r3, [r7, #23]

		pbuf_free(es->p);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f00f f9ff 	bl	8010778 <pbuf_free>
 800137a:	e028      	b.n	80013ce <tcp_client_recive+0x9e>

	}
	else
	{
		switch (es->state)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d002      	beq.n	800138a <tcp_client_recive+0x5a>
 8001384:	2b04      	cmp	r3, #4
 8001386:	d013      	beq.n	80013b0 <tcp_client_recive+0x80>
				pbuf_free(p);

				break;

			default:
				break;
 8001388:	e021      	b.n	80013ce <tcp_client_recive+0x9e>
				es->p = p;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]
				tcp_recved(newpcb, p->tot_len);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	891b      	ldrh	r3, [r3, #8]
 8001394:	4619      	mov	r1, r3
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f010 f946 	bl	8011628 <tcp_recved>
				tcp_client_handler(newpcb, es);
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	68b8      	ldr	r0, [r7, #8]
 80013a0:	f7ff fd50 	bl	8000e44 <tcp_client_handler>
				pbuf_free(p);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f00f f9e7 	bl	8010778 <pbuf_free>
				ret_err = ERR_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
				break;
 80013ae:	e00e      	b.n	80013ce <tcp_client_recive+0x9e>
				tcp_recved(newpcb, p->tot_len);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	891b      	ldrh	r3, [r3, #8]
 80013b4:	4619      	mov	r1, r3
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f010 f936 	bl	8011628 <tcp_recved>
				pbuf_free(es->p);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00f f9d9 	bl	8010778 <pbuf_free>
				pbuf_free(p);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f00f f9d6 	bl	8010778 <pbuf_free>
				break;
 80013cc:	bf00      	nop

	}



	return ret_err;
 80013ce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <tcp_client_poll>:



static err_t tcp_client_poll(void *arg, struct tcp_pcb *newpcb)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	struct tcp_client_struct *es;

	struct tcp_client_struct *esTX;

	es = (struct tcp_client_struct *) arg;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]


	if (es != NULL)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d04a      	beq.n	8001486 <tcp_client_poll+0xaa>
	{
		if (wr == 1)
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <tcp_client_poll+0xb4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d12c      	bne.n	8001452 <tcp_client_poll+0x76>
		{
			esTX = es;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	60bb      	str	r3, [r7, #8]

			//esTX->p = es->p;

			esTX->p = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct tcp_client_struct), PBUF_POOL);
 80013fc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001400:	210c      	movs	r1, #12
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f00e fed4 	bl	80101b0 <pbuf_alloc>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	605a      	str	r2, [r3, #4]

			esTX->p->payload = (void *)"Hello from Client\n\r";
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <tcp_client_poll+0xb8>)
 8001414:	605a      	str	r2, [r3, #4]

			esTX->p->len = sizeof("Hello from Client\n\r");
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2214      	movs	r2, #20
 800141c:	815a      	strh	r2, [r3, #10]

			esTX->p->tot_len = esTX->p->tot_len - esTX->p->len + sizeof("Hello from Client\n\r");
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	891a      	ldrh	r2, [r3, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	895b      	ldrh	r3, [r3, #10]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b29a      	uxth	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	3214      	adds	r2, #20
 8001434:	b292      	uxth	r2, r2
 8001436:	811a      	strh	r2, [r3, #8]
			//tcp_sent(newpcb, tcp_client_sent);

			tcp_client_send(newpcb, esTX);
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f7ff fcb8 	bl	8000db0 <tcp_client_send>

			pbuf_free(esTX->p);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f00f f997 	bl	8010778 <pbuf_free>

			esTX->p = NULL;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	e014      	b.n	800147c <tcp_client_poll+0xa0>

		}
		else if (es->p != NULL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <tcp_client_poll+0x8a>

//			tcp_sent(newpcb, tcp_client_sent);
//
//			tcp_client_send(newpcb, es);

			pbuf_free(es->p);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f00f f98a 	bl	8010778 <pbuf_free>
 8001464:	e00a      	b.n	800147c <tcp_client_poll+0xa0>

		}

		else
		{
			if (es->state == ES_C_CLOSE)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d106      	bne.n	800147c <tcp_client_poll+0xa0>
			{
				tcp_client_connectin_close(newpcb, es);
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f7ff fd4b 	bl	8000f0c <tcp_client_connectin_close>

				mem_free(es);
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f00d ff96 	bl	800f3a8 <mem_free>

			}
		}

		esBuff->state = es->state;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <tcp_client_poll+0xbc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	701a      	strb	r2, [r3, #0]

	}

	return ERR_OK;
 8001486:	2300      	movs	r3, #0

}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000437 	.word	0x20000437
 8001494:	0801df6c 	.word	0x0801df6c
 8001498:	2000043c 	.word	0x2000043c

0800149c <tcp_client_err>:
static void tcp_client_err(void *arg, err_t err)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *) arg;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60fb      	str	r3, [r7, #12]

	mem_free(es);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f00d ff7b 	bl	800f3a8 <mem_free>

}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014c0:	f7ff fc64 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	; (8001508 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f01b fec3 	bl	801d274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff f845 	bl	800057c <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001500:	08021188 	.word	0x08021188
  ldr r2, =_sbss
 8001504:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001508:	2000acf4 	.word	0x2000acf4

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>

0800150e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <DP83848_RegisterBusIO+0x28>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <DP83848_RegisterBusIO+0x28>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <DP83848_RegisterBusIO+0x28>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e014      	b.n	8001566 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d17c      	bne.n	800168c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e01c      	b.n	80015e6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f107 0208 	add.w	r2, r7, #8
 80015b4:	2119      	movs	r1, #25
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	4798      	blx	r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da03      	bge.n	80015c8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80015c0:	f06f 0304 	mvn.w	r3, #4
 80015c4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015c6:	e00b      	b.n	80015e0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d105      	bne.n	80015e0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
         break;
 80015de:	e005      	b.n	80015ec <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b1f      	cmp	r3, #31
 80015ea:	d9df      	bls.n	80015ac <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b1f      	cmp	r3, #31
 80015f2:	d902      	bls.n	80015fa <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80015f4:	f06f 0302 	mvn.w	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d145      	bne.n	800168c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6810      	ldr	r0, [r2, #0]
 8001608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800160c:	2100      	movs	r1, #0
 800160e:	4798      	blx	r3
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	db37      	blt.n	8001686 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6810      	ldr	r0, [r2, #0]
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	2100      	movs	r1, #0
 8001624:	4798      	blx	r3
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	db28      	blt.n	800167e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4798      	blx	r3
 8001632:	4603      	mov	r3, r0
 8001634:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001636:	e01c      	b.n	8001672 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4798      	blx	r3
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800164a:	d80e      	bhi.n	800166a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6810      	ldr	r0, [r2, #0]
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	2100      	movs	r1, #0
 800165a:	4798      	blx	r3
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	da07      	bge.n	8001672 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001662:	f06f 0304 	mvn.w	r3, #4
 8001666:	613b      	str	r3, [r7, #16]
                 break;
 8001668:	e010      	b.n	800168c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800166a:	f06f 0301 	mvn.w	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
               break;
 8001670:	e00c      	b.n	800168c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1dd      	bne.n	8001638 <DP83848_Init+0xc6>
 800167c:	e006      	b.n	800168c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 800167e:	f06f 0304 	mvn.w	r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	e002      	b.n	800168c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8001686:	f06f 0303 	mvn.w	r3, #3
 800168a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d112      	bne.n	80016b8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4798      	blx	r3
 8001698:	4603      	mov	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 800169c:	bf00      	nop
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4798      	blx	r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016b0:	d9f5      	bls.n	800169e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80016b8:	693b      	ldr	r3, [r7, #16]
 }
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6810      	ldr	r0, [r2, #0]
 80016d6:	f107 020c 	add.w	r2, r7, #12
 80016da:	2101      	movs	r1, #1
 80016dc:	4798      	blx	r3
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da02      	bge.n	80016ea <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80016e4:	f06f 0304 	mvn.w	r3, #4
 80016e8:	e06e      	b.n	80017c8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6810      	ldr	r0, [r2, #0]
 80016f2:	f107 020c 	add.w	r2, r7, #12
 80016f6:	2101      	movs	r1, #1
 80016f8:	4798      	blx	r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da02      	bge.n	8001706 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001700:	f06f 0304 	mvn.w	r3, #4
 8001704:	e060      	b.n	80017c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001710:	2301      	movs	r3, #1
 8001712:	e059      	b.n	80017c8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6810      	ldr	r0, [r2, #0]
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	2100      	movs	r1, #0
 8001722:	4798      	blx	r3
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	da02      	bge.n	8001730 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800172a:	f06f 0304 	mvn.w	r3, #4
 800172e:	e04b      	b.n	80017c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11b      	bne.n	8001772 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <DP83848_GetLinkState+0x90>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800174e:	2302      	movs	r3, #2
 8001750:	e03a      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800175c:	2303      	movs	r3, #3
 800175e:	e033      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800176a:	2304      	movs	r3, #4
 800176c:	e02c      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800176e:	2305      	movs	r3, #5
 8001770:	e02a      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6810      	ldr	r0, [r2, #0]
 800177a:	f107 020c 	add.w	r2, r7, #12
 800177e:	2110      	movs	r1, #16
 8001780:	4798      	blx	r3
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	da02      	bge.n	800178e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001788:	f06f 0304 	mvn.w	r3, #4
 800178c:	e01c      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001798:	2306      	movs	r3, #6
 800179a:	e015      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0306 	and.w	r3, r3, #6
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d101      	bne.n	80017aa <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80017a6:	2302      	movs	r3, #2
 80017a8:	e00e      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f003 0306 	and.w	r3, r3, #6
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e007      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0306 	and.w	r3, r3, #6
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d101      	bne.n	80017c6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80017c2:	2304      	movs	r3, #4
 80017c4:	e000      	b.n	80017c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80017c6:	2305      	movs	r3, #5
    }
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <HAL_Init+0x40>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_Init+0x40>)
 80017e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_Init+0x40>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f94f 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff f83a 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f967 	bl	8001b06 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 f92f 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	20000008 	.word	0x20000008
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000448 	.word	0x20000448

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000448 	.word	0x20000448

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff feb6 	bl	800189c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e099      	b.n	8001c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5c:	e00f      	b.n	8001b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5e:	f7ff fe9d 	bl	800189c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d908      	bls.n	8001b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e078      	b.n	8001c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e8      	bne.n	8001b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_DMA_Init+0x158>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4313      	orrs	r3, r2
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d117      	bne.n	8001c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb01 	bl	800222c <DMA_CheckFifoParam>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e016      	b.n	8001c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fab8 	bl	80021c0 <DMA_CalcBaseAndBitshift>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	223f      	movs	r2, #63	; 0x3f
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	f010803f 	.word	0xf010803f

08001c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_DMA_Start_IT+0x26>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e040      	b.n	8001d24 <HAL_DMA_Start_IT+0xa8>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d12f      	bne.n	8001d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fa4a 	bl	8002164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	223f      	movs	r2, #63	; 0x3f
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0216 	orr.w	r2, r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0208 	orr.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e005      	b.n	8001d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d3a:	f7ff fdaf 	bl	800189c <HAL_GetTick>
 8001d3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e052      	b.n	8001e04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0216 	bic.w	r2, r2, #22
 8001d6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_DMA_Abort+0x62>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0208 	bic.w	r2, r2, #8
 8001d9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dae:	e013      	b.n	8001dd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db0:	f7ff fd74 	bl	800189c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e015      	b.n	8001e04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e4      	bne.n	8001db0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	223f      	movs	r2, #63	; 0x3f
 8001dec:	409a      	lsls	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d004      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00c      	b.n	8001e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e5c:	4b8e      	ldr	r3, [pc, #568]	; (8002098 <HAL_DMA_IRQHandler+0x248>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a8e      	ldr	r2, [pc, #568]	; (800209c <HAL_DMA_IRQHandler+0x24c>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a9b      	lsrs	r3, r3, #10
 8001e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0204 	bic.w	r2, r2, #4
 8001ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d012      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2204      	movs	r2, #4
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d043      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d03c      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d108      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d024      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
 8001f7e:	e01f      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e016      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0208 	bic.w	r2, r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 808f 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8087 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d136      	bne.n	8002068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0216 	bic.w	r2, r2, #22
 8002008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <HAL_DMA_IRQHandler+0x1da>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0208 	bic.w	r2, r2, #8
 8002038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	d07e      	beq.n	800215c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
        }
        return;
 8002066:	e079      	b.n	800215c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002088:	2b00      	cmp	r3, #0
 800208a:	d031      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	e02c      	b.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
 8002096:	bf00      	nop
 8002098:	20000000 	.word	0x20000000
 800209c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
 80020b0:	e01e      	b.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10f      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0210 	bic.w	r2, r2, #16
 80020ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d032      	beq.n	800215e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d022      	beq.n	800214a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2205      	movs	r2, #5
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3301      	adds	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	d307      	bcc.n	8002138 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_DMA_IRQHandler+0x2cc>
 8002136:	e000      	b.n	800213a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002138:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
 800215a:	e000      	b.n	800215e <HAL_DMA_IRQHandler+0x30e>
        return;
 800215c:	bf00      	nop
    }
  }
}
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d108      	bne.n	80021a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021a2:	e007      	b.n	80021b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3b10      	subs	r3, #16
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <DMA_CalcBaseAndBitshift+0x64>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <DMA_CalcBaseAndBitshift+0x68>)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d909      	bls.n	8002202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	1d1a      	adds	r2, r3, #4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002200:	e007      	b.n	8002212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	aaaaaaab 	.word	0xaaaaaaab
 8002228:	08020e4c 	.word	0x08020e4c

0800222c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11f      	bne.n	8002286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d856      	bhi.n	80022fa <DMA_CheckFifoParam+0xce>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <DMA_CheckFifoParam+0x28>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002265 	.word	0x08002265
 8002258:	08002277 	.word	0x08002277
 800225c:	08002265 	.word	0x08002265
 8002260:	080022fb 	.word	0x080022fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d046      	beq.n	80022fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002274:	e043      	b.n	80022fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800227e:	d140      	bne.n	8002302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002284:	e03d      	b.n	8002302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228e:	d121      	bne.n	80022d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d837      	bhi.n	8002306 <DMA_CheckFifoParam+0xda>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <DMA_CheckFifoParam+0x70>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022b3 	.word	0x080022b3
 80022a4:	080022ad 	.word	0x080022ad
 80022a8:	080022c5 	.word	0x080022c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      break;
 80022b0:	e030      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d025      	beq.n	800230a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c2:	e022      	b.n	800230a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022d2:	e01c      	b.n	800230e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d903      	bls.n	80022e2 <DMA_CheckFifoParam+0xb6>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d003      	beq.n	80022e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022e0:	e018      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
      break;
 80022e6:	e015      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00e      	beq.n	8002312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e00b      	b.n	8002312 <DMA_CheckFifoParam+0xe6>
      break;
 80022fa:	bf00      	nop
 80022fc:	e00a      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;
 80022fe:	bf00      	nop
 8002300:	e008      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
 8002304:	e006      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;
 8002306:	bf00      	nop
 8002308:	e004      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
 800230c:	e002      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;   
 800230e:	bf00      	nop
 8002310:	e000      	b.n	8002314 <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
    }
  } 
  
  return status; 
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06c      	b.n	8002410 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2223      	movs	r2, #35	; 0x23
 8002344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f008 f9c7 	bl	800a6dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_ETH_Init+0xf4>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_ETH_Init+0xf4>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_ETH_Init+0xf4>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_ETH_Init+0xf8>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_ETH_Init+0xf8>)
 8002370:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002374:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_ETH_Init+0xf8>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4927      	ldr	r1, [pc, #156]	; (800241c <HAL_ETH_Init+0xf8>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_ETH_Init+0xf8>)
 8002386:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800239e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a0:	f7ff fa7c 	bl	800189c <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023a6:	e011      	b.n	80023cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023a8:	f7ff fa78 	bl	800189c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023b6:	d909      	bls.n	80023cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2204      	movs	r2, #4
 80023bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	22e0      	movs	r2, #224	; 0xe0
 80023c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e021      	b.n	8002410 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e4      	bne.n	80023a8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fdfc 	bl	8002fdc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fea3 	bl	8003130 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fef9 	bl	80031e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	461a      	mov	r2, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fe61 	bl	80030c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2210      	movs	r2, #16
 800240a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800

08002420 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242e:	2b10      	cmp	r3, #16
 8002430:	d150      	bne.n	80024d4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2223      	movs	r2, #35	; 0x23
 8002436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f9fd 	bl	8002840 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0208 	orr.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fa28 	bl	80018b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0204 	orr.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff fa15 	bl	80018b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fc42 	bl	8002d1c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ae:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2223      	movs	r2, #35	; 0x23
 80024cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	2b23      	cmp	r3, #35	; 0x23
 80024ee:	d14a      	bne.n	8002586 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2223      	movs	r2, #35	; 0x23
 80024f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800250a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	f023 0302 	bic.w	r3, r3, #2
 8002522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002526:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff f9b7 	bl	80018b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fbe4 	bl	8002d1c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0208 	bic.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff f9a1 	bl	80018b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2210      	movs	r2, #16
 800257e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07c      	b.n	80026b0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025bc:	2b23      	cmp	r3, #35	; 0x23
 80025be:	d176      	bne.n	80026ae <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80025c0:	2200      	movs	r2, #0
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fe79 	bl	80032bc <ETH_Prepare_Tx_Descriptors>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f043 0202 	orr.w	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e065      	b.n	80026b0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80025e4:	f3bf 8f4f 	dsb	sy
}
 80025e8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3206      	adds	r2, #6
 80025f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	2b03      	cmp	r3, #3
 8002608:	d904      	bls.n	8002614 <HAL_ETH_Transmit+0x84>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	1f1a      	subs	r2, r3, #4
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3106      	adds	r1, #6
 8002620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002628:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800262a:	f7ff f937 	bl	800189c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002630:	e037      	b.n	80026a2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d011      	beq.n	8002668 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f043 0208 	orr.w	r2, r3, #8
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e023      	b.n	80026b0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d018      	beq.n	80026a2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7ff f914 	bl	800189c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d302      	bcc.n	8002686 <HAL_ETH_Transmit+0xf6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f043 0204 	orr.w	r2, r3, #4
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800269c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e006      	b.n	80026b0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dbc3      	blt.n	8002632 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0a8      	b.n	8002836 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ea:	2b23      	cmp	r3, #35	; 0x23
 80026ec:	d001      	beq.n	80026f2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0a1      	b.n	8002836 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	3212      	adds	r2, #18
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	f1c3 0304 	rsb	r3, r3, #4
 800270c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800270e:	e06a      	b.n	80027e6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_ETH_ReadData+0x88>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d040      	beq.n	80027c2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002774:	3b04      	subs	r3, #4
 8002776:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800279c:	461a      	mov	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f008 f94b 	bl	800aa3c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	441a      	add	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d902      	bls.n	80027d4 <HAL_ETH_ReadData+0x11c>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b04      	subs	r3, #4
 80027d2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	3212      	adds	r2, #18
 80027da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db06      	blt.n	80027fc <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d202      	bcs.n	80027fc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d089      	beq.n	8002710 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f815 	bl	8002840 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800284c:	2301      	movs	r3, #1
 800284e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002854:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	3212      	adds	r2, #18
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002868:	e03d      	b.n	80028e6 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d112      	bne.n	8002898 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4618      	mov	r0, r3
 8002878:	f008 f8b0 	bl	800a9dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	74fb      	strb	r3, [r7, #19]
 8002886:	e007      	b.n	8002898 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	461a      	mov	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	461a      	mov	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <ETH_UpdateDescriptor+0xfc>)
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e003      	b.n	80028b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80028b4:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d902      	bls.n	80028d4 <ETH_UpdateDescriptor+0x94>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	3212      	adds	r2, #18
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	617b      	str	r3, [r7, #20]
      desccount--;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <ETH_UpdateDescriptor+0xb2>
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1bb      	bne.n	800286a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d01a      	beq.n	8002932 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002906:	f3bf 8f5f 	dmb	sy
}
 800290a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6919      	ldr	r1, [r3, #16]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	18ca      	adds	r2, r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002924:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002932:	bf00      	nop
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	80004600 	.word	0x80004600

08002940 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 031c 	and.w	r3, r3, #28
 800295c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	02db      	lsls	r3, r3, #11
 8002962:	b29b      	uxth	r3, r3
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0302 	bic.w	r3, r3, #2
 800297e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002990:	f7fe ff84 	bl	800189c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002996:	e00d      	b.n	80029b4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002998:	f7fe ff80 	bl	800189c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d301      	bcc.n	80029ac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e010      	b.n	80029ce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ec      	bne.n	8002998 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 031c 	and.w	r3, r3, #28
 80029f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	02db      	lsls	r3, r3, #11
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	019b      	lsls	r3, r3, #6
 8002a04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a30:	f7fe ff34 	bl	800189c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a36:	e00d      	b.n	8002a54 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a38:	f7fe ff30 	bl	800189c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a46:	d301      	bcc.n	8002a4c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e009      	b.n	8002a60 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ec      	bne.n	8002a38 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0d9      	b.n	8002c30 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e00b      	b.n	8002c68 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d105      	bne.n	8002c66 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c5a:	6839      	ldr	r1, [r7, #0]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f883 	bl	8002d68 <ETH_SetMACConfig>

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 031c 	bic.w	r3, r3, #28
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c88:	f002 fc98 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8002c8c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d908      	bls.n	8002ca8 <HAL_ETH_SetMDIOClockRange+0x38>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d804      	bhi.n	8002ca8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e027      	b.n	8002cf8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d908      	bls.n	8002cc2 <HAL_ETH_SetMDIOClockRange+0x52>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d204      	bcs.n	8002cc2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f043 030c 	orr.w	r3, r3, #12
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e01a      	b.n	8002cf8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d303      	bcc.n	8002cd2 <HAL_ETH_SetMDIOClockRange+0x62>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d911      	bls.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d908      	bls.n	8002cec <HAL_ETH_SetMDIOClockRange+0x7c>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d804      	bhi.n	8002cec <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e005      	b.n	8002cf8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e000      	b.n	8002cf8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002cf6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	01312cff 	.word	0x01312cff
 8002d0c:	02160ebf 	.word	0x02160ebf
 8002d10:	03938700 	.word	0x03938700
 8002d14:	05f5e0ff 	.word	0x05f5e0ff
 8002d18:	08f0d17f 	.word	0x08f0d17f

08002d1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d3e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7fe fdb1 	bl	80018b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d5c:	6193      	str	r3, [r2, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <ETH_SetMACConfig+0x15c>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	7c1b      	ldrb	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <ETH_SetMACConfig+0x28>
 8002d8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d8e:	e000      	b.n	8002d92 <ETH_SetMACConfig+0x2a>
 8002d90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	7c5b      	ldrb	r3, [r3, #17]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <ETH_SetMACConfig+0x38>
 8002d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d9e:	e000      	b.n	8002da2 <ETH_SetMACConfig+0x3a>
 8002da0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002da2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7fdb      	ldrb	r3, [r3, #31]
 8002dae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002db0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002db6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	7f92      	ldrb	r2, [r2, #30]
 8002dbc:	2a00      	cmp	r2, #0
 8002dbe:	d102      	bne.n	8002dc6 <ETH_SetMACConfig+0x5e>
 8002dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc4:	e000      	b.n	8002dc8 <ETH_SetMACConfig+0x60>
 8002dc6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	7f1b      	ldrb	r3, [r3, #28]
 8002dce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dd0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	791b      	ldrb	r3, [r3, #4]
 8002ddc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d102      	bne.n	8002df0 <ETH_SetMACConfig+0x88>
 8002dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dee:	e000      	b.n	8002df2 <ETH_SetMACConfig+0x8a>
 8002df0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002df2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	7bdb      	ldrb	r3, [r3, #15]
 8002df8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dfa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fe fd46 	bl	80018b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	d101      	bne.n	8002e56 <ETH_SetMACConfig+0xee>
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	e000      	b.n	8002e58 <ETH_SetMACConfig+0xf0>
 8002e56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002e66:	2a01      	cmp	r2, #1
 8002e68:	d101      	bne.n	8002e6e <ETH_SetMACConfig+0x106>
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	e000      	b.n	8002e70 <ETH_SetMACConfig+0x108>
 8002e6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002e78:	2a01      	cmp	r2, #1
 8002e7a:	d101      	bne.n	8002e80 <ETH_SetMACConfig+0x118>
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	e000      	b.n	8002e82 <ETH_SetMACConfig+0x11a>
 8002e80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e8a:	2a01      	cmp	r2, #1
 8002e8c:	d101      	bne.n	8002e92 <ETH_SetMACConfig+0x12a>
 8002e8e:	2202      	movs	r2, #2
 8002e90:	e000      	b.n	8002e94 <ETH_SetMACConfig+0x12c>
 8002e92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7fe fd01 	bl	80018b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	ff20810f 	.word	0xff20810f

08002ec8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <ETH_SetDMAConfig+0x110>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	7b1b      	ldrb	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <ETH_SetDMAConfig+0x2c>
 8002eee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ef2:	e000      	b.n	8002ef6 <ETH_SetDMAConfig+0x2e>
 8002ef4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	7b5b      	ldrb	r3, [r3, #13]
 8002efa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002efc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	7f52      	ldrb	r2, [r2, #29]
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d102      	bne.n	8002f0c <ETH_SetDMAConfig+0x44>
 8002f06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f0a:	e000      	b.n	8002f0e <ETH_SetDMAConfig+0x46>
 8002f0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7b9b      	ldrb	r3, [r3, #14]
 8002f14:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f16:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	7f1b      	ldrb	r3, [r3, #28]
 8002f22:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	7f9b      	ldrb	r3, [r3, #30]
 8002f2a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f2c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f3a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fe fca8 	bl	80018b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	791b      	ldrb	r3, [r3, #4]
 8002f76:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f7c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f82:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f88:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f90:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f92:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f9a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fa0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fe fc79 	bl	80018b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	f8de3f23 	.word	0xf8de3f23

08002fdc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0a6      	sub	sp, #152	; 0x98
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003018:	2300      	movs	r3, #0
 800301a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003022:	2300      	movs	r3, #0
 8003024:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800303e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003048:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003050:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fe86 	bl	8002d68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800305c:	2301      	movs	r3, #1
 800305e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003060:	2301      	movs	r3, #1
 8003062:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003088:	2301      	movs	r3, #1
 800308a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003096:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800309c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff08 	bl	8002ec8 <ETH_SetDMAConfig>
}
 80030b8:	bf00      	nop
 80030ba:	3798      	adds	r7, #152	; 0x98
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3305      	adds	r3, #5
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	3204      	adds	r2, #4
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <ETH_MACAddressConfig+0x68>)
 80030e2:	4413      	add	r3, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3303      	adds	r3, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	061a      	lsls	r2, r3, #24
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3302      	adds	r3, #2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	4313      	orrs	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <ETH_MACAddressConfig+0x6c>)
 8003112:	4413      	add	r3, r2
 8003114:	461a      	mov	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40028040 	.word	0x40028040
 800312c:	40028044 	.word	0x40028044

08003130 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e03e      	b.n	80031bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	3206      	adds	r2, #6
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d80c      	bhi.n	80031a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	e004      	b.n	80031aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3301      	adds	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d9bd      	bls.n	800313e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d4:	611a      	str	r2, [r3, #16]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e046      	b.n	800327e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6919      	ldr	r1, [r3, #16]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800322c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003234:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	3212      	adds	r2, #18
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d80c      	bhi.n	800326e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6919      	ldr	r1, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	e004      	b.n	8003278 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d9b5      	bls.n	80031f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ae:	60da      	str	r2, [r3, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80032bc:	b480      	push	{r7}
 80032be:	b08d      	sub	sp, #52	; 0x34
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3318      	adds	r3, #24
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fe:	d007      	beq.n	8003310 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	3304      	adds	r3, #4
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003310:	2302      	movs	r3, #2
 8003312:	e103      	b.n	800351c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800332c:	f023 031f 	bic.w	r3, r3, #31
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	6852      	ldr	r2, [r2, #4]
 8003334:	431a      	orrs	r2, r3
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	431a      	orrs	r2, r3
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800339a:	f3bf 8f5f 	dmb	sy
}
 800339e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80033ac:	e084      	b.n	80034b8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e005      	b.n	80033da <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	3301      	adds	r3, #1
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d902      	bls.n	80033ec <ETH_Prepare_Tx_Descriptors+0x130>
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	3b04      	subs	r3, #4
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800340a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340e:	d007      	beq.n	8003420 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	3304      	adds	r3, #4
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d029      	beq.n	8003474 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	e019      	b.n	8003468 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003434:	f3bf 8f5f 	dmb	sy
}
 8003438:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	3301      	adds	r3, #1
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	2b03      	cmp	r3, #3
 8003450:	d902      	bls.n	8003458 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	3b04      	subs	r3, #4
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	3301      	adds	r3, #1
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
 8003468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	429a      	cmp	r2, r3
 800346e:	d3e1      	bcc.n	8003434 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	e053      	b.n	800351c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	3301      	adds	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003492:	f023 031f 	bic.w	r3, r3, #31
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	431a      	orrs	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80034a6:	f3bf 8f5f 	dmb	sy
}
 80034aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f47f af76 	bne.w	80033ae <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e005      	b.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f2:	6979      	ldr	r1, [r7, #20]
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	3304      	adds	r3, #4
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003502:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	4413      	add	r3, r2
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003516:	b662      	cpsie	i
}
 8003518:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3734      	adds	r7, #52	; 0x34
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e16b      	b.n	800381c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	f040 815a 	bne.w	8003816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d005      	beq.n	800357a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003576:	2b02      	cmp	r3, #2
 8003578:	d130      	bne.n	80035dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 0201 	and.w	r2, r3, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d017      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d123      	bne.n	800366c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80b4 	beq.w	8003816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b60      	ldr	r3, [pc, #384]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4a5f      	ldr	r2, [pc, #380]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036bc:	6453      	str	r3, [r2, #68]	; 0x44
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_GPIO_Init+0x30c>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ca:	4a5b      	ldr	r2, [pc, #364]	; (8003838 <HAL_GPIO_Init+0x310>)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_GPIO_Init+0x314>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <HAL_GPIO_Init+0x226>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_GPIO_Init+0x318>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_Init+0x222>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_GPIO_Init+0x31c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_Init+0x21e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_GPIO_Init+0x320>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0x21a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4e      	ldr	r2, [pc, #312]	; (800384c <HAL_GPIO_Init+0x324>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0x216>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_GPIO_Init+0x328>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_Init+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4c      	ldr	r2, [pc, #304]	; (8003854 <HAL_GPIO_Init+0x32c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x20e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4b      	ldr	r2, [pc, #300]	; (8003858 <HAL_GPIO_Init+0x330>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_Init+0x20a>
 800372e:	2307      	movs	r3, #7
 8003730:	e00e      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003732:	2308      	movs	r3, #8
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003736:	2306      	movs	r3, #6
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x228>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x228>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x310>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_GPIO_Init+0x334>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003792:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_GPIO_Init+0x334>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_GPIO_Init+0x334>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <HAL_GPIO_Init+0x334>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_GPIO_Init+0x334>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_GPIO_Init+0x334>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_GPIO_Init+0x334>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <HAL_GPIO_Init+0x334>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae90 	bls.w	8003544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40021c00 	.word	0x40021c00
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e101      	b.n	8003a76 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f018 fed7 	bl	801c640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a0:	d102      	bne.n	80038a8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f005 f934 	bl	8008b1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7c1a      	ldrb	r2, [r3, #16]
 80038ba:	f88d 2000 	strb.w	r2, [sp]
 80038be:	3304      	adds	r3, #4
 80038c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c2:	f005 f813 	bl	80088ec <USB_CoreInit>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0ce      	b.n	8003a76 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 f92c 	bl	8008b3c <USB_SetCurrentMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0bf      	b.n	8003a76 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e04a      	b.n	8003992 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3315      	adds	r3, #21
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3314      	adds	r3, #20
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	b298      	uxth	r0, r3
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	332e      	adds	r3, #46	; 0x2e
 8003938:	4602      	mov	r2, r0
 800393a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3318      	adds	r3, #24
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	331c      	adds	r3, #28
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3320      	adds	r3, #32
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3324      	adds	r3, #36	; 0x24
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	3301      	adds	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	429a      	cmp	r2, r3
 800399a:	d3af      	bcc.n	80038fc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	e044      	b.n	8003a2c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	791b      	ldrb	r3, [r3, #4]
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3b5      	bcc.n	80039a2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7c1a      	ldrb	r2, [r3, #16]
 8003a3e:	f88d 2000 	strb.w	r2, [sp]
 8003a42:	3304      	adds	r3, #4
 8003a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a46:	f005 f8c5 	bl	8008bd4 <USB_DevInit>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e00c      	b.n	8003a76 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f006 f909 	bl	8009c86 <USB_DevDisconnect>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_Start+0x1c>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e022      	b.n	8003ae0 <HAL_PCD_Start+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f816 	bl	8008af8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f006 f8b7 	bl	8009c44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b08d      	sub	sp, #52	; 0x34
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f006 f975 	bl	8009dee <USB_GetMode>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 848c 	bne.w	8004424 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f006 f8d9 	bl	8009cc8 <USB_ReadInterrupts>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8482 	beq.w	8004422 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f006 f8c6 	bl	8009cc8 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d107      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 0202 	and.w	r2, r2, #2
 8003b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f006 f8b4 	bl	8009cc8 <USB_ReadInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d161      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0210 	bic.w	r2, r2, #16
 8003b78:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	0c5b      	lsrs	r3, r3, #17
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d124      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d035      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a38      	ldr	r0, [r7, #32]
 8003bc6:	f005 feeb 	bl	80099a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd6:	441a      	add	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be8:	441a      	add	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	615a      	str	r2, [r3, #20]
 8003bee:	e016      	b.n	8003c1e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	0c5b      	lsrs	r3, r3, #17
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d110      	bne.n	8003c1e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c02:	2208      	movs	r2, #8
 8003c04:	4619      	mov	r1, r3
 8003c06:	6a38      	ldr	r0, [r7, #32]
 8003c08:	f005 feca 	bl	80099a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c18:	441a      	add	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0210 	orr.w	r2, r2, #16
 8003c2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f006 f848 	bl	8009cc8 <USB_ReadInterrupts>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c42:	f040 80a7 	bne.w	8003d94 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f006 f84d 	bl	8009cee <USB_ReadDevAllOutEpInterrupt>
 8003c54:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c56:	e099      	b.n	8003d8c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 808e 	beq.w	8003d80 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 f871 	bl	8009d56 <USB_ReadDevOutEPInterrupt>
 8003c74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2301      	movs	r3, #1
 8003c90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fecf 	bl	8004a38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00c      	beq.n	8003cbe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 ffa5 	bl	8004c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d030      	beq.n	8003d46 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d109      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d02:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	78db      	ldrb	r3, [r3, #3]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d108      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f018 fdcc 	bl	801c8cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	2302      	movs	r3, #2
 8003d44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2320      	movs	r3, #32
 8003d60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	3301      	adds	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f47f af62 	bne.w	8003c58 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f005 ff95 	bl	8009cc8 <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da8:	f040 80db 	bne.w	8003f62 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 ffb6 	bl	8009d22 <USB_ReadDevAllInEpInterrupt>
 8003db6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dbc:	e0cd      	b.n	8003f5a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80c2 	beq.w	8003f4e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f005 ffdc 	bl	8009d92 <USB_ReadDevInEPInterrupt>
 8003dda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d057      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	2201      	movs	r2, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69f9      	ldr	r1, [r7, #28]
 8003e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e06:	4013      	ands	r3, r2
 8003e08:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	461a      	mov	r2, r3
 8003e18:	2301      	movs	r3, #1
 8003e1a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	799b      	ldrb	r3, [r3, #6]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d132      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3320      	adds	r3, #32
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4403      	add	r3, r0
 8003e44:	331c      	adds	r3, #28
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4419      	add	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4403      	add	r3, r0
 8003e58:	3320      	adds	r3, #32
 8003e5a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d113      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x3a2>
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3324      	adds	r3, #36	; 0x24
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e82:	461a      	mov	r2, r3
 8003e84:	2101      	movs	r1, #1
 8003e86:	f005 ffe3 	bl	8009e50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f018 fc96 	bl	801c7c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	461a      	mov	r2, r3
 8003eae:	2308      	movs	r3, #8
 8003eb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2310      	movs	r3, #16
 8003ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2340      	movs	r3, #64	; 0x40
 8003ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d023      	beq.n	8003f3c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef6:	6a38      	ldr	r0, [r7, #32]
 8003ef8:	f004 ffd0 	bl	8008e9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	3310      	adds	r3, #16
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	78db      	ldrb	r3, [r3, #3]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f018 fce3 	bl	801c8f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	461a      	mov	r2, r3
 8003f38:	2302      	movs	r3, #2
 8003f3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fce8 	bl	800491e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f47f af2e 	bne.w	8003dbe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f005 feae 	bl	8009cc8 <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f76:	d122      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fecf 	bl	8004d44 <HAL_PCDEx_LPM_Callback>
 8003fa6:	e002      	b.n	8003fae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f018 fc81 	bl	801c8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 fe80 	bl	8009cc8 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd2:	d112      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d102      	bne.n	8003fea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f018 fc3d 	bl	801c864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ff8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f005 fe62 	bl	8009cc8 <USB_ReadInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	f040 80b7 	bne.w	8004180 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2110      	movs	r1, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f004 ff35 	bl	8008e9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004032:	2300      	movs	r3, #0
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004036:	e046      	b.n	80040c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800404a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800406a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800407e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800409e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	3301      	adds	r3, #1
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	791b      	ldrb	r3, [r3, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d3b2      	bcc.n	8004038 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7bdb      	ldrb	r3, [r3, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fe:	f043 030b 	orr.w	r3, r3, #11
 8004102:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004114:	f043 030b 	orr.w	r3, r3, #11
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	e015      	b.n	8004148 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800412e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004132:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004142:	f043 030b 	orr.w	r3, r3, #11
 8004146:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004156:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800415a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800416a:	461a      	mov	r2, r3
 800416c:	f005 fe70 	bl	8009e50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800417e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fd9f 	bl	8009cc8 <USB_ReadInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004194:	d123      	bne.n	80041de <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f005 fe35 	bl	8009e0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 fef2 	bl	8008f8e <USB_GetDevSpeed>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681c      	ldr	r4, [r3, #0]
 80041b6:	f001 fa01 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80041ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041c0:	461a      	mov	r2, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f004 fbf6 	bl	80089b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f018 fb22 	bl	801c812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f005 fd70 	bl	8009cc8 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10a      	bne.n	8004208 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f018 faff 	bl	801c7f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f002 0208 	and.w	r2, r2, #8
 8004206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f005 fd5b 	bl	8009cc8 <USB_ReadInterrupts>
 8004212:	4603      	mov	r3, r0
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d123      	bne.n	8004264 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004228:	2301      	movs	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	e014      	b.n	8004258 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb08 	bl	8004862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	461a      	mov	r2, r3
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	4293      	cmp	r3, r2
 8004262:	d3e4      	bcc.n	800422e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f005 fd2d 	bl	8009cc8 <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004278:	d13c      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800427a:	2301      	movs	r3, #1
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e02b      	b.n	80042d8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3318      	adds	r3, #24
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d115      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da12      	bge.n	80042d2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3317      	adds	r3, #23
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fac8 	bl	8004862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	3301      	adds	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	461a      	mov	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d3cd      	bcc.n	8004280 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 fce5 	bl	8009cc8 <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004308:	d156      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800430a:	2301      	movs	r3, #1
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e045      	b.n	800439c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d12e      	bne.n	8004396 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004338:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800433a:	2b00      	cmp	r3, #0
 800433c:	da2b      	bge.n	8004396 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800434a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800434e:	429a      	cmp	r2, r3
 8004350:	d121      	bne.n	8004396 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004392:	6053      	str	r3, [r2, #4]
            break;
 8004394:	e008      	b.n	80043a8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	3301      	adds	r3, #1
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	791b      	ldrb	r3, [r3, #4]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d3b3      	bcc.n	8004310 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f005 fc83 	bl	8009cc8 <USB_ReadInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d10a      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f018 faa0 	bl	801c914 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 fc6d 	bl	8009cc8 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d115      	bne.n	8004424 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f018 fa90 	bl	801c930 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e000      	b.n	8004424 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004422:	bf00      	nop
    }
  }
}
 8004424:	3734      	adds	r7, #52	; 0x34
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}

0800442a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_PCD_SetAddress+0x1a>
 8004440:	2302      	movs	r3, #2
 8004442:	e012      	b.n	800446a <HAL_PCD_SetAddress+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f005 fbcc 	bl	8009bf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	4608      	mov	r0, r1
 800447c:	4611      	mov	r1, r2
 800447e:	461a      	mov	r2, r3
 8004480:	4603      	mov	r3, r0
 8004482:	70fb      	strb	r3, [r7, #3]
 8004484:	460b      	mov	r3, r1
 8004486:	803b      	strh	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004494:	2b00      	cmp	r3, #0
 8004496:	da0f      	bge.n	80044b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 020f 	and.w	r2, r3, #15
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	3310      	adds	r3, #16
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	3304      	adds	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	705a      	strb	r2, [r3, #1]
 80044b6:	e00f      	b.n	80044d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044e4:	883a      	ldrh	r2, [r7, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	78ba      	ldrb	r2, [r7, #2]
 80044ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004502:	78bb      	ldrb	r3, [r7, #2]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d102      	bne.n	800450e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_PCD_EP_Open+0xaa>
 8004518:	2302      	movs	r3, #2
 800451a:	e00e      	b.n	800453a <HAL_PCD_EP_Open+0xc8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	4618      	mov	r0, r3
 800452c:	f004 fd54 	bl	8008fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004538:	7afb      	ldrb	r3, [r7, #11]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800454e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	da0f      	bge.n	8004576 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 020f 	and.w	r2, r3, #15
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	3310      	adds	r3, #16
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	3304      	adds	r3, #4
 800456c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	705a      	strb	r2, [r3, #1]
 8004574:	e00f      	b.n	8004596 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_PCD_EP_Close+0x6e>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e00e      	b.n	80045ce <HAL_PCD_EP_Close+0x8c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	4618      	mov	r0, r3
 80045c0:	f004 fd92 	bl	80090e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	460b      	mov	r3, r1
 80045e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	3304      	adds	r3, #4
 80045fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	b2da      	uxtb	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	799b      	ldrb	r3, [r3, #6]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d102      	bne.n	8004632 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	799b      	ldrb	r3, [r3, #6]
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	f004 fe2f 	bl	80092a0 <USB_EPStartXfer>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	460b      	mov	r3, r1
 800468a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468c:	7afb      	ldrb	r3, [r7, #11]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	3310      	adds	r3, #16
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	3304      	adds	r3, #4
 80046a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2200      	movs	r2, #0
 80046b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2201      	movs	r2, #1
 80046ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046bc:	7afb      	ldrb	r3, [r7, #11]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	799b      	ldrb	r3, [r3, #6]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d102      	bne.n	80046d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	799b      	ldrb	r3, [r3, #6]
 80046de:	461a      	mov	r2, r3
 80046e0:	6979      	ldr	r1, [r7, #20]
 80046e2:	f004 fddd 	bl	80092a0 <USB_EPStartXfer>

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	7912      	ldrb	r2, [r2, #4]
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e04f      	b.n	80047ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800470e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da0f      	bge.n	8004736 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3310      	adds	r3, #16
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	705a      	strb	r2, [r3, #1]
 8004734:	e00d      	b.n	8004752 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_PCD_EP_SetStall+0x82>
 800476e:	2302      	movs	r3, #2
 8004770:	e01d      	b.n	80047ae <HAL_PCD_EP_SetStall+0xbe>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	4618      	mov	r0, r3
 8004782:	f005 f965 	bl	8009a50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7999      	ldrb	r1, [r3, #6]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800479e:	461a      	mov	r2, r3
 80047a0:	f005 fb56 	bl	8009e50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	7912      	ldrb	r2, [r2, #4]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e042      	b.n	800485a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da0f      	bge.n	80047fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	3310      	adds	r3, #16
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	3304      	adds	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	705a      	strb	r2, [r3, #1]
 80047fa:	e00f      	b.n	800481c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	3304      	adds	r3, #4
 8004814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_PCD_EP_ClrStall+0x86>
 8004838:	2302      	movs	r3, #2
 800483a:	e00e      	b.n	800485a <HAL_PCD_EP_ClrStall+0xa4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	4618      	mov	r0, r3
 800484c:	f005 f96e 	bl	8009b2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800486e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004872:	2b00      	cmp	r3, #0
 8004874:	da0c      	bge.n	8004890 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	3310      	adds	r3, #16
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e00c      	b.n	80048aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f004 ff8d 	bl	80097d0 <USB_EPStopXfer>
 80048b6:	4603      	mov	r3, r0
 80048b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048ba:	7afb      	ldrb	r3, [r7, #11]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_PCD_EP_Flush+0x1a>
 80048da:	2302      	movs	r3, #2
 80048dc:	e01b      	b.n	8004916 <HAL_PCD_EP_Flush+0x52>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80048e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da09      	bge.n	8004902 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f004 face 	bl	8008e9c <USB_FlushTxFifo>
 8004900:	e004      	b.n	800490c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f004 fafa 	bl	8008f00 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b08a      	sub	sp, #40	; 0x28
 8004922:	af02      	add	r7, sp, #8
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3310      	adds	r3, #16
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	3304      	adds	r3, #4
 8004944:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d901      	bls.n	8004956 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06b      	b.n	8004a2e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3303      	adds	r3, #3
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800497a:	e02a      	b.n	80049d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	429a      	cmp	r2, r3
 8004990:	d902      	bls.n	8004998 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3303      	adds	r3, #3
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68d9      	ldr	r1, [r3, #12]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4603      	mov	r3, r0
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f004 ffb5 	bl	8009924 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d809      	bhi.n	80049fc <PCD_WriteEmptyTxFifo+0xde>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d203      	bcs.n	80049fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1bf      	bne.n	800497c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d811      	bhi.n	8004a2c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	2201      	movs	r2, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	6939      	ldr	r1, [r7, #16]
 8004a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a28:	4013      	ands	r3, r2
 8004a2a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	333c      	adds	r3, #60	; 0x3c
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d17b      	bne.n	8004b66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4a61      	ldr	r2, [pc, #388]	; (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f240 80b9 	bls.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80b3 	beq.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	e0a7      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2320      	movs	r3, #32
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	e098      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 8093 	bne.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d90f      	bls.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af2:	6093      	str	r3, [r2, #8]
 8004af4:	e07e      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	3304      	adds	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d114      	bne.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b40:	461a      	mov	r2, r3
 8004b42:	2101      	movs	r1, #1
 8004b44:	f005 f984 	bl	8009e50 <USB_EP0_OutStart>
 8004b48:	e006      	b.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f017 fe14 	bl	801c78c <HAL_PCD_DataOutStageCallback>
 8004b64:	e046      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d124      	bne.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]
 8004b8c:	e032      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f017 fdeb 	bl	801c78c <HAL_PCD_DataOutStageCallback>
 8004bb6:	e01d      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d114      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004be0:	461a      	mov	r2, r3
 8004be2:	2100      	movs	r1, #0
 8004be4:	f005 f934 	bl	8009e50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f017 fdcc 	bl	801c78c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	4f54300a 	.word	0x4f54300a
 8004c04:	4f54310a 	.word	0x4f54310a

08004c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	333c      	adds	r3, #60	; 0x3c
 8004c20:	3304      	adds	r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d90e      	bls.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	461a      	mov	r2, r3
 8004c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f017 fd83 	bl	801c768 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d90c      	bls.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	799b      	ldrb	r3, [r3, #6]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2101      	movs	r1, #1
 8004c80:	f005 f8e6 	bl	8009e50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	4f54300a 	.word	0x4f54300a

08004c94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb2:	883b      	ldrh	r3, [r7, #0]
 8004cb4:	0419      	lsls	r1, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc0:	e028      	b.n	8004d14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e00d      	b.n	8004cf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3340      	adds	r3, #64	; 0x40
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3ec      	bcc.n	8004cd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cfc:	883b      	ldrh	r3, [r7, #0]
 8004cfe:	0418      	lsls	r0, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4302      	orrs	r2, r0
 8004d0c:	3340      	adds	r3, #64	; 0x40
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e267      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d075      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7a:	4b88      	ldr	r3, [pc, #544]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4b85      	ldr	r3, [pc, #532]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d157      	bne.n	8004e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e242      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x74>
 8004dc2:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x98>
 8004dda:	4b70      	ldr	r3, [pc, #448]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6f      	ldr	r2, [pc, #444]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b6d      	ldr	r3, [pc, #436]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6c      	ldr	r2, [pc, #432]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004df4:	4b69      	ldr	r3, [pc, #420]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a68      	ldr	r2, [pc, #416]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a65      	ldr	r2, [pc, #404]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fc fd42 	bl	800189c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fc fd3e 	bl	800189c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e207      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xc0>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fd2e 	bl	800189c <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fc fd2a 	bl	800189c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1f3      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b51      	ldr	r3, [pc, #324]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e72:	4b4a      	ldr	r3, [pc, #296]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c7      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4937      	ldr	r1, [pc, #220]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fc fce3 	bl	800189c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fc fcdf 	bl	800189c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a8      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4925      	ldr	r1, [pc, #148]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc fcc2 	bl	800189c <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fc fcbe 	bl	800189c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e187      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d036      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fc fca2 	bl	800189c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fc fc9e 	bl	800189c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e167      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x200>
 8004f7a:	e01b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fc fc8b 	bl	800189c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fc fc87 	bl	800189c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d907      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e150      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b88      	ldr	r3, [pc, #544]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8097 	beq.w	80050f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b81      	ldr	r3, [pc, #516]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a7c      	ldr	r2, [pc, #496]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b77      	ldr	r3, [pc, #476]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fc fc47 	bl	800189c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fc fc43 	bl	800189c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e10c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x2ea>
 8005038:	4b64      	ldr	r3, [pc, #400]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a63      	ldr	r2, [pc, #396]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	e01c      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x30c>
 800504e:	4b5f      	ldr	r3, [pc, #380]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	4b5c      	ldr	r3, [pc, #368]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a5b      	ldr	r2, [pc, #364]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005068:	4b58      	ldr	r3, [pc, #352]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
 8005074:	4b55      	ldr	r3, [pc, #340]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a54      	ldr	r2, [pc, #336]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fc08 	bl	800189c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc fc04 	bl	800189c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0cb      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	4b49      	ldr	r3, [pc, #292]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <HAL_RCC_OscConfig+0x334>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fc fbf2 	bl	800189c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fc fbee 	bl	800189c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0b5      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d2:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1ee      	bne.n	80050bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	4a38      	ldr	r2, [pc, #224]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a1 	beq.w	800523c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fa:	4b34      	ldr	r3, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d05c      	beq.n	80051c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d141      	bne.n	8005192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fc fbc2 	bl	800189c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511c:	f7fc fbbe 	bl	800189c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e087      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	491b      	ldr	r1, [pc, #108]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fc fb97 	bl	800189c <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005172:	f7fc fb93 	bl	800189c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e05c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x416>
 8005190:	e054      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc fb80 	bl	800189c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc fb7c 	bl	800189c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e045      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x444>
 80051be:	e03d      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e038      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCC_OscConfig+0x4ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d028      	beq.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11a      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800520e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d107      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0cc      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d90c      	bls.n	8005288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b65      	ldr	r3, [pc, #404]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d119      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	2b03      	cmp	r3, #3
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e067      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b37      	ldr	r3, [pc, #220]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4934      	ldr	r1, [pc, #208]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fc faae 	bl	800189c <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fc faaa 	bl	800189c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20c      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f82d 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fc fa0e 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	08020e34 	.word	0x08020e34
 8005410:	20000000 	.word	0x20000000
 8005414:	20000004 	.word	0x20000004

08005418 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCC_EnableCSS+0x14>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	4247004c 	.word	0x4247004c

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b090      	sub	sp, #64	; 0x40
 8005436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005440:	2300      	movs	r3, #0
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00d      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x40>
 8005454:	2b08      	cmp	r3, #8
 8005456:	f200 80a1 	bhi.w	800559c <HAL_RCC_GetSysClockFreq+0x16c>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x34>
 800545e:	2b04      	cmp	r3, #4
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x3a>
 8005462:	e09b      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005468:	e09b      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800546a:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800546e:	e098      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005470:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800547a:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005486:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	2200      	movs	r2, #0
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	627a      	str	r2, [r7, #36]	; 0x24
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005498:	2100      	movs	r1, #0
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800549c:	fb03 f201 	mul.w	r2, r3, r1
 80054a0:	2300      	movs	r3, #0
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	4a43      	ldr	r2, [pc, #268]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80054aa:	fba0 1202 	umull	r1, r2, r0, r2
 80054ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b0:	460a      	mov	r2, r1
 80054b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	4413      	add	r3, r2
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	2200      	movs	r2, #0
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ca:	f7fa fed9 	bl	8000280 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4613      	mov	r3, r2
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	e053      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	2200      	movs	r2, #0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	617a      	str	r2, [r7, #20]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054ea:	f04f 0b00 	mov.w	fp, #0
 80054ee:	4652      	mov	r2, sl
 80054f0:	465b      	mov	r3, fp
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	0159      	lsls	r1, r3, #5
 80054fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005500:	0150      	lsls	r0, r2, #5
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	ebb2 080a 	subs.w	r8, r2, sl
 800550a:	eb63 090b 	sbc.w	r9, r3, fp
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800551a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800551e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005522:	ebb2 0408 	subs.w	r4, r2, r8
 8005526:	eb63 0509 	sbc.w	r5, r3, r9
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	00eb      	lsls	r3, r5, #3
 8005534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005538:	00e2      	lsls	r2, r4, #3
 800553a:	4614      	mov	r4, r2
 800553c:	461d      	mov	r5, r3
 800553e:	eb14 030a 	adds.w	r3, r4, sl
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	eb45 030b 	adc.w	r3, r5, fp
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005556:	4629      	mov	r1, r5
 8005558:	028b      	lsls	r3, r1, #10
 800555a:	4621      	mov	r1, r4
 800555c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005560:	4621      	mov	r1, r4
 8005562:	028a      	lsls	r2, r1, #10
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	2200      	movs	r2, #0
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005574:	f7fa fe84 	bl	8000280 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	3301      	adds	r3, #1
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800559a:	e002      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3740      	adds	r7, #64	; 0x40
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	017d7840 	.word	0x017d7840

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000000 	.word	0x20000000

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	08020e44 	.word	0x08020e44

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005600:	f7ff ffdc 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4903      	ldr	r1, [pc, #12]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	08020e44 	.word	0x08020e44

08005624 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_NMI_IRQHandler+0x20>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d104      	bne.n	800563e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005634:	f000 f80a 	bl	800564c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <HAL_RCC_NMI_IRQHandler+0x24>)
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	701a      	strb	r2, [r3, #0]
  }
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
 8005648:	4002380e 	.word	0x4002380e

0800564c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e022      	b.n	80056b2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d105      	bne.n	8005684 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fb f924 	bl	80008cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2203      	movs	r2, #3
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f815 	bl	80056bc <HAL_SD_InitCard>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e00a      	b.n	80056b2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80056bc:	b5b0      	push	{r4, r5, r7, lr}
 80056be:	b08e      	sub	sp, #56	; 0x38
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80056d8:	2376      	movs	r3, #118	; 0x76
 80056da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681d      	ldr	r5, [r3, #0]
 80056e0:	466c      	mov	r4, sp
 80056e2:	f107 0314 	add.w	r3, r7, #20
 80056e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f4:	4628      	mov	r0, r5
 80056f6:	f002 fbc7 	bl	8007e88 <SDIO_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e04f      	b.n	80057ac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800570c:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <HAL_SD_InitCard+0xf8>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f002 fbff 	bl	8007f1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <HAL_SD_InitCard+0xf8>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005722:	2002      	movs	r0, #2
 8005724:	f7fc f8c6 	bl	80018b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 f877 	bl	800681c <SD_PowerON>
 800572e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02e      	b.n	80057ac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 ff96 	bl	8006680 <SD_InitCard>
 8005754:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01b      	b.n	80057ac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800577c:	4618      	mov	r0, r3
 800577e:	f002 fc5e 	bl	800803e <SDMMC_CmdBlockLength>
 8005782:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00f      	beq.n	80057aa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_SD_InitCard+0xfc>)
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	; 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bdb0      	pop	{r4, r5, r7, pc}
 80057b4:	422580a0 	.word	0x422580a0
 80057b8:	004005ff 	.word	0x004005ff

080057bc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b092      	sub	sp, #72	; 0x48
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057ca:	f7fc f867 	bl	800189c <HAL_GetTick>
 80057ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e1c5      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	f040 81b8 	bne.w	8005b6c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	429a      	cmp	r2, r3
 800580e:	d907      	bls.n	8005820 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e1ac      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2203      	movs	r2, #3
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2200      	movs	r2, #0
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	2b01      	cmp	r3, #1
 8005836:	d002      	beq.n	800583e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	025b      	lsls	r3, r3, #9
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	025b      	lsls	r3, r3, #9
 8005848:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800584a:	2390      	movs	r3, #144	; 0x90
 800584c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800584e:	2302      	movs	r3, #2
 8005850:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005856:	2301      	movs	r3, #1
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f107 0214 	add.w	r2, r7, #20
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f002 fbbe 	bl	8007fe6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d90a      	bls.n	8005886 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2202      	movs	r2, #2
 8005874:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587c:	4618      	mov	r0, r3
 800587e:	f002 fc22 	bl	80080c6 <SDMMC_CmdReadMultiBlock>
 8005882:	6478      	str	r0, [r7, #68]	; 0x44
 8005884:	e009      	b.n	800589a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005892:	4618      	mov	r0, r3
 8005894:	f002 fbf5 	bl	8008082 <SDMMC_CmdReadSingleBlock>
 8005898:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800589a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589c:	2b00      	cmp	r3, #0
 800589e:	d012      	beq.n	80058c6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7e      	ldr	r2, [pc, #504]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e159      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80058ca:	e061      	b.n	8005990 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03c      	beq.n	8005954 <HAL_SD_ReadBlocks+0x198>
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d039      	beq.n	8005954 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40
 80058e4:	e033      	b.n	800594e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f002 faf7 	bl	8007ede <SDIO_ReadFIFO>
 80058f0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	3301      	adds	r3, #1
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	3b01      	subs	r3, #1
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	b2da      	uxtb	r2, r3
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	3301      	adds	r3, #1
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005918:	3b01      	subs	r3, #1
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	b2da      	uxtb	r2, r3
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	3301      	adds	r3, #1
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	3b01      	subs	r3, #1
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	b2da      	uxtb	r2, r3
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	3301      	adds	r3, #1
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	3b01      	subs	r3, #1
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594a:	3301      	adds	r3, #1
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	2b07      	cmp	r3, #7
 8005952:	d9c8      	bls.n	80058e6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005954:	f7fb ffa2 	bl	800189c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005960:	429a      	cmp	r2, r3
 8005962:	d902      	bls.n	800596a <HAL_SD_ReadBlocks+0x1ae>
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	2b00      	cmp	r3, #0
 8005968:	d112      	bne.n	8005990 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0f4      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005996:	f240 332a 	movw	r3, #810	; 0x32a
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d095      	beq.n	80058cc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d022      	beq.n	80059f4 <HAL_SD_ReadBlocks+0x238>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d91f      	bls.n	80059f4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d01b      	beq.n	80059f4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f002 fbe7 	bl	8008194 <SDMMC_CmdStopTransfer>
 80059c6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d012      	beq.n	80059f4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059dc:	431a      	orrs	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0c2      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_SD_ReadBlocks+0x254>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d012      	beq.n	8005a36 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	f043 0208 	orr.w	r2, r3, #8
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0a1      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d012      	beq.n	8005a6a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e087      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d064      	beq.n	8005b42 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <HAL_SD_ReadBlocks+0x2e4>)
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e06d      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
 8005a9e:	bf00      	nop
 8005aa0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 fa18 	bl	8007ede <SDIO_ReadFIFO>
 8005aae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	3301      	adds	r3, #1
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	0a1b      	lsrs	r3, r3, #8
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005acc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	3b01      	subs	r3, #1
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	0e1b      	lsrs	r3, r3, #24
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	3301      	adds	r3, #1
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	3b01      	subs	r3, #1
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b06:	f7fb fec9 	bl	800189c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d902      	bls.n	8005b1c <HAL_SD_ReadBlocks+0x360>
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d112      	bne.n	8005b42 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <HAL_SD_ReadBlocks+0x3c8>)
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e01b      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SD_ReadBlocks+0x39a>
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1a6      	bne.n	8005aa4 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e006      	b.n	8005b7a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3748      	adds	r7, #72	; 0x48
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	004005ff 	.word	0x004005ff

08005b88 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b092      	sub	sp, #72	; 0x48
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b96:	f7fb fe81 	bl	800189c <HAL_GetTick>
 8005b9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e16d      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	f040 8160 	bne.w	8005e88 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d907      	bls.n	8005bec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e154      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d002      	beq.n	8005c0a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	025b      	lsls	r3, r3, #9
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	025b      	lsls	r3, r3, #9
 8005c14:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005c16:	2390      	movs	r3, #144	; 0x90
 8005c18:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f107 0218 	add.w	r2, r7, #24
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 f9d8 	bl	8007fe6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d90a      	bls.n	8005c52 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f002 fa80 	bl	800814e <SDMMC_CmdWriteMultiBlock>
 8005c4e:	6478      	str	r0, [r7, #68]	; 0x44
 8005c50:	e009      	b.n	8005c66 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2210      	movs	r2, #16
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 fa53 	bl	800810a <SDMMC_CmdWriteSingleBlock>
 8005c64:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a8b      	ldr	r2, [pc, #556]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e101      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005c96:	e065      	b.n	8005d64 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d040      	beq.n	8005d28 <HAL_SD_WriteBlocks+0x1a0>
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d03d      	beq.n	8005d28 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005cac:	2300      	movs	r3, #0
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	e037      	b.n	8005d22 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	3301      	adds	r3, #1
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	021a      	lsls	r2, r3, #8
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	041a      	lsls	r2, r3, #16
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	3301      	adds	r3, #1
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	061a      	lsls	r2, r3, #24
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	3301      	adds	r3, #1
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f107 0214 	add.w	r2, r7, #20
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f002 f8ee 	bl	8007ef8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	3301      	adds	r3, #1
 8005d20:	643b      	str	r3, [r7, #64]	; 0x40
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	d9c4      	bls.n	8005cb2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d28:	f7fb fdb8 	bl	800189c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d902      	bls.n	8005d3e <HAL_SD_WriteBlocks+0x1b6>
 8005d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d112      	bne.n	8005d64 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a57      	ldr	r2, [pc, #348]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e098      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6a:	f240 331a 	movw	r3, #794	; 0x31a
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d091      	beq.n	8005c98 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d022      	beq.n	8005dc8 <HAL_SD_WriteBlocks+0x240>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d91f      	bls.n	8005dc8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f002 f9fd 	bl	8008194 <SDMMC_CmdStopTransfer>
 8005d9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3e      	ldr	r2, [pc, #248]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e066      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_SD_WriteBlocks+0x25c>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d012      	beq.n	8005e0a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f043 0208 	orr.w	r2, r3, #8
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e045      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005e1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e02b      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <HAL_SD_WriteBlocks+0x318>)
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e011      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e006      	b.n	8005e96 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3748      	adds	r7, #72	; 0x48
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	004005ff 	.word	0x004005ff

08005ea4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_SD_IRQHandler+0x2e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fd5c 	bl	8006988 <SD_Read_IT>
 8005ed0:	e165      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 808f 	beq.w	8006000 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005efa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005efe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d039      	beq.n	8005f8e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <HAL_SD_IRQHandler+0x8a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f002 f92e 	bl	8008194 <SDMMC_CmdStopTransfer>
 8005f38:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f92f 	bl	80061b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_SD_IRQHandler+0xda>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f004 f88e 	bl	800a0a0 <HAL_SD_RxCpltCallback>
 8005f84:	e10b      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f004 f880 	bl	800a08c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f8c:	e107      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8102 	beq.w	800619e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d011      	beq.n	8005fc8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f002 f8f3 	bl	8008194 <SDMMC_CmdStopTransfer>
 8005fae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8f4 	bl	80061b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 80e5 	bne.w	800619e <HAL_SD_IRQHandler+0x2fa>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 80df 	bne.w	800619e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0208 	bic.w	r2, r2, #8
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f004 f847 	bl	800a08c <HAL_SD_TxCpltCallback>
}
 8005ffe:	e0ce      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_SD_IRQHandler+0x17c>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fd06 	bl	8006a2a <SD_Write_IT>
 800601e:	e0be      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006026:	f240 233a 	movw	r3, #570	; 0x23a
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80b6 	beq.w	800619e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f043 0202 	orr.w	r2, r3, #2
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	f043 0208 	orr.w	r2, r3, #8
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f043 0210 	orr.w	r2, r3, #16
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	f043 0208 	orr.w	r2, r3, #8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f240 723a 	movw	r2, #1850	; 0x73a
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80060cc:	f023 0302 	bic.w	r3, r3, #2
 80060d0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 f85c 	bl	8008194 <SDMMC_CmdStopTransfer>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f855 	bl	80061b0 <HAL_SD_ErrorCallback>
}
 8006106:	e04a      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d045      	beq.n	800619e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_SD_IRQHandler+0x282>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <HAL_SD_IRQHandler+0x304>)
 800612c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	4618      	mov	r0, r3
 8006134:	f7fb fe6a 	bl	8001e0c <HAL_DMA_Abort_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d02f      	beq.n	800619e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fa2e 	bl	80065a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006148:	e029      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_SD_IRQHandler+0x2ba>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d011      	beq.n	8006182 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <HAL_SD_IRQHandler+0x308>)
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	4618      	mov	r0, r3
 800616c:	f7fb fe4e 	bl	8001e0c <HAL_DMA_Abort_IT>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fa49 	bl	8006612 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006180:	e00d      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f003 ff6e 	bl	800a078 <HAL_SD_AbortCallback>
}
 800619c:	e7ff      	b.n	800619e <HAL_SD_IRQHandler+0x2fa>
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	080065a5 	.word	0x080065a5
 80061ac:	08006613 	.word	0x08006613

080061b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d2:	0f9b      	lsrs	r3, r3, #30
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061de:	0e9b      	lsrs	r3, r3, #26
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006202:	0c1b      	lsrs	r3, r3, #16
 8006204:	b2da      	uxtb	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b2da      	uxtb	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621a:	b2da      	uxtb	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006224:	0d1b      	lsrs	r3, r3, #20
 8006226:	b29a      	uxth	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	0c1b      	lsrs	r3, r3, #16
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	b2da      	uxtb	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006242:	0bdb      	lsrs	r3, r3, #15
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006254:	0b9b      	lsrs	r3, r3, #14
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	b2da      	uxtb	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006266:	0b5b      	lsrs	r3, r3, #13
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006278:	0b1b      	lsrs	r3, r3, #12
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	b2da      	uxtb	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	2b00      	cmp	r3, #0
 8006292:	d163      	bne.n	800635c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006298:	009a      	lsls	r2, r3, #2
 800629a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800629e:	4013      	ands	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062a4:	0f92      	lsrs	r2, r2, #30
 80062a6:	431a      	orrs	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b0:	0edb      	lsrs	r3, r3, #27
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	0e1b      	lsrs	r3, r3, #24
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d4:	0d5b      	lsrs	r3, r3, #21
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e6:	0c9b      	lsrs	r3, r3, #18
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f8:	0bdb      	lsrs	r3, r3, #15
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	b2da      	uxtb	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	7e1b      	ldrb	r3, [r3, #24]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	3302      	adds	r3, #2
 800631c:	2201      	movs	r2, #1
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006326:	fb03 f202 	mul.w	r2, r3, r2
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	7a1b      	ldrb	r3, [r3, #8]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2201      	movs	r2, #1
 800633a:	409a      	lsls	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006348:	0a52      	lsrs	r2, r2, #9
 800634a:	fb03 f202 	mul.w	r2, r3, r2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006358:	661a      	str	r2, [r3, #96]	; 0x60
 800635a:	e031      	b.n	80063c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006360:	2b01      	cmp	r3, #1
 8006362:	d11d      	bne.n	80063a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	431a      	orrs	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	3301      	adds	r3, #1
 8006380:	029a      	lsls	r2, r3, #10
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006394:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
 800639e:	e00f      	b.n	80063c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_SD_GetCardCSD+0x344>)
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e09d      	b.n	80064fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c4:	0b9b      	lsrs	r3, r3, #14
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	0fdb      	lsrs	r3, r3, #31
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	0f5b      	lsrs	r3, r3, #29
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	0e9b      	lsrs	r3, r3, #26
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	b2da      	uxtb	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	0d9b      	lsrs	r3, r3, #22
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 030f 	and.w	r3, r3, #15
 8006430:	b2da      	uxtb	r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	0d5b      	lsrs	r3, r3, #21
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	0bdb      	lsrs	r3, r3, #15
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	0b9b      	lsrs	r3, r3, #14
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	0b5b      	lsrs	r3, r3, #13
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	0b1b      	lsrs	r3, r3, #12
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	0a9b      	lsrs	r3, r3, #10
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	004005ff 	.word	0x004005ff

0800650c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9de 	bl	8006938 <SD_SendStatus>
 800657c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	0a5b      	lsrs	r3, r3, #9
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800659a:	693b      	ldr	r3, [r7, #16]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff ffd1 	bl	8006564 <HAL_SD_GetCardState>
 80065c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b06      	cmp	r3, #6
 80065d6:	d002      	beq.n	80065de <SD_DMATxAbort+0x3a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d10a      	bne.n	80065f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fdd6 	bl	8008194 <SDMMC_CmdStopTransfer>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f003 fd3b 	bl	800a078 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006602:	e002      	b.n	800660a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff fdd3 	bl	80061b0 <HAL_SD_ErrorCallback>
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f240 523a 	movw	r2, #1338	; 0x53a
 8006628:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff ff9a 	bl	8006564 <HAL_SD_GetCardState>
 8006630:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b06      	cmp	r3, #6
 8006644:	d002      	beq.n	800664c <SD_DMARxAbort+0x3a>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b05      	cmp	r3, #5
 800664a:	d10a      	bne.n	8006662 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fd9f 	bl	8008194 <SDMMC_CmdStopTransfer>
 8006656:	4602      	mov	r2, r0
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f003 fd04 	bl	800a078 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006670:	e002      	b.n	8006678 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fd9c 	bl	80061b0 <HAL_SD_ErrorCallback>
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006680:	b5b0      	push	{r4, r5, r7, lr}
 8006682:	b094      	sub	sp, #80	; 0x50
 8006684:	af04      	add	r7, sp, #16
 8006686:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006688:	2301      	movs	r3, #1
 800668a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f001 fc50 	bl	8007f36 <SDIO_GetPowerState>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800669c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066a0:	e0b8      	b.n	8006814 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d02f      	beq.n	800670a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 fe37 	bl	8008322 <SDMMC_CmdSendCID>
 80066b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	e0a9      	b.n	8006814 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fc7a 	bl	8007fc0 <SDIO_GetResponse>
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2104      	movs	r1, #4
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 fc71 	bl	8007fc0 <SDIO_GetResponse>
 80066de:	4602      	mov	r2, r0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2108      	movs	r1, #8
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fc68 	bl	8007fc0 <SDIO_GetResponse>
 80066f0:	4602      	mov	r2, r0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	210c      	movs	r1, #12
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fc5f 	bl	8007fc0 <SDIO_GetResponse>
 8006702:	4602      	mov	r2, r0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	2b03      	cmp	r3, #3
 8006710:	d00d      	beq.n	800672e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f107 020e 	add.w	r2, r7, #14
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fe3d 	bl	800839c <SDMMC_CmdSetRelAdd>
 8006722:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <SD_InitCard+0xae>
    {
      return errorstate;
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	e072      	b.n	8006814 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	2b03      	cmp	r3, #3
 8006734:	d036      	beq.n	80067a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006736:	89fb      	ldrh	r3, [r7, #14]
 8006738:	461a      	mov	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f001 fe07 	bl	800835e <SDMMC_CmdSendCSD>
 8006750:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	e05b      	b.n	8006814 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fc2c 	bl	8007fc0 <SDIO_GetResponse>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2104      	movs	r1, #4
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fc23 	bl	8007fc0 <SDIO_GetResponse>
 800677a:	4602      	mov	r2, r0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2108      	movs	r1, #8
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fc1a 	bl	8007fc0 <SDIO_GetResponse>
 800678c:	4602      	mov	r2, r0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	210c      	movs	r1, #12
 8006798:	4618      	mov	r0, r3
 800679a:	f001 fc11 	bl	8007fc0 <SDIO_GetResponse>
 800679e:	4602      	mov	r2, r0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2104      	movs	r1, #4
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fc08 	bl	8007fc0 <SDIO_GetResponse>
 80067b0:	4603      	mov	r3, r0
 80067b2:	0d1a      	lsrs	r2, r3, #20
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80067b8:	f107 0310 	add.w	r3, r7, #16
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fd00 	bl	80061c4 <HAL_SD_GetCardCSD>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067ce:	e021      	b.n	8006814 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	2200      	movs	r2, #0
 80067dc:	461c      	mov	r4, r3
 80067de:	4615      	mov	r5, r2
 80067e0:	4622      	mov	r2, r4
 80067e2:	462b      	mov	r3, r5
 80067e4:	4608      	mov	r0, r1
 80067e6:	f001 fcf7 	bl	80081d8 <SDMMC_CmdSelDesel>
 80067ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	e00e      	b.n	8006814 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681d      	ldr	r5, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	466c      	mov	r4, sp
 80067fe:	f103 0210 	add.w	r2, r3, #16
 8006802:	ca07      	ldmia	r2, {r0, r1, r2}
 8006804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006808:	3304      	adds	r3, #4
 800680a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800680c:	4628      	mov	r0, r5
 800680e:	f001 fb3b 	bl	8007e88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3740      	adds	r7, #64	; 0x40
 8006818:	46bd      	mov	sp, r7
 800681a:	bdb0      	pop	{r4, r5, r7, pc}

0800681c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fcf2 	bl	800821e <SDMMC_CmdGoIdleState>
 800683a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	e072      	b.n	800692c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fd05 	bl	800825a <SDMMC_CmdOperCond>
 8006850:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f001 fcdb 	bl	800821e <SDMMC_CmdGoIdleState>
 8006868:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	e05b      	b.n	800692c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	2b01      	cmp	r3, #1
 8006880:	d137      	bne.n	80068f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fd05 	bl	8008298 <SDMMC_CmdAppCommand>
 800688e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02d      	beq.n	80068f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006896:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800689a:	e047      	b.n	800692c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fcf8 	bl	8008298 <SDMMC_CmdAppCommand>
 80068a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e03b      	b.n	800692c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	491e      	ldr	r1, [pc, #120]	; (8006934 <SD_PowerON+0x118>)
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fd0e 	bl	80082dc <SDMMC_CmdAppOperCommand>
 80068c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068cc:	e02e      	b.n	800692c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 fb73 	bl	8007fc0 <SDIO_GetResponse>
 80068da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	0fdb      	lsrs	r3, r3, #31
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <SD_PowerON+0xcc>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <SD_PowerON+0xce>
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]

    count++;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d802      	bhi.n	8006902 <SD_PowerON+0xe6>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0cc      	beq.n	800689c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006908:	4293      	cmp	r3, r2
 800690a:	d902      	bls.n	8006912 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800690c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006910:	e00c      	b.n	800692c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
 8006922:	e002      	b.n	800692a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	c1100000 	.word	0xc1100000

08006938 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800694c:	e018      	b.n	8006980 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f001 fd3f 	bl	80083de <SDMMC_CmdSendStatus>
 8006960:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e009      	b.n	8006980 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fb24 	bl	8007fc0 <SDIO_GetResponse>
 8006978:	4602      	mov	r2, r0
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d03f      	beq.n	8006a22 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e033      	b.n	8006a10 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fa96 	bl	8007ede <SDIO_ReadFIFO>
 80069b2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3b01      	subs	r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	0e1b      	lsrs	r3, r3, #24
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	d9c8      	bls.n	80069a8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006a22:	bf00      	nop
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d043      	beq.n	8006acc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e037      	b.n	8006aba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	021a      	lsls	r2, r3, #8
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	041a      	lsls	r2, r3, #16
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	061a      	lsls	r2, r3, #24
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f107 0208 	add.w	r2, r7, #8
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fa22 	bl	8007ef8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b07      	cmp	r3, #7
 8006abe:	d9c4      	bls.n	8006a4a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006acc:	bf00      	nop
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e042      	b.n	8006b6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7f9 ff56 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2224      	movs	r2, #36	; 0x24
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 ff41 	bl	80079a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d156      	bne.n	8006c3c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_UART_Transmit_DMA+0x26>
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e04f      	b.n	8006c3e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2221      	movs	r2, #33	; 0x21
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_UART_Transmit_DMA+0xd4>)
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_UART_Transmit_DMA+0xd8>)
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <HAL_UART_Transmit_DMA+0xdc>)
 8006bd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	2200      	movs	r2, #0
 8006bdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006bde:	f107 0308 	add.w	r3, r7, #8
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	6819      	ldr	r1, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	f7fb f841 	bl	8001c7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3314      	adds	r3, #20
 8006c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	617b      	str	r3, [r7, #20]
   return(result);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3314      	adds	r3, #20
 8006c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c24:	627a      	str	r2, [r7, #36]	; 0x24
 8006c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3730      	adds	r7, #48	; 0x30
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	0800722d 	.word	0x0800722d
 8006c4c:	080072c7 	.word	0x080072c7
 8006c50:	0800744b 	.word	0x0800744b

08006c54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d112      	bne.n	8006c94 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <HAL_UART_Receive_DMA+0x26>
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e00b      	b.n	8006c96 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fc28 	bl	80074e0 <UART_Start_Receive_DMA>
 8006c90:	4603      	mov	r3, r0
 8006c92:	e000      	b.n	8006c96 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b0ba      	sub	sp, #232	; 0xe8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10f      	bne.n	8006d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <HAL_UART_IRQHandler+0x66>
 8006cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fd8f 	bl	8007822 <UART_Receive_IT>
      return;
 8006d04:	e25b      	b.n	80071be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80de 	beq.w	8006ecc <HAL_UART_IRQHandler+0x22c>
 8006d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80d1 	beq.w	8006ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <HAL_UART_IRQHandler+0xae>
 8006d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f043 0201 	orr.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_UART_IRQHandler+0xd2>
 8006d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <HAL_UART_IRQHandler+0xf6>
 8006d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f043 0204 	orr.w	r2, r3, #4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x126>
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f043 0208 	orr.w	r2, r3, #8
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 81f2 	beq.w	80071b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_UART_IRQHandler+0x14e>
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fd1a 	bl	8007822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2301      	moveq	r3, #1
 8006dfe:	2300      	movne	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <HAL_UART_IRQHandler+0x17a>
 8006e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d04f      	beq.n	8006eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fc22 	bl	8007664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d141      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3314      	adds	r3, #20
 8006e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1d9      	bne.n	8006e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d013      	beq.n	8006eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	4a7e      	ldr	r2, [pc, #504]	; (8007080 <HAL_UART_IRQHandler+0x3e0>)
 8006e88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fa ffbc 	bl	8001e0c <HAL_DMA_Abort_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	e00e      	b.n	8006ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9a8 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	e00a      	b.n	8006ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9a4 	bl	8007200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e006      	b.n	8006ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9a0 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ec6:	e175      	b.n	80071b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	bf00      	nop
    return;
 8006eca:	e173      	b.n	80071b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f040 814f 	bne.w	8007174 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8148 	beq.w	8007174 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8141 	beq.w	8007174 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	f040 80b6 	bne.w	8007084 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8145 	beq.w	80071b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f36:	429a      	cmp	r2, r3
 8006f38:	f080 813e 	bcs.w	80071b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4e:	f000 8088 	beq.w	8007062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	330c      	adds	r3, #12
 8006f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1d9      	bne.n	8006f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e1      	bne.n	8006f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800700c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e3      	bne.n	8006fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007032:	f023 0310 	bic.w	r3, r3, #16
 8007036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007044:	65ba      	str	r2, [r7, #88]	; 0x58
 8007046:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800704a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e3      	bne.n	8007020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705c:	4618      	mov	r0, r3
 800705e:	f7fa fe65 	bl	8001d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007070:	b29b      	uxth	r3, r3
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	b29b      	uxth	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8cb 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800707e:	e09b      	b.n	80071b8 <HAL_UART_IRQHandler+0x518>
 8007080:	0800772b 	.word	0x0800772b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800708c:	b29b      	uxth	r3, r3
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 808e 	beq.w	80071bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8089 	beq.w	80071bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070ce:	647a      	str	r2, [r7, #68]	; 0x44
 80070d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e3      	bne.n	80070aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3314      	adds	r3, #20
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	623b      	str	r3, [r7, #32]
   return(result);
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f023 0301 	bic.w	r3, r3, #1
 80070f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3314      	adds	r3, #20
 8007102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007106:	633a      	str	r2, [r7, #48]	; 0x30
 8007108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800710c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e3      	bne.n	80070e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60fb      	str	r3, [r7, #12]
   return(result);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800714c:	61fa      	str	r2, [r7, #28]
 800714e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	69b9      	ldr	r1, [r7, #24]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	617b      	str	r3, [r7, #20]
   return(result);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e3      	bne.n	8007128 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f851 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007172:	e023      	b.n	80071bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_UART_IRQHandler+0x4f4>
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fae0 	bl	8007752 <UART_Transmit_IT>
    return;
 8007192:	e014      	b.n	80071be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <HAL_UART_IRQHandler+0x51e>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb20 	bl	80077f2 <UART_EndTransmit_IT>
    return;
 80071b2:	e004      	b.n	80071be <HAL_UART_IRQHandler+0x51e>
    return;
 80071b4:	bf00      	nop
 80071b6:	e002      	b.n	80071be <HAL_UART_IRQHandler+0x51e>
      return;
 80071b8:	bf00      	nop
 80071ba:	e000      	b.n	80071be <HAL_UART_IRQHandler+0x51e>
      return;
 80071bc:	bf00      	nop
  }
}
 80071be:	37e8      	adds	r7, #232	; 0xe8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b090      	sub	sp, #64	; 0x40
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	d137      	bne.n	80072b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	2200      	movs	r2, #0
 800724c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	623b      	str	r3, [r7, #32]
   return(result);
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
 8007266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	633a      	str	r2, [r7, #48]	; 0x30
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	60fb      	str	r3, [r7, #12]
   return(result);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
 800729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a2:	61fa      	str	r2, [r7, #28]
 80072a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	69b9      	ldr	r1, [r7, #24]
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	617b      	str	r3, [r7, #20]
   return(result);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072b6:	e002      	b.n	80072be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072ba:	f7ff ff83 	bl	80071c4 <HAL_UART_TxCpltCallback>
}
 80072be:	bf00      	nop
 80072c0:	3740      	adds	r7, #64	; 0x40
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff ff7f 	bl	80071d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d172      	bne.n	80073e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80072fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007300:	2200      	movs	r2, #0
 8007302:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731a:	66bb      	str	r3, [r7, #104]	; 0x68
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007324:	65ba      	str	r2, [r7, #88]	; 0x58
 8007326:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800732a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e5      	bne.n	8007304 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3314      	adds	r3, #20
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	f023 0301 	bic.w	r3, r3, #1
 800734e:	667b      	str	r3, [r7, #100]	; 0x64
 8007350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3314      	adds	r3, #20
 8007356:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007358:	647a      	str	r2, [r7, #68]	; 0x44
 800735a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800735e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	623b      	str	r3, [r7, #32]
   return(result);
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	663b      	str	r3, [r7, #96]	; 0x60
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3314      	adds	r3, #20
 800738a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800738c:	633a      	str	r2, [r7, #48]	; 0x30
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d119      	bne.n	80073e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	60fb      	str	r3, [r7, #12]
   return(result);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0310 	bic.w	r3, r3, #16
 80073c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073d0:	61fa      	str	r2, [r7, #28]
 80073d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	617b      	str	r3, [r7, #20]
   return(result);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	2200      	movs	r2, #0
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073f6:	4619      	mov	r1, r3
 80073f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073fa:	f7ff ff0b 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073fe:	e002      	b.n	8007406 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007400:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007402:	f7f9 fa1f 	bl	8000844 <HAL_UART_RxCpltCallback>
}
 8007406:	bf00      	nop
 8007408:	3770      	adds	r7, #112	; 0x70
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	2b01      	cmp	r3, #1
 8007428:	d108      	bne.n	800743c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	b29b      	uxth	r3, r3
 8007432:	4619      	mov	r1, r3
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff feed 	bl	8007214 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800743a:	e002      	b.n	8007442 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fed5 	bl	80071ec <HAL_UART_RxHalfCpltCallback>
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b21      	cmp	r3, #33	; 0x21
 800747c:	d108      	bne.n	8007490 <UART_DMAError+0x46>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	f000 f8c2 	bl	8007614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b22      	cmp	r3, #34	; 0x22
 80074b0:	d108      	bne.n	80074c4 <UART_DMAError+0x7a>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f000 f8d0 	bl	8007664 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c8:	f043 0210 	orr.w	r2, r3, #16
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d0:	68b8      	ldr	r0, [r7, #8]
 80074d2:	f7ff fe95 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b098      	sub	sp, #96	; 0x60
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2222      	movs	r2, #34	; 0x22
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750c:	4a3e      	ldr	r2, [pc, #248]	; (8007608 <UART_Start_Receive_DMA+0x128>)
 800750e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	4a3d      	ldr	r2, [pc, #244]	; (800760c <UART_Start_Receive_DMA+0x12c>)
 8007516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751c:	4a3c      	ldr	r2, [pc, #240]	; (8007610 <UART_Start_Receive_DMA+0x130>)
 800751e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	2200      	movs	r2, #0
 8007526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007528:	f107 0308 	add.w	r3, r7, #8
 800752c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f7fa fb9c 	bl	8001c7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d019      	beq.n	8007596 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007578:	65bb      	str	r3, [r7, #88]	; 0x58
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007582:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e5      	bne.n	8007562 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3314      	adds	r3, #20
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	657b      	str	r3, [r7, #84]	; 0x54
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e5      	bne.n	8007596 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3314      	adds	r3, #20
 80075d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	617b      	str	r3, [r7, #20]
   return(result);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075ea:	627a      	str	r2, [r7, #36]	; 0x24
 80075ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6a39      	ldr	r1, [r7, #32]
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3760      	adds	r7, #96	; 0x60
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	080072e3 	.word	0x080072e3
 800760c:	0800740f 	.word	0x0800740f
 8007610:	0800744b 	.word	0x0800744b

08007614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	330c      	adds	r3, #12
 8007622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	60bb      	str	r3, [r7, #8]
   return(result);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	61ba      	str	r2, [r7, #24]
 800763e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6979      	ldr	r1, [r7, #20]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	613b      	str	r3, [r7, #16]
   return(result);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007658:	bf00      	nop
 800765a:	3724      	adds	r7, #36	; 0x24
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b095      	sub	sp, #84	; 0x54
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800768c:	643a      	str	r2, [r7, #64]	; 0x40
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3314      	adds	r3, #20
 80076a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3314      	adds	r3, #20
 80076be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e5      	bne.n	80076a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d119      	bne.n	8007710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	330c      	adds	r3, #12
 80076fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076fc:	61ba      	str	r2, [r7, #24]
 80076fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e5      	bne.n	80076dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800771e:	bf00      	nop
 8007720:	3754      	adds	r7, #84	; 0x54
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fd5b 	bl	8007200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b21      	cmp	r3, #33	; 0x21
 8007764:	d13e      	bne.n	80077e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776e:	d114      	bne.n	800779a <UART_Transmit_IT+0x48>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d110      	bne.n	800779a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800778c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	1c9a      	adds	r2, r3, #2
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	621a      	str	r2, [r3, #32]
 8007798:	e008      	b.n	80077ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	1c59      	adds	r1, r3, #1
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6211      	str	r1, [r2, #32]
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	4619      	mov	r1, r3
 80077ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10f      	bne.n	80077e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e000      	b.n	80077e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fcd6 	bl	80071c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b08c      	sub	sp, #48	; 0x30
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b22      	cmp	r3, #34	; 0x22
 8007834:	f040 80ae 	bne.w	8007994 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007840:	d117      	bne.n	8007872 <UART_Receive_IT+0x50>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d113      	bne.n	8007872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007860:	b29a      	uxth	r2, r3
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	1c9a      	adds	r2, r3, #2
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	629a      	str	r2, [r3, #40]	; 0x28
 8007870:	e026      	b.n	80078c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d007      	beq.n	8007896 <UART_Receive_IT+0x74>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <UART_Receive_IT+0x82>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	e008      	b.n	80078b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4619      	mov	r1, r3
 80078ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d15d      	bne.n	8007990 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0220 	bic.w	r2, r2, #32
 80078e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695a      	ldr	r2, [r3, #20]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007916:	2b01      	cmp	r3, #1
 8007918:	d135      	bne.n	8007986 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	613b      	str	r3, [r7, #16]
   return(result);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f023 0310 	bic.w	r3, r3, #16
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	623a      	str	r2, [r7, #32]
 8007942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	6a3a      	ldr	r2, [r7, #32]
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	61bb      	str	r3, [r7, #24]
   return(result);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b10      	cmp	r3, #16
 8007960:	d10a      	bne.n	8007978 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fc48 	bl	8007214 <HAL_UARTEx_RxEventCallback>
 8007984:	e002      	b.n	800798c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f8 ff5c 	bl	8000844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e002      	b.n	8007996 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3730      	adds	r7, #48	; 0x30
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a4:	b0c0      	sub	sp, #256	; 0x100
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079bc:	68d9      	ldr	r1, [r3, #12]
 80079be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	ea40 0301 	orr.w	r3, r0, r1
 80079c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	431a      	orrs	r2, r3
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079f8:	f021 010c 	bic.w	r1, r1, #12
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a06:	430b      	orrs	r3, r1
 8007a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1a:	6999      	ldr	r1, [r3, #24]
 8007a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	ea40 0301 	orr.w	r3, r0, r1
 8007a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b8f      	ldr	r3, [pc, #572]	; (8007c6c <UART_SetConfig+0x2cc>)
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d005      	beq.n	8007a40 <UART_SetConfig+0xa0>
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b8d      	ldr	r3, [pc, #564]	; (8007c70 <UART_SetConfig+0x2d0>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d104      	bne.n	8007a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a40:	f7fd fddc 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 8007a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a48:	e003      	b.n	8007a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7fd fdc3 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8007a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5c:	f040 810c 	bne.w	8007c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	1891      	adds	r1, r2, r2
 8007a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a7a:	415b      	adcs	r3, r3
 8007a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a82:	4621      	mov	r1, r4
 8007a84:	eb12 0801 	adds.w	r8, r2, r1
 8007a88:	4629      	mov	r1, r5
 8007a8a:	eb43 0901 	adc.w	r9, r3, r1
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa2:	4690      	mov	r8, r2
 8007aa4:	4699      	mov	r9, r3
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	eb18 0303 	adds.w	r3, r8, r3
 8007aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	eb49 0303 	adc.w	r3, r9, r3
 8007ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ace:	460b      	mov	r3, r1
 8007ad0:	18db      	adds	r3, r3, r3
 8007ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	eb42 0303 	adc.w	r3, r2, r3
 8007ada:	657b      	str	r3, [r7, #84]	; 0x54
 8007adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ae4:	f7f8 fbcc 	bl	8000280 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4b61      	ldr	r3, [pc, #388]	; (8007c74 <UART_SetConfig+0x2d4>)
 8007aee:	fba3 2302 	umull	r2, r3, r3, r2
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	011c      	lsls	r4, r3, #4
 8007af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	1891      	adds	r1, r2, r2
 8007b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b10:	415b      	adcs	r3, r3
 8007b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b18:	4641      	mov	r1, r8
 8007b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8007b1e:	4649      	mov	r1, r9
 8007b20:	eb43 0b01 	adc.w	fp, r3, r1
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b38:	4692      	mov	sl, r2
 8007b3a:	469b      	mov	fp, r3
 8007b3c:	4643      	mov	r3, r8
 8007b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8007b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b46:	464b      	mov	r3, r9
 8007b48:	eb4b 0303 	adc.w	r3, fp, r3
 8007b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b64:	460b      	mov	r3, r1
 8007b66:	18db      	adds	r3, r3, r3
 8007b68:	643b      	str	r3, [r7, #64]	; 0x40
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	eb42 0303 	adc.w	r3, r2, r3
 8007b70:	647b      	str	r3, [r7, #68]	; 0x44
 8007b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b7a:	f7f8 fb81 	bl	8000280 <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	4b3b      	ldr	r3, [pc, #236]	; (8007c74 <UART_SetConfig+0x2d4>)
 8007b86:	fba3 2301 	umull	r2, r3, r3, r1
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	2264      	movs	r2, #100	; 0x64
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	1acb      	subs	r3, r1, r3
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b9a:	4b36      	ldr	r3, [pc, #216]	; (8007c74 <UART_SetConfig+0x2d4>)
 8007b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ba8:	441c      	add	r4, r3
 8007baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	1891      	adds	r1, r2, r2
 8007bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bc4:	415b      	adcs	r3, r3
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bcc:	4641      	mov	r1, r8
 8007bce:	1851      	adds	r1, r2, r1
 8007bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	414b      	adcs	r3, r1
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007be4:	4659      	mov	r1, fp
 8007be6:	00cb      	lsls	r3, r1, #3
 8007be8:	4651      	mov	r1, sl
 8007bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bee:	4651      	mov	r1, sl
 8007bf0:	00ca      	lsls	r2, r1, #3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	189b      	adds	r3, r3, r2
 8007bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c00:	464b      	mov	r3, r9
 8007c02:	460a      	mov	r2, r1
 8007c04:	eb42 0303 	adc.w	r3, r2, r3
 8007c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c20:	460b      	mov	r3, r1
 8007c22:	18db      	adds	r3, r3, r3
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c26:	4613      	mov	r3, r2
 8007c28:	eb42 0303 	adc.w	r3, r2, r3
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c36:	f7f8 fb23 	bl	8000280 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <UART_SetConfig+0x2d4>)
 8007c40:	fba3 1302 	umull	r1, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	2164      	movs	r1, #100	; 0x64
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	3332      	adds	r3, #50	; 0x32
 8007c52:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <UART_SetConfig+0x2d4>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f003 0207 	and.w	r2, r3, #7
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4422      	add	r2, r4
 8007c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c68:	e106      	b.n	8007e78 <UART_SetConfig+0x4d8>
 8007c6a:	bf00      	nop
 8007c6c:	40011000 	.word	0x40011000
 8007c70:	40011400 	.word	0x40011400
 8007c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c8a:	4642      	mov	r2, r8
 8007c8c:	464b      	mov	r3, r9
 8007c8e:	1891      	adds	r1, r2, r2
 8007c90:	6239      	str	r1, [r7, #32]
 8007c92:	415b      	adcs	r3, r3
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
 8007c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	1854      	adds	r4, r2, r1
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	eb43 0501 	adc.w	r5, r3, r1
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	00eb      	lsls	r3, r5, #3
 8007cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cb2:	00e2      	lsls	r2, r4, #3
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	461d      	mov	r5, r3
 8007cb8:	4643      	mov	r3, r8
 8007cba:	18e3      	adds	r3, r4, r3
 8007cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	eb45 0303 	adc.w	r3, r5, r3
 8007cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	008b      	lsls	r3, r1, #2
 8007cea:	4621      	mov	r1, r4
 8007cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	008a      	lsls	r2, r1, #2
 8007cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cf8:	f7f8 fac2 	bl	8000280 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4b60      	ldr	r3, [pc, #384]	; (8007e84 <UART_SetConfig+0x4e4>)
 8007d02:	fba3 2302 	umull	r2, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	011c      	lsls	r4, r3, #4
 8007d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	1891      	adds	r1, r2, r2
 8007d22:	61b9      	str	r1, [r7, #24]
 8007d24:	415b      	adcs	r3, r3
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	1851      	adds	r1, r2, r1
 8007d30:	6139      	str	r1, [r7, #16]
 8007d32:	4649      	mov	r1, r9
 8007d34:	414b      	adcs	r3, r1
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d44:	4659      	mov	r1, fp
 8007d46:	00cb      	lsls	r3, r1, #3
 8007d48:	4651      	mov	r1, sl
 8007d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4e:	4651      	mov	r1, sl
 8007d50:	00ca      	lsls	r2, r1, #3
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	4642      	mov	r2, r8
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d60:	464b      	mov	r3, r9
 8007d62:	460a      	mov	r2, r1
 8007d64:	eb42 0303 	adc.w	r3, r2, r3
 8007d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d84:	4649      	mov	r1, r9
 8007d86:	008b      	lsls	r3, r1, #2
 8007d88:	4641      	mov	r1, r8
 8007d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d8e:	4641      	mov	r1, r8
 8007d90:	008a      	lsls	r2, r1, #2
 8007d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d96:	f7f8 fa73 	bl	8000280 <__aeabi_uldivmod>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	4b38      	ldr	r3, [pc, #224]	; (8007e84 <UART_SetConfig+0x4e4>)
 8007da2:	fba3 2301 	umull	r2, r3, r3, r1
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	2264      	movs	r2, #100	; 0x64
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	1acb      	subs	r3, r1, r3
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	3332      	adds	r3, #50	; 0x32
 8007db4:	4a33      	ldr	r2, [pc, #204]	; (8007e84 <UART_SetConfig+0x4e4>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dc0:	441c      	add	r4, r3
 8007dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8007dca:	677a      	str	r2, [r7, #116]	; 0x74
 8007dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	1891      	adds	r1, r2, r2
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	415b      	adcs	r3, r3
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007de0:	4641      	mov	r1, r8
 8007de2:	1851      	adds	r1, r2, r1
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	4649      	mov	r1, r9
 8007de8:	414b      	adcs	r3, r1
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007df8:	4659      	mov	r1, fp
 8007dfa:	00cb      	lsls	r3, r1, #3
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e02:	4651      	mov	r1, sl
 8007e04:	00ca      	lsls	r2, r1, #3
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	189b      	adds	r3, r3, r2
 8007e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e12:	464b      	mov	r3, r9
 8007e14:	460a      	mov	r2, r1
 8007e16:	eb42 0303 	adc.w	r3, r2, r3
 8007e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	663b      	str	r3, [r7, #96]	; 0x60
 8007e26:	667a      	str	r2, [r7, #100]	; 0x64
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e34:	4649      	mov	r1, r9
 8007e36:	008b      	lsls	r3, r1, #2
 8007e38:	4641      	mov	r1, r8
 8007e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e3e:	4641      	mov	r1, r8
 8007e40:	008a      	lsls	r2, r1, #2
 8007e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e46:	f7f8 fa1b 	bl	8000280 <__aeabi_uldivmod>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <UART_SetConfig+0x4e4>)
 8007e50:	fba3 1302 	umull	r1, r3, r3, r2
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	2164      	movs	r1, #100	; 0x64
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	3332      	adds	r3, #50	; 0x32
 8007e62:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <UART_SetConfig+0x4e4>)
 8007e64:	fba2 2303 	umull	r2, r3, r2, r3
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4422      	add	r2, r4
 8007e76:	609a      	str	r2, [r3, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e84:	51eb851f 	.word	0x51eb851f

08007e88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007e88:	b084      	sub	sp, #16
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	f107 001c 	add.w	r0, r7, #28
 8007e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007e9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ea2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ea6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007eaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007eae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007eb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	b004      	add	sp, #16
 8007edc:	4770      	bx	lr

08007ede <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2203      	movs	r2, #3
 8007f26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0303 	and.w	r3, r3, #3
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f70:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007f76:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007f7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f8c:	f023 030f 	bic.w	r3, r3, #15
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	b2db      	uxtb	r3, r3
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	461a      	mov	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
}  
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800800c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008012:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008018:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008030:	2300      	movs	r3, #0

}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b088      	sub	sp, #32
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800804c:	2310      	movs	r3, #16
 800804e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800805e:	f107 0308 	add.w	r3, r7, #8
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff ff74 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800806a:	f241 3288 	movw	r2, #5000	; 0x1388
 800806e:	2110      	movs	r1, #16
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9d7 	bl	8008424 <SDMMC_GetCmdResp1>
 8008076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008078:	69fb      	ldr	r3, [r7, #28]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b088      	sub	sp, #32
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008090:	2311      	movs	r3, #17
 8008092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800809c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff ff52 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80080ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b2:	2111      	movs	r1, #17
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9b5 	bl	8008424 <SDMMC_GetCmdResp1>
 80080ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080bc:	69fb      	ldr	r3, [r7, #28]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b088      	sub	sp, #32
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80080d4:	2312      	movs	r3, #18
 80080d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080e6:	f107 0308 	add.w	r3, r7, #8
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ff30 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80080f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f6:	2112      	movs	r1, #18
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f993 	bl	8008424 <SDMMC_GetCmdResp1>
 80080fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008100:	69fb      	ldr	r3, [r7, #28]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b088      	sub	sp, #32
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008118:	2318      	movs	r3, #24
 800811a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800812a:	f107 0308 	add.w	r3, r7, #8
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ff0e 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008136:	f241 3288 	movw	r2, #5000	; 0x1388
 800813a:	2118      	movs	r1, #24
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f971 	bl	8008424 <SDMMC_GetCmdResp1>
 8008142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008144:	69fb      	ldr	r3, [r7, #28]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800815c:	2319      	movs	r3, #25
 800815e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff feec 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	2119      	movs	r1, #25
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f94f 	bl	8008424 <SDMMC_GetCmdResp1>
 8008186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008188:	69fb      	ldr	r3, [r7, #28]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80081a0:	230c      	movs	r3, #12
 80081a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff feca 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80081be:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <SDMMC_CmdStopTransfer+0x40>)
 80081c0:	210c      	movs	r1, #12
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f92e 	bl	8008424 <SDMMC_GetCmdResp1>
 80081c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	05f5e100 	.word	0x05f5e100

080081d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08a      	sub	sp, #40	; 0x28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80081e8:	2307      	movs	r3, #7
 80081ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fea6 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008206:	f241 3288 	movw	r2, #5000	; 0x1388
 800820a:	2107      	movs	r1, #7
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f909 	bl	8008424 <SDMMC_GetCmdResp1>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008216:	4618      	mov	r0, r3
 8008218:	3728      	adds	r7, #40	; 0x28
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b088      	sub	sp, #32
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800823c:	f107 0308 	add.w	r3, r7, #8
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fe85 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fb23 	bl	8008894 <SDMMC_GetCmdError>
 800824e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008250:	69fb      	ldr	r3, [r7, #28]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b088      	sub	sp, #32
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008262:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008268:	2308      	movs	r3, #8
 800826a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fe66 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fab6 	bl	80087f8 <SDMMC_GetCmdResp7>
 800828c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800828e:	69fb      	ldr	r3, [r7, #28]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082a6:	2337      	movs	r3, #55	; 0x37
 80082a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fe47 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80082c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c8:	2137      	movs	r1, #55	; 0x37
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8aa 	bl	8008424 <SDMMC_GetCmdResp1>
 80082d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d2:	69fb      	ldr	r3, [r7, #28]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80082f2:	2329      	movs	r3, #41	; 0x29
 80082f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fe21 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9bd 	bl	8008690 <SDMMC_GetCmdResp3>
 8008316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008318:	69fb      	ldr	r3, [r7, #28]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b088      	sub	sp, #32
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800832e:	2302      	movs	r3, #2
 8008330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008332:	23c0      	movs	r3, #192	; 0xc0
 8008334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800833a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fe03 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f957 	bl	8008600 <SDMMC_GetCmdResp2>
 8008352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008354:	69fb      	ldr	r3, [r7, #28]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b088      	sub	sp, #32
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800836c:	2309      	movs	r3, #9
 800836e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008370:	23c0      	movs	r3, #192	; 0xc0
 8008372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fde4 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f938 	bl	8008600 <SDMMC_GetCmdResp2>
 8008390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008392:	69fb      	ldr	r3, [r7, #28]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80083aa:	2303      	movs	r3, #3
 80083ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fdc5 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	2103      	movs	r1, #3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f99d 	bl	800870c <SDMMC_GetCmdResp6>
 80083d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083d4:	69fb      	ldr	r3, [r7, #28]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b088      	sub	sp, #32
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80083ec:	230d      	movs	r3, #13
 80083ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083f0:	2340      	movs	r3, #64	; 0x40
 80083f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083fe:	f107 0308 	add.w	r3, r7, #8
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff fda4 	bl	8007f52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800840a:	f241 3288 	movw	r2, #5000	; 0x1388
 800840e:	210d      	movs	r1, #13
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f807 	bl	8008424 <SDMMC_GetCmdResp1>
 8008416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008418:	69fb      	ldr	r3, [r7, #28]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	460b      	mov	r3, r1
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008432:	4b70      	ldr	r3, [pc, #448]	; (80085f4 <SDMMC_GetCmdResp1+0x1d0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a70      	ldr	r2, [pc, #448]	; (80085f8 <SDMMC_GetCmdResp1+0x1d4>)
 8008438:	fba2 2303 	umull	r2, r3, r2, r3
 800843c:	0a5a      	lsrs	r2, r3, #9
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	fb02 f303 	mul.w	r3, r2, r3
 8008444:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	1e5a      	subs	r2, r3, #1
 800844a:	61fa      	str	r2, [r7, #28]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008454:	e0c9      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0ef      	beq.n	8008446 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ea      	bne.n	8008446 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2204      	movs	r2, #4
 8008480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008482:	2304      	movs	r3, #4
 8008484:	e0b1      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008498:	2301      	movs	r3, #1
 800849a:	e0a6      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	22c5      	movs	r2, #197	; 0xc5
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff fd7f 	bl	8007fa6 <SDIO_GetCommandResponse>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d001      	beq.n	80084b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e099      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fd81 	bl	8007fc0 <SDIO_GetResponse>
 80084be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4b4e      	ldr	r3, [pc, #312]	; (80085fc <SDMMC_GetCmdResp1+0x1d8>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e08d      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da02      	bge.n	80084da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80084d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084d8:	e087      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	e080      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	e079      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008504:	e071      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008514:	e069      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008524:	e061      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008534:	e059      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008544:	e051      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008554:	e049      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008564:	e041      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008574:	e039      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008584:	e031      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008594:	e029      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80085a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085a4:	e021      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80085b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085b4:	e019      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085c4:	e011      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80085d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085d4:	e009      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80085e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80085e4:	e001      	b.n	80085ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000000 	.word	0x20000000
 80085f8:	10624dd3 	.word	0x10624dd3
 80085fc:	fdffe008 	.word	0xfdffe008

08008600 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008608:	4b1f      	ldr	r3, [pc, #124]	; (8008688 <SDMMC_GetCmdResp2+0x88>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1f      	ldr	r2, [pc, #124]	; (800868c <SDMMC_GetCmdResp2+0x8c>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	0a5b      	lsrs	r3, r3, #9
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	1e5a      	subs	r2, r3, #1
 8008622:	60fa      	str	r2, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862c:	e026      	b.n	800867c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0ef      	beq.n	800861e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1ea      	bne.n	800861e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2204      	movs	r2, #4
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800865a:	2304      	movs	r3, #4
 800865c:	e00e      	b.n	800867c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008670:	2301      	movs	r3, #1
 8008672:	e003      	b.n	800867c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	22c5      	movs	r2, #197	; 0xc5
 8008678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	20000000 	.word	0x20000000
 800868c:	10624dd3 	.word	0x10624dd3

08008690 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008698:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <SDMMC_GetCmdResp3+0x74>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <SDMMC_GetCmdResp3+0x78>)
 800869e:	fba2 2303 	umull	r2, r3, r2, r3
 80086a2:	0a5b      	lsrs	r3, r3, #9
 80086a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a8:	fb02 f303 	mul.w	r3, r2, r3
 80086ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1e5a      	subs	r2, r3, #1
 80086b2:	60fa      	str	r2, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086bc:	e01b      	b.n	80086f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ef      	beq.n	80086ae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ea      	bne.n	80086ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2204      	movs	r2, #4
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086ea:	2304      	movs	r3, #4
 80086ec:	e003      	b.n	80086f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	22c5      	movs	r2, #197	; 0xc5
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000000 	.word	0x20000000
 8008708:	10624dd3 	.word	0x10624dd3

0800870c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	460b      	mov	r3, r1
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800871a:	4b35      	ldr	r3, [pc, #212]	; (80087f0 <SDMMC_GetCmdResp6+0xe4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <SDMMC_GetCmdResp6+0xe8>)
 8008720:	fba2 2303 	umull	r2, r3, r2, r3
 8008724:	0a5b      	lsrs	r3, r3, #9
 8008726:	f241 3288 	movw	r2, #5000	; 0x1388
 800872a:	fb02 f303 	mul.w	r3, r2, r3
 800872e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	1e5a      	subs	r2, r3, #1
 8008734:	61fa      	str	r2, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d102      	bne.n	8008740 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800873a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800873e:	e052      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0ef      	beq.n	8008730 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1ea      	bne.n	8008730 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	d004      	beq.n	8008770 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2204      	movs	r2, #4
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800876c:	2304      	movs	r3, #4
 800876e:	e03a      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008782:	2301      	movs	r3, #1
 8008784:	e02f      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff fc0d 	bl	8007fa6 <SDIO_GetCommandResponse>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	4293      	cmp	r3, r2
 8008794:	d001      	beq.n	800879a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008796:	2301      	movs	r3, #1
 8008798:	e025      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	22c5      	movs	r2, #197	; 0xc5
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fc0c 	bl	8007fc0 <SDIO_GetResponse>
 80087a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80087be:	2300      	movs	r3, #0
 80087c0:	e011      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087d0:	e009      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087e0:	e001      	b.n	80087e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000000 	.word	0x20000000
 80087f4:	10624dd3 	.word	0x10624dd3

080087f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008800:	4b22      	ldr	r3, [pc, #136]	; (800888c <SDMMC_GetCmdResp7+0x94>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a22      	ldr	r2, [pc, #136]	; (8008890 <SDMMC_GetCmdResp7+0x98>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0a5b      	lsrs	r3, r3, #9
 800880c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1e5a      	subs	r2, r3, #1
 800881a:	60fa      	str	r2, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008824:	e02c      	b.n	8008880 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0ef      	beq.n	8008816 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1ea      	bne.n	8008816 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008852:	2304      	movs	r3, #4
 8008854:	e014      	b.n	8008880 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008868:	2301      	movs	r3, #1
 800886a:	e009      	b.n	8008880 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2240      	movs	r2, #64	; 0x40
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800887e:	2300      	movs	r3, #0
  
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	20000000 	.word	0x20000000
 8008890:	10624dd3 	.word	0x10624dd3

08008894 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800889c:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <SDMMC_GetCmdError+0x50>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <SDMMC_GetCmdError+0x54>)
 80088a2:	fba2 2303 	umull	r2, r3, r2, r3
 80088a6:	0a5b      	lsrs	r3, r3, #9
 80088a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1e5a      	subs	r2, r3, #1
 80088b6:	60fa      	str	r2, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088c0:	e009      	b.n	80088d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f1      	beq.n	80088b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	22c5      	movs	r2, #197	; 0xc5
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000000 	.word	0x20000000
 80088e8:	10624dd3 	.word	0x10624dd3

080088ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088ec:	b084      	sub	sp, #16
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	f107 001c 	add.w	r0, r7, #28
 80088fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008902:	2b01      	cmp	r3, #1
 8008904:	d123      	bne.n	800894e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800891a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800892e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008932:	2b01      	cmp	r3, #1
 8008934:	d105      	bne.n	8008942 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fae2 	bl	8009f0c <USB_CoreReset>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	e01b      	b.n	8008986 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fad6 	bl	8009f0c <USB_CoreReset>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38
 8008978:	e005      	b.n	8008986 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008986:	7fbb      	ldrb	r3, [r7, #30]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10b      	bne.n	80089a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f043 0206 	orr.w	r2, r3, #6
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089b0:	b004      	add	sp, #16
 80089b2:	4770      	bx	lr

080089b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d165      	bne.n	8008a94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a41      	ldr	r2, [pc, #260]	; (8008ad0 <USB_SetTurnaroundTime+0x11c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d906      	bls.n	80089de <USB_SetTurnaroundTime+0x2a>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a40      	ldr	r2, [pc, #256]	; (8008ad4 <USB_SetTurnaroundTime+0x120>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d202      	bcs.n	80089de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089d8:	230f      	movs	r3, #15
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e062      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4a3c      	ldr	r2, [pc, #240]	; (8008ad4 <USB_SetTurnaroundTime+0x120>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d306      	bcc.n	80089f4 <USB_SetTurnaroundTime+0x40>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4a3b      	ldr	r2, [pc, #236]	; (8008ad8 <USB_SetTurnaroundTime+0x124>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d202      	bcs.n	80089f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80089ee:	230e      	movs	r3, #14
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e057      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <USB_SetTurnaroundTime+0x124>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d306      	bcc.n	8008a0a <USB_SetTurnaroundTime+0x56>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a37      	ldr	r2, [pc, #220]	; (8008adc <USB_SetTurnaroundTime+0x128>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d202      	bcs.n	8008a0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a04:	230d      	movs	r3, #13
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e04c      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a33      	ldr	r2, [pc, #204]	; (8008adc <USB_SetTurnaroundTime+0x128>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d306      	bcc.n	8008a20 <USB_SetTurnaroundTime+0x6c>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4a32      	ldr	r2, [pc, #200]	; (8008ae0 <USB_SetTurnaroundTime+0x12c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d802      	bhi.n	8008a20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e041      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a2f      	ldr	r2, [pc, #188]	; (8008ae0 <USB_SetTurnaroundTime+0x12c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d906      	bls.n	8008a36 <USB_SetTurnaroundTime+0x82>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a2e      	ldr	r2, [pc, #184]	; (8008ae4 <USB_SetTurnaroundTime+0x130>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d802      	bhi.n	8008a36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a30:	230b      	movs	r3, #11
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e036      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a2a      	ldr	r2, [pc, #168]	; (8008ae4 <USB_SetTurnaroundTime+0x130>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d906      	bls.n	8008a4c <USB_SetTurnaroundTime+0x98>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	4a29      	ldr	r2, [pc, #164]	; (8008ae8 <USB_SetTurnaroundTime+0x134>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d802      	bhi.n	8008a4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a46:	230a      	movs	r3, #10
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e02b      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <USB_SetTurnaroundTime+0x134>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d906      	bls.n	8008a62 <USB_SetTurnaroundTime+0xae>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4a25      	ldr	r2, [pc, #148]	; (8008aec <USB_SetTurnaroundTime+0x138>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d202      	bcs.n	8008a62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a5c:	2309      	movs	r3, #9
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e020      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4a21      	ldr	r2, [pc, #132]	; (8008aec <USB_SetTurnaroundTime+0x138>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d306      	bcc.n	8008a78 <USB_SetTurnaroundTime+0xc4>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <USB_SetTurnaroundTime+0x13c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d802      	bhi.n	8008a78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a72:	2308      	movs	r3, #8
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e015      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <USB_SetTurnaroundTime+0x13c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d906      	bls.n	8008a8e <USB_SetTurnaroundTime+0xda>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <USB_SetTurnaroundTime+0x140>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d202      	bcs.n	8008a8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a88:	2307      	movs	r3, #7
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	e00a      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a8e:	2306      	movs	r3, #6
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e007      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a9a:	2309      	movs	r3, #9
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	e001      	b.n	8008aa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008aa0:	2309      	movs	r3, #9
 8008aa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	029b      	lsls	r3, r3, #10
 8008ab8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008abc:	431a      	orrs	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	371c      	adds	r7, #28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	00d8acbf 	.word	0x00d8acbf
 8008ad4:	00e4e1c0 	.word	0x00e4e1c0
 8008ad8:	00f42400 	.word	0x00f42400
 8008adc:	01067380 	.word	0x01067380
 8008ae0:	011a499f 	.word	0x011a499f
 8008ae4:	01312cff 	.word	0x01312cff
 8008ae8:	014ca43f 	.word	0x014ca43f
 8008aec:	016e3600 	.word	0x016e3600
 8008af0:	01a6ab1f 	.word	0x01a6ab1f
 8008af4:	01e84800 	.word	0x01e84800

08008af8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f043 0201 	orr.w	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 0201 	bic.w	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d115      	bne.n	8008b8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b6a:	200a      	movs	r0, #10
 8008b6c:	f7f8 fea2 	bl	80018b4 <HAL_Delay>
      ms += 10U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	330a      	adds	r3, #10
 8008b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f939 	bl	8009dee <USB_GetMode>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d01e      	beq.n	8008bc0 <USB_SetCurrentMode+0x84>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2bc7      	cmp	r3, #199	; 0xc7
 8008b86:	d9f0      	bls.n	8008b6a <USB_SetCurrentMode+0x2e>
 8008b88:	e01a      	b.n	8008bc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d115      	bne.n	8008bbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b9c:	200a      	movs	r0, #10
 8008b9e:	f7f8 fe89 	bl	80018b4 <HAL_Delay>
      ms += 10U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	330a      	adds	r3, #10
 8008ba6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f920 	bl	8009dee <USB_GetMode>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <USB_SetCurrentMode+0x84>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2bc7      	cmp	r3, #199	; 0xc7
 8008bb8:	d9f0      	bls.n	8008b9c <USB_SetCurrentMode+0x60>
 8008bba:	e001      	b.n	8008bc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e005      	b.n	8008bcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2bc8      	cmp	r3, #200	; 0xc8
 8008bc4:	d101      	bne.n	8008bca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e000      	b.n	8008bcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	e009      	b.n	8008c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	3340      	adds	r3, #64	; 0x40
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3301      	adds	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b0e      	cmp	r3, #14
 8008c0c:	d9f2      	bls.n	8008bf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d11c      	bne.n	8008c50 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c24:	f043 0302 	orr.w	r3, r3, #2
 8008c28:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c4e:	e00b      	b.n	8008c68 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c74:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d10d      	bne.n	8008c98 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c84:	2100      	movs	r1, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f968 	bl	8008f5c <USB_SetDevSpeed>
 8008c8c:	e008      	b.n	8008ca0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c8e:	2101      	movs	r1, #1
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f963 	bl	8008f5c <USB_SetDevSpeed>
 8008c96:	e003      	b.n	8008ca0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c98:	2103      	movs	r1, #3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f95e 	bl	8008f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ca0:	2110      	movs	r1, #16
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f8fa 	bl	8008e9c <USB_FlushTxFifo>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f924 	bl	8008f00 <USB_FlushRxFifo>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]
 8008cea:	e043      	b.n	8008d74 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d02:	d118      	bne.n	8008d36 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d16:	461a      	mov	r2, r3
 8008d18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	e013      	b.n	8008d48 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	e008      	b.n	8008d48 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d42:	461a      	mov	r2, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	461a      	mov	r2, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	461a      	mov	r2, r3
 8008d68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3301      	adds	r3, #1
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d78:	461a      	mov	r2, r3
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d3b5      	bcc.n	8008cec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	e043      	b.n	8008e0e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d9c:	d118      	bne.n	8008dd0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db0:	461a      	mov	r2, r3
 8008db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e013      	b.n	8008de2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	e008      	b.n	8008de2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	461a      	mov	r2, r3
 8008df0:	2300      	movs	r3, #0
 8008df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e00:	461a      	mov	r2, r3
 8008e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e12:	461a      	mov	r2, r3
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d3b5      	bcc.n	8008d86 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f043 0210 	orr.w	r2, r3, #16
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <USB_DevInit+0x2c4>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f043 0208 	orr.w	r2, r3, #8
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d107      	bne.n	8008e88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e80:	f043 0304 	orr.w	r3, r3, #4
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	803c3800 	.word	0x803c3800

08008e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008eb6:	d901      	bls.n	8008ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e01b      	b.n	8008ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	daf2      	bge.n	8008eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	019b      	lsls	r3, r3, #6
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ee0:	d901      	bls.n	8008ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e006      	b.n	8008ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d0f0      	beq.n	8008ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f18:	d901      	bls.n	8008f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e018      	b.n	8008f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	daf2      	bge.n	8008f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2210      	movs	r2, #16
 8008f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3301      	adds	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f3c:	d901      	bls.n	8008f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e006      	b.n	8008f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b10      	cmp	r3, #16
 8008f4c:	d0f0      	beq.n	8008f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b087      	sub	sp, #28
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0306 	and.w	r3, r3, #6
 8008fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d102      	bne.n	8008fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
 8008fb2:	e00a      	b.n	8008fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d002      	beq.n	8008fc0 <USB_GetDevSpeed+0x32>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b06      	cmp	r3, #6
 8008fbe:	d102      	bne.n	8008fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	75fb      	strb	r3, [r7, #23]
 8008fc4:	e001      	b.n	8008fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008fc6:	230f      	movs	r3, #15
 8008fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d13a      	bne.n	800906a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	68f9      	ldr	r1, [r7, #12]
 800900e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009012:	4313      	orrs	r3, r2
 8009014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d155      	bne.n	80090d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	059b      	lsls	r3, r3, #22
 800904e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009050:	4313      	orrs	r3, r2
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800905e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	e036      	b.n	80090d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009070:	69da      	ldr	r2, [r3, #28]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	2101      	movs	r1, #1
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	041b      	lsls	r3, r3, #16
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009088:	4313      	orrs	r3, r2
 800908a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d11a      	bne.n	80090d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	791b      	ldrb	r3, [r3, #4]
 80090bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090be:	430b      	orrs	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d161      	bne.n	80091c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800911a:	d11f      	bne.n	800915c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800913a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	2101      	movs	r1, #1
 800916e:	fa01 f303 	lsl.w	r3, r1, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	43db      	mvns	r3, r3
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800917c:	4013      	ands	r3, r2
 800917e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	2101      	movs	r1, #1
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	b29b      	uxth	r3, r3
 8009198:	43db      	mvns	r3, r3
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a0:	4013      	ands	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	0159      	lsls	r1, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	440b      	add	r3, r1
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	4619      	mov	r1, r3
 80091c0:	4b35      	ldr	r3, [pc, #212]	; (8009298 <USB_DeactivateEndpoint+0x1b0>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	600b      	str	r3, [r1, #0]
 80091c6:	e060      	b.n	800928a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091de:	d11f      	bne.n	8009220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	0151      	lsls	r1, r2, #5
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	440a      	add	r2, r1
 8009216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800921e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 030f 	and.w	r3, r3, #15
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f303 	lsl.w	r3, r1, r3
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	43db      	mvns	r3, r3
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009240:	4013      	ands	r3, r2
 8009242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	2101      	movs	r1, #1
 8009256:	fa01 f303 	lsl.w	r3, r1, r3
 800925a:	041b      	lsls	r3, r3, #16
 800925c:	43db      	mvns	r3, r3
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009264:	4013      	ands	r3, r2
 8009266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	0159      	lsls	r1, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	440b      	add	r3, r1
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	4619      	mov	r1, r3
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <USB_DeactivateEndpoint+0x1b4>)
 8009286:	4013      	ands	r3, r2
 8009288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	ec337800 	.word	0xec337800
 800929c:	eff37800 	.word	0xeff37800

080092a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	f040 817a 	bne.w	80095b6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d132      	bne.n	8009330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	440a      	add	r2, r1
 8009304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800930c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	0151      	lsls	r1, r2, #5
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	440a      	add	r2, r1
 8009324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009328:	0cdb      	lsrs	r3, r3, #19
 800932a:	04db      	lsls	r3, r3, #19
 800932c:	6113      	str	r3, [r2, #16]
 800932e:	e092      	b.n	8009456 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934a:	0cdb      	lsrs	r3, r3, #19
 800934c:	04db      	lsls	r3, r3, #19
 800934e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800936e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009372:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11a      	bne.n	80093b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	429a      	cmp	r2, r3
 8009384:	d903      	bls.n	800938e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ac:	6113      	str	r3, [r2, #16]
 80093ae:	e01b      	b.n	80093e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6919      	ldr	r1, [r3, #16]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	440b      	add	r3, r1
 80093c8:	1e59      	subs	r1, r3, #1
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80093d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093d4:	4ba2      	ldr	r3, [pc, #648]	; (8009660 <USB_EPStartXfer+0x3c0>)
 80093d6:	400b      	ands	r3, r1
 80093d8:	69b9      	ldr	r1, [r7, #24]
 80093da:	0148      	lsls	r0, r1, #5
 80093dc:	69f9      	ldr	r1, [r7, #28]
 80093de:	4401      	add	r1, r0
 80093e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093e4:	4313      	orrs	r3, r2
 80093e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093fe:	69b9      	ldr	r1, [r7, #24]
 8009400:	0148      	lsls	r0, r1, #5
 8009402:	69f9      	ldr	r1, [r7, #28]
 8009404:	4401      	add	r1, r0
 8009406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800940a:	4313      	orrs	r3, r2
 800940c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d11f      	bne.n	8009456 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	440a      	add	r2, r1
 800942c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009430:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009434:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	69fa      	ldr	r2, [r7, #28]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009454:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d14b      	bne.n	80094f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d009      	beq.n	8009478 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	461a      	mov	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	791b      	ldrb	r3, [r3, #4]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d128      	bne.n	80094d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d110      	bne.n	80094b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	e00f      	b.n	80094d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	e165      	b.n	80097c0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009512:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	791b      	ldrb	r3, [r3, #4]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d015      	beq.n	8009548 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 814d 	beq.w	80097c0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	2101      	movs	r1, #1
 8009538:	fa01 f303 	lsl.w	r3, r1, r3
 800953c:	69f9      	ldr	r1, [r7, #28]
 800953e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009542:	4313      	orrs	r3, r2
 8009544:	634b      	str	r3, [r1, #52]	; 0x34
 8009546:	e13b      	b.n	80097c0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	d110      	bne.n	800957a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	440a      	add	r2, r1
 800956e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	e00f      	b.n	800959a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	69fa      	ldr	r2, [r7, #28]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009598:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	68d9      	ldr	r1, [r3, #12]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	b298      	uxth	r0, r3
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	4603      	mov	r3, r0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 f9b8 	bl	8009924 <USB_WritePacket>
 80095b4:	e104      	b.n	80097c0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	0151      	lsls	r1, r2, #5
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	440a      	add	r2, r1
 80095cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d0:	0cdb      	lsrs	r3, r3, #19
 80095d2:	04db      	lsls	r3, r3, #19
 80095d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d131      	bne.n	8009664 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800962e:	69b9      	ldr	r1, [r7, #24]
 8009630:	0148      	lsls	r0, r1, #5
 8009632:	69f9      	ldr	r1, [r7, #28]
 8009634:	4401      	add	r1, r0
 8009636:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800963a:	4313      	orrs	r3, r2
 800963c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	440a      	add	r2, r1
 8009654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800965c:	6113      	str	r3, [r2, #16]
 800965e:	e061      	b.n	8009724 <USB_EPStartXfer+0x484>
 8009660:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d123      	bne.n	80096b4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009682:	69b9      	ldr	r1, [r7, #24]
 8009684:	0148      	lsls	r0, r1, #5
 8009686:	69f9      	ldr	r1, [r7, #28]
 8009688:	4401      	add	r1, r0
 800968a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800968e:	4313      	orrs	r3, r2
 8009690:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b0:	6113      	str	r3, [r2, #16]
 80096b2:	e037      	b.n	8009724 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	8afa      	ldrh	r2, [r7, #22]
 80096d0:	fb03 f202 	mul.w	r2, r3, r2
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	8afb      	ldrh	r3, [r7, #22]
 80096e8:	04d9      	lsls	r1, r3, #19
 80096ea:	4b38      	ldr	r3, [pc, #224]	; (80097cc <USB_EPStartXfer+0x52c>)
 80096ec:	400b      	ands	r3, r1
 80096ee:	69b9      	ldr	r1, [r7, #24]
 80096f0:	0148      	lsls	r0, r1, #5
 80096f2:	69f9      	ldr	r1, [r7, #28]
 80096f4:	4401      	add	r1, r0
 80096f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096fa:	4313      	orrs	r3, r2
 80096fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009714:	69b9      	ldr	r1, [r7, #24]
 8009716:	0148      	lsls	r0, r1, #5
 8009718:	69f9      	ldr	r1, [r7, #28]
 800971a:	4401      	add	r1, r0
 800971c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009720:	4313      	orrs	r3, r2
 8009722:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10d      	bne.n	8009746 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d009      	beq.n	8009746 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	68d9      	ldr	r1, [r3, #12]
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	460a      	mov	r2, r1
 8009744:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	791b      	ldrb	r3, [r3, #4]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d128      	bne.n	80097a0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d110      	bne.n	8009780 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	69fa      	ldr	r2, [r7, #28]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	e00f      	b.n	80097a0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	1ff80000 	.word	0x1ff80000

080097d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d14a      	bne.n	8009884 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009806:	f040 8086 	bne.w	8009916 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	0151      	lsls	r1, r2, #5
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	440a      	add	r2, r1
 8009824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800982c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	440a      	add	r2, r1
 8009848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009850:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f242 7210 	movw	r2, #10000	; 0x2710
 800985e:	4293      	cmp	r3, r2
 8009860:	d902      	bls.n	8009868 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
          break;
 8009866:	e056      	b.n	8009916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800987c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009880:	d0e7      	beq.n	8009852 <USB_EPStopXfer+0x82>
 8009882:	e048      	b.n	8009916 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800989c:	d13b      	bne.n	8009916 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	7812      	ldrb	r2, [r2, #0]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d902      	bls.n	80098fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	75fb      	strb	r3, [r7, #23]
          break;
 80098fa:	e00c      	b.n	8009916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009914:	d0e7      	beq.n	80098e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
}
 8009918:	4618      	mov	r0, r3
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009924:	b480      	push	{r7}
 8009926:	b089      	sub	sp, #36	; 0x24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4611      	mov	r1, r2
 8009930:	461a      	mov	r2, r3
 8009932:	460b      	mov	r3, r1
 8009934:	71fb      	strb	r3, [r7, #7]
 8009936:	4613      	mov	r3, r2
 8009938:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d123      	bne.n	8009992 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800994a:	88bb      	ldrh	r3, [r7, #4]
 800994c:	3303      	adds	r3, #3
 800994e:	089b      	lsrs	r3, r3, #2
 8009950:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	e018      	b.n	800998a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	031a      	lsls	r2, r3, #12
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	4413      	add	r3, r2
 8009960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009964:	461a      	mov	r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	3301      	adds	r3, #1
 800997c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3301      	adds	r3, #1
 8009982:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	3301      	adds	r3, #1
 8009988:	61bb      	str	r3, [r7, #24]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	429a      	cmp	r2, r3
 8009990:	d3e2      	bcc.n	8009958 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3724      	adds	r7, #36	; 0x24
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b08b      	sub	sp, #44	; 0x2c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	089b      	lsrs	r3, r3, #2
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	623b      	str	r3, [r7, #32]
 80099ca:	e014      	b.n	80099f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	3301      	adds	r3, #1
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	3301      	adds	r3, #1
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	3301      	adds	r3, #1
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	3301      	adds	r3, #1
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	3301      	adds	r3, #1
 80099f4:	623b      	str	r3, [r7, #32]
 80099f6:	6a3a      	ldr	r2, [r7, #32]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d3e6      	bcc.n	80099cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099fe:	8bfb      	ldrh	r3, [r7, #30]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01e      	beq.n	8009a42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f107 0310 	add.w	r3, r7, #16
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	701a      	strb	r2, [r3, #0]
      i++;
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	3301      	adds	r3, #1
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a36:	8bfb      	ldrh	r3, [r7, #30]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a3c:	8bfb      	ldrh	r3, [r7, #30]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1ea      	bne.n	8009a18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	372c      	adds	r7, #44	; 0x2c
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d12c      	bne.n	8009ac6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	db12      	blt.n	8009aa4 <USB_EPSetStall+0x54>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009aa2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	e02b      	b.n	8009b1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db12      	blt.n	8009afe <USB_EPSetStall+0xae>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00f      	beq.n	8009afe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009afc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d128      	bne.n	8009b9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d003      	beq.n	8009b78 <USB_EPClearStall+0x4c>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d138      	bne.n	8009bea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e027      	b.n	8009bea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	791b      	ldrb	r3, [r3, #4]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d003      	beq.n	8009bca <USB_EPClearStall+0x9e>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	791b      	ldrb	r3, [r3, #4]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d10f      	bne.n	8009bea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c2c:	68f9      	ldr	r1, [r7, #12]
 8009c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c32:	4313      	orrs	r3, r2
 8009c34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c72:	f023 0302 	bic.w	r3, r3, #2
 8009c76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ca0:	f023 0303 	bic.w	r3, r3, #3
 8009ca4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb4:	f043 0302 	orr.w	r3, r3, #2
 8009cb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	0c1b      	lsrs	r3, r3, #16
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	4013      	ands	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	b29b      	uxth	r3, r3
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4013      	ands	r3, r2
 8009d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d84:	68bb      	ldr	r3, [r7, #8]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b087      	sub	sp, #28
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	01db      	lsls	r3, r3, #7
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009de0:	68bb      	ldr	r3, [r7, #8]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e28:	f023 0307 	bic.w	r3, r3, #7
 8009e2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	333c      	adds	r3, #60	; 0x3c
 8009e66:	3304      	adds	r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	4a26      	ldr	r2, [pc, #152]	; (8009f08 <USB_EP0_OutStart+0xb8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d90a      	bls.n	8009e8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e84:	d101      	bne.n	8009e8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e037      	b.n	8009efa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	461a      	mov	r2, r3
 8009e92:	2300      	movs	r3, #0
 8009e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb8:	f043 0318 	orr.w	r3, r3, #24
 8009ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ecc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ed0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d10f      	bne.n	8009ef8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	461a      	mov	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	4f54300a 	.word	0x4f54300a

08009f0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f24:	d901      	bls.n	8009f2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e01b      	b.n	8009f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	daf2      	bge.n	8009f18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f043 0201 	orr.w	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f4e:	d901      	bls.n	8009f54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e006      	b.n	8009f62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d0f0      	beq.n	8009f42 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <MX_FATFS_Init+0x18>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <MX_FATFS_Init+0x1c>)
 8009f78:	f004 fd98 	bl	800eaac <FATFS_LinkDriver>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <MX_FATFS_Init+0x20>)
 8009f82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f84:	bf00      	nop
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000450 	.word	0x20000450
 8009f8c:	08020e54 	.word	0x08020e54
 8009f90:	2000044c 	.word	0x2000044c

08009f94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f9e:	f000 f89e 	bl	800a0de <BSP_SD_IsDetected>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d001      	beq.n	8009fac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e005      	b.n	8009fb8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009fac:	4804      	ldr	r0, [pc, #16]	; (8009fc0 <BSP_SD_Init+0x2c>)
 8009fae:	f7fb fb54 	bl	800565a <HAL_SD_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000268 	.word	0x20000268

08009fc4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	68f9      	ldr	r1, [r7, #12]
 8009fe0:	4806      	ldr	r0, [pc, #24]	; (8009ffc <BSP_SD_ReadBlocks+0x38>)
 8009fe2:	f7fb fbeb 	bl	80057bc <HAL_SD_ReadBlocks>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000268 	.word	0x20000268

0800a000 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	4806      	ldr	r0, [pc, #24]	; (800a038 <BSP_SD_WriteBlocks+0x38>)
 800a01e:	f7fb fdb3 	bl	8005b88 <HAL_SD_WriteBlocks>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20000268 	.word	0x20000268

0800a03c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a040:	4805      	ldr	r0, [pc, #20]	; (800a058 <BSP_SD_GetCardState+0x1c>)
 800a042:	f7fc fa8f 	bl	8006564 <HAL_SD_GetCardState>
 800a046:	4603      	mov	r3, r0
 800a048:	2b04      	cmp	r3, #4
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
}
 800a052:	4618      	mov	r0, r3
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000268 	.word	0x20000268

0800a05c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	4803      	ldr	r0, [pc, #12]	; (800a074 <BSP_SD_GetCardInfo+0x18>)
 800a068:	f7fc fa50 	bl	800650c <HAL_SD_GetCardInfo>
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000268 	.word	0x20000268

0800a078 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a080:	f000 f818 	bl	800a0b4 <BSP_SD_AbortCallback>
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a094:	f000 f815 	bl	800a0c2 <BSP_SD_WriteCpltCallback>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a0a8:	f000 f812 	bl	800a0d0 <BSP_SD_ReadCpltCallback>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0

}
 800a0b8:	bf00      	nop
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	af00      	add	r7, sp, #0

}
 800a0c6:	bf00      	nop
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0

}
 800a0d4:	bf00      	nop
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	b2db      	uxtb	r3, r3
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a102:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <SD_CheckStatus+0x38>)
 800a104:	2201      	movs	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a108:	f7ff ff98 	bl	800a03c <BSP_SD_GetCardState>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a112:	4b07      	ldr	r3, [pc, #28]	; (800a130 <SD_CheckStatus+0x38>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	4b04      	ldr	r3, [pc, #16]	; (800a130 <SD_CheckStatus+0x38>)
 800a120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a122:	4b03      	ldr	r3, [pc, #12]	; (800a130 <SD_CheckStatus+0x38>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b2db      	uxtb	r3, r3
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000009 	.word	0x20000009

0800a134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a13e:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <SD_initialize+0x38>)
 800a140:	2201      	movs	r2, #1
 800a142:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a144:	f7ff ff26 	bl	8009f94 <BSP_SD_Init>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d107      	bne.n	800a15e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff ffd1 	bl	800a0f8 <SD_CheckStatus>
 800a156:	4603      	mov	r3, r0
 800a158:	461a      	mov	r2, r3
 800a15a:	4b04      	ldr	r3, [pc, #16]	; (800a16c <SD_initialize+0x38>)
 800a15c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a15e:	4b03      	ldr	r3, [pc, #12]	; (800a16c <SD_initialize+0x38>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	b2db      	uxtb	r3, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000009 	.word	0x20000009

0800a170 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff ffbb 	bl	800a0f8 <SD_CheckStatus>
 800a182:	4603      	mov	r3, r0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	68b8      	ldr	r0, [r7, #8]
 800a1aa:	f7ff ff0b 	bl	8009fc4 <BSP_SD_ReadBlocks>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d107      	bne.n	800a1c4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a1b4:	bf00      	nop
 800a1b6:	f7ff ff41 	bl	800a03c <BSP_SD_GetCardState>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1fa      	bne.n	800a1b6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b086      	sub	sp, #24
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68b8      	ldr	r0, [r7, #8]
 800a1ec:	f7ff ff08 	bl	800a000 <BSP_SD_WriteBlocks>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d107      	bne.n	800a206 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a1f6:	bf00      	nop
 800a1f8:	f7ff ff20 	bl	800a03c <BSP_SD_GetCardState>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1fa      	bne.n	800a1f8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08c      	sub	sp, #48	; 0x30
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	603a      	str	r2, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
 800a21c:	460b      	mov	r3, r1
 800a21e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <SD_ioctl+0xac>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <SD_ioctl+0x28>
 800a234:	2303      	movs	r3, #3
 800a236:	e03c      	b.n	800a2b2 <SD_ioctl+0xa2>

  switch (cmd)
 800a238:	79bb      	ldrb	r3, [r7, #6]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d834      	bhi.n	800a2a8 <SD_ioctl+0x98>
 800a23e:	a201      	add	r2, pc, #4	; (adr r2, 800a244 <SD_ioctl+0x34>)
 800a240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a25d 	.word	0x0800a25d
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a28f 	.word	0x0800a28f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a25a:	e028      	b.n	800a2ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a25c:	f107 030c 	add.w	r3, r7, #12
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fefb 	bl	800a05c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a272:	e01c      	b.n	800a2ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a274:	f107 030c 	add.w	r3, r7, #12
 800a278:	4618      	mov	r0, r3
 800a27a:	f7ff feef 	bl	800a05c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	b29a      	uxth	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a28c:	e00f      	b.n	800a2ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a28e:	f107 030c 	add.w	r3, r7, #12
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff fee2 	bl	800a05c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	0a5a      	lsrs	r2, r3, #9
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a2a6:	e002      	b.n	800a2ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3730      	adds	r7, #48	; 0x30
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000009 	.word	0x20000009

0800a2c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a2c6:	f004 ff1a 	bl	800f0fe <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <MX_LWIP_Init+0x54>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <MX_LWIP_Init+0x58>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <MX_LWIP_Init+0x5c>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <MX_LWIP_Init+0x60>)
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	4b10      	ldr	r3, [pc, #64]	; (800a324 <MX_LWIP_Init+0x64>)
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <MX_LWIP_Init+0x5c>)
 800a2ea:	4a0b      	ldr	r2, [pc, #44]	; (800a318 <MX_LWIP_Init+0x58>)
 800a2ec:	4909      	ldr	r1, [pc, #36]	; (800a314 <MX_LWIP_Init+0x54>)
 800a2ee:	480e      	ldr	r0, [pc, #56]	; (800a328 <MX_LWIP_Init+0x68>)
 800a2f0:	f005 fbf2 	bl	800fad8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a2f4:	480c      	ldr	r0, [pc, #48]	; (800a328 <MX_LWIP_Init+0x68>)
 800a2f6:	f005 fda9 	bl	800fe4c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a2fa:	480b      	ldr	r0, [pc, #44]	; (800a328 <MX_LWIP_Init+0x68>)
 800a2fc:	f005 fdb6 	bl	800fe6c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a300:	490a      	ldr	r1, [pc, #40]	; (800a32c <MX_LWIP_Init+0x6c>)
 800a302:	4809      	ldr	r0, [pc, #36]	; (800a328 <MX_LWIP_Init+0x68>)
 800a304:	f005 feb8 	bl	8010078 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a308:	4807      	ldr	r0, [pc, #28]	; (800a328 <MX_LWIP_Init+0x68>)
 800a30a:	f00e f825 	bl	8018358 <dhcp_start>

/* USER CODE BEGIN 3 */
//  HAL_Delay(15000);
/* USER CODE END 3 */
}
 800a30e:	bf00      	nop
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20000494 	.word	0x20000494
 800a318:	20000498 	.word	0x20000498
 800a31c:	2000049c 	.word	0x2000049c
 800a320:	0801be09 	.word	0x0801be09
 800a324:	0800a63d 	.word	0x0800a63d
 800a328:	2000045c 	.word	0x2000045c
 800a32c:	0800a381 	.word	0x0800a381

0800a330 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a338:	f7f7 fab0 	bl	800189c <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	4b08      	ldr	r3, [pc, #32]	; (800a360 <Ethernet_Link_Periodic_Handle+0x30>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	2b63      	cmp	r3, #99	; 0x63
 800a346:	d907      	bls.n	800a358 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a348:	f7f7 faa8 	bl	800189c <HAL_GetTick>
 800a34c:	4603      	mov	r3, r0
 800a34e:	4a04      	ldr	r2, [pc, #16]	; (800a360 <Ethernet_Link_Periodic_Handle+0x30>)
 800a350:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fab6 	bl	800a8c4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20000458 	.word	0x20000458

0800a364 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a368:	4804      	ldr	r0, [pc, #16]	; (800a37c <MX_LWIP_Process+0x18>)
 800a36a:	f000 f947 	bl	800a5fc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a36e:	f00c fec3 	bl	80170f8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a372:	4802      	ldr	r0, [pc, #8]	; (800a37c <MX_LWIP_Process+0x18>)
 800a374:	f7ff ffdc 	bl	800a330 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	2000045c 	.word	0x2000045c

0800a380 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a3a0:	4b40      	ldr	r3, [pc, #256]	; (800a4a4 <low_level_init+0x110>)
 800a3a2:	4a41      	ldr	r2, [pc, #260]	; (800a4a8 <low_level_init+0x114>)
 800a3a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a3aa:	2380      	movs	r3, #128	; 0x80
 800a3ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a3ae:	23e1      	movs	r3, #225	; 0xe1
 800a3b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a3be:	4a39      	ldr	r2, [pc, #228]	; (800a4a4 <low_level_init+0x110>)
 800a3c0:	f107 0308 	add.w	r3, r7, #8
 800a3c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a3c6:	4b37      	ldr	r3, [pc, #220]	; (800a4a4 <low_level_init+0x110>)
 800a3c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a3cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a3ce:	4b35      	ldr	r3, [pc, #212]	; (800a4a4 <low_level_init+0x110>)
 800a3d0:	4a36      	ldr	r2, [pc, #216]	; (800a4ac <low_level_init+0x118>)
 800a3d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a3d4:	4b33      	ldr	r3, [pc, #204]	; (800a4a4 <low_level_init+0x110>)
 800a3d6:	4a36      	ldr	r2, [pc, #216]	; (800a4b0 <low_level_init+0x11c>)
 800a3d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a3da:	4b32      	ldr	r3, [pc, #200]	; (800a4a4 <low_level_init+0x110>)
 800a3dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a3e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a3e2:	4830      	ldr	r0, [pc, #192]	; (800a4a4 <low_level_init+0x110>)
 800a3e4:	f7f7 ff9e 	bl	8002324 <HAL_ETH_Init>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a3ec:	2238      	movs	r2, #56	; 0x38
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4830      	ldr	r0, [pc, #192]	; (800a4b4 <low_level_init+0x120>)
 800a3f2:	f012 fed8 	bl	801d1a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a3f6:	4b2f      	ldr	r3, [pc, #188]	; (800a4b4 <low_level_init+0x120>)
 800a3f8:	2221      	movs	r2, #33	; 0x21
 800a3fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a3fc:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <low_level_init+0x120>)
 800a3fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a402:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a404:	4b2b      	ldr	r3, [pc, #172]	; (800a4b4 <low_level_init+0x120>)
 800a406:	2200      	movs	r2, #0
 800a408:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a40a:	482b      	ldr	r0, [pc, #172]	; (800a4b8 <low_level_init+0x124>)
 800a40c:	f005 fa2c 	bl	800f868 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2206      	movs	r2, #6
 800a414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a418:	4b22      	ldr	r3, [pc, #136]	; (800a4a4 <low_level_init+0x110>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a424:	4b1f      	ldr	r3, [pc, #124]	; (800a4a4 <low_level_init+0x110>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	785a      	ldrb	r2, [r3, #1]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a430:	4b1c      	ldr	r3, [pc, #112]	; (800a4a4 <low_level_init+0x110>)
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	789a      	ldrb	r2, [r3, #2]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a43c:	4b19      	ldr	r3, [pc, #100]	; (800a4a4 <low_level_init+0x110>)
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	78da      	ldrb	r2, [r3, #3]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a448:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <low_level_init+0x110>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	791a      	ldrb	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a454:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <low_level_init+0x110>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	795a      	ldrb	r2, [r3, #5]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a466:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a46e:	f043 030a 	orr.w	r3, r3, #10
 800a472:	b2da      	uxtb	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800a47a:	4910      	ldr	r1, [pc, #64]	; (800a4bc <low_level_init+0x128>)
 800a47c:	4810      	ldr	r0, [pc, #64]	; (800a4c0 <low_level_init+0x12c>)
 800a47e:	f7f7 f846 	bl	800150e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800a482:	480f      	ldr	r0, [pc, #60]	; (800a4c0 <low_level_init+0x12c>)
 800a484:	f7f7 f875 	bl	8001572 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa18 	bl	800a8c4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a494:	e001      	b.n	800a49a <low_level_init+0x106>
    Error_Handler();
 800a496:	f7f6 f9eb 	bl	8000870 <Error_Handler>
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20004f6c 	.word	0x20004f6c
 800a4a8:	40028000 	.word	0x40028000
 800a4ac:	20004ecc 	.word	0x20004ecc
 800a4b0:	20004e2c 	.word	0x20004e2c
 800a4b4:	2000501c 	.word	0x2000501c
 800a4b8:	08020e68 	.word	0x08020e68
 800a4bc:	2000000c 	.word	0x2000000c
 800a4c0:	20005054 	.word	0x20005054

0800a4c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b092      	sub	sp, #72	; 0x48
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a4dc:	f107 030c 	add.w	r3, r7, #12
 800a4e0:	2230      	movs	r2, #48	; 0x30
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f012 fe5e 	bl	801d1a6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a4ea:	f107 030c 	add.w	r3, r7, #12
 800a4ee:	2230      	movs	r2, #48	; 0x30
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f012 fe57 	bl	801d1a6 <memset>

  for(q = p; q != NULL; q = q->next)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a4fc:	e045      	b.n	800a58a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a500:	2b03      	cmp	r3, #3
 800a502:	d902      	bls.n	800a50a <low_level_output+0x46>
      return ERR_IF;
 800a504:	f06f 030b 	mvn.w	r3, #11
 800a508:	e055      	b.n	800a5b6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50c:	6859      	ldr	r1, [r3, #4]
 800a50e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a510:	4613      	mov	r3, r2
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	3348      	adds	r3, #72	; 0x48
 800a51a:	443b      	add	r3, r7
 800a51c:	3b3c      	subs	r3, #60	; 0x3c
 800a51e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a522:	895b      	ldrh	r3, [r3, #10]
 800a524:	4619      	mov	r1, r3
 800a526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a528:	4613      	mov	r3, r2
 800a52a:	005b      	lsls	r3, r3, #1
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	3348      	adds	r3, #72	; 0x48
 800a532:	443b      	add	r3, r7
 800a534:	3b38      	subs	r3, #56	; 0x38
 800a536:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d011      	beq.n	800a562 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a540:	1e5a      	subs	r2, r3, #1
 800a542:	f107 000c 	add.w	r0, r7, #12
 800a546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a548:	460b      	mov	r3, r1
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	440b      	add	r3, r1
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	18c1      	adds	r1, r0, r3
 800a552:	4613      	mov	r3, r2
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	3348      	adds	r3, #72	; 0x48
 800a55c:	443b      	add	r3, r7
 800a55e:	3b34      	subs	r3, #52	; 0x34
 800a560:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a56c:	4613      	mov	r3, r2
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	3348      	adds	r3, #72	; 0x48
 800a576:	443b      	add	r3, r7
 800a578:	3b34      	subs	r3, #52	; 0x34
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a580:	3301      	adds	r3, #1
 800a582:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	643b      	str	r3, [r7, #64]	; 0x40
 800a58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1b6      	bne.n	800a4fe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	461a      	mov	r2, r3
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <low_level_output+0xfc>)
 800a598:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a59a:	4a09      	ldr	r2, [pc, #36]	; (800a5c0 <low_level_output+0xfc>)
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a5a2:	4a07      	ldr	r2, [pc, #28]	; (800a5c0 <low_level_output+0xfc>)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a5a8:	2214      	movs	r2, #20
 800a5aa:	4905      	ldr	r1, [pc, #20]	; (800a5c0 <low_level_output+0xfc>)
 800a5ac:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <low_level_output+0x100>)
 800a5ae:	f7f7 ffef 	bl	8002590 <HAL_ETH_Transmit>

  return errval;
 800a5b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3748      	adds	r7, #72	; 0x48
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	2000501c 	.word	0x2000501c
 800a5c4:	20004f6c 	.word	0x20004f6c

0800a5c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <low_level_input+0x2c>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d105      	bne.n	800a5e8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a5dc:	f107 030c 	add.w	r3, r7, #12
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <low_level_input+0x30>)
 800a5e4:	f7f8 f868 	bl	80026b8 <HAL_ETH_ReadData>
  }

  return p;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20004e28 	.word	0x20004e28
 800a5f8:	20004f6c 	.word	0x20004f6c

0800a5fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ffdd 	bl	800a5c8 <low_level_input>
 800a60e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	4798      	blx	r3
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f006 f8a6 	bl	8010778 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1ea      	bne.n	800a608 <ethernetif_input+0xc>
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <ethernetif_init+0x1c>
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <ethernetif_init+0x48>)
 800a64c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a650:	490d      	ldr	r1, [pc, #52]	; (800a688 <ethernetif_init+0x4c>)
 800a652:	480e      	ldr	r0, [pc, #56]	; (800a68c <ethernetif_init+0x50>)
 800a654:	f012 fd42 	bl	801d0dc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2273      	movs	r2, #115	; 0x73
 800a65c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2274      	movs	r2, #116	; 0x74
 800a664:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <ethernetif_init+0x54>)
 800a66c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a08      	ldr	r2, [pc, #32]	; (800a694 <ethernetif_init+0x58>)
 800a672:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fe8d 	bl	800a394 <low_level_init>

  return ERR_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	0801df80 	.word	0x0801df80
 800a688:	0801df9c 	.word	0x0801df9c
 800a68c:	0801dfac 	.word	0x0801dfac
 800a690:	0801a285 	.word	0x0801a285
 800a694:	0800a4c5 	.word	0x0800a4c5

0800a698 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a6a4:	68f9      	ldr	r1, [r7, #12]
 800a6a6:	4807      	ldr	r0, [pc, #28]	; (800a6c4 <pbuf_free_custom+0x2c>)
 800a6a8:	f005 f9c0 	bl	800fa2c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <pbuf_free_custom+0x30>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d102      	bne.n	800a6ba <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <pbuf_free_custom+0x30>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
  }
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	08020e68 	.word	0x08020e68
 800a6c8:	20004e28 	.word	0x20004e28

0800a6cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a6d0:	f7f7 f8e4 	bl	800189c <HAL_GetTick>
 800a6d4:	4603      	mov	r3, r0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08e      	sub	sp, #56	; 0x38
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	609a      	str	r2, [r3, #8]
 800a6f0:	60da      	str	r2, [r3, #12]
 800a6f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a46      	ldr	r2, [pc, #280]	; (800a814 <HAL_ETH_MspInit+0x138>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	f040 8085 	bne.w	800a80a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a700:	2300      	movs	r3, #0
 800a702:	623b      	str	r3, [r7, #32]
 800a704:	4b44      	ldr	r3, [pc, #272]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a708:	4a43      	ldr	r2, [pc, #268]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a70a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a70e:	6313      	str	r3, [r2, #48]	; 0x30
 800a710:	4b41      	ldr	r3, [pc, #260]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	2300      	movs	r3, #0
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	4b3d      	ldr	r3, [pc, #244]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a724:	4a3c      	ldr	r2, [pc, #240]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a72a:	6313      	str	r3, [r2, #48]	; 0x30
 800a72c:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	2300      	movs	r3, #0
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	4b36      	ldr	r3, [pc, #216]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	4a35      	ldr	r2, [pc, #212]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a746:	6313      	str	r3, [r2, #48]	; 0x30
 800a748:	4b33      	ldr	r3, [pc, #204]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a750:	61bb      	str	r3, [r7, #24]
 800a752:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a754:	2300      	movs	r3, #0
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	4b2f      	ldr	r3, [pc, #188]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75c:	4a2e      	ldr	r2, [pc, #184]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a75e:	f043 0304 	orr.w	r3, r3, #4
 800a762:	6313      	str	r3, [r2, #48]	; 0x30
 800a764:	4b2c      	ldr	r3, [pc, #176]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a770:	2300      	movs	r3, #0
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	4b28      	ldr	r3, [pc, #160]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	4a27      	ldr	r2, [pc, #156]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	6313      	str	r3, [r2, #48]	; 0x30
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	4b21      	ldr	r3, [pc, #132]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	4a20      	ldr	r2, [pc, #128]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a796:	f043 0302 	orr.w	r3, r3, #2
 800a79a:	6313      	str	r3, [r2, #48]	; 0x30
 800a79c:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <HAL_ETH_MspInit+0x13c>)
 800a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a7a8:	2332      	movs	r3, #50	; 0x32
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7b8:	230b      	movs	r3, #11
 800a7ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4816      	ldr	r0, [pc, #88]	; (800a81c <HAL_ETH_MspInit+0x140>)
 800a7c4:	f7f8 feb0 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a7c8:	2386      	movs	r3, #134	; 0x86
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7d8:	230b      	movs	r3, #11
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	480f      	ldr	r0, [pc, #60]	; (800a820 <HAL_ETH_MspInit+0x144>)
 800a7e4:	f7f8 fea0 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a7e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7fa:	230b      	movs	r3, #11
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a802:	4619      	mov	r1, r3
 800a804:	4807      	ldr	r0, [pc, #28]	; (800a824 <HAL_ETH_MspInit+0x148>)
 800a806:	f7f8 fe8f 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a80a:	bf00      	nop
 800a80c:	3738      	adds	r7, #56	; 0x38
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40028000 	.word	0x40028000
 800a818:	40023800 	.word	0x40023800
 800a81c:	40020800 	.word	0x40020800
 800a820:	40020000 	.word	0x40020000
 800a824:	40020400 	.word	0x40020400

0800a828 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a82c:	4802      	ldr	r0, [pc, #8]	; (800a838 <ETH_PHY_IO_Init+0x10>)
 800a82e:	f7f8 fa1f 	bl	8002c70 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20004f6c 	.word	0x20004f6c

0800a83c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  return 0;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	68f9      	ldr	r1, [r7, #12]
 800a85e:	4807      	ldr	r0, [pc, #28]	; (800a87c <ETH_PHY_IO_ReadReg+0x30>)
 800a860:	f7f8 f86e 	bl	8002940 <HAL_ETH_ReadPHYRegister>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	e000      	b.n	800a872 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20004f6c 	.word	0x20004f6c

0800a880 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	68f9      	ldr	r1, [r7, #12]
 800a892:	4807      	ldr	r0, [pc, #28]	; (800a8b0 <ETH_PHY_IO_WriteReg+0x30>)
 800a894:	f7f8 f89f 	bl	80029d6 <HAL_ETH_WritePHYRegister>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a2:	e000      	b.n	800a8a6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20004f6c 	.word	0x20004f6c

0800a8b4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a8b8:	f7f6 fff0 	bl	800189c <HAL_GetTick>
 800a8bc:	4603      	mov	r3, r0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b0a0      	sub	sp, #128	; 0x80
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a8cc:	f107 030c 	add.w	r3, r7, #12
 800a8d0:	2264      	movs	r2, #100	; 0x64
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f012 fc66 	bl	801d1a6 <memset>
  int32_t PHYLinkState = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800a8ea:	483a      	ldr	r0, [pc, #232]	; (800a9d4 <ethernet_link_check_state+0x110>)
 800a8ec:	f7f6 fee9 	bl	80016c2 <DP83848_GetLinkState>
 800a8f0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8f8:	089b      	lsrs	r3, r3, #2
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00c      	beq.n	800a91e <ethernet_link_check_state+0x5a>
 800a904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a906:	2b01      	cmp	r3, #1
 800a908:	dc09      	bgt.n	800a91e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a90a:	4833      	ldr	r0, [pc, #204]	; (800a9d8 <ethernet_link_check_state+0x114>)
 800a90c:	f7f7 fde7 	bl	80024de <HAL_ETH_Stop>
    netif_set_down(netif);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f005 fb17 	bl	800ff44 <netif_set_down>
    netif_set_link_down(netif);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f005 fb7e 	bl	8010018 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a91c:	e055      	b.n	800a9ca <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d14e      	bne.n	800a9ca <ethernet_link_check_state+0x106>
 800a92c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a92e:	2b01      	cmp	r3, #1
 800a930:	dd4b      	ble.n	800a9ca <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a934:	3b02      	subs	r3, #2
 800a936:	2b03      	cmp	r3, #3
 800a938:	d82a      	bhi.n	800a990 <ethernet_link_check_state+0xcc>
 800a93a:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <ethernet_link_check_state+0x7c>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a951 	.word	0x0800a951
 800a944:	0800a963 	.word	0x0800a963
 800a948:	0800a973 	.word	0x0800a973
 800a94c:	0800a983 	.word	0x0800a983
      duplex = ETH_FULLDUPLEX_MODE;
 800a950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a954:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a95a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a95c:	2301      	movs	r3, #1
 800a95e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a960:	e017      	b.n	800a992 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a962:	2300      	movs	r3, #0
 800a964:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a96a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a96c:	2301      	movs	r3, #1
 800a96e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a970:	e00f      	b.n	800a992 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a976:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a978:	2300      	movs	r3, #0
 800a97a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a97c:	2301      	movs	r3, #1
 800a97e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a980:	e007      	b.n	800a992 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a982:	2300      	movs	r3, #0
 800a984:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a986:	2300      	movs	r3, #0
 800a988:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a98a:	2301      	movs	r3, #1
 800a98c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a98e:	e000      	b.n	800a992 <ethernet_link_check_state+0xce>
      break;
 800a990:	bf00      	nop
    if(linkchanged)
 800a992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d018      	beq.n	800a9ca <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a998:	f107 030c 	add.w	r3, r7, #12
 800a99c:	4619      	mov	r1, r3
 800a99e:	480e      	ldr	r0, [pc, #56]	; (800a9d8 <ethernet_link_check_state+0x114>)
 800a9a0:	f7f8 f862 	bl	8002a68 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a9a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9aa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4809      	ldr	r0, [pc, #36]	; (800a9d8 <ethernet_link_check_state+0x114>)
 800a9b4:	f7f8 f942 	bl	8002c3c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a9b8:	4807      	ldr	r0, [pc, #28]	; (800a9d8 <ethernet_link_check_state+0x114>)
 800a9ba:	f7f7 fd31 	bl	8002420 <HAL_ETH_Start>
      netif_set_up(netif);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f005 fa54 	bl	800fe6c <netif_set_up>
      netif_set_link_up(netif);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f005 faef 	bl	800ffa8 <netif_set_link_up>
}
 800a9ca:	bf00      	nop
 800a9cc:	3780      	adds	r7, #128	; 0x80
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20005054 	.word	0x20005054
 800a9d8:	20004f6c 	.word	0x20004f6c

0800a9dc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a9e4:	4812      	ldr	r0, [pc, #72]	; (800aa30 <HAL_ETH_RxAllocateCallback+0x54>)
 800a9e6:	f004 ffb3 	bl	800f950 <memp_malloc_pool>
 800a9ea:	60f8      	str	r0, [r7, #12]
  if (p)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d014      	beq.n	800aa1c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f103 0220 	add.w	r2, r3, #32
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4a0d      	ldr	r2, [pc, #52]	; (800aa34 <HAL_ETH_RxAllocateCallback+0x58>)
 800aa00:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aa0a:	9201      	str	r2, [sp, #4]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2241      	movs	r2, #65	; 0x41
 800aa12:	2100      	movs	r1, #0
 800aa14:	2000      	movs	r0, #0
 800aa16:	f005 fcf5 	bl	8010404 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800aa1a:	e005      	b.n	800aa28 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <HAL_ETH_RxAllocateCallback+0x5c>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]
}
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	08020e68 	.word	0x08020e68
 800aa34:	0800a699 	.word	0x0800a699
 800aa38:	20004e28 	.word	0x20004e28

0800aa3c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b089      	sub	sp, #36	; 0x24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3b20      	subs	r3, #32
 800aa5a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	2200      	movs	r2, #0
 800aa66:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	887a      	ldrh	r2, [r7, #2]
 800aa6c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	e003      	b.n	800aa86 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	61fb      	str	r3, [r7, #28]
 800aa92:	e009      	b.n	800aaa8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	891a      	ldrh	r2, [r3, #8]
 800aa98:	887b      	ldrh	r3, [r7, #2]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	61fb      	str	r3, [r7, #28]
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1f2      	bne.n	800aa94 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	3724      	adds	r7, #36	; 0x24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aac8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aacc:	f012 f932 	bl	801cd34 <USBD_static_malloc>
 800aad0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d109      	bne.n	800aaec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32b0      	adds	r2, #176	; 0xb0
 800aae2:	2100      	movs	r1, #0
 800aae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aae8:	2302      	movs	r3, #2
 800aaea:	e0d4      	b.n	800ac96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aaec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f012 fb57 	bl	801d1a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	32b0      	adds	r2, #176	; 0xb0
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	32b0      	adds	r2, #176	; 0xb0
 800ab12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7c1b      	ldrb	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d138      	bne.n	800ab96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab24:	4b5e      	ldr	r3, [pc, #376]	; (800aca0 <USBD_CDC_Init+0x1e4>)
 800ab26:	7819      	ldrb	r1, [r3, #0]
 800ab28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f011 ffbd 	bl	801caae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab34:	4b5a      	ldr	r3, [pc, #360]	; (800aca0 <USBD_CDC_Init+0x1e4>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	3324      	adds	r3, #36	; 0x24
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab4e:	4b55      	ldr	r3, [pc, #340]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab56:	2202      	movs	r2, #2
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f011 ffa8 	bl	801caae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab5e:	4b51      	ldr	r3, [pc, #324]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	f003 020f 	and.w	r2, r3, #15
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab76:	2201      	movs	r2, #1
 800ab78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab7a:	4b4b      	ldr	r3, [pc, #300]	; (800aca8 <USBD_CDC_Init+0x1ec>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 020f 	and.w	r2, r3, #15
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	440b      	add	r3, r1
 800ab8e:	3326      	adds	r3, #38	; 0x26
 800ab90:	2210      	movs	r2, #16
 800ab92:	801a      	strh	r2, [r3, #0]
 800ab94:	e035      	b.n	800ac02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab96:	4b42      	ldr	r3, [pc, #264]	; (800aca0 <USBD_CDC_Init+0x1e4>)
 800ab98:	7819      	ldrb	r1, [r3, #0]
 800ab9a:	2340      	movs	r3, #64	; 0x40
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f011 ff85 	bl	801caae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aba4:	4b3e      	ldr	r3, [pc, #248]	; (800aca0 <USBD_CDC_Init+0x1e4>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	f003 020f 	and.w	r2, r3, #15
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	2201      	movs	r2, #1
 800abbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abbe:	4b39      	ldr	r3, [pc, #228]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800abc0:	7819      	ldrb	r1, [r3, #0]
 800abc2:	2340      	movs	r3, #64	; 0x40
 800abc4:	2202      	movs	r2, #2
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f011 ff71 	bl	801caae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abcc:	4b35      	ldr	r3, [pc, #212]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abe4:	2201      	movs	r2, #1
 800abe6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800abe8:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <USBD_CDC_Init+0x1ec>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	3326      	adds	r3, #38	; 0x26
 800abfe:	2210      	movs	r2, #16
 800ac00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac02:	4b29      	ldr	r3, [pc, #164]	; (800aca8 <USBD_CDC_Init+0x1ec>)
 800ac04:	7819      	ldrb	r1, [r3, #0]
 800ac06:	2308      	movs	r3, #8
 800ac08:	2203      	movs	r2, #3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f011 ff4f 	bl	801caae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac10:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <USBD_CDC_Init+0x1ec>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 020f 	and.w	r2, r3, #15
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	3324      	adds	r3, #36	; 0x24
 800ac26:	2201      	movs	r2, #1
 800ac28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	33b0      	adds	r3, #176	; 0xb0
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac60:	2302      	movs	r3, #2
 800ac62:	e018      	b.n	800ac96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	7c1b      	ldrb	r3, [r3, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800ac6e:	7819      	ldrb	r1, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f012 f825 	bl	801ccca <USBD_LL_PrepareReceive>
 800ac80:	e008      	b.n	800ac94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <USBD_CDC_Init+0x1e8>)
 800ac84:	7819      	ldrb	r1, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac8c:	2340      	movs	r3, #64	; 0x40
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f012 f81b 	bl	801ccca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	200000a7 	.word	0x200000a7
 800aca4:	200000a8 	.word	0x200000a8
 800aca8:	200000a9 	.word	0x200000a9

0800acac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800acb8:	4b3a      	ldr	r3, [pc, #232]	; (800ada4 <USBD_CDC_DeInit+0xf8>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f011 ff1b 	bl	801cafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800acc4:	4b37      	ldr	r3, [pc, #220]	; (800ada4 <USBD_CDC_DeInit+0xf8>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 020f 	and.w	r2, r3, #15
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	3324      	adds	r3, #36	; 0x24
 800acda:	2200      	movs	r2, #0
 800acdc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800acde:	4b32      	ldr	r3, [pc, #200]	; (800ada8 <USBD_CDC_DeInit+0xfc>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f011 ff08 	bl	801cafa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800acea:	4b2f      	ldr	r3, [pc, #188]	; (800ada8 <USBD_CDC_DeInit+0xfc>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	f003 020f 	and.w	r2, r3, #15
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad02:	2200      	movs	r2, #0
 800ad04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad06:	4b29      	ldr	r3, [pc, #164]	; (800adac <USBD_CDC_DeInit+0x100>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f011 fef4 	bl	801cafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad12:	4b26      	ldr	r3, [pc, #152]	; (800adac <USBD_CDC_DeInit+0x100>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3324      	adds	r3, #36	; 0x24
 800ad28:	2200      	movs	r2, #0
 800ad2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad2c:	4b1f      	ldr	r3, [pc, #124]	; (800adac <USBD_CDC_DeInit+0x100>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 020f 	and.w	r2, r3, #15
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4613      	mov	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	440b      	add	r3, r1
 800ad40:	3326      	adds	r3, #38	; 0x26
 800ad42:	2200      	movs	r2, #0
 800ad44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	32b0      	adds	r2, #176	; 0xb0
 800ad50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01f      	beq.n	800ad98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	33b0      	adds	r3, #176	; 0xb0
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32b0      	adds	r2, #176	; 0xb0
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f011 ffe8 	bl	801cd50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	32b0      	adds	r2, #176	; 0xb0
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200000a7 	.word	0x200000a7
 800ada8:	200000a8 	.word	0x200000a8
 800adac:	200000a9 	.word	0x200000a9

0800adb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	32b0      	adds	r2, #176	; 0xb0
 800adc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800addc:	2303      	movs	r3, #3
 800adde:	e0bf      	b.n	800af60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d050      	beq.n	800ae8e <USBD_CDC_Setup+0xde>
 800adec:	2b20      	cmp	r3, #32
 800adee:	f040 80af 	bne.w	800af50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	88db      	ldrh	r3, [r3, #6]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d03a      	beq.n	800ae70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da1b      	bge.n	800ae3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	33b0      	adds	r3, #176	; 0xb0
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	88d2      	ldrh	r2, [r2, #6]
 800ae20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	88db      	ldrh	r3, [r3, #6]
 800ae26:	2b07      	cmp	r3, #7
 800ae28:	bf28      	it	cs
 800ae2a:	2307      	movcs	r3, #7
 800ae2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	89fa      	ldrh	r2, [r7, #14]
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f003 fd6d 	bl	800e914 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae3a:	e090      	b.n	800af5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	785a      	ldrb	r2, [r3, #1]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	88db      	ldrh	r3, [r3, #6]
 800ae4a:	2b3f      	cmp	r3, #63	; 0x3f
 800ae4c:	d803      	bhi.n	800ae56 <USBD_CDC_Setup+0xa6>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	88db      	ldrh	r3, [r3, #6]
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	e000      	b.n	800ae58 <USBD_CDC_Setup+0xa8>
 800ae56:	2240      	movs	r2, #64	; 0x40
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae5e:	6939      	ldr	r1, [r7, #16]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ae66:	461a      	mov	r2, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f003 fd7f 	bl	800e96c <USBD_CtlPrepareRx>
      break;
 800ae6e:	e076      	b.n	800af5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	33b0      	adds	r3, #176	; 0xb0
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	7850      	ldrb	r0, [r2, #1]
 800ae86:	2200      	movs	r2, #0
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	4798      	blx	r3
      break;
 800ae8c:	e067      	b.n	800af5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	2b0b      	cmp	r3, #11
 800ae94:	d851      	bhi.n	800af3a <USBD_CDC_Setup+0x18a>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <USBD_CDC_Setup+0xec>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aecd 	.word	0x0800aecd
 800aea0:	0800af49 	.word	0x0800af49
 800aea4:	0800af3b 	.word	0x0800af3b
 800aea8:	0800af3b 	.word	0x0800af3b
 800aeac:	0800af3b 	.word	0x0800af3b
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af3b 	.word	0x0800af3b
 800aeb8:	0800af3b 	.word	0x0800af3b
 800aebc:	0800af3b 	.word	0x0800af3b
 800aec0:	0800af3b 	.word	0x0800af3b
 800aec4:	0800aef7 	.word	0x0800aef7
 800aec8:	0800af21 	.word	0x0800af21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d107      	bne.n	800aee8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aed8:	f107 030a 	add.w	r3, r7, #10
 800aedc:	2202      	movs	r2, #2
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f003 fd17 	bl	800e914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aee6:	e032      	b.n	800af4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f003 fca1 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	75fb      	strb	r3, [r7, #23]
          break;
 800aef4:	e02b      	b.n	800af4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d107      	bne.n	800af12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af02:	f107 030d 	add.w	r3, r7, #13
 800af06:	2201      	movs	r2, #1
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f003 fd02 	bl	800e914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af10:	e01d      	b.n	800af4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f003 fc8c 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800af1a:	2303      	movs	r3, #3
 800af1c:	75fb      	strb	r3, [r7, #23]
          break;
 800af1e:	e016      	b.n	800af4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d00f      	beq.n	800af4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f003 fc7f 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800af34:	2303      	movs	r3, #3
 800af36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af38:	e008      	b.n	800af4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f003 fc78 	bl	800e832 <USBD_CtlError>
          ret = USBD_FAIL;
 800af42:	2303      	movs	r3, #3
 800af44:	75fb      	strb	r3, [r7, #23]
          break;
 800af46:	e002      	b.n	800af4e <USBD_CDC_Setup+0x19e>
          break;
 800af48:	bf00      	nop
 800af4a:	e008      	b.n	800af5e <USBD_CDC_Setup+0x1ae>
          break;
 800af4c:	bf00      	nop
      }
      break;
 800af4e:	e006      	b.n	800af5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f003 fc6d 	bl	800e832 <USBD_CtlError>
      ret = USBD_FAIL;
 800af58:	2303      	movs	r3, #3
 800af5a:	75fb      	strb	r3, [r7, #23]
      break;
 800af5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32b0      	adds	r2, #176	; 0xb0
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af8e:	2303      	movs	r3, #3
 800af90:	e065      	b.n	800b05e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	32b0      	adds	r2, #176	; 0xb0
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afa2:	78fb      	ldrb	r3, [r7, #3]
 800afa4:	f003 020f 	and.w	r2, r3, #15
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	440b      	add	r3, r1
 800afb4:	3318      	adds	r3, #24
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d02f      	beq.n	800b01c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	f003 020f 	and.w	r2, r3, #15
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	4613      	mov	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	440b      	add	r3, r1
 800afce:	3318      	adds	r3, #24
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	f003 010f 	and.w	r1, r3, #15
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	460b      	mov	r3, r1
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	440b      	add	r3, r1
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4403      	add	r3, r0
 800afe4:	331c      	adds	r3, #28
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	fbb2 f1f3 	udiv	r1, r2, r3
 800afec:	fb01 f303 	mul.w	r3, r1, r3
 800aff0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d112      	bne.n	800b01c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aff6:	78fb      	ldrb	r3, [r7, #3]
 800aff8:	f003 020f 	and.w	r2, r3, #15
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	3318      	adds	r3, #24
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b00e:	78f9      	ldrb	r1, [r7, #3]
 800b010:	2300      	movs	r3, #0
 800b012:	2200      	movs	r2, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f011 fe37 	bl	801cc88 <USBD_LL_Transmit>
 800b01a:	e01f      	b.n	800b05c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	33b0      	adds	r3, #176	; 0xb0
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d010      	beq.n	800b05c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	33b0      	adds	r3, #176	; 0xb0
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b058:	78fa      	ldrb	r2, [r7, #3]
 800b05a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	32b0      	adds	r2, #176	; 0xb0
 800b07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b080:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	32b0      	adds	r2, #176	; 0xb0
 800b08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	e01a      	b.n	800b0ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b098:	78fb      	ldrb	r3, [r7, #3]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f011 fe35 	bl	801cd0c <USBD_LL_GetRxDataSize>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	33b0      	adds	r3, #176	; 0xb0
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	32b0      	adds	r2, #176	; 0xb0
 800b0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e025      	b.n	800b144 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	33b0      	adds	r3, #176	; 0xb0
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01a      	beq.n	800b142 <USBD_CDC_EP0_RxReady+0x6c>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b112:	2bff      	cmp	r3, #255	; 0xff
 800b114:	d015      	beq.n	800b142 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	33b0      	adds	r3, #176	; 0xb0
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b12e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b136:	b292      	uxth	r2, r2
 800b138:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	22ff      	movs	r2, #255	; 0xff
 800b13e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b154:	2182      	movs	r1, #130	; 0x82
 800b156:	4818      	ldr	r0, [pc, #96]	; (800b1b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b158:	f002 fd32 	bl	800dbc0 <USBD_GetEpDesc>
 800b15c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b15e:	2101      	movs	r1, #1
 800b160:	4815      	ldr	r0, [pc, #84]	; (800b1b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b162:	f002 fd2d 	bl	800dbc0 <USBD_GetEpDesc>
 800b166:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b168:	2181      	movs	r1, #129	; 0x81
 800b16a:	4813      	ldr	r0, [pc, #76]	; (800b1b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b16c:	f002 fd28 	bl	800dbc0 <USBD_GetEpDesc>
 800b170:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2210      	movs	r2, #16
 800b17c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2200      	movs	r2, #0
 800b188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b18c:	711a      	strb	r2, [r3, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d006      	beq.n	800b1a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1a0:	711a      	strb	r2, [r3, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2243      	movs	r2, #67	; 0x43
 800b1aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000064 	.word	0x20000064

0800b1bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1c4:	2182      	movs	r1, #130	; 0x82
 800b1c6:	4818      	ldr	r0, [pc, #96]	; (800b228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1c8:	f002 fcfa 	bl	800dbc0 <USBD_GetEpDesc>
 800b1cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	4815      	ldr	r0, [pc, #84]	; (800b228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1d2:	f002 fcf5 	bl	800dbc0 <USBD_GetEpDesc>
 800b1d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1d8:	2181      	movs	r1, #129	; 0x81
 800b1da:	4813      	ldr	r0, [pc, #76]	; (800b228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1dc:	f002 fcf0 	bl	800dbc0 <USBD_GetEpDesc>
 800b1e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2210      	movs	r2, #16
 800b1ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d006      	beq.n	800b202 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	711a      	strb	r2, [r3, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f042 0202 	orr.w	r2, r2, #2
 800b200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	711a      	strb	r2, [r3, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f042 0202 	orr.w	r2, r2, #2
 800b214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2243      	movs	r2, #67	; 0x43
 800b21a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20000064 	.word	0x20000064

0800b22c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b234:	2182      	movs	r1, #130	; 0x82
 800b236:	4818      	ldr	r0, [pc, #96]	; (800b298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b238:	f002 fcc2 	bl	800dbc0 <USBD_GetEpDesc>
 800b23c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b23e:	2101      	movs	r1, #1
 800b240:	4815      	ldr	r0, [pc, #84]	; (800b298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b242:	f002 fcbd 	bl	800dbc0 <USBD_GetEpDesc>
 800b246:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b248:	2181      	movs	r1, #129	; 0x81
 800b24a:	4813      	ldr	r0, [pc, #76]	; (800b298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b24c:	f002 fcb8 	bl	800dbc0 <USBD_GetEpDesc>
 800b250:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2210      	movs	r2, #16
 800b25c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d006      	beq.n	800b272 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	2200      	movs	r2, #0
 800b268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b26c:	711a      	strb	r2, [r3, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d006      	beq.n	800b286 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b280:	711a      	strb	r2, [r3, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2243      	movs	r2, #67	; 0x43
 800b28a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b28c:	4b02      	ldr	r3, [pc, #8]	; (800b298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000064 	.word	0x20000064

0800b29c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	220a      	movs	r2, #10
 800b2a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2aa:	4b03      	ldr	r3, [pc, #12]	; (800b2b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	20000020 	.word	0x20000020

0800b2bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e009      	b.n	800b2e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	33b0      	adds	r3, #176	; 0xb0
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	32b0      	adds	r2, #176	; 0xb0
 800b306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b312:	2303      	movs	r3, #3
 800b314:	e008      	b.n	800b328 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	32b0      	adds	r2, #176	; 0xb0
 800b348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b354:	2303      	movs	r3, #3
 800b356:	e004      	b.n	800b362 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
	...

0800b370 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	32b0      	adds	r2, #176	; 0xb0
 800b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b386:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b388:	2301      	movs	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	e025      	b.n	800b3e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d11f      	bne.n	800b3e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b3a8:	4b10      	ldr	r3, [pc, #64]	; (800b3ec <USBD_CDC_TransmitPacket+0x7c>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 020f 	and.w	r2, r3, #15
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4403      	add	r3, r0
 800b3c2:	3318      	adds	r3, #24
 800b3c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <USBD_CDC_TransmitPacket+0x7c>)
 800b3c8:	7819      	ldrb	r1, [r3, #0]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f011 fc56 	bl	801cc88 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200000a7 	.word	0x200000a7

0800b3f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	32b0      	adds	r2, #176	; 0xb0
 800b402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b406:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32b0      	adds	r2, #176	; 0xb0
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e018      	b.n	800b450 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7c1b      	ldrb	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b426:	4b0c      	ldr	r3, [pc, #48]	; (800b458 <USBD_CDC_ReceivePacket+0x68>)
 800b428:	7819      	ldrb	r1, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f011 fc48 	bl	801ccca <USBD_LL_PrepareReceive>
 800b43a:	e008      	b.n	800b44e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b43c:	4b06      	ldr	r3, [pc, #24]	; (800b458 <USBD_CDC_ReceivePacket+0x68>)
 800b43e:	7819      	ldrb	r1, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f011 fc3e 	bl	801ccca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	200000a8 	.word	0x200000a8

0800b45c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b468:	f44f 701d 	mov.w	r0, #628	; 0x274
 800b46c:	f011 fc62 	bl	801cd34 <USBD_static_malloc>
 800b470:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	32b0      	adds	r2, #176	; 0xb0
 800b482:	2100      	movs	r1, #0
 800b484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b488:	2302      	movs	r3, #2
 800b48a:	e06e      	b.n	800b56a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32b0      	adds	r2, #176	; 0xb0
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32b0      	adds	r2, #176	; 0xb0
 800b4a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7c1b      	ldrb	r3, [r3, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d12b      	bne.n	800b510 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b4b8:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <USBD_MSC_Init+0x118>)
 800b4ba:	7819      	ldrb	r1, [r3, #0]
 800b4bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f011 faf3 	bl	801caae <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b4c8:	4b2a      	ldr	r3, [pc, #168]	; (800b574 <USBD_MSC_Init+0x118>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	f003 020f 	and.w	r2, r3, #15
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b4e4:	4b24      	ldr	r3, [pc, #144]	; (800b578 <USBD_MSC_Init+0x11c>)
 800b4e6:	7819      	ldrb	r1, [r3, #0]
 800b4e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f011 fadd 	bl	801caae <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b4f4:	4b20      	ldr	r3, [pc, #128]	; (800b578 <USBD_MSC_Init+0x11c>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	f003 020f 	and.w	r2, r3, #15
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	3324      	adds	r3, #36	; 0x24
 800b50a:	2201      	movs	r2, #1
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	e028      	b.n	800b562 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b510:	4b18      	ldr	r3, [pc, #96]	; (800b574 <USBD_MSC_Init+0x118>)
 800b512:	7819      	ldrb	r1, [r3, #0]
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	2202      	movs	r2, #2
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f011 fac8 	bl	801caae <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800b51e:	4b15      	ldr	r3, [pc, #84]	; (800b574 <USBD_MSC_Init+0x118>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	f003 020f 	and.w	r2, r3, #15
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	440b      	add	r3, r1
 800b532:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b536:	2201      	movs	r2, #1
 800b538:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b53a:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <USBD_MSC_Init+0x11c>)
 800b53c:	7819      	ldrb	r1, [r3, #0]
 800b53e:	2340      	movs	r3, #64	; 0x40
 800b540:	2202      	movs	r2, #2
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f011 fab3 	bl	801caae <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <USBD_MSC_Init+0x11c>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	f003 020f 	and.w	r2, r3, #15
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	3324      	adds	r3, #36	; 0x24
 800b55e:	2201      	movs	r2, #1
 800b560:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa2c 	bl	800b9c0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	2000010f 	.word	0x2000010f
 800b578:	2000010e 	.word	0x2000010e

0800b57c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	460b      	mov	r3, r1
 800b586:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800b588:	4b26      	ldr	r3, [pc, #152]	; (800b624 <USBD_MSC_DeInit+0xa8>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f011 fab3 	bl	801cafa <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800b594:	4b23      	ldr	r3, [pc, #140]	; (800b624 <USBD_MSC_DeInit+0xa8>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 020f 	and.w	r2, r3, #15
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <USBD_MSC_DeInit+0xac>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f011 fa9f 	bl	801cafa <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <USBD_MSC_DeInit+0xac>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	f003 020f 	and.w	r2, r3, #15
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3324      	adds	r3, #36	; 0x24
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	32b0      	adds	r2, #176	; 0xb0
 800b5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d018      	beq.n	800b61a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fa67 	bl	800babc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	32b0      	adds	r2, #176	; 0xb0
 800b5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f011 fba7 	bl	801cd50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	32b0      	adds	r2, #176	; 0xb0
 800b60c:	2100      	movs	r1, #0
 800b60e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	2000010f 	.word	0x2000010f
 800b628:	2000010e 	.word	0x2000010e

0800b62c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	32b0      	adds	r2, #176	; 0xb0
 800b640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b644:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b654:	2303      	movs	r3, #3
 800b656:	e0e1      	b.n	800b81c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b660:	2b00      	cmp	r3, #0
 800b662:	d053      	beq.n	800b70c <USBD_MSC_Setup+0xe0>
 800b664:	2b20      	cmp	r3, #32
 800b666:	f040 80d1 	bne.w	800b80c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	2bfe      	cmp	r3, #254	; 0xfe
 800b670:	d002      	beq.n	800b678 <USBD_MSC_Setup+0x4c>
 800b672:	2bff      	cmp	r3, #255	; 0xff
 800b674:	d02a      	beq.n	800b6cc <USBD_MSC_Setup+0xa0>
 800b676:	e041      	b.n	800b6fc <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	885b      	ldrh	r3, [r3, #2]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d11e      	bne.n	800b6be <USBD_MSC_Setup+0x92>
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	88db      	ldrh	r3, [r3, #6]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d11a      	bne.n	800b6be <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b68e:	2b00      	cmp	r3, #0
 800b690:	da15      	bge.n	800b6be <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	33b0      	adds	r3, #176	; 0xb0
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	4798      	blx	r3
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f003 f92d 	bl	800e914 <USBD_CtlSendData>
 800b6ba:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6bc:	e025      	b.n	800b70a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f003 f8b6 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ca:	e01e      	b.n	800b70a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	885b      	ldrh	r3, [r3, #2]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <USBD_MSC_Setup+0xc2>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	88db      	ldrh	r3, [r3, #6]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d108      	bne.n	800b6ee <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	db03      	blt.n	800b6ee <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f9b4 	bl	800ba54 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6ec:	e00d      	b.n	800b70a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f003 f89e 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b6fa:	e006      	b.n	800b70a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f003 f897 	bl	800e832 <USBD_CtlError>
          ret = USBD_FAIL;
 800b704:	2303      	movs	r3, #3
 800b706:	75fb      	strb	r3, [r7, #23]
          break;
 800b708:	bf00      	nop
      }
      break;
 800b70a:	e086      	b.n	800b81a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	785b      	ldrb	r3, [r3, #1]
 800b710:	2b0b      	cmp	r3, #11
 800b712:	d872      	bhi.n	800b7fa <USBD_MSC_Setup+0x1ce>
 800b714:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <USBD_MSC_Setup+0xf0>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b74d 	.word	0x0800b74d
 800b720:	0800b7c9 	.word	0x0800b7c9
 800b724:	0800b7fb 	.word	0x0800b7fb
 800b728:	0800b7fb 	.word	0x0800b7fb
 800b72c:	0800b7fb 	.word	0x0800b7fb
 800b730:	0800b7fb 	.word	0x0800b7fb
 800b734:	0800b7fb 	.word	0x0800b7fb
 800b738:	0800b7fb 	.word	0x0800b7fb
 800b73c:	0800b7fb 	.word	0x0800b7fb
 800b740:	0800b7fb 	.word	0x0800b7fb
 800b744:	0800b777 	.word	0x0800b777
 800b748:	0800b7a1 	.word	0x0800b7a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b03      	cmp	r3, #3
 800b756:	d107      	bne.n	800b768 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b758:	f107 030e 	add.w	r3, r7, #14
 800b75c:	2202      	movs	r2, #2
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f003 f8d7 	bl	800e914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b766:	e050      	b.n	800b80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f003 f861 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800b770:	2303      	movs	r3, #3
 800b772:	75fb      	strb	r3, [r7, #23]
          break;
 800b774:	e049      	b.n	800b80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d107      	bne.n	800b792 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3304      	adds	r3, #4
 800b786:	2201      	movs	r2, #1
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f003 f8c2 	bl	800e914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b790:	e03b      	b.n	800b80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f003 f84c 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800b79a:	2303      	movs	r3, #3
 800b79c:	75fb      	strb	r3, [r7, #23]
          break;
 800b79e:	e034      	b.n	800b80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d106      	bne.n	800b7ba <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	885b      	ldrh	r3, [r3, #2]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7b8:	e027      	b.n	800b80a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f003 f838 	bl	800e832 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7c6:	e020      	b.n	800b80a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d119      	bne.n	800b808 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	885b      	ldrh	r3, [r3, #2]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d115      	bne.n	800b808 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	889b      	ldrh	r3, [r3, #4]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f011 f9a7 	bl	801cb38 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	889b      	ldrh	r3, [r3, #4]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fb2e 	bl	800be54 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b7f8:	e006      	b.n	800b808 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f003 f818 	bl	800e832 <USBD_CtlError>
          ret = USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	75fb      	strb	r3, [r7, #23]
          break;
 800b806:	e000      	b.n	800b80a <USBD_MSC_Setup+0x1de>
          break;
 800b808:	bf00      	nop
      }
      break;
 800b80a:	e006      	b.n	800b81a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f003 f80f 	bl	800e832 <USBD_CtlError>
      ret = USBD_FAIL;
 800b814:	2303      	movs	r3, #3
 800b816:	75fb      	strb	r3, [r7, #23]
      break;
 800b818:	bf00      	nop
  }

  return (uint8_t)ret;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f959 	bl	800baec <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f983 	bl	800bb60 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b86c:	2181      	movs	r1, #129	; 0x81
 800b86e:	4812      	ldr	r0, [pc, #72]	; (800b8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b870:	f002 f9a6 	bl	800dbc0 <USBD_GetEpDesc>
 800b874:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b876:	2101      	movs	r1, #1
 800b878:	480f      	ldr	r0, [pc, #60]	; (800b8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b87a:	f002 f9a1 	bl	800dbc0 <USBD_GetEpDesc>
 800b87e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d006      	beq.n	800b894 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	711a      	strb	r2, [r3, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f042 0202 	orr.w	r2, r2, #2
 800b892:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d006      	beq.n	800b8a8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	711a      	strb	r2, [r3, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f042 0202 	orr.w	r2, r2, #2
 800b8a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b8ae:	4b02      	ldr	r3, [pc, #8]	; (800b8b8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	200000e4 	.word	0x200000e4

0800b8bc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b8c4:	2181      	movs	r1, #129	; 0x81
 800b8c6:	4812      	ldr	r0, [pc, #72]	; (800b910 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b8c8:	f002 f97a 	bl	800dbc0 <USBD_GetEpDesc>
 800b8cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	480f      	ldr	r0, [pc, #60]	; (800b910 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b8d2:	f002 f975 	bl	800dbc0 <USBD_GetEpDesc>
 800b8d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d006      	beq.n	800b8ec <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8e6:	711a      	strb	r2, [r3, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d006      	beq.n	800b900 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8fa:	711a      	strb	r2, [r3, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b906:	4b02      	ldr	r3, [pc, #8]	; (800b910 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	200000e4 	.word	0x200000e4

0800b914 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b91c:	2181      	movs	r1, #129	; 0x81
 800b91e:	4812      	ldr	r0, [pc, #72]	; (800b968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b920:	f002 f94e 	bl	800dbc0 <USBD_GetEpDesc>
 800b924:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b926:	2101      	movs	r1, #1
 800b928:	480f      	ldr	r0, [pc, #60]	; (800b968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b92a:	f002 f949 	bl	800dbc0 <USBD_GetEpDesc>
 800b92e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b93e:	711a      	strb	r2, [r3, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d006      	beq.n	800b958 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b952:	711a      	strb	r2, [r3, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2220      	movs	r2, #32
 800b95c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b95e:	4b02      	ldr	r3, [pc, #8]	; (800b968 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	200000e4 	.word	0x200000e4

0800b96c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	220a      	movs	r2, #10
 800b978:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b97a:	4b03      	ldr	r3, [pc, #12]	; (800b988 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	20000104 	.word	0x20000104

0800b98c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e009      	b.n	800b9b4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	33b0      	adds	r3, #176	; 0xb0
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32b0      	adds	r2, #176	; 0xb0
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d032      	beq.n	800ba44 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	33b0      	adds	r3, #176	; 0xb0
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2000      	movs	r0, #0
 800ba16:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800ba18:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <MSC_BOT_Init+0x8c>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f011 f88a 	bl	801cb38 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800ba24:	4b0a      	ldr	r3, [pc, #40]	; (800ba50 <MSC_BOT_Init+0x90>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f011 f884 	bl	801cb38 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ba30:	4b06      	ldr	r3, [pc, #24]	; (800ba4c <MSC_BOT_Init+0x8c>)
 800ba32:	7819      	ldrb	r1, [r3, #0]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ba3a:	231f      	movs	r3, #31
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f011 f944 	bl	801ccca <USBD_LL_PrepareReceive>
 800ba42:	e000      	b.n	800ba46 <MSC_BOT_Init+0x86>
    return;
 800ba44:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	2000010f 	.word	0x2000010f
 800ba50:	2000010e 	.word	0x2000010e

0800ba54 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	32b0      	adds	r2, #176	; 0xb0
 800ba66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d01b      	beq.n	800baaa <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800ba7e:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <MSC_BOT_Reset+0x60>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f011 f895 	bl	801cbb4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800ba8a:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <MSC_BOT_Reset+0x64>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f011 f88f 	bl	801cbb4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ba96:	4b08      	ldr	r3, [pc, #32]	; (800bab8 <MSC_BOT_Reset+0x64>)
 800ba98:	7819      	ldrb	r1, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800baa0:	231f      	movs	r3, #31
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f011 f911 	bl	801ccca <USBD_LL_PrepareReceive>
 800baa8:	e000      	b.n	800baac <MSC_BOT_Reset+0x58>
    return;
 800baaa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	2000010e 	.word	0x2000010e
 800bab8:	2000010f 	.word	0x2000010f

0800babc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	32b0      	adds	r2, #176	; 0xb0
 800bace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	721a      	strb	r2, [r3, #8]
  }
}
 800bae0:	bf00      	nop
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	32b0      	adds	r2, #176	; 0xb0
 800bb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb06:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d020      	beq.n	800bb50 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	7a1b      	ldrb	r3, [r3, #8]
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d005      	beq.n	800bb22 <MSC_BOT_DataIn+0x36>
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	db1c      	blt.n	800bb54 <MSC_BOT_DataIn+0x68>
 800bb1a:	3b03      	subs	r3, #3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d819      	bhi.n	800bb54 <MSC_BOT_DataIn+0x68>
 800bb20:	e011      	b.n	800bb46 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f9c9 	bl	800bec8 <SCSI_ProcessCmd>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da0d      	bge.n	800bb58 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f90c 	bl	800bd5c <MSC_BOT_SendCSW>
      }
      break;
 800bb44:	e008      	b.n	800bb58 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bb46:	2100      	movs	r1, #0
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f907 	bl	800bd5c <MSC_BOT_SendCSW>
      break;
 800bb4e:	e004      	b.n	800bb5a <MSC_BOT_DataIn+0x6e>
    return;
 800bb50:	bf00      	nop
 800bb52:	e002      	b.n	800bb5a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800bb54:	bf00      	nop
 800bb56:	e000      	b.n	800bb5a <MSC_BOT_DataIn+0x6e>
      break;
 800bb58:	bf00      	nop
  }
}
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	32b0      	adds	r2, #176	; 0xb0
 800bb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d01c      	beq.n	800bbbc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7a1b      	ldrb	r3, [r3, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <MSC_BOT_DataOut+0x30>
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d004      	beq.n	800bb98 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800bb8e:	e018      	b.n	800bbc2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f819 	bl	800bbc8 <MSC_BOT_CBW_Decode>
      break;
 800bb96:	e014      	b.n	800bbc2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bba4:	461a      	mov	r2, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f98e 	bl	800bec8 <SCSI_ProcessCmd>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	da06      	bge.n	800bbc0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f8d1 	bl	800bd5c <MSC_BOT_SendCSW>
      break;
 800bbba:	e001      	b.n	800bbc0 <MSC_BOT_DataOut+0x60>
    return;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <MSC_BOT_DataOut+0x62>
      break;
 800bbc0:	bf00      	nop
  }
}
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	32b0      	adds	r2, #176	; 0xb0
 800bbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d079      	beq.n	800bcda <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800bbfe:	4b3a      	ldr	r3, [pc, #232]	; (800bce8 <MSC_BOT_CBW_Decode+0x120>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f011 f881 	bl	801cd0c <USBD_LL_GetRxDataSize>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b1f      	cmp	r3, #31
 800bc0e:	d114      	bne.n	800bc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800bc16:	4a35      	ldr	r2, [pc, #212]	; (800bcec <MSC_BOT_CBW_Decode+0x124>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d10e      	bne.n	800bc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d809      	bhi.n	800bc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800bc36:	2b10      	cmp	r3, #16
 800bc38:	d90e      	bls.n	800bc58 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc40:	2320      	movs	r3, #32
 800bc42:	2205      	movs	r2, #5
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fe56 	bl	800c8f6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f8bd 	bl	800bdd0 <MSC_BOT_Abort>
 800bc56:	e043      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800bc64:	461a      	mov	r2, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f92e 	bl	800bec8 <SCSI_ProcessCmd>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	da0c      	bge.n	800bc8c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	7a1b      	ldrb	r3, [r3, #8]
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d104      	bne.n	800bc84 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f86d 	bl	800bd5c <MSC_BOT_SendCSW>
 800bc82:	e02d      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f8a3 	bl	800bdd0 <MSC_BOT_Abort>
 800bc8a:	e029      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	7a1b      	ldrb	r3, [r3, #8]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d024      	beq.n	800bcde <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d020      	beq.n	800bcde <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d01c      	beq.n	800bcde <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d009      	beq.n	800bcc0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f103 0110 	add.w	r1, r3, #16
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f819 	bl	800bcf0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800bcbe:	e00f      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bcc8:	2100      	movs	r1, #0
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f846 	bl	800bd5c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800bcd0:	e006      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f87c 	bl	800bdd0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800bcd8:	e002      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
    return;
 800bcda:	bf00      	nop
 800bcdc:	e000      	b.n	800bce0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800bcde:	bf00      	nop
    }
  }
}
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	2000010f 	.word	0x2000010f
 800bcec:	43425355 	.word	0x43425355

0800bcf0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	32b0      	adds	r2, #176	; 0xb0
 800bd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d01e      	beq.n	800bd50 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	bf28      	it	cs
 800bd1e:	4613      	movcs	r3, r2
 800bd20:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	1ad2      	subs	r2, r2, r3
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2204      	movs	r2, #4
 800bd3e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800bd40:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <MSC_BOT_SendData+0x68>)
 800bd42:	7819      	ldrb	r1, [r3, #0]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f010 ff9d 	bl	801cc88 <USBD_LL_Transmit>
 800bd4e:	e000      	b.n	800bd52 <MSC_BOT_SendData+0x62>
    return;
 800bd50:	bf00      	nop
}
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	2000010e 	.word	0x2000010e

0800bd5c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	32b0      	adds	r2, #176	; 0xb0
 800bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd76:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d01d      	beq.n	800bdba <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4a10      	ldr	r2, [pc, #64]	; (800bdc4 <MSC_BOT_SendCSW+0x68>)
 800bd82:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	78fa      	ldrb	r2, [r7, #3]
 800bd8a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800bd94:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <MSC_BOT_SendCSW+0x6c>)
 800bd96:	7819      	ldrb	r1, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800bd9e:	230d      	movs	r3, #13
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f010 ff71 	bl	801cc88 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <MSC_BOT_SendCSW+0x70>)
 800bda8:	7819      	ldrb	r1, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800bdb0:	231f      	movs	r3, #31
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f010 ff89 	bl	801ccca <USBD_LL_PrepareReceive>
 800bdb8:	e000      	b.n	800bdbc <MSC_BOT_SendCSW+0x60>
    return;
 800bdba:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	53425355 	.word	0x53425355
 800bdc8:	2000010e 	.word	0x2000010e
 800bdcc:	2000010f 	.word	0x2000010f

0800bdd0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	32b0      	adds	r2, #176	; 0xb0
 800bde2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d02a      	beq.n	800be44 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10e      	bne.n	800be16 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d009      	beq.n	800be16 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800be0a:	4b10      	ldr	r3, [pc, #64]	; (800be4c <MSC_BOT_Abort+0x7c>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f010 feb0 	bl	801cb76 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800be16:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <MSC_BOT_Abort+0x80>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f010 feaa 	bl	801cb76 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	7a5b      	ldrb	r3, [r3, #9]
 800be26:	2b02      	cmp	r3, #2
 800be28:	d10d      	bne.n	800be46 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <MSC_BOT_Abort+0x80>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f010 fea0 	bl	801cb76 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <MSC_BOT_Abort+0x7c>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f010 fe9a 	bl	801cb76 <USBD_LL_StallEP>
 800be42:	e000      	b.n	800be46 <MSC_BOT_Abort+0x76>
    return;
 800be44:	bf00      	nop
  }
}
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	2000010f 	.word	0x2000010f
 800be50:	2000010e 	.word	0x2000010e

0800be54 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	32b0      	adds	r2, #176	; 0xb0
 800be6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01d      	beq.n	800beb2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	7a5b      	ldrb	r3, [r3, #9]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d10c      	bne.n	800be98 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800be7e:	4b10      	ldr	r3, [pc, #64]	; (800bec0 <MSC_BOT_CplClrFeature+0x6c>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f010 fe76 	bl	801cb76 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800be8a:	4b0e      	ldr	r3, [pc, #56]	; (800bec4 <MSC_BOT_CplClrFeature+0x70>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f010 fe70 	bl	801cb76 <USBD_LL_StallEP>
 800be96:	e00f      	b.n	800beb8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800be98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	da0a      	bge.n	800beb6 <MSC_BOT_CplClrFeature+0x62>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	7a5b      	ldrb	r3, [r3, #9]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d006      	beq.n	800beb6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bea8:	2101      	movs	r1, #1
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff ff56 	bl	800bd5c <MSC_BOT_SendCSW>
 800beb0:	e002      	b.n	800beb8 <MSC_BOT_CplClrFeature+0x64>
    return;
 800beb2:	bf00      	nop
 800beb4:	e000      	b.n	800beb8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800beb6:	bf00      	nop
  }
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	2000010e 	.word	0x2000010e
 800bec4:	2000010f 	.word	0x2000010f

0800bec8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	460b      	mov	r3, r1
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	32b0      	adds	r2, #176	; 0xb0
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800beec:	f04f 33ff 	mov.w	r3, #4294967295
 800bef0:	e168      	b.n	800c1c4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	2baa      	cmp	r3, #170	; 0xaa
 800bef8:	f000 8144 	beq.w	800c184 <SCSI_ProcessCmd+0x2bc>
 800befc:	2baa      	cmp	r3, #170	; 0xaa
 800befe:	f300 8153 	bgt.w	800c1a8 <SCSI_ProcessCmd+0x2e0>
 800bf02:	2ba8      	cmp	r3, #168	; 0xa8
 800bf04:	f000 812c 	beq.w	800c160 <SCSI_ProcessCmd+0x298>
 800bf08:	2ba8      	cmp	r3, #168	; 0xa8
 800bf0a:	f300 814d 	bgt.w	800c1a8 <SCSI_ProcessCmd+0x2e0>
 800bf0e:	2b5a      	cmp	r3, #90	; 0x5a
 800bf10:	f300 80c0 	bgt.w	800c094 <SCSI_ProcessCmd+0x1cc>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f2c0 8147 	blt.w	800c1a8 <SCSI_ProcessCmd+0x2e0>
 800bf1a:	2b5a      	cmp	r3, #90	; 0x5a
 800bf1c:	f200 8144 	bhi.w	800c1a8 <SCSI_ProcessCmd+0x2e0>
 800bf20:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <SCSI_ProcessCmd+0x60>)
 800bf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf26:	bf00      	nop
 800bf28:	0800c09b 	.word	0x0800c09b
 800bf2c:	0800c1a9 	.word	0x0800c1a9
 800bf30:	0800c1a9 	.word	0x0800c1a9
 800bf34:	0800c0ad 	.word	0x0800c0ad
 800bf38:	0800c1a9 	.word	0x0800c1a9
 800bf3c:	0800c1a9 	.word	0x0800c1a9
 800bf40:	0800c1a9 	.word	0x0800c1a9
 800bf44:	0800c1a9 	.word	0x0800c1a9
 800bf48:	0800c1a9 	.word	0x0800c1a9
 800bf4c:	0800c1a9 	.word	0x0800c1a9
 800bf50:	0800c1a9 	.word	0x0800c1a9
 800bf54:	0800c1a9 	.word	0x0800c1a9
 800bf58:	0800c1a9 	.word	0x0800c1a9
 800bf5c:	0800c1a9 	.word	0x0800c1a9
 800bf60:	0800c1a9 	.word	0x0800c1a9
 800bf64:	0800c1a9 	.word	0x0800c1a9
 800bf68:	0800c1a9 	.word	0x0800c1a9
 800bf6c:	0800c1a9 	.word	0x0800c1a9
 800bf70:	0800c0bf 	.word	0x0800c0bf
 800bf74:	0800c1a9 	.word	0x0800c1a9
 800bf78:	0800c1a9 	.word	0x0800c1a9
 800bf7c:	0800c1a9 	.word	0x0800c1a9
 800bf80:	0800c1a9 	.word	0x0800c1a9
 800bf84:	0800c1a9 	.word	0x0800c1a9
 800bf88:	0800c1a9 	.word	0x0800c1a9
 800bf8c:	0800c1a9 	.word	0x0800c1a9
 800bf90:	0800c0f5 	.word	0x0800c0f5
 800bf94:	0800c0d1 	.word	0x0800c0d1
 800bf98:	0800c1a9 	.word	0x0800c1a9
 800bf9c:	0800c1a9 	.word	0x0800c1a9
 800bfa0:	0800c0e3 	.word	0x0800c0e3
 800bfa4:	0800c1a9 	.word	0x0800c1a9
 800bfa8:	0800c1a9 	.word	0x0800c1a9
 800bfac:	0800c1a9 	.word	0x0800c1a9
 800bfb0:	0800c1a9 	.word	0x0800c1a9
 800bfb4:	0800c119 	.word	0x0800c119
 800bfb8:	0800c1a9 	.word	0x0800c1a9
 800bfbc:	0800c12b 	.word	0x0800c12b
 800bfc0:	0800c1a9 	.word	0x0800c1a9
 800bfc4:	0800c1a9 	.word	0x0800c1a9
 800bfc8:	0800c14f 	.word	0x0800c14f
 800bfcc:	0800c1a9 	.word	0x0800c1a9
 800bfd0:	0800c173 	.word	0x0800c173
 800bfd4:	0800c1a9 	.word	0x0800c1a9
 800bfd8:	0800c1a9 	.word	0x0800c1a9
 800bfdc:	0800c1a9 	.word	0x0800c1a9
 800bfe0:	0800c1a9 	.word	0x0800c1a9
 800bfe4:	0800c197 	.word	0x0800c197
 800bfe8:	0800c1a9 	.word	0x0800c1a9
 800bfec:	0800c1a9 	.word	0x0800c1a9
 800bff0:	0800c1a9 	.word	0x0800c1a9
 800bff4:	0800c1a9 	.word	0x0800c1a9
 800bff8:	0800c1a9 	.word	0x0800c1a9
 800bffc:	0800c1a9 	.word	0x0800c1a9
 800c000:	0800c1a9 	.word	0x0800c1a9
 800c004:	0800c1a9 	.word	0x0800c1a9
 800c008:	0800c1a9 	.word	0x0800c1a9
 800c00c:	0800c1a9 	.word	0x0800c1a9
 800c010:	0800c1a9 	.word	0x0800c1a9
 800c014:	0800c1a9 	.word	0x0800c1a9
 800c018:	0800c1a9 	.word	0x0800c1a9
 800c01c:	0800c1a9 	.word	0x0800c1a9
 800c020:	0800c1a9 	.word	0x0800c1a9
 800c024:	0800c1a9 	.word	0x0800c1a9
 800c028:	0800c1a9 	.word	0x0800c1a9
 800c02c:	0800c1a9 	.word	0x0800c1a9
 800c030:	0800c1a9 	.word	0x0800c1a9
 800c034:	0800c1a9 	.word	0x0800c1a9
 800c038:	0800c1a9 	.word	0x0800c1a9
 800c03c:	0800c1a9 	.word	0x0800c1a9
 800c040:	0800c1a9 	.word	0x0800c1a9
 800c044:	0800c1a9 	.word	0x0800c1a9
 800c048:	0800c1a9 	.word	0x0800c1a9
 800c04c:	0800c1a9 	.word	0x0800c1a9
 800c050:	0800c1a9 	.word	0x0800c1a9
 800c054:	0800c1a9 	.word	0x0800c1a9
 800c058:	0800c1a9 	.word	0x0800c1a9
 800c05c:	0800c1a9 	.word	0x0800c1a9
 800c060:	0800c1a9 	.word	0x0800c1a9
 800c064:	0800c1a9 	.word	0x0800c1a9
 800c068:	0800c1a9 	.word	0x0800c1a9
 800c06c:	0800c1a9 	.word	0x0800c1a9
 800c070:	0800c1a9 	.word	0x0800c1a9
 800c074:	0800c1a9 	.word	0x0800c1a9
 800c078:	0800c1a9 	.word	0x0800c1a9
 800c07c:	0800c1a9 	.word	0x0800c1a9
 800c080:	0800c1a9 	.word	0x0800c1a9
 800c084:	0800c1a9 	.word	0x0800c1a9
 800c088:	0800c1a9 	.word	0x0800c1a9
 800c08c:	0800c1a9 	.word	0x0800c1a9
 800c090:	0800c107 	.word	0x0800c107
 800c094:	2b9e      	cmp	r3, #158	; 0x9e
 800c096:	d051      	beq.n	800c13c <SCSI_ProcessCmd+0x274>
 800c098:	e086      	b.n	800c1a8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800c09a:	7afb      	ldrb	r3, [r7, #11]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f893 	bl	800c1cc <SCSI_TestUnitReady>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0aa:	e089      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 fb9c 	bl	800c7f0 <SCSI_RequestSense>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c0bc:	e080      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800c0be:	7afb      	ldrb	r3, [r7, #11]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 f8db 	bl	800c280 <SCSI_Inquiry>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ce:	e077      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 fc58 	bl	800c98c <SCSI_StartStopUnit>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]
      break;
 800c0e0:	e06e      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 fca4 	bl	800ca36 <SCSI_AllowPreventRemovable>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f2:	e065      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800c0f4:	7afb      	ldrb	r3, [r7, #11]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 faec 	bl	800c6d8 <SCSI_ModeSense6>
 800c100:	4603      	mov	r3, r0
 800c102:	75fb      	strb	r3, [r7, #23]
      break;
 800c104:	e05c      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800c106:	7afb      	ldrb	r3, [r7, #11]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	4619      	mov	r1, r3
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 fb29 	bl	800c764 <SCSI_ModeSense10>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]
      break;
 800c116:	e053      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4619      	mov	r1, r3
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 fa5e 	bl	800c5e0 <SCSI_ReadFormatCapacity>
 800c124:	4603      	mov	r3, r0
 800c126:	75fb      	strb	r3, [r7, #23]
      break;
 800c128:	e04a      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800c12a:	7afb      	ldrb	r3, [r7, #11]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	4619      	mov	r1, r3
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f000 f923 	bl	800c37c <SCSI_ReadCapacity10>
 800c136:	4603      	mov	r3, r0
 800c138:	75fb      	strb	r3, [r7, #23]
      break;
 800c13a:	e041      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800c13c:	7afb      	ldrb	r3, [r7, #11]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4619      	mov	r1, r3
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 f998 	bl	800c478 <SCSI_ReadCapacity16>
 800c148:	4603      	mov	r3, r0
 800c14a:	75fb      	strb	r3, [r7, #23]
      break;
 800c14c:	e038      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800c14e:	7afb      	ldrb	r3, [r7, #11]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	4619      	mov	r1, r3
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 fc9b 	bl	800ca90 <SCSI_Read10>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75fb      	strb	r3, [r7, #23]
      break;
 800c15e:	e02f      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4619      	mov	r1, r3
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f000 fd3c 	bl	800cbe4 <SCSI_Read12>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75fb      	strb	r3, [r7, #23]
      break;
 800c170:	e026      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800c172:	7afb      	ldrb	r3, [r7, #11]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4619      	mov	r1, r3
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 fde7 	bl	800cd4c <SCSI_Write10>
 800c17e:	4603      	mov	r3, r0
 800c180:	75fb      	strb	r3, [r7, #23]
      break;
 800c182:	e01d      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800c184:	7afb      	ldrb	r3, [r7, #11]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4619      	mov	r1, r3
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 feb4 	bl	800cef8 <SCSI_Write12>
 800c190:	4603      	mov	r3, r0
 800c192:	75fb      	strb	r3, [r7, #23]
      break;
 800c194:	e014      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4619      	mov	r1, r3
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 ff91 	bl	800d0c4 <SCSI_Verify10>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a6:	e00b      	b.n	800c1c0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800c1a8:	7af9      	ldrb	r1, [r7, #11]
 800c1aa:	2320      	movs	r3, #32
 800c1ac:	2205      	movs	r2, #5
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f000 fba1 	bl	800c8f6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800c1ba:	23ff      	movs	r3, #255	; 0xff
 800c1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c1be:	bf00      	nop
  }

  return ret;
 800c1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	32b0      	adds	r2, #176	; 0xb0
 800c1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d102      	bne.n	800c1f6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800c1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f4:	e03f      	b.n	800c276 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c206:	2320      	movs	r3, #32
 800c208:	2205      	movs	r2, #5
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f000 fb73 	bl	800c8f6 <SCSI_SenseCode>

    return -1;
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	e02f      	b.n	800c276 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d10b      	bne.n	800c238 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c220:	7af9      	ldrb	r1, [r7, #11]
 800c222:	233a      	movs	r3, #58	; 0x3a
 800c224:	2202      	movs	r2, #2
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f000 fb65 	bl	800c8f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	2205      	movs	r2, #5
 800c230:	721a      	strb	r2, [r3, #8]
    return -1;
 800c232:	f04f 33ff 	mov.w	r3, #4294967295
 800c236:	e01e      	b.n	800c276 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	33b0      	adds	r3, #176	; 0xb0
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	7afa      	ldrb	r2, [r7, #11]
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00b      	beq.n	800c26e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c256:	7af9      	ldrb	r1, [r7, #11]
 800c258:	233a      	movs	r3, #58	; 0x3a
 800c25a:	2202      	movs	r2, #2
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 fb4a 	bl	800c8f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2205      	movs	r2, #5
 800c266:	721a      	strb	r2, [r3, #8]

    return -1;
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	e003      	b.n	800c276 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2200      	movs	r2, #0
 800c272:	60da      	str	r2, [r3, #12]

  return 0;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
	...

0800c280 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	460b      	mov	r3, r1
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	32b0      	adds	r2, #176	; 0xb0
 800c298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <SCSI_Inquiry+0x2a>
  {
    return -1;
 800c2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a8:	e05f      	b.n	800c36a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c2ba:	2320      	movs	r3, #32
 800c2bc:	2205      	movs	r2, #5
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 fb19 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800c2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c8:	e04f      	b.n	800c36a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	f003 0301 	and.w	r3, r3, #1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d020      	beq.n	800c31a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3302      	adds	r3, #2
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800c2e2:	2206      	movs	r2, #6
 800c2e4:	4923      	ldr	r1, [pc, #140]	; (800c374 <SCSI_Inquiry+0xf4>)
 800c2e6:	69b8      	ldr	r0, [r7, #24]
 800c2e8:	f001 f872 	bl	800d3d0 <SCSI_UpdateBotData>
 800c2ec:	e03c      	b.n	800c368 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b80      	cmp	r3, #128	; 0x80
 800c2f6:	d105      	bne.n	800c304 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800c2f8:	2208      	movs	r2, #8
 800c2fa:	491f      	ldr	r1, [pc, #124]	; (800c378 <SCSI_Inquiry+0xf8>)
 800c2fc:	69b8      	ldr	r0, [r7, #24]
 800c2fe:	f001 f867 	bl	800d3d0 <SCSI_UpdateBotData>
 800c302:	e031      	b.n	800c368 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c30a:	2324      	movs	r3, #36	; 0x24
 800c30c:	2205      	movs	r2, #5
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 faf1 	bl	800c8f6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	e027      	b.n	800c36a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	33b0      	adds	r3, #176	; 0xb0
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800c32a:	69d9      	ldr	r1, [r3, #28]
 800c32c:	7afa      	ldrb	r2, [r7, #11]
 800c32e:	4613      	mov	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800c336:	440b      	add	r3, r1
 800c338:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	3304      	adds	r3, #4
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	b29b      	uxth	r3, r3
 800c342:	3305      	adds	r3, #5
 800c344:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	3304      	adds	r3, #4
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	8bfa      	ldrh	r2, [r7, #30]
 800c350:	429a      	cmp	r2, r3
 800c352:	d303      	bcc.n	800c35c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3304      	adds	r3, #4
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800c35c:	8bfb      	ldrh	r3, [r7, #30]
 800c35e:	461a      	mov	r2, r3
 800c360:	6979      	ldr	r1, [r7, #20]
 800c362:	69b8      	ldr	r0, [r7, #24]
 800c364:	f001 f834 	bl	800d3d0 <SCSI_UpdateBotData>
  }

  return 0;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000110 	.word	0x20000110
 800c378:	20000118 	.word	0x20000118

0800c37c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	460b      	mov	r3, r1
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	32b0      	adds	r2, #176	; 0xb0
 800c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c398:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e064      	b.n	800c470 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	33b0      	adds	r3, #176	; 0xb0
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c3c4:	7af8      	ldrb	r0, [r7, #11]
 800c3c6:	4798      	blx	r3
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c3cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d104      	bne.n	800c3de <SCSI_ReadCapacity10+0x62>
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d108      	bne.n	800c3f0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c3de:	7af9      	ldrb	r1, [r7, #11]
 800c3e0:	233a      	movs	r3, #58	; 0x3a
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 fa86 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800c3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ee:	e03f      	b.n	800c470 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	0e1b      	lsrs	r3, r3, #24
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c406:	3b01      	subs	r3, #1
 800c408:	0c1b      	lsrs	r3, r3, #16
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c416:	3b01      	subs	r3, #1
 800c418:	0a1b      	lsrs	r3, r3, #8
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c426:	b2db      	uxtb	r3, r3
 800c428:	3b01      	subs	r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c436:	161b      	asrs	r3, r3, #24
 800c438:	b2da      	uxtb	r2, r3
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c444:	141b      	asrs	r3, r3, #16
 800c446:	b2da      	uxtb	r2, r3
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c452:	0a1b      	lsrs	r3, r3, #8
 800c454:	b29b      	uxth	r3, r3
 800c456:	b2da      	uxtb	r2, r3
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c462:	b2da      	uxtb	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2208      	movs	r2, #8
 800c46c:	60da      	str	r2, [r3, #12]

  return 0;
 800c46e:	2300      	movs	r3, #0

}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	460b      	mov	r3, r1
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	32b0      	adds	r2, #176	; 0xb0
 800c490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c494:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800c49c:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a0:	e09a      	b.n	800c5d8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	33b0      	adds	r3, #176	; 0xb0
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800c4c0:	7af8      	ldrb	r0, [r7, #11]
 800c4c2:	4798      	blx	r3
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c4c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <SCSI_ReadCapacity16+0x62>
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d108      	bne.n	800c4ec <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c4da:	7af9      	ldrb	r1, [r7, #11]
 800c4dc:	233a      	movs	r3, #58	; 0x3a
 800c4de:	2202      	movs	r2, #2
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 fa08 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e075      	b.n	800c5d8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	330a      	adds	r3, #10
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	330b      	adds	r3, #11
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c4fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	330c      	adds	r3, #12
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c506:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	320d      	adds	r2, #13
 800c50c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c50e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c514:	2300      	movs	r3, #0
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	e008      	b.n	800c52c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800c51a:	69ba      	ldr	r2, [r7, #24]
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	3310      	adds	r3, #16
 800c522:	2200      	movs	r2, #0
 800c524:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	3301      	adds	r3, #1
 800c52a:	61fb      	str	r3, [r7, #28]
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d3f1      	bcc.n	800c51a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c53c:	3b01      	subs	r3, #1
 800c53e:	0e1b      	lsrs	r3, r3, #24
 800c540:	b2da      	uxtb	r2, r3
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c54c:	3b01      	subs	r3, #1
 800c54e:	0c1b      	lsrs	r3, r3, #16
 800c550:	b2da      	uxtb	r2, r3
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c55c:	3b01      	subs	r3, #1
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	b2da      	uxtb	r2, r3
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c57c:	161b      	asrs	r3, r3, #24
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c58a:	141b      	asrs	r3, r3, #16
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c598:	0a1b      	lsrs	r3, r3, #8
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	330a      	adds	r3, #10
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	330b      	adds	r3, #11
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c5be:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	330c      	adds	r3, #12
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c5c8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	320d      	adds	r2, #13
 800c5ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c5d0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	60da      	str	r2, [r3, #12]

  return 0;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3720      	adds	r7, #32
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	32b0      	adds	r2, #176	; 0xb0
 800c5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800c604:	f04f 33ff 	mov.w	r3, #4294967295
 800c608:	e061      	b.n	800c6ce <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	33b0      	adds	r3, #176	; 0xb0
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f107 0214 	add.w	r2, r7, #20
 800c620:	f107 0110 	add.w	r1, r7, #16
 800c624:	7af8      	ldrb	r0, [r7, #11]
 800c626:	4798      	blx	r3
 800c628:	4603      	mov	r3, r0
 800c62a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c62c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d104      	bne.n	800c63e <SCSI_ReadFormatCapacity+0x5e>
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d108      	bne.n	800c650 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c63e:	7af9      	ldrb	r1, [r7, #11]
 800c640:	233a      	movs	r3, #58	; 0x3a
 800c642:	2202      	movs	r2, #2
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f956 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	e03e      	b.n	800c6ce <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800c650:	2300      	movs	r3, #0
 800c652:	83fb      	strh	r3, [r7, #30]
 800c654:	e007      	b.n	800c666 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800c656:	8bfb      	ldrh	r3, [r7, #30]
 800c658:	69ba      	ldr	r2, [r7, #24]
 800c65a:	4413      	add	r3, r2
 800c65c:	2200      	movs	r2, #0
 800c65e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c660:	8bfb      	ldrh	r3, [r7, #30]
 800c662:	3301      	adds	r3, #1
 800c664:	83fb      	strh	r3, [r7, #30]
 800c666:	8bfb      	ldrh	r3, [r7, #30]
 800c668:	2b0b      	cmp	r3, #11
 800c66a:	d9f4      	bls.n	800c656 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2208      	movs	r2, #8
 800c670:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	3b01      	subs	r3, #1
 800c676:	0e1b      	lsrs	r3, r3, #24
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	3b01      	subs	r3, #1
 800c682:	0c1b      	lsrs	r3, r3, #16
 800c684:	b2da      	uxtb	r2, r3
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	0a1b      	lsrs	r3, r3, #8
 800c690:	b2da      	uxtb	r2, r3
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	3b01      	subs	r3, #1
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c6a8:	8abb      	ldrh	r3, [r7, #20]
 800c6aa:	141b      	asrs	r3, r3, #16
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c6b2:	8abb      	ldrh	r3, [r7, #20]
 800c6b4:	0a1b      	lsrs	r3, r3, #8
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c6be:	8abb      	ldrh	r3, [r7, #20]
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	60da      	str	r2, [r3, #12]

  return 0;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	32b0      	adds	r2, #176	; 0xb0
 800c6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c6f6:	2304      	movs	r3, #4
 800c6f8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	e027      	b.n	800c756 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	33b0      	adds	r3, #176	; 0xb0
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	7afa      	ldrb	r2, [r7, #11]
 800c71a:	4610      	mov	r0, r2
 800c71c:	4798      	blx	r3
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d006      	beq.n	800c732 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <SCSI_ModeSense6+0x88>)
 800c726:	789b      	ldrb	r3, [r3, #2]
 800c728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <SCSI_ModeSense6+0x88>)
 800c730:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3304      	adds	r3, #4
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	8afa      	ldrh	r2, [r7, #22]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d303      	bcc.n	800c748 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3304      	adds	r3, #4
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c748:	8afb      	ldrh	r3, [r7, #22]
 800c74a:	461a      	mov	r2, r3
 800c74c:	4904      	ldr	r1, [pc, #16]	; (800c760 <SCSI_ModeSense6+0x88>)
 800c74e:	6938      	ldr	r0, [r7, #16]
 800c750:	f000 fe3e 	bl	800d3d0 <SCSI_UpdateBotData>

  return 0;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20000120 	.word	0x20000120

0800c764 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	460b      	mov	r3, r1
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	32b0      	adds	r2, #176	; 0xb0
 800c77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c780:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c782:	2308      	movs	r3, #8
 800c784:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c78c:	f04f 33ff 	mov.w	r3, #4294967295
 800c790:	e027      	b.n	800c7e2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	33b0      	adds	r3, #176	; 0xb0
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	7afa      	ldrb	r2, [r7, #11]
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	4798      	blx	r3
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800c7b0:	4b0e      	ldr	r3, [pc, #56]	; (800c7ec <SCSI_ModeSense10+0x88>)
 800c7b2:	78db      	ldrb	r3, [r3, #3]
 800c7b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <SCSI_ModeSense10+0x88>)
 800c7bc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	8afa      	ldrh	r2, [r7, #22]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d303      	bcc.n	800c7d4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c7d4:	8afb      	ldrh	r3, [r7, #22]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	4904      	ldr	r1, [pc, #16]	; (800c7ec <SCSI_ModeSense10+0x88>)
 800c7da:	6938      	ldr	r0, [r7, #16]
 800c7dc:	f000 fdf8 	bl	800d3d0 <SCSI_UpdateBotData>

  return 0;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000124 	.word	0x20000124

0800c7f0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	32b0      	adds	r2, #176	; 0xb0
 800c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c814:	f04f 33ff 	mov.w	r3, #4294967295
 800c818:	e069      	b.n	800c8ee <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c82a:	2320      	movs	r3, #32
 800c82c:	2205      	movs	r2, #5
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f000 f861 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800c834:	f04f 33ff 	mov.w	r3, #4294967295
 800c838:	e059      	b.n	800c8ee <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
 800c83e:	e007      	b.n	800c850 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	4413      	add	r3, r2
 800c846:	2200      	movs	r2, #0
 800c848:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	3301      	adds	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b11      	cmp	r3, #17
 800c854:	d9f4      	bls.n	800c840 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	2270      	movs	r2, #112	; 0x70
 800c85a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	220c      	movs	r2, #12
 800c860:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c86e:	429a      	cmp	r2, r3
 800c870:	d02e      	beq.n	800c8d0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c878:	461a      	mov	r2, r3
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3248      	adds	r2, #72	; 0x48
 800c87e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	3348      	adds	r3, #72	; 0x48
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	4413      	add	r3, r2
 800c894:	791a      	ldrb	r2, [r3, #4]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	3348      	adds	r3, #72	; 0x48
 800c8a4:	00db      	lsls	r3, r3, #3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	795a      	ldrb	r2, [r3, #5]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d103      	bne.n	800c8d0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2212      	movs	r2, #18
 800c8d4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b12      	cmp	r3, #18
 800c8de:	d805      	bhi.n	800c8ec <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b085      	sub	sp, #20
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	4608      	mov	r0, r1
 800c900:	4611      	mov	r1, r2
 800c902:	461a      	mov	r2, r3
 800c904:	4603      	mov	r3, r0
 800c906:	70fb      	strb	r3, [r7, #3]
 800c908:	460b      	mov	r3, r1
 800c90a:	70bb      	strb	r3, [r7, #2]
 800c90c:	4613      	mov	r3, r2
 800c90e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	32b0      	adds	r2, #176	; 0xb0
 800c91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d02c      	beq.n	800c980 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c92c:	461a      	mov	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3248      	adds	r2, #72	; 0x48
 800c932:	78b9      	ldrb	r1, [r7, #2]
 800c934:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	3348      	adds	r3, #72	; 0x48
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	787a      	ldrb	r2, [r7, #1]
 800c948:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	3348      	adds	r3, #72	; 0x48
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	4413      	add	r3, r2
 800c958:	2200      	movs	r2, #0
 800c95a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c962:	3301      	adds	r3, #1
 800c964:	b2da      	uxtb	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c972:	2b04      	cmp	r3, #4
 800c974:	d105      	bne.n	800c982 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c97e:	e000      	b.n	800c982 <SCSI_SenseCode+0x8c>
    return;
 800c980:	bf00      	nop
  }
}
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	460b      	mov	r3, r1
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	32b0      	adds	r2, #176	; 0xb0
 800c9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800c9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b4:	e03b      	b.n	800ca2e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10f      	bne.n	800c9e0 <SCSI_StartStopUnit+0x54>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	f003 0303 	and.w	r3, r3, #3
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d108      	bne.n	800c9e0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c9ce:	7af9      	ldrb	r1, [r7, #11]
 800c9d0:	2324      	movs	r3, #36	; 0x24
 800c9d2:	2205      	movs	r2, #5
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff ff8e 	bl	800c8f6 <SCSI_SenseCode>

    return -1;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	e026      	b.n	800ca2e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d104      	bne.n	800c9f8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c9f6:	e016      	b.n	800ca26 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	f003 0303 	and.w	r3, r3, #3
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d104      	bne.n	800ca10 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ca0e:	e00a      	b.n	800ca26 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3304      	adds	r3, #4
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d103      	bne.n	800ca26 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	60da      	str	r2, [r3, #12]

  return 0;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b087      	sub	sp, #28
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	60f8      	str	r0, [r7, #12]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	607a      	str	r2, [r7, #4]
 800ca42:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	32b0      	adds	r2, #176	; 0xb0
 800ca4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca52:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ca5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5e:	e011      	b.n	800ca84 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3304      	adds	r3, #4
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d104      	bne.n	800ca74 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ca72:	e003      	b.n	800ca7c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	60da      	str	r2, [r3, #12]

  return 0;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	371c      	adds	r7, #28
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	32b0      	adds	r2, #176	; 0xb0
 800caa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <SCSI_Read10+0x2a>
  {
    return -1;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295
 800cab8:	e090      	b.n	800cbdc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	7a1b      	ldrb	r3, [r3, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f040 8082 	bne.w	800cbc8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	db0a      	blt.n	800cae6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cad6:	2320      	movs	r3, #32
 800cad8:	2205      	movs	r2, #5
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff ff0b 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cae0:	f04f 33ff 	mov.w	r3, #4294967295
 800cae4:	e07a      	b.n	800cbdc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800caec:	2b02      	cmp	r3, #2
 800caee:	d108      	bne.n	800cb02 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800caf0:	7af9      	ldrb	r1, [r7, #11]
 800caf2:	233a      	movs	r3, #58	; 0x3a
 800caf4:	2202      	movs	r2, #2
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f7ff fefd 	bl	800c8f6 <SCSI_SenseCode>

      return -1;
 800cafc:	f04f 33ff 	mov.w	r3, #4294967295
 800cb00:	e06c      	b.n	800cbdc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	33b0      	adds	r3, #176	; 0xb0
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	7afa      	ldrb	r2, [r7, #11]
 800cb16:	4610      	mov	r0, r2
 800cb18:	4798      	blx	r3
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d008      	beq.n	800cb32 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cb20:	7af9      	ldrb	r1, [r7, #11]
 800cb22:	233a      	movs	r3, #58	; 0x3a
 800cb24:	2202      	movs	r2, #2
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fee5 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb30:	e054      	b.n	800cbdc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3302      	adds	r3, #2
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3303      	adds	r3, #3
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cb42:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3304      	adds	r3, #4
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cb4c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	3205      	adds	r2, #5
 800cb52:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800cb54:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3307      	adds	r3, #7
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	3208      	adds	r2, #8
 800cb68:	7812      	ldrb	r2, [r2, #0]
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cb7e:	7af9      	ldrb	r1, [r7, #11]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f000 fadc 	bl	800d13e <SCSI_CheckAddressRange>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	da02      	bge.n	800cb92 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb90:	e024      	b.n	800cbdc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cb9e:	6979      	ldr	r1, [r7, #20]
 800cba0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d00a      	beq.n	800cbc2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cbb2:	2320      	movs	r3, #32
 800cbb4:	2205      	movs	r2, #5
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff fe9d 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc0:	e00c      	b.n	800cbdc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800cbd0:	7afb      	ldrb	r3, [r7, #11]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 fadf 	bl	800d198 <SCSI_ProcessRead>
 800cbda:	4603      	mov	r3, r0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	460b      	mov	r3, r1
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	32b0      	adds	r2, #176	; 0xb0
 800cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <SCSI_Read12+0x2a>
  {
    return -1;
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	e09a      	b.n	800cd44 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	7a1b      	ldrb	r3, [r3, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f040 808c 	bne.w	800cd30 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cc1e:	b25b      	sxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	db0a      	blt.n	800cc3a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cc2a:	2320      	movs	r3, #32
 800cc2c:	2205      	movs	r2, #5
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f7ff fe61 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cc34:	f04f 33ff 	mov.w	r3, #4294967295
 800cc38:	e084      	b.n	800cd44 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d108      	bne.n	800cc56 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cc44:	7af9      	ldrb	r1, [r7, #11]
 800cc46:	233a      	movs	r3, #58	; 0x3a
 800cc48:	2202      	movs	r2, #2
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fe53 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	e076      	b.n	800cd44 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	33b0      	adds	r3, #176	; 0xb0
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	7afa      	ldrb	r2, [r7, #11]
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	4798      	blx	r3
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d008      	beq.n	800cc86 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cc74:	7af9      	ldrb	r1, [r7, #11]
 800cc76:	233a      	movs	r3, #58	; 0x3a
 800cc78:	2202      	movs	r2, #2
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff fe3b 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295
 800cc84:	e05e      	b.n	800cd44 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3302      	adds	r3, #2
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3303      	adds	r3, #3
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cc96:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cca0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	3205      	adds	r2, #5
 800cca6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800cca8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	3306      	adds	r3, #6
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3307      	adds	r3, #7
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ccc0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ccca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	3209      	adds	r2, #9
 800ccd0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ccd2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cce6:	7af9      	ldrb	r1, [r7, #11]
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f000 fa28 	bl	800d13e <SCSI_CheckAddressRange>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	da02      	bge.n	800ccfa <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf8:	e024      	b.n	800cd44 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd06:	6979      	ldr	r1, [r7, #20]
 800cd08:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800cd0c:	fb01 f303 	mul.w	r3, r1, r3
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d00a      	beq.n	800cd2a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cd1a:	2320      	movs	r3, #32
 800cd1c:	2205      	movs	r2, #5
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff fde9 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cd24:	f04f 33ff 	mov.w	r3, #4294967295
 800cd28:	e00c      	b.n	800cd44 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd36:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800cd38:	7afb      	ldrb	r3, [r7, #11]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 fa2b 	bl	800d198 <SCSI_ProcessRead>
 800cd42:	4603      	mov	r3, r0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	460b      	mov	r3, r1
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	32b0      	adds	r2, #176	; 0xb0
 800cd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <SCSI_Write10+0x2a>
  {
    return -1;
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295
 800cd74:	e0ba      	b.n	800ceec <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	7a1b      	ldrb	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f040 80b0 	bne.w	800cee0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cd90:	2320      	movs	r3, #32
 800cd92:	2205      	movs	r2, #5
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff fdae 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9e:	e0a5      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cda6:	b25b      	sxtb	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da0a      	bge.n	800cdc2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cdb2:	2320      	movs	r3, #32
 800cdb4:	2205      	movs	r2, #5
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff fd9d 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc0:	e094      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	33b0      	adds	r3, #176	; 0xb0
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	7afa      	ldrb	r2, [r7, #11]
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	4798      	blx	r3
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d008      	beq.n	800cdf2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cde0:	7af9      	ldrb	r1, [r7, #11]
 800cde2:	233a      	movs	r3, #58	; 0x3a
 800cde4:	2202      	movs	r2, #2
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fd85 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cdec:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf0:	e07c      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	33b0      	adds	r3, #176	; 0xb0
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	7afa      	ldrb	r2, [r7, #11]
 800ce06:	4610      	mov	r0, r2
 800ce08:	4798      	blx	r3
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d008      	beq.n	800ce22 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ce10:	7af9      	ldrb	r1, [r7, #11]
 800ce12:	2327      	movs	r3, #39	; 0x27
 800ce14:	2202      	movs	r2, #2
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7ff fd6d 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800ce1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce20:	e064      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3302      	adds	r3, #2
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3303      	adds	r3, #3
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3304      	adds	r3, #4
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ce3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	3205      	adds	r2, #5
 800ce42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ce44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	3208      	adds	r2, #8
 800ce58:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce6e:	7af9      	ldrb	r1, [r7, #11]
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 f964 	bl	800d13e <SCSI_CheckAddressRange>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	da02      	bge.n	800ce82 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce80:	e034      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ce8e:	fb02 f303 	mul.w	r3, r2, r3
 800ce92:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d00a      	beq.n	800ceb6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cea6:	2320      	movs	r3, #32
 800cea8:	2205      	movs	r2, #5
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f7ff fd23 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800ceb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb4:	e01a      	b.n	800ceec <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cebc:	bf28      	it	cs
 800cebe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cec2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2201      	movs	r2, #1
 800cec8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ceca:	4b0a      	ldr	r3, [pc, #40]	; (800cef4 <SCSI_Write10+0x1a8>)
 800cecc:	7819      	ldrb	r1, [r3, #0]
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f103 0210 	add.w	r2, r3, #16
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f00f fef7 	bl	801ccca <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	e005      	b.n	800ceec <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800cee0:	7afb      	ldrb	r3, [r7, #11]
 800cee2:	4619      	mov	r1, r3
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 f9dd 	bl	800d2a4 <SCSI_ProcessWrite>
 800ceea:	4603      	mov	r3, r0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	2000010f 	.word	0x2000010f

0800cef8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	460b      	mov	r3, r1
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	32b0      	adds	r2, #176	; 0xb0
 800cf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf14:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d102      	bne.n	800cf22 <SCSI_Write12+0x2a>
  {
    return -1;
 800cf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf20:	e0ca      	b.n	800d0b8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	7a1b      	ldrb	r3, [r3, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f040 80c0 	bne.w	800d0ac <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10a      	bne.n	800cf4c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	2205      	movs	r2, #5
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff fcd8 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cf46:	f04f 33ff 	mov.w	r3, #4294967295
 800cf4a:	e0b5      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800cf52:	b25b      	sxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da0a      	bge.n	800cf6e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800cf5e:	2320      	movs	r3, #32
 800cf60:	2205      	movs	r2, #5
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff fcc7 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6c:	e0a4      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	33b0      	adds	r3, #176	; 0xb0
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	7afa      	ldrb	r2, [r7, #11]
 800cf82:	4610      	mov	r0, r2
 800cf84:	4798      	blx	r3
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cf8c:	7af9      	ldrb	r1, [r7, #11]
 800cf8e:	233a      	movs	r3, #58	; 0x3a
 800cf90:	2202      	movs	r2, #2
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fcaf 	bl	800c8f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2205      	movs	r2, #5
 800cf9c:	721a      	strb	r2, [r3, #8]
      return -1;
 800cf9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa2:	e089      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	33b0      	adds	r3, #176	; 0xb0
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	7afa      	ldrb	r2, [r7, #11]
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4798      	blx	r3
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00b      	beq.n	800cfda <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cfc2:	7af9      	ldrb	r1, [r7, #11]
 800cfc4:	2327      	movs	r3, #39	; 0x27
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f7ff fc94 	bl	800c8f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2205      	movs	r2, #5
 800cfd2:	721a      	strb	r2, [r3, #8]
      return -1;
 800cfd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd8:	e06e      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	3302      	adds	r3, #2
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3303      	adds	r3, #3
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cfea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3304      	adds	r3, #4
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cff4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	3205      	adds	r2, #5
 800cffa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cffc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3306      	adds	r3, #6
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3307      	adds	r3, #7
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d014:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	3308      	adds	r3, #8
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800d01e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	3209      	adds	r2, #9
 800d024:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800d026:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d03a:	7af9      	ldrb	r1, [r7, #11]
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 f87e 	bl	800d13e <SCSI_CheckAddressRange>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	da02      	bge.n	800d04e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d048:	f04f 33ff 	mov.w	r3, #4294967295
 800d04c:	e034      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d05a:	fb02 f303 	mul.w	r3, r2, r3
 800d05e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d00a      	beq.n	800d082 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d072:	2320      	movs	r3, #32
 800d074:	2205      	movs	r2, #5
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff fc3d 	bl	800c8f6 <SCSI_SenseCode>
      return -1;
 800d07c:	f04f 33ff 	mov.w	r3, #4294967295
 800d080:	e01a      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d088:	bf28      	it	cs
 800d08a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d08e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2201      	movs	r2, #1
 800d094:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800d096:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <SCSI_Write12+0x1c8>)
 800d098:	7819      	ldrb	r1, [r3, #0]
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f103 0210 	add.w	r2, r3, #16
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f00f fe11 	bl	801ccca <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	e005      	b.n	800d0b8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800d0ac:	7afb      	ldrb	r3, [r7, #11]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 f8f7 	bl	800d2a4 <SCSI_ProcessWrite>
 800d0b6:	4603      	mov	r3, r0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	2000010f 	.word	0x2000010f

0800d0c4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	32b0      	adds	r2, #176	; 0xb0
 800d0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d102      	bne.n	800d0ee <SCSI_Verify10+0x2a>
  {
    return -1;
 800d0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ec:	e023      	b.n	800d136 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f003 0302 	and.w	r3, r3, #2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d008      	beq.n	800d10e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800d0fc:	7af9      	ldrb	r1, [r7, #11]
 800d0fe:	2324      	movs	r3, #36	; 0x24
 800d100:	2205      	movs	r2, #5
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff fbf7 	bl	800c8f6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800d108:	f04f 33ff 	mov.w	r3, #4294967295
 800d10c:	e013      	b.n	800d136 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d11a:	7af9      	ldrb	r1, [r7, #11]
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f000 f80e 	bl	800d13e <SCSI_CheckAddressRange>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	da02      	bge.n	800d12e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800d128:	f04f 33ff 	mov.w	r3, #4294967295
 800d12c:	e003      	b.n	800d136 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2200      	movs	r2, #0
 800d132:	60da      	str	r2, [r3, #12]

  return 0;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b086      	sub	sp, #24
 800d142:	af00      	add	r7, sp, #0
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
 800d14a:	460b      	mov	r3, r1
 800d14c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	32b0      	adds	r2, #176	; 0xb0
 800d158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d102      	bne.n	800d16a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800d164:	f04f 33ff 	mov.w	r3, #4294967295
 800d168:	e011      	b.n	800d18e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	441a      	add	r2, r3
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d176:	429a      	cmp	r2, r3
 800d178:	d908      	bls.n	800d18c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800d17a:	7af9      	ldrb	r1, [r7, #11]
 800d17c:	2321      	movs	r3, #33	; 0x21
 800d17e:	2205      	movs	r2, #5
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff fbb8 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800d186:	f04f 33ff 	mov.w	r3, #4294967295
 800d18a:	e000      	b.n	800d18e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3718      	adds	r7, #24
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	32b0      	adds	r2, #176	; 0xb0
 800d1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800d1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d1be:	e06a      	b.n	800d296 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d1cc:	fb02 f303 	mul.w	r3, r2, r3
 800d1d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1d8:	bf28      	it	cs
 800d1da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d1de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	33b0      	adds	r3, #176	; 0xb0
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	691c      	ldr	r4, [r3, #16]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f103 0110 	add.w	r1, r3, #16
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d204:	4618      	mov	r0, r3
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	78f8      	ldrb	r0, [r7, #3]
 800d210:	47a0      	blx	r4
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	da08      	bge.n	800d22a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800d218:	78f9      	ldrb	r1, [r7, #3]
 800d21a:	2311      	movs	r3, #17
 800d21c:	2204      	movs	r2, #4
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fb69 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800d224:	f04f 33ff 	mov.w	r3, #4294967295
 800d228:	e035      	b.n	800d296 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800d22a:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <SCSI_ProcessRead+0x108>)
 800d22c:	7819      	ldrb	r1, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f103 0210 	add.w	r2, r3, #16
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f00f fd26 	bl	801cc88 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d248:	4619      	mov	r1, r3
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d264:	4619      	mov	r1, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	fbb3 f3f1 	udiv	r3, r3, r1
 800d26c:	1ad2      	subs	r2, r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	1ad2      	subs	r2, r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2203      	movs	r2, #3
 800d292:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd90      	pop	{r4, r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	2000010e 	.word	0x2000010e

0800d2a4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800d2a4:	b590      	push	{r4, r7, lr}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	32b0      	adds	r2, #176	; 0xb0
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800d2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ca:	e07a      	b.n	800d3c2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d2d8:	fb02 f303 	mul.w	r3, r2, r3
 800d2dc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e4:	bf28      	it	cs
 800d2e6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d2ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	33b0      	adds	r3, #176	; 0xb0
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	695c      	ldr	r4, [r3, #20]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f103 0110 	add.w	r1, r3, #16
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d310:	4618      	mov	r0, r3
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800d318:	b29b      	uxth	r3, r3
 800d31a:	78f8      	ldrb	r0, [r7, #3]
 800d31c:	47a0      	blx	r4
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	da08      	bge.n	800d336 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800d324:	78f9      	ldrb	r1, [r7, #3]
 800d326:	2303      	movs	r3, #3
 800d328:	2204      	movs	r2, #4
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff fae3 	bl	800c8f6 <SCSI_SenseCode>
    return -1;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	e045      	b.n	800d3c2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d342:	4619      	mov	r1, r3
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	fbb3 f3f1 	udiv	r3, r3, r1
 800d34a:	441a      	add	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d35e:	4619      	mov	r1, r3
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	fbb3 f3f1 	udiv	r3, r3, r1
 800d366:	1ad2      	subs	r2, r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d388:	2100      	movs	r1, #0
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7fe fce6 	bl	800bd5c <MSC_BOT_SendCSW>
 800d390:	e016      	b.n	800d3c0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800d39e:	fb02 f303 	mul.w	r3, r2, r3
 800d3a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3a6:	bf28      	it	cs
 800d3a8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d3ac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800d3ae:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <SCSI_ProcessWrite+0x128>)
 800d3b0:	7819      	ldrb	r1, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f103 0210 	add.w	r2, r3, #16
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f00f fc85 	bl	801ccca <USBD_LL_PrepareReceive>
  }

  return 0;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3714      	adds	r7, #20
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd90      	pop	{r4, r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2000010f 	.word	0x2000010f

0800d3d0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800d3de:	88fb      	ldrh	r3, [r7, #6]
 800d3e0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d102      	bne.n	800d3ee <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	e013      	b.n	800d416 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800d3ee:	8afa      	ldrh	r2, [r7, #22]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800d3f4:	e00b      	b.n	800d40e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800d3f6:	8afb      	ldrh	r3, [r7, #22]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800d3fc:	8afb      	ldrh	r3, [r7, #22]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	441a      	add	r2, r3
 800d402:	8afb      	ldrh	r3, [r7, #22]
 800d404:	7811      	ldrb	r1, [r2, #0]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	4413      	add	r3, r2
 800d40a:	460a      	mov	r2, r1
 800d40c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800d40e:	8afb      	ldrh	r3, [r7, #22]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1f0      	bne.n	800d3f6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b086      	sub	sp, #24
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	4613      	mov	r3, r2
 800d42e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d436:	2303      	movs	r3, #3
 800d438:	e01f      	b.n	800d47a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	79fa      	ldrb	r2, [r7, #7]
 800d46c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f00f fa6c 	bl	801c94c <USBD_LL_Init>
 800d474:	4603      	mov	r3, r0
 800d476:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d478:	7dfb      	ldrb	r3, [r7, #23]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d48c:	2300      	movs	r3, #0
 800d48e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d496:	2303      	movs	r3, #3
 800d498:	e025      	b.n	800d4e6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	32ae      	adds	r2, #174	; 0xae
 800d4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00f      	beq.n	800d4d6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	32ae      	adds	r2, #174	; 0xae
 800d4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	f107 020e 	add.w	r2, r7, #14
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	4798      	blx	r3
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f00f fabe 	bl	801ca78 <USBD_LL_Start>
 800d4fc:	4603      	mov	r3, r0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d506:	b480      	push	{r7}
 800d508:	b083      	sub	sp, #12
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d50e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d009      	beq.n	800d54a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	78fa      	ldrb	r2, [r7, #3]
 800d540:	4611      	mov	r1, r2
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	4798      	blx	r3
 800d546:	4603      	mov	r3, r0
 800d548:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	78fa      	ldrb	r2, [r7, #3]
 800d56e:	4611      	mov	r1, r2
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	4798      	blx	r3
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d57a:	2303      	movs	r3, #3
 800d57c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f001 f90f 	bl	800e7be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d5bc:	f003 031f 	and.w	r3, r3, #31
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d01a      	beq.n	800d5fa <USBD_LL_SetupStage+0x72>
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d822      	bhi.n	800d60e <USBD_LL_SetupStage+0x86>
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <USBD_LL_SetupStage+0x4a>
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d00a      	beq.n	800d5e6 <USBD_LL_SetupStage+0x5e>
 800d5d0:	e01d      	b.n	800d60e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fb66 	bl	800dcac <USBD_StdDevReq>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5e4:	e020      	b.n	800d628 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fbce 	bl	800dd90 <USBD_StdItfReq>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5f8:	e016      	b.n	800d628 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fc30 	bl	800de68 <USBD_StdEPReq>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]
      break;
 800d60c:	e00c      	b.n	800d628 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f00f faaa 	bl	801cb76 <USBD_LL_StallEP>
 800d622:	4603      	mov	r3, r0
 800d624:	73fb      	strb	r3, [r7, #15]
      break;
 800d626:	bf00      	nop
  }

  return ret;
 800d628:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b086      	sub	sp, #24
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	460b      	mov	r3, r1
 800d63c:	607a      	str	r2, [r7, #4]
 800d63e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d644:	7afb      	ldrb	r3, [r7, #11]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d16e      	bne.n	800d728 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d650:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d658:	2b03      	cmp	r3, #3
 800d65a:	f040 8098 	bne.w	800d78e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	429a      	cmp	r2, r3
 800d668:	d913      	bls.n	800d692 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	1ad2      	subs	r2, r2, r3
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	68da      	ldr	r2, [r3, #12]
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	4293      	cmp	r3, r2
 800d682:	bf28      	it	cs
 800d684:	4613      	movcs	r3, r2
 800d686:	461a      	mov	r2, r3
 800d688:	6879      	ldr	r1, [r7, #4]
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f001 f98b 	bl	800e9a6 <USBD_CtlContinueRx>
 800d690:	e07d      	b.n	800d78e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d698:	f003 031f 	and.w	r3, r3, #31
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d014      	beq.n	800d6ca <USBD_LL_DataOutStage+0x98>
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d81d      	bhi.n	800d6e0 <USBD_LL_DataOutStage+0xae>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <USBD_LL_DataOutStage+0x7c>
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d003      	beq.n	800d6b4 <USBD_LL_DataOutStage+0x82>
 800d6ac:	e018      	b.n	800d6e0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75bb      	strb	r3, [r7, #22]
            break;
 800d6b2:	e018      	b.n	800d6e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	4619      	mov	r1, r3
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f000 fa64 	bl	800db8c <USBD_CoreFindIF>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	75bb      	strb	r3, [r7, #22]
            break;
 800d6c8:	e00d      	b.n	800d6e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 fa66 	bl	800dba6 <USBD_CoreFindEP>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	75bb      	strb	r3, [r7, #22]
            break;
 800d6de:	e002      	b.n	800d6e6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	75bb      	strb	r3, [r7, #22]
            break;
 800d6e4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d6e6:	7dbb      	ldrb	r3, [r7, #22]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d119      	bne.n	800d720 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d113      	bne.n	800d720 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d6f8:	7dba      	ldrb	r2, [r7, #22]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	32ae      	adds	r2, #174	; 0xae
 800d6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00b      	beq.n	800d720 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d708:	7dba      	ldrb	r2, [r7, #22]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d710:	7dba      	ldrb	r2, [r7, #22]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	32ae      	adds	r2, #174	; 0xae
 800d716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f001 f951 	bl	800e9c8 <USBD_CtlSendStatus>
 800d726:	e032      	b.n	800d78e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d728:	7afb      	ldrb	r3, [r7, #11]
 800d72a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	4619      	mov	r1, r3
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 fa37 	bl	800dba6 <USBD_CoreFindEP>
 800d738:	4603      	mov	r3, r0
 800d73a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d73c:	7dbb      	ldrb	r3, [r7, #22]
 800d73e:	2bff      	cmp	r3, #255	; 0xff
 800d740:	d025      	beq.n	800d78e <USBD_LL_DataOutStage+0x15c>
 800d742:	7dbb      	ldrb	r3, [r7, #22]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d122      	bne.n	800d78e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b03      	cmp	r3, #3
 800d752:	d117      	bne.n	800d784 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d754:	7dba      	ldrb	r2, [r7, #22]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	32ae      	adds	r2, #174	; 0xae
 800d75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75e:	699b      	ldr	r3, [r3, #24]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00f      	beq.n	800d784 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d764:	7dba      	ldrb	r2, [r7, #22]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d76c:	7dba      	ldrb	r2, [r7, #22]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	32ae      	adds	r2, #174	; 0xae
 800d772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	7afa      	ldrb	r2, [r7, #11]
 800d77a:	4611      	mov	r1, r2
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	4798      	blx	r3
 800d780:	4603      	mov	r3, r0
 800d782:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
 800d78c:	e000      	b.n	800d790 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	607a      	str	r2, [r7, #4]
 800d7a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d7a6:	7afb      	ldrb	r3, [r7, #11]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d16f      	bne.n	800d88c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3314      	adds	r3, #20
 800d7b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d15a      	bne.n	800d872 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	689a      	ldr	r2, [r3, #8]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d914      	bls.n	800d7f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	1ad2      	subs	r2, r2, r3
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f001 f8b3 	bl	800e94a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f00f fa6d 	bl	801ccca <USBD_LL_PrepareReceive>
 800d7f0:	e03f      	b.n	800d872 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d11c      	bne.n	800d838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	685a      	ldr	r2, [r3, #4]
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d806:	429a      	cmp	r2, r3
 800d808:	d316      	bcc.n	800d838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d814:	429a      	cmp	r2, r3
 800d816:	d20f      	bcs.n	800d838 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d818:	2200      	movs	r2, #0
 800d81a:	2100      	movs	r1, #0
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f001 f894 	bl	800e94a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d82a:	2300      	movs	r3, #0
 800d82c:	2200      	movs	r2, #0
 800d82e:	2100      	movs	r1, #0
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f00f fa4a 	bl	801ccca <USBD_LL_PrepareReceive>
 800d836:	e01c      	b.n	800d872 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b03      	cmp	r3, #3
 800d842:	d10f      	bne.n	800d864 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d009      	beq.n	800d864 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d864:	2180      	movs	r1, #128	; 0x80
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f00f f985 	bl	801cb76 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f001 f8be 	bl	800e9ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d03a      	beq.n	800d8f2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7ff fe42 	bl	800d506 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d88a:	e032      	b.n	800d8f2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d88c:	7afb      	ldrb	r3, [r7, #11]
 800d88e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d892:	b2db      	uxtb	r3, r3
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 f985 	bl	800dba6 <USBD_CoreFindEP>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2bff      	cmp	r3, #255	; 0xff
 800d8a4:	d025      	beq.n	800d8f2 <USBD_LL_DataInStage+0x15a>
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d122      	bne.n	800d8f2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	d11c      	bne.n	800d8f2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d8b8:	7dfa      	ldrb	r2, [r7, #23]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	32ae      	adds	r2, #174	; 0xae
 800d8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d014      	beq.n	800d8f2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d8c8:	7dfa      	ldrb	r2, [r7, #23]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d8d0:	7dfa      	ldrb	r2, [r7, #23]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	32ae      	adds	r2, #174	; 0xae
 800d8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	7afa      	ldrb	r2, [r7, #11]
 800d8de:	4611      	mov	r1, r2
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	4798      	blx	r3
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d8e8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d8ee:	7dbb      	ldrb	r3, [r7, #22]
 800d8f0:	e000      	b.n	800d8f4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d934:	2b00      	cmp	r3, #0
 800d936:	d014      	beq.n	800d962 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6852      	ldr	r2, [r2, #4]
 800d950:	b2d2      	uxtb	r2, r2
 800d952:	4611      	mov	r1, r2
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	4798      	blx	r3
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d95e:	2303      	movs	r3, #3
 800d960:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d962:	2340      	movs	r3, #64	; 0x40
 800d964:	2200      	movs	r2, #0
 800d966:	2100      	movs	r1, #0
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f00f f8a0 	bl	801caae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2240      	movs	r2, #64	; 0x40
 800d97a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d97e:	2340      	movs	r3, #64	; 0x40
 800d980:	2200      	movs	r2, #0
 800d982:	2180      	movs	r1, #128	; 0x80
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f00f f892 	bl	801caae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2240      	movs	r2, #64	; 0x40
 800d994:	621a      	str	r2, [r3, #32]

  return ret;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	78fa      	ldrb	r2, [r7, #3]
 800d9b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b04      	cmp	r3, #4
 800d9d2:	d006      	beq.n	800d9e2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d106      	bne.n	800da1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b03      	cmp	r3, #3
 800da3a:	d110      	bne.n	800da5e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00b      	beq.n	800da5e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	32ae      	adds	r2, #174	; 0xae
 800da7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d101      	bne.n	800da8a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800da86:	2303      	movs	r3, #3
 800da88:	e01c      	b.n	800dac4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da90:	b2db      	uxtb	r3, r3
 800da92:	2b03      	cmp	r3, #3
 800da94:	d115      	bne.n	800dac2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	32ae      	adds	r2, #174	; 0xae
 800daa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00b      	beq.n	800dac2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	32ae      	adds	r2, #174	; 0xae
 800dab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	4611      	mov	r1, r2
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	32ae      	adds	r2, #174	; 0xae
 800dae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800daea:	2303      	movs	r3, #3
 800daec:	e01c      	b.n	800db28 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d115      	bne.n	800db26 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	32ae      	adds	r2, #174	; 0xae
 800db04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00b      	beq.n	800db26 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	32ae      	adds	r2, #174	; 0xae
 800db18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1e:	78fa      	ldrb	r2, [r7, #3]
 800db20:	4611      	mov	r1, r2
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00e      	beq.n	800db82 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	6852      	ldr	r2, [r2, #4]
 800db70:	b2d2      	uxtb	r2, r2
 800db72:	4611      	mov	r1, r2
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	4798      	blx	r3
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800db7e:	2303      	movs	r3, #3
 800db80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	460b      	mov	r3, r1
 800db96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b083      	sub	sp, #12
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dbb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	460b      	mov	r3, r1
 800dbca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	885b      	ldrh	r3, [r3, #2]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d920      	bls.n	800dc2a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dbf0:	e013      	b.n	800dc1a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dbf2:	f107 030a 	add.w	r3, r7, #10
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6978      	ldr	r0, [r7, #20]
 800dbfa:	f000 f81b 	bl	800dc34 <USBD_GetNextDesc>
 800dbfe:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	2b05      	cmp	r3, #5
 800dc06:	d108      	bne.n	800dc1a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	789b      	ldrb	r3, [r3, #2]
 800dc10:	78fa      	ldrb	r2, [r7, #3]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d008      	beq.n	800dc28 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	885b      	ldrh	r3, [r3, #2]
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	897b      	ldrh	r3, [r7, #10]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d8e5      	bhi.n	800dbf2 <USBD_GetEpDesc+0x32>
 800dc26:	e000      	b.n	800dc2a <USBD_GetEpDesc+0x6a>
          break;
 800dc28:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dc2a:	693b      	ldr	r3, [r7, #16]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	881a      	ldrh	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	4413      	add	r3, r2
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc60:	68fb      	ldr	r3, [r7, #12]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3714      	adds	r7, #20
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr

0800dc6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc6e:	b480      	push	{r7}
 800dc70:	b087      	sub	sp, #28
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	3301      	adds	r3, #1
 800dc84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc8c:	8a3b      	ldrh	r3, [r7, #16]
 800dc8e:	021b      	lsls	r3, r3, #8
 800dc90:	b21a      	sxth	r2, r3
 800dc92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc9c:	89fb      	ldrh	r3, [r7, #14]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
	...

0800dcac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcc2:	2b40      	cmp	r3, #64	; 0x40
 800dcc4:	d005      	beq.n	800dcd2 <USBD_StdDevReq+0x26>
 800dcc6:	2b40      	cmp	r3, #64	; 0x40
 800dcc8:	d857      	bhi.n	800dd7a <USBD_StdDevReq+0xce>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00f      	beq.n	800dcee <USBD_StdDevReq+0x42>
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d153      	bne.n	800dd7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	32ae      	adds	r2, #174	; 0xae
 800dcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	4798      	blx	r3
 800dce8:	4603      	mov	r3, r0
 800dcea:	73fb      	strb	r3, [r7, #15]
      break;
 800dcec:	e04a      	b.n	800dd84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	785b      	ldrb	r3, [r3, #1]
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	d83b      	bhi.n	800dd6e <USBD_StdDevReq+0xc2>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <USBD_StdDevReq+0x50>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd51 	.word	0x0800dd51
 800dd00:	0800dd65 	.word	0x0800dd65
 800dd04:	0800dd6f 	.word	0x0800dd6f
 800dd08:	0800dd5b 	.word	0x0800dd5b
 800dd0c:	0800dd6f 	.word	0x0800dd6f
 800dd10:	0800dd2f 	.word	0x0800dd2f
 800dd14:	0800dd25 	.word	0x0800dd25
 800dd18:	0800dd6f 	.word	0x0800dd6f
 800dd1c:	0800dd47 	.word	0x0800dd47
 800dd20:	0800dd39 	.word	0x0800dd39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fa3c 	bl	800e1a4 <USBD_GetDescriptor>
          break;
 800dd2c:	e024      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 fba1 	bl	800e478 <USBD_SetAddress>
          break;
 800dd36:	e01f      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fbe0 	bl	800e500 <USBD_SetConfig>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73fb      	strb	r3, [r7, #15]
          break;
 800dd44:	e018      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fc83 	bl	800e654 <USBD_GetConfig>
          break;
 800dd4e:	e013      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fcb4 	bl	800e6c0 <USBD_GetStatus>
          break;
 800dd58:	e00e      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fce3 	bl	800e728 <USBD_SetFeature>
          break;
 800dd62:	e009      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fd07 	bl	800e77a <USBD_ClrFeature>
          break;
 800dd6c:	e004      	b.n	800dd78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 fd5e 	bl	800e832 <USBD_CtlError>
          break;
 800dd76:	bf00      	nop
      }
      break;
 800dd78:	e004      	b.n	800dd84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fd58 	bl	800e832 <USBD_CtlError>
      break;
 800dd82:	bf00      	nop
  }

  return ret;
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop

0800dd90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dda6:	2b40      	cmp	r3, #64	; 0x40
 800dda8:	d005      	beq.n	800ddb6 <USBD_StdItfReq+0x26>
 800ddaa:	2b40      	cmp	r3, #64	; 0x40
 800ddac:	d852      	bhi.n	800de54 <USBD_StdItfReq+0xc4>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <USBD_StdItfReq+0x26>
 800ddb2:	2b20      	cmp	r3, #32
 800ddb4:	d14e      	bne.n	800de54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d840      	bhi.n	800de46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	889b      	ldrh	r3, [r3, #4]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d836      	bhi.n	800de3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	889b      	ldrh	r3, [r3, #4]
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fed8 	bl	800db8c <USBD_CoreFindIF>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
 800dde2:	2bff      	cmp	r3, #255	; 0xff
 800dde4:	d01d      	beq.n	800de22 <USBD_StdItfReq+0x92>
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11a      	bne.n	800de22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ddec:	7bba      	ldrb	r2, [r7, #14]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	32ae      	adds	r2, #174	; 0xae
 800ddf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00f      	beq.n	800de1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ddfc:	7bba      	ldrb	r2, [r7, #14]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de04:	7bba      	ldrb	r2, [r7, #14]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	32ae      	adds	r2, #174	; 0xae
 800de0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	4798      	blx	r3
 800de16:	4603      	mov	r3, r0
 800de18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800de1a:	e004      	b.n	800de26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800de1c:	2303      	movs	r3, #3
 800de1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800de20:	e001      	b.n	800de26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800de22:	2303      	movs	r3, #3
 800de24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d110      	bne.n	800de50 <USBD_StdItfReq+0xc0>
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10d      	bne.n	800de50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fdc7 	bl	800e9c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800de3a:	e009      	b.n	800de50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fcf7 	bl	800e832 <USBD_CtlError>
          break;
 800de44:	e004      	b.n	800de50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800de46:	6839      	ldr	r1, [r7, #0]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fcf2 	bl	800e832 <USBD_CtlError>
          break;
 800de4e:	e000      	b.n	800de52 <USBD_StdItfReq+0xc2>
          break;
 800de50:	bf00      	nop
      }
      break;
 800de52:	e004      	b.n	800de5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fceb 	bl	800e832 <USBD_CtlError>
      break;
 800de5c:	bf00      	nop
  }

  return ret;
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	889b      	ldrh	r3, [r3, #4]
 800de7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de84:	2b40      	cmp	r3, #64	; 0x40
 800de86:	d007      	beq.n	800de98 <USBD_StdEPReq+0x30>
 800de88:	2b40      	cmp	r3, #64	; 0x40
 800de8a:	f200 817f 	bhi.w	800e18c <USBD_StdEPReq+0x324>
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d02a      	beq.n	800dee8 <USBD_StdEPReq+0x80>
 800de92:	2b20      	cmp	r3, #32
 800de94:	f040 817a 	bne.w	800e18c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff fe82 	bl	800dba6 <USBD_CoreFindEP>
 800dea2:	4603      	mov	r3, r0
 800dea4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dea6:	7b7b      	ldrb	r3, [r7, #13]
 800dea8:	2bff      	cmp	r3, #255	; 0xff
 800deaa:	f000 8174 	beq.w	800e196 <USBD_StdEPReq+0x32e>
 800deae:	7b7b      	ldrb	r3, [r7, #13]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f040 8170 	bne.w	800e196 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800deb6:	7b7a      	ldrb	r2, [r7, #13]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800debe:	7b7a      	ldrb	r2, [r7, #13]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	32ae      	adds	r2, #174	; 0xae
 800dec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 8163 	beq.w	800e196 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ded0:	7b7a      	ldrb	r2, [r7, #13]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	32ae      	adds	r2, #174	; 0xae
 800ded6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	4798      	blx	r3
 800dee2:	4603      	mov	r3, r0
 800dee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dee6:	e156      	b.n	800e196 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	785b      	ldrb	r3, [r3, #1]
 800deec:	2b03      	cmp	r3, #3
 800deee:	d008      	beq.n	800df02 <USBD_StdEPReq+0x9a>
 800def0:	2b03      	cmp	r3, #3
 800def2:	f300 8145 	bgt.w	800e180 <USBD_StdEPReq+0x318>
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 809b 	beq.w	800e032 <USBD_StdEPReq+0x1ca>
 800defc:	2b01      	cmp	r3, #1
 800defe:	d03c      	beq.n	800df7a <USBD_StdEPReq+0x112>
 800df00:	e13e      	b.n	800e180 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d002      	beq.n	800df14 <USBD_StdEPReq+0xac>
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d016      	beq.n	800df40 <USBD_StdEPReq+0xd8>
 800df12:	e02c      	b.n	800df6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00d      	beq.n	800df36 <USBD_StdEPReq+0xce>
 800df1a:	7bbb      	ldrb	r3, [r7, #14]
 800df1c:	2b80      	cmp	r3, #128	; 0x80
 800df1e:	d00a      	beq.n	800df36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f00e fe26 	bl	801cb76 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df2a:	2180      	movs	r1, #128	; 0x80
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f00e fe22 	bl	801cb76 <USBD_LL_StallEP>
 800df32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df34:	e020      	b.n	800df78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fc7a 	bl	800e832 <USBD_CtlError>
              break;
 800df3e:	e01b      	b.n	800df78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	885b      	ldrh	r3, [r3, #2]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10e      	bne.n	800df66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00b      	beq.n	800df66 <USBD_StdEPReq+0xfe>
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	2b80      	cmp	r3, #128	; 0x80
 800df52:	d008      	beq.n	800df66 <USBD_StdEPReq+0xfe>
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	88db      	ldrh	r3, [r3, #6]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d104      	bne.n	800df66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f00e fe08 	bl	801cb76 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fd2e 	bl	800e9c8 <USBD_CtlSendStatus>

              break;
 800df6c:	e004      	b.n	800df78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fc5e 	bl	800e832 <USBD_CtlError>
              break;
 800df76:	bf00      	nop
          }
          break;
 800df78:	e107      	b.n	800e18a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b02      	cmp	r3, #2
 800df84:	d002      	beq.n	800df8c <USBD_StdEPReq+0x124>
 800df86:	2b03      	cmp	r3, #3
 800df88:	d016      	beq.n	800dfb8 <USBD_StdEPReq+0x150>
 800df8a:	e04b      	b.n	800e024 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00d      	beq.n	800dfae <USBD_StdEPReq+0x146>
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b80      	cmp	r3, #128	; 0x80
 800df96:	d00a      	beq.n	800dfae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df98:	7bbb      	ldrb	r3, [r7, #14]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f00e fdea 	bl	801cb76 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfa2:	2180      	movs	r1, #128	; 0x80
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f00e fde6 	bl	801cb76 <USBD_LL_StallEP>
 800dfaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfac:	e040      	b.n	800e030 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fc3e 	bl	800e832 <USBD_CtlError>
              break;
 800dfb6:	e03b      	b.n	800e030 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	885b      	ldrh	r3, [r3, #2]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d136      	bne.n	800e02e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dfc0:	7bbb      	ldrb	r3, [r7, #14]
 800dfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d004      	beq.n	800dfd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dfca:	7bbb      	ldrb	r3, [r7, #14]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f00e fdf0 	bl	801cbb4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 fcf7 	bl	800e9c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fde1 	bl	800dba6 <USBD_CoreFindEP>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfe8:	7b7b      	ldrb	r3, [r7, #13]
 800dfea:	2bff      	cmp	r3, #255	; 0xff
 800dfec:	d01f      	beq.n	800e02e <USBD_StdEPReq+0x1c6>
 800dfee:	7b7b      	ldrb	r3, [r7, #13]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d11c      	bne.n	800e02e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dff4:	7b7a      	ldrb	r2, [r7, #13]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dffc:	7b7a      	ldrb	r2, [r7, #13]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	; 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d010      	beq.n	800e02e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e00c:	7b7a      	ldrb	r2, [r7, #13]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	32ae      	adds	r2, #174	; 0xae
 800e012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	4798      	blx	r3
 800e01e:	4603      	mov	r3, r0
 800e020:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e022:	e004      	b.n	800e02e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fc03 	bl	800e832 <USBD_CtlError>
              break;
 800e02c:	e000      	b.n	800e030 <USBD_StdEPReq+0x1c8>
              break;
 800e02e:	bf00      	nop
          }
          break;
 800e030:	e0ab      	b.n	800e18a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d002      	beq.n	800e044 <USBD_StdEPReq+0x1dc>
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d032      	beq.n	800e0a8 <USBD_StdEPReq+0x240>
 800e042:	e097      	b.n	800e174 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e044:	7bbb      	ldrb	r3, [r7, #14]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <USBD_StdEPReq+0x1f2>
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	2b80      	cmp	r3, #128	; 0x80
 800e04e:	d004      	beq.n	800e05a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fbed 	bl	800e832 <USBD_CtlError>
                break;
 800e058:	e091      	b.n	800e17e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e05a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	da0b      	bge.n	800e07a <USBD_StdEPReq+0x212>
 800e062:	7bbb      	ldrb	r3, [r7, #14]
 800e064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e068:	4613      	mov	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	3310      	adds	r3, #16
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	4413      	add	r3, r2
 800e076:	3304      	adds	r3, #4
 800e078:	e00b      	b.n	800e092 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e07a:	7bbb      	ldrb	r3, [r7, #14]
 800e07c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	4413      	add	r3, r2
 800e090:	3304      	adds	r3, #4
 800e092:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2200      	movs	r2, #0
 800e098:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2202      	movs	r2, #2
 800e09e:	4619      	mov	r1, r3
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fc37 	bl	800e914 <USBD_CtlSendData>
              break;
 800e0a6:	e06a      	b.n	800e17e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e0a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da11      	bge.n	800e0d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	f003 020f 	and.w	r2, r3, #15
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	3324      	adds	r3, #36	; 0x24
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d117      	bne.n	800e0fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fbb0 	bl	800e832 <USBD_CtlError>
                  break;
 800e0d2:	e054      	b.n	800e17e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	f003 020f 	and.w	r2, r3, #15
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	440b      	add	r3, r1
 800e0e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0ea:	881b      	ldrh	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d104      	bne.n	800e0fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fb9d 	bl	800e832 <USBD_CtlError>
                  break;
 800e0f8:	e041      	b.n	800e17e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	da0b      	bge.n	800e11a <USBD_StdEPReq+0x2b2>
 800e102:	7bbb      	ldrb	r3, [r7, #14]
 800e104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	3310      	adds	r3, #16
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	4413      	add	r3, r2
 800e116:	3304      	adds	r3, #4
 800e118:	e00b      	b.n	800e132 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e120:	4613      	mov	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	4413      	add	r3, r2
 800e130:	3304      	adds	r3, #4
 800e132:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e134:	7bbb      	ldrb	r3, [r7, #14]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <USBD_StdEPReq+0x2d8>
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	2b80      	cmp	r3, #128	; 0x80
 800e13e:	d103      	bne.n	800e148 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	2200      	movs	r2, #0
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	e00e      	b.n	800e166 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f00e fd50 	bl	801cbf2 <USBD_LL_IsStallEP>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d003      	beq.n	800e160 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e002      	b.n	800e166 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2202      	movs	r2, #2
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fbd1 	bl	800e914 <USBD_CtlSendData>
              break;
 800e172:	e004      	b.n	800e17e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fb5b 	bl	800e832 <USBD_CtlError>
              break;
 800e17c:	bf00      	nop
          }
          break;
 800e17e:	e004      	b.n	800e18a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fb55 	bl	800e832 <USBD_CtlError>
          break;
 800e188:	bf00      	nop
      }
      break;
 800e18a:	e005      	b.n	800e198 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fb4f 	bl	800e832 <USBD_CtlError>
      break;
 800e194:	e000      	b.n	800e198 <USBD_StdEPReq+0x330>
      break;
 800e196:	bf00      	nop
  }

  return ret;
 800e198:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
	...

0800e1a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	885b      	ldrh	r3, [r3, #2]
 800e1be:	0a1b      	lsrs	r3, r3, #8
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	2b06      	cmp	r3, #6
 800e1c6:	f200 8128 	bhi.w	800e41a <USBD_GetDescriptor+0x276>
 800e1ca:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <USBD_GetDescriptor+0x2c>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e1ed 	.word	0x0800e1ed
 800e1d4:	0800e205 	.word	0x0800e205
 800e1d8:	0800e245 	.word	0x0800e245
 800e1dc:	0800e41b 	.word	0x0800e41b
 800e1e0:	0800e41b 	.word	0x0800e41b
 800e1e4:	0800e3bb 	.word	0x0800e3bb
 800e1e8:	0800e3e7 	.word	0x0800e3e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	7c12      	ldrb	r2, [r2, #16]
 800e1f8:	f107 0108 	add.w	r1, r7, #8
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	4798      	blx	r3
 800e200:	60f8      	str	r0, [r7, #12]
      break;
 800e202:	e112      	b.n	800e42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7c1b      	ldrb	r3, [r3, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10d      	bne.n	800e228 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e214:	f107 0208 	add.w	r2, r7, #8
 800e218:	4610      	mov	r0, r2
 800e21a:	4798      	blx	r3
 800e21c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3301      	adds	r3, #1
 800e222:	2202      	movs	r2, #2
 800e224:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e226:	e100      	b.n	800e42a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e230:	f107 0208 	add.w	r2, r7, #8
 800e234:	4610      	mov	r0, r2
 800e236:	4798      	blx	r3
 800e238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	2202      	movs	r2, #2
 800e240:	701a      	strb	r2, [r3, #0]
      break;
 800e242:	e0f2      	b.n	800e42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	885b      	ldrh	r3, [r3, #2]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b05      	cmp	r3, #5
 800e24c:	f200 80ac 	bhi.w	800e3a8 <USBD_GetDescriptor+0x204>
 800e250:	a201      	add	r2, pc, #4	; (adr r2, 800e258 <USBD_GetDescriptor+0xb4>)
 800e252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e256:	bf00      	nop
 800e258:	0800e271 	.word	0x0800e271
 800e25c:	0800e2a5 	.word	0x0800e2a5
 800e260:	0800e2d9 	.word	0x0800e2d9
 800e264:	0800e30d 	.word	0x0800e30d
 800e268:	0800e341 	.word	0x0800e341
 800e26c:	0800e375 	.word	0x0800e375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	7c12      	ldrb	r2, [r2, #16]
 800e288:	f107 0108 	add.w	r1, r7, #8
 800e28c:	4610      	mov	r0, r2
 800e28e:	4798      	blx	r3
 800e290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e292:	e091      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 facb 	bl	800e832 <USBD_CtlError>
            err++;
 800e29c:	7afb      	ldrb	r3, [r7, #11]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a2:	e089      	b.n	800e3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00b      	beq.n	800e2c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	7c12      	ldrb	r2, [r2, #16]
 800e2bc:	f107 0108 	add.w	r1, r7, #8
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	4798      	blx	r3
 800e2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2c6:	e077      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fab1 	bl	800e832 <USBD_CtlError>
            err++;
 800e2d0:	7afb      	ldrb	r3, [r7, #11]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2d6:	e06f      	b.n	800e3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	7c12      	ldrb	r2, [r2, #16]
 800e2f0:	f107 0108 	add.w	r1, r7, #8
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	4798      	blx	r3
 800e2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fa:	e05d      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fa97 	bl	800e832 <USBD_CtlError>
            err++;
 800e304:	7afb      	ldrb	r3, [r7, #11]
 800e306:	3301      	adds	r3, #1
 800e308:	72fb      	strb	r3, [r7, #11]
          break;
 800e30a:	e055      	b.n	800e3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00b      	beq.n	800e330 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	7c12      	ldrb	r2, [r2, #16]
 800e324:	f107 0108 	add.w	r1, r7, #8
 800e328:	4610      	mov	r0, r2
 800e32a:	4798      	blx	r3
 800e32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e32e:	e043      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fa7d 	bl	800e832 <USBD_CtlError>
            err++;
 800e338:	7afb      	ldrb	r3, [r7, #11]
 800e33a:	3301      	adds	r3, #1
 800e33c:	72fb      	strb	r3, [r7, #11]
          break;
 800e33e:	e03b      	b.n	800e3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00b      	beq.n	800e364 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	7c12      	ldrb	r2, [r2, #16]
 800e358:	f107 0108 	add.w	r1, r7, #8
 800e35c:	4610      	mov	r0, r2
 800e35e:	4798      	blx	r3
 800e360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e362:	e029      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fa63 	bl	800e832 <USBD_CtlError>
            err++;
 800e36c:	7afb      	ldrb	r3, [r7, #11]
 800e36e:	3301      	adds	r3, #1
 800e370:	72fb      	strb	r3, [r7, #11]
          break;
 800e372:	e021      	b.n	800e3b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00b      	beq.n	800e398 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	7c12      	ldrb	r2, [r2, #16]
 800e38c:	f107 0108 	add.w	r1, r7, #8
 800e390:	4610      	mov	r0, r2
 800e392:	4798      	blx	r3
 800e394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e396:	e00f      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fa49 	bl	800e832 <USBD_CtlError>
            err++;
 800e3a0:	7afb      	ldrb	r3, [r7, #11]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e3a6:	e007      	b.n	800e3b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fa41 	bl	800e832 <USBD_CtlError>
          err++;
 800e3b0:	7afb      	ldrb	r3, [r7, #11]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e3b6:	bf00      	nop
      }
      break;
 800e3b8:	e037      	b.n	800e42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7c1b      	ldrb	r3, [r3, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d109      	bne.n	800e3d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ca:	f107 0208 	add.w	r2, r7, #8
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	4798      	blx	r3
 800e3d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3d4:	e029      	b.n	800e42a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fa2a 	bl	800e832 <USBD_CtlError>
        err++;
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800e3e4:	e021      	b.n	800e42a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7c1b      	ldrb	r3, [r3, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10d      	bne.n	800e40a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f6:	f107 0208 	add.w	r2, r7, #8
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	4798      	blx	r3
 800e3fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3301      	adds	r3, #1
 800e404:	2207      	movs	r2, #7
 800e406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e408:	e00f      	b.n	800e42a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e40a:	6839      	ldr	r1, [r7, #0]
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 fa10 	bl	800e832 <USBD_CtlError>
        err++;
 800e412:	7afb      	ldrb	r3, [r7, #11]
 800e414:	3301      	adds	r3, #1
 800e416:	72fb      	strb	r3, [r7, #11]
      break;
 800e418:	e007      	b.n	800e42a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e41a:	6839      	ldr	r1, [r7, #0]
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fa08 	bl	800e832 <USBD_CtlError>
      err++;
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	3301      	adds	r3, #1
 800e426:	72fb      	strb	r3, [r7, #11]
      break;
 800e428:	bf00      	nop
  }

  if (err != 0U)
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d11e      	bne.n	800e46e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	88db      	ldrh	r3, [r3, #6]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d016      	beq.n	800e466 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e438:	893b      	ldrh	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00e      	beq.n	800e45c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	88da      	ldrh	r2, [r3, #6]
 800e442:	893b      	ldrh	r3, [r7, #8]
 800e444:	4293      	cmp	r3, r2
 800e446:	bf28      	it	cs
 800e448:	4613      	movcs	r3, r2
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e44e:	893b      	ldrh	r3, [r7, #8]
 800e450:	461a      	mov	r2, r3
 800e452:	68f9      	ldr	r1, [r7, #12]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fa5d 	bl	800e914 <USBD_CtlSendData>
 800e45a:	e009      	b.n	800e470 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e45c:	6839      	ldr	r1, [r7, #0]
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f9e7 	bl	800e832 <USBD_CtlError>
 800e464:	e004      	b.n	800e470 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 faae 	bl	800e9c8 <USBD_CtlSendStatus>
 800e46c:	e000      	b.n	800e470 <USBD_GetDescriptor+0x2cc>
    return;
 800e46e:	bf00      	nop
  }
}
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop

0800e478 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	889b      	ldrh	r3, [r3, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d131      	bne.n	800e4ee <USBD_SetAddress+0x76>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	88db      	ldrh	r3, [r3, #6]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d12d      	bne.n	800e4ee <USBD_SetAddress+0x76>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	885b      	ldrh	r3, [r3, #2]
 800e496:	2b7f      	cmp	r3, #127	; 0x7f
 800e498:	d829      	bhi.n	800e4ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	885b      	ldrh	r3, [r3, #2]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	d104      	bne.n	800e4bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e4b2:	6839      	ldr	r1, [r7, #0]
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f9bc 	bl	800e832 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ba:	e01d      	b.n	800e4f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7bfa      	ldrb	r2, [r7, #15]
 800e4c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f00e fbbe 	bl	801cc4a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fa7a 	bl	800e9c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d004      	beq.n	800e4e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2202      	movs	r2, #2
 800e4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e2:	e009      	b.n	800e4f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ec:	e004      	b.n	800e4f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f99e 	bl	800e832 <USBD_CtlError>
  }
}
 800e4f6:	bf00      	nop
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	885b      	ldrh	r3, [r3, #2]
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4b4e      	ldr	r3, [pc, #312]	; (800e650 <USBD_SetConfig+0x150>)
 800e516:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e518:	4b4d      	ldr	r3, [pc, #308]	; (800e650 <USBD_SetConfig+0x150>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d905      	bls.n	800e52c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f985 	bl	800e832 <USBD_CtlError>
    return USBD_FAIL;
 800e528:	2303      	movs	r3, #3
 800e52a:	e08c      	b.n	800e646 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b02      	cmp	r3, #2
 800e536:	d002      	beq.n	800e53e <USBD_SetConfig+0x3e>
 800e538:	2b03      	cmp	r3, #3
 800e53a:	d029      	beq.n	800e590 <USBD_SetConfig+0x90>
 800e53c:	e075      	b.n	800e62a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e53e:	4b44      	ldr	r3, [pc, #272]	; (800e650 <USBD_SetConfig+0x150>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d020      	beq.n	800e588 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e546:	4b42      	ldr	r3, [pc, #264]	; (800e650 <USBD_SetConfig+0x150>)
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	461a      	mov	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e550:	4b3f      	ldr	r3, [pc, #252]	; (800e650 <USBD_SetConfig+0x150>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fe ffe0 	bl	800d51c <USBD_SetClassConfig>
 800e55c:	4603      	mov	r3, r0
 800e55e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d008      	beq.n	800e578 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f962 	bl	800e832 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2202      	movs	r2, #2
 800e572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e576:	e065      	b.n	800e644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fa25 	bl	800e9c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2203      	movs	r2, #3
 800e582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e586:	e05d      	b.n	800e644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fa1d 	bl	800e9c8 <USBD_CtlSendStatus>
      break;
 800e58e:	e059      	b.n	800e644 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e590:	4b2f      	ldr	r3, [pc, #188]	; (800e650 <USBD_SetConfig+0x150>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d112      	bne.n	800e5be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e5a0:	4b2b      	ldr	r3, [pc, #172]	; (800e650 <USBD_SetConfig+0x150>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5aa:	4b29      	ldr	r3, [pc, #164]	; (800e650 <USBD_SetConfig+0x150>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7fe ffcf 	bl	800d554 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 fa06 	bl	800e9c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5bc:	e042      	b.n	800e644 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e5be:	4b24      	ldr	r3, [pc, #144]	; (800e650 <USBD_SetConfig+0x150>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d02a      	beq.n	800e622 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fe ffbd 	bl	800d554 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5da:	4b1d      	ldr	r3, [pc, #116]	; (800e650 <USBD_SetConfig+0x150>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <USBD_SetConfig+0x150>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fe ff96 	bl	800d51c <USBD_SetClassConfig>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00f      	beq.n	800e61a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f000 f918 	bl	800e832 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	b2db      	uxtb	r3, r3
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7fe ffa2 	bl	800d554 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2202      	movs	r2, #2
 800e614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e618:	e014      	b.n	800e644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f9d4 	bl	800e9c8 <USBD_CtlSendStatus>
      break;
 800e620:	e010      	b.n	800e644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 f9d0 	bl	800e9c8 <USBD_CtlSendStatus>
      break;
 800e628:	e00c      	b.n	800e644 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f900 	bl	800e832 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e632:	4b07      	ldr	r3, [pc, #28]	; (800e650 <USBD_SetConfig+0x150>)
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7fe ff8b 	bl	800d554 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e63e:	2303      	movs	r3, #3
 800e640:	73fb      	strb	r3, [r7, #15]
      break;
 800e642:	bf00      	nop
  }

  return ret;
 800e644:	7bfb      	ldrb	r3, [r7, #15]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20005074 	.word	0x20005074

0800e654 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	88db      	ldrh	r3, [r3, #6]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d004      	beq.n	800e670 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 f8e2 	bl	800e832 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e66e:	e023      	b.n	800e6b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e676:	b2db      	uxtb	r3, r3
 800e678:	2b02      	cmp	r3, #2
 800e67a:	dc02      	bgt.n	800e682 <USBD_GetConfig+0x2e>
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	dc03      	bgt.n	800e688 <USBD_GetConfig+0x34>
 800e680:	e015      	b.n	800e6ae <USBD_GetConfig+0x5a>
 800e682:	2b03      	cmp	r3, #3
 800e684:	d00b      	beq.n	800e69e <USBD_GetConfig+0x4a>
 800e686:	e012      	b.n	800e6ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	3308      	adds	r3, #8
 800e692:	2201      	movs	r2, #1
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 f93c 	bl	800e914 <USBD_CtlSendData>
        break;
 800e69c:	e00c      	b.n	800e6b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f934 	bl	800e914 <USBD_CtlSendData>
        break;
 800e6ac:	e004      	b.n	800e6b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e6ae:	6839      	ldr	r1, [r7, #0]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f8be 	bl	800e832 <USBD_CtlError>
        break;
 800e6b6:	bf00      	nop
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	2b02      	cmp	r3, #2
 800e6d6:	d81e      	bhi.n	800e716 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	88db      	ldrh	r3, [r3, #6]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d004      	beq.n	800e6ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f8a5 	bl	800e832 <USBD_CtlError>
        break;
 800e6e8:	e01a      	b.n	800e720 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d005      	beq.n	800e706 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	f043 0202 	orr.w	r2, r3, #2
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	330c      	adds	r3, #12
 800e70a:	2202      	movs	r2, #2
 800e70c:	4619      	mov	r1, r3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f900 	bl	800e914 <USBD_CtlSendData>
      break;
 800e714:	e004      	b.n	800e720 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f88a 	bl	800e832 <USBD_CtlError>
      break;
 800e71e:	bf00      	nop
  }
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	885b      	ldrh	r3, [r3, #2]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d107      	bne.n	800e74a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f940 	bl	800e9c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e748:	e013      	b.n	800e772 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	885b      	ldrh	r3, [r3, #2]
 800e74e:	2b02      	cmp	r3, #2
 800e750:	d10b      	bne.n	800e76a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	889b      	ldrh	r3, [r3, #4]
 800e756:	0a1b      	lsrs	r3, r3, #8
 800e758:	b29b      	uxth	r3, r3
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f930 	bl	800e9c8 <USBD_CtlSendStatus>
}
 800e768:	e003      	b.n	800e772 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e76a:	6839      	ldr	r1, [r7, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f860 	bl	800e832 <USBD_CtlError>
}
 800e772:	bf00      	nop
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b082      	sub	sp, #8
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	3b01      	subs	r3, #1
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d80b      	bhi.n	800e7aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	885b      	ldrh	r3, [r3, #2]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d10c      	bne.n	800e7b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f910 	bl	800e9c8 <USBD_CtlSendStatus>
      }
      break;
 800e7a8:	e004      	b.n	800e7b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f840 	bl	800e832 <USBD_CtlError>
      break;
 800e7b2:	e000      	b.n	800e7b6 <USBD_ClrFeature+0x3c>
      break;
 800e7b4:	bf00      	nop
  }
}
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b084      	sub	sp, #16
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	781a      	ldrb	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	781a      	ldrb	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff fa40 	bl	800dc6e <SWAPBYTE>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3301      	adds	r3, #1
 800e800:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f7ff fa33 	bl	800dc6e <SWAPBYTE>
 800e808:	4603      	mov	r3, r0
 800e80a:	461a      	mov	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3301      	adds	r3, #1
 800e814:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3301      	adds	r3, #1
 800e81a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff fa26 	bl	800dc6e <SWAPBYTE>
 800e822:	4603      	mov	r3, r0
 800e824:	461a      	mov	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	80da      	strh	r2, [r3, #6]
}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e83c:	2180      	movs	r1, #128	; 0x80
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f00e f999 	bl	801cb76 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e844:	2100      	movs	r1, #0
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f00e f995 	bl	801cb76 <USBD_LL_StallEP>
}
 800e84c:	bf00      	nop
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e860:	2300      	movs	r3, #0
 800e862:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d036      	beq.n	800e8d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e86e:	6938      	ldr	r0, [r7, #16]
 800e870:	f000 f836 	bl	800e8e0 <USBD_GetLen>
 800e874:	4603      	mov	r3, r0
 800e876:	3301      	adds	r3, #1
 800e878:	b29b      	uxth	r3, r3
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	4413      	add	r3, r2
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	7812      	ldrb	r2, [r2, #0]
 800e88c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
 800e890:	3301      	adds	r3, #1
 800e892:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	4413      	add	r3, r2
 800e89a:	2203      	movs	r2, #3
 800e89c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e89e:	7dfb      	ldrb	r3, [r7, #23]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e8a4:	e013      	b.n	800e8ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	7812      	ldrb	r2, [r2, #0]
 800e8b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]
    idx++;
 800e8b8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e8be:	7dfb      	ldrb	r3, [r7, #23]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1e7      	bne.n	800e8a6 <USBD_GetString+0x52>
 800e8d6:	e000      	b.n	800e8da <USBD_GetString+0x86>
    return;
 800e8d8:	bf00      	nop
  }
}
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8f0:	e005      	b.n	800e8fe <USBD_GetLen+0x1e>
  {
    len++;
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1f5      	bne.n	800e8f2 <USBD_GetLen+0x12>
  }

  return len;
 800e906:	7bfb      	ldrb	r3, [r7, #15]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2202      	movs	r2, #2
 800e924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	2100      	movs	r1, #0
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f00e f9a4 	bl	801cc88 <USBD_LL_Transmit>

  return USBD_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b084      	sub	sp, #16
 800e94e:	af00      	add	r7, sp, #0
 800e950:	60f8      	str	r0, [r7, #12]
 800e952:	60b9      	str	r1, [r7, #8]
 800e954:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	2100      	movs	r1, #0
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f00e f993 	bl	801cc88 <USBD_LL_Transmit>

  return USBD_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2203      	movs	r2, #3
 800e97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	2100      	movs	r1, #0
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f00e f997 	bl	801ccca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f00e f986 	bl	801ccca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2204      	movs	r2, #4
 800e9d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2200      	movs	r2, #0
 800e9dc:	2100      	movs	r1, #0
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f00e f952 	bl	801cc88 <USBD_LL_Transmit>

  return USBD_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3708      	adds	r7, #8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2205      	movs	r2, #5
 800e9fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9fe:	2300      	movs	r3, #0
 800ea00:	2200      	movs	r2, #0
 800ea02:	2100      	movs	r1, #0
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f00e f960 	bl	801ccca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b087      	sub	sp, #28
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea22:	2301      	movs	r3, #1
 800ea24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea2a:	4b1f      	ldr	r3, [pc, #124]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea2c:	7a5b      	ldrb	r3, [r3, #9]
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d131      	bne.n	800ea98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea34:	4b1c      	ldr	r3, [pc, #112]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea36:	7a5b      	ldrb	r3, [r3, #9]
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	4b1a      	ldr	r3, [pc, #104]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea3e:	2100      	movs	r1, #0
 800ea40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea42:	4b19      	ldr	r3, [pc, #100]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea44:	7a5b      	ldrb	r3, [r3, #9]
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	4a17      	ldr	r2, [pc, #92]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea52:	4b15      	ldr	r3, [pc, #84]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea54:	7a5b      	ldrb	r3, [r3, #9]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4b13      	ldr	r3, [pc, #76]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea5c:	4413      	add	r3, r2
 800ea5e:	79fa      	ldrb	r2, [r7, #7]
 800ea60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea62:	4b11      	ldr	r3, [pc, #68]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea64:	7a5b      	ldrb	r3, [r3, #9]
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	1c5a      	adds	r2, r3, #1
 800ea6a:	b2d1      	uxtb	r1, r2
 800ea6c:	4a0e      	ldr	r2, [pc, #56]	; (800eaa8 <FATFS_LinkDriverEx+0x94>)
 800ea6e:	7251      	strb	r1, [r2, #9]
 800ea70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea72:	7dbb      	ldrb	r3, [r7, #22]
 800ea74:	3330      	adds	r3, #48	; 0x30
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	223a      	movs	r2, #58	; 0x3a
 800ea82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	3302      	adds	r3, #2
 800ea88:	222f      	movs	r2, #47	; 0x2f
 800ea8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	3303      	adds	r3, #3
 800ea90:	2200      	movs	r2, #0
 800ea92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	20005078 	.word	0x20005078

0800eaac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eab6:	2200      	movs	r2, #0
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7ff ffaa 	bl	800ea14 <FATFS_LinkDriverEx>
 800eac0:	4603      	mov	r3, r0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eaca:	b480      	push	{r7}
 800eacc:	b083      	sub	sp, #12
 800eace:	af00      	add	r7, sp, #0
 800ead0:	4603      	mov	r3, r0
 800ead2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ead4:	88fb      	ldrh	r3, [r7, #6]
 800ead6:	021b      	lsls	r3, r3, #8
 800ead8:	b21a      	sxth	r2, r3
 800eada:	88fb      	ldrh	r3, [r7, #6]
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	b29b      	uxth	r3, r3
 800eae0:	b21b      	sxth	r3, r3
 800eae2:	4313      	orrs	r3, r2
 800eae4:	b21b      	sxth	r3, r3
 800eae6:	b29b      	uxth	r3, r3
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	061a      	lsls	r2, r3, #24
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb08:	431a      	orrs	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	0a1b      	lsrs	r3, r3, #8
 800eb0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb12:	431a      	orrs	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	0e1b      	lsrs	r3, r3, #24
 800eb18:	4313      	orrs	r3, r2
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr

0800eb26 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800eb26:	b480      	push	{r7}
 800eb28:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800eb2a:	bf00      	nop
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	6039      	str	r1, [r7, #0]
 800eb3e:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d80f      	bhi.n	800eb66 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d006      	beq.n	800eb5a <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	4909      	ldr	r1, [pc, #36]	; (800eb74 <dns_setserver+0x40>)
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	6812      	ldr	r2, [r2, #0]
 800eb54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800eb58:	e005      	b.n	800eb66 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	4905      	ldr	r1, [pc, #20]	; (800eb74 <dns_setserver+0x40>)
 800eb5e:	4a06      	ldr	r2, [pc, #24]	; (800eb78 <dns_setserver+0x44>)
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	20005504 	.word	0x20005504
 800eb78:	08020f5c 	.word	0x08020f5c

0800eb7c <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800eb80:	f000 faa8 	bl	800f0d4 <dns_check_entries>
}
 800eb84:	bf00      	nop
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b090      	sub	sp, #64	; 0x40
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800eb92:	79fa      	ldrb	r2, [r7, #7]
 800eb94:	4613      	mov	r3, r2
 800eb96:	011b      	lsls	r3, r3, #4
 800eb98:	4413      	add	r3, r2
 800eb9a:	011b      	lsls	r3, r3, #4
 800eb9c:	4a6c      	ldr	r2, [pc, #432]	; (800ed50 <dns_send+0x1c8>)
 800eb9e:	4413      	add	r3, r2
 800eba0:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	7adb      	ldrb	r3, [r3, #11]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d906      	bls.n	800ebb8 <dns_send+0x30>
 800ebaa:	4b6a      	ldr	r3, [pc, #424]	; (800ed54 <dns_send+0x1cc>)
 800ebac:	f240 22fa 	movw	r2, #762	; 0x2fa
 800ebb0:	4969      	ldr	r1, [pc, #420]	; (800ed58 <dns_send+0x1d0>)
 800ebb2:	486a      	ldr	r0, [pc, #424]	; (800ed5c <dns_send+0x1d4>)
 800ebb4:	f00e fa92 	bl	801d0dc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebba:	7adb      	ldrb	r3, [r3, #11]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	4b68      	ldr	r3, [pc, #416]	; (800ed60 <dns_send+0x1d8>)
 800ebc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d109      	bne.n	800ebdc <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	2100      	movs	r1, #0
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f000 f8cb 	bl	800ed68 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e0b4      	b.n	800ed46 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	3310      	adds	r3, #16
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f1 faf5 	bl	80001d0 <strlen>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	3312      	adds	r3, #18
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	2036      	movs	r0, #54	; 0x36
 800ebf6:	f001 fadb 	bl	80101b0 <pbuf_alloc>
 800ebfa:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800ebfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 8095 	beq.w	800ed2e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800ec04:	f107 0310 	add.w	r3, r7, #16
 800ec08:	220c      	movs	r2, #12
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f00e faca 	bl	801d1a6 <memset>
    hdr.id = lwip_htons(entry->txid);
 800ec12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec14:	891b      	ldrh	r3, [r3, #8]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff ff57 	bl	800eaca <lwip_htons>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800ec20:	2301      	movs	r3, #1
 800ec22:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800ec24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec28:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800ec2a:	f107 0310 	add.w	r3, r7, #16
 800ec2e:	220c      	movs	r2, #12
 800ec30:	4619      	mov	r1, r3
 800ec32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec34:	f002 f848 	bl	8010cc8 <pbuf_take>
    hostname = entry->name;
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	3310      	adds	r3, #16
 800ec3c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800ec3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec40:	3b01      	subs	r3, #1
 800ec42:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800ec44:	230c      	movs	r3, #12
 800ec46:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec50:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ec52:	2300      	movs	r3, #0
 800ec54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec58:	e007      	b.n	800ec6a <dns_send+0xe2>
        ++n;
 800ec5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec5e:	3301      	adds	r3, #1
 800ec60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ec64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec66:	3301      	adds	r3, #1
 800ec68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ec70:	d003      	beq.n	800ec7a <dns_send+0xf2>
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1ef      	bne.n	800ec5a <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800ec7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800ec82:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800ec84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec88:	4413      	add	r3, r2
 800ec8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	dc53      	bgt.n	800ed3a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800ec92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec9c:	f002 f942 	bl	8010f24 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800eca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eca2:	3301      	adds	r3, #1
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecac:	f002 f89e 	bl	8010dec <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800ecb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ecb8:	4413      	add	r3, r2
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800ecc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1bf      	bne.n	800ec48 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800ecc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ecca:	2200      	movs	r2, #0
 800eccc:	4619      	mov	r1, r3
 800ecce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecd0:	f002 f928 	bl	8010f24 <pbuf_put_at>
    query_idx++;
 800ecd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800ecda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecde:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800ece0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ece4:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800ece6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ece8:	f107 010c 	add.w	r1, r7, #12
 800ecec:	2204      	movs	r2, #4
 800ecee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecf0:	f002 f87c 	bl	8010dec <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	7bdb      	ldrb	r3, [r3, #15]
 800ecf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800ecfc:	2335      	movs	r3, #53	; 0x35
 800ecfe:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	7adb      	ldrb	r3, [r3, #11]
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4a16      	ldr	r2, [pc, #88]	; (800ed60 <dns_send+0x1d8>)
 800ed08:	4413      	add	r3, r2
 800ed0a:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800ed0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ed10:	4a14      	ldr	r2, [pc, #80]	; (800ed64 <dns_send+0x1dc>)
 800ed12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed18:	69fa      	ldr	r2, [r7, #28]
 800ed1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed1c:	f008 fbf0 	bl	8017500 <udp_sendto>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800ed26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed28:	f001 fd26 	bl	8010778 <pbuf_free>
 800ed2c:	e002      	b.n	800ed34 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800ed2e:	23ff      	movs	r3, #255	; 0xff
 800ed30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800ed34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed38:	e005      	b.n	800ed46 <dns_send+0x1be>
        goto overflow_return;
 800ed3a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800ed3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed3e:	f001 fd1b 	bl	8010778 <pbuf_free>
  return ERR_VAL;
 800ed42:	f06f 0305 	mvn.w	r3, #5
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3740      	adds	r7, #64	; 0x40
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	20005094 	.word	0x20005094
 800ed54:	0801dfd4 	.word	0x0801dfd4
 800ed58:	0801e004 	.word	0x0801e004
 800ed5c:	0801e01c 	.word	0x0801e01c
 800ed60:	20005504 	.word	0x20005504
 800ed64:	20005084 	.word	0x20005084

0800ed68 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800ed68:	b590      	push	{r4, r7, lr}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	6039      	str	r1, [r7, #0]
 800ed72:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	e03d      	b.n	800edf6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800ed7a:	7bfa      	ldrb	r2, [r7, #15]
 800ed7c:	4957      	ldr	r1, [pc, #348]	; (800eedc <dns_call_found+0x174>)
 800ed7e:	4613      	mov	r3, r2
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	4413      	add	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	440b      	add	r3, r1
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d030      	beq.n	800edf0 <dns_call_found+0x88>
 800ed8e:	7bfa      	ldrb	r2, [r7, #15]
 800ed90:	4952      	ldr	r1, [pc, #328]	; (800eedc <dns_call_found+0x174>)
 800ed92:	4613      	mov	r3, r2
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	4413      	add	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	440b      	add	r3, r1
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	79fa      	ldrb	r2, [r7, #7]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d124      	bne.n	800edf0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800eda6:	7bfa      	ldrb	r2, [r7, #15]
 800eda8:	494c      	ldr	r1, [pc, #304]	; (800eedc <dns_call_found+0x174>)
 800edaa:	4613      	mov	r3, r2
 800edac:	005b      	lsls	r3, r3, #1
 800edae:	4413      	add	r3, r2
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	440b      	add	r3, r1
 800edb4:	681c      	ldr	r4, [r3, #0]
 800edb6:	79fa      	ldrb	r2, [r7, #7]
 800edb8:	4613      	mov	r3, r2
 800edba:	011b      	lsls	r3, r3, #4
 800edbc:	4413      	add	r3, r2
 800edbe:	011b      	lsls	r3, r3, #4
 800edc0:	3310      	adds	r3, #16
 800edc2:	4a47      	ldr	r2, [pc, #284]	; (800eee0 <dns_call_found+0x178>)
 800edc4:	1898      	adds	r0, r3, r2
 800edc6:	7bfa      	ldrb	r2, [r7, #15]
 800edc8:	4944      	ldr	r1, [pc, #272]	; (800eedc <dns_call_found+0x174>)
 800edca:	4613      	mov	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	4413      	add	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	440b      	add	r3, r1
 800edd4:	3304      	adds	r3, #4
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	461a      	mov	r2, r3
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800edde:	7bfa      	ldrb	r2, [r7, #15]
 800ede0:	493e      	ldr	r1, [pc, #248]	; (800eedc <dns_call_found+0x174>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	440b      	add	r3, r1
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
 800edf2:	3301      	adds	r3, #1
 800edf4:	73fb      	strb	r3, [r7, #15]
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d9be      	bls.n	800ed7a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800edfc:	2300      	movs	r3, #0
 800edfe:	73fb      	strb	r3, [r7, #15]
 800ee00:	e031      	b.n	800ee66 <dns_call_found+0xfe>
    if (i == idx) {
 800ee02:	7bfa      	ldrb	r2, [r7, #15]
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d029      	beq.n	800ee5e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800ee0a:	7bfa      	ldrb	r2, [r7, #15]
 800ee0c:	4934      	ldr	r1, [pc, #208]	; (800eee0 <dns_call_found+0x178>)
 800ee0e:	4613      	mov	r3, r2
 800ee10:	011b      	lsls	r3, r3, #4
 800ee12:	4413      	add	r3, r2
 800ee14:	011b      	lsls	r3, r3, #4
 800ee16:	440b      	add	r3, r1
 800ee18:	330a      	adds	r3, #10
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d11f      	bne.n	800ee60 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800ee20:	7bfa      	ldrb	r2, [r7, #15]
 800ee22:	492f      	ldr	r1, [pc, #188]	; (800eee0 <dns_call_found+0x178>)
 800ee24:	4613      	mov	r3, r2
 800ee26:	011b      	lsls	r3, r3, #4
 800ee28:	4413      	add	r3, r2
 800ee2a:	011b      	lsls	r3, r3, #4
 800ee2c:	440b      	add	r3, r1
 800ee2e:	330f      	adds	r3, #15
 800ee30:	7819      	ldrb	r1, [r3, #0]
 800ee32:	79fa      	ldrb	r2, [r7, #7]
 800ee34:	482a      	ldr	r0, [pc, #168]	; (800eee0 <dns_call_found+0x178>)
 800ee36:	4613      	mov	r3, r2
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	4413      	add	r3, r2
 800ee3c:	011b      	lsls	r3, r3, #4
 800ee3e:	4403      	add	r3, r0
 800ee40:	330f      	adds	r3, #15
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	4299      	cmp	r1, r3
 800ee46:	d10b      	bne.n	800ee60 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	4925      	ldr	r1, [pc, #148]	; (800eee0 <dns_call_found+0x178>)
 800ee4c:	4613      	mov	r3, r2
 800ee4e:	011b      	lsls	r3, r3, #4
 800ee50:	4413      	add	r3, r2
 800ee52:	011b      	lsls	r3, r3, #4
 800ee54:	440b      	add	r3, r1
 800ee56:	330f      	adds	r3, #15
 800ee58:	2204      	movs	r2, #4
 800ee5a:	701a      	strb	r2, [r3, #0]
        break;
 800ee5c:	e006      	b.n	800ee6c <dns_call_found+0x104>
      continue; /* only check other requests */
 800ee5e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	3301      	adds	r3, #1
 800ee64:	73fb      	strb	r3, [r7, #15]
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d9ca      	bls.n	800ee02 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800ee6c:	79fa      	ldrb	r2, [r7, #7]
 800ee6e:	491c      	ldr	r1, [pc, #112]	; (800eee0 <dns_call_found+0x178>)
 800ee70:	4613      	mov	r3, r2
 800ee72:	011b      	lsls	r3, r3, #4
 800ee74:	4413      	add	r3, r2
 800ee76:	011b      	lsls	r3, r3, #4
 800ee78:	440b      	add	r3, r1
 800ee7a:	330f      	adds	r3, #15
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b03      	cmp	r3, #3
 800ee80:	d827      	bhi.n	800eed2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800ee82:	79fa      	ldrb	r2, [r7, #7]
 800ee84:	4916      	ldr	r1, [pc, #88]	; (800eee0 <dns_call_found+0x178>)
 800ee86:	4613      	mov	r3, r2
 800ee88:	011b      	lsls	r3, r3, #4
 800ee8a:	4413      	add	r3, r2
 800ee8c:	011b      	lsls	r3, r3, #4
 800ee8e:	440b      	add	r3, r1
 800ee90:	330f      	adds	r3, #15
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	461a      	mov	r2, r3
 800ee96:	4b13      	ldr	r3, [pc, #76]	; (800eee4 <dns_call_found+0x17c>)
 800ee98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f008 fdfb 	bl	8017a98 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800eea2:	79fa      	ldrb	r2, [r7, #7]
 800eea4:	490e      	ldr	r1, [pc, #56]	; (800eee0 <dns_call_found+0x178>)
 800eea6:	4613      	mov	r3, r2
 800eea8:	011b      	lsls	r3, r3, #4
 800eeaa:	4413      	add	r3, r2
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	440b      	add	r3, r1
 800eeb0:	330f      	adds	r3, #15
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4b0b      	ldr	r3, [pc, #44]	; (800eee4 <dns_call_found+0x17c>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800eebe:	79fa      	ldrb	r2, [r7, #7]
 800eec0:	4907      	ldr	r1, [pc, #28]	; (800eee0 <dns_call_found+0x178>)
 800eec2:	4613      	mov	r3, r2
 800eec4:	011b      	lsls	r3, r3, #4
 800eec6:	4413      	add	r3, r2
 800eec8:	011b      	lsls	r3, r3, #4
 800eeca:	440b      	add	r3, r1
 800eecc:	330f      	adds	r3, #15
 800eece:	2204      	movs	r2, #4
 800eed0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800eed2:	bf00      	nop
 800eed4:	3714      	adds	r7, #20
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd90      	pop	{r4, r7, pc}
 800eeda:	bf00      	nop
 800eedc:	200054d4 	.word	0x200054d4
 800eee0:	20005094 	.word	0x20005094
 800eee4:	20005084 	.word	0x20005084

0800eee8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800eeee:	f00d ff69 	bl	801cdc4 <rand>
 800eef2:	4603      	mov	r3, r0
 800eef4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800eef6:	2300      	movs	r3, #0
 800eef8:	71fb      	strb	r3, [r7, #7]
 800eefa:	e01a      	b.n	800ef32 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800eefc:	79fa      	ldrb	r2, [r7, #7]
 800eefe:	4911      	ldr	r1, [pc, #68]	; (800ef44 <dns_create_txid+0x5c>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	011b      	lsls	r3, r3, #4
 800ef04:	4413      	add	r3, r2
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	440b      	add	r3, r1
 800ef0a:	330a      	adds	r3, #10
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d10c      	bne.n	800ef2c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800ef12:	79fa      	ldrb	r2, [r7, #7]
 800ef14:	490b      	ldr	r1, [pc, #44]	; (800ef44 <dns_create_txid+0x5c>)
 800ef16:	4613      	mov	r3, r2
 800ef18:	011b      	lsls	r3, r3, #4
 800ef1a:	4413      	add	r3, r2
 800ef1c:	011b      	lsls	r3, r3, #4
 800ef1e:	440b      	add	r3, r1
 800ef20:	3308      	adds	r3, #8
 800ef22:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ef24:	88ba      	ldrh	r2, [r7, #4]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d100      	bne.n	800ef2c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800ef2a:	e7e0      	b.n	800eeee <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	71fb      	strb	r3, [r7, #7]
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d9e1      	bls.n	800eefc <dns_create_txid+0x14>
    }
  }

  return txid;
 800ef38:	88bb      	ldrh	r3, [r7, #4]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20005094 	.word	0x20005094

0800ef48 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00d      	beq.n	800ef76 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7adb      	ldrb	r3, [r3, #11]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d109      	bne.n	800ef76 <dns_backupserver_available+0x2e>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7adb      	ldrb	r3, [r3, #11]
 800ef66:	3301      	adds	r3, #1
 800ef68:	4a06      	ldr	r2, [pc, #24]	; (800ef84 <dns_backupserver_available+0x3c>)
 800ef6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <dns_backupserver_available+0x2e>
      ret = 1;
 800ef72:	2301      	movs	r3, #1
 800ef74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3714      	adds	r7, #20
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	20005504 	.word	0x20005504

0800ef88 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800ef92:	79fa      	ldrb	r2, [r7, #7]
 800ef94:	4613      	mov	r3, r2
 800ef96:	011b      	lsls	r3, r3, #4
 800ef98:	4413      	add	r3, r2
 800ef9a:	011b      	lsls	r3, r3, #4
 800ef9c:	4a48      	ldr	r2, [pc, #288]	; (800f0c0 <dns_check_entry+0x138>)
 800ef9e:	4413      	add	r3, r2
 800efa0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800efa2:	79fb      	ldrb	r3, [r7, #7]
 800efa4:	2b03      	cmp	r3, #3
 800efa6:	d906      	bls.n	800efb6 <dns_check_entry+0x2e>
 800efa8:	4b46      	ldr	r3, [pc, #280]	; (800f0c4 <dns_check_entry+0x13c>)
 800efaa:	f240 421c 	movw	r2, #1052	; 0x41c
 800efae:	4946      	ldr	r1, [pc, #280]	; (800f0c8 <dns_check_entry+0x140>)
 800efb0:	4846      	ldr	r0, [pc, #280]	; (800f0cc <dns_check_entry+0x144>)
 800efb2:	f00e f893 	bl	801d0dc <iprintf>

  switch (entry->state) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	7a9b      	ldrb	r3, [r3, #10]
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d86f      	bhi.n	800f09e <dns_check_entry+0x116>
 800efbe:	a201      	add	r2, pc, #4	; (adr r2, 800efc4 <dns_check_entry+0x3c>)
 800efc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc4:	0800f0af 	.word	0x0800f0af
 800efc8:	0800efd5 	.word	0x0800efd5
 800efcc:	0800f007 	.word	0x0800f007
 800efd0:	0800f07d 	.word	0x0800f07d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800efd4:	f7ff ff88 	bl	800eee8 <dns_create_txid>
 800efd8:	4603      	mov	r3, r0
 800efda:	461a      	mov	r2, r3
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2202      	movs	r2, #2
 800efe4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2201      	movs	r2, #1
 800eff0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff fdc4 	bl	800eb88 <dns_send>
 800f000:	4603      	mov	r3, r0
 800f002:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f004:	e058      	b.n	800f0b8 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	7b1b      	ldrb	r3, [r3, #12]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	731a      	strb	r2, [r3, #12]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	7b1b      	ldrb	r3, [r3, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d14b      	bne.n	800f0b2 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	7b5b      	ldrb	r3, [r3, #13]
 800f01e:	3301      	adds	r3, #1
 800f020:	b2da      	uxtb	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	735a      	strb	r2, [r3, #13]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	7b5b      	ldrb	r3, [r3, #13]
 800f02a:	2b04      	cmp	r3, #4
 800f02c:	d11b      	bne.n	800f066 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f7ff ff8a 	bl	800ef48 <dns_backupserver_available>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00c      	beq.n	800f054 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	7adb      	ldrb	r3, [r3, #11]
 800f03e:	3301      	adds	r3, #1
 800f040:	b2da      	uxtb	r2, r3
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2201      	movs	r2, #1
 800f04a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2200      	movs	r2, #0
 800f050:	735a      	strb	r2, [r3, #13]
 800f052:	e00c      	b.n	800f06e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f054:	79fb      	ldrb	r3, [r7, #7]
 800f056:	2100      	movs	r1, #0
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff fe85 	bl	800ed68 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	729a      	strb	r2, [r3, #10]
            break;
 800f064:	e028      	b.n	800f0b8 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	7b5a      	ldrb	r2, [r3, #13]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd89 	bl	800eb88 <dns_send>
 800f076:	4603      	mov	r3, r0
 800f078:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f07a:	e01a      	b.n	800f0b2 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d008      	beq.n	800f096 <dns_check_entry+0x10e>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	1e5a      	subs	r2, r3, #1
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10f      	bne.n	800f0b6 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f09c:	e00b      	b.n	800f0b6 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f09e:	4b09      	ldr	r3, [pc, #36]	; (800f0c4 <dns_check_entry+0x13c>)
 800f0a0:	f240 425b 	movw	r2, #1115	; 0x45b
 800f0a4:	490a      	ldr	r1, [pc, #40]	; (800f0d0 <dns_check_entry+0x148>)
 800f0a6:	4809      	ldr	r0, [pc, #36]	; (800f0cc <dns_check_entry+0x144>)
 800f0a8:	f00e f818 	bl	801d0dc <iprintf>
      break;
 800f0ac:	e004      	b.n	800f0b8 <dns_check_entry+0x130>
      break;
 800f0ae:	bf00      	nop
 800f0b0:	e002      	b.n	800f0b8 <dns_check_entry+0x130>
      break;
 800f0b2:	bf00      	nop
 800f0b4:	e000      	b.n	800f0b8 <dns_check_entry+0x130>
      break;
 800f0b6:	bf00      	nop
  }
}
 800f0b8:	bf00      	nop
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20005094 	.word	0x20005094
 800f0c4:	0801dfd4 	.word	0x0801dfd4
 800f0c8:	0801e044 	.word	0x0801e044
 800f0cc:	0801e01c 	.word	0x0801e01c
 800f0d0:	0801e060 	.word	0x0801e060

0800f0d4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f0da:	2300      	movs	r3, #0
 800f0dc:	71fb      	strb	r3, [r7, #7]
 800f0de:	e006      	b.n	800f0ee <dns_check_entries+0x1a>
    dns_check_entry(i);
 800f0e0:	79fb      	ldrb	r3, [r7, #7]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff ff50 	bl	800ef88 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	71fb      	strb	r3, [r7, #7]
 800f0ee:	79fb      	ldrb	r3, [r7, #7]
 800f0f0:	2b03      	cmp	r3, #3
 800f0f2:	d9f5      	bls.n	800f0e0 <dns_check_entries+0xc>
  }
}
 800f0f4:	bf00      	nop
 800f0f6:	bf00      	nop
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b082      	sub	sp, #8
 800f102:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f104:	2300      	movs	r3, #0
 800f106:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f108:	f000 f8d6 	bl	800f2b8 <mem_init>
  memp_init();
 800f10c:	f000 fbdc 	bl	800f8c8 <memp_init>
  pbuf_init();
  netif_init();
 800f110:	f000 fcda 	bl	800fac8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f114:	f008 f832 	bl	801717c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f118:	f001 ff26 	bl	8010f68 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800f11c:	f7ff fd03 	bl	800eb26 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f120:	f007 ffa2 	bl	8017068 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f136:	4b05      	ldr	r3, [pc, #20]	; (800f14c <ptr_to_mem+0x20>)
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	88fb      	ldrh	r3, [r7, #6]
 800f13c:	4413      	add	r3, r2
}
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	20005b78 	.word	0x20005b78

0800f150 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f158:	4b05      	ldr	r3, [pc, #20]	; (800f170 <mem_to_ptr+0x20>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	b29b      	uxth	r3, r3
}
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	20005b78 	.word	0x20005b78

0800f174 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f174:	b590      	push	{r4, r7, lr}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f17c:	4b45      	ldr	r3, [pc, #276]	; (800f294 <plug_holes+0x120>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	429a      	cmp	r2, r3
 800f184:	d206      	bcs.n	800f194 <plug_holes+0x20>
 800f186:	4b44      	ldr	r3, [pc, #272]	; (800f298 <plug_holes+0x124>)
 800f188:	f240 12df 	movw	r2, #479	; 0x1df
 800f18c:	4943      	ldr	r1, [pc, #268]	; (800f29c <plug_holes+0x128>)
 800f18e:	4844      	ldr	r0, [pc, #272]	; (800f2a0 <plug_holes+0x12c>)
 800f190:	f00d ffa4 	bl	801d0dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f194:	4b43      	ldr	r3, [pc, #268]	; (800f2a4 <plug_holes+0x130>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d306      	bcc.n	800f1ac <plug_holes+0x38>
 800f19e:	4b3e      	ldr	r3, [pc, #248]	; (800f298 <plug_holes+0x124>)
 800f1a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f1a4:	4940      	ldr	r1, [pc, #256]	; (800f2a8 <plug_holes+0x134>)
 800f1a6:	483e      	ldr	r0, [pc, #248]	; (800f2a0 <plug_holes+0x12c>)
 800f1a8:	f00d ff98 	bl	801d0dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	791b      	ldrb	r3, [r3, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d006      	beq.n	800f1c2 <plug_holes+0x4e>
 800f1b4:	4b38      	ldr	r3, [pc, #224]	; (800f298 <plug_holes+0x124>)
 800f1b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f1ba:	493c      	ldr	r1, [pc, #240]	; (800f2ac <plug_holes+0x138>)
 800f1bc:	4838      	ldr	r0, [pc, #224]	; (800f2a0 <plug_holes+0x12c>)
 800f1be:	f00d ff8d 	bl	801d0dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	881b      	ldrh	r3, [r3, #0]
 800f1c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1ca:	d906      	bls.n	800f1da <plug_holes+0x66>
 800f1cc:	4b32      	ldr	r3, [pc, #200]	; (800f298 <plug_holes+0x124>)
 800f1ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f1d2:	4937      	ldr	r1, [pc, #220]	; (800f2b0 <plug_holes+0x13c>)
 800f1d4:	4832      	ldr	r0, [pc, #200]	; (800f2a0 <plug_holes+0x12c>)
 800f1d6:	f00d ff81 	bl	801d0dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff ffa4 	bl	800f12c <ptr_to_mem>
 800f1e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d024      	beq.n	800f238 <plug_holes+0xc4>
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	791b      	ldrb	r3, [r3, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d120      	bne.n	800f238 <plug_holes+0xc4>
 800f1f6:	4b2b      	ldr	r3, [pc, #172]	; (800f2a4 <plug_holes+0x130>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d01b      	beq.n	800f238 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f200:	4b2c      	ldr	r3, [pc, #176]	; (800f2b4 <plug_holes+0x140>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	429a      	cmp	r2, r3
 800f208:	d102      	bne.n	800f210 <plug_holes+0x9c>
      lfree = mem;
 800f20a:	4a2a      	ldr	r2, [pc, #168]	; (800f2b4 <plug_holes+0x140>)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	881a      	ldrh	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f220:	d00a      	beq.n	800f238 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	881b      	ldrh	r3, [r3, #0]
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff ff80 	bl	800f12c <ptr_to_mem>
 800f22c:	4604      	mov	r4, r0
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7ff ff8e 	bl	800f150 <mem_to_ptr>
 800f234:	4603      	mov	r3, r0
 800f236:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	885b      	ldrh	r3, [r3, #2]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7ff ff75 	bl	800f12c <ptr_to_mem>
 800f242:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d01f      	beq.n	800f28c <plug_holes+0x118>
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	791b      	ldrb	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d11b      	bne.n	800f28c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f254:	4b17      	ldr	r3, [pc, #92]	; (800f2b4 <plug_holes+0x140>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d102      	bne.n	800f264 <plug_holes+0xf0>
      lfree = pmem;
 800f25e:	4a15      	ldr	r2, [pc, #84]	; (800f2b4 <plug_holes+0x140>)
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	881a      	ldrh	r2, [r3, #0]
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	881b      	ldrh	r3, [r3, #0]
 800f270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f274:	d00a      	beq.n	800f28c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff ff56 	bl	800f12c <ptr_to_mem>
 800f280:	4604      	mov	r4, r0
 800f282:	68b8      	ldr	r0, [r7, #8]
 800f284:	f7ff ff64 	bl	800f150 <mem_to_ptr>
 800f288:	4603      	mov	r3, r0
 800f28a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f28c:	bf00      	nop
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	bd90      	pop	{r4, r7, pc}
 800f294:	20005b78 	.word	0x20005b78
 800f298:	0801e080 	.word	0x0801e080
 800f29c:	0801e0b0 	.word	0x0801e0b0
 800f2a0:	0801e0c8 	.word	0x0801e0c8
 800f2a4:	20005b7c 	.word	0x20005b7c
 800f2a8:	0801e0f0 	.word	0x0801e0f0
 800f2ac:	0801e10c 	.word	0x0801e10c
 800f2b0:	0801e128 	.word	0x0801e128
 800f2b4:	20005b80 	.word	0x20005b80

0800f2b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f2be:	4b18      	ldr	r3, [pc, #96]	; (800f320 <mem_init+0x68>)
 800f2c0:	3303      	adds	r3, #3
 800f2c2:	f023 0303 	bic.w	r3, r3, #3
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4b16      	ldr	r3, [pc, #88]	; (800f324 <mem_init+0x6c>)
 800f2ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f2cc:	4b15      	ldr	r3, [pc, #84]	; (800f324 <mem_init+0x6c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f2d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f2e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f2ea:	f7ff ff1f 	bl	800f12c <ptr_to_mem>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	4a0d      	ldr	r2, [pc, #52]	; (800f328 <mem_init+0x70>)
 800f2f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f2f4:	4b0c      	ldr	r3, [pc, #48]	; (800f328 <mem_init+0x70>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f2fc:	4b0a      	ldr	r3, [pc, #40]	; (800f328 <mem_init+0x70>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f304:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f306:	4b08      	ldr	r3, [pc, #32]	; (800f328 <mem_init+0x70>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f30e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f310:	4b04      	ldr	r3, [pc, #16]	; (800f324 <mem_init+0x6c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a05      	ldr	r2, [pc, #20]	; (800f32c <mem_init+0x74>)
 800f316:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f318:	bf00      	nop
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	20005524 	.word	0x20005524
 800f324:	20005b78 	.word	0x20005b78
 800f328:	20005b7c 	.word	0x20005b7c
 800f32c:	20005b80 	.word	0x20005b80

0800f330 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff ff09 	bl	800f150 <mem_to_ptr>
 800f33e:	4603      	mov	r3, r0
 800f340:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff fef0 	bl	800f12c <ptr_to_mem>
 800f34c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	885b      	ldrh	r3, [r3, #2]
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff feea 	bl	800f12c <ptr_to_mem>
 800f358:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f362:	d818      	bhi.n	800f396 <mem_link_valid+0x66>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	885b      	ldrh	r3, [r3, #2]
 800f368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f36c:	d813      	bhi.n	800f396 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f372:	8afa      	ldrh	r2, [r7, #22]
 800f374:	429a      	cmp	r2, r3
 800f376:	d004      	beq.n	800f382 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	8afa      	ldrh	r2, [r7, #22]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d109      	bne.n	800f396 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f382:	4b08      	ldr	r3, [pc, #32]	; (800f3a4 <mem_link_valid+0x74>)
 800f384:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d006      	beq.n	800f39a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	885b      	ldrh	r3, [r3, #2]
 800f390:	8afa      	ldrh	r2, [r7, #22]
 800f392:	429a      	cmp	r2, r3
 800f394:	d001      	beq.n	800f39a <mem_link_valid+0x6a>
    return 0;
 800f396:	2300      	movs	r3, #0
 800f398:	e000      	b.n	800f39c <mem_link_valid+0x6c>
  }
  return 1;
 800f39a:	2301      	movs	r3, #1
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20005b7c 	.word	0x20005b7c

0800f3a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d04c      	beq.n	800f450 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f003 0303 	and.w	r3, r3, #3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d007      	beq.n	800f3d0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f3c0:	4b25      	ldr	r3, [pc, #148]	; (800f458 <mem_free+0xb0>)
 800f3c2:	f240 2273 	movw	r2, #627	; 0x273
 800f3c6:	4925      	ldr	r1, [pc, #148]	; (800f45c <mem_free+0xb4>)
 800f3c8:	4825      	ldr	r0, [pc, #148]	; (800f460 <mem_free+0xb8>)
 800f3ca:	f00d fe87 	bl	801d0dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f3ce:	e040      	b.n	800f452 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	3b08      	subs	r3, #8
 800f3d4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f3d6:	4b23      	ldr	r3, [pc, #140]	; (800f464 <mem_free+0xbc>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d306      	bcc.n	800f3ee <mem_free+0x46>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f103 020c 	add.w	r2, r3, #12
 800f3e6:	4b20      	ldr	r3, [pc, #128]	; (800f468 <mem_free+0xc0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d907      	bls.n	800f3fe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f3ee:	4b1a      	ldr	r3, [pc, #104]	; (800f458 <mem_free+0xb0>)
 800f3f0:	f240 227f 	movw	r2, #639	; 0x27f
 800f3f4:	491d      	ldr	r1, [pc, #116]	; (800f46c <mem_free+0xc4>)
 800f3f6:	481a      	ldr	r0, [pc, #104]	; (800f460 <mem_free+0xb8>)
 800f3f8:	f00d fe70 	bl	801d0dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f3fc:	e029      	b.n	800f452 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	791b      	ldrb	r3, [r3, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d107      	bne.n	800f416 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f406:	4b14      	ldr	r3, [pc, #80]	; (800f458 <mem_free+0xb0>)
 800f408:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f40c:	4918      	ldr	r1, [pc, #96]	; (800f470 <mem_free+0xc8>)
 800f40e:	4814      	ldr	r0, [pc, #80]	; (800f460 <mem_free+0xb8>)
 800f410:	f00d fe64 	bl	801d0dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f414:	e01d      	b.n	800f452 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f7ff ff8a 	bl	800f330 <mem_link_valid>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d107      	bne.n	800f432 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f422:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <mem_free+0xb0>)
 800f424:	f240 2295 	movw	r2, #661	; 0x295
 800f428:	4912      	ldr	r1, [pc, #72]	; (800f474 <mem_free+0xcc>)
 800f42a:	480d      	ldr	r0, [pc, #52]	; (800f460 <mem_free+0xb8>)
 800f42c:	f00d fe56 	bl	801d0dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f430:	e00f      	b.n	800f452 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2200      	movs	r2, #0
 800f436:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f438:	4b0f      	ldr	r3, [pc, #60]	; (800f478 <mem_free+0xd0>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d202      	bcs.n	800f448 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f442:	4a0d      	ldr	r2, [pc, #52]	; (800f478 <mem_free+0xd0>)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fe93 	bl	800f174 <plug_holes>
 800f44e:	e000      	b.n	800f452 <mem_free+0xaa>
    return;
 800f450:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	0801e080 	.word	0x0801e080
 800f45c:	0801e154 	.word	0x0801e154
 800f460:	0801e0c8 	.word	0x0801e0c8
 800f464:	20005b78 	.word	0x20005b78
 800f468:	20005b7c 	.word	0x20005b7c
 800f46c:	0801e178 	.word	0x0801e178
 800f470:	0801e194 	.word	0x0801e194
 800f474:	0801e1bc 	.word	0x0801e1bc
 800f478:	20005b80 	.word	0x20005b80

0800f47c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f488:	887b      	ldrh	r3, [r7, #2]
 800f48a:	3303      	adds	r3, #3
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	f023 0303 	bic.w	r3, r3, #3
 800f492:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f494:	8bfb      	ldrh	r3, [r7, #30]
 800f496:	2b0b      	cmp	r3, #11
 800f498:	d801      	bhi.n	800f49e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f49a:	230c      	movs	r3, #12
 800f49c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f49e:	8bfb      	ldrh	r3, [r7, #30]
 800f4a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f4a4:	d803      	bhi.n	800f4ae <mem_trim+0x32>
 800f4a6:	8bfa      	ldrh	r2, [r7, #30]
 800f4a8:	887b      	ldrh	r3, [r7, #2]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d201      	bcs.n	800f4b2 <mem_trim+0x36>
    return NULL;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	e0cc      	b.n	800f64c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f4b2:	4b68      	ldr	r3, [pc, #416]	; (800f654 <mem_trim+0x1d8>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d304      	bcc.n	800f4c6 <mem_trim+0x4a>
 800f4bc:	4b66      	ldr	r3, [pc, #408]	; (800f658 <mem_trim+0x1dc>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d306      	bcc.n	800f4d4 <mem_trim+0x58>
 800f4c6:	4b65      	ldr	r3, [pc, #404]	; (800f65c <mem_trim+0x1e0>)
 800f4c8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f4cc:	4964      	ldr	r1, [pc, #400]	; (800f660 <mem_trim+0x1e4>)
 800f4ce:	4865      	ldr	r0, [pc, #404]	; (800f664 <mem_trim+0x1e8>)
 800f4d0:	f00d fe04 	bl	801d0dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f4d4:	4b5f      	ldr	r3, [pc, #380]	; (800f654 <mem_trim+0x1d8>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d304      	bcc.n	800f4e8 <mem_trim+0x6c>
 800f4de:	4b5e      	ldr	r3, [pc, #376]	; (800f658 <mem_trim+0x1dc>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d301      	bcc.n	800f4ec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	e0af      	b.n	800f64c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	3b08      	subs	r3, #8
 800f4f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f4f2:	69b8      	ldr	r0, [r7, #24]
 800f4f4:	f7ff fe2c 	bl	800f150 <mem_to_ptr>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	881a      	ldrh	r2, [r3, #0]
 800f500:	8afb      	ldrh	r3, [r7, #22]
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	b29b      	uxth	r3, r3
 800f506:	3b08      	subs	r3, #8
 800f508:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f50a:	8bfa      	ldrh	r2, [r7, #30]
 800f50c:	8abb      	ldrh	r3, [r7, #20]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d906      	bls.n	800f520 <mem_trim+0xa4>
 800f512:	4b52      	ldr	r3, [pc, #328]	; (800f65c <mem_trim+0x1e0>)
 800f514:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f518:	4953      	ldr	r1, [pc, #332]	; (800f668 <mem_trim+0x1ec>)
 800f51a:	4852      	ldr	r0, [pc, #328]	; (800f664 <mem_trim+0x1e8>)
 800f51c:	f00d fdde 	bl	801d0dc <iprintf>
  if (newsize > size) {
 800f520:	8bfa      	ldrh	r2, [r7, #30]
 800f522:	8abb      	ldrh	r3, [r7, #20]
 800f524:	429a      	cmp	r2, r3
 800f526:	d901      	bls.n	800f52c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	e08f      	b.n	800f64c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800f52c:	8bfa      	ldrh	r2, [r7, #30]
 800f52e:	8abb      	ldrh	r3, [r7, #20]
 800f530:	429a      	cmp	r2, r3
 800f532:	d101      	bne.n	800f538 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	e089      	b.n	800f64c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff fdf5 	bl	800f12c <ptr_to_mem>
 800f542:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	791b      	ldrb	r3, [r3, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d13f      	bne.n	800f5cc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	881b      	ldrh	r3, [r3, #0]
 800f550:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f554:	d106      	bne.n	800f564 <mem_trim+0xe8>
 800f556:	4b41      	ldr	r3, [pc, #260]	; (800f65c <mem_trim+0x1e0>)
 800f558:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f55c:	4943      	ldr	r1, [pc, #268]	; (800f66c <mem_trim+0x1f0>)
 800f55e:	4841      	ldr	r0, [pc, #260]	; (800f664 <mem_trim+0x1e8>)
 800f560:	f00d fdbc 	bl	801d0dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f56a:	8afa      	ldrh	r2, [r7, #22]
 800f56c:	8bfb      	ldrh	r3, [r7, #30]
 800f56e:	4413      	add	r3, r2
 800f570:	b29b      	uxth	r3, r3
 800f572:	3308      	adds	r3, #8
 800f574:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f576:	4b3e      	ldr	r3, [pc, #248]	; (800f670 <mem_trim+0x1f4>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d106      	bne.n	800f58e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800f580:	89fb      	ldrh	r3, [r7, #14]
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff fdd2 	bl	800f12c <ptr_to_mem>
 800f588:	4603      	mov	r3, r0
 800f58a:	4a39      	ldr	r2, [pc, #228]	; (800f670 <mem_trim+0x1f4>)
 800f58c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f58e:	89fb      	ldrh	r3, [r7, #14]
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff fdcb 	bl	800f12c <ptr_to_mem>
 800f596:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	2200      	movs	r2, #0
 800f59c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	89ba      	ldrh	r2, [r7, #12]
 800f5a2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	8afa      	ldrh	r2, [r7, #22]
 800f5a8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	89fa      	ldrh	r2, [r7, #14]
 800f5ae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5b8:	d047      	beq.n	800f64a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7ff fdb4 	bl	800f12c <ptr_to_mem>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	89fb      	ldrh	r3, [r7, #14]
 800f5c8:	8053      	strh	r3, [r2, #2]
 800f5ca:	e03e      	b.n	800f64a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f5cc:	8bfb      	ldrh	r3, [r7, #30]
 800f5ce:	f103 0214 	add.w	r2, r3, #20
 800f5d2:	8abb      	ldrh	r3, [r7, #20]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d838      	bhi.n	800f64a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f5d8:	8afa      	ldrh	r2, [r7, #22]
 800f5da:	8bfb      	ldrh	r3, [r7, #30]
 800f5dc:	4413      	add	r3, r2
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5ec:	d106      	bne.n	800f5fc <mem_trim+0x180>
 800f5ee:	4b1b      	ldr	r3, [pc, #108]	; (800f65c <mem_trim+0x1e0>)
 800f5f0:	f240 3216 	movw	r2, #790	; 0x316
 800f5f4:	491d      	ldr	r1, [pc, #116]	; (800f66c <mem_trim+0x1f0>)
 800f5f6:	481b      	ldr	r0, [pc, #108]	; (800f664 <mem_trim+0x1e8>)
 800f5f8:	f00d fd70 	bl	801d0dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f5fc:	89fb      	ldrh	r3, [r7, #14]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff fd94 	bl	800f12c <ptr_to_mem>
 800f604:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f606:	4b1a      	ldr	r3, [pc, #104]	; (800f670 <mem_trim+0x1f4>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	693a      	ldr	r2, [r7, #16]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d202      	bcs.n	800f616 <mem_trim+0x19a>
      lfree = mem2;
 800f610:	4a17      	ldr	r2, [pc, #92]	; (800f670 <mem_trim+0x1f4>)
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	2200      	movs	r2, #0
 800f61a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	881a      	ldrh	r2, [r3, #0]
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	8afa      	ldrh	r2, [r7, #22]
 800f628:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	89fa      	ldrh	r2, [r7, #14]
 800f62e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	881b      	ldrh	r3, [r3, #0]
 800f634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f638:	d007      	beq.n	800f64a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff fd74 	bl	800f12c <ptr_to_mem>
 800f644:	4602      	mov	r2, r0
 800f646:	89fb      	ldrh	r3, [r7, #14]
 800f648:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f64a:	687b      	ldr	r3, [r7, #4]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3720      	adds	r7, #32
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20005b78 	.word	0x20005b78
 800f658:	20005b7c 	.word	0x20005b7c
 800f65c:	0801e080 	.word	0x0801e080
 800f660:	0801e1f0 	.word	0x0801e1f0
 800f664:	0801e0c8 	.word	0x0801e0c8
 800f668:	0801e208 	.word	0x0801e208
 800f66c:	0801e228 	.word	0x0801e228
 800f670:	20005b80 	.word	0x20005b80

0800f674 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af00      	add	r7, sp, #0
 800f67a:	4603      	mov	r3, r0
 800f67c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f67e:	88fb      	ldrh	r3, [r7, #6]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d101      	bne.n	800f688 <mem_malloc+0x14>
    return NULL;
 800f684:	2300      	movs	r3, #0
 800f686:	e0d9      	b.n	800f83c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	3303      	adds	r3, #3
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	f023 0303 	bic.w	r3, r3, #3
 800f692:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f694:	8bbb      	ldrh	r3, [r7, #28]
 800f696:	2b0b      	cmp	r3, #11
 800f698:	d801      	bhi.n	800f69e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f69a:	230c      	movs	r3, #12
 800f69c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f69e:	8bbb      	ldrh	r3, [r7, #28]
 800f6a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f6a4:	d803      	bhi.n	800f6ae <mem_malloc+0x3a>
 800f6a6:	8bba      	ldrh	r2, [r7, #28]
 800f6a8:	88fb      	ldrh	r3, [r7, #6]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d201      	bcs.n	800f6b2 <mem_malloc+0x3e>
    return NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e0c4      	b.n	800f83c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f6b2:	4b64      	ldr	r3, [pc, #400]	; (800f844 <mem_malloc+0x1d0>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fd4a 	bl	800f150 <mem_to_ptr>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	83fb      	strh	r3, [r7, #30]
 800f6c0:	e0b4      	b.n	800f82c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f6c2:	8bfb      	ldrh	r3, [r7, #30]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff fd31 	bl	800f12c <ptr_to_mem>
 800f6ca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	791b      	ldrb	r3, [r3, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f040 80a4 	bne.w	800f81e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	8bfb      	ldrh	r3, [r7, #30]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	f1a3 0208 	sub.w	r2, r3, #8
 800f6e4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	f0c0 8099 	bcc.w	800f81e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	8bfb      	ldrh	r3, [r7, #30]
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	f1a3 0208 	sub.w	r2, r3, #8
 800f6fa:	8bbb      	ldrh	r3, [r7, #28]
 800f6fc:	3314      	adds	r3, #20
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d333      	bcc.n	800f76a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f702:	8bfa      	ldrh	r2, [r7, #30]
 800f704:	8bbb      	ldrh	r3, [r7, #28]
 800f706:	4413      	add	r3, r2
 800f708:	b29b      	uxth	r3, r3
 800f70a:	3308      	adds	r3, #8
 800f70c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f70e:	8a7b      	ldrh	r3, [r7, #18]
 800f710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f714:	d106      	bne.n	800f724 <mem_malloc+0xb0>
 800f716:	4b4c      	ldr	r3, [pc, #304]	; (800f848 <mem_malloc+0x1d4>)
 800f718:	f240 3287 	movw	r2, #903	; 0x387
 800f71c:	494b      	ldr	r1, [pc, #300]	; (800f84c <mem_malloc+0x1d8>)
 800f71e:	484c      	ldr	r0, [pc, #304]	; (800f850 <mem_malloc+0x1dc>)
 800f720:	f00d fcdc 	bl	801d0dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f724:	8a7b      	ldrh	r3, [r7, #18]
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fd00 	bl	800f12c <ptr_to_mem>
 800f72c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	881a      	ldrh	r2, [r3, #0]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	8bfa      	ldrh	r2, [r7, #30]
 800f740:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	8a7a      	ldrh	r2, [r7, #18]
 800f746:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	2201      	movs	r2, #1
 800f74c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f756:	d00b      	beq.n	800f770 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fce5 	bl	800f12c <ptr_to_mem>
 800f762:	4602      	mov	r2, r0
 800f764:	8a7b      	ldrh	r3, [r7, #18]
 800f766:	8053      	strh	r3, [r2, #2]
 800f768:	e002      	b.n	800f770 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2201      	movs	r2, #1
 800f76e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f770:	4b34      	ldr	r3, [pc, #208]	; (800f844 <mem_malloc+0x1d0>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	697a      	ldr	r2, [r7, #20]
 800f776:	429a      	cmp	r2, r3
 800f778:	d127      	bne.n	800f7ca <mem_malloc+0x156>
          struct mem *cur = lfree;
 800f77a:	4b32      	ldr	r3, [pc, #200]	; (800f844 <mem_malloc+0x1d0>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f780:	e005      	b.n	800f78e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	881b      	ldrh	r3, [r3, #0]
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fcd0 	bl	800f12c <ptr_to_mem>
 800f78c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	791b      	ldrb	r3, [r3, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d004      	beq.n	800f7a0 <mem_malloc+0x12c>
 800f796:	4b2f      	ldr	r3, [pc, #188]	; (800f854 <mem_malloc+0x1e0>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	69ba      	ldr	r2, [r7, #24]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d1f0      	bne.n	800f782 <mem_malloc+0x10e>
          }
          lfree = cur;
 800f7a0:	4a28      	ldr	r2, [pc, #160]	; (800f844 <mem_malloc+0x1d0>)
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f7a6:	4b27      	ldr	r3, [pc, #156]	; (800f844 <mem_malloc+0x1d0>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	4b2a      	ldr	r3, [pc, #168]	; (800f854 <mem_malloc+0x1e0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d00b      	beq.n	800f7ca <mem_malloc+0x156>
 800f7b2:	4b24      	ldr	r3, [pc, #144]	; (800f844 <mem_malloc+0x1d0>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	791b      	ldrb	r3, [r3, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d006      	beq.n	800f7ca <mem_malloc+0x156>
 800f7bc:	4b22      	ldr	r3, [pc, #136]	; (800f848 <mem_malloc+0x1d4>)
 800f7be:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f7c2:	4925      	ldr	r1, [pc, #148]	; (800f858 <mem_malloc+0x1e4>)
 800f7c4:	4822      	ldr	r0, [pc, #136]	; (800f850 <mem_malloc+0x1dc>)
 800f7c6:	f00d fc89 	bl	801d0dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f7ca:	8bba      	ldrh	r2, [r7, #28]
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	4a20      	ldr	r2, [pc, #128]	; (800f854 <mem_malloc+0x1e0>)
 800f7d4:	6812      	ldr	r2, [r2, #0]
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d906      	bls.n	800f7e8 <mem_malloc+0x174>
 800f7da:	4b1b      	ldr	r3, [pc, #108]	; (800f848 <mem_malloc+0x1d4>)
 800f7dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f7e0:	491e      	ldr	r1, [pc, #120]	; (800f85c <mem_malloc+0x1e8>)
 800f7e2:	481b      	ldr	r0, [pc, #108]	; (800f850 <mem_malloc+0x1dc>)
 800f7e4:	f00d fc7a 	bl	801d0dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	f003 0303 	and.w	r3, r3, #3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d006      	beq.n	800f800 <mem_malloc+0x18c>
 800f7f2:	4b15      	ldr	r3, [pc, #84]	; (800f848 <mem_malloc+0x1d4>)
 800f7f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f7f8:	4919      	ldr	r1, [pc, #100]	; (800f860 <mem_malloc+0x1ec>)
 800f7fa:	4815      	ldr	r0, [pc, #84]	; (800f850 <mem_malloc+0x1dc>)
 800f7fc:	f00d fc6e 	bl	801d0dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	f003 0303 	and.w	r3, r3, #3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d006      	beq.n	800f818 <mem_malloc+0x1a4>
 800f80a:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <mem_malloc+0x1d4>)
 800f80c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f810:	4914      	ldr	r1, [pc, #80]	; (800f864 <mem_malloc+0x1f0>)
 800f812:	480f      	ldr	r0, [pc, #60]	; (800f850 <mem_malloc+0x1dc>)
 800f814:	f00d fc62 	bl	801d0dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	3308      	adds	r3, #8
 800f81c:	e00e      	b.n	800f83c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800f81e:	8bfb      	ldrh	r3, [r7, #30]
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff fc83 	bl	800f12c <ptr_to_mem>
 800f826:	4603      	mov	r3, r0
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f82c:	8bfa      	ldrh	r2, [r7, #30]
 800f82e:	8bbb      	ldrh	r3, [r7, #28]
 800f830:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f834:	429a      	cmp	r2, r3
 800f836:	f4ff af44 	bcc.w	800f6c2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3720      	adds	r7, #32
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20005b80 	.word	0x20005b80
 800f848:	0801e080 	.word	0x0801e080
 800f84c:	0801e228 	.word	0x0801e228
 800f850:	0801e0c8 	.word	0x0801e0c8
 800f854:	20005b7c 	.word	0x20005b7c
 800f858:	0801e23c 	.word	0x0801e23c
 800f85c:	0801e258 	.word	0x0801e258
 800f860:	0801e288 	.word	0x0801e288
 800f864:	0801e2b8 	.word	0x0801e2b8

0800f868 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	2200      	movs	r2, #0
 800f876:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	3303      	adds	r3, #3
 800f87e:	f023 0303 	bic.w	r3, r3, #3
 800f882:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f884:	2300      	movs	r3, #0
 800f886:	60fb      	str	r3, [r7, #12]
 800f888:	e011      	b.n	800f8ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	60fb      	str	r3, [r7, #12]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	885b      	ldrh	r3, [r3, #2]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	dbe7      	blt.n	800f88a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f8ba:	bf00      	nop
 800f8bc:	bf00      	nop
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	80fb      	strh	r3, [r7, #6]
 800f8d2:	e009      	b.n	800f8e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f8d4:	88fb      	ldrh	r3, [r7, #6]
 800f8d6:	4a08      	ldr	r2, [pc, #32]	; (800f8f8 <memp_init+0x30>)
 800f8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff ffc3 	bl	800f868 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f8e2:	88fb      	ldrh	r3, [r7, #6]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	80fb      	strh	r3, [r7, #6]
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	2b08      	cmp	r3, #8
 800f8ec:	d9f2      	bls.n	800f8d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f8ee:	bf00      	nop
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	08020ee0 	.word	0x08020ee0

0800f8fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d012      	beq.n	800f938 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	6812      	ldr	r2, [r2, #0]
 800f91a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f003 0303 	and.w	r3, r3, #3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <do_memp_malloc_pool+0x38>
 800f926:	4b07      	ldr	r3, [pc, #28]	; (800f944 <do_memp_malloc_pool+0x48>)
 800f928:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f92c:	4906      	ldr	r1, [pc, #24]	; (800f948 <do_memp_malloc_pool+0x4c>)
 800f92e:	4807      	ldr	r0, [pc, #28]	; (800f94c <do_memp_malloc_pool+0x50>)
 800f930:	f00d fbd4 	bl	801d0dc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	e000      	b.n	800f93a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3710      	adds	r7, #16
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	0801e2dc 	.word	0x0801e2dc
 800f948:	0801e30c 	.word	0x0801e30c
 800f94c:	0801e330 	.word	0x0801e330

0800f950 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d106      	bne.n	800f96c <memp_malloc_pool+0x1c>
 800f95e:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <memp_malloc_pool+0x38>)
 800f960:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f964:	4909      	ldr	r1, [pc, #36]	; (800f98c <memp_malloc_pool+0x3c>)
 800f966:	480a      	ldr	r0, [pc, #40]	; (800f990 <memp_malloc_pool+0x40>)
 800f968:	f00d fbb8 	bl	801d0dc <iprintf>
  if (desc == NULL) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d101      	bne.n	800f976 <memp_malloc_pool+0x26>
    return NULL;
 800f972:	2300      	movs	r3, #0
 800f974:	e003      	b.n	800f97e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff ffc0 	bl	800f8fc <do_memp_malloc_pool>
 800f97c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	0801e2dc 	.word	0x0801e2dc
 800f98c:	0801e358 	.word	0x0801e358
 800f990:	0801e330 	.word	0x0801e330

0800f994 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f99e:	79fb      	ldrb	r3, [r7, #7]
 800f9a0:	2b08      	cmp	r3, #8
 800f9a2:	d908      	bls.n	800f9b6 <memp_malloc+0x22>
 800f9a4:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <memp_malloc+0x3c>)
 800f9a6:	f240 1257 	movw	r2, #343	; 0x157
 800f9aa:	490a      	ldr	r1, [pc, #40]	; (800f9d4 <memp_malloc+0x40>)
 800f9ac:	480a      	ldr	r0, [pc, #40]	; (800f9d8 <memp_malloc+0x44>)
 800f9ae:	f00d fb95 	bl	801d0dc <iprintf>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	e008      	b.n	800f9c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	4a08      	ldr	r2, [pc, #32]	; (800f9dc <memp_malloc+0x48>)
 800f9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff ff9c 	bl	800f8fc <do_memp_malloc_pool>
 800f9c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	0801e2dc 	.word	0x0801e2dc
 800f9d4:	0801e36c 	.word	0x0801e36c
 800f9d8:	0801e330 	.word	0x0801e330
 800f9dc:	08020ee0 	.word	0x08020ee0

0800f9e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	f003 0303 	and.w	r3, r3, #3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d006      	beq.n	800fa02 <do_memp_free_pool+0x22>
 800f9f4:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <do_memp_free_pool+0x40>)
 800f9f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f9fa:	490a      	ldr	r1, [pc, #40]	; (800fa24 <do_memp_free_pool+0x44>)
 800f9fc:	480a      	ldr	r0, [pc, #40]	; (800fa28 <do_memp_free_pool+0x48>)
 800f9fe:	f00d fb6d 	bl	801d0dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	0801e2dc 	.word	0x0801e2dc
 800fa24:	0801e38c 	.word	0x0801e38c
 800fa28:	0801e330 	.word	0x0801e330

0800fa2c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d106      	bne.n	800fa4a <memp_free_pool+0x1e>
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <memp_free_pool+0x3c>)
 800fa3e:	f240 1295 	movw	r2, #405	; 0x195
 800fa42:	490a      	ldr	r1, [pc, #40]	; (800fa6c <memp_free_pool+0x40>)
 800fa44:	480a      	ldr	r0, [pc, #40]	; (800fa70 <memp_free_pool+0x44>)
 800fa46:	f00d fb49 	bl	801d0dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d007      	beq.n	800fa60 <memp_free_pool+0x34>
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d004      	beq.n	800fa60 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff ffc1 	bl	800f9e0 <do_memp_free_pool>
 800fa5e:	e000      	b.n	800fa62 <memp_free_pool+0x36>
    return;
 800fa60:	bf00      	nop
}
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801e2dc 	.word	0x0801e2dc
 800fa6c:	0801e358 	.word	0x0801e358
 800fa70:	0801e330 	.word	0x0801e330

0800fa74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	6039      	str	r1, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fa80:	79fb      	ldrb	r3, [r7, #7]
 800fa82:	2b08      	cmp	r3, #8
 800fa84:	d907      	bls.n	800fa96 <memp_free+0x22>
 800fa86:	4b0c      	ldr	r3, [pc, #48]	; (800fab8 <memp_free+0x44>)
 800fa88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fa8c:	490b      	ldr	r1, [pc, #44]	; (800fabc <memp_free+0x48>)
 800fa8e:	480c      	ldr	r0, [pc, #48]	; (800fac0 <memp_free+0x4c>)
 800fa90:	f00d fb24 	bl	801d0dc <iprintf>
 800fa94:	e00c      	b.n	800fab0 <memp_free+0x3c>

  if (mem == NULL) {
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d008      	beq.n	800faae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fa9c:	79fb      	ldrb	r3, [r7, #7]
 800fa9e:	4a09      	ldr	r2, [pc, #36]	; (800fac4 <memp_free+0x50>)
 800faa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa4:	6839      	ldr	r1, [r7, #0]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff ff9a 	bl	800f9e0 <do_memp_free_pool>
 800faac:	e000      	b.n	800fab0 <memp_free+0x3c>
    return;
 800faae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	0801e2dc 	.word	0x0801e2dc
 800fabc:	0801e3ac 	.word	0x0801e3ac
 800fac0:	0801e330 	.word	0x0801e330
 800fac4:	08020ee0 	.word	0x08020ee0

0800fac8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fac8:	b480      	push	{r7}
 800faca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800facc:	bf00      	nop
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
	...

0800fad8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d108      	bne.n	800fafe <netif_add+0x26>
 800faec:	4b5b      	ldr	r3, [pc, #364]	; (800fc5c <netif_add+0x184>)
 800faee:	f240 1227 	movw	r2, #295	; 0x127
 800faf2:	495b      	ldr	r1, [pc, #364]	; (800fc60 <netif_add+0x188>)
 800faf4:	485b      	ldr	r0, [pc, #364]	; (800fc64 <netif_add+0x18c>)
 800faf6:	f00d faf1 	bl	801d0dc <iprintf>
 800fafa:	2300      	movs	r3, #0
 800fafc:	e0a9      	b.n	800fc52 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d108      	bne.n	800fb16 <netif_add+0x3e>
 800fb04:	4b55      	ldr	r3, [pc, #340]	; (800fc5c <netif_add+0x184>)
 800fb06:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fb0a:	4957      	ldr	r1, [pc, #348]	; (800fc68 <netif_add+0x190>)
 800fb0c:	4855      	ldr	r0, [pc, #340]	; (800fc64 <netif_add+0x18c>)
 800fb0e:	f00d fae5 	bl	801d0dc <iprintf>
 800fb12:	2300      	movs	r3, #0
 800fb14:	e09d      	b.n	800fc52 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d101      	bne.n	800fb20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fb1c:	4b53      	ldr	r3, [pc, #332]	; (800fc6c <netif_add+0x194>)
 800fb1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fb26:	4b51      	ldr	r3, [pc, #324]	; (800fc6c <netif_add+0x194>)
 800fb28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fb30:	4b4e      	ldr	r3, [pc, #312]	; (800fc6c <netif_add+0x194>)
 800fb32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	4a49      	ldr	r2, [pc, #292]	; (800fc70 <netif_add+0x198>)
 800fb4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3324      	adds	r3, #36	; 0x24
 800fb5e:	2204      	movs	r2, #4
 800fb60:	2100      	movs	r1, #0
 800fb62:	4618      	mov	r0, r3
 800fb64:	f00d fb1f 	bl	801d1a6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6a3a      	ldr	r2, [r7, #32]
 800fb72:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fb74:	4b3f      	ldr	r3, [pc, #252]	; (800fc74 <netif_add+0x19c>)
 800fb76:	781a      	ldrb	r2, [r3, #0]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb82:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	68b9      	ldr	r1, [r7, #8]
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f000 f914 	bl	800fdb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	4798      	blx	r3
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <netif_add+0xc8>
    return NULL;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	e058      	b.n	800fc52 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fba6:	2bff      	cmp	r3, #255	; 0xff
 800fba8:	d103      	bne.n	800fbb2 <netif_add+0xda>
        netif->num = 0;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fbb6:	4b30      	ldr	r3, [pc, #192]	; (800fc78 <netif_add+0x1a0>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	e02b      	b.n	800fc16 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d106      	bne.n	800fbd4 <netif_add+0xfc>
 800fbc6:	4b25      	ldr	r3, [pc, #148]	; (800fc5c <netif_add+0x184>)
 800fbc8:	f240 128b 	movw	r2, #395	; 0x18b
 800fbcc:	492b      	ldr	r1, [pc, #172]	; (800fc7c <netif_add+0x1a4>)
 800fbce:	4825      	ldr	r0, [pc, #148]	; (800fc64 <netif_add+0x18c>)
 800fbd0:	f00d fa84 	bl	801d0dc <iprintf>
        num_netifs++;
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2bff      	cmp	r3, #255	; 0xff
 800fbde:	dd06      	ble.n	800fbee <netif_add+0x116>
 800fbe0:	4b1e      	ldr	r3, [pc, #120]	; (800fc5c <netif_add+0x184>)
 800fbe2:	f240 128d 	movw	r2, #397	; 0x18d
 800fbe6:	4926      	ldr	r1, [pc, #152]	; (800fc80 <netif_add+0x1a8>)
 800fbe8:	481e      	ldr	r0, [pc, #120]	; (800fc64 <netif_add+0x18c>)
 800fbea:	f00d fa77 	bl	801d0dc <iprintf>
        if (netif2->num == netif->num) {
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d108      	bne.n	800fc10 <netif_add+0x138>
          netif->num++;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc04:	3301      	adds	r3, #1
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800fc0e:	e005      	b.n	800fc1c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1d0      	bne.n	800fbbe <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1be      	bne.n	800fba0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc28:	2bfe      	cmp	r3, #254	; 0xfe
 800fc2a:	d103      	bne.n	800fc34 <netif_add+0x15c>
    netif_num = 0;
 800fc2c:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <netif_add+0x19c>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	701a      	strb	r2, [r3, #0]
 800fc32:	e006      	b.n	800fc42 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <netif_add+0x19c>)
 800fc40:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fc42:	4b0d      	ldr	r3, [pc, #52]	; (800fc78 <netif_add+0x1a0>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fc4a:	4a0b      	ldr	r2, [pc, #44]	; (800fc78 <netif_add+0x1a0>)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fc50:	68fb      	ldr	r3, [r7, #12]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	0801e3c8 	.word	0x0801e3c8
 800fc60:	0801e45c 	.word	0x0801e45c
 800fc64:	0801e418 	.word	0x0801e418
 800fc68:	0801e478 	.word	0x0801e478
 800fc6c:	08020f5c 	.word	0x08020f5c
 800fc70:	0801009b 	.word	0x0801009b
 800fc74:	20008668 	.word	0x20008668
 800fc78:	20008660 	.word	0x20008660
 800fc7c:	0801e49c 	.word	0x0801e49c
 800fc80:	0801e4b0 	.word	0x0801e4b0

0800fc84 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f002 febf 	bl	8012a14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f007 ff57 	bl	8017b4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fc9e:	bf00      	nop
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <netif_do_set_ipaddr+0x20>
 800fcba:	4b1d      	ldr	r3, [pc, #116]	; (800fd30 <netif_do_set_ipaddr+0x88>)
 800fcbc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fcc0:	491c      	ldr	r1, [pc, #112]	; (800fd34 <netif_do_set_ipaddr+0x8c>)
 800fcc2:	481d      	ldr	r0, [pc, #116]	; (800fd38 <netif_do_set_ipaddr+0x90>)
 800fcc4:	f00d fa0a 	bl	801d0dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <netif_do_set_ipaddr+0x34>
 800fcce:	4b18      	ldr	r3, [pc, #96]	; (800fd30 <netif_do_set_ipaddr+0x88>)
 800fcd0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fcd4:	4917      	ldr	r1, [pc, #92]	; (800fd34 <netif_do_set_ipaddr+0x8c>)
 800fcd6:	4818      	ldr	r0, [pc, #96]	; (800fd38 <netif_do_set_ipaddr+0x90>)
 800fcd8:	f00d fa00 	bl	801d0dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	3304      	adds	r3, #4
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d01c      	beq.n	800fd24 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3304      	adds	r3, #4
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fcfa:	f107 0314 	add.w	r3, r7, #20
 800fcfe:	4619      	mov	r1, r3
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff ffbf 	bl	800fc84 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <netif_do_set_ipaddr+0x6a>
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	e000      	b.n	800fd14 <netif_do_set_ipaddr+0x6c>
 800fd12:	2300      	movs	r3, #0
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fd18:	2101      	movs	r1, #1
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f000 f8d2 	bl	800fec4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fd20:	2301      	movs	r3, #1
 800fd22:	e000      	b.n	800fd26 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	0801e3c8 	.word	0x0801e3c8
 800fd34:	0801e4e0 	.word	0x0801e4e0
 800fd38:	0801e418 	.word	0x0801e418

0800fd3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	3308      	adds	r3, #8
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d00a      	beq.n	800fd6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <netif_do_set_netmask+0x26>
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	e000      	b.n	800fd64 <netif_do_set_netmask+0x28>
 800fd62:	2300      	movs	r3, #0
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e000      	b.n	800fd6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fd7a:	b480      	push	{r7}
 800fd7c:	b085      	sub	sp, #20
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	60f8      	str	r0, [r7, #12]
 800fd82:	60b9      	str	r1, [r7, #8]
 800fd84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	330c      	adds	r3, #12
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d00a      	beq.n	800fdaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d002      	beq.n	800fda0 <netif_do_set_gw+0x26>
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	e000      	b.n	800fda2 <netif_do_set_gw+0x28>
 800fda0:	2300      	movs	r3, #0
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fda6:	2301      	movs	r3, #1
 800fda8:	e000      	b.n	800fdac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fdaa:	2300      	movs	r3, #0
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b088      	sub	sp, #32
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
 800fdc4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fdd4:	4b1c      	ldr	r3, [pc, #112]	; (800fe48 <netif_set_addr+0x90>)
 800fdd6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fdde:	4b1a      	ldr	r3, [pc, #104]	; (800fe48 <netif_set_addr+0x90>)
 800fde0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d101      	bne.n	800fdec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fde8:	4b17      	ldr	r3, [pc, #92]	; (800fe48 <netif_set_addr+0x90>)
 800fdea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <netif_set_addr+0x42>
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <netif_set_addr+0x46>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e000      	b.n	800fe00 <netif_set_addr+0x48>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d006      	beq.n	800fe16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe08:	f107 0310 	add.w	r3, r7, #16
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	68b9      	ldr	r1, [r7, #8]
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7ff ff49 	bl	800fca8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe16:	69fa      	ldr	r2, [r7, #28]
 800fe18:	6879      	ldr	r1, [r7, #4]
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff ff8e 	bl	800fd3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	68f8      	ldr	r0, [r7, #12]
 800fe26:	f7ff ffa8 	bl	800fd7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe30:	f107 0310 	add.w	r3, r7, #16
 800fe34:	461a      	mov	r2, r3
 800fe36:	68b9      	ldr	r1, [r7, #8]
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	f7ff ff35 	bl	800fca8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fe3e:	bf00      	nop
 800fe40:	3720      	adds	r7, #32
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	08020f5c 	.word	0x08020f5c

0800fe4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fe54:	4a04      	ldr	r2, [pc, #16]	; (800fe68 <netif_set_default+0x1c>)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fe5a:	bf00      	nop
 800fe5c:	370c      	adds	r7, #12
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	20008664 	.word	0x20008664

0800fe6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d107      	bne.n	800fe8a <netif_set_up+0x1e>
 800fe7a:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <netif_set_up+0x4c>)
 800fe7c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fe80:	490e      	ldr	r1, [pc, #56]	; (800febc <netif_set_up+0x50>)
 800fe82:	480f      	ldr	r0, [pc, #60]	; (800fec0 <netif_set_up+0x54>)
 800fe84:	f00d f92a 	bl	801d0dc <iprintf>
 800fe88:	e013      	b.n	800feb2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10c      	bne.n	800feb2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe9e:	f043 0301 	orr.w	r3, r3, #1
 800fea2:	b2da      	uxtb	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800feaa:	2103      	movs	r1, #3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f809 	bl	800fec4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	0801e3c8 	.word	0x0801e3c8
 800febc:	0801e550 	.word	0x0801e550
 800fec0:	0801e418 	.word	0x0801e418

0800fec4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <netif_issue_reports+0x20>
 800fed6:	4b18      	ldr	r3, [pc, #96]	; (800ff38 <netif_issue_reports+0x74>)
 800fed8:	f240 326d 	movw	r2, #877	; 0x36d
 800fedc:	4917      	ldr	r1, [pc, #92]	; (800ff3c <netif_issue_reports+0x78>)
 800fede:	4818      	ldr	r0, [pc, #96]	; (800ff40 <netif_issue_reports+0x7c>)
 800fee0:	f00d f8fc 	bl	801d0dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800feea:	f003 0304 	and.w	r3, r3, #4
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d01e      	beq.n	800ff30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fef8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d017      	beq.n	800ff30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff00:	78fb      	ldrb	r3, [r7, #3]
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d013      	beq.n	800ff32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00e      	beq.n	800ff32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff1a:	f003 0308 	and.w	r3, r3, #8
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d007      	beq.n	800ff32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3304      	adds	r3, #4
 800ff26:	4619      	mov	r1, r3
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f00a fc99 	bl	801a860 <etharp_request>
 800ff2e:	e000      	b.n	800ff32 <netif_issue_reports+0x6e>
    return;
 800ff30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	0801e3c8 	.word	0x0801e3c8
 800ff3c:	0801e56c 	.word	0x0801e56c
 800ff40:	0801e418 	.word	0x0801e418

0800ff44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d107      	bne.n	800ff62 <netif_set_down+0x1e>
 800ff52:	4b12      	ldr	r3, [pc, #72]	; (800ff9c <netif_set_down+0x58>)
 800ff54:	f240 329b 	movw	r2, #923	; 0x39b
 800ff58:	4911      	ldr	r1, [pc, #68]	; (800ffa0 <netif_set_down+0x5c>)
 800ff5a:	4812      	ldr	r0, [pc, #72]	; (800ffa4 <netif_set_down+0x60>)
 800ff5c:	f00d f8be 	bl	801d0dc <iprintf>
 800ff60:	e019      	b.n	800ff96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d012      	beq.n	800ff96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff76:	f023 0301 	bic.w	r3, r3, #1
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff88:	f003 0308 	and.w	r3, r3, #8
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f00a f81f 	bl	8019fd4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	0801e3c8 	.word	0x0801e3c8
 800ffa0:	0801e590 	.word	0x0801e590
 800ffa4:	0801e418 	.word	0x0801e418

0800ffa8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d107      	bne.n	800ffc6 <netif_set_link_up+0x1e>
 800ffb6:	4b15      	ldr	r3, [pc, #84]	; (801000c <netif_set_link_up+0x64>)
 800ffb8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ffbc:	4914      	ldr	r1, [pc, #80]	; (8010010 <netif_set_link_up+0x68>)
 800ffbe:	4815      	ldr	r0, [pc, #84]	; (8010014 <netif_set_link_up+0x6c>)
 800ffc0:	f00d f88c 	bl	801d0dc <iprintf>
 800ffc4:	e01e      	b.n	8010004 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d117      	bne.n	8010004 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffda:	f043 0304 	orr.w	r3, r3, #4
 800ffde:	b2da      	uxtb	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f008 fa34 	bl	8018454 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ffec:	2103      	movs	r1, #3
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7ff ff68 	bl	800fec4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	69db      	ldr	r3, [r3, #28]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d003      	beq.n	8010004 <netif_set_link_up+0x5c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	69db      	ldr	r3, [r3, #28]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	0801e3c8 	.word	0x0801e3c8
 8010010:	0801e5b0 	.word	0x0801e5b0
 8010014:	0801e418 	.word	0x0801e418

08010018 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d107      	bne.n	8010036 <netif_set_link_down+0x1e>
 8010026:	4b11      	ldr	r3, [pc, #68]	; (801006c <netif_set_link_down+0x54>)
 8010028:	f240 4206 	movw	r2, #1030	; 0x406
 801002c:	4910      	ldr	r1, [pc, #64]	; (8010070 <netif_set_link_down+0x58>)
 801002e:	4811      	ldr	r0, [pc, #68]	; (8010074 <netif_set_link_down+0x5c>)
 8010030:	f00d f854 	bl	801d0dc <iprintf>
 8010034:	e017      	b.n	8010066 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	d010      	beq.n	8010066 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801004a:	f023 0304 	bic.w	r3, r3, #4
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <netif_set_link_down+0x4e>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	69db      	ldr	r3, [r3, #28]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	0801e3c8 	.word	0x0801e3c8
 8010070:	0801e5d4 	.word	0x0801e5d4
 8010074:	0801e418 	.word	0x0801e418

08010078 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	61da      	str	r2, [r3, #28]
  }
}
 801008e:	bf00      	nop
 8010090:	370c      	adds	r7, #12
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr

0801009a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801009a:	b480      	push	{r7}
 801009c:	b085      	sub	sp, #20
 801009e:	af00      	add	r7, sp, #0
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	60b9      	str	r1, [r7, #8]
 80100a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80100a6:	f06f 030b 	mvn.w	r3, #11
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d013      	beq.n	80100f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80100c8:	4b0d      	ldr	r3, [pc, #52]	; (8010100 <netif_get_by_index+0x48>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	60fb      	str	r3, [r7, #12]
 80100ce:	e00c      	b.n	80100ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100d6:	3301      	adds	r3, #1
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	79fa      	ldrb	r2, [r7, #7]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d101      	bne.n	80100e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	e006      	b.n	80100f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	60fb      	str	r3, [r7, #12]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1ef      	bne.n	80100d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	20008660 	.word	0x20008660

08010104 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801010a:	4b0c      	ldr	r3, [pc, #48]	; (801013c <pbuf_free_ooseq+0x38>)
 801010c:	2200      	movs	r2, #0
 801010e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010110:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <pbuf_free_ooseq+0x3c>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	607b      	str	r3, [r7, #4]
 8010116:	e00a      	b.n	801012e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f002 fcb5 	bl	8012a90 <tcp_free_ooseq>
      return;
 8010126:	e005      	b.n	8010134 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	607b      	str	r3, [r7, #4]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1f1      	bne.n	8010118 <pbuf_free_ooseq+0x14>
    }
  }
}
 8010134:	3708      	adds	r7, #8
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	20008669 	.word	0x20008669
 8010140:	20008678 	.word	0x20008678

08010144 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010144:	b480      	push	{r7}
 8010146:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010148:	4b03      	ldr	r3, [pc, #12]	; (8010158 <pbuf_pool_is_empty+0x14>)
 801014a:	2201      	movs	r2, #1
 801014c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801014e:	bf00      	nop
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	20008669 	.word	0x20008669

0801015c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	4611      	mov	r1, r2
 8010168:	461a      	mov	r2, r3
 801016a:	460b      	mov	r3, r1
 801016c:	80fb      	strh	r3, [r7, #6]
 801016e:	4613      	mov	r3, r2
 8010170:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	88fa      	ldrh	r2, [r7, #6]
 8010182:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	88ba      	ldrh	r2, [r7, #4]
 8010188:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801018a:	8b3b      	ldrh	r3, [r7, #24]
 801018c:	b2da      	uxtb	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	7f3a      	ldrb	r2, [r7, #28]
 8010196:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2201      	movs	r2, #1
 801019c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	73da      	strb	r2, [r3, #15]
}
 80101a4:	bf00      	nop
 80101a6:	3714      	adds	r7, #20
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08c      	sub	sp, #48	; 0x30
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
 80101ba:	460b      	mov	r3, r1
 80101bc:	80bb      	strh	r3, [r7, #4]
 80101be:	4613      	mov	r3, r2
 80101c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80101c6:	887b      	ldrh	r3, [r7, #2]
 80101c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80101cc:	d07f      	beq.n	80102ce <pbuf_alloc+0x11e>
 80101ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80101d2:	f300 80c8 	bgt.w	8010366 <pbuf_alloc+0x1b6>
 80101d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80101da:	d010      	beq.n	80101fe <pbuf_alloc+0x4e>
 80101dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80101e0:	f300 80c1 	bgt.w	8010366 <pbuf_alloc+0x1b6>
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d002      	beq.n	80101ee <pbuf_alloc+0x3e>
 80101e8:	2b41      	cmp	r3, #65	; 0x41
 80101ea:	f040 80bc 	bne.w	8010366 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80101ee:	887a      	ldrh	r2, [r7, #2]
 80101f0:	88bb      	ldrh	r3, [r7, #4]
 80101f2:	4619      	mov	r1, r3
 80101f4:	2000      	movs	r0, #0
 80101f6:	f000 f8d1 	bl	801039c <pbuf_alloc_reference>
 80101fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80101fc:	e0bd      	b.n	801037a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80101fe:	2300      	movs	r3, #0
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010206:	88bb      	ldrh	r3, [r7, #4]
 8010208:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801020a:	2008      	movs	r0, #8
 801020c:	f7ff fbc2 	bl	800f994 <memp_malloc>
 8010210:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d109      	bne.n	801022c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010218:	f7ff ff94 	bl	8010144 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010224:	f000 faa8 	bl	8010778 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010228:	2300      	movs	r3, #0
 801022a:	e0a7      	b.n	801037c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801022c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801022e:	3303      	adds	r3, #3
 8010230:	b29b      	uxth	r3, r3
 8010232:	f023 0303 	bic.w	r3, r3, #3
 8010236:	b29b      	uxth	r3, r3
 8010238:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 801023c:	b29b      	uxth	r3, r3
 801023e:	8b7a      	ldrh	r2, [r7, #26]
 8010240:	4293      	cmp	r3, r2
 8010242:	bf28      	it	cs
 8010244:	4613      	movcs	r3, r2
 8010246:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801024a:	3310      	adds	r3, #16
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	4413      	add	r3, r2
 8010250:	3303      	adds	r3, #3
 8010252:	f023 0303 	bic.w	r3, r3, #3
 8010256:	4618      	mov	r0, r3
 8010258:	89f9      	ldrh	r1, [r7, #14]
 801025a:	8b7a      	ldrh	r2, [r7, #26]
 801025c:	2300      	movs	r3, #0
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	887b      	ldrh	r3, [r7, #2]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	460b      	mov	r3, r1
 8010266:	4601      	mov	r1, r0
 8010268:	6938      	ldr	r0, [r7, #16]
 801026a:	f7ff ff77 	bl	801015c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	f003 0303 	and.w	r3, r3, #3
 8010276:	2b00      	cmp	r3, #0
 8010278:	d006      	beq.n	8010288 <pbuf_alloc+0xd8>
 801027a:	4b42      	ldr	r3, [pc, #264]	; (8010384 <pbuf_alloc+0x1d4>)
 801027c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010280:	4941      	ldr	r1, [pc, #260]	; (8010388 <pbuf_alloc+0x1d8>)
 8010282:	4842      	ldr	r0, [pc, #264]	; (801038c <pbuf_alloc+0x1dc>)
 8010284:	f00c ff2a 	bl	801d0dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801028a:	3303      	adds	r3, #3
 801028c:	f023 0303 	bic.w	r3, r3, #3
 8010290:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010294:	d106      	bne.n	80102a4 <pbuf_alloc+0xf4>
 8010296:	4b3b      	ldr	r3, [pc, #236]	; (8010384 <pbuf_alloc+0x1d4>)
 8010298:	f44f 7281 	mov.w	r2, #258	; 0x102
 801029c:	493c      	ldr	r1, [pc, #240]	; (8010390 <pbuf_alloc+0x1e0>)
 801029e:	483b      	ldr	r0, [pc, #236]	; (801038c <pbuf_alloc+0x1dc>)
 80102a0:	f00c ff1c 	bl	801d0dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d102      	bne.n	80102b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	627b      	str	r3, [r7, #36]	; 0x24
 80102ae:	e002      	b.n	80102b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80102ba:	8b7a      	ldrh	r2, [r7, #26]
 80102bc:	89fb      	ldrh	r3, [r7, #14]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80102c2:	2300      	movs	r3, #0
 80102c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80102c6:	8b7b      	ldrh	r3, [r7, #26]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d19e      	bne.n	801020a <pbuf_alloc+0x5a>
      break;
 80102cc:	e055      	b.n	801037a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80102ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102d0:	3303      	adds	r3, #3
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	f023 0303 	bic.w	r3, r3, #3
 80102d8:	b29a      	uxth	r2, r3
 80102da:	88bb      	ldrh	r3, [r7, #4]
 80102dc:	3303      	adds	r3, #3
 80102de:	b29b      	uxth	r3, r3
 80102e0:	f023 0303 	bic.w	r3, r3, #3
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	4413      	add	r3, r2
 80102e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80102ea:	8b3b      	ldrh	r3, [r7, #24]
 80102ec:	3310      	adds	r3, #16
 80102ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80102f0:	8b3a      	ldrh	r2, [r7, #24]
 80102f2:	88bb      	ldrh	r3, [r7, #4]
 80102f4:	3303      	adds	r3, #3
 80102f6:	f023 0303 	bic.w	r3, r3, #3
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d306      	bcc.n	801030c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80102fe:	8afa      	ldrh	r2, [r7, #22]
 8010300:	88bb      	ldrh	r3, [r7, #4]
 8010302:	3303      	adds	r3, #3
 8010304:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010308:	429a      	cmp	r2, r3
 801030a:	d201      	bcs.n	8010310 <pbuf_alloc+0x160>
        return NULL;
 801030c:	2300      	movs	r3, #0
 801030e:	e035      	b.n	801037c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010310:	8afb      	ldrh	r3, [r7, #22]
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff f9ae 	bl	800f674 <mem_malloc>
 8010318:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <pbuf_alloc+0x174>
        return NULL;
 8010320:	2300      	movs	r3, #0
 8010322:	e02b      	b.n	801037c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010326:	3310      	adds	r3, #16
 8010328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032a:	4413      	add	r3, r2
 801032c:	3303      	adds	r3, #3
 801032e:	f023 0303 	bic.w	r3, r3, #3
 8010332:	4618      	mov	r0, r3
 8010334:	88b9      	ldrh	r1, [r7, #4]
 8010336:	88ba      	ldrh	r2, [r7, #4]
 8010338:	2300      	movs	r3, #0
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	887b      	ldrh	r3, [r7, #2]
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	460b      	mov	r3, r1
 8010342:	4601      	mov	r1, r0
 8010344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010346:	f7ff ff09 	bl	801015c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f003 0303 	and.w	r3, r3, #3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d010      	beq.n	8010378 <pbuf_alloc+0x1c8>
 8010356:	4b0b      	ldr	r3, [pc, #44]	; (8010384 <pbuf_alloc+0x1d4>)
 8010358:	f44f 7291 	mov.w	r2, #290	; 0x122
 801035c:	490d      	ldr	r1, [pc, #52]	; (8010394 <pbuf_alloc+0x1e4>)
 801035e:	480b      	ldr	r0, [pc, #44]	; (801038c <pbuf_alloc+0x1dc>)
 8010360:	f00c febc 	bl	801d0dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010364:	e008      	b.n	8010378 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010366:	4b07      	ldr	r3, [pc, #28]	; (8010384 <pbuf_alloc+0x1d4>)
 8010368:	f240 1227 	movw	r2, #295	; 0x127
 801036c:	490a      	ldr	r1, [pc, #40]	; (8010398 <pbuf_alloc+0x1e8>)
 801036e:	4807      	ldr	r0, [pc, #28]	; (801038c <pbuf_alloc+0x1dc>)
 8010370:	f00c feb4 	bl	801d0dc <iprintf>
      return NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	e001      	b.n	801037c <pbuf_alloc+0x1cc>
      break;
 8010378:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801037c:	4618      	mov	r0, r3
 801037e:	3728      	adds	r7, #40	; 0x28
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	0801e5f8 	.word	0x0801e5f8
 8010388:	0801e628 	.word	0x0801e628
 801038c:	0801e658 	.word	0x0801e658
 8010390:	0801e680 	.word	0x0801e680
 8010394:	0801e6b4 	.word	0x0801e6b4
 8010398:	0801e6e0 	.word	0x0801e6e0

0801039c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
 80103a8:	4613      	mov	r3, r2
 80103aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103ac:	883b      	ldrh	r3, [r7, #0]
 80103ae:	2b41      	cmp	r3, #65	; 0x41
 80103b0:	d009      	beq.n	80103c6 <pbuf_alloc_reference+0x2a>
 80103b2:	883b      	ldrh	r3, [r7, #0]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d006      	beq.n	80103c6 <pbuf_alloc_reference+0x2a>
 80103b8:	4b0f      	ldr	r3, [pc, #60]	; (80103f8 <pbuf_alloc_reference+0x5c>)
 80103ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80103be:	490f      	ldr	r1, [pc, #60]	; (80103fc <pbuf_alloc_reference+0x60>)
 80103c0:	480f      	ldr	r0, [pc, #60]	; (8010400 <pbuf_alloc_reference+0x64>)
 80103c2:	f00c fe8b 	bl	801d0dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80103c6:	2007      	movs	r0, #7
 80103c8:	f7ff fae4 	bl	800f994 <memp_malloc>
 80103cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80103d4:	2300      	movs	r3, #0
 80103d6:	e00b      	b.n	80103f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80103d8:	8879      	ldrh	r1, [r7, #2]
 80103da:	887a      	ldrh	r2, [r7, #2]
 80103dc:	2300      	movs	r3, #0
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	883b      	ldrh	r3, [r7, #0]
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	460b      	mov	r3, r1
 80103e6:	6879      	ldr	r1, [r7, #4]
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff feb7 	bl	801015c <pbuf_init_alloced_pbuf>
  return p;
 80103ee:	68fb      	ldr	r3, [r7, #12]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	0801e5f8 	.word	0x0801e5f8
 80103fc:	0801e6fc 	.word	0x0801e6fc
 8010400:	0801e658 	.word	0x0801e658

08010404 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af02      	add	r7, sp, #8
 801040a:	607b      	str	r3, [r7, #4]
 801040c:	4603      	mov	r3, r0
 801040e:	73fb      	strb	r3, [r7, #15]
 8010410:	460b      	mov	r3, r1
 8010412:	81bb      	strh	r3, [r7, #12]
 8010414:	4613      	mov	r3, r2
 8010416:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801041c:	8a7b      	ldrh	r3, [r7, #18]
 801041e:	3303      	adds	r3, #3
 8010420:	f023 0203 	bic.w	r2, r3, #3
 8010424:	89bb      	ldrh	r3, [r7, #12]
 8010426:	441a      	add	r2, r3
 8010428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801042a:	429a      	cmp	r2, r3
 801042c:	d901      	bls.n	8010432 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	e018      	b.n	8010464 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d007      	beq.n	8010448 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010438:	8a7b      	ldrh	r3, [r7, #18]
 801043a:	3303      	adds	r3, #3
 801043c:	f023 0303 	bic.w	r3, r3, #3
 8010440:	6a3a      	ldr	r2, [r7, #32]
 8010442:	4413      	add	r3, r2
 8010444:	617b      	str	r3, [r7, #20]
 8010446:	e001      	b.n	801044c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	89b9      	ldrh	r1, [r7, #12]
 8010450:	89ba      	ldrh	r2, [r7, #12]
 8010452:	2302      	movs	r3, #2
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	897b      	ldrh	r3, [r7, #10]
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	460b      	mov	r3, r1
 801045c:	6979      	ldr	r1, [r7, #20]
 801045e:	f7ff fe7d 	bl	801015c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010462:	687b      	ldr	r3, [r7, #4]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3718      	adds	r7, #24
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <pbuf_realloc+0x20>
 801047e:	4b3a      	ldr	r3, [pc, #232]	; (8010568 <pbuf_realloc+0xfc>)
 8010480:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010484:	4939      	ldr	r1, [pc, #228]	; (801056c <pbuf_realloc+0x100>)
 8010486:	483a      	ldr	r0, [pc, #232]	; (8010570 <pbuf_realloc+0x104>)
 8010488:	f00c fe28 	bl	801d0dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	891b      	ldrh	r3, [r3, #8]
 8010490:	887a      	ldrh	r2, [r7, #2]
 8010492:	429a      	cmp	r2, r3
 8010494:	d263      	bcs.n	801055e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	891a      	ldrh	r2, [r3, #8]
 801049a:	887b      	ldrh	r3, [r7, #2]
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80104a0:	887b      	ldrh	r3, [r7, #2]
 80104a2:	817b      	strh	r3, [r7, #10]
  q = p;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80104a8:	e018      	b.n	80104dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	895b      	ldrh	r3, [r3, #10]
 80104ae:	897a      	ldrh	r2, [r7, #10]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	891a      	ldrh	r2, [r3, #8]
 80104b8:	893b      	ldrh	r3, [r7, #8]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	b29a      	uxth	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d106      	bne.n	80104dc <pbuf_realloc+0x70>
 80104ce:	4b26      	ldr	r3, [pc, #152]	; (8010568 <pbuf_realloc+0xfc>)
 80104d0:	f240 12af 	movw	r2, #431	; 0x1af
 80104d4:	4927      	ldr	r1, [pc, #156]	; (8010574 <pbuf_realloc+0x108>)
 80104d6:	4826      	ldr	r0, [pc, #152]	; (8010570 <pbuf_realloc+0x104>)
 80104d8:	f00c fe00 	bl	801d0dc <iprintf>
  while (rem_len > q->len) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	895b      	ldrh	r3, [r3, #10]
 80104e0:	897a      	ldrh	r2, [r7, #10]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d8e1      	bhi.n	80104aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	7b1b      	ldrb	r3, [r3, #12]
 80104ea:	f003 030f 	and.w	r3, r3, #15
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d121      	bne.n	8010536 <pbuf_realloc+0xca>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	895b      	ldrh	r3, [r3, #10]
 80104f6:	897a      	ldrh	r2, [r7, #10]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d01c      	beq.n	8010536 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	7b5b      	ldrb	r3, [r3, #13]
 8010500:	f003 0302 	and.w	r3, r3, #2
 8010504:	2b00      	cmp	r3, #0
 8010506:	d116      	bne.n	8010536 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	b29a      	uxth	r2, r3
 8010512:	897b      	ldrh	r3, [r7, #10]
 8010514:	4413      	add	r3, r2
 8010516:	b29b      	uxth	r3, r3
 8010518:	4619      	mov	r1, r3
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7fe ffae 	bl	800f47c <mem_trim>
 8010520:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d106      	bne.n	8010536 <pbuf_realloc+0xca>
 8010528:	4b0f      	ldr	r3, [pc, #60]	; (8010568 <pbuf_realloc+0xfc>)
 801052a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801052e:	4912      	ldr	r1, [pc, #72]	; (8010578 <pbuf_realloc+0x10c>)
 8010530:	480f      	ldr	r0, [pc, #60]	; (8010570 <pbuf_realloc+0x104>)
 8010532:	f00c fdd3 	bl	801d0dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	897a      	ldrh	r2, [r7, #10]
 801053a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	895a      	ldrh	r2, [r3, #10]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d004      	beq.n	8010556 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4618      	mov	r0, r3
 8010552:	f000 f911 	bl	8010778 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2200      	movs	r2, #0
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	e000      	b.n	8010560 <pbuf_realloc+0xf4>
    return;
 801055e:	bf00      	nop

}
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	0801e5f8 	.word	0x0801e5f8
 801056c:	0801e710 	.word	0x0801e710
 8010570:	0801e658 	.word	0x0801e658
 8010574:	0801e728 	.word	0x0801e728
 8010578:	0801e740 	.word	0x0801e740

0801057c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b086      	sub	sp, #24
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	4613      	mov	r3, r2
 8010588:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d106      	bne.n	801059e <pbuf_add_header_impl+0x22>
 8010590:	4b2b      	ldr	r3, [pc, #172]	; (8010640 <pbuf_add_header_impl+0xc4>)
 8010592:	f240 12df 	movw	r2, #479	; 0x1df
 8010596:	492b      	ldr	r1, [pc, #172]	; (8010644 <pbuf_add_header_impl+0xc8>)
 8010598:	482b      	ldr	r0, [pc, #172]	; (8010648 <pbuf_add_header_impl+0xcc>)
 801059a:	f00c fd9f 	bl	801d0dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d003      	beq.n	80105ac <pbuf_add_header_impl+0x30>
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105aa:	d301      	bcc.n	80105b0 <pbuf_add_header_impl+0x34>
    return 1;
 80105ac:	2301      	movs	r3, #1
 80105ae:	e043      	b.n	8010638 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <pbuf_add_header_impl+0x3e>
    return 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	e03e      	b.n	8010638 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	891a      	ldrh	r2, [r3, #8]
 80105c2:	8a7b      	ldrh	r3, [r7, #18]
 80105c4:	4413      	add	r3, r2
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	8a7a      	ldrh	r2, [r7, #18]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d901      	bls.n	80105d2 <pbuf_add_header_impl+0x56>
    return 1;
 80105ce:	2301      	movs	r3, #1
 80105d0:	e032      	b.n	8010638 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	7b1b      	ldrb	r3, [r3, #12]
 80105d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80105d8:	8a3b      	ldrh	r3, [r7, #16]
 80105da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00c      	beq.n	80105fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	425b      	negs	r3, r3
 80105ea:	4413      	add	r3, r2
 80105ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	3310      	adds	r3, #16
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d20d      	bcs.n	8010614 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e01d      	b.n	8010638 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80105fc:	79fb      	ldrb	r3, [r7, #7]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d006      	beq.n	8010610 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	685a      	ldr	r2, [r3, #4]
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	425b      	negs	r3, r3
 801060a:	4413      	add	r3, r2
 801060c:	617b      	str	r3, [r7, #20]
 801060e:	e001      	b.n	8010614 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010610:	2301      	movs	r3, #1
 8010612:	e011      	b.n	8010638 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	895a      	ldrh	r2, [r3, #10]
 801061e:	8a7b      	ldrh	r3, [r7, #18]
 8010620:	4413      	add	r3, r2
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	891a      	ldrh	r2, [r3, #8]
 801062c:	8a7b      	ldrh	r3, [r7, #18]
 801062e:	4413      	add	r3, r2
 8010630:	b29a      	uxth	r2, r3
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	811a      	strh	r2, [r3, #8]


  return 0;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3718      	adds	r7, #24
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	0801e5f8 	.word	0x0801e5f8
 8010644:	0801e75c 	.word	0x0801e75c
 8010648:	0801e658 	.word	0x0801e658

0801064c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010656:	2200      	movs	r2, #0
 8010658:	6839      	ldr	r1, [r7, #0]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7ff ff8e 	bl	801057c <pbuf_add_header_impl>
 8010660:	4603      	mov	r3, r0
}
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
	...

0801066c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d106      	bne.n	801068a <pbuf_remove_header+0x1e>
 801067c:	4b20      	ldr	r3, [pc, #128]	; (8010700 <pbuf_remove_header+0x94>)
 801067e:	f240 224b 	movw	r2, #587	; 0x24b
 8010682:	4920      	ldr	r1, [pc, #128]	; (8010704 <pbuf_remove_header+0x98>)
 8010684:	4820      	ldr	r0, [pc, #128]	; (8010708 <pbuf_remove_header+0x9c>)
 8010686:	f00c fd29 	bl	801d0dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <pbuf_remove_header+0x2c>
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010696:	d301      	bcc.n	801069c <pbuf_remove_header+0x30>
    return 1;
 8010698:	2301      	movs	r3, #1
 801069a:	e02c      	b.n	80106f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <pbuf_remove_header+0x3a>
    return 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e027      	b.n	80106f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	895b      	ldrh	r3, [r3, #10]
 80106ae:	89fa      	ldrh	r2, [r7, #14]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d908      	bls.n	80106c6 <pbuf_remove_header+0x5a>
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <pbuf_remove_header+0x94>)
 80106b6:	f240 2255 	movw	r2, #597	; 0x255
 80106ba:	4914      	ldr	r1, [pc, #80]	; (801070c <pbuf_remove_header+0xa0>)
 80106bc:	4812      	ldr	r0, [pc, #72]	; (8010708 <pbuf_remove_header+0x9c>)
 80106be:	f00c fd0d 	bl	801d0dc <iprintf>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e017      	b.n	80106f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	441a      	add	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	895a      	ldrh	r2, [r3, #10]
 80106dc:	89fb      	ldrh	r3, [r7, #14]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	891a      	ldrh	r2, [r3, #8]
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	0801e5f8 	.word	0x0801e5f8
 8010704:	0801e75c 	.word	0x0801e75c
 8010708:	0801e658 	.word	0x0801e658
 801070c:	0801e768 	.word	0x0801e768

08010710 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	807b      	strh	r3, [r7, #2]
 801071c:	4613      	mov	r3, r2
 801071e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010724:	2b00      	cmp	r3, #0
 8010726:	da08      	bge.n	801073a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801072c:	425b      	negs	r3, r3
 801072e:	4619      	mov	r1, r3
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff ff9b 	bl	801066c <pbuf_remove_header>
 8010736:	4603      	mov	r3, r0
 8010738:	e007      	b.n	801074a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801073a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801073e:	787a      	ldrb	r2, [r7, #1]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ff1a 	bl	801057c <pbuf_add_header_impl>
 8010748:	4603      	mov	r3, r0
  }
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	460b      	mov	r3, r1
 801075c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801075e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010762:	2201      	movs	r2, #1
 8010764:	4619      	mov	r1, r3
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ffd2 	bl	8010710 <pbuf_header_impl>
 801076c:	4603      	mov	r3, r0
}
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d10b      	bne.n	801079e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <pbuf_free+0x22>
 801078c:	4b38      	ldr	r3, [pc, #224]	; (8010870 <pbuf_free+0xf8>)
 801078e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010792:	4938      	ldr	r1, [pc, #224]	; (8010874 <pbuf_free+0xfc>)
 8010794:	4838      	ldr	r0, [pc, #224]	; (8010878 <pbuf_free+0x100>)
 8010796:	f00c fca1 	bl	801d0dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801079a:	2300      	movs	r3, #0
 801079c:	e063      	b.n	8010866 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80107a2:	e05c      	b.n	801085e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	7b9b      	ldrb	r3, [r3, #14]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <pbuf_free+0x42>
 80107ac:	4b30      	ldr	r3, [pc, #192]	; (8010870 <pbuf_free+0xf8>)
 80107ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 80107b2:	4932      	ldr	r1, [pc, #200]	; (801087c <pbuf_free+0x104>)
 80107b4:	4830      	ldr	r0, [pc, #192]	; (8010878 <pbuf_free+0x100>)
 80107b6:	f00c fc91 	bl	801d0dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	7b9b      	ldrb	r3, [r3, #14]
 80107be:	3b01      	subs	r3, #1
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	739a      	strb	r2, [r3, #14]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	7b9b      	ldrb	r3, [r3, #14]
 80107ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80107cc:	7dbb      	ldrb	r3, [r7, #22]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d143      	bne.n	801085a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7b1b      	ldrb	r3, [r3, #12]
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7b5b      	ldrb	r3, [r3, #13]
 80107e6:	f003 0302 	and.w	r3, r3, #2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d011      	beq.n	8010812 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d106      	bne.n	8010808 <pbuf_free+0x90>
 80107fa:	4b1d      	ldr	r3, [pc, #116]	; (8010870 <pbuf_free+0xf8>)
 80107fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010800:	491f      	ldr	r1, [pc, #124]	; (8010880 <pbuf_free+0x108>)
 8010802:	481d      	ldr	r0, [pc, #116]	; (8010878 <pbuf_free+0x100>)
 8010804:	f00c fc6a 	bl	801d0dc <iprintf>
        pc->custom_free_function(p);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
 8010810:	e01d      	b.n	801084e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010812:	7bfb      	ldrb	r3, [r7, #15]
 8010814:	2b02      	cmp	r3, #2
 8010816:	d104      	bne.n	8010822 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	2008      	movs	r0, #8
 801081c:	f7ff f92a 	bl	800fa74 <memp_free>
 8010820:	e015      	b.n	801084e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d104      	bne.n	8010832 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010828:	6879      	ldr	r1, [r7, #4]
 801082a:	2007      	movs	r0, #7
 801082c:	f7ff f922 	bl	800fa74 <memp_free>
 8010830:	e00d      	b.n	801084e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010832:	7bfb      	ldrb	r3, [r7, #15]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <pbuf_free+0xc8>
          mem_free(p);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7fe fdb5 	bl	800f3a8 <mem_free>
 801083e:	e006      	b.n	801084e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010840:	4b0b      	ldr	r3, [pc, #44]	; (8010870 <pbuf_free+0xf8>)
 8010842:	f240 320f 	movw	r2, #783	; 0x30f
 8010846:	490f      	ldr	r1, [pc, #60]	; (8010884 <pbuf_free+0x10c>)
 8010848:	480b      	ldr	r0, [pc, #44]	; (8010878 <pbuf_free+0x100>)
 801084a:	f00c fc47 	bl	801d0dc <iprintf>
        }
      }
      count++;
 801084e:	7dfb      	ldrb	r3, [r7, #23]
 8010850:	3301      	adds	r3, #1
 8010852:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	607b      	str	r3, [r7, #4]
 8010858:	e001      	b.n	801085e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d19f      	bne.n	80107a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010864:	7dfb      	ldrb	r3, [r7, #23]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0801e5f8 	.word	0x0801e5f8
 8010874:	0801e75c 	.word	0x0801e75c
 8010878:	0801e658 	.word	0x0801e658
 801087c:	0801e788 	.word	0x0801e788
 8010880:	0801e7a0 	.word	0x0801e7a0
 8010884:	0801e7c4 	.word	0x0801e7c4

08010888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010894:	e005      	b.n	80108a2 <pbuf_clen+0x1a>
    ++len;
 8010896:	89fb      	ldrh	r3, [r7, #14]
 8010898:	3301      	adds	r3, #1
 801089a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1f6      	bne.n	8010896 <pbuf_clen+0xe>
  }
  return len;
 80108a8:	89fb      	ldrh	r3, [r7, #14]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3714      	adds	r7, #20
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
	...

080108b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d010      	beq.n	80108e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	7b9b      	ldrb	r3, [r3, #14]
 80108ca:	3301      	adds	r3, #1
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7b9b      	ldrb	r3, [r3, #14]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d106      	bne.n	80108e8 <pbuf_ref+0x30>
 80108da:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <pbuf_ref+0x38>)
 80108dc:	f240 3242 	movw	r2, #834	; 0x342
 80108e0:	4904      	ldr	r1, [pc, #16]	; (80108f4 <pbuf_ref+0x3c>)
 80108e2:	4805      	ldr	r0, [pc, #20]	; (80108f8 <pbuf_ref+0x40>)
 80108e4:	f00c fbfa 	bl	801d0dc <iprintf>
  }
}
 80108e8:	bf00      	nop
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	0801e5f8 	.word	0x0801e5f8
 80108f4:	0801e7d8 	.word	0x0801e7d8
 80108f8:	0801e658 	.word	0x0801e658

080108fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <pbuf_cat+0x16>
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d107      	bne.n	8010922 <pbuf_cat+0x26>
 8010912:	4b20      	ldr	r3, [pc, #128]	; (8010994 <pbuf_cat+0x98>)
 8010914:	f240 3259 	movw	r2, #857	; 0x359
 8010918:	491f      	ldr	r1, [pc, #124]	; (8010998 <pbuf_cat+0x9c>)
 801091a:	4820      	ldr	r0, [pc, #128]	; (801099c <pbuf_cat+0xa0>)
 801091c:	f00c fbde 	bl	801d0dc <iprintf>
 8010920:	e034      	b.n	801098c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	e00a      	b.n	801093e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	891a      	ldrh	r2, [r3, #8]
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	891b      	ldrh	r3, [r3, #8]
 8010930:	4413      	add	r3, r2
 8010932:	b29a      	uxth	r2, r3
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	60fb      	str	r3, [r7, #12]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1f0      	bne.n	8010928 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	891a      	ldrh	r2, [r3, #8]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	895b      	ldrh	r3, [r3, #10]
 801094e:	429a      	cmp	r2, r3
 8010950:	d006      	beq.n	8010960 <pbuf_cat+0x64>
 8010952:	4b10      	ldr	r3, [pc, #64]	; (8010994 <pbuf_cat+0x98>)
 8010954:	f240 3262 	movw	r2, #866	; 0x362
 8010958:	4911      	ldr	r1, [pc, #68]	; (80109a0 <pbuf_cat+0xa4>)
 801095a:	4810      	ldr	r0, [pc, #64]	; (801099c <pbuf_cat+0xa0>)
 801095c:	f00c fbbe 	bl	801d0dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d006      	beq.n	8010976 <pbuf_cat+0x7a>
 8010968:	4b0a      	ldr	r3, [pc, #40]	; (8010994 <pbuf_cat+0x98>)
 801096a:	f240 3263 	movw	r2, #867	; 0x363
 801096e:	490d      	ldr	r1, [pc, #52]	; (80109a4 <pbuf_cat+0xa8>)
 8010970:	480a      	ldr	r0, [pc, #40]	; (801099c <pbuf_cat+0xa0>)
 8010972:	f00c fbb3 	bl	801d0dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	891b      	ldrh	r3, [r3, #8]
 801097e:	4413      	add	r3, r2
 8010980:	b29a      	uxth	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	0801e5f8 	.word	0x0801e5f8
 8010998:	0801e7ec 	.word	0x0801e7ec
 801099c:	0801e658 	.word	0x0801e658
 80109a0:	0801e824 	.word	0x0801e824
 80109a4:	0801e854 	.word	0x0801e854

080109a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80109b2:	6839      	ldr	r1, [r7, #0]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff ffa1 	bl	80108fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80109ba:	6838      	ldr	r0, [r7, #0]
 80109bc:	f7ff ff7c 	bl	80108b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80109c0:	bf00      	nop
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80109d2:	2300      	movs	r3, #0
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	2300      	movs	r3, #0
 80109d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d008      	beq.n	80109f2 <pbuf_copy+0x2a>
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d005      	beq.n	80109f2 <pbuf_copy+0x2a>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	891a      	ldrh	r2, [r3, #8]
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	891b      	ldrh	r3, [r3, #8]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d209      	bcs.n	8010a06 <pbuf_copy+0x3e>
 80109f2:	4b57      	ldr	r3, [pc, #348]	; (8010b50 <pbuf_copy+0x188>)
 80109f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80109f8:	4956      	ldr	r1, [pc, #344]	; (8010b54 <pbuf_copy+0x18c>)
 80109fa:	4857      	ldr	r0, [pc, #348]	; (8010b58 <pbuf_copy+0x190>)
 80109fc:	f00c fb6e 	bl	801d0dc <iprintf>
 8010a00:	f06f 030f 	mvn.w	r3, #15
 8010a04:	e09f      	b.n	8010b46 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	895b      	ldrh	r3, [r3, #10]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	1ad2      	subs	r2, r2, r3
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	895b      	ldrh	r3, [r3, #10]
 8010a14:	4619      	mov	r1, r3
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	1acb      	subs	r3, r1, r3
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d306      	bcc.n	8010a2c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	895b      	ldrh	r3, [r3, #10]
 8010a22:	461a      	mov	r2, r3
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	1ad3      	subs	r3, r2, r3
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	e005      	b.n	8010a38 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	895b      	ldrh	r3, [r3, #10]
 8010a30:	461a      	mov	r2, r3
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	18d0      	adds	r0, r2, r3
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	4413      	add	r3, r2
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	f00c fc39 	bl	801d2c2 <memcpy>
    offset_to += len;
 8010a50:	697a      	ldr	r2, [r7, #20]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4413      	add	r3, r2
 8010a56:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010a58:	693a      	ldr	r2, [r7, #16]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	895b      	ldrh	r3, [r3, #10]
 8010a64:	461a      	mov	r2, r3
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d906      	bls.n	8010a7a <pbuf_copy+0xb2>
 8010a6c:	4b38      	ldr	r3, [pc, #224]	; (8010b50 <pbuf_copy+0x188>)
 8010a6e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010a72:	493a      	ldr	r1, [pc, #232]	; (8010b5c <pbuf_copy+0x194>)
 8010a74:	4838      	ldr	r0, [pc, #224]	; (8010b58 <pbuf_copy+0x190>)
 8010a76:	f00c fb31 	bl	801d0dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	895b      	ldrh	r3, [r3, #10]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d906      	bls.n	8010a94 <pbuf_copy+0xcc>
 8010a86:	4b32      	ldr	r3, [pc, #200]	; (8010b50 <pbuf_copy+0x188>)
 8010a88:	f240 32da 	movw	r2, #986	; 0x3da
 8010a8c:	4934      	ldr	r1, [pc, #208]	; (8010b60 <pbuf_copy+0x198>)
 8010a8e:	4832      	ldr	r0, [pc, #200]	; (8010b58 <pbuf_copy+0x190>)
 8010a90:	f00c fb24 	bl	801d0dc <iprintf>
    if (offset_from >= p_from->len) {
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	895b      	ldrh	r3, [r3, #10]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d304      	bcc.n	8010aaa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	895b      	ldrh	r3, [r3, #10]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d114      	bne.n	8010ae0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10c      	bne.n	8010ae0 <pbuf_copy+0x118>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d009      	beq.n	8010ae0 <pbuf_copy+0x118>
 8010acc:	4b20      	ldr	r3, [pc, #128]	; (8010b50 <pbuf_copy+0x188>)
 8010ace:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010ad2:	4924      	ldr	r1, [pc, #144]	; (8010b64 <pbuf_copy+0x19c>)
 8010ad4:	4820      	ldr	r0, [pc, #128]	; (8010b58 <pbuf_copy+0x190>)
 8010ad6:	f00c fb01 	bl	801d0dc <iprintf>
 8010ada:	f06f 030f 	mvn.w	r3, #15
 8010ade:	e032      	b.n	8010b46 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d013      	beq.n	8010b0e <pbuf_copy+0x146>
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	895a      	ldrh	r2, [r3, #10]
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	891b      	ldrh	r3, [r3, #8]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d10d      	bne.n	8010b0e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d009      	beq.n	8010b0e <pbuf_copy+0x146>
 8010afa:	4b15      	ldr	r3, [pc, #84]	; (8010b50 <pbuf_copy+0x188>)
 8010afc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010b00:	4919      	ldr	r1, [pc, #100]	; (8010b68 <pbuf_copy+0x1a0>)
 8010b02:	4815      	ldr	r0, [pc, #84]	; (8010b58 <pbuf_copy+0x190>)
 8010b04:	f00c faea 	bl	801d0dc <iprintf>
 8010b08:	f06f 0305 	mvn.w	r3, #5
 8010b0c:	e01b      	b.n	8010b46 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d013      	beq.n	8010b3c <pbuf_copy+0x174>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	895a      	ldrh	r2, [r3, #10]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	891b      	ldrh	r3, [r3, #8]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d10d      	bne.n	8010b3c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d009      	beq.n	8010b3c <pbuf_copy+0x174>
 8010b28:	4b09      	ldr	r3, [pc, #36]	; (8010b50 <pbuf_copy+0x188>)
 8010b2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010b2e:	490e      	ldr	r1, [pc, #56]	; (8010b68 <pbuf_copy+0x1a0>)
 8010b30:	4809      	ldr	r0, [pc, #36]	; (8010b58 <pbuf_copy+0x190>)
 8010b32:	f00c fad3 	bl	801d0dc <iprintf>
 8010b36:	f06f 0305 	mvn.w	r3, #5
 8010b3a:	e004      	b.n	8010b46 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f47f af61 	bne.w	8010a06 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3718      	adds	r7, #24
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	0801e5f8 	.word	0x0801e5f8
 8010b54:	0801e8a0 	.word	0x0801e8a0
 8010b58:	0801e658 	.word	0x0801e658
 8010b5c:	0801e8d0 	.word	0x0801e8d0
 8010b60:	0801e8e8 	.word	0x0801e8e8
 8010b64:	0801e904 	.word	0x0801e904
 8010b68:	0801e914 	.word	0x0801e914

08010b6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b088      	sub	sp, #32
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	4611      	mov	r1, r2
 8010b78:	461a      	mov	r2, r3
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	80fb      	strh	r3, [r7, #6]
 8010b7e:	4613      	mov	r3, r2
 8010b80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d108      	bne.n	8010ba2 <pbuf_copy_partial+0x36>
 8010b90:	4b2b      	ldr	r3, [pc, #172]	; (8010c40 <pbuf_copy_partial+0xd4>)
 8010b92:	f240 420a 	movw	r2, #1034	; 0x40a
 8010b96:	492b      	ldr	r1, [pc, #172]	; (8010c44 <pbuf_copy_partial+0xd8>)
 8010b98:	482b      	ldr	r0, [pc, #172]	; (8010c48 <pbuf_copy_partial+0xdc>)
 8010b9a:	f00c fa9f 	bl	801d0dc <iprintf>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e04a      	b.n	8010c38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d108      	bne.n	8010bba <pbuf_copy_partial+0x4e>
 8010ba8:	4b25      	ldr	r3, [pc, #148]	; (8010c40 <pbuf_copy_partial+0xd4>)
 8010baa:	f240 420b 	movw	r2, #1035	; 0x40b
 8010bae:	4927      	ldr	r1, [pc, #156]	; (8010c4c <pbuf_copy_partial+0xe0>)
 8010bb0:	4825      	ldr	r0, [pc, #148]	; (8010c48 <pbuf_copy_partial+0xdc>)
 8010bb2:	f00c fa93 	bl	801d0dc <iprintf>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e03e      	b.n	8010c38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	61fb      	str	r3, [r7, #28]
 8010bbe:	e034      	b.n	8010c2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010bc0:	88bb      	ldrh	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00a      	beq.n	8010bdc <pbuf_copy_partial+0x70>
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	895b      	ldrh	r3, [r3, #10]
 8010bca:	88ba      	ldrh	r2, [r7, #4]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d305      	bcc.n	8010bdc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	895b      	ldrh	r3, [r3, #10]
 8010bd4:	88ba      	ldrh	r2, [r7, #4]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	80bb      	strh	r3, [r7, #4]
 8010bda:	e023      	b.n	8010c24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	895a      	ldrh	r2, [r3, #10]
 8010be0:	88bb      	ldrh	r3, [r7, #4]
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010be6:	8b3a      	ldrh	r2, [r7, #24]
 8010be8:	88fb      	ldrh	r3, [r7, #6]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d901      	bls.n	8010bf2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010bf2:	8b7b      	ldrh	r3, [r7, #26]
 8010bf4:	68ba      	ldr	r2, [r7, #8]
 8010bf6:	18d0      	adds	r0, r2, r3
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	685a      	ldr	r2, [r3, #4]
 8010bfc:	88bb      	ldrh	r3, [r7, #4]
 8010bfe:	4413      	add	r3, r2
 8010c00:	8b3a      	ldrh	r2, [r7, #24]
 8010c02:	4619      	mov	r1, r3
 8010c04:	f00c fb5d 	bl	801d2c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010c08:	8afa      	ldrh	r2, [r7, #22]
 8010c0a:	8b3b      	ldrh	r3, [r7, #24]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010c10:	8b7a      	ldrh	r2, [r7, #26]
 8010c12:	8b3b      	ldrh	r3, [r7, #24]
 8010c14:	4413      	add	r3, r2
 8010c16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010c18:	88fa      	ldrh	r2, [r7, #6]
 8010c1a:	8b3b      	ldrh	r3, [r7, #24]
 8010c1c:	1ad3      	subs	r3, r2, r3
 8010c1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	61fb      	str	r3, [r7, #28]
 8010c2a:	88fb      	ldrh	r3, [r7, #6]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <pbuf_copy_partial+0xca>
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1c4      	bne.n	8010bc0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010c36:	8afb      	ldrh	r3, [r7, #22]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3720      	adds	r7, #32
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	0801e5f8 	.word	0x0801e5f8
 8010c44:	0801e940 	.word	0x0801e940
 8010c48:	0801e658 	.word	0x0801e658
 8010c4c:	0801e960 	.word	0x0801e960

08010c50 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b087      	sub	sp, #28
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8010c5e:	897b      	ldrh	r3, [r7, #10]
 8010c60:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8010c66:	e007      	b.n	8010c78 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	895b      	ldrh	r3, [r3, #10]
 8010c6c:	8afa      	ldrh	r2, [r7, #22]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d004      	beq.n	8010c88 <pbuf_skip_const+0x38>
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	895b      	ldrh	r3, [r3, #10]
 8010c82:	8afa      	ldrh	r2, [r7, #22]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d2ef      	bcs.n	8010c68 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d002      	beq.n	8010c94 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	8afa      	ldrh	r2, [r7, #22]
 8010c92:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8010c94:	693b      	ldr	r3, [r7, #16]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	371c      	adds	r7, #28
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr

08010ca2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b086      	sub	sp, #24
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	60f8      	str	r0, [r7, #12]
 8010caa:	460b      	mov	r3, r1
 8010cac:	607a      	str	r2, [r7, #4]
 8010cae:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8010cb0:	897b      	ldrh	r3, [r7, #10]
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f7ff ffca 	bl	8010c50 <pbuf_skip_const>
 8010cbc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8010cbe:	697b      	ldr	r3, [r7, #20]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b088      	sub	sp, #32
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8010cd6:	88fb      	ldrh	r3, [r7, #6]
 8010cd8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d109      	bne.n	8010cf8 <pbuf_take+0x30>
 8010ce4:	4b3a      	ldr	r3, [pc, #232]	; (8010dd0 <pbuf_take+0x108>)
 8010ce6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010cea:	493a      	ldr	r1, [pc, #232]	; (8010dd4 <pbuf_take+0x10c>)
 8010cec:	483a      	ldr	r0, [pc, #232]	; (8010dd8 <pbuf_take+0x110>)
 8010cee:	f00c f9f5 	bl	801d0dc <iprintf>
 8010cf2:	f06f 030f 	mvn.w	r3, #15
 8010cf6:	e067      	b.n	8010dc8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d109      	bne.n	8010d12 <pbuf_take+0x4a>
 8010cfe:	4b34      	ldr	r3, [pc, #208]	; (8010dd0 <pbuf_take+0x108>)
 8010d00:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010d04:	4935      	ldr	r1, [pc, #212]	; (8010ddc <pbuf_take+0x114>)
 8010d06:	4834      	ldr	r0, [pc, #208]	; (8010dd8 <pbuf_take+0x110>)
 8010d08:	f00c f9e8 	bl	801d0dc <iprintf>
 8010d0c:	f06f 030f 	mvn.w	r3, #15
 8010d10:	e05a      	b.n	8010dc8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	891b      	ldrh	r3, [r3, #8]
 8010d16:	88fa      	ldrh	r2, [r7, #6]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d909      	bls.n	8010d30 <pbuf_take+0x68>
 8010d1c:	4b2c      	ldr	r3, [pc, #176]	; (8010dd0 <pbuf_take+0x108>)
 8010d1e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8010d22:	492f      	ldr	r1, [pc, #188]	; (8010de0 <pbuf_take+0x118>)
 8010d24:	482c      	ldr	r0, [pc, #176]	; (8010dd8 <pbuf_take+0x110>)
 8010d26:	f00c f9d9 	bl	801d0dc <iprintf>
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2e:	e04b      	b.n	8010dc8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d007      	beq.n	8010d46 <pbuf_take+0x7e>
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d004      	beq.n	8010d46 <pbuf_take+0x7e>
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	891b      	ldrh	r3, [r3, #8]
 8010d40:	88fa      	ldrh	r2, [r7, #6]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d902      	bls.n	8010d4c <pbuf_take+0x84>
    return ERR_ARG;
 8010d46:	f06f 030f 	mvn.w	r3, #15
 8010d4a:	e03d      	b.n	8010dc8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	61fb      	str	r3, [r7, #28]
 8010d50:	e028      	b.n	8010da4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d106      	bne.n	8010d66 <pbuf_take+0x9e>
 8010d58:	4b1d      	ldr	r3, [pc, #116]	; (8010dd0 <pbuf_take+0x108>)
 8010d5a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010d5e:	4921      	ldr	r1, [pc, #132]	; (8010de4 <pbuf_take+0x11c>)
 8010d60:	481d      	ldr	r0, [pc, #116]	; (8010dd8 <pbuf_take+0x110>)
 8010d62:	f00c f9bb 	bl	801d0dc <iprintf>
    buf_copy_len = total_copy_len;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	895b      	ldrh	r3, [r3, #10]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d902      	bls.n	8010d7c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	895b      	ldrh	r3, [r3, #10]
 8010d7a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	6858      	ldr	r0, [r3, #4]
 8010d80:	68ba      	ldr	r2, [r7, #8]
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	4413      	add	r3, r2
 8010d86:	69ba      	ldr	r2, [r7, #24]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	f00c fa9a 	bl	801d2c2 <memcpy>
    total_copy_len -= buf_copy_len;
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8010d96:	693a      	ldr	r2, [r7, #16]
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	61fb      	str	r3, [r7, #28]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d1d3      	bne.n	8010d52 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d103      	bne.n	8010db8 <pbuf_take+0xf0>
 8010db0:	88fb      	ldrh	r3, [r7, #6]
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d006      	beq.n	8010dc6 <pbuf_take+0xfe>
 8010db8:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <pbuf_take+0x108>)
 8010dba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010dbe:	490a      	ldr	r1, [pc, #40]	; (8010de8 <pbuf_take+0x120>)
 8010dc0:	4805      	ldr	r0, [pc, #20]	; (8010dd8 <pbuf_take+0x110>)
 8010dc2:	f00c f98b 	bl	801d0dc <iprintf>
  return ERR_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3720      	adds	r7, #32
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	0801e5f8 	.word	0x0801e5f8
 8010dd4:	0801e9d0 	.word	0x0801e9d0
 8010dd8:	0801e658 	.word	0x0801e658
 8010ddc:	0801e9e8 	.word	0x0801e9e8
 8010de0:	0801ea04 	.word	0x0801ea04
 8010de4:	0801ea24 	.word	0x0801ea24
 8010de8:	0801ea3c 	.word	0x0801ea3c

08010dec <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b088      	sub	sp, #32
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	4611      	mov	r1, r2
 8010df8:	461a      	mov	r2, r3
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	80fb      	strh	r3, [r7, #6]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8010e02:	f107 0210 	add.w	r2, r7, #16
 8010e06:	88bb      	ldrh	r3, [r7, #4]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f7ff ff49 	bl	8010ca2 <pbuf_skip>
 8010e10:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d047      	beq.n	8010ea8 <pbuf_take_at+0xbc>
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	891b      	ldrh	r3, [r3, #8]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	8a3b      	ldrh	r3, [r7, #16]
 8010e20:	4619      	mov	r1, r3
 8010e22:	88fb      	ldrh	r3, [r7, #6]
 8010e24:	440b      	add	r3, r1
 8010e26:	429a      	cmp	r2, r3
 8010e28:	db3e      	blt.n	8010ea8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8010e2a:	88fb      	ldrh	r3, [r7, #6]
 8010e2c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	895a      	ldrh	r2, [r3, #10]
 8010e36:	8a3b      	ldrh	r3, [r7, #16]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d806      	bhi.n	8010e4a <pbuf_take_at+0x5e>
 8010e3c:	4b1d      	ldr	r3, [pc, #116]	; (8010eb4 <pbuf_take_at+0xc8>)
 8010e3e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010e42:	491d      	ldr	r1, [pc, #116]	; (8010eb8 <pbuf_take_at+0xcc>)
 8010e44:	481d      	ldr	r0, [pc, #116]	; (8010ebc <pbuf_take_at+0xd0>)
 8010e46:	f00c f949 	bl	801d0dc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	895b      	ldrh	r3, [r3, #10]
 8010e4e:	461a      	mov	r2, r3
 8010e50:	8a3b      	ldrh	r3, [r7, #16]
 8010e52:	1ad2      	subs	r2, r2, r3
 8010e54:	88fb      	ldrh	r3, [r7, #6]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	da05      	bge.n	8010e66 <pbuf_take_at+0x7a>
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	895a      	ldrh	r2, [r3, #10]
 8010e5e:	8a3b      	ldrh	r3, [r7, #16]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	e000      	b.n	8010e68 <pbuf_take_at+0x7c>
 8010e66:	88fb      	ldrh	r3, [r7, #6]
 8010e68:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	8a3a      	ldrh	r2, [r7, #16]
 8010e70:	4413      	add	r3, r2
 8010e72:	8a7a      	ldrh	r2, [r7, #18]
 8010e74:	68b9      	ldr	r1, [r7, #8]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f00c fa23 	bl	801d2c2 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8010e7c:	8b7a      	ldrh	r2, [r7, #26]
 8010e7e:	8a7b      	ldrh	r3, [r7, #18]
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8010e84:	8a7b      	ldrh	r3, [r7, #18]
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	4413      	add	r3, r2
 8010e8a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8010e8c:	8b7b      	ldrh	r3, [r7, #26]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d008      	beq.n	8010ea4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	8b7a      	ldrh	r2, [r7, #26]
 8010e98:	6979      	ldr	r1, [r7, #20]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff ff14 	bl	8010cc8 <pbuf_take>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	e003      	b.n	8010eac <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e001      	b.n	8010eac <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8010ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3720      	adds	r7, #32
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	0801e5f8 	.word	0x0801e5f8
 8010eb8:	0801ea54 	.word	0x0801ea54
 8010ebc:	0801e658 	.word	0x0801e658

08010ec0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	603a      	str	r2, [r7, #0]
 8010eca:	71fb      	strb	r3, [r7, #7]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	8919      	ldrh	r1, [r3, #8]
 8010ed4:	88ba      	ldrh	r2, [r7, #4]
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff f969 	bl	80101b0 <pbuf_alloc>
 8010ede:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <pbuf_clone+0x2a>
    return NULL;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e011      	b.n	8010f0e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010eea:	6839      	ldr	r1, [r7, #0]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f7ff fd6b 	bl	80109c8 <pbuf_copy>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010ef6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d006      	beq.n	8010f0c <pbuf_clone+0x4c>
 8010efe:	4b06      	ldr	r3, [pc, #24]	; (8010f18 <pbuf_clone+0x58>)
 8010f00:	f240 5224 	movw	r2, #1316	; 0x524
 8010f04:	4905      	ldr	r1, [pc, #20]	; (8010f1c <pbuf_clone+0x5c>)
 8010f06:	4806      	ldr	r0, [pc, #24]	; (8010f20 <pbuf_clone+0x60>)
 8010f08:	f00c f8e8 	bl	801d0dc <iprintf>
  return q;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	0801e5f8 	.word	0x0801e5f8
 8010f1c:	0801ea6c 	.word	0x0801ea6c
 8010f20:	0801e658 	.word	0x0801e658

08010f24 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	807b      	strh	r3, [r7, #2]
 8010f30:	4613      	mov	r3, r2
 8010f32:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8010f34:	f107 020a 	add.w	r2, r7, #10
 8010f38:	887b      	ldrh	r3, [r7, #2]
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7ff feb0 	bl	8010ca2 <pbuf_skip>
 8010f42:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <pbuf_put_at+0x3c>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	895a      	ldrh	r2, [r3, #10]
 8010f4e:	897b      	ldrh	r3, [r7, #10]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d905      	bls.n	8010f60 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	897a      	ldrh	r2, [r7, #10]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	787a      	ldrb	r2, [r7, #1]
 8010f5e:	701a      	strb	r2, [r3, #0]
  }
}
 8010f60:	bf00      	nop
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f6c:	f00b ff2a 	bl	801cdc4 <rand>
 8010f70:	4603      	mov	r3, r0
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	4b01      	ldr	r3, [pc, #4]	; (8010f88 <tcp_init+0x20>)
 8010f82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010f84:	bf00      	nop
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	2000012c 	.word	0x2000012c

08010f8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	7d1b      	ldrb	r3, [r3, #20]
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	d105      	bne.n	8010fa8 <tcp_free+0x1c>
 8010f9c:	4b06      	ldr	r3, [pc, #24]	; (8010fb8 <tcp_free+0x2c>)
 8010f9e:	22d4      	movs	r2, #212	; 0xd4
 8010fa0:	4906      	ldr	r1, [pc, #24]	; (8010fbc <tcp_free+0x30>)
 8010fa2:	4807      	ldr	r0, [pc, #28]	; (8010fc0 <tcp_free+0x34>)
 8010fa4:	f00c f89a 	bl	801d0dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010fa8:	6879      	ldr	r1, [r7, #4]
 8010faa:	2001      	movs	r0, #1
 8010fac:	f7fe fd62 	bl	800fa74 <memp_free>
}
 8010fb0:	bf00      	nop
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	0801eaf8 	.word	0x0801eaf8
 8010fbc:	0801eb28 	.word	0x0801eb28
 8010fc0:	0801eb3c 	.word	0x0801eb3c

08010fc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d105      	bne.n	8010fe0 <tcp_free_listen+0x1c>
 8010fd4:	4b06      	ldr	r3, [pc, #24]	; (8010ff0 <tcp_free_listen+0x2c>)
 8010fd6:	22df      	movs	r2, #223	; 0xdf
 8010fd8:	4906      	ldr	r1, [pc, #24]	; (8010ff4 <tcp_free_listen+0x30>)
 8010fda:	4807      	ldr	r0, [pc, #28]	; (8010ff8 <tcp_free_listen+0x34>)
 8010fdc:	f00c f87e 	bl	801d0dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010fe0:	6879      	ldr	r1, [r7, #4]
 8010fe2:	2002      	movs	r0, #2
 8010fe4:	f7fe fd46 	bl	800fa74 <memp_free>
}
 8010fe8:	bf00      	nop
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	0801eaf8 	.word	0x0801eaf8
 8010ff4:	0801eb64 	.word	0x0801eb64
 8010ff8:	0801eb3c 	.word	0x0801eb3c

08010ffc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011000:	f001 f800 	bl	8012004 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011004:	4b07      	ldr	r3, [pc, #28]	; (8011024 <tcp_tmr+0x28>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	3301      	adds	r3, #1
 801100a:	b2da      	uxtb	r2, r3
 801100c:	4b05      	ldr	r3, [pc, #20]	; (8011024 <tcp_tmr+0x28>)
 801100e:	701a      	strb	r2, [r3, #0]
 8011010:	4b04      	ldr	r3, [pc, #16]	; (8011024 <tcp_tmr+0x28>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	2b00      	cmp	r3, #0
 801101a:	d001      	beq.n	8011020 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801101c:	f000 fcb2 	bl	8011984 <tcp_slowtmr>
  }
}
 8011020:	bf00      	nop
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20008681 	.word	0x20008681

08011028 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d105      	bne.n	8011044 <tcp_remove_listener+0x1c>
 8011038:	4b0d      	ldr	r3, [pc, #52]	; (8011070 <tcp_remove_listener+0x48>)
 801103a:	22ff      	movs	r2, #255	; 0xff
 801103c:	490d      	ldr	r1, [pc, #52]	; (8011074 <tcp_remove_listener+0x4c>)
 801103e:	480e      	ldr	r0, [pc, #56]	; (8011078 <tcp_remove_listener+0x50>)
 8011040:	f00c f84c 	bl	801d0dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	e00a      	b.n	8011060 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	429a      	cmp	r2, r3
 8011052:	d102      	bne.n	801105a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2200      	movs	r2, #0
 8011058:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	60fb      	str	r3, [r7, #12]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f1      	bne.n	801104a <tcp_remove_listener+0x22>
    }
  }
}
 8011066:	bf00      	nop
 8011068:	bf00      	nop
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	0801eaf8 	.word	0x0801eaf8
 8011074:	0801eb80 	.word	0x0801eb80
 8011078:	0801eb3c 	.word	0x0801eb3c

0801107c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_listen_closed+0x1c>
 801108a:	4b14      	ldr	r3, [pc, #80]	; (80110dc <tcp_listen_closed+0x60>)
 801108c:	f240 1211 	movw	r2, #273	; 0x111
 8011090:	4913      	ldr	r1, [pc, #76]	; (80110e0 <tcp_listen_closed+0x64>)
 8011092:	4814      	ldr	r0, [pc, #80]	; (80110e4 <tcp_listen_closed+0x68>)
 8011094:	f00c f822 	bl	801d0dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	7d1b      	ldrb	r3, [r3, #20]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d006      	beq.n	80110ae <tcp_listen_closed+0x32>
 80110a0:	4b0e      	ldr	r3, [pc, #56]	; (80110dc <tcp_listen_closed+0x60>)
 80110a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80110a6:	4910      	ldr	r1, [pc, #64]	; (80110e8 <tcp_listen_closed+0x6c>)
 80110a8:	480e      	ldr	r0, [pc, #56]	; (80110e4 <tcp_listen_closed+0x68>)
 80110aa:	f00c f817 	bl	801d0dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80110ae:	2301      	movs	r3, #1
 80110b0:	60fb      	str	r3, [r7, #12]
 80110b2:	e00b      	b.n	80110cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80110b4:	4a0d      	ldr	r2, [pc, #52]	; (80110ec <tcp_listen_closed+0x70>)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6879      	ldr	r1, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff ffb1 	bl	8011028 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b03      	cmp	r3, #3
 80110d0:	d9f0      	bls.n	80110b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80110d2:	bf00      	nop
 80110d4:	bf00      	nop
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	0801eaf8 	.word	0x0801eaf8
 80110e0:	0801eba8 	.word	0x0801eba8
 80110e4:	0801eb3c 	.word	0x0801eb3c
 80110e8:	0801ebb4 	.word	0x0801ebb4
 80110ec:	08020f1c 	.word	0x08020f1c

080110f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80110f0:	b5b0      	push	{r4, r5, r7, lr}
 80110f2:	b088      	sub	sp, #32
 80110f4:	af04      	add	r7, sp, #16
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	460b      	mov	r3, r1
 80110fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d106      	bne.n	8011110 <tcp_close_shutdown+0x20>
 8011102:	4b63      	ldr	r3, [pc, #396]	; (8011290 <tcp_close_shutdown+0x1a0>)
 8011104:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011108:	4962      	ldr	r1, [pc, #392]	; (8011294 <tcp_close_shutdown+0x1a4>)
 801110a:	4863      	ldr	r0, [pc, #396]	; (8011298 <tcp_close_shutdown+0x1a8>)
 801110c:	f00b ffe6 	bl	801d0dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d066      	beq.n	80111e4 <tcp_close_shutdown+0xf4>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7d1b      	ldrb	r3, [r3, #20]
 801111a:	2b04      	cmp	r3, #4
 801111c:	d003      	beq.n	8011126 <tcp_close_shutdown+0x36>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	2b07      	cmp	r3, #7
 8011124:	d15e      	bne.n	80111e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801112a:	2b00      	cmp	r3, #0
 801112c:	d104      	bne.n	8011138 <tcp_close_shutdown+0x48>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011136:	d055      	beq.n	80111e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	8b5b      	ldrh	r3, [r3, #26]
 801113c:	f003 0310 	and.w	r3, r3, #16
 8011140:	2b00      	cmp	r3, #0
 8011142:	d106      	bne.n	8011152 <tcp_close_shutdown+0x62>
 8011144:	4b52      	ldr	r3, [pc, #328]	; (8011290 <tcp_close_shutdown+0x1a0>)
 8011146:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801114a:	4954      	ldr	r1, [pc, #336]	; (801129c <tcp_close_shutdown+0x1ac>)
 801114c:	4852      	ldr	r0, [pc, #328]	; (8011298 <tcp_close_shutdown+0x1a8>)
 801114e:	f00b ffc5 	bl	801d0dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801115a:	687d      	ldr	r5, [r7, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	3304      	adds	r3, #4
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	8ad2      	ldrh	r2, [r2, #22]
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	8b09      	ldrh	r1, [r1, #24]
 8011168:	9102      	str	r1, [sp, #8]
 801116a:	9201      	str	r2, [sp, #4]
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	462b      	mov	r3, r5
 8011170:	4622      	mov	r2, r4
 8011172:	4601      	mov	r1, r0
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f005 fcf7 	bl	8016b68 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f001 fad4 	bl	8012728 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011180:	4b47      	ldr	r3, [pc, #284]	; (80112a0 <tcp_close_shutdown+0x1b0>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d105      	bne.n	8011196 <tcp_close_shutdown+0xa6>
 801118a:	4b45      	ldr	r3, [pc, #276]	; (80112a0 <tcp_close_shutdown+0x1b0>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	4a43      	ldr	r2, [pc, #268]	; (80112a0 <tcp_close_shutdown+0x1b0>)
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	e013      	b.n	80111be <tcp_close_shutdown+0xce>
 8011196:	4b42      	ldr	r3, [pc, #264]	; (80112a0 <tcp_close_shutdown+0x1b0>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	60fb      	str	r3, [r7, #12]
 801119c:	e00c      	b.n	80111b8 <tcp_close_shutdown+0xc8>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d104      	bne.n	80111b2 <tcp_close_shutdown+0xc2>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	60da      	str	r2, [r3, #12]
 80111b0:	e005      	b.n	80111be <tcp_close_shutdown+0xce>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	60fb      	str	r3, [r7, #12]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1ef      	bne.n	801119e <tcp_close_shutdown+0xae>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	60da      	str	r2, [r3, #12]
 80111c4:	4b37      	ldr	r3, [pc, #220]	; (80112a4 <tcp_close_shutdown+0x1b4>)
 80111c6:	2201      	movs	r2, #1
 80111c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80111ca:	4b37      	ldr	r3, [pc, #220]	; (80112a8 <tcp_close_shutdown+0x1b8>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d102      	bne.n	80111da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80111d4:	f003 ff6c 	bl	80150b0 <tcp_trigger_input_pcb_close>
 80111d8:	e002      	b.n	80111e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7ff fed6 	bl	8010f8c <tcp_free>
      }
      return ERR_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	e050      	b.n	8011286 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	7d1b      	ldrb	r3, [r3, #20]
 80111e8:	2b02      	cmp	r3, #2
 80111ea:	d03b      	beq.n	8011264 <tcp_close_shutdown+0x174>
 80111ec:	2b02      	cmp	r3, #2
 80111ee:	dc44      	bgt.n	801127a <tcp_close_shutdown+0x18a>
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <tcp_close_shutdown+0x10a>
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d02a      	beq.n	801124e <tcp_close_shutdown+0x15e>
 80111f8:	e03f      	b.n	801127a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	8adb      	ldrh	r3, [r3, #22]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d021      	beq.n	8011246 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011202:	4b2a      	ldr	r3, [pc, #168]	; (80112ac <tcp_close_shutdown+0x1bc>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	429a      	cmp	r2, r3
 801120a:	d105      	bne.n	8011218 <tcp_close_shutdown+0x128>
 801120c:	4b27      	ldr	r3, [pc, #156]	; (80112ac <tcp_close_shutdown+0x1bc>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	4a26      	ldr	r2, [pc, #152]	; (80112ac <tcp_close_shutdown+0x1bc>)
 8011214:	6013      	str	r3, [r2, #0]
 8011216:	e013      	b.n	8011240 <tcp_close_shutdown+0x150>
 8011218:	4b24      	ldr	r3, [pc, #144]	; (80112ac <tcp_close_shutdown+0x1bc>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60bb      	str	r3, [r7, #8]
 801121e:	e00c      	b.n	801123a <tcp_close_shutdown+0x14a>
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	429a      	cmp	r2, r3
 8011228:	d104      	bne.n	8011234 <tcp_close_shutdown+0x144>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68da      	ldr	r2, [r3, #12]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	60da      	str	r2, [r3, #12]
 8011232:	e005      	b.n	8011240 <tcp_close_shutdown+0x150>
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	60bb      	str	r3, [r7, #8]
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1ef      	bne.n	8011220 <tcp_close_shutdown+0x130>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2200      	movs	r2, #0
 8011244:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f7ff fea0 	bl	8010f8c <tcp_free>
      break;
 801124c:	e01a      	b.n	8011284 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff ff14 	bl	801107c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	4816      	ldr	r0, [pc, #88]	; (80112b0 <tcp_close_shutdown+0x1c0>)
 8011258:	f001 fab6 	bl	80127c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7ff feb1 	bl	8010fc4 <tcp_free_listen>
      break;
 8011262:	e00f      	b.n	8011284 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011264:	6879      	ldr	r1, [r7, #4]
 8011266:	480e      	ldr	r0, [pc, #56]	; (80112a0 <tcp_close_shutdown+0x1b0>)
 8011268:	f001 faae 	bl	80127c8 <tcp_pcb_remove>
 801126c:	4b0d      	ldr	r3, [pc, #52]	; (80112a4 <tcp_close_shutdown+0x1b4>)
 801126e:	2201      	movs	r2, #1
 8011270:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7ff fe8a 	bl	8010f8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011278:	e004      	b.n	8011284 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 f81a 	bl	80112b4 <tcp_close_shutdown_fin>
 8011280:	4603      	mov	r3, r0
 8011282:	e000      	b.n	8011286 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bdb0      	pop	{r4, r5, r7, pc}
 801128e:	bf00      	nop
 8011290:	0801eaf8 	.word	0x0801eaf8
 8011294:	0801ebcc 	.word	0x0801ebcc
 8011298:	0801eb3c 	.word	0x0801eb3c
 801129c:	0801ebec 	.word	0x0801ebec
 80112a0:	20008678 	.word	0x20008678
 80112a4:	20008680 	.word	0x20008680
 80112a8:	200086b8 	.word	0x200086b8
 80112ac:	20008670 	.word	0x20008670
 80112b0:	20008674 	.word	0x20008674

080112b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d106      	bne.n	80112d0 <tcp_close_shutdown_fin+0x1c>
 80112c2:	4b2e      	ldr	r3, [pc, #184]	; (801137c <tcp_close_shutdown_fin+0xc8>)
 80112c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80112c8:	492d      	ldr	r1, [pc, #180]	; (8011380 <tcp_close_shutdown_fin+0xcc>)
 80112ca:	482e      	ldr	r0, [pc, #184]	; (8011384 <tcp_close_shutdown_fin+0xd0>)
 80112cc:	f00b ff06 	bl	801d0dc <iprintf>

  switch (pcb->state) {
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7d1b      	ldrb	r3, [r3, #20]
 80112d4:	2b07      	cmp	r3, #7
 80112d6:	d020      	beq.n	801131a <tcp_close_shutdown_fin+0x66>
 80112d8:	2b07      	cmp	r3, #7
 80112da:	dc2b      	bgt.n	8011334 <tcp_close_shutdown_fin+0x80>
 80112dc:	2b03      	cmp	r3, #3
 80112de:	d002      	beq.n	80112e6 <tcp_close_shutdown_fin+0x32>
 80112e0:	2b04      	cmp	r3, #4
 80112e2:	d00d      	beq.n	8011300 <tcp_close_shutdown_fin+0x4c>
 80112e4:	e026      	b.n	8011334 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f004 fd4c 	bl	8015d84 <tcp_send_fin>
 80112ec:	4603      	mov	r3, r0
 80112ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d11f      	bne.n	8011338 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2205      	movs	r2, #5
 80112fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112fe:	e01b      	b.n	8011338 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f004 fd3f 	bl	8015d84 <tcp_send_fin>
 8011306:	4603      	mov	r3, r0
 8011308:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d114      	bne.n	801133c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2205      	movs	r2, #5
 8011316:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011318:	e010      	b.n	801133c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f004 fd32 	bl	8015d84 <tcp_send_fin>
 8011320:	4603      	mov	r3, r0
 8011322:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d109      	bne.n	8011340 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2209      	movs	r2, #9
 8011330:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011332:	e005      	b.n	8011340 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011334:	2300      	movs	r3, #0
 8011336:	e01c      	b.n	8011372 <tcp_close_shutdown_fin+0xbe>
      break;
 8011338:	bf00      	nop
 801133a:	e002      	b.n	8011342 <tcp_close_shutdown_fin+0x8e>
      break;
 801133c:	bf00      	nop
 801133e:	e000      	b.n	8011342 <tcp_close_shutdown_fin+0x8e>
      break;
 8011340:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d103      	bne.n	8011352 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f004 fe58 	bl	8016000 <tcp_output>
 8011350:	e00d      	b.n	801136e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801135a:	d108      	bne.n	801136e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	8b5b      	ldrh	r3, [r3, #26]
 8011360:	f043 0308 	orr.w	r3, r3, #8
 8011364:	b29a      	uxth	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801136a:	2300      	movs	r3, #0
 801136c:	e001      	b.n	8011372 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011372:	4618      	mov	r0, r3
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	0801eaf8 	.word	0x0801eaf8
 8011380:	0801eba8 	.word	0x0801eba8
 8011384:	0801eb3c 	.word	0x0801eb3c

08011388 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d109      	bne.n	80113aa <tcp_close+0x22>
 8011396:	4b0f      	ldr	r3, [pc, #60]	; (80113d4 <tcp_close+0x4c>)
 8011398:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801139c:	490e      	ldr	r1, [pc, #56]	; (80113d8 <tcp_close+0x50>)
 801139e:	480f      	ldr	r0, [pc, #60]	; (80113dc <tcp_close+0x54>)
 80113a0:	f00b fe9c 	bl	801d0dc <iprintf>
 80113a4:	f06f 030f 	mvn.w	r3, #15
 80113a8:	e00f      	b.n	80113ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	7d1b      	ldrb	r3, [r3, #20]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d006      	beq.n	80113c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	8b5b      	ldrh	r3, [r3, #26]
 80113b6:	f043 0310 	orr.w	r3, r3, #16
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80113c0:	2101      	movs	r1, #1
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7ff fe94 	bl	80110f0 <tcp_close_shutdown>
 80113c8:	4603      	mov	r3, r0
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	0801eaf8 	.word	0x0801eaf8
 80113d8:	0801ec08 	.word	0x0801ec08
 80113dc:	0801eb3c 	.word	0x0801eb3c

080113e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b08e      	sub	sp, #56	; 0x38
 80113e4:	af04      	add	r7, sp, #16
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d107      	bne.n	8011400 <tcp_abandon+0x20>
 80113f0:	4b52      	ldr	r3, [pc, #328]	; (801153c <tcp_abandon+0x15c>)
 80113f2:	f240 223d 	movw	r2, #573	; 0x23d
 80113f6:	4952      	ldr	r1, [pc, #328]	; (8011540 <tcp_abandon+0x160>)
 80113f8:	4852      	ldr	r0, [pc, #328]	; (8011544 <tcp_abandon+0x164>)
 80113fa:	f00b fe6f 	bl	801d0dc <iprintf>
 80113fe:	e099      	b.n	8011534 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	7d1b      	ldrb	r3, [r3, #20]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d106      	bne.n	8011416 <tcp_abandon+0x36>
 8011408:	4b4c      	ldr	r3, [pc, #304]	; (801153c <tcp_abandon+0x15c>)
 801140a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801140e:	494e      	ldr	r1, [pc, #312]	; (8011548 <tcp_abandon+0x168>)
 8011410:	484c      	ldr	r0, [pc, #304]	; (8011544 <tcp_abandon+0x164>)
 8011412:	f00b fe63 	bl	801d0dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	7d1b      	ldrb	r3, [r3, #20]
 801141a:	2b0a      	cmp	r3, #10
 801141c:	d107      	bne.n	801142e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801141e:	6879      	ldr	r1, [r7, #4]
 8011420:	484a      	ldr	r0, [pc, #296]	; (801154c <tcp_abandon+0x16c>)
 8011422:	f001 f9d1 	bl	80127c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7ff fdb0 	bl	8010f8c <tcp_free>
 801142c:	e082      	b.n	8011534 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801142e:	2300      	movs	r3, #0
 8011430:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011432:	2300      	movs	r3, #0
 8011434:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801143a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011440:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011448:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	7d1b      	ldrb	r3, [r3, #20]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d126      	bne.n	80114a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	8adb      	ldrh	r3, [r3, #22]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d02e      	beq.n	80114be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011460:	4b3b      	ldr	r3, [pc, #236]	; (8011550 <tcp_abandon+0x170>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	429a      	cmp	r2, r3
 8011468:	d105      	bne.n	8011476 <tcp_abandon+0x96>
 801146a:	4b39      	ldr	r3, [pc, #228]	; (8011550 <tcp_abandon+0x170>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	4a37      	ldr	r2, [pc, #220]	; (8011550 <tcp_abandon+0x170>)
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	e013      	b.n	801149e <tcp_abandon+0xbe>
 8011476:	4b36      	ldr	r3, [pc, #216]	; (8011550 <tcp_abandon+0x170>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	61fb      	str	r3, [r7, #28]
 801147c:	e00c      	b.n	8011498 <tcp_abandon+0xb8>
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	429a      	cmp	r2, r3
 8011486:	d104      	bne.n	8011492 <tcp_abandon+0xb2>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	68da      	ldr	r2, [r3, #12]
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	60da      	str	r2, [r3, #12]
 8011490:	e005      	b.n	801149e <tcp_abandon+0xbe>
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	61fb      	str	r3, [r7, #28]
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1ef      	bne.n	801147e <tcp_abandon+0x9e>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	60da      	str	r2, [r3, #12]
 80114a4:	e00b      	b.n	80114be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	8adb      	ldrh	r3, [r3, #22]
 80114ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80114b0:	6879      	ldr	r1, [r7, #4]
 80114b2:	4828      	ldr	r0, [pc, #160]	; (8011554 <tcp_abandon+0x174>)
 80114b4:	f001 f988 	bl	80127c8 <tcp_pcb_remove>
 80114b8:	4b27      	ldr	r3, [pc, #156]	; (8011558 <tcp_abandon+0x178>)
 80114ba:	2201      	movs	r2, #1
 80114bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d004      	beq.n	80114d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 fe7a 	bl	80121c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d004      	beq.n	80114e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114dc:	4618      	mov	r0, r3
 80114de:	f000 fe71 	bl	80121c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d004      	beq.n	80114f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ee:	4618      	mov	r0, r3
 80114f0:	f000 fe68 	bl	80121c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00e      	beq.n	8011518 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80114fa:	6879      	ldr	r1, [r7, #4]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3304      	adds	r3, #4
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	8b12      	ldrh	r2, [r2, #24]
 8011504:	9202      	str	r2, [sp, #8]
 8011506:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011508:	9201      	str	r2, [sp, #4]
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	460b      	mov	r3, r1
 801150e:	697a      	ldr	r2, [r7, #20]
 8011510:	69b9      	ldr	r1, [r7, #24]
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f005 fb28 	bl	8016b68 <tcp_rst>
    }
    last_state = pcb->state;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	7d1b      	ldrb	r3, [r3, #20]
 801151c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7ff fd34 	bl	8010f8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d004      	beq.n	8011534 <tcp_abandon+0x154>
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	f06f 010c 	mvn.w	r1, #12
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	4798      	blx	r3
  }
}
 8011534:	3728      	adds	r7, #40	; 0x28
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
 801153a:	bf00      	nop
 801153c:	0801eaf8 	.word	0x0801eaf8
 8011540:	0801ec3c 	.word	0x0801ec3c
 8011544:	0801eb3c 	.word	0x0801eb3c
 8011548:	0801ec58 	.word	0x0801ec58
 801154c:	2000867c 	.word	0x2000867c
 8011550:	20008670 	.word	0x20008670
 8011554:	20008678 	.word	0x20008678
 8011558:	20008680 	.word	0x20008680

0801155c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011564:	2101      	movs	r1, #1
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ff ff3a 	bl	80113e0 <tcp_abandon>
}
 801156c:	bf00      	nop
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}

08011574 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <tcp_update_rcv_ann_wnd+0x1c>
 8011582:	4b25      	ldr	r3, [pc, #148]	; (8011618 <tcp_update_rcv_ann_wnd+0xa4>)
 8011584:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011588:	4924      	ldr	r1, [pc, #144]	; (801161c <tcp_update_rcv_ann_wnd+0xa8>)
 801158a:	4825      	ldr	r0, [pc, #148]	; (8011620 <tcp_update_rcv_ann_wnd+0xac>)
 801158c:	f00b fda6 	bl	801d0dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011598:	4413      	add	r3, r2
 801159a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80115a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80115a8:	bf28      	it	cs
 80115aa:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80115ae:	b292      	uxth	r2, r2
 80115b0:	4413      	add	r3, r2
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	db08      	blt.n	80115cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	e020      	b.n	801160e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	dd03      	ble.n	80115e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2200      	movs	r2, #0
 80115de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80115e0:	e014      	b.n	801160c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115f4:	d306      	bcc.n	8011604 <tcp_update_rcv_ann_wnd+0x90>
 80115f6:	4b08      	ldr	r3, [pc, #32]	; (8011618 <tcp_update_rcv_ann_wnd+0xa4>)
 80115f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80115fc:	4909      	ldr	r1, [pc, #36]	; (8011624 <tcp_update_rcv_ann_wnd+0xb0>)
 80115fe:	4808      	ldr	r0, [pc, #32]	; (8011620 <tcp_update_rcv_ann_wnd+0xac>)
 8011600:	f00b fd6c 	bl	801d0dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801160c:	2300      	movs	r3, #0
  }
}
 801160e:	4618      	mov	r0, r3
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	0801eaf8 	.word	0x0801eaf8
 801161c:	0801ed54 	.word	0x0801ed54
 8011620:	0801eb3c 	.word	0x0801eb3c
 8011624:	0801ed78 	.word	0x0801ed78

08011628 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	460b      	mov	r3, r1
 8011632:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d107      	bne.n	801164a <tcp_recved+0x22>
 801163a:	4b1f      	ldr	r3, [pc, #124]	; (80116b8 <tcp_recved+0x90>)
 801163c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011640:	491e      	ldr	r1, [pc, #120]	; (80116bc <tcp_recved+0x94>)
 8011642:	481f      	ldr	r0, [pc, #124]	; (80116c0 <tcp_recved+0x98>)
 8011644:	f00b fd4a 	bl	801d0dc <iprintf>
 8011648:	e032      	b.n	80116b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	7d1b      	ldrb	r3, [r3, #20]
 801164e:	2b01      	cmp	r3, #1
 8011650:	d106      	bne.n	8011660 <tcp_recved+0x38>
 8011652:	4b19      	ldr	r3, [pc, #100]	; (80116b8 <tcp_recved+0x90>)
 8011654:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011658:	491a      	ldr	r1, [pc, #104]	; (80116c4 <tcp_recved+0x9c>)
 801165a:	4819      	ldr	r0, [pc, #100]	; (80116c0 <tcp_recved+0x98>)
 801165c:	f00b fd3e 	bl	801d0dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011664:	887b      	ldrh	r3, [r7, #2]
 8011666:	4413      	add	r3, r2
 8011668:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801166a:	89fb      	ldrh	r3, [r7, #14]
 801166c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011670:	d804      	bhi.n	801167c <tcp_recved+0x54>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011676:	89fa      	ldrh	r2, [r7, #14]
 8011678:	429a      	cmp	r2, r3
 801167a:	d204      	bcs.n	8011686 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011682:	851a      	strh	r2, [r3, #40]	; 0x28
 8011684:	e002      	b.n	801168c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	89fa      	ldrh	r2, [r7, #14]
 801168a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7ff ff71 	bl	8011574 <tcp_update_rcv_ann_wnd>
 8011692:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801169a:	d309      	bcc.n	80116b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f043 0302 	orr.w	r3, r3, #2
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f004 fca8 	bl	8016000 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	0801eaf8 	.word	0x0801eaf8
 80116bc:	0801ed94 	.word	0x0801ed94
 80116c0:	0801eb3c 	.word	0x0801eb3c
 80116c4:	0801edac 	.word	0x0801edac

080116c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80116d2:	4b1e      	ldr	r3, [pc, #120]	; (801174c <tcp_new_port+0x84>)
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	3301      	adds	r3, #1
 80116d8:	b29a      	uxth	r2, r3
 80116da:	4b1c      	ldr	r3, [pc, #112]	; (801174c <tcp_new_port+0x84>)
 80116dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80116de:	4b1b      	ldr	r3, [pc, #108]	; (801174c <tcp_new_port+0x84>)
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d103      	bne.n	80116f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80116ea:	4b18      	ldr	r3, [pc, #96]	; (801174c <tcp_new_port+0x84>)
 80116ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80116f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80116f2:	2300      	movs	r3, #0
 80116f4:	71fb      	strb	r3, [r7, #7]
 80116f6:	e01e      	b.n	8011736 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116f8:	79fb      	ldrb	r3, [r7, #7]
 80116fa:	4a15      	ldr	r2, [pc, #84]	; (8011750 <tcp_new_port+0x88>)
 80116fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	e011      	b.n	801172a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	8ada      	ldrh	r2, [r3, #22]
 801170a:	4b10      	ldr	r3, [pc, #64]	; (801174c <tcp_new_port+0x84>)
 801170c:	881b      	ldrh	r3, [r3, #0]
 801170e:	429a      	cmp	r2, r3
 8011710:	d108      	bne.n	8011724 <tcp_new_port+0x5c>
        n++;
 8011712:	88bb      	ldrh	r3, [r7, #4]
 8011714:	3301      	adds	r3, #1
 8011716:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011718:	88bb      	ldrh	r3, [r7, #4]
 801171a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801171e:	d3d8      	bcc.n	80116d2 <tcp_new_port+0xa>
          return 0;
 8011720:	2300      	movs	r3, #0
 8011722:	e00d      	b.n	8011740 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	603b      	str	r3, [r7, #0]
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1ea      	bne.n	8011706 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	3301      	adds	r3, #1
 8011734:	71fb      	strb	r3, [r7, #7]
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	2b03      	cmp	r3, #3
 801173a:	d9dd      	bls.n	80116f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801173c:	4b03      	ldr	r3, [pc, #12]	; (801174c <tcp_new_port+0x84>)
 801173e:	881b      	ldrh	r3, [r3, #0]
}
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	2000012c 	.word	0x2000012c
 8011750:	08020f1c 	.word	0x08020f1c

08011754 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b08a      	sub	sp, #40	; 0x28
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	603b      	str	r3, [r7, #0]
 8011760:	4613      	mov	r3, r2
 8011762:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8011764:	2300      	movs	r3, #0
 8011766:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d109      	bne.n	8011782 <tcp_connect+0x2e>
 801176e:	4b7d      	ldr	r3, [pc, #500]	; (8011964 <tcp_connect+0x210>)
 8011770:	f240 4235 	movw	r2, #1077	; 0x435
 8011774:	497c      	ldr	r1, [pc, #496]	; (8011968 <tcp_connect+0x214>)
 8011776:	487d      	ldr	r0, [pc, #500]	; (801196c <tcp_connect+0x218>)
 8011778:	f00b fcb0 	bl	801d0dc <iprintf>
 801177c:	f06f 030f 	mvn.w	r3, #15
 8011780:	e0ec      	b.n	801195c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d109      	bne.n	801179c <tcp_connect+0x48>
 8011788:	4b76      	ldr	r3, [pc, #472]	; (8011964 <tcp_connect+0x210>)
 801178a:	f240 4236 	movw	r2, #1078	; 0x436
 801178e:	4978      	ldr	r1, [pc, #480]	; (8011970 <tcp_connect+0x21c>)
 8011790:	4876      	ldr	r0, [pc, #472]	; (801196c <tcp_connect+0x218>)
 8011792:	f00b fca3 	bl	801d0dc <iprintf>
 8011796:	f06f 030f 	mvn.w	r3, #15
 801179a:	e0df      	b.n	801195c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	7d1b      	ldrb	r3, [r3, #20]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d009      	beq.n	80117b8 <tcp_connect+0x64>
 80117a4:	4b6f      	ldr	r3, [pc, #444]	; (8011964 <tcp_connect+0x210>)
 80117a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80117aa:	4972      	ldr	r1, [pc, #456]	; (8011974 <tcp_connect+0x220>)
 80117ac:	486f      	ldr	r0, [pc, #444]	; (801196c <tcp_connect+0x218>)
 80117ae:	f00b fc95 	bl	801d0dc <iprintf>
 80117b2:	f06f 0309 	mvn.w	r3, #9
 80117b6:	e0d1      	b.n	801195c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d002      	beq.n	80117c4 <tcp_connect+0x70>
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	e000      	b.n	80117c6 <tcp_connect+0x72>
 80117c4:	2300      	movs	r3, #0
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	88fa      	ldrh	r2, [r7, #6]
 80117ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	7a1b      	ldrb	r3, [r3, #8]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d006      	beq.n	80117e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	7a1b      	ldrb	r3, [r3, #8]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fe fc6b 	bl	80100b8 <netif_get_by_index>
 80117e2:	6278      	str	r0, [r7, #36]	; 0x24
 80117e4:	e005      	b.n	80117f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	3304      	adds	r3, #4
 80117ea:	4618      	mov	r0, r3
 80117ec:	f009 f9d8 	bl	801aba0 <ip4_route>
 80117f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80117f8:	f06f 0303 	mvn.w	r3, #3
 80117fc:	e0ae      	b.n	801195c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d003      	beq.n	801180c <tcp_connect+0xb8>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d111      	bne.n	8011830 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180e:	2b00      	cmp	r3, #0
 8011810:	d002      	beq.n	8011818 <tcp_connect+0xc4>
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	3304      	adds	r3, #4
 8011816:	e000      	b.n	801181a <tcp_connect+0xc6>
 8011818:	2300      	movs	r3, #0
 801181a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d102      	bne.n	8011828 <tcp_connect+0xd4>
      return ERR_RTE;
 8011822:	f06f 0303 	mvn.w	r3, #3
 8011826:	e099      	b.n	801195c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	8adb      	ldrh	r3, [r3, #22]
 8011834:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	8adb      	ldrh	r3, [r3, #22]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d10c      	bne.n	8011858 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801183e:	f7ff ff43 	bl	80116c8 <tcp_new_port>
 8011842:	4603      	mov	r3, r0
 8011844:	461a      	mov	r2, r3
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	8adb      	ldrh	r3, [r3, #22]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <tcp_connect+0x104>
      return ERR_BUF;
 8011852:	f06f 0301 	mvn.w	r3, #1
 8011856:	e081      	b.n	801195c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f001 f849 	bl	80128f0 <tcp_next_iss>
 801185e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	697a      	ldr	r2, [r7, #20]
 801186a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	1e5a      	subs	r2, r3, #1
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	1e5a      	subs	r2, r3, #1
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	1e5a      	subs	r2, r3, #1
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801188a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80118ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	3304      	adds	r3, #4
 80118b6:	461a      	mov	r2, r3
 80118b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118ba:	f001 f83f 	bl	801293c <tcp_eff_send_mss_netif>
 80118be:	4603      	mov	r3, r0
 80118c0:	461a      	mov	r2, r3
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2201      	movs	r2, #1
 80118ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80118d6:	2102      	movs	r1, #2
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f004 faa3 	bl	8015e24 <tcp_enqueue_flags>
 80118de:	4603      	mov	r3, r0
 80118e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80118e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d136      	bne.n	8011958 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2202      	movs	r2, #2
 80118ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80118f0:	8b7b      	ldrh	r3, [r7, #26]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d021      	beq.n	801193a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80118f6:	4b20      	ldr	r3, [pc, #128]	; (8011978 <tcp_connect+0x224>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d105      	bne.n	801190c <tcp_connect+0x1b8>
 8011900:	4b1d      	ldr	r3, [pc, #116]	; (8011978 <tcp_connect+0x224>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	4a1c      	ldr	r2, [pc, #112]	; (8011978 <tcp_connect+0x224>)
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	e013      	b.n	8011934 <tcp_connect+0x1e0>
 801190c:	4b1a      	ldr	r3, [pc, #104]	; (8011978 <tcp_connect+0x224>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	623b      	str	r3, [r7, #32]
 8011912:	e00c      	b.n	801192e <tcp_connect+0x1da>
 8011914:	6a3b      	ldr	r3, [r7, #32]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	429a      	cmp	r2, r3
 801191c:	d104      	bne.n	8011928 <tcp_connect+0x1d4>
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	68da      	ldr	r2, [r3, #12]
 8011922:	6a3b      	ldr	r3, [r7, #32]
 8011924:	60da      	str	r2, [r3, #12]
 8011926:	e005      	b.n	8011934 <tcp_connect+0x1e0>
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	623b      	str	r3, [r7, #32]
 801192e:	6a3b      	ldr	r3, [r7, #32]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1ef      	bne.n	8011914 <tcp_connect+0x1c0>
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2200      	movs	r2, #0
 8011938:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801193a:	4b10      	ldr	r3, [pc, #64]	; (801197c <tcp_connect+0x228>)
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	60da      	str	r2, [r3, #12]
 8011942:	4a0e      	ldr	r2, [pc, #56]	; (801197c <tcp_connect+0x228>)
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	6013      	str	r3, [r2, #0]
 8011948:	f005 face 	bl	8016ee8 <tcp_timer_needed>
 801194c:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <tcp_connect+0x22c>)
 801194e:	2201      	movs	r2, #1
 8011950:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f004 fb54 	bl	8016000 <tcp_output>
  }
  return ret;
 8011958:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801195c:	4618      	mov	r0, r3
 801195e:	3728      	adds	r7, #40	; 0x28
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	0801eaf8 	.word	0x0801eaf8
 8011968:	0801edd4 	.word	0x0801edd4
 801196c:	0801eb3c 	.word	0x0801eb3c
 8011970:	0801edf0 	.word	0x0801edf0
 8011974:	0801ee0c 	.word	0x0801ee0c
 8011978:	20008670 	.word	0x20008670
 801197c:	20008678 	.word	0x20008678
 8011980:	20008680 	.word	0x20008680

08011984 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011984:	b5b0      	push	{r4, r5, r7, lr}
 8011986:	b090      	sub	sp, #64	; 0x40
 8011988:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011990:	4b94      	ldr	r3, [pc, #592]	; (8011be4 <tcp_slowtmr+0x260>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	3301      	adds	r3, #1
 8011996:	4a93      	ldr	r2, [pc, #588]	; (8011be4 <tcp_slowtmr+0x260>)
 8011998:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801199a:	4b93      	ldr	r3, [pc, #588]	; (8011be8 <tcp_slowtmr+0x264>)
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	3301      	adds	r3, #1
 80119a0:	b2da      	uxtb	r2, r3
 80119a2:	4b91      	ldr	r3, [pc, #580]	; (8011be8 <tcp_slowtmr+0x264>)
 80119a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80119a6:	2300      	movs	r3, #0
 80119a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80119aa:	4b90      	ldr	r3, [pc, #576]	; (8011bec <tcp_slowtmr+0x268>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80119b0:	e29f      	b.n	8011ef2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	7d1b      	ldrb	r3, [r3, #20]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <tcp_slowtmr+0x44>
 80119ba:	4b8d      	ldr	r3, [pc, #564]	; (8011bf0 <tcp_slowtmr+0x26c>)
 80119bc:	f240 42be 	movw	r2, #1214	; 0x4be
 80119c0:	498c      	ldr	r1, [pc, #560]	; (8011bf4 <tcp_slowtmr+0x270>)
 80119c2:	488d      	ldr	r0, [pc, #564]	; (8011bf8 <tcp_slowtmr+0x274>)
 80119c4:	f00b fb8a 	bl	801d0dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	7d1b      	ldrb	r3, [r3, #20]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d106      	bne.n	80119de <tcp_slowtmr+0x5a>
 80119d0:	4b87      	ldr	r3, [pc, #540]	; (8011bf0 <tcp_slowtmr+0x26c>)
 80119d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80119d6:	4989      	ldr	r1, [pc, #548]	; (8011bfc <tcp_slowtmr+0x278>)
 80119d8:	4887      	ldr	r0, [pc, #540]	; (8011bf8 <tcp_slowtmr+0x274>)
 80119da:	f00b fb7f 	bl	801d0dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	7d1b      	ldrb	r3, [r3, #20]
 80119e2:	2b0a      	cmp	r3, #10
 80119e4:	d106      	bne.n	80119f4 <tcp_slowtmr+0x70>
 80119e6:	4b82      	ldr	r3, [pc, #520]	; (8011bf0 <tcp_slowtmr+0x26c>)
 80119e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80119ec:	4984      	ldr	r1, [pc, #528]	; (8011c00 <tcp_slowtmr+0x27c>)
 80119ee:	4882      	ldr	r0, [pc, #520]	; (8011bf8 <tcp_slowtmr+0x274>)
 80119f0:	f00b fb74 	bl	801d0dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	7f9a      	ldrb	r2, [r3, #30]
 80119f8:	4b7b      	ldr	r3, [pc, #492]	; (8011be8 <tcp_slowtmr+0x264>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d105      	bne.n	8011a0c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011a0a:	e272      	b.n	8011ef2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011a0c:	4b76      	ldr	r3, [pc, #472]	; (8011be8 <tcp_slowtmr+0x264>)
 8011a0e:	781a      	ldrb	r2, [r3, #0]
 8011a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a12:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011a14:	2300      	movs	r3, #0
 8011a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	2b02      	cmp	r3, #2
 8011a26:	d10a      	bne.n	8011a3e <tcp_slowtmr+0xba>
 8011a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a2e:	2b05      	cmp	r3, #5
 8011a30:	d905      	bls.n	8011a3e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a36:	3301      	adds	r3, #1
 8011a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a3c:	e11e      	b.n	8011c7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a44:	2b0b      	cmp	r3, #11
 8011a46:	d905      	bls.n	8011a54 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a52:	e113      	b.n	8011c7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d075      	beq.n	8011b4a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d006      	beq.n	8011a74 <tcp_slowtmr+0xf0>
 8011a66:	4b62      	ldr	r3, [pc, #392]	; (8011bf0 <tcp_slowtmr+0x26c>)
 8011a68:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011a6c:	4965      	ldr	r1, [pc, #404]	; (8011c04 <tcp_slowtmr+0x280>)
 8011a6e:	4862      	ldr	r0, [pc, #392]	; (8011bf8 <tcp_slowtmr+0x274>)
 8011a70:	f00b fb34 	bl	801d0dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d106      	bne.n	8011a8a <tcp_slowtmr+0x106>
 8011a7c:	4b5c      	ldr	r3, [pc, #368]	; (8011bf0 <tcp_slowtmr+0x26c>)
 8011a7e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011a82:	4961      	ldr	r1, [pc, #388]	; (8011c08 <tcp_slowtmr+0x284>)
 8011a84:	485c      	ldr	r0, [pc, #368]	; (8011bf8 <tcp_slowtmr+0x274>)
 8011a86:	f00b fb29 	bl	801d0dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a90:	2b0b      	cmp	r3, #11
 8011a92:	d905      	bls.n	8011aa0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a98:	3301      	adds	r3, #1
 8011a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a9e:	e0ed      	b.n	8011c7c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	4a58      	ldr	r2, [pc, #352]	; (8011c0c <tcp_slowtmr+0x288>)
 8011aaa:	5cd3      	ldrb	r3, [r2, r3]
 8011aac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011ab4:	7c7a      	ldrb	r2, [r7, #17]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d907      	bls.n	8011aca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011acc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011ad0:	7c7a      	ldrb	r2, [r7, #17]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	f200 80d2 	bhi.w	8011c7c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011ad8:	2301      	movs	r3, #1
 8011ada:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d108      	bne.n	8011af8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ae8:	f005 f930 	bl	8016d4c <tcp_zero_window_probe>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d014      	beq.n	8011b1c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011af2:	2300      	movs	r3, #0
 8011af4:	623b      	str	r3, [r7, #32]
 8011af6:	e011      	b.n	8011b1c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011afe:	4619      	mov	r1, r3
 8011b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b02:	f003 fff7 	bl	8015af4 <tcp_split_unsent_seg>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d107      	bne.n	8011b1c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b0e:	f004 fa77 	bl	8016000 <tcp_output>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d101      	bne.n	8011b1c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011b1c:	6a3b      	ldr	r3, [r7, #32]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f000 80ac 	beq.w	8011c7c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	2200      	movs	r2, #0
 8011b28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b32:	2b06      	cmp	r3, #6
 8011b34:	f200 80a2 	bhi.w	8011c7c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b3e:	3301      	adds	r3, #1
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011b48:	e098      	b.n	8011c7c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	db0f      	blt.n	8011b74 <tcp_slowtmr+0x1f0>
 8011b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d008      	beq.n	8011b74 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	b21a      	sxth	r2, r3
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011b80:	429a      	cmp	r2, r3
 8011b82:	db7b      	blt.n	8011c7c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b86:	f004 fd2f 	bl	80165e8 <tcp_rexmit_rto_prepare>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d007      	beq.n	8011ba0 <tcp_slowtmr+0x21c>
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d171      	bne.n	8011c7c <tcp_slowtmr+0x2f8>
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d06d      	beq.n	8011c7c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba2:	7d1b      	ldrb	r3, [r3, #20]
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d03a      	beq.n	8011c1e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bae:	2b0c      	cmp	r3, #12
 8011bb0:	bf28      	it	cs
 8011bb2:	230c      	movcs	r3, #12
 8011bb4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bbc:	10db      	asrs	r3, r3, #3
 8011bbe:	b21b      	sxth	r3, r3
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011bc8:	4413      	add	r3, r2
 8011bca:	7efa      	ldrb	r2, [r7, #27]
 8011bcc:	4910      	ldr	r1, [pc, #64]	; (8011c10 <tcp_slowtmr+0x28c>)
 8011bce:	5c8a      	ldrb	r2, [r1, r2]
 8011bd0:	4093      	lsls	r3, r2
 8011bd2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	dc1a      	bgt.n	8011c14 <tcp_slowtmr+0x290>
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	b21a      	sxth	r2, r3
 8011be2:	e019      	b.n	8011c18 <tcp_slowtmr+0x294>
 8011be4:	2000866c 	.word	0x2000866c
 8011be8:	20008682 	.word	0x20008682
 8011bec:	20008678 	.word	0x20008678
 8011bf0:	0801eaf8 	.word	0x0801eaf8
 8011bf4:	0801ee3c 	.word	0x0801ee3c
 8011bf8:	0801eb3c 	.word	0x0801eb3c
 8011bfc:	0801ee68 	.word	0x0801ee68
 8011c00:	0801ee94 	.word	0x0801ee94
 8011c04:	0801eec4 	.word	0x0801eec4
 8011c08:	0801eef8 	.word	0x0801eef8
 8011c0c:	08020f14 	.word	0x08020f14
 8011c10:	08020f04 	.word	0x08020f04
 8011c14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c20:	2200      	movs	r2, #0
 8011c22:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c30:	4293      	cmp	r3, r2
 8011c32:	bf28      	it	cs
 8011c34:	4613      	movcs	r3, r2
 8011c36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011c38:	8a7b      	ldrh	r3, [r7, #18]
 8011c3a:	085b      	lsrs	r3, r3, #1
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d206      	bcs.n	8011c64 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c5a:	005b      	lsls	r3, r3, #1
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	2200      	movs	r2, #0
 8011c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c78:	f004 fd26 	bl	80166c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	7d1b      	ldrb	r3, [r3, #20]
 8011c80:	2b06      	cmp	r3, #6
 8011c82:	d111      	bne.n	8011ca8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c86:	8b5b      	ldrh	r3, [r3, #26]
 8011c88:	f003 0310 	and.w	r3, r3, #16
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00b      	beq.n	8011ca8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c90:	4b9d      	ldr	r3, [pc, #628]	; (8011f08 <tcp_slowtmr+0x584>)
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c96:	6a1b      	ldr	r3, [r3, #32]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	2b28      	cmp	r3, #40	; 0x28
 8011c9c:	d904      	bls.n	8011ca8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011caa:	7a5b      	ldrb	r3, [r3, #9]
 8011cac:	f003 0308 	and.w	r3, r3, #8
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d04c      	beq.n	8011d4e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011cb8:	2b04      	cmp	r3, #4
 8011cba:	d003      	beq.n	8011cc4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011cc0:	2b07      	cmp	r3, #7
 8011cc2:	d144      	bne.n	8011d4e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cc4:	4b90      	ldr	r3, [pc, #576]	; (8011f08 <tcp_slowtmr+0x584>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cca:	6a1b      	ldr	r3, [r3, #32]
 8011ccc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011cd4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011cd8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011cdc:	498b      	ldr	r1, [pc, #556]	; (8011f0c <tcp_slowtmr+0x588>)
 8011cde:	fba1 1303 	umull	r1, r3, r1, r3
 8011ce2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d90a      	bls.n	8011cfe <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cec:	3301      	adds	r3, #1
 8011cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011cfc:	e027      	b.n	8011d4e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cfe:	4b82      	ldr	r3, [pc, #520]	; (8011f08 <tcp_slowtmr+0x584>)
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	6a1b      	ldr	r3, [r3, #32]
 8011d06:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d10:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d14:	4618      	mov	r0, r3
 8011d16:	4b7e      	ldr	r3, [pc, #504]	; (8011f10 <tcp_slowtmr+0x58c>)
 8011d18:	fb00 f303 	mul.w	r3, r0, r3
 8011d1c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011d1e:	497b      	ldr	r1, [pc, #492]	; (8011f0c <tcp_slowtmr+0x588>)
 8011d20:	fba1 1303 	umull	r1, r3, r1, r3
 8011d24:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d911      	bls.n	8011d4e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d2c:	f004 ffce 	bl	8016ccc <tcp_keepalive>
 8011d30:	4603      	mov	r3, r0
 8011d32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011d36:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d107      	bne.n	8011d4e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d40:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d44:	3301      	adds	r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d011      	beq.n	8011d7a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011d56:	4b6c      	ldr	r3, [pc, #432]	; (8011f08 <tcp_slowtmr+0x584>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	6a1b      	ldr	r3, [r3, #32]
 8011d5e:	1ad2      	subs	r2, r2, r3
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011d66:	4619      	mov	r1, r3
 8011d68:	460b      	mov	r3, r1
 8011d6a:	005b      	lsls	r3, r3, #1
 8011d6c:	440b      	add	r3, r1
 8011d6e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d302      	bcc.n	8011d7a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d76:	f000 fe8b 	bl	8012a90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7c:	7d1b      	ldrb	r3, [r3, #20]
 8011d7e:	2b03      	cmp	r3, #3
 8011d80:	d10b      	bne.n	8011d9a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d82:	4b61      	ldr	r3, [pc, #388]	; (8011f08 <tcp_slowtmr+0x584>)
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	6a1b      	ldr	r3, [r3, #32]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	2b28      	cmp	r3, #40	; 0x28
 8011d8e:	d904      	bls.n	8011d9a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d94:	3301      	adds	r3, #1
 8011d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9c:	7d1b      	ldrb	r3, [r3, #20]
 8011d9e:	2b09      	cmp	r3, #9
 8011da0:	d10b      	bne.n	8011dba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011da2:	4b59      	ldr	r3, [pc, #356]	; (8011f08 <tcp_slowtmr+0x584>)
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da8:	6a1b      	ldr	r3, [r3, #32]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	2bf0      	cmp	r3, #240	; 0xf0
 8011dae:	d904      	bls.n	8011dba <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011db4:	3301      	adds	r3, #1
 8011db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d060      	beq.n	8011e84 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dc8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dcc:	f000 fcac 	bl	8012728 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d010      	beq.n	8011df8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011dd6:	4b4f      	ldr	r3, [pc, #316]	; (8011f14 <tcp_slowtmr+0x590>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d106      	bne.n	8011dee <tcp_slowtmr+0x46a>
 8011de0:	4b4d      	ldr	r3, [pc, #308]	; (8011f18 <tcp_slowtmr+0x594>)
 8011de2:	f240 526d 	movw	r2, #1389	; 0x56d
 8011de6:	494d      	ldr	r1, [pc, #308]	; (8011f1c <tcp_slowtmr+0x598>)
 8011de8:	484d      	ldr	r0, [pc, #308]	; (8011f20 <tcp_slowtmr+0x59c>)
 8011dea:	f00b f977 	bl	801d0dc <iprintf>
        prev->next = pcb->next;
 8011dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df0:	68da      	ldr	r2, [r3, #12]
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	60da      	str	r2, [r3, #12]
 8011df6:	e00f      	b.n	8011e18 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011df8:	4b46      	ldr	r3, [pc, #280]	; (8011f14 <tcp_slowtmr+0x590>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d006      	beq.n	8011e10 <tcp_slowtmr+0x48c>
 8011e02:	4b45      	ldr	r3, [pc, #276]	; (8011f18 <tcp_slowtmr+0x594>)
 8011e04:	f240 5271 	movw	r2, #1393	; 0x571
 8011e08:	4946      	ldr	r1, [pc, #280]	; (8011f24 <tcp_slowtmr+0x5a0>)
 8011e0a:	4845      	ldr	r0, [pc, #276]	; (8011f20 <tcp_slowtmr+0x59c>)
 8011e0c:	f00b f966 	bl	801d0dc <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	4a3f      	ldr	r2, [pc, #252]	; (8011f14 <tcp_slowtmr+0x590>)
 8011e16:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d013      	beq.n	8011e48 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011e28:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e30:	8ad2      	ldrh	r2, [r2, #22]
 8011e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e34:	8b09      	ldrh	r1, [r1, #24]
 8011e36:	9102      	str	r1, [sp, #8]
 8011e38:	9201      	str	r2, [sp, #4]
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	462b      	mov	r3, r5
 8011e3e:	4622      	mov	r2, r4
 8011e40:	4601      	mov	r1, r0
 8011e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e44:	f004 fe90 	bl	8016b68 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e50:	7d1b      	ldrb	r3, [r3, #20]
 8011e52:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e56:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011e5e:	6838      	ldr	r0, [r7, #0]
 8011e60:	f7ff f894 	bl	8010f8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011e64:	4b30      	ldr	r3, [pc, #192]	; (8011f28 <tcp_slowtmr+0x5a4>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d004      	beq.n	8011e7a <tcp_slowtmr+0x4f6>
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f06f 010c 	mvn.w	r1, #12
 8011e76:	68b8      	ldr	r0, [r7, #8]
 8011e78:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011e7a:	4b2b      	ldr	r3, [pc, #172]	; (8011f28 <tcp_slowtmr+0x5a4>)
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d037      	beq.n	8011ef2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011e82:	e590      	b.n	80119a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e90:	7f1b      	ldrb	r3, [r3, #28]
 8011e92:	3301      	adds	r3, #1
 8011e94:	b2da      	uxtb	r2, r3
 8011e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e98:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9c:	7f1a      	ldrb	r2, [r3, #28]
 8011e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea0:	7f5b      	ldrb	r3, [r3, #29]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d325      	bcc.n	8011ef2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011eac:	4b1e      	ldr	r3, [pc, #120]	; (8011f28 <tcp_slowtmr+0x5a4>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d00b      	beq.n	8011ed4 <tcp_slowtmr+0x550>
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ec4:	6912      	ldr	r2, [r2, #16]
 8011ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ec8:	4610      	mov	r0, r2
 8011eca:	4798      	blx	r3
 8011ecc:	4603      	mov	r3, r0
 8011ece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011ed2:	e002      	b.n	8011eda <tcp_slowtmr+0x556>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011eda:	4b13      	ldr	r3, [pc, #76]	; (8011f28 <tcp_slowtmr+0x5a4>)
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d000      	beq.n	8011ee4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011ee2:	e560      	b.n	80119a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011ee4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d102      	bne.n	8011ef2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eee:	f004 f887 	bl	8016000 <tcp_output>
  while (pcb != NULL) {
 8011ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	f47f ad5c 	bne.w	80119b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011efa:	2300      	movs	r3, #0
 8011efc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011efe:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <tcp_slowtmr+0x5a8>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f04:	e067      	b.n	8011fd6 <tcp_slowtmr+0x652>
 8011f06:	bf00      	nop
 8011f08:	2000866c 	.word	0x2000866c
 8011f0c:	10624dd3 	.word	0x10624dd3
 8011f10:	000124f8 	.word	0x000124f8
 8011f14:	20008678 	.word	0x20008678
 8011f18:	0801eaf8 	.word	0x0801eaf8
 8011f1c:	0801ef30 	.word	0x0801ef30
 8011f20:	0801eb3c 	.word	0x0801eb3c
 8011f24:	0801ef5c 	.word	0x0801ef5c
 8011f28:	20008680 	.word	0x20008680
 8011f2c:	2000867c 	.word	0x2000867c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	7d1b      	ldrb	r3, [r3, #20]
 8011f34:	2b0a      	cmp	r3, #10
 8011f36:	d006      	beq.n	8011f46 <tcp_slowtmr+0x5c2>
 8011f38:	4b2b      	ldr	r3, [pc, #172]	; (8011fe8 <tcp_slowtmr+0x664>)
 8011f3a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011f3e:	492b      	ldr	r1, [pc, #172]	; (8011fec <tcp_slowtmr+0x668>)
 8011f40:	482b      	ldr	r0, [pc, #172]	; (8011ff0 <tcp_slowtmr+0x66c>)
 8011f42:	f00b f8cb 	bl	801d0dc <iprintf>
    pcb_remove = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f4c:	4b29      	ldr	r3, [pc, #164]	; (8011ff4 <tcp_slowtmr+0x670>)
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f52:	6a1b      	ldr	r3, [r3, #32]
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	2bf0      	cmp	r3, #240	; 0xf0
 8011f58:	d904      	bls.n	8011f64 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f5e:	3301      	adds	r3, #1
 8011f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d02f      	beq.n	8011fcc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f6e:	f000 fbdb 	bl	8012728 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d010      	beq.n	8011f9a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011f78:	4b1f      	ldr	r3, [pc, #124]	; (8011ff8 <tcp_slowtmr+0x674>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d106      	bne.n	8011f90 <tcp_slowtmr+0x60c>
 8011f82:	4b19      	ldr	r3, [pc, #100]	; (8011fe8 <tcp_slowtmr+0x664>)
 8011f84:	f240 52af 	movw	r2, #1455	; 0x5af
 8011f88:	491c      	ldr	r1, [pc, #112]	; (8011ffc <tcp_slowtmr+0x678>)
 8011f8a:	4819      	ldr	r0, [pc, #100]	; (8011ff0 <tcp_slowtmr+0x66c>)
 8011f8c:	f00b f8a6 	bl	801d0dc <iprintf>
        prev->next = pcb->next;
 8011f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f92:	68da      	ldr	r2, [r3, #12]
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	60da      	str	r2, [r3, #12]
 8011f98:	e00f      	b.n	8011fba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011f9a:	4b17      	ldr	r3, [pc, #92]	; (8011ff8 <tcp_slowtmr+0x674>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d006      	beq.n	8011fb2 <tcp_slowtmr+0x62e>
 8011fa4:	4b10      	ldr	r3, [pc, #64]	; (8011fe8 <tcp_slowtmr+0x664>)
 8011fa6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011faa:	4915      	ldr	r1, [pc, #84]	; (8012000 <tcp_slowtmr+0x67c>)
 8011fac:	4810      	ldr	r0, [pc, #64]	; (8011ff0 <tcp_slowtmr+0x66c>)
 8011fae:	f00b f895 	bl	801d0dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	4a10      	ldr	r2, [pc, #64]	; (8011ff8 <tcp_slowtmr+0x674>)
 8011fb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011fc4:	69f8      	ldr	r0, [r7, #28]
 8011fc6:	f7fe ffe1 	bl	8010f8c <tcp_free>
 8011fca:	e004      	b.n	8011fd6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1a9      	bne.n	8011f30 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011fdc:	bf00      	nop
 8011fde:	bf00      	nop
 8011fe0:	3730      	adds	r7, #48	; 0x30
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	0801eaf8 	.word	0x0801eaf8
 8011fec:	0801ef88 	.word	0x0801ef88
 8011ff0:	0801eb3c 	.word	0x0801eb3c
 8011ff4:	2000866c 	.word	0x2000866c
 8011ff8:	2000867c 	.word	0x2000867c
 8011ffc:	0801efb8 	.word	0x0801efb8
 8012000:	0801efe0 	.word	0x0801efe0

08012004 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801200a:	4b2d      	ldr	r3, [pc, #180]	; (80120c0 <tcp_fasttmr+0xbc>)
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	3301      	adds	r3, #1
 8012010:	b2da      	uxtb	r2, r3
 8012012:	4b2b      	ldr	r3, [pc, #172]	; (80120c0 <tcp_fasttmr+0xbc>)
 8012014:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012016:	4b2b      	ldr	r3, [pc, #172]	; (80120c4 <tcp_fasttmr+0xc0>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801201c:	e048      	b.n	80120b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	7f9a      	ldrb	r2, [r3, #30]
 8012022:	4b27      	ldr	r3, [pc, #156]	; (80120c0 <tcp_fasttmr+0xbc>)
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	429a      	cmp	r2, r3
 8012028:	d03f      	beq.n	80120aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801202a:	4b25      	ldr	r3, [pc, #148]	; (80120c0 <tcp_fasttmr+0xbc>)
 801202c:	781a      	ldrb	r2, [r3, #0]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	8b5b      	ldrh	r3, [r3, #26]
 8012036:	f003 0301 	and.w	r3, r3, #1
 801203a:	2b00      	cmp	r3, #0
 801203c:	d010      	beq.n	8012060 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	8b5b      	ldrh	r3, [r3, #26]
 8012042:	f043 0302 	orr.w	r3, r3, #2
 8012046:	b29a      	uxth	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f003 ffd7 	bl	8016000 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	8b5b      	ldrh	r3, [r3, #26]
 8012056:	f023 0303 	bic.w	r3, r3, #3
 801205a:	b29a      	uxth	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	8b5b      	ldrh	r3, [r3, #26]
 8012064:	f003 0308 	and.w	r3, r3, #8
 8012068:	2b00      	cmp	r3, #0
 801206a:	d009      	beq.n	8012080 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8b5b      	ldrh	r3, [r3, #26]
 8012070:	f023 0308 	bic.w	r3, r3, #8
 8012074:	b29a      	uxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff f91a 	bl	80112b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801208e:	4b0e      	ldr	r3, [pc, #56]	; (80120c8 <tcp_fasttmr+0xc4>)
 8012090:	2200      	movs	r2, #0
 8012092:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 f819 	bl	80120cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801209a:	4b0b      	ldr	r3, [pc, #44]	; (80120c8 <tcp_fasttmr+0xc4>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d000      	beq.n	80120a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80120a2:	e7b8      	b.n	8012016 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	607b      	str	r3, [r7, #4]
 80120a8:	e002      	b.n	80120b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1b3      	bne.n	801201e <tcp_fasttmr+0x1a>
    }
  }
}
 80120b6:	bf00      	nop
 80120b8:	bf00      	nop
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	20008682 	.word	0x20008682
 80120c4:	20008678 	.word	0x20008678
 80120c8:	20008680 	.word	0x20008680

080120cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80120cc:	b590      	push	{r4, r7, lr}
 80120ce:	b085      	sub	sp, #20
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d109      	bne.n	80120ee <tcp_process_refused_data+0x22>
 80120da:	4b37      	ldr	r3, [pc, #220]	; (80121b8 <tcp_process_refused_data+0xec>)
 80120dc:	f240 6209 	movw	r2, #1545	; 0x609
 80120e0:	4936      	ldr	r1, [pc, #216]	; (80121bc <tcp_process_refused_data+0xf0>)
 80120e2:	4837      	ldr	r0, [pc, #220]	; (80121c0 <tcp_process_refused_data+0xf4>)
 80120e4:	f00a fffa 	bl	801d0dc <iprintf>
 80120e8:	f06f 030f 	mvn.w	r3, #15
 80120ec:	e060      	b.n	80121b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120f2:	7b5b      	ldrb	r3, [r3, #13]
 80120f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00b      	beq.n	8012124 <tcp_process_refused_data+0x58>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6918      	ldr	r0, [r3, #16]
 8012116:	2300      	movs	r3, #0
 8012118:	68ba      	ldr	r2, [r7, #8]
 801211a:	6879      	ldr	r1, [r7, #4]
 801211c:	47a0      	blx	r4
 801211e:	4603      	mov	r3, r0
 8012120:	73fb      	strb	r3, [r7, #15]
 8012122:	e007      	b.n	8012134 <tcp_process_refused_data+0x68>
 8012124:	2300      	movs	r3, #0
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	6879      	ldr	r1, [r7, #4]
 801212a:	2000      	movs	r0, #0
 801212c:	f000 f8a4 	bl	8012278 <tcp_recv_null>
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d12a      	bne.n	8012192 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801213c:	7bbb      	ldrb	r3, [r7, #14]
 801213e:	f003 0320 	and.w	r3, r3, #32
 8012142:	2b00      	cmp	r3, #0
 8012144:	d033      	beq.n	80121ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801214a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801214e:	d005      	beq.n	801215c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012154:	3301      	adds	r3, #1
 8012156:	b29a      	uxth	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012162:	2b00      	cmp	r3, #0
 8012164:	d00b      	beq.n	801217e <tcp_process_refused_data+0xb2>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6918      	ldr	r0, [r3, #16]
 8012170:	2300      	movs	r3, #0
 8012172:	2200      	movs	r2, #0
 8012174:	6879      	ldr	r1, [r7, #4]
 8012176:	47a0      	blx	r4
 8012178:	4603      	mov	r3, r0
 801217a:	73fb      	strb	r3, [r7, #15]
 801217c:	e001      	b.n	8012182 <tcp_process_refused_data+0xb6>
 801217e:	2300      	movs	r3, #0
 8012180:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012186:	f113 0f0d 	cmn.w	r3, #13
 801218a:	d110      	bne.n	80121ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801218c:	f06f 030c 	mvn.w	r3, #12
 8012190:	e00e      	b.n	80121b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012196:	f113 0f0d 	cmn.w	r3, #13
 801219a:	d102      	bne.n	80121a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801219c:	f06f 030c 	mvn.w	r3, #12
 80121a0:	e006      	b.n	80121b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	68ba      	ldr	r2, [r7, #8]
 80121a6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80121a8:	f06f 0304 	mvn.w	r3, #4
 80121ac:	e000      	b.n	80121b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3714      	adds	r7, #20
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd90      	pop	{r4, r7, pc}
 80121b8:	0801eaf8 	.word	0x0801eaf8
 80121bc:	0801f008 	.word	0x0801f008
 80121c0:	0801eb3c 	.word	0x0801eb3c

080121c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80121cc:	e007      	b.n	80121de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f80a 	bl	80121ee <tcp_seg_free>
    seg = next;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1f4      	bne.n	80121ce <tcp_segs_free+0xa>
  }
}
 80121e4:	bf00      	nop
 80121e6:	bf00      	nop
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b082      	sub	sp, #8
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00c      	beq.n	8012216 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d004      	beq.n	801220e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	4618      	mov	r0, r3
 801220a:	f7fe fab5 	bl	8010778 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801220e:	6879      	ldr	r1, [r7, #4]
 8012210:	2003      	movs	r0, #3
 8012212:	f7fd fc2f 	bl	800fa74 <memp_free>
  }
}
 8012216:	bf00      	nop
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d106      	bne.n	801223c <tcp_seg_copy+0x1c>
 801222e:	4b0f      	ldr	r3, [pc, #60]	; (801226c <tcp_seg_copy+0x4c>)
 8012230:	f240 6282 	movw	r2, #1666	; 0x682
 8012234:	490e      	ldr	r1, [pc, #56]	; (8012270 <tcp_seg_copy+0x50>)
 8012236:	480f      	ldr	r0, [pc, #60]	; (8012274 <tcp_seg_copy+0x54>)
 8012238:	f00a ff50 	bl	801d0dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801223c:	2003      	movs	r0, #3
 801223e:	f7fd fba9 	bl	800f994 <memp_malloc>
 8012242:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d101      	bne.n	801224e <tcp_seg_copy+0x2e>
    return NULL;
 801224a:	2300      	movs	r3, #0
 801224c:	e00a      	b.n	8012264 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801224e:	2210      	movs	r2, #16
 8012250:	6879      	ldr	r1, [r7, #4]
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f00b f835 	bl	801d2c2 <memcpy>
  pbuf_ref(cseg->p);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe fb2b 	bl	80108b8 <pbuf_ref>
  return cseg;
 8012262:	68fb      	ldr	r3, [r7, #12]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	0801eaf8 	.word	0x0801eaf8
 8012270:	0801f04c 	.word	0x0801f04c
 8012274:	0801eb3c 	.word	0x0801eb3c

08012278 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
 8012284:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <tcp_recv_null+0x28>
 801228c:	4b12      	ldr	r3, [pc, #72]	; (80122d8 <tcp_recv_null+0x60>)
 801228e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012292:	4912      	ldr	r1, [pc, #72]	; (80122dc <tcp_recv_null+0x64>)
 8012294:	4812      	ldr	r0, [pc, #72]	; (80122e0 <tcp_recv_null+0x68>)
 8012296:	f00a ff21 	bl	801d0dc <iprintf>
 801229a:	f06f 030f 	mvn.w	r3, #15
 801229e:	e016      	b.n	80122ce <tcp_recv_null+0x56>

  if (p != NULL) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d009      	beq.n	80122ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	891b      	ldrh	r3, [r3, #8]
 80122aa:	4619      	mov	r1, r3
 80122ac:	68b8      	ldr	r0, [r7, #8]
 80122ae:	f7ff f9bb 	bl	8011628 <tcp_recved>
    pbuf_free(p);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f7fe fa60 	bl	8010778 <pbuf_free>
 80122b8:	e008      	b.n	80122cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80122ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d104      	bne.n	80122cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80122c2:	68b8      	ldr	r0, [r7, #8]
 80122c4:	f7ff f860 	bl	8011388 <tcp_close>
 80122c8:	4603      	mov	r3, r0
 80122ca:	e000      	b.n	80122ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	0801eaf8 	.word	0x0801eaf8
 80122dc:	0801f068 	.word	0x0801f068
 80122e0:	0801eb3c 	.word	0x0801eb3c

080122e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80122ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	db01      	blt.n	80122fa <tcp_kill_prio+0x16>
 80122f6:	79fb      	ldrb	r3, [r7, #7]
 80122f8:	e000      	b.n	80122fc <tcp_kill_prio+0x18>
 80122fa:	237f      	movs	r3, #127	; 0x7f
 80122fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80122fe:	7afb      	ldrb	r3, [r7, #11]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d034      	beq.n	801236e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012304:	7afb      	ldrb	r3, [r7, #11]
 8012306:	3b01      	subs	r3, #1
 8012308:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801230a:	2300      	movs	r3, #0
 801230c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801230e:	2300      	movs	r3, #0
 8012310:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012312:	4b19      	ldr	r3, [pc, #100]	; (8012378 <tcp_kill_prio+0x94>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	617b      	str	r3, [r7, #20]
 8012318:	e01f      	b.n	801235a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	7d5b      	ldrb	r3, [r3, #21]
 801231e:	7afa      	ldrb	r2, [r7, #11]
 8012320:	429a      	cmp	r2, r3
 8012322:	d80c      	bhi.n	801233e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012328:	7afa      	ldrb	r2, [r7, #11]
 801232a:	429a      	cmp	r2, r3
 801232c:	d112      	bne.n	8012354 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801232e:	4b13      	ldr	r3, [pc, #76]	; (801237c <tcp_kill_prio+0x98>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	6a1b      	ldr	r3, [r3, #32]
 8012336:	1ad3      	subs	r3, r2, r3
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	429a      	cmp	r2, r3
 801233c:	d80a      	bhi.n	8012354 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801233e:	4b0f      	ldr	r3, [pc, #60]	; (801237c <tcp_kill_prio+0x98>)
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	6a1b      	ldr	r3, [r3, #32]
 8012346:	1ad3      	subs	r3, r2, r3
 8012348:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	7d5b      	ldrb	r3, [r3, #21]
 8012352:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	617b      	str	r3, [r7, #20]
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d1dc      	bne.n	801231a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d004      	beq.n	8012370 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012366:	6938      	ldr	r0, [r7, #16]
 8012368:	f7ff f8f8 	bl	801155c <tcp_abort>
 801236c:	e000      	b.n	8012370 <tcp_kill_prio+0x8c>
    return;
 801236e:	bf00      	nop
  }
}
 8012370:	3718      	adds	r7, #24
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	20008678 	.word	0x20008678
 801237c:	2000866c 	.word	0x2000866c

08012380 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801238a:	79fb      	ldrb	r3, [r7, #7]
 801238c:	2b08      	cmp	r3, #8
 801238e:	d009      	beq.n	80123a4 <tcp_kill_state+0x24>
 8012390:	79fb      	ldrb	r3, [r7, #7]
 8012392:	2b09      	cmp	r3, #9
 8012394:	d006      	beq.n	80123a4 <tcp_kill_state+0x24>
 8012396:	4b1a      	ldr	r3, [pc, #104]	; (8012400 <tcp_kill_state+0x80>)
 8012398:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801239c:	4919      	ldr	r1, [pc, #100]	; (8012404 <tcp_kill_state+0x84>)
 801239e:	481a      	ldr	r0, [pc, #104]	; (8012408 <tcp_kill_state+0x88>)
 80123a0:	f00a fe9c 	bl	801d0dc <iprintf>

  inactivity = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80123a8:	2300      	movs	r3, #0
 80123aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123ac:	4b17      	ldr	r3, [pc, #92]	; (801240c <tcp_kill_state+0x8c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	617b      	str	r3, [r7, #20]
 80123b2:	e017      	b.n	80123e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	7d1b      	ldrb	r3, [r3, #20]
 80123b8:	79fa      	ldrb	r2, [r7, #7]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d10f      	bne.n	80123de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80123be:	4b14      	ldr	r3, [pc, #80]	; (8012410 <tcp_kill_state+0x90>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	6a1b      	ldr	r3, [r3, #32]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d807      	bhi.n	80123de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80123ce:	4b10      	ldr	r3, [pc, #64]	; (8012410 <tcp_kill_state+0x90>)
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	6a1b      	ldr	r3, [r3, #32]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d1e4      	bne.n	80123b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d003      	beq.n	80123f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80123f0:	2100      	movs	r1, #0
 80123f2:	6938      	ldr	r0, [r7, #16]
 80123f4:	f7fe fff4 	bl	80113e0 <tcp_abandon>
  }
}
 80123f8:	bf00      	nop
 80123fa:	3718      	adds	r7, #24
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	0801eaf8 	.word	0x0801eaf8
 8012404:	0801f084 	.word	0x0801f084
 8012408:	0801eb3c 	.word	0x0801eb3c
 801240c:	20008678 	.word	0x20008678
 8012410:	2000866c 	.word	0x2000866c

08012414 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012422:	4b12      	ldr	r3, [pc, #72]	; (801246c <tcp_kill_timewait+0x58>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	60fb      	str	r3, [r7, #12]
 8012428:	e012      	b.n	8012450 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801242a:	4b11      	ldr	r3, [pc, #68]	; (8012470 <tcp_kill_timewait+0x5c>)
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	6a1b      	ldr	r3, [r3, #32]
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	429a      	cmp	r2, r3
 8012438:	d807      	bhi.n	801244a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801243a:	4b0d      	ldr	r3, [pc, #52]	; (8012470 <tcp_kill_timewait+0x5c>)
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	6a1b      	ldr	r3, [r3, #32]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	60fb      	str	r3, [r7, #12]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d1e9      	bne.n	801242a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d002      	beq.n	8012462 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801245c:	68b8      	ldr	r0, [r7, #8]
 801245e:	f7ff f87d 	bl	801155c <tcp_abort>
  }
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	2000867c 	.word	0x2000867c
 8012470:	2000866c 	.word	0x2000866c

08012474 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801247a:	4b10      	ldr	r3, [pc, #64]	; (80124bc <tcp_handle_closepend+0x48>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012480:	e014      	b.n	80124ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	8b5b      	ldrh	r3, [r3, #26]
 801248c:	f003 0308 	and.w	r3, r3, #8
 8012490:	2b00      	cmp	r3, #0
 8012492:	d009      	beq.n	80124a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	8b5b      	ldrh	r3, [r3, #26]
 8012498:	f023 0308 	bic.w	r3, r3, #8
 801249c:	b29a      	uxth	r2, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7fe ff06 	bl	80112b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1e7      	bne.n	8012482 <tcp_handle_closepend+0xe>
  }
}
 80124b2:	bf00      	nop
 80124b4:	bf00      	nop
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	20008678 	.word	0x20008678

080124c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	4603      	mov	r3, r0
 80124c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80124ca:	2001      	movs	r0, #1
 80124cc:	f7fd fa62 	bl	800f994 <memp_malloc>
 80124d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d126      	bne.n	8012526 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80124d8:	f7ff ffcc 	bl	8012474 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80124dc:	f7ff ff9a 	bl	8012414 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80124e0:	2001      	movs	r0, #1
 80124e2:	f7fd fa57 	bl	800f994 <memp_malloc>
 80124e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d11b      	bne.n	8012526 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80124ee:	2009      	movs	r0, #9
 80124f0:	f7ff ff46 	bl	8012380 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80124f4:	2001      	movs	r0, #1
 80124f6:	f7fd fa4d 	bl	800f994 <memp_malloc>
 80124fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d111      	bne.n	8012526 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012502:	2008      	movs	r0, #8
 8012504:	f7ff ff3c 	bl	8012380 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012508:	2001      	movs	r0, #1
 801250a:	f7fd fa43 	bl	800f994 <memp_malloc>
 801250e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d107      	bne.n	8012526 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012516:	79fb      	ldrb	r3, [r7, #7]
 8012518:	4618      	mov	r0, r3
 801251a:	f7ff fee3 	bl	80122e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801251e:	2001      	movs	r0, #1
 8012520:	f7fd fa38 	bl	800f994 <memp_malloc>
 8012524:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d03f      	beq.n	80125ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801252c:	229c      	movs	r2, #156	; 0x9c
 801252e:	2100      	movs	r1, #0
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f00a fe38 	bl	801d1a6 <memset>
    pcb->prio = prio;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	79fa      	ldrb	r2, [r7, #7]
 801253a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8012542:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801254c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	22ff      	movs	r2, #255	; 0xff
 801255a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012562:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2206      	movs	r2, #6
 8012568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2206      	movs	r2, #6
 8012570:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012578:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2201      	movs	r2, #1
 801257e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012582:	4b0d      	ldr	r3, [pc, #52]	; (80125b8 <tcp_alloc+0xf8>)
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801258a:	4b0c      	ldr	r3, [pc, #48]	; (80125bc <tcp_alloc+0xfc>)
 801258c:	781a      	ldrb	r2, [r3, #0]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8012598:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	4a08      	ldr	r2, [pc, #32]	; (80125c0 <tcp_alloc+0x100>)
 80125a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	4a07      	ldr	r2, [pc, #28]	; (80125c4 <tcp_alloc+0x104>)
 80125a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80125ac:	68fb      	ldr	r3, [r7, #12]
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	2000866c 	.word	0x2000866c
 80125bc:	20008682 	.word	0x20008682
 80125c0:	08012279 	.word	0x08012279
 80125c4:	006ddd00 	.word	0x006ddd00

080125c8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80125cc:	2040      	movs	r0, #64	; 0x40
 80125ce:	f7ff ff77 	bl	80124c0 <tcp_alloc>
 80125d2:	4603      	mov	r3, r0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80125d8:	b480      	push	{r7}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	683a      	ldr	r2, [r7, #0]
 80125ec:	611a      	str	r2, [r3, #16]
  }
}
 80125ee:	bf00      	nop
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr
	...

080125fc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00e      	beq.n	801262a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d106      	bne.n	8012622 <tcp_recv+0x26>
 8012614:	4b07      	ldr	r3, [pc, #28]	; (8012634 <tcp_recv+0x38>)
 8012616:	f240 72df 	movw	r2, #2015	; 0x7df
 801261a:	4907      	ldr	r1, [pc, #28]	; (8012638 <tcp_recv+0x3c>)
 801261c:	4807      	ldr	r0, [pc, #28]	; (801263c <tcp_recv+0x40>)
 801261e:	f00a fd5d 	bl	801d0dc <iprintf>
    pcb->recv = recv;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801262a:	bf00      	nop
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	0801eaf8 	.word	0x0801eaf8
 8012638:	0801f094 	.word	0x0801f094
 801263c:	0801eb3c 	.word	0x0801eb3c

08012640 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00e      	beq.n	801266e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	7d1b      	ldrb	r3, [r3, #20]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d106      	bne.n	8012666 <tcp_sent+0x26>
 8012658:	4b07      	ldr	r3, [pc, #28]	; (8012678 <tcp_sent+0x38>)
 801265a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801265e:	4907      	ldr	r1, [pc, #28]	; (801267c <tcp_sent+0x3c>)
 8012660:	4807      	ldr	r0, [pc, #28]	; (8012680 <tcp_sent+0x40>)
 8012662:	f00a fd3b 	bl	801d0dc <iprintf>
    pcb->sent = sent;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	683a      	ldr	r2, [r7, #0]
 801266a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801266e:	bf00      	nop
 8012670:	3708      	adds	r7, #8
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	0801eaf8 	.word	0x0801eaf8
 801267c:	0801f0bc 	.word	0x0801f0bc
 8012680:	0801eb3c 	.word	0x0801eb3c

08012684 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00e      	beq.n	80126b2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7d1b      	ldrb	r3, [r3, #20]
 8012698:	2b01      	cmp	r3, #1
 801269a:	d106      	bne.n	80126aa <tcp_err+0x26>
 801269c:	4b07      	ldr	r3, [pc, #28]	; (80126bc <tcp_err+0x38>)
 801269e:	f640 020d 	movw	r2, #2061	; 0x80d
 80126a2:	4907      	ldr	r1, [pc, #28]	; (80126c0 <tcp_err+0x3c>)
 80126a4:	4807      	ldr	r0, [pc, #28]	; (80126c4 <tcp_err+0x40>)
 80126a6:	f00a fd19 	bl	801d0dc <iprintf>
    pcb->errf = err;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	683a      	ldr	r2, [r7, #0]
 80126ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80126b2:	bf00      	nop
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	0801eaf8 	.word	0x0801eaf8
 80126c0:	0801f0e4 	.word	0x0801f0e4
 80126c4:	0801eb3c 	.word	0x0801eb3c

080126c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	4613      	mov	r3, r2
 80126d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d107      	bne.n	80126ec <tcp_poll+0x24>
 80126dc:	4b0e      	ldr	r3, [pc, #56]	; (8012718 <tcp_poll+0x50>)
 80126de:	f640 023d 	movw	r2, #2109	; 0x83d
 80126e2:	490e      	ldr	r1, [pc, #56]	; (801271c <tcp_poll+0x54>)
 80126e4:	480e      	ldr	r0, [pc, #56]	; (8012720 <tcp_poll+0x58>)
 80126e6:	f00a fcf9 	bl	801d0dc <iprintf>
 80126ea:	e011      	b.n	8012710 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	7d1b      	ldrb	r3, [r3, #20]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d106      	bne.n	8012702 <tcp_poll+0x3a>
 80126f4:	4b08      	ldr	r3, [pc, #32]	; (8012718 <tcp_poll+0x50>)
 80126f6:	f640 023e 	movw	r2, #2110	; 0x83e
 80126fa:	490a      	ldr	r1, [pc, #40]	; (8012724 <tcp_poll+0x5c>)
 80126fc:	4808      	ldr	r0, [pc, #32]	; (8012720 <tcp_poll+0x58>)
 80126fe:	f00a fced 	bl	801d0dc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	79fa      	ldrb	r2, [r7, #7]
 801270e:	775a      	strb	r2, [r3, #29]
}
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	0801eaf8 	.word	0x0801eaf8
 801271c:	0801f10c 	.word	0x0801f10c
 8012720:	0801eb3c 	.word	0x0801eb3c
 8012724:	0801f124 	.word	0x0801f124

08012728 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d107      	bne.n	8012746 <tcp_pcb_purge+0x1e>
 8012736:	4b21      	ldr	r3, [pc, #132]	; (80127bc <tcp_pcb_purge+0x94>)
 8012738:	f640 0251 	movw	r2, #2129	; 0x851
 801273c:	4920      	ldr	r1, [pc, #128]	; (80127c0 <tcp_pcb_purge+0x98>)
 801273e:	4821      	ldr	r0, [pc, #132]	; (80127c4 <tcp_pcb_purge+0x9c>)
 8012740:	f00a fccc 	bl	801d0dc <iprintf>
 8012744:	e037      	b.n	80127b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	7d1b      	ldrb	r3, [r3, #20]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d033      	beq.n	80127b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012752:	2b0a      	cmp	r3, #10
 8012754:	d02f      	beq.n	80127b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801275a:	2b01      	cmp	r3, #1
 801275c:	d02b      	beq.n	80127b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe f804 	bl	8010778 <pbuf_free>
      pcb->refused_data = NULL;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2200      	movs	r2, #0
 8012774:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801277a:	2b00      	cmp	r3, #0
 801277c:	d002      	beq.n	8012784 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 f986 	bl	8012a90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801278a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012790:	4618      	mov	r0, r3
 8012792:	f7ff fd17 	bl	80121c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801279a:	4618      	mov	r0, r3
 801279c:	f7ff fd12 	bl	80121c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2200      	movs	r2, #0
 80127a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2200      	movs	r2, #0
 80127b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	0801eaf8 	.word	0x0801eaf8
 80127c0:	0801f144 	.word	0x0801f144
 80127c4:	0801eb3c 	.word	0x0801eb3c

080127c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <tcp_pcb_remove+0x1e>
 80127d8:	4b3e      	ldr	r3, [pc, #248]	; (80128d4 <tcp_pcb_remove+0x10c>)
 80127da:	f640 0283 	movw	r2, #2179	; 0x883
 80127de:	493e      	ldr	r1, [pc, #248]	; (80128d8 <tcp_pcb_remove+0x110>)
 80127e0:	483e      	ldr	r0, [pc, #248]	; (80128dc <tcp_pcb_remove+0x114>)
 80127e2:	f00a fc7b 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d106      	bne.n	80127fa <tcp_pcb_remove+0x32>
 80127ec:	4b39      	ldr	r3, [pc, #228]	; (80128d4 <tcp_pcb_remove+0x10c>)
 80127ee:	f640 0284 	movw	r2, #2180	; 0x884
 80127f2:	493b      	ldr	r1, [pc, #236]	; (80128e0 <tcp_pcb_remove+0x118>)
 80127f4:	4839      	ldr	r0, [pc, #228]	; (80128dc <tcp_pcb_remove+0x114>)
 80127f6:	f00a fc71 	bl	801d0dc <iprintf>

  TCP_RMV(pcblist, pcb);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	429a      	cmp	r2, r3
 8012802:	d105      	bne.n	8012810 <tcp_pcb_remove+0x48>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	68da      	ldr	r2, [r3, #12]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	e013      	b.n	8012838 <tcp_pcb_remove+0x70>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	60fb      	str	r3, [r7, #12]
 8012816:	e00c      	b.n	8012832 <tcp_pcb_remove+0x6a>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	429a      	cmp	r2, r3
 8012820:	d104      	bne.n	801282c <tcp_pcb_remove+0x64>
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	68da      	ldr	r2, [r3, #12]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	60da      	str	r2, [r3, #12]
 801282a:	e005      	b.n	8012838 <tcp_pcb_remove+0x70>
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	60fb      	str	r3, [r7, #12]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1ef      	bne.n	8012818 <tcp_pcb_remove+0x50>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2200      	movs	r2, #0
 801283c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801283e:	6838      	ldr	r0, [r7, #0]
 8012840:	f7ff ff72 	bl	8012728 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	7d1b      	ldrb	r3, [r3, #20]
 8012848:	2b0a      	cmp	r3, #10
 801284a:	d013      	beq.n	8012874 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012850:	2b01      	cmp	r3, #1
 8012852:	d00f      	beq.n	8012874 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	8b5b      	ldrh	r3, [r3, #26]
 8012858:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801285c:	2b00      	cmp	r3, #0
 801285e:	d009      	beq.n	8012874 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f043 0302 	orr.w	r3, r3, #2
 8012868:	b29a      	uxth	r2, r3
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801286e:	6838      	ldr	r0, [r7, #0]
 8012870:	f003 fbc6 	bl	8016000 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	7d1b      	ldrb	r3, [r3, #20]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d020      	beq.n	80128be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d006      	beq.n	8012892 <tcp_pcb_remove+0xca>
 8012884:	4b13      	ldr	r3, [pc, #76]	; (80128d4 <tcp_pcb_remove+0x10c>)
 8012886:	f640 0293 	movw	r2, #2195	; 0x893
 801288a:	4916      	ldr	r1, [pc, #88]	; (80128e4 <tcp_pcb_remove+0x11c>)
 801288c:	4813      	ldr	r0, [pc, #76]	; (80128dc <tcp_pcb_remove+0x114>)
 801288e:	f00a fc25 	bl	801d0dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012896:	2b00      	cmp	r3, #0
 8012898:	d006      	beq.n	80128a8 <tcp_pcb_remove+0xe0>
 801289a:	4b0e      	ldr	r3, [pc, #56]	; (80128d4 <tcp_pcb_remove+0x10c>)
 801289c:	f640 0294 	movw	r2, #2196	; 0x894
 80128a0:	4911      	ldr	r1, [pc, #68]	; (80128e8 <tcp_pcb_remove+0x120>)
 80128a2:	480e      	ldr	r0, [pc, #56]	; (80128dc <tcp_pcb_remove+0x114>)
 80128a4:	f00a fc1a 	bl	801d0dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d006      	beq.n	80128be <tcp_pcb_remove+0xf6>
 80128b0:	4b08      	ldr	r3, [pc, #32]	; (80128d4 <tcp_pcb_remove+0x10c>)
 80128b2:	f640 0296 	movw	r2, #2198	; 0x896
 80128b6:	490d      	ldr	r1, [pc, #52]	; (80128ec <tcp_pcb_remove+0x124>)
 80128b8:	4808      	ldr	r0, [pc, #32]	; (80128dc <tcp_pcb_remove+0x114>)
 80128ba:	f00a fc0f 	bl	801d0dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	2200      	movs	r2, #0
 80128c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	2200      	movs	r2, #0
 80128c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80128ca:	bf00      	nop
 80128cc:	3710      	adds	r7, #16
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	0801eaf8 	.word	0x0801eaf8
 80128d8:	0801f160 	.word	0x0801f160
 80128dc:	0801eb3c 	.word	0x0801eb3c
 80128e0:	0801f17c 	.word	0x0801f17c
 80128e4:	0801f19c 	.word	0x0801f19c
 80128e8:	0801f1b4 	.word	0x0801f1b4
 80128ec:	0801f1d0 	.word	0x0801f1d0

080128f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d106      	bne.n	801290c <tcp_next_iss+0x1c>
 80128fe:	4b0a      	ldr	r3, [pc, #40]	; (8012928 <tcp_next_iss+0x38>)
 8012900:	f640 02af 	movw	r2, #2223	; 0x8af
 8012904:	4909      	ldr	r1, [pc, #36]	; (801292c <tcp_next_iss+0x3c>)
 8012906:	480a      	ldr	r0, [pc, #40]	; (8012930 <tcp_next_iss+0x40>)
 8012908:	f00a fbe8 	bl	801d0dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801290c:	4b09      	ldr	r3, [pc, #36]	; (8012934 <tcp_next_iss+0x44>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	4b09      	ldr	r3, [pc, #36]	; (8012938 <tcp_next_iss+0x48>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4413      	add	r3, r2
 8012916:	4a07      	ldr	r2, [pc, #28]	; (8012934 <tcp_next_iss+0x44>)
 8012918:	6013      	str	r3, [r2, #0]
  return iss;
 801291a:	4b06      	ldr	r3, [pc, #24]	; (8012934 <tcp_next_iss+0x44>)
 801291c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801291e:	4618      	mov	r0, r3
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	0801eaf8 	.word	0x0801eaf8
 801292c:	0801f1e8 	.word	0x0801f1e8
 8012930:	0801eb3c 	.word	0x0801eb3c
 8012934:	20000130 	.word	0x20000130
 8012938:	2000866c 	.word	0x2000866c

0801293c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af00      	add	r7, sp, #0
 8012942:	4603      	mov	r3, r0
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	607a      	str	r2, [r7, #4]
 8012948:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <tcp_eff_send_mss_netif+0x22>
 8012950:	4b14      	ldr	r3, [pc, #80]	; (80129a4 <tcp_eff_send_mss_netif+0x68>)
 8012952:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012956:	4914      	ldr	r1, [pc, #80]	; (80129a8 <tcp_eff_send_mss_netif+0x6c>)
 8012958:	4814      	ldr	r0, [pc, #80]	; (80129ac <tcp_eff_send_mss_netif+0x70>)
 801295a:	f00a fbbf 	bl	801d0dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d101      	bne.n	8012968 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012964:	89fb      	ldrh	r3, [r7, #14]
 8012966:	e019      	b.n	801299c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801296c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801296e:	8afb      	ldrh	r3, [r7, #22]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d012      	beq.n	801299a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012974:	2328      	movs	r3, #40	; 0x28
 8012976:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012978:	8afa      	ldrh	r2, [r7, #22]
 801297a:	8abb      	ldrh	r3, [r7, #20]
 801297c:	429a      	cmp	r2, r3
 801297e:	d904      	bls.n	801298a <tcp_eff_send_mss_netif+0x4e>
 8012980:	8afa      	ldrh	r2, [r7, #22]
 8012982:	8abb      	ldrh	r3, [r7, #20]
 8012984:	1ad3      	subs	r3, r2, r3
 8012986:	b29b      	uxth	r3, r3
 8012988:	e000      	b.n	801298c <tcp_eff_send_mss_netif+0x50>
 801298a:	2300      	movs	r3, #0
 801298c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801298e:	8a7a      	ldrh	r2, [r7, #18]
 8012990:	89fb      	ldrh	r3, [r7, #14]
 8012992:	4293      	cmp	r3, r2
 8012994:	bf28      	it	cs
 8012996:	4613      	movcs	r3, r2
 8012998:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801299a:	89fb      	ldrh	r3, [r7, #14]
}
 801299c:	4618      	mov	r0, r3
 801299e:	3718      	adds	r7, #24
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	0801eaf8 	.word	0x0801eaf8
 80129a8:	0801f204 	.word	0x0801f204
 80129ac:	0801eb3c 	.word	0x0801eb3c

080129b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d119      	bne.n	80129f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80129c4:	4b10      	ldr	r3, [pc, #64]	; (8012a08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80129c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80129ca:	4910      	ldr	r1, [pc, #64]	; (8012a0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80129cc:	4810      	ldr	r0, [pc, #64]	; (8012a10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80129ce:	f00a fb85 	bl	801d0dc <iprintf>

  while (pcb != NULL) {
 80129d2:	e011      	b.n	80129f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d108      	bne.n	80129f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80129e6:	68f8      	ldr	r0, [r7, #12]
 80129e8:	f7fe fdb8 	bl	801155c <tcp_abort>
      pcb = next;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	60fb      	str	r3, [r7, #12]
 80129f0:	e002      	b.n	80129f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1ea      	bne.n	80129d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80129fe:	bf00      	nop
 8012a00:	bf00      	nop
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	0801eaf8 	.word	0x0801eaf8
 8012a0c:	0801f22c 	.word	0x0801f22c
 8012a10:	0801eb3c 	.word	0x0801eb3c

08012a14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d02a      	beq.n	8012a7a <tcp_netif_ip_addr_changed+0x66>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d026      	beq.n	8012a7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012a2c:	4b15      	ldr	r3, [pc, #84]	; (8012a84 <tcp_netif_ip_addr_changed+0x70>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4619      	mov	r1, r3
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7ff ffbc 	bl	80129b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012a38:	4b13      	ldr	r3, [pc, #76]	; (8012a88 <tcp_netif_ip_addr_changed+0x74>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff ffb6 	bl	80129b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d017      	beq.n	8012a7a <tcp_netif_ip_addr_changed+0x66>
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d013      	beq.n	8012a7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a52:	4b0e      	ldr	r3, [pc, #56]	; (8012a8c <tcp_netif_ip_addr_changed+0x78>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	e00c      	b.n	8012a74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d103      	bne.n	8012a6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	60fb      	str	r3, [r7, #12]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d1ef      	bne.n	8012a5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012a7a:	bf00      	nop
 8012a7c:	3710      	adds	r7, #16
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	20008678 	.word	0x20008678
 8012a88:	20008670 	.word	0x20008670
 8012a8c:	20008674 	.word	0x20008674

08012a90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d007      	beq.n	8012ab0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff fb8d 	bl	80121c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012ab0:	bf00      	nop
 8012ab2:	3708      	adds	r7, #8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012ab8:	b590      	push	{r4, r7, lr}
 8012aba:	b08d      	sub	sp, #52	; 0x34
 8012abc:	af04      	add	r7, sp, #16
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d105      	bne.n	8012ad4 <tcp_input+0x1c>
 8012ac8:	4b9b      	ldr	r3, [pc, #620]	; (8012d38 <tcp_input+0x280>)
 8012aca:	2283      	movs	r2, #131	; 0x83
 8012acc:	499b      	ldr	r1, [pc, #620]	; (8012d3c <tcp_input+0x284>)
 8012ace:	489c      	ldr	r0, [pc, #624]	; (8012d40 <tcp_input+0x288>)
 8012ad0:	f00a fb04 	bl	801d0dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	4a9a      	ldr	r2, [pc, #616]	; (8012d44 <tcp_input+0x28c>)
 8012ada:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	895b      	ldrh	r3, [r3, #10]
 8012ae0:	2b13      	cmp	r3, #19
 8012ae2:	f240 83d1 	bls.w	8013288 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012ae6:	4b98      	ldr	r3, [pc, #608]	; (8012d48 <tcp_input+0x290>)
 8012ae8:	695b      	ldr	r3, [r3, #20]
 8012aea:	4a97      	ldr	r2, [pc, #604]	; (8012d48 <tcp_input+0x290>)
 8012aec:	6812      	ldr	r2, [r2, #0]
 8012aee:	4611      	mov	r1, r2
 8012af0:	4618      	mov	r0, r3
 8012af2:	f008 fb09 	bl	801b108 <ip4_addr_isbroadcast_u32>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f040 83c7 	bne.w	801328c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012afe:	4b92      	ldr	r3, [pc, #584]	; (8012d48 <tcp_input+0x290>)
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012b06:	2be0      	cmp	r3, #224	; 0xe0
 8012b08:	f000 83c0 	beq.w	801328c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012b0c:	4b8d      	ldr	r3, [pc, #564]	; (8012d44 <tcp_input+0x28c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	899b      	ldrh	r3, [r3, #12]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fb ffd8 	bl	800eaca <lwip_htons>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	0b1b      	lsrs	r3, r3, #12
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012b26:	7cbb      	ldrb	r3, [r7, #18]
 8012b28:	2b13      	cmp	r3, #19
 8012b2a:	f240 83b1 	bls.w	8013290 <tcp_input+0x7d8>
 8012b2e:	7cbb      	ldrb	r3, [r7, #18]
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	891b      	ldrh	r3, [r3, #8]
 8012b36:	429a      	cmp	r2, r3
 8012b38:	f200 83aa 	bhi.w	8013290 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012b3c:	7cbb      	ldrb	r3, [r7, #18]
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	3b14      	subs	r3, #20
 8012b42:	b29a      	uxth	r2, r3
 8012b44:	4b81      	ldr	r3, [pc, #516]	; (8012d4c <tcp_input+0x294>)
 8012b46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012b48:	4b81      	ldr	r3, [pc, #516]	; (8012d50 <tcp_input+0x298>)
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	895a      	ldrh	r2, [r3, #10]
 8012b52:	7cbb      	ldrb	r3, [r7, #18]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d309      	bcc.n	8012b6e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012b5a:	4b7c      	ldr	r3, [pc, #496]	; (8012d4c <tcp_input+0x294>)
 8012b5c:	881a      	ldrh	r2, [r3, #0]
 8012b5e:	4b7d      	ldr	r3, [pc, #500]	; (8012d54 <tcp_input+0x29c>)
 8012b60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012b62:	7cbb      	ldrb	r3, [r7, #18]
 8012b64:	4619      	mov	r1, r3
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7fd fd80 	bl	801066c <pbuf_remove_header>
 8012b6c:	e04e      	b.n	8012c0c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d105      	bne.n	8012b82 <tcp_input+0xca>
 8012b76:	4b70      	ldr	r3, [pc, #448]	; (8012d38 <tcp_input+0x280>)
 8012b78:	22c2      	movs	r2, #194	; 0xc2
 8012b7a:	4977      	ldr	r1, [pc, #476]	; (8012d58 <tcp_input+0x2a0>)
 8012b7c:	4870      	ldr	r0, [pc, #448]	; (8012d40 <tcp_input+0x288>)
 8012b7e:	f00a faad 	bl	801d0dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012b82:	2114      	movs	r1, #20
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7fd fd71 	bl	801066c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	895a      	ldrh	r2, [r3, #10]
 8012b8e:	4b71      	ldr	r3, [pc, #452]	; (8012d54 <tcp_input+0x29c>)
 8012b90:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012b92:	4b6e      	ldr	r3, [pc, #440]	; (8012d4c <tcp_input+0x294>)
 8012b94:	881a      	ldrh	r2, [r3, #0]
 8012b96:	4b6f      	ldr	r3, [pc, #444]	; (8012d54 <tcp_input+0x29c>)
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	1ad3      	subs	r3, r2, r3
 8012b9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012b9e:	4b6d      	ldr	r3, [pc, #436]	; (8012d54 <tcp_input+0x29c>)
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7fd fd61 	bl	801066c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	895b      	ldrh	r3, [r3, #10]
 8012bb0:	8a3a      	ldrh	r2, [r7, #16]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	f200 836e 	bhi.w	8013294 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	4a64      	ldr	r2, [pc, #400]	; (8012d50 <tcp_input+0x298>)
 8012bc0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	8a3a      	ldrh	r2, [r7, #16]
 8012bc8:	4611      	mov	r1, r2
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fd fd4e 	bl	801066c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	891a      	ldrh	r2, [r3, #8]
 8012bd4:	8a3b      	ldrh	r3, [r7, #16]
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	895b      	ldrh	r3, [r3, #10]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d005      	beq.n	8012bf2 <tcp_input+0x13a>
 8012be6:	4b54      	ldr	r3, [pc, #336]	; (8012d38 <tcp_input+0x280>)
 8012be8:	22df      	movs	r2, #223	; 0xdf
 8012bea:	495c      	ldr	r1, [pc, #368]	; (8012d5c <tcp_input+0x2a4>)
 8012bec:	4854      	ldr	r0, [pc, #336]	; (8012d40 <tcp_input+0x288>)
 8012bee:	f00a fa75 	bl	801d0dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	891a      	ldrh	r2, [r3, #8]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	891b      	ldrh	r3, [r3, #8]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d005      	beq.n	8012c0c <tcp_input+0x154>
 8012c00:	4b4d      	ldr	r3, [pc, #308]	; (8012d38 <tcp_input+0x280>)
 8012c02:	22e0      	movs	r2, #224	; 0xe0
 8012c04:	4956      	ldr	r1, [pc, #344]	; (8012d60 <tcp_input+0x2a8>)
 8012c06:	484e      	ldr	r0, [pc, #312]	; (8012d40 <tcp_input+0x288>)
 8012c08:	f00a fa68 	bl	801d0dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012c0c:	4b4d      	ldr	r3, [pc, #308]	; (8012d44 <tcp_input+0x28c>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	881b      	ldrh	r3, [r3, #0]
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	4a4b      	ldr	r2, [pc, #300]	; (8012d44 <tcp_input+0x28c>)
 8012c16:	6814      	ldr	r4, [r2, #0]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fb ff56 	bl	800eaca <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012c22:	4b48      	ldr	r3, [pc, #288]	; (8012d44 <tcp_input+0x28c>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	885b      	ldrh	r3, [r3, #2]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4a46      	ldr	r2, [pc, #280]	; (8012d44 <tcp_input+0x28c>)
 8012c2c:	6814      	ldr	r4, [r2, #0]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fb ff4b 	bl	800eaca <lwip_htons>
 8012c34:	4603      	mov	r3, r0
 8012c36:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012c38:	4b42      	ldr	r3, [pc, #264]	; (8012d44 <tcp_input+0x28c>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	4a41      	ldr	r2, [pc, #260]	; (8012d44 <tcp_input+0x28c>)
 8012c40:	6814      	ldr	r4, [r2, #0]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fb ff56 	bl	800eaf4 <lwip_htonl>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	6063      	str	r3, [r4, #4]
 8012c4c:	6863      	ldr	r3, [r4, #4]
 8012c4e:	4a45      	ldr	r2, [pc, #276]	; (8012d64 <tcp_input+0x2ac>)
 8012c50:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012c52:	4b3c      	ldr	r3, [pc, #240]	; (8012d44 <tcp_input+0x28c>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	689b      	ldr	r3, [r3, #8]
 8012c58:	4a3a      	ldr	r2, [pc, #232]	; (8012d44 <tcp_input+0x28c>)
 8012c5a:	6814      	ldr	r4, [r2, #0]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fb ff49 	bl	800eaf4 <lwip_htonl>
 8012c62:	4603      	mov	r3, r0
 8012c64:	60a3      	str	r3, [r4, #8]
 8012c66:	68a3      	ldr	r3, [r4, #8]
 8012c68:	4a3f      	ldr	r2, [pc, #252]	; (8012d68 <tcp_input+0x2b0>)
 8012c6a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012c6c:	4b35      	ldr	r3, [pc, #212]	; (8012d44 <tcp_input+0x28c>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	89db      	ldrh	r3, [r3, #14]
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	4a33      	ldr	r2, [pc, #204]	; (8012d44 <tcp_input+0x28c>)
 8012c76:	6814      	ldr	r4, [r2, #0]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fb ff26 	bl	800eaca <lwip_htons>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012c82:	4b30      	ldr	r3, [pc, #192]	; (8012d44 <tcp_input+0x28c>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	899b      	ldrh	r3, [r3, #12]
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fb ff1d 	bl	800eaca <lwip_htons>
 8012c90:	4603      	mov	r3, r0
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	4b34      	ldr	r3, [pc, #208]	; (8012d6c <tcp_input+0x2b4>)
 8012c9c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	891a      	ldrh	r2, [r3, #8]
 8012ca2:	4b33      	ldr	r3, [pc, #204]	; (8012d70 <tcp_input+0x2b8>)
 8012ca4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012ca6:	4b31      	ldr	r3, [pc, #196]	; (8012d6c <tcp_input+0x2b4>)
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	f003 0303 	and.w	r3, r3, #3
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d00c      	beq.n	8012ccc <tcp_input+0x214>
    tcplen++;
 8012cb2:	4b2f      	ldr	r3, [pc, #188]	; (8012d70 <tcp_input+0x2b8>)
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	4b2d      	ldr	r3, [pc, #180]	; (8012d70 <tcp_input+0x2b8>)
 8012cbc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	891a      	ldrh	r2, [r3, #8]
 8012cc2:	4b2b      	ldr	r3, [pc, #172]	; (8012d70 <tcp_input+0x2b8>)
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	f200 82e6 	bhi.w	8013298 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cd0:	4b28      	ldr	r3, [pc, #160]	; (8012d74 <tcp_input+0x2bc>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	61fb      	str	r3, [r7, #28]
 8012cd6:	e09d      	b.n	8012e14 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	7d1b      	ldrb	r3, [r3, #20]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d105      	bne.n	8012cec <tcp_input+0x234>
 8012ce0:	4b15      	ldr	r3, [pc, #84]	; (8012d38 <tcp_input+0x280>)
 8012ce2:	22fb      	movs	r2, #251	; 0xfb
 8012ce4:	4924      	ldr	r1, [pc, #144]	; (8012d78 <tcp_input+0x2c0>)
 8012ce6:	4816      	ldr	r0, [pc, #88]	; (8012d40 <tcp_input+0x288>)
 8012ce8:	f00a f9f8 	bl	801d0dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	7d1b      	ldrb	r3, [r3, #20]
 8012cf0:	2b0a      	cmp	r3, #10
 8012cf2:	d105      	bne.n	8012d00 <tcp_input+0x248>
 8012cf4:	4b10      	ldr	r3, [pc, #64]	; (8012d38 <tcp_input+0x280>)
 8012cf6:	22fc      	movs	r2, #252	; 0xfc
 8012cf8:	4920      	ldr	r1, [pc, #128]	; (8012d7c <tcp_input+0x2c4>)
 8012cfa:	4811      	ldr	r0, [pc, #68]	; (8012d40 <tcp_input+0x288>)
 8012cfc:	f00a f9ee 	bl	801d0dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	7d1b      	ldrb	r3, [r3, #20]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d105      	bne.n	8012d14 <tcp_input+0x25c>
 8012d08:	4b0b      	ldr	r3, [pc, #44]	; (8012d38 <tcp_input+0x280>)
 8012d0a:	22fd      	movs	r2, #253	; 0xfd
 8012d0c:	491c      	ldr	r1, [pc, #112]	; (8012d80 <tcp_input+0x2c8>)
 8012d0e:	480c      	ldr	r0, [pc, #48]	; (8012d40 <tcp_input+0x288>)
 8012d10:	f00a f9e4 	bl	801d0dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	7a1b      	ldrb	r3, [r3, #8]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d033      	beq.n	8012d84 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	7a1a      	ldrb	r2, [r3, #8]
 8012d20:	4b09      	ldr	r3, [pc, #36]	; (8012d48 <tcp_input+0x290>)
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d28:	3301      	adds	r3, #1
 8012d2a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d029      	beq.n	8012d84 <tcp_input+0x2cc>
      prev = pcb;
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	61bb      	str	r3, [r7, #24]
      continue;
 8012d34:	e06b      	b.n	8012e0e <tcp_input+0x356>
 8012d36:	bf00      	nop
 8012d38:	0801f260 	.word	0x0801f260
 8012d3c:	0801f294 	.word	0x0801f294
 8012d40:	0801f2ac 	.word	0x0801f2ac
 8012d44:	20008694 	.word	0x20008694
 8012d48:	2000550c 	.word	0x2000550c
 8012d4c:	20008698 	.word	0x20008698
 8012d50:	2000869c 	.word	0x2000869c
 8012d54:	2000869a 	.word	0x2000869a
 8012d58:	0801f2d4 	.word	0x0801f2d4
 8012d5c:	0801f2e4 	.word	0x0801f2e4
 8012d60:	0801f2f0 	.word	0x0801f2f0
 8012d64:	200086a4 	.word	0x200086a4
 8012d68:	200086a8 	.word	0x200086a8
 8012d6c:	200086b0 	.word	0x200086b0
 8012d70:	200086ae 	.word	0x200086ae
 8012d74:	20008678 	.word	0x20008678
 8012d78:	0801f310 	.word	0x0801f310
 8012d7c:	0801f338 	.word	0x0801f338
 8012d80:	0801f364 	.word	0x0801f364
    }

    if (pcb->remote_port == tcphdr->src &&
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	8b1a      	ldrh	r2, [r3, #24]
 8012d88:	4b72      	ldr	r3, [pc, #456]	; (8012f54 <tcp_input+0x49c>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	881b      	ldrh	r3, [r3, #0]
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d13a      	bne.n	8012e0a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	8ada      	ldrh	r2, [r3, #22]
 8012d98:	4b6e      	ldr	r3, [pc, #440]	; (8012f54 <tcp_input+0x49c>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	885b      	ldrh	r3, [r3, #2]
 8012d9e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d132      	bne.n	8012e0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	685a      	ldr	r2, [r3, #4]
 8012da8:	4b6b      	ldr	r3, [pc, #428]	; (8012f58 <tcp_input+0x4a0>)
 8012daa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d12c      	bne.n	8012e0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	4b68      	ldr	r3, [pc, #416]	; (8012f58 <tcp_input+0x4a0>)
 8012db6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d126      	bne.n	8012e0a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	69fa      	ldr	r2, [r7, #28]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d106      	bne.n	8012dd4 <tcp_input+0x31c>
 8012dc6:	4b65      	ldr	r3, [pc, #404]	; (8012f5c <tcp_input+0x4a4>)
 8012dc8:	f240 120d 	movw	r2, #269	; 0x10d
 8012dcc:	4964      	ldr	r1, [pc, #400]	; (8012f60 <tcp_input+0x4a8>)
 8012dce:	4865      	ldr	r0, [pc, #404]	; (8012f64 <tcp_input+0x4ac>)
 8012dd0:	f00a f984 	bl	801d0dc <iprintf>
      if (prev != NULL) {
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <tcp_input+0x338>
        prev->next = pcb->next;
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	68da      	ldr	r2, [r3, #12]
 8012dde:	69bb      	ldr	r3, [r7, #24]
 8012de0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012de2:	4b61      	ldr	r3, [pc, #388]	; (8012f68 <tcp_input+0x4b0>)
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012dea:	4a5f      	ldr	r2, [pc, #380]	; (8012f68 <tcp_input+0x4b0>)
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	69fa      	ldr	r2, [r7, #28]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d111      	bne.n	8012e1e <tcp_input+0x366>
 8012dfa:	4b58      	ldr	r3, [pc, #352]	; (8012f5c <tcp_input+0x4a4>)
 8012dfc:	f240 1215 	movw	r2, #277	; 0x115
 8012e00:	495a      	ldr	r1, [pc, #360]	; (8012f6c <tcp_input+0x4b4>)
 8012e02:	4858      	ldr	r0, [pc, #352]	; (8012f64 <tcp_input+0x4ac>)
 8012e04:	f00a f96a 	bl	801d0dc <iprintf>
      break;
 8012e08:	e009      	b.n	8012e1e <tcp_input+0x366>
    }
    prev = pcb;
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	61fb      	str	r3, [r7, #28]
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f47f af5e 	bne.w	8012cd8 <tcp_input+0x220>
 8012e1c:	e000      	b.n	8012e20 <tcp_input+0x368>
      break;
 8012e1e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	f040 80aa 	bne.w	8012f7c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e28:	4b51      	ldr	r3, [pc, #324]	; (8012f70 <tcp_input+0x4b8>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	61fb      	str	r3, [r7, #28]
 8012e2e:	e03f      	b.n	8012eb0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	7d1b      	ldrb	r3, [r3, #20]
 8012e34:	2b0a      	cmp	r3, #10
 8012e36:	d006      	beq.n	8012e46 <tcp_input+0x38e>
 8012e38:	4b48      	ldr	r3, [pc, #288]	; (8012f5c <tcp_input+0x4a4>)
 8012e3a:	f240 121f 	movw	r2, #287	; 0x11f
 8012e3e:	494d      	ldr	r1, [pc, #308]	; (8012f74 <tcp_input+0x4bc>)
 8012e40:	4848      	ldr	r0, [pc, #288]	; (8012f64 <tcp_input+0x4ac>)
 8012e42:	f00a f94b 	bl	801d0dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	7a1b      	ldrb	r3, [r3, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d009      	beq.n	8012e62 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	7a1a      	ldrb	r2, [r3, #8]
 8012e52:	4b41      	ldr	r3, [pc, #260]	; (8012f58 <tcp_input+0x4a0>)
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d122      	bne.n	8012ea8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	8b1a      	ldrh	r2, [r3, #24]
 8012e66:	4b3b      	ldr	r3, [pc, #236]	; (8012f54 <tcp_input+0x49c>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	881b      	ldrh	r3, [r3, #0]
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d11b      	bne.n	8012eaa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	8ada      	ldrh	r2, [r3, #22]
 8012e76:	4b37      	ldr	r3, [pc, #220]	; (8012f54 <tcp_input+0x49c>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	885b      	ldrh	r3, [r3, #2]
 8012e7c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d113      	bne.n	8012eaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	685a      	ldr	r2, [r3, #4]
 8012e86:	4b34      	ldr	r3, [pc, #208]	; (8012f58 <tcp_input+0x4a0>)
 8012e88:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d10d      	bne.n	8012eaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	4b31      	ldr	r3, [pc, #196]	; (8012f58 <tcp_input+0x4a0>)
 8012e94:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d107      	bne.n	8012eaa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012e9a:	69f8      	ldr	r0, [r7, #28]
 8012e9c:	f000 fb56 	bl	801354c <tcp_timewait_input>
        }
        pbuf_free(p);
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f7fd fc69 	bl	8010778 <pbuf_free>
        return;
 8012ea6:	e1fd      	b.n	80132a4 <tcp_input+0x7ec>
        continue;
 8012ea8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eaa:	69fb      	ldr	r3, [r7, #28]
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	61fb      	str	r3, [r7, #28]
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d1bc      	bne.n	8012e30 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012eba:	4b2f      	ldr	r3, [pc, #188]	; (8012f78 <tcp_input+0x4c0>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	617b      	str	r3, [r7, #20]
 8012ec0:	e02a      	b.n	8012f18 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	7a1b      	ldrb	r3, [r3, #8]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00c      	beq.n	8012ee4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	7a1a      	ldrb	r2, [r3, #8]
 8012ece:	4b22      	ldr	r3, [pc, #136]	; (8012f58 <tcp_input+0x4a0>)
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d002      	beq.n	8012ee4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	61bb      	str	r3, [r7, #24]
        continue;
 8012ee2:	e016      	b.n	8012f12 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	8ada      	ldrh	r2, [r3, #22]
 8012ee8:	4b1a      	ldr	r3, [pc, #104]	; (8012f54 <tcp_input+0x49c>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	885b      	ldrh	r3, [r3, #2]
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d10c      	bne.n	8012f0e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	4b17      	ldr	r3, [pc, #92]	; (8012f58 <tcp_input+0x4a0>)
 8012efa:	695b      	ldr	r3, [r3, #20]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d00f      	beq.n	8012f20 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00d      	beq.n	8012f22 <tcp_input+0x46a>
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d009      	beq.n	8012f22 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	617b      	str	r3, [r7, #20]
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1d1      	bne.n	8012ec2 <tcp_input+0x40a>
 8012f1e:	e000      	b.n	8012f22 <tcp_input+0x46a>
            break;
 8012f20:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d029      	beq.n	8012f7c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00a      	beq.n	8012f44 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	68da      	ldr	r2, [r3, #12]
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012f36:	4b10      	ldr	r3, [pc, #64]	; (8012f78 <tcp_input+0x4c0>)
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012f3e:	4a0e      	ldr	r2, [pc, #56]	; (8012f78 <tcp_input+0x4c0>)
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012f44:	6978      	ldr	r0, [r7, #20]
 8012f46:	f000 fa03 	bl	8013350 <tcp_listen_input>
      }
      pbuf_free(p);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7fd fc14 	bl	8010778 <pbuf_free>
      return;
 8012f50:	e1a8      	b.n	80132a4 <tcp_input+0x7ec>
 8012f52:	bf00      	nop
 8012f54:	20008694 	.word	0x20008694
 8012f58:	2000550c 	.word	0x2000550c
 8012f5c:	0801f260 	.word	0x0801f260
 8012f60:	0801f38c 	.word	0x0801f38c
 8012f64:	0801f2ac 	.word	0x0801f2ac
 8012f68:	20008678 	.word	0x20008678
 8012f6c:	0801f3b8 	.word	0x0801f3b8
 8012f70:	2000867c 	.word	0x2000867c
 8012f74:	0801f3e4 	.word	0x0801f3e4
 8012f78:	20008674 	.word	0x20008674
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f000 8158 	beq.w	8013234 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012f84:	4b95      	ldr	r3, [pc, #596]	; (80131dc <tcp_input+0x724>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	891a      	ldrh	r2, [r3, #8]
 8012f8e:	4b93      	ldr	r3, [pc, #588]	; (80131dc <tcp_input+0x724>)
 8012f90:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012f92:	4a92      	ldr	r2, [pc, #584]	; (80131dc <tcp_input+0x724>)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012f98:	4b91      	ldr	r3, [pc, #580]	; (80131e0 <tcp_input+0x728>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	4a8f      	ldr	r2, [pc, #572]	; (80131dc <tcp_input+0x724>)
 8012f9e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012fa0:	4b90      	ldr	r3, [pc, #576]	; (80131e4 <tcp_input+0x72c>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012fa6:	4b90      	ldr	r3, [pc, #576]	; (80131e8 <tcp_input+0x730>)
 8012fa8:	2200      	movs	r2, #0
 8012faa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012fac:	4b8f      	ldr	r3, [pc, #572]	; (80131ec <tcp_input+0x734>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012fb2:	4b8f      	ldr	r3, [pc, #572]	; (80131f0 <tcp_input+0x738>)
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	f003 0308 	and.w	r3, r3, #8
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d006      	beq.n	8012fcc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	7b5b      	ldrb	r3, [r3, #13]
 8012fc2:	f043 0301 	orr.w	r3, r3, #1
 8012fc6:	b2da      	uxtb	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d017      	beq.n	8013004 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012fd4:	69f8      	ldr	r0, [r7, #28]
 8012fd6:	f7ff f879 	bl	80120cc <tcp_process_refused_data>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	f113 0f0d 	cmn.w	r3, #13
 8012fe0:	d007      	beq.n	8012ff2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00c      	beq.n	8013004 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012fea:	4b82      	ldr	r3, [pc, #520]	; (80131f4 <tcp_input+0x73c>)
 8012fec:	881b      	ldrh	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d008      	beq.n	8013004 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	f040 80e3 	bne.w	80131c2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ffc:	69f8      	ldr	r0, [r7, #28]
 8012ffe:	f003 fe03 	bl	8016c08 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013002:	e0de      	b.n	80131c2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013004:	4a7c      	ldr	r2, [pc, #496]	; (80131f8 <tcp_input+0x740>)
 8013006:	69fb      	ldr	r3, [r7, #28]
 8013008:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801300a:	69f8      	ldr	r0, [r7, #28]
 801300c:	f000 fb18 	bl	8013640 <tcp_process>
 8013010:	4603      	mov	r3, r0
 8013012:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013014:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013018:	f113 0f0d 	cmn.w	r3, #13
 801301c:	f000 80d3 	beq.w	80131c6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013020:	4b71      	ldr	r3, [pc, #452]	; (80131e8 <tcp_input+0x730>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	f003 0308 	and.w	r3, r3, #8
 8013028:	2b00      	cmp	r3, #0
 801302a:	d015      	beq.n	8013058 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013032:	2b00      	cmp	r3, #0
 8013034:	d008      	beq.n	8013048 <tcp_input+0x590>
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801303c:	69fa      	ldr	r2, [r7, #28]
 801303e:	6912      	ldr	r2, [r2, #16]
 8013040:	f06f 010d 	mvn.w	r1, #13
 8013044:	4610      	mov	r0, r2
 8013046:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013048:	69f9      	ldr	r1, [r7, #28]
 801304a:	486c      	ldr	r0, [pc, #432]	; (80131fc <tcp_input+0x744>)
 801304c:	f7ff fbbc 	bl	80127c8 <tcp_pcb_remove>
        tcp_free(pcb);
 8013050:	69f8      	ldr	r0, [r7, #28]
 8013052:	f7fd ff9b 	bl	8010f8c <tcp_free>
 8013056:	e0da      	b.n	801320e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013058:	2300      	movs	r3, #0
 801305a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801305c:	4b63      	ldr	r3, [pc, #396]	; (80131ec <tcp_input+0x734>)
 801305e:	881b      	ldrh	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01d      	beq.n	80130a0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013064:	4b61      	ldr	r3, [pc, #388]	; (80131ec <tcp_input+0x734>)
 8013066:	881b      	ldrh	r3, [r3, #0]
 8013068:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013070:	2b00      	cmp	r3, #0
 8013072:	d00a      	beq.n	801308a <tcp_input+0x5d2>
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801307a:	69fa      	ldr	r2, [r7, #28]
 801307c:	6910      	ldr	r0, [r2, #16]
 801307e:	89fa      	ldrh	r2, [r7, #14]
 8013080:	69f9      	ldr	r1, [r7, #28]
 8013082:	4798      	blx	r3
 8013084:	4603      	mov	r3, r0
 8013086:	74fb      	strb	r3, [r7, #19]
 8013088:	e001      	b.n	801308e <tcp_input+0x5d6>
 801308a:	2300      	movs	r3, #0
 801308c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801308e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013092:	f113 0f0d 	cmn.w	r3, #13
 8013096:	f000 8098 	beq.w	80131ca <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801309a:	4b54      	ldr	r3, [pc, #336]	; (80131ec <tcp_input+0x734>)
 801309c:	2200      	movs	r2, #0
 801309e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80130a0:	69f8      	ldr	r0, [r7, #28]
 80130a2:	f000 f915 	bl	80132d0 <tcp_input_delayed_close>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f040 8090 	bne.w	80131ce <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80130ae:	4b4d      	ldr	r3, [pc, #308]	; (80131e4 <tcp_input+0x72c>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d041      	beq.n	801313a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d006      	beq.n	80130cc <tcp_input+0x614>
 80130be:	4b50      	ldr	r3, [pc, #320]	; (8013200 <tcp_input+0x748>)
 80130c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80130c4:	494f      	ldr	r1, [pc, #316]	; (8013204 <tcp_input+0x74c>)
 80130c6:	4850      	ldr	r0, [pc, #320]	; (8013208 <tcp_input+0x750>)
 80130c8:	f00a f808 	bl	801d0dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	8b5b      	ldrh	r3, [r3, #26]
 80130d0:	f003 0310 	and.w	r3, r3, #16
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d008      	beq.n	80130ea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80130d8:	4b42      	ldr	r3, [pc, #264]	; (80131e4 <tcp_input+0x72c>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4618      	mov	r0, r3
 80130de:	f7fd fb4b 	bl	8010778 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80130e2:	69f8      	ldr	r0, [r7, #28]
 80130e4:	f7fe fa3a 	bl	801155c <tcp_abort>
            goto aborted;
 80130e8:	e091      	b.n	801320e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00c      	beq.n	801310e <tcp_input+0x656>
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	6918      	ldr	r0, [r3, #16]
 80130fe:	4b39      	ldr	r3, [pc, #228]	; (80131e4 <tcp_input+0x72c>)
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	2300      	movs	r3, #0
 8013104:	69f9      	ldr	r1, [r7, #28]
 8013106:	47a0      	blx	r4
 8013108:	4603      	mov	r3, r0
 801310a:	74fb      	strb	r3, [r7, #19]
 801310c:	e008      	b.n	8013120 <tcp_input+0x668>
 801310e:	4b35      	ldr	r3, [pc, #212]	; (80131e4 <tcp_input+0x72c>)
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	2300      	movs	r3, #0
 8013114:	69f9      	ldr	r1, [r7, #28]
 8013116:	2000      	movs	r0, #0
 8013118:	f7ff f8ae 	bl	8012278 <tcp_recv_null>
 801311c:	4603      	mov	r3, r0
 801311e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013124:	f113 0f0d 	cmn.w	r3, #13
 8013128:	d053      	beq.n	80131d2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801312a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d003      	beq.n	801313a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013132:	4b2c      	ldr	r3, [pc, #176]	; (80131e4 <tcp_input+0x72c>)
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801313a:	4b2b      	ldr	r3, [pc, #172]	; (80131e8 <tcp_input+0x730>)
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	f003 0320 	and.w	r3, r3, #32
 8013142:	2b00      	cmp	r3, #0
 8013144:	d030      	beq.n	80131a8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013146:	69fb      	ldr	r3, [r7, #28]
 8013148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801314a:	2b00      	cmp	r3, #0
 801314c:	d009      	beq.n	8013162 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013152:	7b5a      	ldrb	r2, [r3, #13]
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013158:	f042 0220 	orr.w	r2, r2, #32
 801315c:	b2d2      	uxtb	r2, r2
 801315e:	735a      	strb	r2, [r3, #13]
 8013160:	e022      	b.n	80131a8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801316a:	d005      	beq.n	8013178 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013170:	3301      	adds	r3, #1
 8013172:	b29a      	uxth	r2, r3
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00b      	beq.n	801319a <tcp_input+0x6e2>
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	6918      	ldr	r0, [r3, #16]
 801318c:	2300      	movs	r3, #0
 801318e:	2200      	movs	r2, #0
 8013190:	69f9      	ldr	r1, [r7, #28]
 8013192:	47a0      	blx	r4
 8013194:	4603      	mov	r3, r0
 8013196:	74fb      	strb	r3, [r7, #19]
 8013198:	e001      	b.n	801319e <tcp_input+0x6e6>
 801319a:	2300      	movs	r3, #0
 801319c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801319e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131a2:	f113 0f0d 	cmn.w	r3, #13
 80131a6:	d016      	beq.n	80131d6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80131a8:	4b13      	ldr	r3, [pc, #76]	; (80131f8 <tcp_input+0x740>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80131ae:	69f8      	ldr	r0, [r7, #28]
 80131b0:	f000 f88e 	bl	80132d0 <tcp_input_delayed_close>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d128      	bne.n	801320c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80131ba:	69f8      	ldr	r0, [r7, #28]
 80131bc:	f002 ff20 	bl	8016000 <tcp_output>
 80131c0:	e025      	b.n	801320e <tcp_input+0x756>
        goto aborted;
 80131c2:	bf00      	nop
 80131c4:	e023      	b.n	801320e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80131c6:	bf00      	nop
 80131c8:	e021      	b.n	801320e <tcp_input+0x756>
              goto aborted;
 80131ca:	bf00      	nop
 80131cc:	e01f      	b.n	801320e <tcp_input+0x756>
          goto aborted;
 80131ce:	bf00      	nop
 80131d0:	e01d      	b.n	801320e <tcp_input+0x756>
            goto aborted;
 80131d2:	bf00      	nop
 80131d4:	e01b      	b.n	801320e <tcp_input+0x756>
              goto aborted;
 80131d6:	bf00      	nop
 80131d8:	e019      	b.n	801320e <tcp_input+0x756>
 80131da:	bf00      	nop
 80131dc:	20008684 	.word	0x20008684
 80131e0:	20008694 	.word	0x20008694
 80131e4:	200086b4 	.word	0x200086b4
 80131e8:	200086b1 	.word	0x200086b1
 80131ec:	200086ac 	.word	0x200086ac
 80131f0:	200086b0 	.word	0x200086b0
 80131f4:	200086ae 	.word	0x200086ae
 80131f8:	200086b8 	.word	0x200086b8
 80131fc:	20008678 	.word	0x20008678
 8013200:	0801f260 	.word	0x0801f260
 8013204:	0801f414 	.word	0x0801f414
 8013208:	0801f2ac 	.word	0x0801f2ac
          goto aborted;
 801320c:	bf00      	nop
    tcp_input_pcb = NULL;
 801320e:	4b27      	ldr	r3, [pc, #156]	; (80132ac <tcp_input+0x7f4>)
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013214:	4b26      	ldr	r3, [pc, #152]	; (80132b0 <tcp_input+0x7f8>)
 8013216:	2200      	movs	r2, #0
 8013218:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801321a:	4b26      	ldr	r3, [pc, #152]	; (80132b4 <tcp_input+0x7fc>)
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d03f      	beq.n	80132a2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013222:	4b24      	ldr	r3, [pc, #144]	; (80132b4 <tcp_input+0x7fc>)
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	4618      	mov	r0, r3
 8013228:	f7fd faa6 	bl	8010778 <pbuf_free>
      inseg.p = NULL;
 801322c:	4b21      	ldr	r3, [pc, #132]	; (80132b4 <tcp_input+0x7fc>)
 801322e:	2200      	movs	r2, #0
 8013230:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013232:	e036      	b.n	80132a2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013234:	4b20      	ldr	r3, [pc, #128]	; (80132b8 <tcp_input+0x800>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	899b      	ldrh	r3, [r3, #12]
 801323a:	b29b      	uxth	r3, r3
 801323c:	4618      	mov	r0, r3
 801323e:	f7fb fc44 	bl	800eaca <lwip_htons>
 8013242:	4603      	mov	r3, r0
 8013244:	b2db      	uxtb	r3, r3
 8013246:	f003 0304 	and.w	r3, r3, #4
 801324a:	2b00      	cmp	r3, #0
 801324c:	d118      	bne.n	8013280 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801324e:	4b1b      	ldr	r3, [pc, #108]	; (80132bc <tcp_input+0x804>)
 8013250:	6819      	ldr	r1, [r3, #0]
 8013252:	4b1b      	ldr	r3, [pc, #108]	; (80132c0 <tcp_input+0x808>)
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	461a      	mov	r2, r3
 8013258:	4b1a      	ldr	r3, [pc, #104]	; (80132c4 <tcp_input+0x80c>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801325e:	4b16      	ldr	r3, [pc, #88]	; (80132b8 <tcp_input+0x800>)
 8013260:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013262:	885b      	ldrh	r3, [r3, #2]
 8013264:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013266:	4a14      	ldr	r2, [pc, #80]	; (80132b8 <tcp_input+0x800>)
 8013268:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801326a:	8812      	ldrh	r2, [r2, #0]
 801326c:	b292      	uxth	r2, r2
 801326e:	9202      	str	r2, [sp, #8]
 8013270:	9301      	str	r3, [sp, #4]
 8013272:	4b15      	ldr	r3, [pc, #84]	; (80132c8 <tcp_input+0x810>)
 8013274:	9300      	str	r3, [sp, #0]
 8013276:	4b15      	ldr	r3, [pc, #84]	; (80132cc <tcp_input+0x814>)
 8013278:	4602      	mov	r2, r0
 801327a:	2000      	movs	r0, #0
 801327c:	f003 fc74 	bl	8016b68 <tcp_rst>
    pbuf_free(p);
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7fd fa79 	bl	8010778 <pbuf_free>
  return;
 8013286:	e00c      	b.n	80132a2 <tcp_input+0x7ea>
    goto dropped;
 8013288:	bf00      	nop
 801328a:	e006      	b.n	801329a <tcp_input+0x7e2>
    goto dropped;
 801328c:	bf00      	nop
 801328e:	e004      	b.n	801329a <tcp_input+0x7e2>
    goto dropped;
 8013290:	bf00      	nop
 8013292:	e002      	b.n	801329a <tcp_input+0x7e2>
      goto dropped;
 8013294:	bf00      	nop
 8013296:	e000      	b.n	801329a <tcp_input+0x7e2>
      goto dropped;
 8013298:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f7fd fa6c 	bl	8010778 <pbuf_free>
 80132a0:	e000      	b.n	80132a4 <tcp_input+0x7ec>
  return;
 80132a2:	bf00      	nop
}
 80132a4:	3724      	adds	r7, #36	; 0x24
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd90      	pop	{r4, r7, pc}
 80132aa:	bf00      	nop
 80132ac:	200086b8 	.word	0x200086b8
 80132b0:	200086b4 	.word	0x200086b4
 80132b4:	20008684 	.word	0x20008684
 80132b8:	20008694 	.word	0x20008694
 80132bc:	200086a8 	.word	0x200086a8
 80132c0:	200086ae 	.word	0x200086ae
 80132c4:	200086a4 	.word	0x200086a4
 80132c8:	2000551c 	.word	0x2000551c
 80132cc:	20005520 	.word	0x20005520

080132d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d106      	bne.n	80132ec <tcp_input_delayed_close+0x1c>
 80132de:	4b17      	ldr	r3, [pc, #92]	; (801333c <tcp_input_delayed_close+0x6c>)
 80132e0:	f240 225a 	movw	r2, #602	; 0x25a
 80132e4:	4916      	ldr	r1, [pc, #88]	; (8013340 <tcp_input_delayed_close+0x70>)
 80132e6:	4817      	ldr	r0, [pc, #92]	; (8013344 <tcp_input_delayed_close+0x74>)
 80132e8:	f009 fef8 	bl	801d0dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80132ec:	4b16      	ldr	r3, [pc, #88]	; (8013348 <tcp_input_delayed_close+0x78>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	f003 0310 	and.w	r3, r3, #16
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d01c      	beq.n	8013332 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	8b5b      	ldrh	r3, [r3, #26]
 80132fc:	f003 0310 	and.w	r3, r3, #16
 8013300:	2b00      	cmp	r3, #0
 8013302:	d10d      	bne.n	8013320 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801330a:	2b00      	cmp	r3, #0
 801330c:	d008      	beq.n	8013320 <tcp_input_delayed_close+0x50>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	6912      	ldr	r2, [r2, #16]
 8013318:	f06f 010e 	mvn.w	r1, #14
 801331c:	4610      	mov	r0, r2
 801331e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013320:	6879      	ldr	r1, [r7, #4]
 8013322:	480a      	ldr	r0, [pc, #40]	; (801334c <tcp_input_delayed_close+0x7c>)
 8013324:	f7ff fa50 	bl	80127c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7fd fe2f 	bl	8010f8c <tcp_free>
    return 1;
 801332e:	2301      	movs	r3, #1
 8013330:	e000      	b.n	8013334 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	0801f260 	.word	0x0801f260
 8013340:	0801f430 	.word	0x0801f430
 8013344:	0801f2ac 	.word	0x0801f2ac
 8013348:	200086b1 	.word	0x200086b1
 801334c:	20008678 	.word	0x20008678

08013350 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013350:	b590      	push	{r4, r7, lr}
 8013352:	b08b      	sub	sp, #44	; 0x2c
 8013354:	af04      	add	r7, sp, #16
 8013356:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013358:	4b6f      	ldr	r3, [pc, #444]	; (8013518 <tcp_listen_input+0x1c8>)
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	f003 0304 	and.w	r3, r3, #4
 8013360:	2b00      	cmp	r3, #0
 8013362:	f040 80d2 	bne.w	801350a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d106      	bne.n	801337a <tcp_listen_input+0x2a>
 801336c:	4b6b      	ldr	r3, [pc, #428]	; (801351c <tcp_listen_input+0x1cc>)
 801336e:	f240 2281 	movw	r2, #641	; 0x281
 8013372:	496b      	ldr	r1, [pc, #428]	; (8013520 <tcp_listen_input+0x1d0>)
 8013374:	486b      	ldr	r0, [pc, #428]	; (8013524 <tcp_listen_input+0x1d4>)
 8013376:	f009 feb1 	bl	801d0dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801337a:	4b67      	ldr	r3, [pc, #412]	; (8013518 <tcp_listen_input+0x1c8>)
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	f003 0310 	and.w	r3, r3, #16
 8013382:	2b00      	cmp	r3, #0
 8013384:	d019      	beq.n	80133ba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013386:	4b68      	ldr	r3, [pc, #416]	; (8013528 <tcp_listen_input+0x1d8>)
 8013388:	6819      	ldr	r1, [r3, #0]
 801338a:	4b68      	ldr	r3, [pc, #416]	; (801352c <tcp_listen_input+0x1dc>)
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	4b67      	ldr	r3, [pc, #412]	; (8013530 <tcp_listen_input+0x1e0>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013396:	4b67      	ldr	r3, [pc, #412]	; (8013534 <tcp_listen_input+0x1e4>)
 8013398:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801339a:	885b      	ldrh	r3, [r3, #2]
 801339c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801339e:	4a65      	ldr	r2, [pc, #404]	; (8013534 <tcp_listen_input+0x1e4>)
 80133a0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133a2:	8812      	ldrh	r2, [r2, #0]
 80133a4:	b292      	uxth	r2, r2
 80133a6:	9202      	str	r2, [sp, #8]
 80133a8:	9301      	str	r3, [sp, #4]
 80133aa:	4b63      	ldr	r3, [pc, #396]	; (8013538 <tcp_listen_input+0x1e8>)
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	4b63      	ldr	r3, [pc, #396]	; (801353c <tcp_listen_input+0x1ec>)
 80133b0:	4602      	mov	r2, r0
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f003 fbd8 	bl	8016b68 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80133b8:	e0a9      	b.n	801350e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80133ba:	4b57      	ldr	r3, [pc, #348]	; (8013518 <tcp_listen_input+0x1c8>)
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f003 0302 	and.w	r3, r3, #2
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f000 80a3 	beq.w	801350e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7d5b      	ldrb	r3, [r3, #21]
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7ff f877 	bl	80124c0 <tcp_alloc>
 80133d2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d111      	bne.n	80133fe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	699b      	ldr	r3, [r3, #24]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00a      	beq.n	80133f8 <tcp_listen_input+0xa8>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	699b      	ldr	r3, [r3, #24]
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	6910      	ldr	r0, [r2, #16]
 80133ea:	f04f 32ff 	mov.w	r2, #4294967295
 80133ee:	2100      	movs	r1, #0
 80133f0:	4798      	blx	r3
 80133f2:	4603      	mov	r3, r0
 80133f4:	73bb      	strb	r3, [r7, #14]
      return;
 80133f6:	e08b      	b.n	8013510 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80133f8:	23f0      	movs	r3, #240	; 0xf0
 80133fa:	73bb      	strb	r3, [r7, #14]
      return;
 80133fc:	e088      	b.n	8013510 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80133fe:	4b50      	ldr	r3, [pc, #320]	; (8013540 <tcp_listen_input+0x1f0>)
 8013400:	695a      	ldr	r2, [r3, #20]
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013406:	4b4e      	ldr	r3, [pc, #312]	; (8013540 <tcp_listen_input+0x1f0>)
 8013408:	691a      	ldr	r2, [r3, #16]
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	8ada      	ldrh	r2, [r3, #22]
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013416:	4b47      	ldr	r3, [pc, #284]	; (8013534 <tcp_listen_input+0x1e4>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	b29a      	uxth	r2, r3
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	2203      	movs	r2, #3
 8013426:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013428:	4b41      	ldr	r3, [pc, #260]	; (8013530 <tcp_listen_input+0x1e0>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	1c5a      	adds	r2, r3, #1
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801343a:	6978      	ldr	r0, [r7, #20]
 801343c:	f7ff fa58 	bl	80128f0 <tcp_next_iss>
 8013440:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	693a      	ldr	r2, [r7, #16]
 8013446:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	693a      	ldr	r2, [r7, #16]
 801344c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	693a      	ldr	r2, [r7, #16]
 8013452:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	693a      	ldr	r2, [r7, #16]
 8013458:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801345a:	4b35      	ldr	r3, [pc, #212]	; (8013530 <tcp_listen_input+0x1e0>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	1e5a      	subs	r2, r3, #1
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	691a      	ldr	r2, [r3, #16]
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7a5b      	ldrb	r3, [r3, #9]
 8013476:	f003 030c 	and.w	r3, r3, #12
 801347a:	b2da      	uxtb	r2, r3
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	7a1a      	ldrb	r2, [r3, #8]
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013488:	4b2e      	ldr	r3, [pc, #184]	; (8013544 <tcp_listen_input+0x1f4>)
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	60da      	str	r2, [r3, #12]
 8013490:	4a2c      	ldr	r2, [pc, #176]	; (8013544 <tcp_listen_input+0x1f4>)
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	6013      	str	r3, [r2, #0]
 8013496:	f003 fd27 	bl	8016ee8 <tcp_timer_needed>
 801349a:	4b2b      	ldr	r3, [pc, #172]	; (8013548 <tcp_listen_input+0x1f8>)
 801349c:	2201      	movs	r2, #1
 801349e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80134a0:	6978      	ldr	r0, [r7, #20]
 80134a2:	f001 fd8f 	bl	8014fc4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80134a6:	4b23      	ldr	r3, [pc, #140]	; (8013534 <tcp_listen_input+0x1e4>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	89db      	ldrh	r3, [r3, #14]
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	3304      	adds	r3, #4
 80134c8:	4618      	mov	r0, r3
 80134ca:	f007 fb69 	bl	801aba0 <ip4_route>
 80134ce:	4601      	mov	r1, r0
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	3304      	adds	r3, #4
 80134d4:	461a      	mov	r2, r3
 80134d6:	4620      	mov	r0, r4
 80134d8:	f7ff fa30 	bl	801293c <tcp_eff_send_mss_netif>
 80134dc:	4603      	mov	r3, r0
 80134de:	461a      	mov	r2, r3
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80134e4:	2112      	movs	r1, #18
 80134e6:	6978      	ldr	r0, [r7, #20]
 80134e8:	f002 fc9c 	bl	8015e24 <tcp_enqueue_flags>
 80134ec:	4603      	mov	r3, r0
 80134ee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80134f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d004      	beq.n	8013502 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80134f8:	2100      	movs	r1, #0
 80134fa:	6978      	ldr	r0, [r7, #20]
 80134fc:	f7fd ff70 	bl	80113e0 <tcp_abandon>
      return;
 8013500:	e006      	b.n	8013510 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013502:	6978      	ldr	r0, [r7, #20]
 8013504:	f002 fd7c 	bl	8016000 <tcp_output>
  return;
 8013508:	e001      	b.n	801350e <tcp_listen_input+0x1be>
    return;
 801350a:	bf00      	nop
 801350c:	e000      	b.n	8013510 <tcp_listen_input+0x1c0>
  return;
 801350e:	bf00      	nop
}
 8013510:	371c      	adds	r7, #28
 8013512:	46bd      	mov	sp, r7
 8013514:	bd90      	pop	{r4, r7, pc}
 8013516:	bf00      	nop
 8013518:	200086b0 	.word	0x200086b0
 801351c:	0801f260 	.word	0x0801f260
 8013520:	0801f458 	.word	0x0801f458
 8013524:	0801f2ac 	.word	0x0801f2ac
 8013528:	200086a8 	.word	0x200086a8
 801352c:	200086ae 	.word	0x200086ae
 8013530:	200086a4 	.word	0x200086a4
 8013534:	20008694 	.word	0x20008694
 8013538:	2000551c 	.word	0x2000551c
 801353c:	20005520 	.word	0x20005520
 8013540:	2000550c 	.word	0x2000550c
 8013544:	20008678 	.word	0x20008678
 8013548:	20008680 	.word	0x20008680

0801354c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	af04      	add	r7, sp, #16
 8013552:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013554:	4b2f      	ldr	r3, [pc, #188]	; (8013614 <tcp_timewait_input+0xc8>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	f003 0304 	and.w	r3, r3, #4
 801355c:	2b00      	cmp	r3, #0
 801355e:	d153      	bne.n	8013608 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d106      	bne.n	8013574 <tcp_timewait_input+0x28>
 8013566:	4b2c      	ldr	r3, [pc, #176]	; (8013618 <tcp_timewait_input+0xcc>)
 8013568:	f240 22ee 	movw	r2, #750	; 0x2ee
 801356c:	492b      	ldr	r1, [pc, #172]	; (801361c <tcp_timewait_input+0xd0>)
 801356e:	482c      	ldr	r0, [pc, #176]	; (8013620 <tcp_timewait_input+0xd4>)
 8013570:	f009 fdb4 	bl	801d0dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013574:	4b27      	ldr	r3, [pc, #156]	; (8013614 <tcp_timewait_input+0xc8>)
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f003 0302 	and.w	r3, r3, #2
 801357c:	2b00      	cmp	r3, #0
 801357e:	d02a      	beq.n	80135d6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013580:	4b28      	ldr	r3, [pc, #160]	; (8013624 <tcp_timewait_input+0xd8>)
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	2b00      	cmp	r3, #0
 801358c:	db2d      	blt.n	80135ea <tcp_timewait_input+0x9e>
 801358e:	4b25      	ldr	r3, [pc, #148]	; (8013624 <tcp_timewait_input+0xd8>)
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013596:	6879      	ldr	r1, [r7, #4]
 8013598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801359a:	440b      	add	r3, r1
 801359c:	1ad3      	subs	r3, r2, r3
 801359e:	2b00      	cmp	r3, #0
 80135a0:	dc23      	bgt.n	80135ea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135a2:	4b21      	ldr	r3, [pc, #132]	; (8013628 <tcp_timewait_input+0xdc>)
 80135a4:	6819      	ldr	r1, [r3, #0]
 80135a6:	4b21      	ldr	r3, [pc, #132]	; (801362c <tcp_timewait_input+0xe0>)
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	461a      	mov	r2, r3
 80135ac:	4b1d      	ldr	r3, [pc, #116]	; (8013624 <tcp_timewait_input+0xd8>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135b2:	4b1f      	ldr	r3, [pc, #124]	; (8013630 <tcp_timewait_input+0xe4>)
 80135b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135b6:	885b      	ldrh	r3, [r3, #2]
 80135b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135ba:	4a1d      	ldr	r2, [pc, #116]	; (8013630 <tcp_timewait_input+0xe4>)
 80135bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135be:	8812      	ldrh	r2, [r2, #0]
 80135c0:	b292      	uxth	r2, r2
 80135c2:	9202      	str	r2, [sp, #8]
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	4b1b      	ldr	r3, [pc, #108]	; (8013634 <tcp_timewait_input+0xe8>)
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4b1b      	ldr	r3, [pc, #108]	; (8013638 <tcp_timewait_input+0xec>)
 80135cc:	4602      	mov	r2, r0
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f003 faca 	bl	8016b68 <tcp_rst>
      return;
 80135d4:	e01b      	b.n	801360e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80135d6:	4b0f      	ldr	r3, [pc, #60]	; (8013614 <tcp_timewait_input+0xc8>)
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	f003 0301 	and.w	r3, r3, #1
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d003      	beq.n	80135ea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80135e2:	4b16      	ldr	r3, [pc, #88]	; (801363c <tcp_timewait_input+0xf0>)
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80135ea:	4b10      	ldr	r3, [pc, #64]	; (801362c <tcp_timewait_input+0xe0>)
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d00c      	beq.n	801360c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	8b5b      	ldrh	r3, [r3, #26]
 80135f6:	f043 0302 	orr.w	r3, r3, #2
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f002 fcfd 	bl	8016000 <tcp_output>
  }
  return;
 8013606:	e001      	b.n	801360c <tcp_timewait_input+0xc0>
    return;
 8013608:	bf00      	nop
 801360a:	e000      	b.n	801360e <tcp_timewait_input+0xc2>
  return;
 801360c:	bf00      	nop
}
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	200086b0 	.word	0x200086b0
 8013618:	0801f260 	.word	0x0801f260
 801361c:	0801f478 	.word	0x0801f478
 8013620:	0801f2ac 	.word	0x0801f2ac
 8013624:	200086a4 	.word	0x200086a4
 8013628:	200086a8 	.word	0x200086a8
 801362c:	200086ae 	.word	0x200086ae
 8013630:	20008694 	.word	0x20008694
 8013634:	2000551c 	.word	0x2000551c
 8013638:	20005520 	.word	0x20005520
 801363c:	2000866c 	.word	0x2000866c

08013640 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013640:	b590      	push	{r4, r7, lr}
 8013642:	b08d      	sub	sp, #52	; 0x34
 8013644:	af04      	add	r7, sp, #16
 8013646:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013648:	2300      	movs	r3, #0
 801364a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801364c:	2300      	movs	r3, #0
 801364e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d106      	bne.n	8013664 <tcp_process+0x24>
 8013656:	4b9d      	ldr	r3, [pc, #628]	; (80138cc <tcp_process+0x28c>)
 8013658:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801365c:	499c      	ldr	r1, [pc, #624]	; (80138d0 <tcp_process+0x290>)
 801365e:	489d      	ldr	r0, [pc, #628]	; (80138d4 <tcp_process+0x294>)
 8013660:	f009 fd3c 	bl	801d0dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013664:	4b9c      	ldr	r3, [pc, #624]	; (80138d8 <tcp_process+0x298>)
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	f003 0304 	and.w	r3, r3, #4
 801366c:	2b00      	cmp	r3, #0
 801366e:	d04e      	beq.n	801370e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7d1b      	ldrb	r3, [r3, #20]
 8013674:	2b02      	cmp	r3, #2
 8013676:	d108      	bne.n	801368a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801367c:	4b97      	ldr	r3, [pc, #604]	; (80138dc <tcp_process+0x29c>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d123      	bne.n	80136cc <tcp_process+0x8c>
        acceptable = 1;
 8013684:	2301      	movs	r3, #1
 8013686:	76fb      	strb	r3, [r7, #27]
 8013688:	e020      	b.n	80136cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801368e:	4b94      	ldr	r3, [pc, #592]	; (80138e0 <tcp_process+0x2a0>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	429a      	cmp	r2, r3
 8013694:	d102      	bne.n	801369c <tcp_process+0x5c>
        acceptable = 1;
 8013696:	2301      	movs	r3, #1
 8013698:	76fb      	strb	r3, [r7, #27]
 801369a:	e017      	b.n	80136cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801369c:	4b90      	ldr	r3, [pc, #576]	; (80138e0 <tcp_process+0x2a0>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	db10      	blt.n	80136cc <tcp_process+0x8c>
 80136aa:	4b8d      	ldr	r3, [pc, #564]	; (80138e0 <tcp_process+0x2a0>)
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b2:	6879      	ldr	r1, [r7, #4]
 80136b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80136b6:	440b      	add	r3, r1
 80136b8:	1ad3      	subs	r3, r2, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	dc06      	bgt.n	80136cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	8b5b      	ldrh	r3, [r3, #26]
 80136c2:	f043 0302 	orr.w	r3, r3, #2
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80136cc:	7efb      	ldrb	r3, [r7, #27]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d01b      	beq.n	801370a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	7d1b      	ldrb	r3, [r3, #20]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d106      	bne.n	80136e8 <tcp_process+0xa8>
 80136da:	4b7c      	ldr	r3, [pc, #496]	; (80138cc <tcp_process+0x28c>)
 80136dc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80136e0:	4980      	ldr	r1, [pc, #512]	; (80138e4 <tcp_process+0x2a4>)
 80136e2:	487c      	ldr	r0, [pc, #496]	; (80138d4 <tcp_process+0x294>)
 80136e4:	f009 fcfa 	bl	801d0dc <iprintf>
      recv_flags |= TF_RESET;
 80136e8:	4b7f      	ldr	r3, [pc, #508]	; (80138e8 <tcp_process+0x2a8>)
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	f043 0308 	orr.w	r3, r3, #8
 80136f0:	b2da      	uxtb	r2, r3
 80136f2:	4b7d      	ldr	r3, [pc, #500]	; (80138e8 <tcp_process+0x2a8>)
 80136f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	8b5b      	ldrh	r3, [r3, #26]
 80136fa:	f023 0301 	bic.w	r3, r3, #1
 80136fe:	b29a      	uxth	r2, r3
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013704:	f06f 030d 	mvn.w	r3, #13
 8013708:	e37a      	b.n	8013e00 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	e378      	b.n	8013e00 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801370e:	4b72      	ldr	r3, [pc, #456]	; (80138d8 <tcp_process+0x298>)
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	f003 0302 	and.w	r3, r3, #2
 8013716:	2b00      	cmp	r3, #0
 8013718:	d010      	beq.n	801373c <tcp_process+0xfc>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	7d1b      	ldrb	r3, [r3, #20]
 801371e:	2b02      	cmp	r3, #2
 8013720:	d00c      	beq.n	801373c <tcp_process+0xfc>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	7d1b      	ldrb	r3, [r3, #20]
 8013726:	2b03      	cmp	r3, #3
 8013728:	d008      	beq.n	801373c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	8b5b      	ldrh	r3, [r3, #26]
 801372e:	f043 0302 	orr.w	r3, r3, #2
 8013732:	b29a      	uxth	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	e361      	b.n	8013e00 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	8b5b      	ldrh	r3, [r3, #26]
 8013740:	f003 0310 	and.w	r3, r3, #16
 8013744:	2b00      	cmp	r3, #0
 8013746:	d103      	bne.n	8013750 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013748:	4b68      	ldr	r3, [pc, #416]	; (80138ec <tcp_process+0x2ac>)
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f001 fc2f 	bl	8014fc4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	7d1b      	ldrb	r3, [r3, #20]
 801376a:	3b02      	subs	r3, #2
 801376c:	2b07      	cmp	r3, #7
 801376e:	f200 8337 	bhi.w	8013de0 <tcp_process+0x7a0>
 8013772:	a201      	add	r2, pc, #4	; (adr r2, 8013778 <tcp_process+0x138>)
 8013774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013778:	08013799 	.word	0x08013799
 801377c:	080139c9 	.word	0x080139c9
 8013780:	08013b41 	.word	0x08013b41
 8013784:	08013b6b 	.word	0x08013b6b
 8013788:	08013c8f 	.word	0x08013c8f
 801378c:	08013b41 	.word	0x08013b41
 8013790:	08013d1b 	.word	0x08013d1b
 8013794:	08013dab 	.word	0x08013dab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013798:	4b4f      	ldr	r3, [pc, #316]	; (80138d8 <tcp_process+0x298>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	f003 0310 	and.w	r3, r3, #16
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 80e4 	beq.w	801396e <tcp_process+0x32e>
 80137a6:	4b4c      	ldr	r3, [pc, #304]	; (80138d8 <tcp_process+0x298>)
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	f003 0302 	and.w	r3, r3, #2
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 80dd 	beq.w	801396e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	4b48      	ldr	r3, [pc, #288]	; (80138dc <tcp_process+0x29c>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	429a      	cmp	r2, r3
 80137c0:	f040 80d5 	bne.w	801396e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80137c4:	4b46      	ldr	r3, [pc, #280]	; (80138e0 <tcp_process+0x2a0>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	1c5a      	adds	r2, r3, #1
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80137d6:	4b41      	ldr	r3, [pc, #260]	; (80138dc <tcp_process+0x29c>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80137de:	4b44      	ldr	r3, [pc, #272]	; (80138f0 <tcp_process+0x2b0>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	89db      	ldrh	r3, [r3, #14]
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80137f8:	4b39      	ldr	r3, [pc, #228]	; (80138e0 <tcp_process+0x2a0>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	1e5a      	subs	r2, r3, #1
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2204      	movs	r2, #4
 8013806:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	3304      	adds	r3, #4
 8013810:	4618      	mov	r0, r3
 8013812:	f007 f9c5 	bl	801aba0 <ip4_route>
 8013816:	4601      	mov	r1, r0
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	3304      	adds	r3, #4
 801381c:	461a      	mov	r2, r3
 801381e:	4620      	mov	r0, r4
 8013820:	f7ff f88c 	bl	801293c <tcp_eff_send_mss_netif>
 8013824:	4603      	mov	r3, r0
 8013826:	461a      	mov	r2, r3
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013830:	009a      	lsls	r2, r3, #2
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	f241 111c 	movw	r1, #4380	; 0x111c
 801383c:	428b      	cmp	r3, r1
 801383e:	bf38      	it	cc
 8013840:	460b      	movcc	r3, r1
 8013842:	429a      	cmp	r2, r3
 8013844:	d204      	bcs.n	8013850 <tcp_process+0x210>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	b29b      	uxth	r3, r3
 801384e:	e00d      	b.n	801386c <tcp_process+0x22c>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013854:	005b      	lsls	r3, r3, #1
 8013856:	f241 121c 	movw	r2, #4380	; 0x111c
 801385a:	4293      	cmp	r3, r2
 801385c:	d904      	bls.n	8013868 <tcp_process+0x228>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	b29b      	uxth	r3, r3
 8013866:	e001      	b.n	801386c <tcp_process+0x22c>
 8013868:	f241 131c 	movw	r3, #4380	; 0x111c
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013878:	2b00      	cmp	r3, #0
 801387a:	d106      	bne.n	801388a <tcp_process+0x24a>
 801387c:	4b13      	ldr	r3, [pc, #76]	; (80138cc <tcp_process+0x28c>)
 801387e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013882:	491c      	ldr	r1, [pc, #112]	; (80138f4 <tcp_process+0x2b4>)
 8013884:	4813      	ldr	r0, [pc, #76]	; (80138d4 <tcp_process+0x294>)
 8013886:	f009 fc29 	bl	801d0dc <iprintf>
        --pcb->snd_queuelen;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013890:	3b01      	subs	r3, #1
 8013892:	b29a      	uxth	r2, r3
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801389e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d12a      	bne.n	80138fc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d106      	bne.n	80138c0 <tcp_process+0x280>
 80138b2:	4b06      	ldr	r3, [pc, #24]	; (80138cc <tcp_process+0x28c>)
 80138b4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80138b8:	490f      	ldr	r1, [pc, #60]	; (80138f8 <tcp_process+0x2b8>)
 80138ba:	4806      	ldr	r0, [pc, #24]	; (80138d4 <tcp_process+0x294>)
 80138bc:	f009 fc0e 	bl	801d0dc <iprintf>
          pcb->unsent = rseg->next;
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80138c8:	e01c      	b.n	8013904 <tcp_process+0x2c4>
 80138ca:	bf00      	nop
 80138cc:	0801f260 	.word	0x0801f260
 80138d0:	0801f498 	.word	0x0801f498
 80138d4:	0801f2ac 	.word	0x0801f2ac
 80138d8:	200086b0 	.word	0x200086b0
 80138dc:	200086a8 	.word	0x200086a8
 80138e0:	200086a4 	.word	0x200086a4
 80138e4:	0801f4b4 	.word	0x0801f4b4
 80138e8:	200086b1 	.word	0x200086b1
 80138ec:	2000866c 	.word	0x2000866c
 80138f0:	20008694 	.word	0x20008694
 80138f4:	0801f4d4 	.word	0x0801f4d4
 80138f8:	0801f4ec 	.word	0x0801f4ec
        } else {
          pcb->unacked = rseg->next;
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013904:	69f8      	ldr	r0, [r7, #28]
 8013906:	f7fe fc72 	bl	80121ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801390e:	2b00      	cmp	r3, #0
 8013910:	d104      	bne.n	801391c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013918:	861a      	strh	r2, [r3, #48]	; 0x30
 801391a:	e006      	b.n	801392a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2200      	movs	r2, #0
 8013926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00a      	beq.n	801394a <tcp_process+0x30a>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	6910      	ldr	r0, [r2, #16]
 801393e:	2200      	movs	r2, #0
 8013940:	6879      	ldr	r1, [r7, #4]
 8013942:	4798      	blx	r3
 8013944:	4603      	mov	r3, r0
 8013946:	76bb      	strb	r3, [r7, #26]
 8013948:	e001      	b.n	801394e <tcp_process+0x30e>
 801394a:	2300      	movs	r3, #0
 801394c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801394e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013952:	f113 0f0d 	cmn.w	r3, #13
 8013956:	d102      	bne.n	801395e <tcp_process+0x31e>
          return ERR_ABRT;
 8013958:	f06f 030c 	mvn.w	r3, #12
 801395c:	e250      	b.n	8013e00 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	8b5b      	ldrh	r3, [r3, #26]
 8013962:	f043 0302 	orr.w	r3, r3, #2
 8013966:	b29a      	uxth	r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801396c:	e23a      	b.n	8013de4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801396e:	4b98      	ldr	r3, [pc, #608]	; (8013bd0 <tcp_process+0x590>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	f003 0310 	and.w	r3, r3, #16
 8013976:	2b00      	cmp	r3, #0
 8013978:	f000 8234 	beq.w	8013de4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801397c:	4b95      	ldr	r3, [pc, #596]	; (8013bd4 <tcp_process+0x594>)
 801397e:	6819      	ldr	r1, [r3, #0]
 8013980:	4b95      	ldr	r3, [pc, #596]	; (8013bd8 <tcp_process+0x598>)
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	461a      	mov	r2, r3
 8013986:	4b95      	ldr	r3, [pc, #596]	; (8013bdc <tcp_process+0x59c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801398c:	4b94      	ldr	r3, [pc, #592]	; (8013be0 <tcp_process+0x5a0>)
 801398e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013990:	885b      	ldrh	r3, [r3, #2]
 8013992:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013994:	4a92      	ldr	r2, [pc, #584]	; (8013be0 <tcp_process+0x5a0>)
 8013996:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013998:	8812      	ldrh	r2, [r2, #0]
 801399a:	b292      	uxth	r2, r2
 801399c:	9202      	str	r2, [sp, #8]
 801399e:	9301      	str	r3, [sp, #4]
 80139a0:	4b90      	ldr	r3, [pc, #576]	; (8013be4 <tcp_process+0x5a4>)
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	4b90      	ldr	r3, [pc, #576]	; (8013be8 <tcp_process+0x5a8>)
 80139a6:	4602      	mov	r2, r0
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f003 f8dd 	bl	8016b68 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80139b4:	2b05      	cmp	r3, #5
 80139b6:	f200 8215 	bhi.w	8013de4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2200      	movs	r2, #0
 80139be:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f002 fea9 	bl	8016718 <tcp_rexmit_rto>
      break;
 80139c6:	e20d      	b.n	8013de4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80139c8:	4b81      	ldr	r3, [pc, #516]	; (8013bd0 <tcp_process+0x590>)
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	f003 0310 	and.w	r3, r3, #16
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f000 80a1 	beq.w	8013b18 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139d6:	4b7f      	ldr	r3, [pc, #508]	; (8013bd4 <tcp_process+0x594>)
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	3b01      	subs	r3, #1
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	db7e      	blt.n	8013ae4 <tcp_process+0x4a4>
 80139e6:	4b7b      	ldr	r3, [pc, #492]	; (8013bd4 <tcp_process+0x594>)
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139ee:	1ad3      	subs	r3, r2, r3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	dc77      	bgt.n	8013ae4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2204      	movs	r2, #4
 80139f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d102      	bne.n	8013a08 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013a02:	23fa      	movs	r3, #250	; 0xfa
 8013a04:	76bb      	strb	r3, [r7, #26]
 8013a06:	e01d      	b.n	8013a44 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d106      	bne.n	8013a20 <tcp_process+0x3e0>
 8013a12:	4b76      	ldr	r3, [pc, #472]	; (8013bec <tcp_process+0x5ac>)
 8013a14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013a18:	4975      	ldr	r1, [pc, #468]	; (8013bf0 <tcp_process+0x5b0>)
 8013a1a:	4876      	ldr	r0, [pc, #472]	; (8013bf4 <tcp_process+0x5b4>)
 8013a1c:	f009 fb5e 	bl	801d0dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a24:	699b      	ldr	r3, [r3, #24]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00a      	beq.n	8013a40 <tcp_process+0x400>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a2e:	699b      	ldr	r3, [r3, #24]
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	6910      	ldr	r0, [r2, #16]
 8013a34:	2200      	movs	r2, #0
 8013a36:	6879      	ldr	r1, [r7, #4]
 8013a38:	4798      	blx	r3
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	76bb      	strb	r3, [r7, #26]
 8013a3e:	e001      	b.n	8013a44 <tcp_process+0x404>
 8013a40:	23f0      	movs	r3, #240	; 0xf0
 8013a42:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013a44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00a      	beq.n	8013a62 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013a4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a50:	f113 0f0d 	cmn.w	r3, #13
 8013a54:	d002      	beq.n	8013a5c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f7fd fd80 	bl	801155c <tcp_abort>
            }
            return ERR_ABRT;
 8013a5c:	f06f 030c 	mvn.w	r3, #12
 8013a60:	e1ce      	b.n	8013e00 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 fae0 	bl	8014028 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013a68:	4b63      	ldr	r3, [pc, #396]	; (8013bf8 <tcp_process+0x5b8>)
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d005      	beq.n	8013a7c <tcp_process+0x43c>
            recv_acked--;
 8013a70:	4b61      	ldr	r3, [pc, #388]	; (8013bf8 <tcp_process+0x5b8>)
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	3b01      	subs	r3, #1
 8013a76:	b29a      	uxth	r2, r3
 8013a78:	4b5f      	ldr	r3, [pc, #380]	; (8013bf8 <tcp_process+0x5b8>)
 8013a7a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a80:	009a      	lsls	r2, r3, #2
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a86:	005b      	lsls	r3, r3, #1
 8013a88:	f241 111c 	movw	r1, #4380	; 0x111c
 8013a8c:	428b      	cmp	r3, r1
 8013a8e:	bf38      	it	cc
 8013a90:	460b      	movcc	r3, r1
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d204      	bcs.n	8013aa0 <tcp_process+0x460>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	e00d      	b.n	8013abc <tcp_process+0x47c>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	f241 121c 	movw	r2, #4380	; 0x111c
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d904      	bls.n	8013ab8 <tcp_process+0x478>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	e001      	b.n	8013abc <tcp_process+0x47c>
 8013ab8:	f241 131c 	movw	r3, #4380	; 0x111c
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013ac2:	4b4e      	ldr	r3, [pc, #312]	; (8013bfc <tcp_process+0x5bc>)
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	f003 0320 	and.w	r3, r3, #32
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d037      	beq.n	8013b3e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	8b5b      	ldrh	r3, [r3, #26]
 8013ad2:	f043 0302 	orr.w	r3, r3, #2
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2207      	movs	r2, #7
 8013ae0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013ae2:	e02c      	b.n	8013b3e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ae4:	4b3b      	ldr	r3, [pc, #236]	; (8013bd4 <tcp_process+0x594>)
 8013ae6:	6819      	ldr	r1, [r3, #0]
 8013ae8:	4b3b      	ldr	r3, [pc, #236]	; (8013bd8 <tcp_process+0x598>)
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	461a      	mov	r2, r3
 8013aee:	4b3b      	ldr	r3, [pc, #236]	; (8013bdc <tcp_process+0x59c>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013af4:	4b3a      	ldr	r3, [pc, #232]	; (8013be0 <tcp_process+0x5a0>)
 8013af6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013af8:	885b      	ldrh	r3, [r3, #2]
 8013afa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013afc:	4a38      	ldr	r2, [pc, #224]	; (8013be0 <tcp_process+0x5a0>)
 8013afe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b00:	8812      	ldrh	r2, [r2, #0]
 8013b02:	b292      	uxth	r2, r2
 8013b04:	9202      	str	r2, [sp, #8]
 8013b06:	9301      	str	r3, [sp, #4]
 8013b08:	4b36      	ldr	r3, [pc, #216]	; (8013be4 <tcp_process+0x5a4>)
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	4b36      	ldr	r3, [pc, #216]	; (8013be8 <tcp_process+0x5a8>)
 8013b0e:	4602      	mov	r2, r0
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f003 f829 	bl	8016b68 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013b16:	e167      	b.n	8013de8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013b18:	4b2d      	ldr	r3, [pc, #180]	; (8013bd0 <tcp_process+0x590>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	f003 0302 	and.w	r3, r3, #2
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f000 8161 	beq.w	8013de8 <tcp_process+0x7a8>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2a:	1e5a      	subs	r2, r3, #1
 8013b2c:	4b2b      	ldr	r3, [pc, #172]	; (8013bdc <tcp_process+0x59c>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	f040 8159 	bne.w	8013de8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f002 fe10 	bl	801675c <tcp_rexmit>
      break;
 8013b3c:	e154      	b.n	8013de8 <tcp_process+0x7a8>
 8013b3e:	e153      	b.n	8013de8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 fa71 	bl	8014028 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013b46:	4b2d      	ldr	r3, [pc, #180]	; (8013bfc <tcp_process+0x5bc>)
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	f003 0320 	and.w	r3, r3, #32
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f000 814c 	beq.w	8013dec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	8b5b      	ldrh	r3, [r3, #26]
 8013b58:	f043 0302 	orr.w	r3, r3, #2
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2207      	movs	r2, #7
 8013b66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013b68:	e140      	b.n	8013dec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 fa5c 	bl	8014028 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013b70:	4b22      	ldr	r3, [pc, #136]	; (8013bfc <tcp_process+0x5bc>)
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	f003 0320 	and.w	r3, r3, #32
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d071      	beq.n	8013c60 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b7c:	4b14      	ldr	r3, [pc, #80]	; (8013bd0 <tcp_process+0x590>)
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	f003 0310 	and.w	r3, r3, #16
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d060      	beq.n	8013c4a <tcp_process+0x60a>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b8c:	4b11      	ldr	r3, [pc, #68]	; (8013bd4 <tcp_process+0x594>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d15a      	bne.n	8013c4a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d156      	bne.n	8013c4a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ba0:	f043 0302 	orr.w	r3, r3, #2
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f7fe fdbc 	bl	8012728 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013bb0:	4b13      	ldr	r3, [pc, #76]	; (8013c00 <tcp_process+0x5c0>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d105      	bne.n	8013bc6 <tcp_process+0x586>
 8013bba:	4b11      	ldr	r3, [pc, #68]	; (8013c00 <tcp_process+0x5c0>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	4a0f      	ldr	r2, [pc, #60]	; (8013c00 <tcp_process+0x5c0>)
 8013bc2:	6013      	str	r3, [r2, #0]
 8013bc4:	e02e      	b.n	8013c24 <tcp_process+0x5e4>
 8013bc6:	4b0e      	ldr	r3, [pc, #56]	; (8013c00 <tcp_process+0x5c0>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	617b      	str	r3, [r7, #20]
 8013bcc:	e027      	b.n	8013c1e <tcp_process+0x5de>
 8013bce:	bf00      	nop
 8013bd0:	200086b0 	.word	0x200086b0
 8013bd4:	200086a8 	.word	0x200086a8
 8013bd8:	200086ae 	.word	0x200086ae
 8013bdc:	200086a4 	.word	0x200086a4
 8013be0:	20008694 	.word	0x20008694
 8013be4:	2000551c 	.word	0x2000551c
 8013be8:	20005520 	.word	0x20005520
 8013bec:	0801f260 	.word	0x0801f260
 8013bf0:	0801f500 	.word	0x0801f500
 8013bf4:	0801f2ac 	.word	0x0801f2ac
 8013bf8:	200086ac 	.word	0x200086ac
 8013bfc:	200086b1 	.word	0x200086b1
 8013c00:	20008678 	.word	0x20008678
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d104      	bne.n	8013c18 <tcp_process+0x5d8>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	68da      	ldr	r2, [r3, #12]
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	60da      	str	r2, [r3, #12]
 8013c16:	e005      	b.n	8013c24 <tcp_process+0x5e4>
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	68db      	ldr	r3, [r3, #12]
 8013c1c:	617b      	str	r3, [r7, #20]
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d1ef      	bne.n	8013c04 <tcp_process+0x5c4>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	60da      	str	r2, [r3, #12]
 8013c2a:	4b77      	ldr	r3, [pc, #476]	; (8013e08 <tcp_process+0x7c8>)
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	220a      	movs	r2, #10
 8013c34:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013c36:	4b75      	ldr	r3, [pc, #468]	; (8013e0c <tcp_process+0x7cc>)
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	60da      	str	r2, [r3, #12]
 8013c3e:	4a73      	ldr	r2, [pc, #460]	; (8013e0c <tcp_process+0x7cc>)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6013      	str	r3, [r2, #0]
 8013c44:	f003 f950 	bl	8016ee8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013c48:	e0d2      	b.n	8013df0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	8b5b      	ldrh	r3, [r3, #26]
 8013c4e:	f043 0302 	orr.w	r3, r3, #2
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2208      	movs	r2, #8
 8013c5c:	751a      	strb	r2, [r3, #20]
      break;
 8013c5e:	e0c7      	b.n	8013df0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c60:	4b6b      	ldr	r3, [pc, #428]	; (8013e10 <tcp_process+0x7d0>)
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	f003 0310 	and.w	r3, r3, #16
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f000 80c1 	beq.w	8013df0 <tcp_process+0x7b0>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c72:	4b68      	ldr	r3, [pc, #416]	; (8013e14 <tcp_process+0x7d4>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	f040 80ba 	bne.w	8013df0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f040 80b5 	bne.w	8013df0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2206      	movs	r2, #6
 8013c8a:	751a      	strb	r2, [r3, #20]
      break;
 8013c8c:	e0b0      	b.n	8013df0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 f9ca 	bl	8014028 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013c94:	4b60      	ldr	r3, [pc, #384]	; (8013e18 <tcp_process+0x7d8>)
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	f003 0320 	and.w	r3, r3, #32
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	f000 80a9 	beq.w	8013df4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	8b5b      	ldrh	r3, [r3, #26]
 8013ca6:	f043 0302 	orr.w	r3, r3, #2
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7fe fd39 	bl	8012728 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013cb6:	4b59      	ldr	r3, [pc, #356]	; (8013e1c <tcp_process+0x7dc>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d105      	bne.n	8013ccc <tcp_process+0x68c>
 8013cc0:	4b56      	ldr	r3, [pc, #344]	; (8013e1c <tcp_process+0x7dc>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	4a55      	ldr	r2, [pc, #340]	; (8013e1c <tcp_process+0x7dc>)
 8013cc8:	6013      	str	r3, [r2, #0]
 8013cca:	e013      	b.n	8013cf4 <tcp_process+0x6b4>
 8013ccc:	4b53      	ldr	r3, [pc, #332]	; (8013e1c <tcp_process+0x7dc>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	613b      	str	r3, [r7, #16]
 8013cd2:	e00c      	b.n	8013cee <tcp_process+0x6ae>
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d104      	bne.n	8013ce8 <tcp_process+0x6a8>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	68da      	ldr	r2, [r3, #12]
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	60da      	str	r2, [r3, #12]
 8013ce6:	e005      	b.n	8013cf4 <tcp_process+0x6b4>
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	613b      	str	r3, [r7, #16]
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d1ef      	bne.n	8013cd4 <tcp_process+0x694>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	60da      	str	r2, [r3, #12]
 8013cfa:	4b43      	ldr	r3, [pc, #268]	; (8013e08 <tcp_process+0x7c8>)
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	220a      	movs	r2, #10
 8013d04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013d06:	4b41      	ldr	r3, [pc, #260]	; (8013e0c <tcp_process+0x7cc>)
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	60da      	str	r2, [r3, #12]
 8013d0e:	4a3f      	ldr	r2, [pc, #252]	; (8013e0c <tcp_process+0x7cc>)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6013      	str	r3, [r2, #0]
 8013d14:	f003 f8e8 	bl	8016ee8 <tcp_timer_needed>
      }
      break;
 8013d18:	e06c      	b.n	8013df4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f984 	bl	8014028 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013d20:	4b3b      	ldr	r3, [pc, #236]	; (8013e10 <tcp_process+0x7d0>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	f003 0310 	and.w	r3, r3, #16
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d065      	beq.n	8013df8 <tcp_process+0x7b8>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d30:	4b38      	ldr	r3, [pc, #224]	; (8013e14 <tcp_process+0x7d4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d15f      	bne.n	8013df8 <tcp_process+0x7b8>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d15b      	bne.n	8013df8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7fe fcf1 	bl	8012728 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013d46:	4b35      	ldr	r3, [pc, #212]	; (8013e1c <tcp_process+0x7dc>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d105      	bne.n	8013d5c <tcp_process+0x71c>
 8013d50:	4b32      	ldr	r3, [pc, #200]	; (8013e1c <tcp_process+0x7dc>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	4a31      	ldr	r2, [pc, #196]	; (8013e1c <tcp_process+0x7dc>)
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	e013      	b.n	8013d84 <tcp_process+0x744>
 8013d5c:	4b2f      	ldr	r3, [pc, #188]	; (8013e1c <tcp_process+0x7dc>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	60fb      	str	r3, [r7, #12]
 8013d62:	e00c      	b.n	8013d7e <tcp_process+0x73e>
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d104      	bne.n	8013d78 <tcp_process+0x738>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	68da      	ldr	r2, [r3, #12]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	60da      	str	r2, [r3, #12]
 8013d76:	e005      	b.n	8013d84 <tcp_process+0x744>
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	60fb      	str	r3, [r7, #12]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1ef      	bne.n	8013d64 <tcp_process+0x724>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	60da      	str	r2, [r3, #12]
 8013d8a:	4b1f      	ldr	r3, [pc, #124]	; (8013e08 <tcp_process+0x7c8>)
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	220a      	movs	r2, #10
 8013d94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013d96:	4b1d      	ldr	r3, [pc, #116]	; (8013e0c <tcp_process+0x7cc>)
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	60da      	str	r2, [r3, #12]
 8013d9e:	4a1b      	ldr	r2, [pc, #108]	; (8013e0c <tcp_process+0x7cc>)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	f003 f8a0 	bl	8016ee8 <tcp_timer_needed>
      }
      break;
 8013da8:	e026      	b.n	8013df8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f000 f93c 	bl	8014028 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013db0:	4b17      	ldr	r3, [pc, #92]	; (8013e10 <tcp_process+0x7d0>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f003 0310 	and.w	r3, r3, #16
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d01f      	beq.n	8013dfc <tcp_process+0x7bc>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013dc0:	4b14      	ldr	r3, [pc, #80]	; (8013e14 <tcp_process+0x7d4>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d119      	bne.n	8013dfc <tcp_process+0x7bc>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d115      	bne.n	8013dfc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013dd0:	4b11      	ldr	r3, [pc, #68]	; (8013e18 <tcp_process+0x7d8>)
 8013dd2:	781b      	ldrb	r3, [r3, #0]
 8013dd4:	f043 0310 	orr.w	r3, r3, #16
 8013dd8:	b2da      	uxtb	r2, r3
 8013dda:	4b0f      	ldr	r3, [pc, #60]	; (8013e18 <tcp_process+0x7d8>)
 8013ddc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013dde:	e00d      	b.n	8013dfc <tcp_process+0x7bc>
    default:
      break;
 8013de0:	bf00      	nop
 8013de2:	e00c      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013de4:	bf00      	nop
 8013de6:	e00a      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013de8:	bf00      	nop
 8013dea:	e008      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013dec:	bf00      	nop
 8013dee:	e006      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013df0:	bf00      	nop
 8013df2:	e004      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013df4:	bf00      	nop
 8013df6:	e002      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013df8:	bf00      	nop
 8013dfa:	e000      	b.n	8013dfe <tcp_process+0x7be>
      break;
 8013dfc:	bf00      	nop
  }
  return ERR_OK;
 8013dfe:	2300      	movs	r3, #0
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3724      	adds	r7, #36	; 0x24
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd90      	pop	{r4, r7, pc}
 8013e08:	20008680 	.word	0x20008680
 8013e0c:	2000867c 	.word	0x2000867c
 8013e10:	200086b0 	.word	0x200086b0
 8013e14:	200086a8 	.word	0x200086a8
 8013e18:	200086b1 	.word	0x200086b1
 8013e1c:	20008678 	.word	0x20008678

08013e20 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013e20:	b590      	push	{r4, r7, lr}
 8013e22:	b085      	sub	sp, #20
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d106      	bne.n	8013e3e <tcp_oos_insert_segment+0x1e>
 8013e30:	4b3b      	ldr	r3, [pc, #236]	; (8013f20 <tcp_oos_insert_segment+0x100>)
 8013e32:	f240 421f 	movw	r2, #1055	; 0x41f
 8013e36:	493b      	ldr	r1, [pc, #236]	; (8013f24 <tcp_oos_insert_segment+0x104>)
 8013e38:	483b      	ldr	r0, [pc, #236]	; (8013f28 <tcp_oos_insert_segment+0x108>)
 8013e3a:	f009 f94f 	bl	801d0dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	68db      	ldr	r3, [r3, #12]
 8013e42:	899b      	ldrh	r3, [r3, #12]
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fa fe3f 	bl	800eaca <lwip_htons>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	f003 0301 	and.w	r3, r3, #1
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d028      	beq.n	8013eaa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013e58:	6838      	ldr	r0, [r7, #0]
 8013e5a:	f7fe f9b3 	bl	80121c4 <tcp_segs_free>
    next = NULL;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	603b      	str	r3, [r7, #0]
 8013e62:	e056      	b.n	8013f12 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	68db      	ldr	r3, [r3, #12]
 8013e68:	899b      	ldrh	r3, [r3, #12]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7fa fe2c 	bl	800eaca <lwip_htons>
 8013e72:	4603      	mov	r3, r0
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	f003 0301 	and.w	r3, r3, #1
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d00d      	beq.n	8013e9a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	68db      	ldr	r3, [r3, #12]
 8013e82:	899b      	ldrh	r3, [r3, #12]
 8013e84:	b29c      	uxth	r4, r3
 8013e86:	2001      	movs	r0, #1
 8013e88:	f7fa fe1f 	bl	800eaca <lwip_htons>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	461a      	mov	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	4322      	orrs	r2, r4
 8013e96:	b292      	uxth	r2, r2
 8013e98:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013ea4:	68f8      	ldr	r0, [r7, #12]
 8013ea6:	f7fe f9a2 	bl	80121ee <tcp_seg_free>
    while (next &&
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d00e      	beq.n	8013ece <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	891b      	ldrh	r3, [r3, #8]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	4b1d      	ldr	r3, [pc, #116]	; (8013f2c <tcp_oos_insert_segment+0x10c>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	441a      	add	r2, r3
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	6839      	ldr	r1, [r7, #0]
 8013ec4:	8909      	ldrh	r1, [r1, #8]
 8013ec6:	440b      	add	r3, r1
 8013ec8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	daca      	bge.n	8013e64 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d01e      	beq.n	8013f12 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	891b      	ldrh	r3, [r3, #8]
 8013ed8:	461a      	mov	r2, r3
 8013eda:	4b14      	ldr	r3, [pc, #80]	; (8013f2c <tcp_oos_insert_segment+0x10c>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	441a      	add	r2, r3
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	dd12      	ble.n	8013f12 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	685b      	ldr	r3, [r3, #4]
 8013ef2:	b29a      	uxth	r2, r3
 8013ef4:	4b0d      	ldr	r3, [pc, #52]	; (8013f2c <tcp_oos_insert_segment+0x10c>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	1ad3      	subs	r3, r2, r3
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	685a      	ldr	r2, [r3, #4]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	891b      	ldrh	r3, [r3, #8]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	4610      	mov	r0, r2
 8013f0e:	f7fc faad 	bl	801046c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	683a      	ldr	r2, [r7, #0]
 8013f16:	601a      	str	r2, [r3, #0]
}
 8013f18:	bf00      	nop
 8013f1a:	3714      	adds	r7, #20
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd90      	pop	{r4, r7, pc}
 8013f20:	0801f260 	.word	0x0801f260
 8013f24:	0801f520 	.word	0x0801f520
 8013f28:	0801f2ac 	.word	0x0801f2ac
 8013f2c:	200086a4 	.word	0x200086a4

08013f30 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013f30:	b5b0      	push	{r4, r5, r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	607a      	str	r2, [r7, #4]
 8013f3c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013f3e:	e03e      	b.n	8013fbe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fc fc9a 	bl	8010888 <pbuf_clen>
 8013f54:	4603      	mov	r3, r0
 8013f56:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f5e:	8a7a      	ldrh	r2, [r7, #18]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d906      	bls.n	8013f72 <tcp_free_acked_segments+0x42>
 8013f64:	4b2a      	ldr	r3, [pc, #168]	; (8014010 <tcp_free_acked_segments+0xe0>)
 8013f66:	f240 4257 	movw	r2, #1111	; 0x457
 8013f6a:	492a      	ldr	r1, [pc, #168]	; (8014014 <tcp_free_acked_segments+0xe4>)
 8013f6c:	482a      	ldr	r0, [pc, #168]	; (8014018 <tcp_free_acked_segments+0xe8>)
 8013f6e:	f009 f8b5 	bl	801d0dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013f78:	8a7b      	ldrh	r3, [r7, #18]
 8013f7a:	1ad3      	subs	r3, r2, r3
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	891a      	ldrh	r2, [r3, #8]
 8013f88:	4b24      	ldr	r3, [pc, #144]	; (801401c <tcp_free_acked_segments+0xec>)
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	4b22      	ldr	r3, [pc, #136]	; (801401c <tcp_free_acked_segments+0xec>)
 8013f92:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013f94:	6978      	ldr	r0, [r7, #20]
 8013f96:	f7fe f92a 	bl	80121ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d00c      	beq.n	8013fbe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d109      	bne.n	8013fbe <tcp_free_acked_segments+0x8e>
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d106      	bne.n	8013fbe <tcp_free_acked_segments+0x8e>
 8013fb0:	4b17      	ldr	r3, [pc, #92]	; (8014010 <tcp_free_acked_segments+0xe0>)
 8013fb2:	f240 4261 	movw	r2, #1121	; 0x461
 8013fb6:	491a      	ldr	r1, [pc, #104]	; (8014020 <tcp_free_acked_segments+0xf0>)
 8013fb8:	4817      	ldr	r0, [pc, #92]	; (8014018 <tcp_free_acked_segments+0xe8>)
 8013fba:	f009 f88f 	bl	801d0dc <iprintf>
  while (seg_list != NULL &&
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d020      	beq.n	8014006 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fa fd92 	bl	800eaf4 <lwip_htonl>
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	891b      	ldrh	r3, [r3, #8]
 8013fd6:	461d      	mov	r5, r3
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	899b      	ldrh	r3, [r3, #12]
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fa fd72 	bl	800eaca <lwip_htons>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	f003 0303 	and.w	r3, r3, #3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <tcp_free_acked_segments+0xc6>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e000      	b.n	8013ff8 <tcp_free_acked_segments+0xc8>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	442b      	add	r3, r5
 8013ffa:	18e2      	adds	r2, r4, r3
 8013ffc:	4b09      	ldr	r3, [pc, #36]	; (8014024 <tcp_free_acked_segments+0xf4>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014002:	2b00      	cmp	r3, #0
 8014004:	dd9c      	ble.n	8013f40 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014006:	68bb      	ldr	r3, [r7, #8]
}
 8014008:	4618      	mov	r0, r3
 801400a:	3718      	adds	r7, #24
 801400c:	46bd      	mov	sp, r7
 801400e:	bdb0      	pop	{r4, r5, r7, pc}
 8014010:	0801f260 	.word	0x0801f260
 8014014:	0801f548 	.word	0x0801f548
 8014018:	0801f2ac 	.word	0x0801f2ac
 801401c:	200086ac 	.word	0x200086ac
 8014020:	0801f570 	.word	0x0801f570
 8014024:	200086a8 	.word	0x200086a8

08014028 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014028:	b5b0      	push	{r4, r5, r7, lr}
 801402a:	b094      	sub	sp, #80	; 0x50
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014030:	2300      	movs	r3, #0
 8014032:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d106      	bne.n	8014048 <tcp_receive+0x20>
 801403a:	4b91      	ldr	r3, [pc, #580]	; (8014280 <tcp_receive+0x258>)
 801403c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014040:	4990      	ldr	r1, [pc, #576]	; (8014284 <tcp_receive+0x25c>)
 8014042:	4891      	ldr	r0, [pc, #580]	; (8014288 <tcp_receive+0x260>)
 8014044:	f009 f84a 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	7d1b      	ldrb	r3, [r3, #20]
 801404c:	2b03      	cmp	r3, #3
 801404e:	d806      	bhi.n	801405e <tcp_receive+0x36>
 8014050:	4b8b      	ldr	r3, [pc, #556]	; (8014280 <tcp_receive+0x258>)
 8014052:	f240 427c 	movw	r2, #1148	; 0x47c
 8014056:	498d      	ldr	r1, [pc, #564]	; (801428c <tcp_receive+0x264>)
 8014058:	488b      	ldr	r0, [pc, #556]	; (8014288 <tcp_receive+0x260>)
 801405a:	f009 f83f 	bl	801d0dc <iprintf>

  if (flags & TCP_ACK) {
 801405e:	4b8c      	ldr	r3, [pc, #560]	; (8014290 <tcp_receive+0x268>)
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	f003 0310 	and.w	r3, r3, #16
 8014066:	2b00      	cmp	r3, #0
 8014068:	f000 8264 	beq.w	8014534 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014072:	461a      	mov	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014078:	4413      	add	r3, r2
 801407a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014080:	4b84      	ldr	r3, [pc, #528]	; (8014294 <tcp_receive+0x26c>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	1ad3      	subs	r3, r2, r3
 8014086:	2b00      	cmp	r3, #0
 8014088:	db1b      	blt.n	80140c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801408e:	4b81      	ldr	r3, [pc, #516]	; (8014294 <tcp_receive+0x26c>)
 8014090:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014092:	429a      	cmp	r2, r3
 8014094:	d106      	bne.n	80140a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801409a:	4b7f      	ldr	r3, [pc, #508]	; (8014298 <tcp_receive+0x270>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	db0e      	blt.n	80140c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80140a8:	4b7b      	ldr	r3, [pc, #492]	; (8014298 <tcp_receive+0x270>)
 80140aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d125      	bne.n	80140fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80140b0:	4b7a      	ldr	r3, [pc, #488]	; (801429c <tcp_receive+0x274>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	89db      	ldrh	r3, [r3, #14]
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140be:	429a      	cmp	r2, r3
 80140c0:	d91c      	bls.n	80140fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80140c2:	4b76      	ldr	r3, [pc, #472]	; (801429c <tcp_receive+0x274>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	89db      	ldrh	r3, [r3, #14]
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140dc:	429a      	cmp	r2, r3
 80140de:	d205      	bcs.n	80140ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80140ec:	4b69      	ldr	r3, [pc, #420]	; (8014294 <tcp_receive+0x26c>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80140f4:	4b68      	ldr	r3, [pc, #416]	; (8014298 <tcp_receive+0x270>)
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80140fc:	4b66      	ldr	r3, [pc, #408]	; (8014298 <tcp_receive+0x270>)
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014104:	1ad3      	subs	r3, r2, r3
 8014106:	2b00      	cmp	r3, #0
 8014108:	dc58      	bgt.n	80141bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801410a:	4b65      	ldr	r3, [pc, #404]	; (80142a0 <tcp_receive+0x278>)
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d14b      	bne.n	80141aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801411c:	4413      	add	r3, r2
 801411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014120:	429a      	cmp	r2, r3
 8014122:	d142      	bne.n	80141aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801412a:	2b00      	cmp	r3, #0
 801412c:	db3d      	blt.n	80141aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014132:	4b59      	ldr	r3, [pc, #356]	; (8014298 <tcp_receive+0x270>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	429a      	cmp	r2, r3
 8014138:	d137      	bne.n	80141aa <tcp_receive+0x182>
              found_dupack = 1;
 801413a:	2301      	movs	r3, #1
 801413c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014144:	2bff      	cmp	r3, #255	; 0xff
 8014146:	d007      	beq.n	8014158 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801414e:	3301      	adds	r3, #1
 8014150:	b2da      	uxtb	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801415e:	2b03      	cmp	r3, #3
 8014160:	d91b      	bls.n	801419a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801416c:	4413      	add	r3, r2
 801416e:	b29a      	uxth	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014176:	429a      	cmp	r2, r3
 8014178:	d30a      	bcc.n	8014190 <tcp_receive+0x168>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014184:	4413      	add	r3, r2
 8014186:	b29a      	uxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801418e:	e004      	b.n	801419a <tcp_receive+0x172>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014196:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d902      	bls.n	80141aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f002 fb45 	bl	8016834 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80141aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f040 8161 	bne.w	8014474 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2200      	movs	r2, #0
 80141b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80141ba:	e15b      	b.n	8014474 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80141bc:	4b36      	ldr	r3, [pc, #216]	; (8014298 <tcp_receive+0x270>)
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	3b01      	subs	r3, #1
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f2c0 814e 	blt.w	801446a <tcp_receive+0x442>
 80141ce:	4b32      	ldr	r3, [pc, #200]	; (8014298 <tcp_receive+0x270>)
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f300 8146 	bgt.w	801446a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	8b5b      	ldrh	r3, [r3, #26]
 80141e2:	f003 0304 	and.w	r3, r3, #4
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d010      	beq.n	801420c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	8b5b      	ldrh	r3, [r3, #26]
 80141ee:	f023 0304 	bic.w	r3, r3, #4
 80141f2:	b29a      	uxth	r2, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2200      	movs	r2, #0
 8014208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801421a:	10db      	asrs	r3, r3, #3
 801421c:	b21b      	sxth	r3, r3
 801421e:	b29a      	uxth	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014226:	b29b      	uxth	r3, r3
 8014228:	4413      	add	r3, r2
 801422a:	b29b      	uxth	r3, r3
 801422c:	b21a      	sxth	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014234:	4b18      	ldr	r3, [pc, #96]	; (8014298 <tcp_receive+0x270>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	b29a      	uxth	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801423e:	b29b      	uxth	r3, r3
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2200      	movs	r2, #0
 8014248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801424c:	4b12      	ldr	r3, [pc, #72]	; (8014298 <tcp_receive+0x270>)
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	7d1b      	ldrb	r3, [r3, #20]
 8014258:	2b03      	cmp	r3, #3
 801425a:	f240 8097 	bls.w	801438c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801426a:	429a      	cmp	r2, r3
 801426c:	d245      	bcs.n	80142fa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8b5b      	ldrh	r3, [r3, #26]
 8014272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014276:	2b00      	cmp	r3, #0
 8014278:	d014      	beq.n	80142a4 <tcp_receive+0x27c>
 801427a:	2301      	movs	r3, #1
 801427c:	e013      	b.n	80142a6 <tcp_receive+0x27e>
 801427e:	bf00      	nop
 8014280:	0801f260 	.word	0x0801f260
 8014284:	0801f590 	.word	0x0801f590
 8014288:	0801f2ac 	.word	0x0801f2ac
 801428c:	0801f5ac 	.word	0x0801f5ac
 8014290:	200086b0 	.word	0x200086b0
 8014294:	200086a4 	.word	0x200086a4
 8014298:	200086a8 	.word	0x200086a8
 801429c:	20008694 	.word	0x20008694
 80142a0:	200086ae 	.word	0x200086ae
 80142a4:	2302      	movs	r3, #2
 80142a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80142aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142b4:	fb12 f303 	smulbb	r3, r2, r3
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80142bc:	4293      	cmp	r3, r2
 80142be:	bf28      	it	cs
 80142c0:	4613      	movcs	r3, r2
 80142c2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142cc:	4413      	add	r3, r2
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d309      	bcc.n	80142ee <tcp_receive+0x2c6>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142e2:	4413      	add	r3, r2
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80142ec:	e04e      	b.n	801438c <tcp_receive+0x364>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80142f8:	e048      	b.n	801438c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014300:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014302:	4413      	add	r3, r2
 8014304:	b29a      	uxth	r2, r3
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801430c:	429a      	cmp	r2, r3
 801430e:	d309      	bcc.n	8014324 <tcp_receive+0x2fc>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014318:	4413      	add	r3, r2
 801431a:	b29a      	uxth	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014322:	e004      	b.n	801432e <tcp_receive+0x306>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801432a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801433a:	429a      	cmp	r2, r3
 801433c:	d326      	bcc.n	801438c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	b29a      	uxth	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801435e:	4413      	add	r3, r2
 8014360:	b29a      	uxth	r2, r3
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014368:	429a      	cmp	r2, r3
 801436a:	d30a      	bcc.n	8014382 <tcp_receive+0x35a>
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014376:	4413      	add	r3, r2
 8014378:	b29a      	uxth	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014380:	e004      	b.n	801438c <tcp_receive+0x364>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014388:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014394:	4a98      	ldr	r2, [pc, #608]	; (80145f8 <tcp_receive+0x5d0>)
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7ff fdca 	bl	8013f30 <tcp_free_acked_segments>
 801439c:	4602      	mov	r2, r0
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143aa:	4a94      	ldr	r2, [pc, #592]	; (80145fc <tcp_receive+0x5d4>)
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7ff fdbf 	bl	8013f30 <tcp_free_acked_segments>
 80143b2:	4602      	mov	r2, r0
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d104      	bne.n	80143ca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143c6:	861a      	strh	r2, [r3, #48]	; 0x30
 80143c8:	e002      	b.n	80143d0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2200      	movs	r2, #0
 80143ce:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2200      	movs	r2, #0
 80143d4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d103      	bne.n	80143e6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80143ec:	4b84      	ldr	r3, [pc, #528]	; (8014600 <tcp_receive+0x5d8>)
 80143ee:	881b      	ldrh	r3, [r3, #0]
 80143f0:	4413      	add	r3, r2
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	8b5b      	ldrh	r3, [r3, #26]
 80143fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014402:	2b00      	cmp	r3, #0
 8014404:	d035      	beq.n	8014472 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801440a:	2b00      	cmp	r3, #0
 801440c:	d118      	bne.n	8014440 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014412:	2b00      	cmp	r3, #0
 8014414:	d00c      	beq.n	8014430 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4618      	mov	r0, r3
 8014424:	f7fa fb66 	bl	800eaf4 <lwip_htonl>
 8014428:	4603      	mov	r3, r0
 801442a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801442c:	2b00      	cmp	r3, #0
 801442e:	dc20      	bgt.n	8014472 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8b5b      	ldrh	r3, [r3, #26]
 8014434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014438:	b29a      	uxth	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801443e:	e018      	b.n	8014472 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	4618      	mov	r0, r3
 801444e:	f7fa fb51 	bl	800eaf4 <lwip_htonl>
 8014452:	4603      	mov	r3, r0
 8014454:	1ae3      	subs	r3, r4, r3
 8014456:	2b00      	cmp	r3, #0
 8014458:	dc0b      	bgt.n	8014472 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	8b5b      	ldrh	r3, [r3, #26]
 801445e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014462:	b29a      	uxth	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014468:	e003      	b.n	8014472 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f002 fbcc 	bl	8016c08 <tcp_send_empty_ack>
 8014470:	e000      	b.n	8014474 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014472:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014478:	2b00      	cmp	r3, #0
 801447a:	d05b      	beq.n	8014534 <tcp_receive+0x50c>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014480:	4b60      	ldr	r3, [pc, #384]	; (8014604 <tcp_receive+0x5dc>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	da54      	bge.n	8014534 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801448a:	4b5f      	ldr	r3, [pc, #380]	; (8014608 <tcp_receive+0x5e0>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	b29a      	uxth	r2, r3
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014494:	b29b      	uxth	r3, r3
 8014496:	1ad3      	subs	r3, r2, r3
 8014498:	b29b      	uxth	r3, r3
 801449a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801449e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80144a8:	10db      	asrs	r3, r3, #3
 80144aa:	b21b      	sxth	r3, r3
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80144bc:	b29a      	uxth	r2, r3
 80144be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80144c2:	4413      	add	r3, r2
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	b21a      	sxth	r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80144cc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	da05      	bge.n	80144e0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80144d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80144d8:	425b      	negs	r3, r3
 80144da:	b29b      	uxth	r3, r3
 80144dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80144e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80144ea:	109b      	asrs	r3, r3, #2
 80144ec:	b21b      	sxth	r3, r3
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	1ad3      	subs	r3, r2, r3
 80144f2:	b29b      	uxth	r3, r3
 80144f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80144fe:	b29a      	uxth	r2, r3
 8014500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014504:	4413      	add	r3, r2
 8014506:	b29b      	uxth	r3, r3
 8014508:	b21a      	sxth	r2, r3
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014514:	10db      	asrs	r3, r3, #3
 8014516:	b21b      	sxth	r3, r3
 8014518:	b29a      	uxth	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014520:	b29b      	uxth	r3, r3
 8014522:	4413      	add	r3, r2
 8014524:	b29b      	uxth	r3, r3
 8014526:	b21a      	sxth	r2, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014534:	4b35      	ldr	r3, [pc, #212]	; (801460c <tcp_receive+0x5e4>)
 8014536:	881b      	ldrh	r3, [r3, #0]
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 84e2 	beq.w	8014f02 <tcp_receive+0xeda>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	7d1b      	ldrb	r3, [r3, #20]
 8014542:	2b06      	cmp	r3, #6
 8014544:	f200 84dd 	bhi.w	8014f02 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801454c:	4b30      	ldr	r3, [pc, #192]	; (8014610 <tcp_receive+0x5e8>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	1ad3      	subs	r3, r2, r3
 8014552:	3b01      	subs	r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	f2c0 808f 	blt.w	8014678 <tcp_receive+0x650>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801455e:	4b2b      	ldr	r3, [pc, #172]	; (801460c <tcp_receive+0x5e4>)
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	4619      	mov	r1, r3
 8014564:	4b2a      	ldr	r3, [pc, #168]	; (8014610 <tcp_receive+0x5e8>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	440b      	add	r3, r1
 801456a:	1ad3      	subs	r3, r2, r3
 801456c:	3301      	adds	r3, #1
 801456e:	2b00      	cmp	r3, #0
 8014570:	f300 8082 	bgt.w	8014678 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014574:	4b27      	ldr	r3, [pc, #156]	; (8014614 <tcp_receive+0x5ec>)
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801457e:	4b24      	ldr	r3, [pc, #144]	; (8014610 <tcp_receive+0x5e8>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014586:	4b23      	ldr	r3, [pc, #140]	; (8014614 <tcp_receive+0x5ec>)
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d106      	bne.n	801459c <tcp_receive+0x574>
 801458e:	4b22      	ldr	r3, [pc, #136]	; (8014618 <tcp_receive+0x5f0>)
 8014590:	f240 5294 	movw	r2, #1428	; 0x594
 8014594:	4921      	ldr	r1, [pc, #132]	; (801461c <tcp_receive+0x5f4>)
 8014596:	4822      	ldr	r0, [pc, #136]	; (8014620 <tcp_receive+0x5f8>)
 8014598:	f008 fda0 	bl	801d0dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d906      	bls.n	80145b4 <tcp_receive+0x58c>
 80145a6:	4b1c      	ldr	r3, [pc, #112]	; (8014618 <tcp_receive+0x5f0>)
 80145a8:	f240 5295 	movw	r2, #1429	; 0x595
 80145ac:	491d      	ldr	r1, [pc, #116]	; (8014624 <tcp_receive+0x5fc>)
 80145ae:	481c      	ldr	r0, [pc, #112]	; (8014620 <tcp_receive+0x5f8>)
 80145b0:	f008 fd94 	bl	801d0dc <iprintf>
      off = (u16_t)off32;
 80145b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80145ba:	4b16      	ldr	r3, [pc, #88]	; (8014614 <tcp_receive+0x5ec>)
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	891b      	ldrh	r3, [r3, #8]
 80145c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d906      	bls.n	80145d6 <tcp_receive+0x5ae>
 80145c8:	4b13      	ldr	r3, [pc, #76]	; (8014618 <tcp_receive+0x5f0>)
 80145ca:	f240 5297 	movw	r2, #1431	; 0x597
 80145ce:	4916      	ldr	r1, [pc, #88]	; (8014628 <tcp_receive+0x600>)
 80145d0:	4813      	ldr	r0, [pc, #76]	; (8014620 <tcp_receive+0x5f8>)
 80145d2:	f008 fd83 	bl	801d0dc <iprintf>
      inseg.len -= off;
 80145d6:	4b0f      	ldr	r3, [pc, #60]	; (8014614 <tcp_receive+0x5ec>)
 80145d8:	891a      	ldrh	r2, [r3, #8]
 80145da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145de:	1ad3      	subs	r3, r2, r3
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	4b0c      	ldr	r3, [pc, #48]	; (8014614 <tcp_receive+0x5ec>)
 80145e4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80145e6:	4b0b      	ldr	r3, [pc, #44]	; (8014614 <tcp_receive+0x5ec>)
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	891a      	ldrh	r2, [r3, #8]
 80145ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80145f4:	e02a      	b.n	801464c <tcp_receive+0x624>
 80145f6:	bf00      	nop
 80145f8:	0801f5c8 	.word	0x0801f5c8
 80145fc:	0801f5d0 	.word	0x0801f5d0
 8014600:	200086ac 	.word	0x200086ac
 8014604:	200086a8 	.word	0x200086a8
 8014608:	2000866c 	.word	0x2000866c
 801460c:	200086ae 	.word	0x200086ae
 8014610:	200086a4 	.word	0x200086a4
 8014614:	20008684 	.word	0x20008684
 8014618:	0801f260 	.word	0x0801f260
 801461c:	0801f5d8 	.word	0x0801f5d8
 8014620:	0801f2ac 	.word	0x0801f2ac
 8014624:	0801f5e8 	.word	0x0801f5e8
 8014628:	0801f5f8 	.word	0x0801f5f8
        off -= p->len;
 801462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801462e:	895b      	ldrh	r3, [r3, #10]
 8014630:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801463a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801463e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014642:	2200      	movs	r2, #0
 8014644:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801464c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801464e:	895b      	ldrh	r3, [r3, #10]
 8014650:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014654:	429a      	cmp	r2, r3
 8014656:	d8e9      	bhi.n	801462c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801465c:	4619      	mov	r1, r3
 801465e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014660:	f7fc f804 	bl	801066c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014668:	4a91      	ldr	r2, [pc, #580]	; (80148b0 <tcp_receive+0x888>)
 801466a:	6013      	str	r3, [r2, #0]
 801466c:	4b91      	ldr	r3, [pc, #580]	; (80148b4 <tcp_receive+0x88c>)
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	4a8f      	ldr	r2, [pc, #572]	; (80148b0 <tcp_receive+0x888>)
 8014672:	6812      	ldr	r2, [r2, #0]
 8014674:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014676:	e00d      	b.n	8014694 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014678:	4b8d      	ldr	r3, [pc, #564]	; (80148b0 <tcp_receive+0x888>)
 801467a:	681a      	ldr	r2, [r3, #0]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	1ad3      	subs	r3, r2, r3
 8014682:	2b00      	cmp	r3, #0
 8014684:	da06      	bge.n	8014694 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	8b5b      	ldrh	r3, [r3, #26]
 801468a:	f043 0302 	orr.w	r3, r3, #2
 801468e:	b29a      	uxth	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014694:	4b86      	ldr	r3, [pc, #536]	; (80148b0 <tcp_receive+0x888>)
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	2b00      	cmp	r3, #0
 80146a0:	f2c0 842a 	blt.w	8014ef8 <tcp_receive+0xed0>
 80146a4:	4b82      	ldr	r3, [pc, #520]	; (80148b0 <tcp_receive+0x888>)
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ac:	6879      	ldr	r1, [r7, #4]
 80146ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146b0:	440b      	add	r3, r1
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	3301      	adds	r3, #1
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	f300 841e 	bgt.w	8014ef8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146c0:	4b7b      	ldr	r3, [pc, #492]	; (80148b0 <tcp_receive+0x888>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	f040 829a 	bne.w	8014bfe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80146ca:	4b7a      	ldr	r3, [pc, #488]	; (80148b4 <tcp_receive+0x88c>)
 80146cc:	891c      	ldrh	r4, [r3, #8]
 80146ce:	4b79      	ldr	r3, [pc, #484]	; (80148b4 <tcp_receive+0x88c>)
 80146d0:	68db      	ldr	r3, [r3, #12]
 80146d2:	899b      	ldrh	r3, [r3, #12]
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fa f9f7 	bl	800eaca <lwip_htons>
 80146dc:	4603      	mov	r3, r0
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	f003 0303 	and.w	r3, r3, #3
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d001      	beq.n	80146ec <tcp_receive+0x6c4>
 80146e8:	2301      	movs	r3, #1
 80146ea:	e000      	b.n	80146ee <tcp_receive+0x6c6>
 80146ec:	2300      	movs	r3, #0
 80146ee:	4423      	add	r3, r4
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	4b71      	ldr	r3, [pc, #452]	; (80148b8 <tcp_receive+0x890>)
 80146f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80146fa:	4b6f      	ldr	r3, [pc, #444]	; (80148b8 <tcp_receive+0x890>)
 80146fc:	881b      	ldrh	r3, [r3, #0]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d275      	bcs.n	80147ee <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014702:	4b6c      	ldr	r3, [pc, #432]	; (80148b4 <tcp_receive+0x88c>)
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	899b      	ldrh	r3, [r3, #12]
 8014708:	b29b      	uxth	r3, r3
 801470a:	4618      	mov	r0, r3
 801470c:	f7fa f9dd 	bl	800eaca <lwip_htons>
 8014710:	4603      	mov	r3, r0
 8014712:	b2db      	uxtb	r3, r3
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d01f      	beq.n	801475c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801471c:	4b65      	ldr	r3, [pc, #404]	; (80148b4 <tcp_receive+0x88c>)
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	b29b      	uxth	r3, r3
 8014724:	b21b      	sxth	r3, r3
 8014726:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801472a:	b21c      	sxth	r4, r3
 801472c:	4b61      	ldr	r3, [pc, #388]	; (80148b4 <tcp_receive+0x88c>)
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	899b      	ldrh	r3, [r3, #12]
 8014732:	b29b      	uxth	r3, r3
 8014734:	4618      	mov	r0, r3
 8014736:	f7fa f9c8 	bl	800eaca <lwip_htons>
 801473a:	4603      	mov	r3, r0
 801473c:	b2db      	uxtb	r3, r3
 801473e:	b29b      	uxth	r3, r3
 8014740:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014744:	b29b      	uxth	r3, r3
 8014746:	4618      	mov	r0, r3
 8014748:	f7fa f9bf 	bl	800eaca <lwip_htons>
 801474c:	4603      	mov	r3, r0
 801474e:	b21b      	sxth	r3, r3
 8014750:	4323      	orrs	r3, r4
 8014752:	b21a      	sxth	r2, r3
 8014754:	4b57      	ldr	r3, [pc, #348]	; (80148b4 <tcp_receive+0x88c>)
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	b292      	uxth	r2, r2
 801475a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014760:	4b54      	ldr	r3, [pc, #336]	; (80148b4 <tcp_receive+0x88c>)
 8014762:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014764:	4b53      	ldr	r3, [pc, #332]	; (80148b4 <tcp_receive+0x88c>)
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	899b      	ldrh	r3, [r3, #12]
 801476a:	b29b      	uxth	r3, r3
 801476c:	4618      	mov	r0, r3
 801476e:	f7fa f9ac 	bl	800eaca <lwip_htons>
 8014772:	4603      	mov	r3, r0
 8014774:	b2db      	uxtb	r3, r3
 8014776:	f003 0302 	and.w	r3, r3, #2
 801477a:	2b00      	cmp	r3, #0
 801477c:	d005      	beq.n	801478a <tcp_receive+0x762>
            inseg.len -= 1;
 801477e:	4b4d      	ldr	r3, [pc, #308]	; (80148b4 <tcp_receive+0x88c>)
 8014780:	891b      	ldrh	r3, [r3, #8]
 8014782:	3b01      	subs	r3, #1
 8014784:	b29a      	uxth	r2, r3
 8014786:	4b4b      	ldr	r3, [pc, #300]	; (80148b4 <tcp_receive+0x88c>)
 8014788:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801478a:	4b4a      	ldr	r3, [pc, #296]	; (80148b4 <tcp_receive+0x88c>)
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	4a49      	ldr	r2, [pc, #292]	; (80148b4 <tcp_receive+0x88c>)
 8014790:	8912      	ldrh	r2, [r2, #8]
 8014792:	4611      	mov	r1, r2
 8014794:	4618      	mov	r0, r3
 8014796:	f7fb fe69 	bl	801046c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801479a:	4b46      	ldr	r3, [pc, #280]	; (80148b4 <tcp_receive+0x88c>)
 801479c:	891c      	ldrh	r4, [r3, #8]
 801479e:	4b45      	ldr	r3, [pc, #276]	; (80148b4 <tcp_receive+0x88c>)
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	899b      	ldrh	r3, [r3, #12]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fa f98f 	bl	800eaca <lwip_htons>
 80147ac:	4603      	mov	r3, r0
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	f003 0303 	and.w	r3, r3, #3
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d001      	beq.n	80147bc <tcp_receive+0x794>
 80147b8:	2301      	movs	r3, #1
 80147ba:	e000      	b.n	80147be <tcp_receive+0x796>
 80147bc:	2300      	movs	r3, #0
 80147be:	4423      	add	r3, r4
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	4b3d      	ldr	r3, [pc, #244]	; (80148b8 <tcp_receive+0x890>)
 80147c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80147c6:	4b3c      	ldr	r3, [pc, #240]	; (80148b8 <tcp_receive+0x890>)
 80147c8:	881b      	ldrh	r3, [r3, #0]
 80147ca:	461a      	mov	r2, r3
 80147cc:	4b38      	ldr	r3, [pc, #224]	; (80148b0 <tcp_receive+0x888>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	441a      	add	r2, r3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147d6:	6879      	ldr	r1, [r7, #4]
 80147d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80147da:	440b      	add	r3, r1
 80147dc:	429a      	cmp	r2, r3
 80147de:	d006      	beq.n	80147ee <tcp_receive+0x7c6>
 80147e0:	4b36      	ldr	r3, [pc, #216]	; (80148bc <tcp_receive+0x894>)
 80147e2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80147e6:	4936      	ldr	r1, [pc, #216]	; (80148c0 <tcp_receive+0x898>)
 80147e8:	4836      	ldr	r0, [pc, #216]	; (80148c4 <tcp_receive+0x89c>)
 80147ea:	f008 fc77 	bl	801d0dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f000 80e7 	beq.w	80149c6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147f8:	4b2e      	ldr	r3, [pc, #184]	; (80148b4 <tcp_receive+0x88c>)
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	899b      	ldrh	r3, [r3, #12]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4618      	mov	r0, r3
 8014802:	f7fa f962 	bl	800eaca <lwip_htons>
 8014806:	4603      	mov	r3, r0
 8014808:	b2db      	uxtb	r3, r3
 801480a:	f003 0301 	and.w	r3, r3, #1
 801480e:	2b00      	cmp	r3, #0
 8014810:	d010      	beq.n	8014834 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014812:	e00a      	b.n	801482a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014818:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f7fd fce2 	bl	80121ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1f0      	bne.n	8014814 <tcp_receive+0x7ec>
 8014832:	e0c8      	b.n	80149c6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014838:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801483a:	e052      	b.n	80148e2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	899b      	ldrh	r3, [r3, #12]
 8014842:	b29b      	uxth	r3, r3
 8014844:	4618      	mov	r0, r3
 8014846:	f7fa f940 	bl	800eaca <lwip_htons>
 801484a:	4603      	mov	r3, r0
 801484c:	b2db      	uxtb	r3, r3
 801484e:	f003 0301 	and.w	r3, r3, #1
 8014852:	2b00      	cmp	r3, #0
 8014854:	d03d      	beq.n	80148d2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014856:	4b17      	ldr	r3, [pc, #92]	; (80148b4 <tcp_receive+0x88c>)
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	899b      	ldrh	r3, [r3, #12]
 801485c:	b29b      	uxth	r3, r3
 801485e:	4618      	mov	r0, r3
 8014860:	f7fa f933 	bl	800eaca <lwip_htons>
 8014864:	4603      	mov	r3, r0
 8014866:	b2db      	uxtb	r3, r3
 8014868:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801486c:	2b00      	cmp	r3, #0
 801486e:	d130      	bne.n	80148d2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014870:	4b10      	ldr	r3, [pc, #64]	; (80148b4 <tcp_receive+0x88c>)
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	899b      	ldrh	r3, [r3, #12]
 8014876:	b29c      	uxth	r4, r3
 8014878:	2001      	movs	r0, #1
 801487a:	f7fa f926 	bl	800eaca <lwip_htons>
 801487e:	4603      	mov	r3, r0
 8014880:	461a      	mov	r2, r3
 8014882:	4b0c      	ldr	r3, [pc, #48]	; (80148b4 <tcp_receive+0x88c>)
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	4322      	orrs	r2, r4
 8014888:	b292      	uxth	r2, r2
 801488a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801488c:	4b09      	ldr	r3, [pc, #36]	; (80148b4 <tcp_receive+0x88c>)
 801488e:	891c      	ldrh	r4, [r3, #8]
 8014890:	4b08      	ldr	r3, [pc, #32]	; (80148b4 <tcp_receive+0x88c>)
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	899b      	ldrh	r3, [r3, #12]
 8014896:	b29b      	uxth	r3, r3
 8014898:	4618      	mov	r0, r3
 801489a:	f7fa f916 	bl	800eaca <lwip_htons>
 801489e:	4603      	mov	r3, r0
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	f003 0303 	and.w	r3, r3, #3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d00e      	beq.n	80148c8 <tcp_receive+0x8a0>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e00d      	b.n	80148ca <tcp_receive+0x8a2>
 80148ae:	bf00      	nop
 80148b0:	200086a4 	.word	0x200086a4
 80148b4:	20008684 	.word	0x20008684
 80148b8:	200086ae 	.word	0x200086ae
 80148bc:	0801f260 	.word	0x0801f260
 80148c0:	0801f608 	.word	0x0801f608
 80148c4:	0801f2ac 	.word	0x0801f2ac
 80148c8:	2300      	movs	r3, #0
 80148ca:	4423      	add	r3, r4
 80148cc:	b29a      	uxth	r2, r3
 80148ce:	4b98      	ldr	r3, [pc, #608]	; (8014b30 <tcp_receive+0xb08>)
 80148d0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80148d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148d4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80148d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80148dc:	6938      	ldr	r0, [r7, #16]
 80148de:	f7fd fc86 	bl	80121ee <tcp_seg_free>
            while (next &&
 80148e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d00e      	beq.n	8014906 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80148e8:	4b91      	ldr	r3, [pc, #580]	; (8014b30 <tcp_receive+0xb08>)
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	461a      	mov	r2, r3
 80148ee:	4b91      	ldr	r3, [pc, #580]	; (8014b34 <tcp_receive+0xb0c>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	441a      	add	r2, r3
 80148f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80148fc:	8909      	ldrh	r1, [r1, #8]
 80148fe:	440b      	add	r3, r1
 8014900:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014902:	2b00      	cmp	r3, #0
 8014904:	da9a      	bge.n	801483c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014908:	2b00      	cmp	r3, #0
 801490a:	d059      	beq.n	80149c0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801490c:	4b88      	ldr	r3, [pc, #544]	; (8014b30 <tcp_receive+0xb08>)
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	461a      	mov	r2, r3
 8014912:	4b88      	ldr	r3, [pc, #544]	; (8014b34 <tcp_receive+0xb0c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	441a      	add	r2, r3
 8014918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014920:	2b00      	cmp	r3, #0
 8014922:	dd4d      	ble.n	80149c0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	b29a      	uxth	r2, r3
 801492c:	4b81      	ldr	r3, [pc, #516]	; (8014b34 <tcp_receive+0xb0c>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	b29b      	uxth	r3, r3
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	b29a      	uxth	r2, r3
 8014936:	4b80      	ldr	r3, [pc, #512]	; (8014b38 <tcp_receive+0xb10>)
 8014938:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801493a:	4b7f      	ldr	r3, [pc, #508]	; (8014b38 <tcp_receive+0xb10>)
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	899b      	ldrh	r3, [r3, #12]
 8014940:	b29b      	uxth	r3, r3
 8014942:	4618      	mov	r0, r3
 8014944:	f7fa f8c1 	bl	800eaca <lwip_htons>
 8014948:	4603      	mov	r3, r0
 801494a:	b2db      	uxtb	r3, r3
 801494c:	f003 0302 	and.w	r3, r3, #2
 8014950:	2b00      	cmp	r3, #0
 8014952:	d005      	beq.n	8014960 <tcp_receive+0x938>
                inseg.len -= 1;
 8014954:	4b78      	ldr	r3, [pc, #480]	; (8014b38 <tcp_receive+0xb10>)
 8014956:	891b      	ldrh	r3, [r3, #8]
 8014958:	3b01      	subs	r3, #1
 801495a:	b29a      	uxth	r2, r3
 801495c:	4b76      	ldr	r3, [pc, #472]	; (8014b38 <tcp_receive+0xb10>)
 801495e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014960:	4b75      	ldr	r3, [pc, #468]	; (8014b38 <tcp_receive+0xb10>)
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	4a74      	ldr	r2, [pc, #464]	; (8014b38 <tcp_receive+0xb10>)
 8014966:	8912      	ldrh	r2, [r2, #8]
 8014968:	4611      	mov	r1, r2
 801496a:	4618      	mov	r0, r3
 801496c:	f7fb fd7e 	bl	801046c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014970:	4b71      	ldr	r3, [pc, #452]	; (8014b38 <tcp_receive+0xb10>)
 8014972:	891c      	ldrh	r4, [r3, #8]
 8014974:	4b70      	ldr	r3, [pc, #448]	; (8014b38 <tcp_receive+0xb10>)
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	899b      	ldrh	r3, [r3, #12]
 801497a:	b29b      	uxth	r3, r3
 801497c:	4618      	mov	r0, r3
 801497e:	f7fa f8a4 	bl	800eaca <lwip_htons>
 8014982:	4603      	mov	r3, r0
 8014984:	b2db      	uxtb	r3, r3
 8014986:	f003 0303 	and.w	r3, r3, #3
 801498a:	2b00      	cmp	r3, #0
 801498c:	d001      	beq.n	8014992 <tcp_receive+0x96a>
 801498e:	2301      	movs	r3, #1
 8014990:	e000      	b.n	8014994 <tcp_receive+0x96c>
 8014992:	2300      	movs	r3, #0
 8014994:	4423      	add	r3, r4
 8014996:	b29a      	uxth	r2, r3
 8014998:	4b65      	ldr	r3, [pc, #404]	; (8014b30 <tcp_receive+0xb08>)
 801499a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801499c:	4b64      	ldr	r3, [pc, #400]	; (8014b30 <tcp_receive+0xb08>)
 801499e:	881b      	ldrh	r3, [r3, #0]
 80149a0:	461a      	mov	r2, r3
 80149a2:	4b64      	ldr	r3, [pc, #400]	; (8014b34 <tcp_receive+0xb0c>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	441a      	add	r2, r3
 80149a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d006      	beq.n	80149c0 <tcp_receive+0x998>
 80149b2:	4b62      	ldr	r3, [pc, #392]	; (8014b3c <tcp_receive+0xb14>)
 80149b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80149b8:	4961      	ldr	r1, [pc, #388]	; (8014b40 <tcp_receive+0xb18>)
 80149ba:	4862      	ldr	r0, [pc, #392]	; (8014b44 <tcp_receive+0xb1c>)
 80149bc:	f008 fb8e 	bl	801d0dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149c4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80149c6:	4b5a      	ldr	r3, [pc, #360]	; (8014b30 <tcp_receive+0xb08>)
 80149c8:	881b      	ldrh	r3, [r3, #0]
 80149ca:	461a      	mov	r2, r3
 80149cc:	4b59      	ldr	r3, [pc, #356]	; (8014b34 <tcp_receive+0xb0c>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	441a      	add	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149da:	4b55      	ldr	r3, [pc, #340]	; (8014b30 <tcp_receive+0xb08>)
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d206      	bcs.n	80149f0 <tcp_receive+0x9c8>
 80149e2:	4b56      	ldr	r3, [pc, #344]	; (8014b3c <tcp_receive+0xb14>)
 80149e4:	f240 6207 	movw	r2, #1543	; 0x607
 80149e8:	4957      	ldr	r1, [pc, #348]	; (8014b48 <tcp_receive+0xb20>)
 80149ea:	4856      	ldr	r0, [pc, #344]	; (8014b44 <tcp_receive+0xb1c>)
 80149ec:	f008 fb76 	bl	801d0dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149f4:	4b4e      	ldr	r3, [pc, #312]	; (8014b30 <tcp_receive+0xb08>)
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7fc fdb7 	bl	8011574 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014a06:	4b4c      	ldr	r3, [pc, #304]	; (8014b38 <tcp_receive+0xb10>)
 8014a08:	685b      	ldr	r3, [r3, #4]
 8014a0a:	891b      	ldrh	r3, [r3, #8]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d006      	beq.n	8014a1e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014a10:	4b49      	ldr	r3, [pc, #292]	; (8014b38 <tcp_receive+0xb10>)
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	4a4d      	ldr	r2, [pc, #308]	; (8014b4c <tcp_receive+0xb24>)
 8014a16:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014a18:	4b47      	ldr	r3, [pc, #284]	; (8014b38 <tcp_receive+0xb10>)
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014a1e:	4b46      	ldr	r3, [pc, #280]	; (8014b38 <tcp_receive+0xb10>)
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	899b      	ldrh	r3, [r3, #12]
 8014a24:	b29b      	uxth	r3, r3
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fa f84f 	bl	800eaca <lwip_htons>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	f003 0301 	and.w	r3, r3, #1
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f000 80b8 	beq.w	8014baa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014a3a:	4b45      	ldr	r3, [pc, #276]	; (8014b50 <tcp_receive+0xb28>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	f043 0320 	orr.w	r3, r3, #32
 8014a42:	b2da      	uxtb	r2, r3
 8014a44:	4b42      	ldr	r3, [pc, #264]	; (8014b50 <tcp_receive+0xb28>)
 8014a46:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014a48:	e0af      	b.n	8014baa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a4e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	4a36      	ldr	r2, [pc, #216]	; (8014b34 <tcp_receive+0xb0c>)
 8014a5a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	891b      	ldrh	r3, [r3, #8]
 8014a60:	461c      	mov	r4, r3
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	899b      	ldrh	r3, [r3, #12]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fa f82d 	bl	800eaca <lwip_htons>
 8014a70:	4603      	mov	r3, r0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	f003 0303 	and.w	r3, r3, #3
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d001      	beq.n	8014a80 <tcp_receive+0xa58>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	e000      	b.n	8014a82 <tcp_receive+0xa5a>
 8014a80:	2300      	movs	r3, #0
 8014a82:	191a      	adds	r2, r3, r4
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a88:	441a      	add	r2, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a92:	461c      	mov	r4, r3
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	891b      	ldrh	r3, [r3, #8]
 8014a98:	461d      	mov	r5, r3
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	68db      	ldr	r3, [r3, #12]
 8014a9e:	899b      	ldrh	r3, [r3, #12]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fa f811 	bl	800eaca <lwip_htons>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	f003 0303 	and.w	r3, r3, #3
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d001      	beq.n	8014ab8 <tcp_receive+0xa90>
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	e000      	b.n	8014aba <tcp_receive+0xa92>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	442b      	add	r3, r5
 8014abc:	429c      	cmp	r4, r3
 8014abe:	d206      	bcs.n	8014ace <tcp_receive+0xaa6>
 8014ac0:	4b1e      	ldr	r3, [pc, #120]	; (8014b3c <tcp_receive+0xb14>)
 8014ac2:	f240 622b 	movw	r2, #1579	; 0x62b
 8014ac6:	4923      	ldr	r1, [pc, #140]	; (8014b54 <tcp_receive+0xb2c>)
 8014ac8:	481e      	ldr	r0, [pc, #120]	; (8014b44 <tcp_receive+0xb1c>)
 8014aca:	f008 fb07 	bl	801d0dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	461c      	mov	r4, r3
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	899b      	ldrh	r3, [r3, #12]
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7f9 fff4 	bl	800eaca <lwip_htons>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	f003 0303 	and.w	r3, r3, #3
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d001      	beq.n	8014af2 <tcp_receive+0xaca>
 8014aee:	2301      	movs	r3, #1
 8014af0:	e000      	b.n	8014af4 <tcp_receive+0xacc>
 8014af2:	2300      	movs	r3, #0
 8014af4:	1919      	adds	r1, r3, r4
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014afa:	b28b      	uxth	r3, r1
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f7fc fd35 	bl	8011574 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	891b      	ldrh	r3, [r3, #8]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d028      	beq.n	8014b66 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014b14:	4b0d      	ldr	r3, [pc, #52]	; (8014b4c <tcp_receive+0xb24>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d01d      	beq.n	8014b58 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014b1c:	4b0b      	ldr	r3, [pc, #44]	; (8014b4c <tcp_receive+0xb24>)
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	4619      	mov	r1, r3
 8014b26:	4610      	mov	r0, r2
 8014b28:	f7fb fee8 	bl	80108fc <pbuf_cat>
 8014b2c:	e018      	b.n	8014b60 <tcp_receive+0xb38>
 8014b2e:	bf00      	nop
 8014b30:	200086ae 	.word	0x200086ae
 8014b34:	200086a4 	.word	0x200086a4
 8014b38:	20008684 	.word	0x20008684
 8014b3c:	0801f260 	.word	0x0801f260
 8014b40:	0801f640 	.word	0x0801f640
 8014b44:	0801f2ac 	.word	0x0801f2ac
 8014b48:	0801f67c 	.word	0x0801f67c
 8014b4c:	200086b4 	.word	0x200086b4
 8014b50:	200086b1 	.word	0x200086b1
 8014b54:	0801f69c 	.word	0x0801f69c
            } else {
              recv_data = cseg->p;
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	4a70      	ldr	r2, [pc, #448]	; (8014d20 <tcp_receive+0xcf8>)
 8014b5e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	2200      	movs	r2, #0
 8014b64:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	899b      	ldrh	r3, [r3, #12]
 8014b6c:	b29b      	uxth	r3, r3
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7f9 ffab 	bl	800eaca <lwip_htons>
 8014b74:	4603      	mov	r3, r0
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	f003 0301 	and.w	r3, r3, #1
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d00d      	beq.n	8014b9c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014b80:	4b68      	ldr	r3, [pc, #416]	; (8014d24 <tcp_receive+0xcfc>)
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	f043 0320 	orr.w	r3, r3, #32
 8014b88:	b2da      	uxtb	r2, r3
 8014b8a:	4b66      	ldr	r3, [pc, #408]	; (8014d24 <tcp_receive+0xcfc>)
 8014b8c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	7d1b      	ldrb	r3, [r3, #20]
 8014b92:	2b04      	cmp	r3, #4
 8014b94:	d102      	bne.n	8014b9c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2207      	movs	r2, #7
 8014b9a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014ba4:	68b8      	ldr	r0, [r7, #8]
 8014ba6:	f7fd fb22 	bl	80121ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d008      	beq.n	8014bc4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	685a      	ldr	r2, [r3, #4]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	f43f af43 	beq.w	8014a4a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	8b5b      	ldrh	r3, [r3, #26]
 8014bc8:	f003 0301 	and.w	r3, r3, #1
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00e      	beq.n	8014bee <tcp_receive+0xbc6>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	8b5b      	ldrh	r3, [r3, #26]
 8014bd4:	f023 0301 	bic.w	r3, r3, #1
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	835a      	strh	r2, [r3, #26]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8b5b      	ldrh	r3, [r3, #26]
 8014be2:	f043 0302 	orr.w	r3, r3, #2
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014bec:	e188      	b.n	8014f00 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	8b5b      	ldrh	r3, [r3, #26]
 8014bf2:	f043 0301 	orr.w	r3, r3, #1
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014bfc:	e180      	b.n	8014f00 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d106      	bne.n	8014c14 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014c06:	4848      	ldr	r0, [pc, #288]	; (8014d28 <tcp_receive+0xd00>)
 8014c08:	f7fd fb0a 	bl	8012220 <tcp_seg_copy>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	675a      	str	r2, [r3, #116]	; 0x74
 8014c12:	e16d      	b.n	8014ef0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014c14:	2300      	movs	r3, #0
 8014c16:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8014c1e:	e157      	b.n	8014ed0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	4b41      	ldr	r3, [pc, #260]	; (8014d2c <tcp_receive+0xd04>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d11d      	bne.n	8014c6a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014c2e:	4b3e      	ldr	r3, [pc, #248]	; (8014d28 <tcp_receive+0xd00>)
 8014c30:	891a      	ldrh	r2, [r3, #8]
 8014c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c34:	891b      	ldrh	r3, [r3, #8]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	f240 814f 	bls.w	8014eda <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c3c:	483a      	ldr	r0, [pc, #232]	; (8014d28 <tcp_receive+0xd00>)
 8014c3e:	f7fd faef 	bl	8012220 <tcp_seg_copy>
 8014c42:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f000 8149 	beq.w	8014ede <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d003      	beq.n	8014c5a <tcp_receive+0xc32>
                    prev->next = cseg;
 8014c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c54:	697a      	ldr	r2, [r7, #20]
 8014c56:	601a      	str	r2, [r3, #0]
 8014c58:	e002      	b.n	8014c60 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	697a      	ldr	r2, [r7, #20]
 8014c5e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c62:	6978      	ldr	r0, [r7, #20]
 8014c64:	f7ff f8dc 	bl	8013e20 <tcp_oos_insert_segment>
                }
                break;
 8014c68:	e139      	b.n	8014ede <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d117      	bne.n	8014ca0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014c70:	4b2e      	ldr	r3, [pc, #184]	; (8014d2c <tcp_receive+0xd04>)
 8014c72:	681a      	ldr	r2, [r3, #0]
 8014c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	685b      	ldr	r3, [r3, #4]
 8014c7a:	1ad3      	subs	r3, r2, r3
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	da57      	bge.n	8014d30 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c80:	4829      	ldr	r0, [pc, #164]	; (8014d28 <tcp_receive+0xd00>)
 8014c82:	f7fd facd 	bl	8012220 <tcp_seg_copy>
 8014c86:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	f000 8129 	beq.w	8014ee2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	69ba      	ldr	r2, [r7, #24]
 8014c94:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c98:	69b8      	ldr	r0, [r7, #24]
 8014c9a:	f7ff f8c1 	bl	8013e20 <tcp_oos_insert_segment>
                  }
                  break;
 8014c9e:	e120      	b.n	8014ee2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014ca0:	4b22      	ldr	r3, [pc, #136]	; (8014d2c <tcp_receive+0xd04>)
 8014ca2:	681a      	ldr	r2, [r3, #0]
 8014ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	1ad3      	subs	r3, r2, r3
 8014cac:	3b01      	subs	r3, #1
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	db3e      	blt.n	8014d30 <tcp_receive+0xd08>
 8014cb2:	4b1e      	ldr	r3, [pc, #120]	; (8014d2c <tcp_receive+0xd04>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	1ad3      	subs	r3, r2, r3
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	dc35      	bgt.n	8014d30 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014cc4:	4818      	ldr	r0, [pc, #96]	; (8014d28 <tcp_receive+0xd00>)
 8014cc6:	f7fd faab 	bl	8012220 <tcp_seg_copy>
 8014cca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	f000 8109 	beq.w	8014ee6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cdc:	8912      	ldrh	r2, [r2, #8]
 8014cde:	441a      	add	r2, r3
 8014ce0:	4b12      	ldr	r3, [pc, #72]	; (8014d2c <tcp_receive+0xd04>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	1ad3      	subs	r3, r2, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	dd12      	ble.n	8014d10 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014cea:	4b10      	ldr	r3, [pc, #64]	; (8014d2c <tcp_receive+0xd04>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	1ad3      	subs	r3, r2, r3
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d02:	685a      	ldr	r2, [r3, #4]
 8014d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d06:	891b      	ldrh	r3, [r3, #8]
 8014d08:	4619      	mov	r1, r3
 8014d0a:	4610      	mov	r0, r2
 8014d0c:	f7fb fbae 	bl	801046c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d12:	69fa      	ldr	r2, [r7, #28]
 8014d14:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d18:	69f8      	ldr	r0, [r7, #28]
 8014d1a:	f7ff f881 	bl	8013e20 <tcp_oos_insert_segment>
                  }
                  break;
 8014d1e:	e0e2      	b.n	8014ee6 <tcp_receive+0xebe>
 8014d20:	200086b4 	.word	0x200086b4
 8014d24:	200086b1 	.word	0x200086b1
 8014d28:	20008684 	.word	0x20008684
 8014d2c:	200086a4 	.word	0x200086a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d32:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f040 80c6 	bne.w	8014eca <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014d3e:	4b80      	ldr	r3, [pc, #512]	; (8014f40 <tcp_receive+0xf18>)
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d44:	68db      	ldr	r3, [r3, #12]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f340 80bd 	ble.w	8014eca <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	899b      	ldrh	r3, [r3, #12]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f9 feb6 	bl	800eaca <lwip_htons>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f040 80bf 	bne.w	8014eea <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014d6c:	4875      	ldr	r0, [pc, #468]	; (8014f44 <tcp_receive+0xf1c>)
 8014d6e:	f7fd fa57 	bl	8012220 <tcp_seg_copy>
 8014d72:	4602      	mov	r2, r0
 8014d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d76:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f000 80b6 	beq.w	8014eee <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d84:	68db      	ldr	r3, [r3, #12]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d8a:	8912      	ldrh	r2, [r2, #8]
 8014d8c:	441a      	add	r2, r3
 8014d8e:	4b6c      	ldr	r3, [pc, #432]	; (8014f40 <tcp_receive+0xf18>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	dd12      	ble.n	8014dbe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014d98:	4b69      	ldr	r3, [pc, #420]	; (8014f40 <tcp_receive+0xf18>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	b29a      	uxth	r2, r3
 8014d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	1ad3      	subs	r3, r2, r3
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db0:	685a      	ldr	r2, [r3, #4]
 8014db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db4:	891b      	ldrh	r3, [r3, #8]
 8014db6:	4619      	mov	r1, r3
 8014db8:	4610      	mov	r0, r2
 8014dba:	f7fb fb57 	bl	801046c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014dbe:	4b62      	ldr	r3, [pc, #392]	; (8014f48 <tcp_receive+0xf20>)
 8014dc0:	881b      	ldrh	r3, [r3, #0]
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	4b5e      	ldr	r3, [pc, #376]	; (8014f40 <tcp_receive+0xf18>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	441a      	add	r2, r3
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dce:	6879      	ldr	r1, [r7, #4]
 8014dd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dd2:	440b      	add	r3, r1
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f340 8089 	ble.w	8014eee <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	68db      	ldr	r3, [r3, #12]
 8014de2:	899b      	ldrh	r3, [r3, #12]
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7f9 fe6f 	bl	800eaca <lwip_htons>
 8014dec:	4603      	mov	r3, r0
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d022      	beq.n	8014e3e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	899b      	ldrh	r3, [r3, #12]
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	b21b      	sxth	r3, r3
 8014e04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e08:	b21c      	sxth	r4, r3
 8014e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	899b      	ldrh	r3, [r3, #12]
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7f9 fe58 	bl	800eaca <lwip_htons>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7f9 fe4f 	bl	800eaca <lwip_htons>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	b21b      	sxth	r3, r3
 8014e30:	4323      	orrs	r3, r4
 8014e32:	b21a      	sxth	r2, r3
 8014e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	b292      	uxth	r2, r2
 8014e3c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e48:	4413      	add	r3, r2
 8014e4a:	b299      	uxth	r1, r3
 8014e4c:	4b3c      	ldr	r3, [pc, #240]	; (8014f40 <tcp_receive+0xf18>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	1a8a      	subs	r2, r1, r2
 8014e58:	b292      	uxth	r2, r2
 8014e5a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	891b      	ldrh	r3, [r3, #8]
 8014e68:	4619      	mov	r1, r3
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	f7fb fafe 	bl	801046c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	891c      	ldrh	r4, [r3, #8]
 8014e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	899b      	ldrh	r3, [r3, #12]
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7f9 fe22 	bl	800eaca <lwip_htons>
 8014e86:	4603      	mov	r3, r0
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	f003 0303 	and.w	r3, r3, #3
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d001      	beq.n	8014e96 <tcp_receive+0xe6e>
 8014e92:	2301      	movs	r3, #1
 8014e94:	e000      	b.n	8014e98 <tcp_receive+0xe70>
 8014e96:	2300      	movs	r3, #0
 8014e98:	4423      	add	r3, r4
 8014e9a:	b29a      	uxth	r2, r3
 8014e9c:	4b2a      	ldr	r3, [pc, #168]	; (8014f48 <tcp_receive+0xf20>)
 8014e9e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ea0:	4b29      	ldr	r3, [pc, #164]	; (8014f48 <tcp_receive+0xf20>)
 8014ea2:	881b      	ldrh	r3, [r3, #0]
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	4b26      	ldr	r3, [pc, #152]	; (8014f40 <tcp_receive+0xf18>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	441a      	add	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb0:	6879      	ldr	r1, [r7, #4]
 8014eb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014eb4:	440b      	add	r3, r1
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d019      	beq.n	8014eee <tcp_receive+0xec6>
 8014eba:	4b24      	ldr	r3, [pc, #144]	; (8014f4c <tcp_receive+0xf24>)
 8014ebc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014ec0:	4923      	ldr	r1, [pc, #140]	; (8014f50 <tcp_receive+0xf28>)
 8014ec2:	4824      	ldr	r0, [pc, #144]	; (8014f54 <tcp_receive+0xf2c>)
 8014ec4:	f008 f90a 	bl	801d0dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014ec8:	e011      	b.n	8014eee <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f47f aea4 	bne.w	8014c20 <tcp_receive+0xbf8>
 8014ed8:	e00a      	b.n	8014ef0 <tcp_receive+0xec8>
                break;
 8014eda:	bf00      	nop
 8014edc:	e008      	b.n	8014ef0 <tcp_receive+0xec8>
                break;
 8014ede:	bf00      	nop
 8014ee0:	e006      	b.n	8014ef0 <tcp_receive+0xec8>
                  break;
 8014ee2:	bf00      	nop
 8014ee4:	e004      	b.n	8014ef0 <tcp_receive+0xec8>
                  break;
 8014ee6:	bf00      	nop
 8014ee8:	e002      	b.n	8014ef0 <tcp_receive+0xec8>
                  break;
 8014eea:	bf00      	nop
 8014eec:	e000      	b.n	8014ef0 <tcp_receive+0xec8>
                break;
 8014eee:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f001 fe89 	bl	8016c08 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014ef6:	e003      	b.n	8014f00 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f001 fe85 	bl	8016c08 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014efe:	e01a      	b.n	8014f36 <tcp_receive+0xf0e>
 8014f00:	e019      	b.n	8014f36 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014f02:	4b0f      	ldr	r3, [pc, #60]	; (8014f40 <tcp_receive+0xf18>)
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0a:	1ad3      	subs	r3, r2, r3
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	db0a      	blt.n	8014f26 <tcp_receive+0xefe>
 8014f10:	4b0b      	ldr	r3, [pc, #44]	; (8014f40 <tcp_receive+0xf18>)
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f18:	6879      	ldr	r1, [r7, #4]
 8014f1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f1c:	440b      	add	r3, r1
 8014f1e:	1ad3      	subs	r3, r2, r3
 8014f20:	3301      	adds	r3, #1
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	dd07      	ble.n	8014f36 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	8b5b      	ldrh	r3, [r3, #26]
 8014f2a:	f043 0302 	orr.w	r3, r3, #2
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014f34:	e7ff      	b.n	8014f36 <tcp_receive+0xf0e>
 8014f36:	bf00      	nop
 8014f38:	3750      	adds	r7, #80	; 0x50
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	200086a4 	.word	0x200086a4
 8014f44:	20008684 	.word	0x20008684
 8014f48:	200086ae 	.word	0x200086ae
 8014f4c:	0801f260 	.word	0x0801f260
 8014f50:	0801f608 	.word	0x0801f608
 8014f54:	0801f2ac 	.word	0x0801f2ac

08014f58 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014f5e:	4b15      	ldr	r3, [pc, #84]	; (8014fb4 <tcp_get_next_optbyte+0x5c>)
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	1c5a      	adds	r2, r3, #1
 8014f64:	b291      	uxth	r1, r2
 8014f66:	4a13      	ldr	r2, [pc, #76]	; (8014fb4 <tcp_get_next_optbyte+0x5c>)
 8014f68:	8011      	strh	r1, [r2, #0]
 8014f6a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014f6c:	4b12      	ldr	r3, [pc, #72]	; (8014fb8 <tcp_get_next_optbyte+0x60>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d004      	beq.n	8014f7e <tcp_get_next_optbyte+0x26>
 8014f74:	4b11      	ldr	r3, [pc, #68]	; (8014fbc <tcp_get_next_optbyte+0x64>)
 8014f76:	881b      	ldrh	r3, [r3, #0]
 8014f78:	88fa      	ldrh	r2, [r7, #6]
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d208      	bcs.n	8014f90 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014f7e:	4b10      	ldr	r3, [pc, #64]	; (8014fc0 <tcp_get_next_optbyte+0x68>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3314      	adds	r3, #20
 8014f84:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014f86:	88fb      	ldrh	r3, [r7, #6]
 8014f88:	683a      	ldr	r2, [r7, #0]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	e00b      	b.n	8014fa8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014f90:	88fb      	ldrh	r3, [r7, #6]
 8014f92:	b2da      	uxtb	r2, r3
 8014f94:	4b09      	ldr	r3, [pc, #36]	; (8014fbc <tcp_get_next_optbyte+0x64>)
 8014f96:	881b      	ldrh	r3, [r3, #0]
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014f9e:	4b06      	ldr	r3, [pc, #24]	; (8014fb8 <tcp_get_next_optbyte+0x60>)
 8014fa0:	681a      	ldr	r2, [r3, #0]
 8014fa2:	797b      	ldrb	r3, [r7, #5]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	200086a0 	.word	0x200086a0
 8014fb8:	2000869c 	.word	0x2000869c
 8014fbc:	2000869a 	.word	0x2000869a
 8014fc0:	20008694 	.word	0x20008694

08014fc4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d106      	bne.n	8014fe0 <tcp_parseopt+0x1c>
 8014fd2:	4b32      	ldr	r3, [pc, #200]	; (801509c <tcp_parseopt+0xd8>)
 8014fd4:	f240 727d 	movw	r2, #1917	; 0x77d
 8014fd8:	4931      	ldr	r1, [pc, #196]	; (80150a0 <tcp_parseopt+0xdc>)
 8014fda:	4832      	ldr	r0, [pc, #200]	; (80150a4 <tcp_parseopt+0xe0>)
 8014fdc:	f008 f87e 	bl	801d0dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014fe0:	4b31      	ldr	r3, [pc, #196]	; (80150a8 <tcp_parseopt+0xe4>)
 8014fe2:	881b      	ldrh	r3, [r3, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d055      	beq.n	8015094 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014fe8:	4b30      	ldr	r3, [pc, #192]	; (80150ac <tcp_parseopt+0xe8>)
 8014fea:	2200      	movs	r2, #0
 8014fec:	801a      	strh	r2, [r3, #0]
 8014fee:	e045      	b.n	801507c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014ff0:	f7ff ffb2 	bl	8014f58 <tcp_get_next_optbyte>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014ff8:	7bfb      	ldrb	r3, [r7, #15]
 8014ffa:	2b02      	cmp	r3, #2
 8014ffc:	d006      	beq.n	801500c <tcp_parseopt+0x48>
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	dc2b      	bgt.n	801505a <tcp_parseopt+0x96>
 8015002:	2b00      	cmp	r3, #0
 8015004:	d041      	beq.n	801508a <tcp_parseopt+0xc6>
 8015006:	2b01      	cmp	r3, #1
 8015008:	d127      	bne.n	801505a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801500a:	e037      	b.n	801507c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801500c:	f7ff ffa4 	bl	8014f58 <tcp_get_next_optbyte>
 8015010:	4603      	mov	r3, r0
 8015012:	2b04      	cmp	r3, #4
 8015014:	d13b      	bne.n	801508e <tcp_parseopt+0xca>
 8015016:	4b25      	ldr	r3, [pc, #148]	; (80150ac <tcp_parseopt+0xe8>)
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	3301      	adds	r3, #1
 801501c:	4a22      	ldr	r2, [pc, #136]	; (80150a8 <tcp_parseopt+0xe4>)
 801501e:	8812      	ldrh	r2, [r2, #0]
 8015020:	4293      	cmp	r3, r2
 8015022:	da34      	bge.n	801508e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015024:	f7ff ff98 	bl	8014f58 <tcp_get_next_optbyte>
 8015028:	4603      	mov	r3, r0
 801502a:	b29b      	uxth	r3, r3
 801502c:	021b      	lsls	r3, r3, #8
 801502e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015030:	f7ff ff92 	bl	8014f58 <tcp_get_next_optbyte>
 8015034:	4603      	mov	r3, r0
 8015036:	b29a      	uxth	r2, r3
 8015038:	89bb      	ldrh	r3, [r7, #12]
 801503a:	4313      	orrs	r3, r2
 801503c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801503e:	89bb      	ldrh	r3, [r7, #12]
 8015040:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8015044:	d804      	bhi.n	8015050 <tcp_parseopt+0x8c>
 8015046:	89bb      	ldrh	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <tcp_parseopt+0x8c>
 801504c:	89ba      	ldrh	r2, [r7, #12]
 801504e:	e001      	b.n	8015054 <tcp_parseopt+0x90>
 8015050:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015058:	e010      	b.n	801507c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801505a:	f7ff ff7d 	bl	8014f58 <tcp_get_next_optbyte>
 801505e:	4603      	mov	r3, r0
 8015060:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015062:	7afb      	ldrb	r3, [r7, #11]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d914      	bls.n	8015092 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015068:	7afb      	ldrb	r3, [r7, #11]
 801506a:	b29a      	uxth	r2, r3
 801506c:	4b0f      	ldr	r3, [pc, #60]	; (80150ac <tcp_parseopt+0xe8>)
 801506e:	881b      	ldrh	r3, [r3, #0]
 8015070:	4413      	add	r3, r2
 8015072:	b29b      	uxth	r3, r3
 8015074:	3b02      	subs	r3, #2
 8015076:	b29a      	uxth	r2, r3
 8015078:	4b0c      	ldr	r3, [pc, #48]	; (80150ac <tcp_parseopt+0xe8>)
 801507a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801507c:	4b0b      	ldr	r3, [pc, #44]	; (80150ac <tcp_parseopt+0xe8>)
 801507e:	881a      	ldrh	r2, [r3, #0]
 8015080:	4b09      	ldr	r3, [pc, #36]	; (80150a8 <tcp_parseopt+0xe4>)
 8015082:	881b      	ldrh	r3, [r3, #0]
 8015084:	429a      	cmp	r2, r3
 8015086:	d3b3      	bcc.n	8014ff0 <tcp_parseopt+0x2c>
 8015088:	e004      	b.n	8015094 <tcp_parseopt+0xd0>
          return;
 801508a:	bf00      	nop
 801508c:	e002      	b.n	8015094 <tcp_parseopt+0xd0>
            return;
 801508e:	bf00      	nop
 8015090:	e000      	b.n	8015094 <tcp_parseopt+0xd0>
            return;
 8015092:	bf00      	nop
      }
    }
  }
}
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	0801f260 	.word	0x0801f260
 80150a0:	0801f6c4 	.word	0x0801f6c4
 80150a4:	0801f2ac 	.word	0x0801f2ac
 80150a8:	20008698 	.word	0x20008698
 80150ac:	200086a0 	.word	0x200086a0

080150b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80150b4:	4b05      	ldr	r3, [pc, #20]	; (80150cc <tcp_trigger_input_pcb_close+0x1c>)
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	f043 0310 	orr.w	r3, r3, #16
 80150bc:	b2da      	uxtb	r2, r3
 80150be:	4b03      	ldr	r3, [pc, #12]	; (80150cc <tcp_trigger_input_pcb_close+0x1c>)
 80150c0:	701a      	strb	r2, [r3, #0]
}
 80150c2:	bf00      	nop
 80150c4:	46bd      	mov	sp, r7
 80150c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ca:	4770      	bx	lr
 80150cc:	200086b1 	.word	0x200086b1

080150d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d00a      	beq.n	80150f8 <tcp_route+0x28>
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	7a1b      	ldrb	r3, [r3, #8]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d006      	beq.n	80150f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	7a1b      	ldrb	r3, [r3, #8]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7fa ffe2 	bl	80100b8 <netif_get_by_index>
 80150f4:	4603      	mov	r3, r0
 80150f6:	e003      	b.n	8015100 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f005 fd51 	bl	801aba0 <ip4_route>
 80150fe:	4603      	mov	r3, r0
  }
}
 8015100:	4618      	mov	r0, r3
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015108:	b590      	push	{r4, r7, lr}
 801510a:	b087      	sub	sp, #28
 801510c:	af00      	add	r7, sp, #0
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	603b      	str	r3, [r7, #0]
 8015114:	4613      	mov	r3, r2
 8015116:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d105      	bne.n	801512a <tcp_create_segment+0x22>
 801511e:	4b44      	ldr	r3, [pc, #272]	; (8015230 <tcp_create_segment+0x128>)
 8015120:	22a3      	movs	r2, #163	; 0xa3
 8015122:	4944      	ldr	r1, [pc, #272]	; (8015234 <tcp_create_segment+0x12c>)
 8015124:	4844      	ldr	r0, [pc, #272]	; (8015238 <tcp_create_segment+0x130>)
 8015126:	f007 ffd9 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d105      	bne.n	801513c <tcp_create_segment+0x34>
 8015130:	4b3f      	ldr	r3, [pc, #252]	; (8015230 <tcp_create_segment+0x128>)
 8015132:	22a4      	movs	r2, #164	; 0xa4
 8015134:	4941      	ldr	r1, [pc, #260]	; (801523c <tcp_create_segment+0x134>)
 8015136:	4840      	ldr	r0, [pc, #256]	; (8015238 <tcp_create_segment+0x130>)
 8015138:	f007 ffd0 	bl	801d0dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801513c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	b2db      	uxtb	r3, r3
 8015144:	f003 0304 	and.w	r3, r3, #4
 8015148:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801514a:	2003      	movs	r0, #3
 801514c:	f7fa fc22 	bl	800f994 <memp_malloc>
 8015150:	6138      	str	r0, [r7, #16]
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d104      	bne.n	8015162 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015158:	68b8      	ldr	r0, [r7, #8]
 801515a:	f7fb fb0d 	bl	8010778 <pbuf_free>
    return NULL;
 801515e:	2300      	movs	r3, #0
 8015160:	e061      	b.n	8015226 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015168:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	2200      	movs	r2, #0
 801516e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	891a      	ldrh	r2, [r3, #8]
 801517a:	7dfb      	ldrb	r3, [r7, #23]
 801517c:	b29b      	uxth	r3, r3
 801517e:	429a      	cmp	r2, r3
 8015180:	d205      	bcs.n	801518e <tcp_create_segment+0x86>
 8015182:	4b2b      	ldr	r3, [pc, #172]	; (8015230 <tcp_create_segment+0x128>)
 8015184:	22b0      	movs	r2, #176	; 0xb0
 8015186:	492e      	ldr	r1, [pc, #184]	; (8015240 <tcp_create_segment+0x138>)
 8015188:	482b      	ldr	r0, [pc, #172]	; (8015238 <tcp_create_segment+0x130>)
 801518a:	f007 ffa7 	bl	801d0dc <iprintf>
  seg->len = p->tot_len - optlen;
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	891a      	ldrh	r2, [r3, #8]
 8015192:	7dfb      	ldrb	r3, [r7, #23]
 8015194:	b29b      	uxth	r3, r3
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	b29a      	uxth	r2, r3
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801519e:	2114      	movs	r1, #20
 80151a0:	68b8      	ldr	r0, [r7, #8]
 80151a2:	f7fb fa53 	bl	801064c <pbuf_add_header>
 80151a6:	4603      	mov	r3, r0
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d004      	beq.n	80151b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80151ac:	6938      	ldr	r0, [r7, #16]
 80151ae:	f7fd f81e 	bl	80121ee <tcp_seg_free>
    return NULL;
 80151b2:	2300      	movs	r3, #0
 80151b4:	e037      	b.n	8015226 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	685a      	ldr	r2, [r3, #4]
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	8ada      	ldrh	r2, [r3, #22]
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	68dc      	ldr	r4, [r3, #12]
 80151c8:	4610      	mov	r0, r2
 80151ca:	f7f9 fc7e 	bl	800eaca <lwip_htons>
 80151ce:	4603      	mov	r3, r0
 80151d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	8b1a      	ldrh	r2, [r3, #24]
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	68dc      	ldr	r4, [r3, #12]
 80151da:	4610      	mov	r0, r2
 80151dc:	f7f9 fc75 	bl	800eaca <lwip_htons>
 80151e0:	4603      	mov	r3, r0
 80151e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	68dc      	ldr	r4, [r3, #12]
 80151e8:	6838      	ldr	r0, [r7, #0]
 80151ea:	f7f9 fc83 	bl	800eaf4 <lwip_htonl>
 80151ee:	4603      	mov	r3, r0
 80151f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80151f2:	7dfb      	ldrb	r3, [r7, #23]
 80151f4:	089b      	lsrs	r3, r3, #2
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	3305      	adds	r3, #5
 80151fc:	b29b      	uxth	r3, r3
 80151fe:	031b      	lsls	r3, r3, #12
 8015200:	b29a      	uxth	r2, r3
 8015202:	79fb      	ldrb	r3, [r7, #7]
 8015204:	b29b      	uxth	r3, r3
 8015206:	4313      	orrs	r3, r2
 8015208:	b29a      	uxth	r2, r3
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	68dc      	ldr	r4, [r3, #12]
 801520e:	4610      	mov	r0, r2
 8015210:	f7f9 fc5b 	bl	800eaca <lwip_htons>
 8015214:	4603      	mov	r3, r0
 8015216:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	2200      	movs	r2, #0
 801521e:	749a      	strb	r2, [r3, #18]
 8015220:	2200      	movs	r2, #0
 8015222:	74da      	strb	r2, [r3, #19]
  return seg;
 8015224:	693b      	ldr	r3, [r7, #16]
}
 8015226:	4618      	mov	r0, r3
 8015228:	371c      	adds	r7, #28
 801522a:	46bd      	mov	sp, r7
 801522c:	bd90      	pop	{r4, r7, pc}
 801522e:	bf00      	nop
 8015230:	0801f6e0 	.word	0x0801f6e0
 8015234:	0801f714 	.word	0x0801f714
 8015238:	0801f734 	.word	0x0801f734
 801523c:	0801f75c 	.word	0x0801f75c
 8015240:	0801f780 	.word	0x0801f780

08015244 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	607b      	str	r3, [r7, #4]
 801524c:	4603      	mov	r3, r0
 801524e:	73fb      	strb	r3, [r7, #15]
 8015250:	460b      	mov	r3, r1
 8015252:	81bb      	strh	r3, [r7, #12]
 8015254:	4613      	mov	r3, r2
 8015256:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015258:	89bb      	ldrh	r3, [r7, #12]
 801525a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d105      	bne.n	801526e <tcp_pbuf_prealloc+0x2a>
 8015262:	4b30      	ldr	r3, [pc, #192]	; (8015324 <tcp_pbuf_prealloc+0xe0>)
 8015264:	22e8      	movs	r2, #232	; 0xe8
 8015266:	4930      	ldr	r1, [pc, #192]	; (8015328 <tcp_pbuf_prealloc+0xe4>)
 8015268:	4830      	ldr	r0, [pc, #192]	; (801532c <tcp_pbuf_prealloc+0xe8>)
 801526a:	f007 ff37 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801526e:	6a3b      	ldr	r3, [r7, #32]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d105      	bne.n	8015280 <tcp_pbuf_prealloc+0x3c>
 8015274:	4b2b      	ldr	r3, [pc, #172]	; (8015324 <tcp_pbuf_prealloc+0xe0>)
 8015276:	22e9      	movs	r2, #233	; 0xe9
 8015278:	492d      	ldr	r1, [pc, #180]	; (8015330 <tcp_pbuf_prealloc+0xec>)
 801527a:	482c      	ldr	r0, [pc, #176]	; (801532c <tcp_pbuf_prealloc+0xe8>)
 801527c:	f007 ff2e 	bl	801d0dc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015280:	89ba      	ldrh	r2, [r7, #12]
 8015282:	897b      	ldrh	r3, [r7, #10]
 8015284:	429a      	cmp	r2, r3
 8015286:	d221      	bcs.n	80152cc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801528c:	f003 0302 	and.w	r3, r3, #2
 8015290:	2b00      	cmp	r3, #0
 8015292:	d111      	bne.n	80152b8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015294:	6a3b      	ldr	r3, [r7, #32]
 8015296:	8b5b      	ldrh	r3, [r3, #26]
 8015298:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801529c:	2b00      	cmp	r3, #0
 801529e:	d115      	bne.n	80152cc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80152a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d007      	beq.n	80152b8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80152a8:	6a3b      	ldr	r3, [r7, #32]
 80152aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d103      	bne.n	80152b8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80152b0:	6a3b      	ldr	r3, [r7, #32]
 80152b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d009      	beq.n	80152cc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80152b8:	89bb      	ldrh	r3, [r7, #12]
 80152ba:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80152be:	f023 0203 	bic.w	r2, r3, #3
 80152c2:	897b      	ldrh	r3, [r7, #10]
 80152c4:	4293      	cmp	r3, r2
 80152c6:	bf28      	it	cs
 80152c8:	4613      	movcs	r3, r2
 80152ca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80152cc:	8af9      	ldrh	r1, [r7, #22]
 80152ce:	7bfb      	ldrb	r3, [r7, #15]
 80152d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7fa ff6b 	bl	80101b0 <pbuf_alloc>
 80152da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80152e2:	2300      	movs	r3, #0
 80152e4:	e019      	b.n	801531a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d006      	beq.n	80152fc <tcp_pbuf_prealloc+0xb8>
 80152ee:	4b0d      	ldr	r3, [pc, #52]	; (8015324 <tcp_pbuf_prealloc+0xe0>)
 80152f0:	f240 120b 	movw	r2, #267	; 0x10b
 80152f4:	490f      	ldr	r1, [pc, #60]	; (8015334 <tcp_pbuf_prealloc+0xf0>)
 80152f6:	480d      	ldr	r0, [pc, #52]	; (801532c <tcp_pbuf_prealloc+0xe8>)
 80152f8:	f007 fef0 	bl	801d0dc <iprintf>
  *oversize = p->len - length;
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	895a      	ldrh	r2, [r3, #10]
 8015300:	89bb      	ldrh	r3, [r7, #12]
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	b29a      	uxth	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	89ba      	ldrh	r2, [r7, #12]
 801530e:	811a      	strh	r2, [r3, #8]
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	891a      	ldrh	r2, [r3, #8]
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	815a      	strh	r2, [r3, #10]
  return p;
 8015318:	693b      	ldr	r3, [r7, #16]
}
 801531a:	4618      	mov	r0, r3
 801531c:	3718      	adds	r7, #24
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	0801f6e0 	.word	0x0801f6e0
 8015328:	0801f798 	.word	0x0801f798
 801532c:	0801f734 	.word	0x0801f734
 8015330:	0801f7bc 	.word	0x0801f7bc
 8015334:	0801f7dc 	.word	0x0801f7dc

08015338 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	460b      	mov	r3, r1
 8015342:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d106      	bne.n	8015358 <tcp_write_checks+0x20>
 801534a:	4b33      	ldr	r3, [pc, #204]	; (8015418 <tcp_write_checks+0xe0>)
 801534c:	f240 1233 	movw	r2, #307	; 0x133
 8015350:	4932      	ldr	r1, [pc, #200]	; (801541c <tcp_write_checks+0xe4>)
 8015352:	4833      	ldr	r0, [pc, #204]	; (8015420 <tcp_write_checks+0xe8>)
 8015354:	f007 fec2 	bl	801d0dc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	7d1b      	ldrb	r3, [r3, #20]
 801535c:	2b04      	cmp	r3, #4
 801535e:	d00e      	beq.n	801537e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015364:	2b07      	cmp	r3, #7
 8015366:	d00a      	beq.n	801537e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801536c:	2b02      	cmp	r3, #2
 801536e:	d006      	beq.n	801537e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015374:	2b03      	cmp	r3, #3
 8015376:	d002      	beq.n	801537e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015378:	f06f 030a 	mvn.w	r3, #10
 801537c:	e048      	b.n	8015410 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801537e:	887b      	ldrh	r3, [r7, #2]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d101      	bne.n	8015388 <tcp_write_checks+0x50>
    return ERR_OK;
 8015384:	2300      	movs	r3, #0
 8015386:	e043      	b.n	8015410 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801538e:	887a      	ldrh	r2, [r7, #2]
 8015390:	429a      	cmp	r2, r3
 8015392:	d909      	bls.n	80153a8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	8b5b      	ldrh	r3, [r3, #26]
 8015398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801539c:	b29a      	uxth	r2, r3
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80153a2:	f04f 33ff 	mov.w	r3, #4294967295
 80153a6:	e033      	b.n	8015410 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80153ae:	2b0f      	cmp	r3, #15
 80153b0:	d909      	bls.n	80153c6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	8b5b      	ldrh	r3, [r3, #26]
 80153b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80153c0:	f04f 33ff 	mov.w	r3, #4294967295
 80153c4:	e024      	b.n	8015410 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d00f      	beq.n	80153f0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d11a      	bne.n	801540e <tcp_write_checks+0xd6>
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d116      	bne.n	801540e <tcp_write_checks+0xd6>
 80153e0:	4b0d      	ldr	r3, [pc, #52]	; (8015418 <tcp_write_checks+0xe0>)
 80153e2:	f240 1255 	movw	r2, #341	; 0x155
 80153e6:	490f      	ldr	r1, [pc, #60]	; (8015424 <tcp_write_checks+0xec>)
 80153e8:	480d      	ldr	r0, [pc, #52]	; (8015420 <tcp_write_checks+0xe8>)
 80153ea:	f007 fe77 	bl	801d0dc <iprintf>
 80153ee:	e00e      	b.n	801540e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d103      	bne.n	8015400 <tcp_write_checks+0xc8>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d006      	beq.n	801540e <tcp_write_checks+0xd6>
 8015400:	4b05      	ldr	r3, [pc, #20]	; (8015418 <tcp_write_checks+0xe0>)
 8015402:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015406:	4908      	ldr	r1, [pc, #32]	; (8015428 <tcp_write_checks+0xf0>)
 8015408:	4805      	ldr	r0, [pc, #20]	; (8015420 <tcp_write_checks+0xe8>)
 801540a:	f007 fe67 	bl	801d0dc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}
 8015418:	0801f6e0 	.word	0x0801f6e0
 801541c:	0801f7f0 	.word	0x0801f7f0
 8015420:	0801f734 	.word	0x0801f734
 8015424:	0801f810 	.word	0x0801f810
 8015428:	0801f84c 	.word	0x0801f84c

0801542c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801542c:	b590      	push	{r4, r7, lr}
 801542e:	b09b      	sub	sp, #108	; 0x6c
 8015430:	af04      	add	r7, sp, #16
 8015432:	60f8      	str	r0, [r7, #12]
 8015434:	60b9      	str	r1, [r7, #8]
 8015436:	4611      	mov	r1, r2
 8015438:	461a      	mov	r2, r3
 801543a:	460b      	mov	r3, r1
 801543c:	80fb      	strh	r3, [r7, #6]
 801543e:	4613      	mov	r3, r2
 8015440:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015442:	2300      	movs	r3, #0
 8015444:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015446:	2300      	movs	r3, #0
 8015448:	653b      	str	r3, [r7, #80]	; 0x50
 801544a:	2300      	movs	r3, #0
 801544c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801544e:	2300      	movs	r3, #0
 8015450:	64bb      	str	r3, [r7, #72]	; 0x48
 8015452:	2300      	movs	r3, #0
 8015454:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015456:	2300      	movs	r3, #0
 8015458:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801545c:	2300      	movs	r3, #0
 801545e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015462:	2300      	movs	r3, #0
 8015464:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015466:	2300      	movs	r3, #0
 8015468:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801546a:	2300      	movs	r3, #0
 801546c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d109      	bne.n	8015488 <tcp_write+0x5c>
 8015474:	4ba4      	ldr	r3, [pc, #656]	; (8015708 <tcp_write+0x2dc>)
 8015476:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801547a:	49a4      	ldr	r1, [pc, #656]	; (801570c <tcp_write+0x2e0>)
 801547c:	48a4      	ldr	r0, [pc, #656]	; (8015710 <tcp_write+0x2e4>)
 801547e:	f007 fe2d 	bl	801d0dc <iprintf>
 8015482:	f06f 030f 	mvn.w	r3, #15
 8015486:	e32a      	b.n	8015ade <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801548e:	085b      	lsrs	r3, r3, #1
 8015490:	b29a      	uxth	r2, r3
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015496:	4293      	cmp	r3, r2
 8015498:	bf28      	it	cs
 801549a:	4613      	movcs	r3, r2
 801549c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801549e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d102      	bne.n	80154aa <tcp_write+0x7e>
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154a8:	e000      	b.n	80154ac <tcp_write+0x80>
 80154aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d109      	bne.n	80154c8 <tcp_write+0x9c>
 80154b4:	4b94      	ldr	r3, [pc, #592]	; (8015708 <tcp_write+0x2dc>)
 80154b6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80154ba:	4996      	ldr	r1, [pc, #600]	; (8015714 <tcp_write+0x2e8>)
 80154bc:	4894      	ldr	r0, [pc, #592]	; (8015710 <tcp_write+0x2e4>)
 80154be:	f007 fe0d 	bl	801d0dc <iprintf>
 80154c2:	f06f 030f 	mvn.w	r3, #15
 80154c6:	e30a      	b.n	8015ade <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80154c8:	88fb      	ldrh	r3, [r7, #6]
 80154ca:	4619      	mov	r1, r3
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f7ff ff33 	bl	8015338 <tcp_write_checks>
 80154d2:	4603      	mov	r3, r0
 80154d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80154d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d002      	beq.n	80154e6 <tcp_write+0xba>
    return err;
 80154e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80154e4:	e2fb      	b.n	8015ade <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80154f0:	2300      	movs	r3, #0
 80154f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f000 80f6 	beq.w	80156ec <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015504:	653b      	str	r3, [r7, #80]	; 0x50
 8015506:	e002      	b.n	801550e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1f8      	bne.n	8015508 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015518:	7a9b      	ldrb	r3, [r3, #10]
 801551a:	009b      	lsls	r3, r3, #2
 801551c:	b29b      	uxth	r3, r3
 801551e:	f003 0304 	and.w	r3, r3, #4
 8015522:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015524:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015528:	891b      	ldrh	r3, [r3, #8]
 801552a:	4619      	mov	r1, r3
 801552c:	8c3b      	ldrh	r3, [r7, #32]
 801552e:	440b      	add	r3, r1
 8015530:	429a      	cmp	r2, r3
 8015532:	da06      	bge.n	8015542 <tcp_write+0x116>
 8015534:	4b74      	ldr	r3, [pc, #464]	; (8015708 <tcp_write+0x2dc>)
 8015536:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801553a:	4977      	ldr	r1, [pc, #476]	; (8015718 <tcp_write+0x2ec>)
 801553c:	4874      	ldr	r0, [pc, #464]	; (8015710 <tcp_write+0x2e4>)
 801553e:	f007 fdcd 	bl	801d0dc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015544:	891a      	ldrh	r2, [r3, #8]
 8015546:	8c3b      	ldrh	r3, [r7, #32]
 8015548:	4413      	add	r3, r2
 801554a:	b29b      	uxth	r3, r3
 801554c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801554e:	1ad3      	subs	r3, r2, r3
 8015550:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015558:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801555a:	8a7b      	ldrh	r3, [r7, #18]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d026      	beq.n	80155ae <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015560:	8a7b      	ldrh	r3, [r7, #18]
 8015562:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015564:	429a      	cmp	r2, r3
 8015566:	d206      	bcs.n	8015576 <tcp_write+0x14a>
 8015568:	4b67      	ldr	r3, [pc, #412]	; (8015708 <tcp_write+0x2dc>)
 801556a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801556e:	496b      	ldr	r1, [pc, #428]	; (801571c <tcp_write+0x2f0>)
 8015570:	4867      	ldr	r0, [pc, #412]	; (8015710 <tcp_write+0x2e4>)
 8015572:	f007 fdb3 	bl	801d0dc <iprintf>
      seg = last_unsent;
 8015576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015578:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801557a:	8a7b      	ldrh	r3, [r7, #18]
 801557c:	88fa      	ldrh	r2, [r7, #6]
 801557e:	4293      	cmp	r3, r2
 8015580:	bf28      	it	cs
 8015582:	4613      	movcs	r3, r2
 8015584:	b29b      	uxth	r3, r3
 8015586:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015588:	4293      	cmp	r3, r2
 801558a:	bf28      	it	cs
 801558c:	4613      	movcs	r3, r2
 801558e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015590:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015596:	4413      	add	r3, r2
 8015598:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801559c:	8a7a      	ldrh	r2, [r7, #18]
 801559e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155a0:	1ad3      	subs	r3, r2, r3
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80155a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80155a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155aa:	1ad3      	subs	r3, r2, r3
 80155ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80155ae:	8a7b      	ldrh	r3, [r7, #18]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00b      	beq.n	80155cc <tcp_write+0x1a0>
 80155b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80155b8:	88fb      	ldrh	r3, [r7, #6]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d006      	beq.n	80155cc <tcp_write+0x1a0>
 80155be:	4b52      	ldr	r3, [pc, #328]	; (8015708 <tcp_write+0x2dc>)
 80155c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155c4:	4956      	ldr	r1, [pc, #344]	; (8015720 <tcp_write+0x2f4>)
 80155c6:	4852      	ldr	r0, [pc, #328]	; (8015710 <tcp_write+0x2e4>)
 80155c8:	f007 fd88 	bl	801d0dc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80155cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80155d0:	88fb      	ldrh	r3, [r7, #6]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	f080 8167 	bcs.w	80158a6 <tcp_write+0x47a>
 80155d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155da:	2b00      	cmp	r3, #0
 80155dc:	f000 8163 	beq.w	80158a6 <tcp_write+0x47a>
 80155e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155e2:	891b      	ldrh	r3, [r3, #8]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f000 815e 	beq.w	80158a6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80155ea:	88fa      	ldrh	r2, [r7, #6]
 80155ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155f0:	1ad2      	subs	r2, r2, r3
 80155f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155f4:	4293      	cmp	r3, r2
 80155f6:	bfa8      	it	ge
 80155f8:	4613      	movge	r3, r2
 80155fa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80155fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155fe:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015600:	797b      	ldrb	r3, [r7, #5]
 8015602:	f003 0301 	and.w	r3, r3, #1
 8015606:	2b00      	cmp	r3, #0
 8015608:	d027      	beq.n	801565a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801560a:	f107 0012 	add.w	r0, r7, #18
 801560e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015610:	8bf9      	ldrh	r1, [r7, #30]
 8015612:	2301      	movs	r3, #1
 8015614:	9302      	str	r3, [sp, #8]
 8015616:	797b      	ldrb	r3, [r7, #5]
 8015618:	9301      	str	r3, [sp, #4]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	4603      	mov	r3, r0
 8015620:	2000      	movs	r0, #0
 8015622:	f7ff fe0f 	bl	8015244 <tcp_pbuf_prealloc>
 8015626:	6578      	str	r0, [r7, #84]	; 0x54
 8015628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 8225 	beq.w	8015a7a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015632:	6858      	ldr	r0, [r3, #4]
 8015634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015638:	68ba      	ldr	r2, [r7, #8]
 801563a:	4413      	add	r3, r2
 801563c:	8bfa      	ldrh	r2, [r7, #30]
 801563e:	4619      	mov	r1, r3
 8015640:	f007 fe3f 	bl	801d2c2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015644:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015646:	f7fb f91f 	bl	8010888 <pbuf_clen>
 801564a:	4603      	mov	r3, r0
 801564c:	461a      	mov	r2, r3
 801564e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015652:	4413      	add	r3, r2
 8015654:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015658:	e041      	b.n	80156de <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801565a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	637b      	str	r3, [r7, #52]	; 0x34
 8015660:	e002      	b.n	8015668 <tcp_write+0x23c>
 8015662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	637b      	str	r3, [r7, #52]	; 0x34
 8015668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d1f8      	bne.n	8015662 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015672:	7b1b      	ldrb	r3, [r3, #12]
 8015674:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015678:	2b00      	cmp	r3, #0
 801567a:	d115      	bne.n	80156a8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015682:	8952      	ldrh	r2, [r2, #10]
 8015684:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015686:	68ba      	ldr	r2, [r7, #8]
 8015688:	429a      	cmp	r2, r3
 801568a:	d10d      	bne.n	80156a8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801568c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015690:	2b00      	cmp	r3, #0
 8015692:	d006      	beq.n	80156a2 <tcp_write+0x276>
 8015694:	4b1c      	ldr	r3, [pc, #112]	; (8015708 <tcp_write+0x2dc>)
 8015696:	f240 2231 	movw	r2, #561	; 0x231
 801569a:	4922      	ldr	r1, [pc, #136]	; (8015724 <tcp_write+0x2f8>)
 801569c:	481c      	ldr	r0, [pc, #112]	; (8015710 <tcp_write+0x2e4>)
 801569e:	f007 fd1d 	bl	801d0dc <iprintf>
          extendlen = seglen;
 80156a2:	8bfb      	ldrh	r3, [r7, #30]
 80156a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80156a6:	e01a      	b.n	80156de <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80156a8:	8bfb      	ldrh	r3, [r7, #30]
 80156aa:	2201      	movs	r2, #1
 80156ac:	4619      	mov	r1, r3
 80156ae:	2000      	movs	r0, #0
 80156b0:	f7fa fd7e 	bl	80101b0 <pbuf_alloc>
 80156b4:	6578      	str	r0, [r7, #84]	; 0x54
 80156b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 81e0 	beq.w	8015a7e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80156be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80156c2:	68ba      	ldr	r2, [r7, #8]
 80156c4:	441a      	add	r2, r3
 80156c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156c8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80156ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80156cc:	f7fb f8dc 	bl	8010888 <pbuf_clen>
 80156d0:	4603      	mov	r3, r0
 80156d2:	461a      	mov	r2, r3
 80156d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80156d8:	4413      	add	r3, r2
 80156da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80156de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80156e2:	8bfb      	ldrh	r3, [r7, #30]
 80156e4:	4413      	add	r3, r2
 80156e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80156ea:	e0dc      	b.n	80158a6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	f000 80d7 	beq.w	80158a6 <tcp_write+0x47a>
 80156f8:	4b03      	ldr	r3, [pc, #12]	; (8015708 <tcp_write+0x2dc>)
 80156fa:	f240 224a 	movw	r2, #586	; 0x24a
 80156fe:	490a      	ldr	r1, [pc, #40]	; (8015728 <tcp_write+0x2fc>)
 8015700:	4803      	ldr	r0, [pc, #12]	; (8015710 <tcp_write+0x2e4>)
 8015702:	f007 fceb 	bl	801d0dc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015706:	e0ce      	b.n	80158a6 <tcp_write+0x47a>
 8015708:	0801f6e0 	.word	0x0801f6e0
 801570c:	0801f880 	.word	0x0801f880
 8015710:	0801f734 	.word	0x0801f734
 8015714:	0801f898 	.word	0x0801f898
 8015718:	0801f8cc 	.word	0x0801f8cc
 801571c:	0801f8e4 	.word	0x0801f8e4
 8015720:	0801f904 	.word	0x0801f904
 8015724:	0801f924 	.word	0x0801f924
 8015728:	0801f950 	.word	0x0801f950
    struct pbuf *p;
    u16_t left = len - pos;
 801572c:	88fa      	ldrh	r2, [r7, #6]
 801572e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015732:	1ad3      	subs	r3, r2, r3
 8015734:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015736:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801573a:	b29b      	uxth	r3, r3
 801573c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801573e:	1ad3      	subs	r3, r2, r3
 8015740:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015742:	8b7a      	ldrh	r2, [r7, #26]
 8015744:	8bbb      	ldrh	r3, [r7, #28]
 8015746:	4293      	cmp	r3, r2
 8015748:	bf28      	it	cs
 801574a:	4613      	movcs	r3, r2
 801574c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801574e:	797b      	ldrb	r3, [r7, #5]
 8015750:	f003 0301 	and.w	r3, r3, #1
 8015754:	2b00      	cmp	r3, #0
 8015756:	d036      	beq.n	80157c6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801575c:	b29a      	uxth	r2, r3
 801575e:	8b3b      	ldrh	r3, [r7, #24]
 8015760:	4413      	add	r3, r2
 8015762:	b299      	uxth	r1, r3
 8015764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015766:	2b00      	cmp	r3, #0
 8015768:	bf0c      	ite	eq
 801576a:	2301      	moveq	r3, #1
 801576c:	2300      	movne	r3, #0
 801576e:	b2db      	uxtb	r3, r3
 8015770:	f107 0012 	add.w	r0, r7, #18
 8015774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015776:	9302      	str	r3, [sp, #8]
 8015778:	797b      	ldrb	r3, [r7, #5]
 801577a:	9301      	str	r3, [sp, #4]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	4603      	mov	r3, r0
 8015782:	2036      	movs	r0, #54	; 0x36
 8015784:	f7ff fd5e 	bl	8015244 <tcp_pbuf_prealloc>
 8015788:	6338      	str	r0, [r7, #48]	; 0x30
 801578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801578c:	2b00      	cmp	r3, #0
 801578e:	f000 8178 	beq.w	8015a82 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015794:	895b      	ldrh	r3, [r3, #10]
 8015796:	8b3a      	ldrh	r2, [r7, #24]
 8015798:	429a      	cmp	r2, r3
 801579a:	d906      	bls.n	80157aa <tcp_write+0x37e>
 801579c:	4b8c      	ldr	r3, [pc, #560]	; (80159d0 <tcp_write+0x5a4>)
 801579e:	f240 2266 	movw	r2, #614	; 0x266
 80157a2:	498c      	ldr	r1, [pc, #560]	; (80159d4 <tcp_write+0x5a8>)
 80157a4:	488c      	ldr	r0, [pc, #560]	; (80159d8 <tcp_write+0x5ac>)
 80157a6:	f007 fc99 	bl	801d0dc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80157aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ac:	685a      	ldr	r2, [r3, #4]
 80157ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80157b2:	18d0      	adds	r0, r2, r3
 80157b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157b8:	68ba      	ldr	r2, [r7, #8]
 80157ba:	4413      	add	r3, r2
 80157bc:	8b3a      	ldrh	r2, [r7, #24]
 80157be:	4619      	mov	r1, r3
 80157c0:	f007 fd7f 	bl	801d2c2 <memcpy>
 80157c4:	e02f      	b.n	8015826 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80157c6:	8a7b      	ldrh	r3, [r7, #18]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d006      	beq.n	80157da <tcp_write+0x3ae>
 80157cc:	4b80      	ldr	r3, [pc, #512]	; (80159d0 <tcp_write+0x5a4>)
 80157ce:	f240 2271 	movw	r2, #625	; 0x271
 80157d2:	4982      	ldr	r1, [pc, #520]	; (80159dc <tcp_write+0x5b0>)
 80157d4:	4880      	ldr	r0, [pc, #512]	; (80159d8 <tcp_write+0x5ac>)
 80157d6:	f007 fc81 	bl	801d0dc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80157da:	8b3b      	ldrh	r3, [r7, #24]
 80157dc:	2201      	movs	r2, #1
 80157de:	4619      	mov	r1, r3
 80157e0:	2036      	movs	r0, #54	; 0x36
 80157e2:	f7fa fce5 	bl	80101b0 <pbuf_alloc>
 80157e6:	6178      	str	r0, [r7, #20]
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f000 814b 	beq.w	8015a86 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80157f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157f4:	68ba      	ldr	r2, [r7, #8]
 80157f6:	441a      	add	r2, r3
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80157fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015800:	b29b      	uxth	r3, r3
 8015802:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015806:	4619      	mov	r1, r3
 8015808:	2036      	movs	r0, #54	; 0x36
 801580a:	f7fa fcd1 	bl	80101b0 <pbuf_alloc>
 801580e:	6338      	str	r0, [r7, #48]	; 0x30
 8015810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015812:	2b00      	cmp	r3, #0
 8015814:	d103      	bne.n	801581e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015816:	6978      	ldr	r0, [r7, #20]
 8015818:	f7fa ffae 	bl	8010778 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801581c:	e136      	b.n	8015a8c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801581e:	6979      	ldr	r1, [r7, #20]
 8015820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015822:	f7fb f86b 	bl	80108fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015828:	f7fb f82e 	bl	8010888 <pbuf_clen>
 801582c:	4603      	mov	r3, r0
 801582e:	461a      	mov	r2, r3
 8015830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015834:	4413      	add	r3, r2
 8015836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801583a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801583e:	2b10      	cmp	r3, #16
 8015840:	d903      	bls.n	801584a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015844:	f7fa ff98 	bl	8010778 <pbuf_free>
      goto memerr;
 8015848:	e120      	b.n	8015a8c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801584e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015852:	441a      	add	r2, r3
 8015854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	4613      	mov	r3, r2
 801585c:	2200      	movs	r2, #0
 801585e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	f7ff fc51 	bl	8015108 <tcp_create_segment>
 8015866:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801586a:	2b00      	cmp	r3, #0
 801586c:	f000 810d 	beq.w	8015a8a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015872:	2b00      	cmp	r3, #0
 8015874:	d102      	bne.n	801587c <tcp_write+0x450>
      queue = seg;
 8015876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015878:	647b      	str	r3, [r7, #68]	; 0x44
 801587a:	e00c      	b.n	8015896 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801587e:	2b00      	cmp	r3, #0
 8015880:	d106      	bne.n	8015890 <tcp_write+0x464>
 8015882:	4b53      	ldr	r3, [pc, #332]	; (80159d0 <tcp_write+0x5a4>)
 8015884:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015888:	4955      	ldr	r1, [pc, #340]	; (80159e0 <tcp_write+0x5b4>)
 801588a:	4853      	ldr	r0, [pc, #332]	; (80159d8 <tcp_write+0x5ac>)
 801588c:	f007 fc26 	bl	801d0dc <iprintf>
      prev_seg->next = seg;
 8015890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015894:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015898:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801589a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801589e:	8b3b      	ldrh	r3, [r7, #24]
 80158a0:	4413      	add	r3, r2
 80158a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80158a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80158aa:	88fb      	ldrh	r3, [r7, #6]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	f4ff af3d 	bcc.w	801572c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80158b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d02c      	beq.n	8015912 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80158b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158be:	e01e      	b.n	80158fe <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	891a      	ldrh	r2, [r3, #8]
 80158c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158c6:	4413      	add	r3, r2
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158cc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80158ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d110      	bne.n	80158f8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80158d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158dc:	8952      	ldrh	r2, [r2, #10]
 80158de:	4413      	add	r3, r2
 80158e0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80158e2:	68b9      	ldr	r1, [r7, #8]
 80158e4:	4618      	mov	r0, r3
 80158e6:	f007 fcec 	bl	801d2c2 <memcpy>
        p->len += oversize_used;
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ec:	895a      	ldrh	r2, [r3, #10]
 80158ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158f0:	4413      	add	r3, r2
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	2b00      	cmp	r3, #0
 8015902:	d1dd      	bne.n	80158c0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015906:	891a      	ldrh	r2, [r3, #8]
 8015908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801590a:	4413      	add	r3, r2
 801590c:	b29a      	uxth	r2, r3
 801590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015910:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015912:	8a7a      	ldrh	r2, [r7, #18]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801591a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801591c:	2b00      	cmp	r3, #0
 801591e:	d018      	beq.n	8015952 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015922:	2b00      	cmp	r3, #0
 8015924:	d106      	bne.n	8015934 <tcp_write+0x508>
 8015926:	4b2a      	ldr	r3, [pc, #168]	; (80159d0 <tcp_write+0x5a4>)
 8015928:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801592c:	492d      	ldr	r1, [pc, #180]	; (80159e4 <tcp_write+0x5b8>)
 801592e:	482a      	ldr	r0, [pc, #168]	; (80159d8 <tcp_write+0x5ac>)
 8015930:	f007 fbd4 	bl	801d0dc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801593a:	4618      	mov	r0, r3
 801593c:	f7fa ffde 	bl	80108fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015942:	891a      	ldrh	r2, [r3, #8]
 8015944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015946:	891b      	ldrh	r3, [r3, #8]
 8015948:	4413      	add	r3, r2
 801594a:	b29a      	uxth	r2, r3
 801594c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801594e:	811a      	strh	r2, [r3, #8]
 8015950:	e037      	b.n	80159c2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015952:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015954:	2b00      	cmp	r3, #0
 8015956:	d034      	beq.n	80159c2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801595a:	2b00      	cmp	r3, #0
 801595c:	d003      	beq.n	8015966 <tcp_write+0x53a>
 801595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d106      	bne.n	8015974 <tcp_write+0x548>
 8015966:	4b1a      	ldr	r3, [pc, #104]	; (80159d0 <tcp_write+0x5a4>)
 8015968:	f240 22e6 	movw	r2, #742	; 0x2e6
 801596c:	491e      	ldr	r1, [pc, #120]	; (80159e8 <tcp_write+0x5bc>)
 801596e:	481a      	ldr	r0, [pc, #104]	; (80159d8 <tcp_write+0x5ac>)
 8015970:	f007 fbb4 	bl	801d0dc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	62bb      	str	r3, [r7, #40]	; 0x28
 801597a:	e009      	b.n	8015990 <tcp_write+0x564>
      p->tot_len += extendlen;
 801597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597e:	891a      	ldrh	r2, [r3, #8]
 8015980:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015982:	4413      	add	r3, r2
 8015984:	b29a      	uxth	r2, r3
 8015986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015988:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d1f1      	bne.n	801597c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599a:	891a      	ldrh	r2, [r3, #8]
 801599c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801599e:	4413      	add	r3, r2
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80159a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a8:	895a      	ldrh	r2, [r3, #10]
 80159aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80159ac:	4413      	add	r3, r2
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80159b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159b6:	891a      	ldrh	r2, [r3, #8]
 80159b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80159ba:	4413      	add	r3, r2
 80159bc:	b29a      	uxth	r2, r3
 80159be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159c0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80159c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d111      	bne.n	80159ec <tcp_write+0x5c0>
    pcb->unsent = queue;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80159ce:	e010      	b.n	80159f2 <tcp_write+0x5c6>
 80159d0:	0801f6e0 	.word	0x0801f6e0
 80159d4:	0801f980 	.word	0x0801f980
 80159d8:	0801f734 	.word	0x0801f734
 80159dc:	0801f9c0 	.word	0x0801f9c0
 80159e0:	0801f9d0 	.word	0x0801f9d0
 80159e4:	0801f9e4 	.word	0x0801f9e4
 80159e8:	0801fa1c 	.word	0x0801fa1c
  } else {
    last_unsent->next = queue;
 80159ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159f0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80159f6:	88fb      	ldrh	r3, [r7, #6]
 80159f8:	441a      	add	r2, r3
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015a16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d00e      	beq.n	8015a42 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d10a      	bne.n	8015a42 <tcp_write+0x616>
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d106      	bne.n	8015a42 <tcp_write+0x616>
 8015a34:	4b2c      	ldr	r3, [pc, #176]	; (8015ae8 <tcp_write+0x6bc>)
 8015a36:	f240 3212 	movw	r2, #786	; 0x312
 8015a3a:	492c      	ldr	r1, [pc, #176]	; (8015aec <tcp_write+0x6c0>)
 8015a3c:	482c      	ldr	r0, [pc, #176]	; (8015af0 <tcp_write+0x6c4>)
 8015a3e:	f007 fb4d 	bl	801d0dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d016      	beq.n	8015a76 <tcp_write+0x64a>
 8015a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d012      	beq.n	8015a76 <tcp_write+0x64a>
 8015a50:	797b      	ldrb	r3, [r7, #5]
 8015a52:	f003 0302 	and.w	r3, r3, #2
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d10d      	bne.n	8015a76 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	899b      	ldrh	r3, [r3, #12]
 8015a60:	b29c      	uxth	r4, r3
 8015a62:	2008      	movs	r0, #8
 8015a64:	f7f9 f831 	bl	800eaca <lwip_htons>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	4322      	orrs	r2, r4
 8015a72:	b292      	uxth	r2, r2
 8015a74:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015a76:	2300      	movs	r3, #0
 8015a78:	e031      	b.n	8015ade <tcp_write+0x6b2>
          goto memerr;
 8015a7a:	bf00      	nop
 8015a7c:	e006      	b.n	8015a8c <tcp_write+0x660>
            goto memerr;
 8015a7e:	bf00      	nop
 8015a80:	e004      	b.n	8015a8c <tcp_write+0x660>
        goto memerr;
 8015a82:	bf00      	nop
 8015a84:	e002      	b.n	8015a8c <tcp_write+0x660>
        goto memerr;
 8015a86:	bf00      	nop
 8015a88:	e000      	b.n	8015a8c <tcp_write+0x660>
      goto memerr;
 8015a8a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	8b5b      	ldrh	r3, [r3, #26]
 8015a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a94:	b29a      	uxth	r2, r3
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d002      	beq.n	8015aa6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015aa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015aa2:	f7fa fe69 	bl	8010778 <pbuf_free>
  }
  if (queue != NULL) {
 8015aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d002      	beq.n	8015ab2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8015aac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015aae:	f7fc fb89 	bl	80121c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00e      	beq.n	8015ada <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d10a      	bne.n	8015ada <tcp_write+0x6ae>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d106      	bne.n	8015ada <tcp_write+0x6ae>
 8015acc:	4b06      	ldr	r3, [pc, #24]	; (8015ae8 <tcp_write+0x6bc>)
 8015ace:	f240 3227 	movw	r2, #807	; 0x327
 8015ad2:	4906      	ldr	r1, [pc, #24]	; (8015aec <tcp_write+0x6c0>)
 8015ad4:	4806      	ldr	r0, [pc, #24]	; (8015af0 <tcp_write+0x6c4>)
 8015ad6:	f007 fb01 	bl	801d0dc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	375c      	adds	r7, #92	; 0x5c
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd90      	pop	{r4, r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	0801f6e0 	.word	0x0801f6e0
 8015aec:	0801fa54 	.word	0x0801fa54
 8015af0:	0801f734 	.word	0x0801f734

08015af4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b08b      	sub	sp, #44	; 0x2c
 8015af8:	af02      	add	r7, sp, #8
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	460b      	mov	r3, r1
 8015afe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015b00:	2300      	movs	r3, #0
 8015b02:	61fb      	str	r3, [r7, #28]
 8015b04:	2300      	movs	r3, #0
 8015b06:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d106      	bne.n	8015b20 <tcp_split_unsent_seg+0x2c>
 8015b12:	4b95      	ldr	r3, [pc, #596]	; (8015d68 <tcp_split_unsent_seg+0x274>)
 8015b14:	f240 324b 	movw	r2, #843	; 0x34b
 8015b18:	4994      	ldr	r1, [pc, #592]	; (8015d6c <tcp_split_unsent_seg+0x278>)
 8015b1a:	4895      	ldr	r0, [pc, #596]	; (8015d70 <tcp_split_unsent_seg+0x27c>)
 8015b1c:	f007 fade 	bl	801d0dc <iprintf>

  useg = pcb->unsent;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b24:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d102      	bne.n	8015b32 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b30:	e116      	b.n	8015d60 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015b32:	887b      	ldrh	r3, [r7, #2]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d109      	bne.n	8015b4c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015b38:	4b8b      	ldr	r3, [pc, #556]	; (8015d68 <tcp_split_unsent_seg+0x274>)
 8015b3a:	f240 3253 	movw	r2, #851	; 0x353
 8015b3e:	498d      	ldr	r1, [pc, #564]	; (8015d74 <tcp_split_unsent_seg+0x280>)
 8015b40:	488b      	ldr	r0, [pc, #556]	; (8015d70 <tcp_split_unsent_seg+0x27c>)
 8015b42:	f007 facb 	bl	801d0dc <iprintf>
    return ERR_VAL;
 8015b46:	f06f 0305 	mvn.w	r3, #5
 8015b4a:	e109      	b.n	8015d60 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	891b      	ldrh	r3, [r3, #8]
 8015b50:	887a      	ldrh	r2, [r7, #2]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d301      	bcc.n	8015b5a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015b56:	2300      	movs	r3, #0
 8015b58:	e102      	b.n	8015d60 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b5e:	887a      	ldrh	r2, [r7, #2]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d906      	bls.n	8015b72 <tcp_split_unsent_seg+0x7e>
 8015b64:	4b80      	ldr	r3, [pc, #512]	; (8015d68 <tcp_split_unsent_seg+0x274>)
 8015b66:	f240 325b 	movw	r2, #859	; 0x35b
 8015b6a:	4983      	ldr	r1, [pc, #524]	; (8015d78 <tcp_split_unsent_seg+0x284>)
 8015b6c:	4880      	ldr	r0, [pc, #512]	; (8015d70 <tcp_split_unsent_seg+0x27c>)
 8015b6e:	f007 fab5 	bl	801d0dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	891b      	ldrh	r3, [r3, #8]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d106      	bne.n	8015b88 <tcp_split_unsent_seg+0x94>
 8015b7a:	4b7b      	ldr	r3, [pc, #492]	; (8015d68 <tcp_split_unsent_seg+0x274>)
 8015b7c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015b80:	497e      	ldr	r1, [pc, #504]	; (8015d7c <tcp_split_unsent_seg+0x288>)
 8015b82:	487b      	ldr	r0, [pc, #492]	; (8015d70 <tcp_split_unsent_seg+0x27c>)
 8015b84:	f007 faaa 	bl	801d0dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	7a9b      	ldrb	r3, [r3, #10]
 8015b8c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015b8e:	7bfb      	ldrb	r3, [r7, #15]
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	f003 0304 	and.w	r3, r3, #4
 8015b98:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	891a      	ldrh	r2, [r3, #8]
 8015b9e:	887b      	ldrh	r3, [r7, #2]
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015ba4:	7bbb      	ldrb	r3, [r7, #14]
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	89bb      	ldrh	r3, [r7, #12]
 8015baa:	4413      	add	r3, r2
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	2036      	movs	r0, #54	; 0x36
 8015bb6:	f7fa fafb 	bl	80101b0 <pbuf_alloc>
 8015bba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f000 80b7 	beq.w	8015d32 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	891a      	ldrh	r2, [r3, #8]
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	891b      	ldrh	r3, [r3, #8]
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	887b      	ldrh	r3, [r7, #2]
 8015bd4:	4413      	add	r3, r2
 8015bd6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	6858      	ldr	r0, [r3, #4]
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	685a      	ldr	r2, [r3, #4]
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
 8015be2:	18d1      	adds	r1, r2, r3
 8015be4:	897b      	ldrh	r3, [r7, #10]
 8015be6:	89ba      	ldrh	r2, [r7, #12]
 8015be8:	f7fa ffc0 	bl	8010b6c <pbuf_copy_partial>
 8015bec:	4603      	mov	r3, r0
 8015bee:	461a      	mov	r2, r3
 8015bf0:	89bb      	ldrh	r3, [r7, #12]
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	f040 809f 	bne.w	8015d36 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	899b      	ldrh	r3, [r3, #12]
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7f8 ff62 	bl	800eaca <lwip_htons>
 8015c06:	4603      	mov	r3, r0
 8015c08:	b2db      	uxtb	r3, r3
 8015c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c0e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015c10:	2300      	movs	r3, #0
 8015c12:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015c14:	7efb      	ldrb	r3, [r7, #27]
 8015c16:	f003 0308 	and.w	r3, r3, #8
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d007      	beq.n	8015c2e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015c1e:	7efb      	ldrb	r3, [r7, #27]
 8015c20:	f023 0308 	bic.w	r3, r3, #8
 8015c24:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015c26:	7ebb      	ldrb	r3, [r7, #26]
 8015c28:	f043 0308 	orr.w	r3, r3, #8
 8015c2c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015c2e:	7efb      	ldrb	r3, [r7, #27]
 8015c30:	f003 0301 	and.w	r3, r3, #1
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d007      	beq.n	8015c48 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015c38:	7efb      	ldrb	r3, [r7, #27]
 8015c3a:	f023 0301 	bic.w	r3, r3, #1
 8015c3e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015c40:	7ebb      	ldrb	r3, [r7, #26]
 8015c42:	f043 0301 	orr.w	r3, r3, #1
 8015c46:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	68db      	ldr	r3, [r3, #12]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7f8 ff50 	bl	800eaf4 <lwip_htonl>
 8015c54:	4602      	mov	r2, r0
 8015c56:	887b      	ldrh	r3, [r7, #2]
 8015c58:	18d1      	adds	r1, r2, r3
 8015c5a:	7eba      	ldrb	r2, [r7, #26]
 8015c5c:	7bfb      	ldrb	r3, [r7, #15]
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	460b      	mov	r3, r1
 8015c62:	6939      	ldr	r1, [r7, #16]
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f7ff fa4f 	bl	8015108 <tcp_create_segment>
 8015c6a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d063      	beq.n	8015d3a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7fa fe06 	bl	8010888 <pbuf_clen>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	461a      	mov	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c86:	1a9b      	subs	r3, r3, r2
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	6858      	ldr	r0, [r3, #4]
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	891a      	ldrh	r2, [r3, #8]
 8015c9a:	89bb      	ldrh	r3, [r7, #12]
 8015c9c:	1ad3      	subs	r3, r2, r3
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	f7fa fbe3 	bl	801046c <pbuf_realloc>
  useg->len -= remainder;
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	891a      	ldrh	r2, [r3, #8]
 8015caa:	89bb      	ldrh	r3, [r7, #12]
 8015cac:	1ad3      	subs	r3, r2, r3
 8015cae:	b29a      	uxth	r2, r3
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	68db      	ldr	r3, [r3, #12]
 8015cb8:	899b      	ldrh	r3, [r3, #12]
 8015cba:	b29c      	uxth	r4, r3
 8015cbc:	7efb      	ldrb	r3, [r7, #27]
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7f8 ff02 	bl	800eaca <lwip_htons>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	461a      	mov	r2, r3
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	4322      	orrs	r2, r4
 8015cd0:	b292      	uxth	r2, r2
 8015cd2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7fa fdd5 	bl	8010888 <pbuf_clen>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ce8:	4413      	add	r3, r2
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7fa fdc6 	bl	8010888 <pbuf_clen>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	461a      	mov	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d06:	4413      	add	r3, r2
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015d10:	697b      	ldr	r3, [r7, #20]
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	69fa      	ldr	r2, [r7, #28]
 8015d1c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015d1e:	69fb      	ldr	r3, [r7, #28]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d103      	bne.n	8015d2e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	e016      	b.n	8015d60 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015d32:	bf00      	nop
 8015d34:	e002      	b.n	8015d3c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015d36:	bf00      	nop
 8015d38:	e000      	b.n	8015d3c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015d3a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d006      	beq.n	8015d50 <tcp_split_unsent_seg+0x25c>
 8015d42:	4b09      	ldr	r3, [pc, #36]	; (8015d68 <tcp_split_unsent_seg+0x274>)
 8015d44:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015d48:	490d      	ldr	r1, [pc, #52]	; (8015d80 <tcp_split_unsent_seg+0x28c>)
 8015d4a:	4809      	ldr	r0, [pc, #36]	; (8015d70 <tcp_split_unsent_seg+0x27c>)
 8015d4c:	f007 f9c6 	bl	801d0dc <iprintf>
  if (p != NULL) {
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d002      	beq.n	8015d5c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015d56:	6938      	ldr	r0, [r7, #16]
 8015d58:	f7fa fd0e 	bl	8010778 <pbuf_free>
  }

  return ERR_MEM;
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3724      	adds	r7, #36	; 0x24
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd90      	pop	{r4, r7, pc}
 8015d68:	0801f6e0 	.word	0x0801f6e0
 8015d6c:	0801fa74 	.word	0x0801fa74
 8015d70:	0801f734 	.word	0x0801f734
 8015d74:	0801fa98 	.word	0x0801fa98
 8015d78:	0801fabc 	.word	0x0801fabc
 8015d7c:	0801facc 	.word	0x0801facc
 8015d80:	0801fadc 	.word	0x0801fadc

08015d84 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015d84:	b590      	push	{r4, r7, lr}
 8015d86:	b085      	sub	sp, #20
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d106      	bne.n	8015da0 <tcp_send_fin+0x1c>
 8015d92:	4b21      	ldr	r3, [pc, #132]	; (8015e18 <tcp_send_fin+0x94>)
 8015d94:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015d98:	4920      	ldr	r1, [pc, #128]	; (8015e1c <tcp_send_fin+0x98>)
 8015d9a:	4821      	ldr	r0, [pc, #132]	; (8015e20 <tcp_send_fin+0x9c>)
 8015d9c:	f007 f99e 	bl	801d0dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d02e      	beq.n	8015e06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dac:	60fb      	str	r3, [r7, #12]
 8015dae:	e002      	b.n	8015db6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d1f8      	bne.n	8015db0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	899b      	ldrh	r3, [r3, #12]
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7f8 fe7f 	bl	800eaca <lwip_htons>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	f003 0307 	and.w	r3, r3, #7
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d116      	bne.n	8015e06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	899b      	ldrh	r3, [r3, #12]
 8015dde:	b29c      	uxth	r4, r3
 8015de0:	2001      	movs	r0, #1
 8015de2:	f7f8 fe72 	bl	800eaca <lwip_htons>
 8015de6:	4603      	mov	r3, r0
 8015de8:	461a      	mov	r2, r3
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	4322      	orrs	r2, r4
 8015df0:	b292      	uxth	r2, r2
 8015df2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	8b5b      	ldrh	r3, [r3, #26]
 8015df8:	f043 0320 	orr.w	r3, r3, #32
 8015dfc:	b29a      	uxth	r2, r3
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015e02:	2300      	movs	r3, #0
 8015e04:	e004      	b.n	8015e10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015e06:	2101      	movs	r1, #1
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 f80b 	bl	8015e24 <tcp_enqueue_flags>
 8015e0e:	4603      	mov	r3, r0
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3714      	adds	r7, #20
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd90      	pop	{r4, r7, pc}
 8015e18:	0801f6e0 	.word	0x0801f6e0
 8015e1c:	0801fae8 	.word	0x0801fae8
 8015e20:	0801f734 	.word	0x0801f734

08015e24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08a      	sub	sp, #40	; 0x28
 8015e28:	af02      	add	r7, sp, #8
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015e30:	2300      	movs	r3, #0
 8015e32:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015e34:	2300      	movs	r3, #0
 8015e36:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015e38:	78fb      	ldrb	r3, [r7, #3]
 8015e3a:	f003 0303 	and.w	r3, r3, #3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d106      	bne.n	8015e50 <tcp_enqueue_flags+0x2c>
 8015e42:	4b67      	ldr	r3, [pc, #412]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015e44:	f240 4211 	movw	r2, #1041	; 0x411
 8015e48:	4966      	ldr	r1, [pc, #408]	; (8015fe4 <tcp_enqueue_flags+0x1c0>)
 8015e4a:	4867      	ldr	r0, [pc, #412]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015e4c:	f007 f946 	bl	801d0dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d106      	bne.n	8015e64 <tcp_enqueue_flags+0x40>
 8015e56:	4b62      	ldr	r3, [pc, #392]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015e58:	f240 4213 	movw	r2, #1043	; 0x413
 8015e5c:	4963      	ldr	r1, [pc, #396]	; (8015fec <tcp_enqueue_flags+0x1c8>)
 8015e5e:	4862      	ldr	r0, [pc, #392]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015e60:	f007 f93c 	bl	801d0dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015e64:	78fb      	ldrb	r3, [r7, #3]
 8015e66:	f003 0302 	and.w	r3, r3, #2
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d001      	beq.n	8015e72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015e72:	7ffb      	ldrb	r3, [r7, #31]
 8015e74:	009b      	lsls	r3, r3, #2
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	f003 0304 	and.w	r3, r3, #4
 8015e7c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015e7e:	7dfb      	ldrb	r3, [r7, #23]
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e86:	4619      	mov	r1, r3
 8015e88:	2036      	movs	r0, #54	; 0x36
 8015e8a:	f7fa f991 	bl	80101b0 <pbuf_alloc>
 8015e8e:	6138      	str	r0, [r7, #16]
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d109      	bne.n	8015eaa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	8b5b      	ldrh	r3, [r3, #26]
 8015e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ea8:	e095      	b.n	8015fd6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	895a      	ldrh	r2, [r3, #10]
 8015eae:	7dfb      	ldrb	r3, [r7, #23]
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d206      	bcs.n	8015ec4 <tcp_enqueue_flags+0xa0>
 8015eb6:	4b4a      	ldr	r3, [pc, #296]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015eb8:	f240 4239 	movw	r2, #1081	; 0x439
 8015ebc:	494c      	ldr	r1, [pc, #304]	; (8015ff0 <tcp_enqueue_flags+0x1cc>)
 8015ebe:	484a      	ldr	r0, [pc, #296]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015ec0:	f007 f90c 	bl	801d0dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015ec8:	78fa      	ldrb	r2, [r7, #3]
 8015eca:	7ffb      	ldrb	r3, [r7, #31]
 8015ecc:	9300      	str	r3, [sp, #0]
 8015ece:	460b      	mov	r3, r1
 8015ed0:	6939      	ldr	r1, [r7, #16]
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f7ff f918 	bl	8015108 <tcp_create_segment>
 8015ed8:	60f8      	str	r0, [r7, #12]
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d109      	bne.n	8015ef4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	8b5b      	ldrh	r3, [r3, #26]
 8015ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ee8:	b29a      	uxth	r2, r3
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015eee:	f04f 33ff 	mov.w	r3, #4294967295
 8015ef2:	e070      	b.n	8015fd6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	68db      	ldr	r3, [r3, #12]
 8015ef8:	f003 0303 	and.w	r3, r3, #3
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d006      	beq.n	8015f0e <tcp_enqueue_flags+0xea>
 8015f00:	4b37      	ldr	r3, [pc, #220]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015f02:	f240 4242 	movw	r2, #1090	; 0x442
 8015f06:	493b      	ldr	r1, [pc, #236]	; (8015ff4 <tcp_enqueue_flags+0x1d0>)
 8015f08:	4837      	ldr	r0, [pc, #220]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015f0a:	f007 f8e7 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	891b      	ldrh	r3, [r3, #8]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d006      	beq.n	8015f24 <tcp_enqueue_flags+0x100>
 8015f16:	4b32      	ldr	r3, [pc, #200]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015f18:	f240 4243 	movw	r2, #1091	; 0x443
 8015f1c:	4936      	ldr	r1, [pc, #216]	; (8015ff8 <tcp_enqueue_flags+0x1d4>)
 8015f1e:	4832      	ldr	r0, [pc, #200]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015f20:	f007 f8dc 	bl	801d0dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d103      	bne.n	8015f34 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	68fa      	ldr	r2, [r7, #12]
 8015f30:	66da      	str	r2, [r3, #108]	; 0x6c
 8015f32:	e00d      	b.n	8015f50 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f38:	61bb      	str	r3, [r7, #24]
 8015f3a:	e002      	b.n	8015f42 <tcp_enqueue_flags+0x11e>
 8015f3c:	69bb      	ldr	r3, [r7, #24]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	61bb      	str	r3, [r7, #24]
 8015f42:	69bb      	ldr	r3, [r7, #24]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1f8      	bne.n	8015f3c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	68fa      	ldr	r2, [r7, #12]
 8015f4e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2200      	movs	r2, #0
 8015f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015f58:	78fb      	ldrb	r3, [r7, #3]
 8015f5a:	f003 0302 	and.w	r3, r3, #2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d104      	bne.n	8015f6c <tcp_enqueue_flags+0x148>
 8015f62:	78fb      	ldrb	r3, [r7, #3]
 8015f64:	f003 0301 	and.w	r3, r3, #1
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d004      	beq.n	8015f76 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f70:	1c5a      	adds	r2, r3, #1
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015f76:	78fb      	ldrb	r3, [r7, #3]
 8015f78:	f003 0301 	and.w	r3, r3, #1
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d006      	beq.n	8015f8e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	8b5b      	ldrh	r3, [r3, #26]
 8015f84:	f043 0320 	orr.w	r3, r3, #32
 8015f88:	b29a      	uxth	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7fa fc78 	bl	8010888 <pbuf_clen>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fa2:	4413      	add	r3, r2
 8015fa4:	b29a      	uxth	r2, r3
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d00e      	beq.n	8015fd4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d10a      	bne.n	8015fd4 <tcp_enqueue_flags+0x1b0>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d106      	bne.n	8015fd4 <tcp_enqueue_flags+0x1b0>
 8015fc6:	4b06      	ldr	r3, [pc, #24]	; (8015fe0 <tcp_enqueue_flags+0x1bc>)
 8015fc8:	f240 4265 	movw	r2, #1125	; 0x465
 8015fcc:	490b      	ldr	r1, [pc, #44]	; (8015ffc <tcp_enqueue_flags+0x1d8>)
 8015fce:	4806      	ldr	r0, [pc, #24]	; (8015fe8 <tcp_enqueue_flags+0x1c4>)
 8015fd0:	f007 f884 	bl	801d0dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015fd4:	2300      	movs	r3, #0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3720      	adds	r7, #32
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	0801f6e0 	.word	0x0801f6e0
 8015fe4:	0801fb04 	.word	0x0801fb04
 8015fe8:	0801f734 	.word	0x0801f734
 8015fec:	0801fb5c 	.word	0x0801fb5c
 8015ff0:	0801fb7c 	.word	0x0801fb7c
 8015ff4:	0801fbb8 	.word	0x0801fbb8
 8015ff8:	0801fbd0 	.word	0x0801fbd0
 8015ffc:	0801fbfc 	.word	0x0801fbfc

08016000 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016000:	b5b0      	push	{r4, r5, r7, lr}
 8016002:	b08a      	sub	sp, #40	; 0x28
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d106      	bne.n	801601c <tcp_output+0x1c>
 801600e:	4b8a      	ldr	r3, [pc, #552]	; (8016238 <tcp_output+0x238>)
 8016010:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016014:	4989      	ldr	r1, [pc, #548]	; (801623c <tcp_output+0x23c>)
 8016016:	488a      	ldr	r0, [pc, #552]	; (8016240 <tcp_output+0x240>)
 8016018:	f007 f860 	bl	801d0dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	7d1b      	ldrb	r3, [r3, #20]
 8016020:	2b01      	cmp	r3, #1
 8016022:	d106      	bne.n	8016032 <tcp_output+0x32>
 8016024:	4b84      	ldr	r3, [pc, #528]	; (8016238 <tcp_output+0x238>)
 8016026:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801602a:	4986      	ldr	r1, [pc, #536]	; (8016244 <tcp_output+0x244>)
 801602c:	4884      	ldr	r0, [pc, #528]	; (8016240 <tcp_output+0x240>)
 801602e:	f007 f855 	bl	801d0dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016032:	4b85      	ldr	r3, [pc, #532]	; (8016248 <tcp_output+0x248>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	687a      	ldr	r2, [r7, #4]
 8016038:	429a      	cmp	r2, r3
 801603a:	d101      	bne.n	8016040 <tcp_output+0x40>
    return ERR_OK;
 801603c:	2300      	movs	r3, #0
 801603e:	e1ce      	b.n	80163de <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801604c:	4293      	cmp	r3, r2
 801604e:	bf28      	it	cs
 8016050:	4613      	movcs	r3, r2
 8016052:	b29b      	uxth	r3, r3
 8016054:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801605a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605e:	2b00      	cmp	r3, #0
 8016060:	d10b      	bne.n	801607a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	8b5b      	ldrh	r3, [r3, #26]
 8016066:	f003 0302 	and.w	r3, r3, #2
 801606a:	2b00      	cmp	r3, #0
 801606c:	f000 81aa 	beq.w	80163c4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 fdc9 	bl	8016c08 <tcp_send_empty_ack>
 8016076:	4603      	mov	r3, r0
 8016078:	e1b1      	b.n	80163de <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801607a:	6879      	ldr	r1, [r7, #4]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	3304      	adds	r3, #4
 8016080:	461a      	mov	r2, r3
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7ff f824 	bl	80150d0 <tcp_route>
 8016088:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d102      	bne.n	8016096 <tcp_output+0x96>
    return ERR_RTE;
 8016090:	f06f 0303 	mvn.w	r3, #3
 8016094:	e1a3      	b.n	80163de <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d003      	beq.n	80160a4 <tcp_output+0xa4>
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d111      	bne.n	80160c8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d002      	beq.n	80160b0 <tcp_output+0xb0>
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	3304      	adds	r3, #4
 80160ae:	e000      	b.n	80160b2 <tcp_output+0xb2>
 80160b0:	2300      	movs	r3, #0
 80160b2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d102      	bne.n	80160c0 <tcp_output+0xc0>
      return ERR_RTE;
 80160ba:	f06f 0303 	mvn.w	r3, #3
 80160be:	e18e      	b.n	80163de <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	681a      	ldr	r2, [r3, #0]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80160c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7f8 fd10 	bl	800eaf4 <lwip_htonl>
 80160d4:	4602      	mov	r2, r0
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160de:	8912      	ldrh	r2, [r2, #8]
 80160e0:	4413      	add	r3, r2
 80160e2:	69ba      	ldr	r2, [r7, #24]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d227      	bcs.n	8016138 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160ee:	461a      	mov	r2, r3
 80160f0:	69bb      	ldr	r3, [r7, #24]
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d114      	bne.n	8016120 <tcp_output+0x120>
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d110      	bne.n	8016120 <tcp_output+0x120>
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10b      	bne.n	8016120 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2200      	movs	r2, #0
 801610c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2201      	movs	r2, #1
 8016114:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2200      	movs	r2, #0
 801611c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	8b5b      	ldrh	r3, [r3, #26]
 8016124:	f003 0302 	and.w	r3, r3, #2
 8016128:	2b00      	cmp	r3, #0
 801612a:	f000 814d 	beq.w	80163c8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fd6a 	bl	8016c08 <tcp_send_empty_ack>
 8016134:	4603      	mov	r3, r0
 8016136:	e152      	b.n	80163de <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016144:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016146:	6a3b      	ldr	r3, [r7, #32]
 8016148:	2b00      	cmp	r3, #0
 801614a:	f000 811c 	beq.w	8016386 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801614e:	e002      	b.n	8016156 <tcp_output+0x156>
 8016150:	6a3b      	ldr	r3, [r7, #32]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	623b      	str	r3, [r7, #32]
 8016156:	6a3b      	ldr	r3, [r7, #32]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d1f8      	bne.n	8016150 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801615e:	e112      	b.n	8016386 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	899b      	ldrh	r3, [r3, #12]
 8016166:	b29b      	uxth	r3, r3
 8016168:	4618      	mov	r0, r3
 801616a:	f7f8 fcae 	bl	800eaca <lwip_htons>
 801616e:	4603      	mov	r3, r0
 8016170:	b2db      	uxtb	r3, r3
 8016172:	f003 0304 	and.w	r3, r3, #4
 8016176:	2b00      	cmp	r3, #0
 8016178:	d006      	beq.n	8016188 <tcp_output+0x188>
 801617a:	4b2f      	ldr	r3, [pc, #188]	; (8016238 <tcp_output+0x238>)
 801617c:	f240 5236 	movw	r2, #1334	; 0x536
 8016180:	4932      	ldr	r1, [pc, #200]	; (801624c <tcp_output+0x24c>)
 8016182:	482f      	ldr	r0, [pc, #188]	; (8016240 <tcp_output+0x240>)
 8016184:	f006 ffaa 	bl	801d0dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801618c:	2b00      	cmp	r3, #0
 801618e:	d01f      	beq.n	80161d0 <tcp_output+0x1d0>
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	8b5b      	ldrh	r3, [r3, #26]
 8016194:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016198:	2b00      	cmp	r3, #0
 801619a:	d119      	bne.n	80161d0 <tcp_output+0x1d0>
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00b      	beq.n	80161bc <tcp_output+0x1bc>
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d110      	bne.n	80161d0 <tcp_output+0x1d0>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161b2:	891a      	ldrh	r2, [r3, #8]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d209      	bcs.n	80161d0 <tcp_output+0x1d0>
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d004      	beq.n	80161d0 <tcp_output+0x1d0>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80161cc:	2b0f      	cmp	r3, #15
 80161ce:	d901      	bls.n	80161d4 <tcp_output+0x1d4>
 80161d0:	2301      	movs	r3, #1
 80161d2:	e000      	b.n	80161d6 <tcp_output+0x1d6>
 80161d4:	2300      	movs	r3, #0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d106      	bne.n	80161e8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	8b5b      	ldrh	r3, [r3, #26]
 80161de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f000 80e4 	beq.w	80163b0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	7d1b      	ldrb	r3, [r3, #20]
 80161ec:	2b02      	cmp	r3, #2
 80161ee:	d00d      	beq.n	801620c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80161f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	899b      	ldrh	r3, [r3, #12]
 80161f6:	b29c      	uxth	r4, r3
 80161f8:	2010      	movs	r0, #16
 80161fa:	f7f8 fc66 	bl	800eaca <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	461a      	mov	r2, r3
 8016202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016204:	68db      	ldr	r3, [r3, #12]
 8016206:	4322      	orrs	r2, r4
 8016208:	b292      	uxth	r2, r2
 801620a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801620c:	697a      	ldr	r2, [r7, #20]
 801620e:	6879      	ldr	r1, [r7, #4]
 8016210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016212:	f000 f909 	bl	8016428 <tcp_output_segment>
 8016216:	4603      	mov	r3, r0
 8016218:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d016      	beq.n	8016250 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	8b5b      	ldrh	r3, [r3, #26]
 8016226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801622a:	b29a      	uxth	r2, r3
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	835a      	strh	r2, [r3, #26]
      return err;
 8016230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016234:	e0d3      	b.n	80163de <tcp_output+0x3de>
 8016236:	bf00      	nop
 8016238:	0801f6e0 	.word	0x0801f6e0
 801623c:	0801fc24 	.word	0x0801fc24
 8016240:	0801f734 	.word	0x0801f734
 8016244:	0801fc3c 	.word	0x0801fc3c
 8016248:	200086b8 	.word	0x200086b8
 801624c:	0801fc64 	.word	0x0801fc64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	7d1b      	ldrb	r3, [r3, #20]
 801625c:	2b02      	cmp	r3, #2
 801625e:	d006      	beq.n	801626e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	8b5b      	ldrh	r3, [r3, #26]
 8016264:	f023 0303 	bic.w	r3, r3, #3
 8016268:	b29a      	uxth	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016270:	68db      	ldr	r3, [r3, #12]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	4618      	mov	r0, r3
 8016276:	f7f8 fc3d 	bl	800eaf4 <lwip_htonl>
 801627a:	4604      	mov	r4, r0
 801627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627e:	891b      	ldrh	r3, [r3, #8]
 8016280:	461d      	mov	r5, r3
 8016282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	899b      	ldrh	r3, [r3, #12]
 8016288:	b29b      	uxth	r3, r3
 801628a:	4618      	mov	r0, r3
 801628c:	f7f8 fc1d 	bl	800eaca <lwip_htons>
 8016290:	4603      	mov	r3, r0
 8016292:	b2db      	uxtb	r3, r3
 8016294:	f003 0303 	and.w	r3, r3, #3
 8016298:	2b00      	cmp	r3, #0
 801629a:	d001      	beq.n	80162a0 <tcp_output+0x2a0>
 801629c:	2301      	movs	r3, #1
 801629e:	e000      	b.n	80162a2 <tcp_output+0x2a2>
 80162a0:	2300      	movs	r3, #0
 80162a2:	442b      	add	r3, r5
 80162a4:	4423      	add	r3, r4
 80162a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	1ad3      	subs	r3, r2, r3
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	da02      	bge.n	80162ba <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	68ba      	ldr	r2, [r7, #8]
 80162b8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80162ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162bc:	891b      	ldrh	r3, [r3, #8]
 80162be:	461c      	mov	r4, r3
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	899b      	ldrh	r3, [r3, #12]
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7f8 fbfe 	bl	800eaca <lwip_htons>
 80162ce:	4603      	mov	r3, r0
 80162d0:	b2db      	uxtb	r3, r3
 80162d2:	f003 0303 	and.w	r3, r3, #3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d001      	beq.n	80162de <tcp_output+0x2de>
 80162da:	2301      	movs	r3, #1
 80162dc:	e000      	b.n	80162e0 <tcp_output+0x2e0>
 80162de:	2300      	movs	r3, #0
 80162e0:	4423      	add	r3, r4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d049      	beq.n	801637a <tcp_output+0x37a>
      seg->next = NULL;
 80162e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e8:	2200      	movs	r2, #0
 80162ea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d105      	bne.n	8016300 <tcp_output+0x300>
        pcb->unacked = seg;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162f8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80162fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fc:	623b      	str	r3, [r7, #32]
 80162fe:	e03f      	b.n	8016380 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	4618      	mov	r0, r3
 8016308:	f7f8 fbf4 	bl	800eaf4 <lwip_htonl>
 801630c:	4604      	mov	r4, r0
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	4618      	mov	r0, r3
 8016316:	f7f8 fbed 	bl	800eaf4 <lwip_htonl>
 801631a:	4603      	mov	r3, r0
 801631c:	1ae3      	subs	r3, r4, r3
 801631e:	2b00      	cmp	r3, #0
 8016320:	da24      	bge.n	801636c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3370      	adds	r3, #112	; 0x70
 8016326:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016328:	e002      	b.n	8016330 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d011      	beq.n	801635c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016338:	69fb      	ldr	r3, [r7, #28]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	68db      	ldr	r3, [r3, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	4618      	mov	r0, r3
 8016342:	f7f8 fbd7 	bl	800eaf4 <lwip_htonl>
 8016346:	4604      	mov	r4, r0
 8016348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	4618      	mov	r0, r3
 8016350:	f7f8 fbd0 	bl	800eaf4 <lwip_htonl>
 8016354:	4603      	mov	r3, r0
 8016356:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016358:	2b00      	cmp	r3, #0
 801635a:	dbe6      	blt.n	801632a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016362:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016368:	601a      	str	r2, [r3, #0]
 801636a:	e009      	b.n	8016380 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801636c:	6a3b      	ldr	r3, [r7, #32]
 801636e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016370:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016372:	6a3b      	ldr	r3, [r7, #32]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	623b      	str	r3, [r7, #32]
 8016378:	e002      	b.n	8016380 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801637a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801637c:	f7fb ff37 	bl	80121ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016384:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	2b00      	cmp	r3, #0
 801638a:	d012      	beq.n	80163b2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638e:	68db      	ldr	r3, [r3, #12]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	4618      	mov	r0, r3
 8016394:	f7f8 fbae 	bl	800eaf4 <lwip_htonl>
 8016398:	4602      	mov	r2, r0
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801639e:	1ad3      	subs	r3, r2, r3
 80163a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163a2:	8912      	ldrh	r2, [r2, #8]
 80163a4:	4413      	add	r3, r2
  while (seg != NULL &&
 80163a6:	69ba      	ldr	r2, [r7, #24]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	f4bf aed9 	bcs.w	8016160 <tcp_output+0x160>
 80163ae:	e000      	b.n	80163b2 <tcp_output+0x3b2>
      break;
 80163b0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d108      	bne.n	80163cc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2200      	movs	r2, #0
 80163be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80163c2:	e004      	b.n	80163ce <tcp_output+0x3ce>
    goto output_done;
 80163c4:	bf00      	nop
 80163c6:	e002      	b.n	80163ce <tcp_output+0x3ce>
    goto output_done;
 80163c8:	bf00      	nop
 80163ca:	e000      	b.n	80163ce <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80163cc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	8b5b      	ldrh	r3, [r3, #26]
 80163d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3728      	adds	r7, #40	; 0x28
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bdb0      	pop	{r4, r5, r7, pc}
 80163e6:	bf00      	nop

080163e8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d106      	bne.n	8016404 <tcp_output_segment_busy+0x1c>
 80163f6:	4b09      	ldr	r3, [pc, #36]	; (801641c <tcp_output_segment_busy+0x34>)
 80163f8:	f240 529a 	movw	r2, #1434	; 0x59a
 80163fc:	4908      	ldr	r1, [pc, #32]	; (8016420 <tcp_output_segment_busy+0x38>)
 80163fe:	4809      	ldr	r0, [pc, #36]	; (8016424 <tcp_output_segment_busy+0x3c>)
 8016400:	f006 fe6c 	bl	801d0dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	7b9b      	ldrb	r3, [r3, #14]
 801640a:	2b01      	cmp	r3, #1
 801640c:	d001      	beq.n	8016412 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801640e:	2301      	movs	r3, #1
 8016410:	e000      	b.n	8016414 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016412:	2300      	movs	r3, #0
}
 8016414:	4618      	mov	r0, r3
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	0801f6e0 	.word	0x0801f6e0
 8016420:	0801fc7c 	.word	0x0801fc7c
 8016424:	0801f734 	.word	0x0801f734

08016428 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016428:	b5b0      	push	{r4, r5, r7, lr}
 801642a:	b08c      	sub	sp, #48	; 0x30
 801642c:	af04      	add	r7, sp, #16
 801642e:	60f8      	str	r0, [r7, #12]
 8016430:	60b9      	str	r1, [r7, #8]
 8016432:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d106      	bne.n	8016448 <tcp_output_segment+0x20>
 801643a:	4b64      	ldr	r3, [pc, #400]	; (80165cc <tcp_output_segment+0x1a4>)
 801643c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016440:	4963      	ldr	r1, [pc, #396]	; (80165d0 <tcp_output_segment+0x1a8>)
 8016442:	4864      	ldr	r0, [pc, #400]	; (80165d4 <tcp_output_segment+0x1ac>)
 8016444:	f006 fe4a 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d106      	bne.n	801645c <tcp_output_segment+0x34>
 801644e:	4b5f      	ldr	r3, [pc, #380]	; (80165cc <tcp_output_segment+0x1a4>)
 8016450:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016454:	4960      	ldr	r1, [pc, #384]	; (80165d8 <tcp_output_segment+0x1b0>)
 8016456:	485f      	ldr	r0, [pc, #380]	; (80165d4 <tcp_output_segment+0x1ac>)
 8016458:	f006 fe40 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d106      	bne.n	8016470 <tcp_output_segment+0x48>
 8016462:	4b5a      	ldr	r3, [pc, #360]	; (80165cc <tcp_output_segment+0x1a4>)
 8016464:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016468:	495c      	ldr	r1, [pc, #368]	; (80165dc <tcp_output_segment+0x1b4>)
 801646a:	485a      	ldr	r0, [pc, #360]	; (80165d4 <tcp_output_segment+0x1ac>)
 801646c:	f006 fe36 	bl	801d0dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f7ff ffb9 	bl	80163e8 <tcp_output_segment_busy>
 8016476:	4603      	mov	r3, r0
 8016478:	2b00      	cmp	r3, #0
 801647a:	d001      	beq.n	8016480 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801647c:	2300      	movs	r3, #0
 801647e:	e0a1      	b.n	80165c4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	68dc      	ldr	r4, [r3, #12]
 8016488:	4610      	mov	r0, r2
 801648a:	f7f8 fb33 	bl	800eaf4 <lwip_htonl>
 801648e:	4603      	mov	r3, r0
 8016490:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	68dc      	ldr	r4, [r3, #12]
 801649a:	4610      	mov	r0, r2
 801649c:	f7f8 fb15 	bl	800eaca <lwip_htons>
 80164a0:	4603      	mov	r3, r0
 80164a2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a8:	68ba      	ldr	r2, [r7, #8]
 80164aa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80164ac:	441a      	add	r2, r3
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	3314      	adds	r3, #20
 80164b8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	7a9b      	ldrb	r3, [r3, #10]
 80164be:	f003 0301 	and.w	r3, r3, #1
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d015      	beq.n	80164f2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	3304      	adds	r3, #4
 80164ca:	461a      	mov	r2, r3
 80164cc:	6879      	ldr	r1, [r7, #4]
 80164ce:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80164d2:	f7fc fa33 	bl	801293c <tcp_eff_send_mss_netif>
 80164d6:	4603      	mov	r3, r0
 80164d8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80164da:	8b7b      	ldrh	r3, [r7, #26]
 80164dc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7f8 fb07 	bl	800eaf4 <lwip_htonl>
 80164e6:	4602      	mov	r2, r0
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	601a      	str	r2, [r3, #0]
    opts += 1;
 80164ec:	69fb      	ldr	r3, [r7, #28]
 80164ee:	3304      	adds	r3, #4
 80164f0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	da02      	bge.n	8016502 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	2200      	movs	r2, #0
 8016500:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016506:	2b00      	cmp	r3, #0
 8016508:	d10c      	bne.n	8016524 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801650a:	4b35      	ldr	r3, [pc, #212]	; (80165e0 <tcp_output_segment+0x1b8>)
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	68db      	ldr	r3, [r3, #12]
 8016516:	685b      	ldr	r3, [r3, #4]
 8016518:	4618      	mov	r0, r3
 801651a:	f7f8 faeb 	bl	800eaf4 <lwip_htonl>
 801651e:	4602      	mov	r2, r0
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	68da      	ldr	r2, [r3, #12]
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	1ad3      	subs	r3, r2, r3
 8016530:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	8959      	ldrh	r1, [r3, #10]
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	8b3a      	ldrh	r2, [r7, #24]
 801653e:	1a8a      	subs	r2, r1, r2
 8016540:	b292      	uxth	r2, r2
 8016542:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	8919      	ldrh	r1, [r3, #8]
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	8b3a      	ldrh	r2, [r7, #24]
 8016550:	1a8a      	subs	r2, r1, r2
 8016552:	b292      	uxth	r2, r2
 8016554:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	68fa      	ldr	r2, [r7, #12]
 801655c:	68d2      	ldr	r2, [r2, #12]
 801655e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	68db      	ldr	r3, [r3, #12]
 8016564:	2200      	movs	r2, #0
 8016566:	741a      	strb	r2, [r3, #16]
 8016568:	2200      	movs	r2, #0
 801656a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	68da      	ldr	r2, [r3, #12]
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	7a9b      	ldrb	r3, [r3, #10]
 8016574:	f003 0301 	and.w	r3, r3, #1
 8016578:	2b00      	cmp	r3, #0
 801657a:	d001      	beq.n	8016580 <tcp_output_segment+0x158>
 801657c:	2318      	movs	r3, #24
 801657e:	e000      	b.n	8016582 <tcp_output_segment+0x15a>
 8016580:	2314      	movs	r3, #20
 8016582:	4413      	add	r3, r2
 8016584:	69fa      	ldr	r2, [r7, #28]
 8016586:	429a      	cmp	r2, r3
 8016588:	d006      	beq.n	8016598 <tcp_output_segment+0x170>
 801658a:	4b10      	ldr	r3, [pc, #64]	; (80165cc <tcp_output_segment+0x1a4>)
 801658c:	f240 621c 	movw	r2, #1564	; 0x61c
 8016590:	4914      	ldr	r1, [pc, #80]	; (80165e4 <tcp_output_segment+0x1bc>)
 8016592:	4810      	ldr	r0, [pc, #64]	; (80165d4 <tcp_output_segment+0x1ac>)
 8016594:	f006 fda2 	bl	801d0dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	6858      	ldr	r0, [r3, #4]
 801659c:	68b9      	ldr	r1, [r7, #8]
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	1d1c      	adds	r4, r3, #4
 80165a2:	68bb      	ldr	r3, [r7, #8]
 80165a4:	7add      	ldrb	r5, [r3, #11]
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	7a9b      	ldrb	r3, [r3, #10]
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	9202      	str	r2, [sp, #8]
 80165ae:	2206      	movs	r2, #6
 80165b0:	9201      	str	r2, [sp, #4]
 80165b2:	9300      	str	r3, [sp, #0]
 80165b4:	462b      	mov	r3, r5
 80165b6:	4622      	mov	r2, r4
 80165b8:	f004 fcce 	bl	801af58 <ip4_output_if>
 80165bc:	4603      	mov	r3, r0
 80165be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80165c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3720      	adds	r7, #32
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bdb0      	pop	{r4, r5, r7, pc}
 80165cc:	0801f6e0 	.word	0x0801f6e0
 80165d0:	0801fca4 	.word	0x0801fca4
 80165d4:	0801f734 	.word	0x0801f734
 80165d8:	0801fcc4 	.word	0x0801fcc4
 80165dc:	0801fce4 	.word	0x0801fce4
 80165e0:	2000866c 	.word	0x2000866c
 80165e4:	0801fd08 	.word	0x0801fd08

080165e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80165e8:	b5b0      	push	{r4, r5, r7, lr}
 80165ea:	b084      	sub	sp, #16
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d106      	bne.n	8016604 <tcp_rexmit_rto_prepare+0x1c>
 80165f6:	4b31      	ldr	r3, [pc, #196]	; (80166bc <tcp_rexmit_rto_prepare+0xd4>)
 80165f8:	f240 6263 	movw	r2, #1635	; 0x663
 80165fc:	4930      	ldr	r1, [pc, #192]	; (80166c0 <tcp_rexmit_rto_prepare+0xd8>)
 80165fe:	4831      	ldr	r0, [pc, #196]	; (80166c4 <tcp_rexmit_rto_prepare+0xdc>)
 8016600:	f006 fd6c 	bl	801d0dc <iprintf>

  if (pcb->unacked == NULL) {
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016608:	2b00      	cmp	r3, #0
 801660a:	d102      	bne.n	8016612 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801660c:	f06f 0305 	mvn.w	r3, #5
 8016610:	e050      	b.n	80166b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016616:	60fb      	str	r3, [r7, #12]
 8016618:	e00b      	b.n	8016632 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f7ff fee4 	bl	80163e8 <tcp_output_segment_busy>
 8016620:	4603      	mov	r3, r0
 8016622:	2b00      	cmp	r3, #0
 8016624:	d002      	beq.n	801662c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016626:	f06f 0305 	mvn.w	r3, #5
 801662a:	e043      	b.n	80166b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	60fb      	str	r3, [r7, #12]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d1ef      	bne.n	801661a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	f7ff fed4 	bl	80163e8 <tcp_output_segment_busy>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d002      	beq.n	801664c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016646:	f06f 0305 	mvn.w	r3, #5
 801664a:	e033      	b.n	80166b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2200      	movs	r2, #0
 8016660:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	8b5b      	ldrh	r3, [r3, #26]
 8016666:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801666a:	b29a      	uxth	r2, r3
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	4618      	mov	r0, r3
 8016678:	f7f8 fa3c 	bl	800eaf4 <lwip_htonl>
 801667c:	4604      	mov	r4, r0
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	891b      	ldrh	r3, [r3, #8]
 8016682:	461d      	mov	r5, r3
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	899b      	ldrh	r3, [r3, #12]
 801668a:	b29b      	uxth	r3, r3
 801668c:	4618      	mov	r0, r3
 801668e:	f7f8 fa1c 	bl	800eaca <lwip_htons>
 8016692:	4603      	mov	r3, r0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	f003 0303 	and.w	r3, r3, #3
 801669a:	2b00      	cmp	r3, #0
 801669c:	d001      	beq.n	80166a2 <tcp_rexmit_rto_prepare+0xba>
 801669e:	2301      	movs	r3, #1
 80166a0:	e000      	b.n	80166a4 <tcp_rexmit_rto_prepare+0xbc>
 80166a2:	2300      	movs	r3, #0
 80166a4:	442b      	add	r3, r5
 80166a6:	18e2      	adds	r2, r4, r3
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2200      	movs	r2, #0
 80166b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80166b2:	2300      	movs	r3, #0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bdb0      	pop	{r4, r5, r7, pc}
 80166bc:	0801f6e0 	.word	0x0801f6e0
 80166c0:	0801fd1c 	.word	0x0801fd1c
 80166c4:	0801f734 	.word	0x0801f734

080166c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <tcp_rexmit_rto_commit+0x1c>
 80166d6:	4b0d      	ldr	r3, [pc, #52]	; (801670c <tcp_rexmit_rto_commit+0x44>)
 80166d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80166dc:	490c      	ldr	r1, [pc, #48]	; (8016710 <tcp_rexmit_rto_commit+0x48>)
 80166de:	480d      	ldr	r0, [pc, #52]	; (8016714 <tcp_rexmit_rto_commit+0x4c>)
 80166e0:	f006 fcfc 	bl	801d0dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80166ea:	2bff      	cmp	r3, #255	; 0xff
 80166ec:	d007      	beq.n	80166fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80166f4:	3301      	adds	r3, #1
 80166f6:	b2da      	uxtb	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7ff fc7e 	bl	8016000 <tcp_output>
}
 8016704:	bf00      	nop
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	0801f6e0 	.word	0x0801f6e0
 8016710:	0801fd40 	.word	0x0801fd40
 8016714:	0801f734 	.word	0x0801f734

08016718 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d106      	bne.n	8016734 <tcp_rexmit_rto+0x1c>
 8016726:	4b0a      	ldr	r3, [pc, #40]	; (8016750 <tcp_rexmit_rto+0x38>)
 8016728:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801672c:	4909      	ldr	r1, [pc, #36]	; (8016754 <tcp_rexmit_rto+0x3c>)
 801672e:	480a      	ldr	r0, [pc, #40]	; (8016758 <tcp_rexmit_rto+0x40>)
 8016730:	f006 fcd4 	bl	801d0dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f7ff ff57 	bl	80165e8 <tcp_rexmit_rto_prepare>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d102      	bne.n	8016746 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f7ff ffc1 	bl	80166c8 <tcp_rexmit_rto_commit>
  }
}
 8016746:	bf00      	nop
 8016748:	3708      	adds	r7, #8
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	0801f6e0 	.word	0x0801f6e0
 8016754:	0801fd64 	.word	0x0801fd64
 8016758:	0801f734 	.word	0x0801f734

0801675c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801675c:	b590      	push	{r4, r7, lr}
 801675e:	b085      	sub	sp, #20
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d106      	bne.n	8016778 <tcp_rexmit+0x1c>
 801676a:	4b2f      	ldr	r3, [pc, #188]	; (8016828 <tcp_rexmit+0xcc>)
 801676c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016770:	492e      	ldr	r1, [pc, #184]	; (801682c <tcp_rexmit+0xd0>)
 8016772:	482f      	ldr	r0, [pc, #188]	; (8016830 <tcp_rexmit+0xd4>)
 8016774:	f006 fcb2 	bl	801d0dc <iprintf>

  if (pcb->unacked == NULL) {
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801677c:	2b00      	cmp	r3, #0
 801677e:	d102      	bne.n	8016786 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016780:	f06f 0305 	mvn.w	r3, #5
 8016784:	e04c      	b.n	8016820 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801678a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801678c:	68b8      	ldr	r0, [r7, #8]
 801678e:	f7ff fe2b 	bl	80163e8 <tcp_output_segment_busy>
 8016792:	4603      	mov	r3, r0
 8016794:	2b00      	cmp	r3, #0
 8016796:	d002      	beq.n	801679e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016798:	f06f 0305 	mvn.w	r3, #5
 801679c:	e040      	b.n	8016820 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	336c      	adds	r3, #108	; 0x6c
 80167aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80167ac:	e002      	b.n	80167b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d011      	beq.n	80167e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f8 f995 	bl	800eaf4 <lwip_htonl>
 80167ca:	4604      	mov	r4, r0
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7f8 f98e 	bl	800eaf4 <lwip_htonl>
 80167d8:	4603      	mov	r3, r0
 80167da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80167dc:	2b00      	cmp	r3, #0
 80167de:	dbe6      	blt.n	80167ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681a      	ldr	r2, [r3, #0]
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d103      	bne.n	80167fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2200      	movs	r2, #0
 80167fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016804:	2bff      	cmp	r3, #255	; 0xff
 8016806:	d007      	beq.n	8016818 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801680e:	3301      	adds	r3, #1
 8016810:	b2da      	uxtb	r2, r3
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2200      	movs	r2, #0
 801681c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801681e:	2300      	movs	r3, #0
}
 8016820:	4618      	mov	r0, r3
 8016822:	3714      	adds	r7, #20
 8016824:	46bd      	mov	sp, r7
 8016826:	bd90      	pop	{r4, r7, pc}
 8016828:	0801f6e0 	.word	0x0801f6e0
 801682c:	0801fd80 	.word	0x0801fd80
 8016830:	0801f734 	.word	0x0801f734

08016834 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d106      	bne.n	8016850 <tcp_rexmit_fast+0x1c>
 8016842:	4b2a      	ldr	r3, [pc, #168]	; (80168ec <tcp_rexmit_fast+0xb8>)
 8016844:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016848:	4929      	ldr	r1, [pc, #164]	; (80168f0 <tcp_rexmit_fast+0xbc>)
 801684a:	482a      	ldr	r0, [pc, #168]	; (80168f4 <tcp_rexmit_fast+0xc0>)
 801684c:	f006 fc46 	bl	801d0dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016854:	2b00      	cmp	r3, #0
 8016856:	d044      	beq.n	80168e2 <tcp_rexmit_fast+0xae>
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	8b5b      	ldrh	r3, [r3, #26]
 801685c:	f003 0304 	and.w	r3, r3, #4
 8016860:	2b00      	cmp	r3, #0
 8016862:	d13e      	bne.n	80168e2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	f7ff ff79 	bl	801675c <tcp_rexmit>
 801686a:	4603      	mov	r3, r0
 801686c:	2b00      	cmp	r3, #0
 801686e:	d138      	bne.n	80168e2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801687c:	4293      	cmp	r3, r2
 801687e:	bf28      	it	cs
 8016880:	4613      	movcs	r3, r2
 8016882:	b29b      	uxth	r3, r3
 8016884:	0fda      	lsrs	r2, r3, #31
 8016886:	4413      	add	r3, r2
 8016888:	105b      	asrs	r3, r3, #1
 801688a:	b29a      	uxth	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016898:	461a      	mov	r2, r3
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d206      	bcs.n	80168b2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168a8:	005b      	lsls	r3, r3, #1
 80168aa:	b29a      	uxth	r2, r3
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168bc:	4619      	mov	r1, r3
 80168be:	0049      	lsls	r1, r1, #1
 80168c0:	440b      	add	r3, r1
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4413      	add	r3, r2
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	8b5b      	ldrh	r3, [r3, #26]
 80168d2:	f043 0304 	orr.w	r3, r3, #4
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2200      	movs	r2, #0
 80168e0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80168e2:	bf00      	nop
 80168e4:	3708      	adds	r7, #8
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	0801f6e0 	.word	0x0801f6e0
 80168f0:	0801fd98 	.word	0x0801fd98
 80168f4:	0801f734 	.word	0x0801f734

080168f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b086      	sub	sp, #24
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	607b      	str	r3, [r7, #4]
 8016902:	460b      	mov	r3, r1
 8016904:	817b      	strh	r3, [r7, #10]
 8016906:	4613      	mov	r3, r2
 8016908:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801690a:	897a      	ldrh	r2, [r7, #10]
 801690c:	893b      	ldrh	r3, [r7, #8]
 801690e:	4413      	add	r3, r2
 8016910:	b29b      	uxth	r3, r3
 8016912:	3314      	adds	r3, #20
 8016914:	b29b      	uxth	r3, r3
 8016916:	f44f 7220 	mov.w	r2, #640	; 0x280
 801691a:	4619      	mov	r1, r3
 801691c:	2022      	movs	r0, #34	; 0x22
 801691e:	f7f9 fc47 	bl	80101b0 <pbuf_alloc>
 8016922:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d04d      	beq.n	80169c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801692a:	897b      	ldrh	r3, [r7, #10]
 801692c:	3313      	adds	r3, #19
 801692e:	697a      	ldr	r2, [r7, #20]
 8016930:	8952      	ldrh	r2, [r2, #10]
 8016932:	4293      	cmp	r3, r2
 8016934:	db06      	blt.n	8016944 <tcp_output_alloc_header_common+0x4c>
 8016936:	4b26      	ldr	r3, [pc, #152]	; (80169d0 <tcp_output_alloc_header_common+0xd8>)
 8016938:	f240 7223 	movw	r2, #1827	; 0x723
 801693c:	4925      	ldr	r1, [pc, #148]	; (80169d4 <tcp_output_alloc_header_common+0xdc>)
 801693e:	4826      	ldr	r0, [pc, #152]	; (80169d8 <tcp_output_alloc_header_common+0xe0>)
 8016940:	f006 fbcc 	bl	801d0dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016944:	697b      	ldr	r3, [r7, #20]
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801694a:	8c3b      	ldrh	r3, [r7, #32]
 801694c:	4618      	mov	r0, r3
 801694e:	f7f8 f8bc 	bl	800eaca <lwip_htons>
 8016952:	4603      	mov	r3, r0
 8016954:	461a      	mov	r2, r3
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801695a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801695c:	4618      	mov	r0, r3
 801695e:	f7f8 f8b4 	bl	800eaca <lwip_htons>
 8016962:	4603      	mov	r3, r0
 8016964:	461a      	mov	r2, r3
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	f7f8 f8bf 	bl	800eaf4 <lwip_htonl>
 8016976:	4602      	mov	r2, r0
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801697c:	897b      	ldrh	r3, [r7, #10]
 801697e:	089b      	lsrs	r3, r3, #2
 8016980:	b29b      	uxth	r3, r3
 8016982:	3305      	adds	r3, #5
 8016984:	b29b      	uxth	r3, r3
 8016986:	031b      	lsls	r3, r3, #12
 8016988:	b29a      	uxth	r2, r3
 801698a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801698e:	b29b      	uxth	r3, r3
 8016990:	4313      	orrs	r3, r2
 8016992:	b29b      	uxth	r3, r3
 8016994:	4618      	mov	r0, r3
 8016996:	f7f8 f898 	bl	800eaca <lwip_htons>
 801699a:	4603      	mov	r3, r0
 801699c:	461a      	mov	r2, r3
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80169a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7f8 f890 	bl	800eaca <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	2200      	movs	r2, #0
 80169b6:	741a      	strb	r2, [r3, #16]
 80169b8:	2200      	movs	r2, #0
 80169ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	2200      	movs	r2, #0
 80169c0:	749a      	strb	r2, [r3, #18]
 80169c2:	2200      	movs	r2, #0
 80169c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80169c6:	697b      	ldr	r3, [r7, #20]
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	3718      	adds	r7, #24
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	0801f6e0 	.word	0x0801f6e0
 80169d4:	0801fdb8 	.word	0x0801fdb8
 80169d8:	0801f734 	.word	0x0801f734

080169dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80169dc:	b5b0      	push	{r4, r5, r7, lr}
 80169de:	b08a      	sub	sp, #40	; 0x28
 80169e0:	af04      	add	r7, sp, #16
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	607b      	str	r3, [r7, #4]
 80169e6:	460b      	mov	r3, r1
 80169e8:	817b      	strh	r3, [r7, #10]
 80169ea:	4613      	mov	r3, r2
 80169ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d106      	bne.n	8016a02 <tcp_output_alloc_header+0x26>
 80169f4:	4b15      	ldr	r3, [pc, #84]	; (8016a4c <tcp_output_alloc_header+0x70>)
 80169f6:	f240 7242 	movw	r2, #1858	; 0x742
 80169fa:	4915      	ldr	r1, [pc, #84]	; (8016a50 <tcp_output_alloc_header+0x74>)
 80169fc:	4815      	ldr	r0, [pc, #84]	; (8016a54 <tcp_output_alloc_header+0x78>)
 80169fe:	f006 fb6d 	bl	801d0dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	8adb      	ldrh	r3, [r3, #22]
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	8b12      	ldrh	r2, [r2, #24]
 8016a0e:	68f9      	ldr	r1, [r7, #12]
 8016a10:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016a12:	893d      	ldrh	r5, [r7, #8]
 8016a14:	897c      	ldrh	r4, [r7, #10]
 8016a16:	9103      	str	r1, [sp, #12]
 8016a18:	2110      	movs	r1, #16
 8016a1a:	9102      	str	r1, [sp, #8]
 8016a1c:	9201      	str	r2, [sp, #4]
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	462a      	mov	r2, r5
 8016a24:	4621      	mov	r1, r4
 8016a26:	f7ff ff67 	bl	80168f8 <tcp_output_alloc_header_common>
 8016a2a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d006      	beq.n	8016a40 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a36:	68fa      	ldr	r2, [r7, #12]
 8016a38:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016a3a:	441a      	add	r2, r3
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016a40:	697b      	ldr	r3, [r7, #20]
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3718      	adds	r7, #24
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bdb0      	pop	{r4, r5, r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	0801f6e0 	.word	0x0801f6e0
 8016a50:	0801fde8 	.word	0x0801fde8
 8016a54:	0801f734 	.word	0x0801f734

08016a58 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b088      	sub	sp, #32
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	4611      	mov	r1, r2
 8016a64:	461a      	mov	r2, r3
 8016a66:	460b      	mov	r3, r1
 8016a68:	71fb      	strb	r3, [r7, #7]
 8016a6a:	4613      	mov	r3, r2
 8016a6c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d106      	bne.n	8016a86 <tcp_output_fill_options+0x2e>
 8016a78:	4b12      	ldr	r3, [pc, #72]	; (8016ac4 <tcp_output_fill_options+0x6c>)
 8016a7a:	f240 7256 	movw	r2, #1878	; 0x756
 8016a7e:	4912      	ldr	r1, [pc, #72]	; (8016ac8 <tcp_output_fill_options+0x70>)
 8016a80:	4812      	ldr	r0, [pc, #72]	; (8016acc <tcp_output_fill_options+0x74>)
 8016a82:	f006 fb2b 	bl	801d0dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016a8c:	69bb      	ldr	r3, [r7, #24]
 8016a8e:	3314      	adds	r3, #20
 8016a90:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016a92:	8bfb      	ldrh	r3, [r7, #30]
 8016a94:	009b      	lsls	r3, r3, #2
 8016a96:	461a      	mov	r2, r3
 8016a98:	79fb      	ldrb	r3, [r7, #7]
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	f003 0304 	and.w	r3, r3, #4
 8016aa0:	4413      	add	r3, r2
 8016aa2:	3314      	adds	r3, #20
 8016aa4:	69ba      	ldr	r2, [r7, #24]
 8016aa6:	4413      	add	r3, r2
 8016aa8:	697a      	ldr	r2, [r7, #20]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d006      	beq.n	8016abc <tcp_output_fill_options+0x64>
 8016aae:	4b05      	ldr	r3, [pc, #20]	; (8016ac4 <tcp_output_fill_options+0x6c>)
 8016ab0:	f240 7275 	movw	r2, #1909	; 0x775
 8016ab4:	4906      	ldr	r1, [pc, #24]	; (8016ad0 <tcp_output_fill_options+0x78>)
 8016ab6:	4805      	ldr	r0, [pc, #20]	; (8016acc <tcp_output_fill_options+0x74>)
 8016ab8:	f006 fb10 	bl	801d0dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016abc:	bf00      	nop
 8016abe:	3720      	adds	r7, #32
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	0801f6e0 	.word	0x0801f6e0
 8016ac8:	0801fe10 	.word	0x0801fe10
 8016acc:	0801f734 	.word	0x0801f734
 8016ad0:	0801fd08 	.word	0x0801fd08

08016ad4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b08a      	sub	sp, #40	; 0x28
 8016ad8:	af04      	add	r7, sp, #16
 8016ada:	60f8      	str	r0, [r7, #12]
 8016adc:	60b9      	str	r1, [r7, #8]
 8016ade:	607a      	str	r2, [r7, #4]
 8016ae0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016ae2:	68bb      	ldr	r3, [r7, #8]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d106      	bne.n	8016af6 <tcp_output_control_segment+0x22>
 8016ae8:	4b1c      	ldr	r3, [pc, #112]	; (8016b5c <tcp_output_control_segment+0x88>)
 8016aea:	f240 7287 	movw	r2, #1927	; 0x787
 8016aee:	491c      	ldr	r1, [pc, #112]	; (8016b60 <tcp_output_control_segment+0x8c>)
 8016af0:	481c      	ldr	r0, [pc, #112]	; (8016b64 <tcp_output_control_segment+0x90>)
 8016af2:	f006 faf3 	bl	801d0dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016af6:	683a      	ldr	r2, [r7, #0]
 8016af8:	6879      	ldr	r1, [r7, #4]
 8016afa:	68f8      	ldr	r0, [r7, #12]
 8016afc:	f7fe fae8 	bl	80150d0 <tcp_route>
 8016b00:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d102      	bne.n	8016b0e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016b08:	23fc      	movs	r3, #252	; 0xfc
 8016b0a:	75fb      	strb	r3, [r7, #23]
 8016b0c:	e01c      	b.n	8016b48 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d006      	beq.n	8016b22 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	7adb      	ldrb	r3, [r3, #11]
 8016b18:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	7a9b      	ldrb	r3, [r3, #10]
 8016b1e:	757b      	strb	r3, [r7, #21]
 8016b20:	e003      	b.n	8016b2a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016b22:	23ff      	movs	r3, #255	; 0xff
 8016b24:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016b26:	2300      	movs	r3, #0
 8016b28:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016b2a:	7dba      	ldrb	r2, [r7, #22]
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	9302      	str	r3, [sp, #8]
 8016b30:	2306      	movs	r3, #6
 8016b32:	9301      	str	r3, [sp, #4]
 8016b34:	7d7b      	ldrb	r3, [r7, #21]
 8016b36:	9300      	str	r3, [sp, #0]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	6879      	ldr	r1, [r7, #4]
 8016b3e:	68b8      	ldr	r0, [r7, #8]
 8016b40:	f004 fa0a 	bl	801af58 <ip4_output_if>
 8016b44:	4603      	mov	r3, r0
 8016b46:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016b48:	68b8      	ldr	r0, [r7, #8]
 8016b4a:	f7f9 fe15 	bl	8010778 <pbuf_free>
  return err;
 8016b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3718      	adds	r7, #24
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	0801f6e0 	.word	0x0801f6e0
 8016b60:	0801fe38 	.word	0x0801fe38
 8016b64:	0801f734 	.word	0x0801f734

08016b68 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016b68:	b590      	push	{r4, r7, lr}
 8016b6a:	b08b      	sub	sp, #44	; 0x2c
 8016b6c:	af04      	add	r7, sp, #16
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d106      	bne.n	8016b8a <tcp_rst+0x22>
 8016b7c:	4b1e      	ldr	r3, [pc, #120]	; (8016bf8 <tcp_rst+0x90>)
 8016b7e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016b82:	491e      	ldr	r1, [pc, #120]	; (8016bfc <tcp_rst+0x94>)
 8016b84:	481e      	ldr	r0, [pc, #120]	; (8016c00 <tcp_rst+0x98>)
 8016b86:	f006 faa9 	bl	801d0dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d106      	bne.n	8016b9e <tcp_rst+0x36>
 8016b90:	4b19      	ldr	r3, [pc, #100]	; (8016bf8 <tcp_rst+0x90>)
 8016b92:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016b96:	491b      	ldr	r1, [pc, #108]	; (8016c04 <tcp_rst+0x9c>)
 8016b98:	4819      	ldr	r0, [pc, #100]	; (8016c00 <tcp_rst+0x98>)
 8016b9a:	f006 fa9f 	bl	801d0dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016ba2:	2308      	movs	r3, #8
 8016ba4:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016ba6:	7dfb      	ldrb	r3, [r7, #23]
 8016ba8:	b29c      	uxth	r4, r3
 8016baa:	68b8      	ldr	r0, [r7, #8]
 8016bac:	f7f7 ffa2 	bl	800eaf4 <lwip_htonl>
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	8abb      	ldrh	r3, [r7, #20]
 8016bb4:	9303      	str	r3, [sp, #12]
 8016bb6:	2314      	movs	r3, #20
 8016bb8:	9302      	str	r3, [sp, #8]
 8016bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016bbc:	9301      	str	r3, [sp, #4]
 8016bbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016bc0:	9300      	str	r3, [sp, #0]
 8016bc2:	4613      	mov	r3, r2
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	6878      	ldr	r0, [r7, #4]
 8016bca:	f7ff fe95 	bl	80168f8 <tcp_output_alloc_header_common>
 8016bce:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00c      	beq.n	8016bf0 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016bd6:	7dfb      	ldrb	r3, [r7, #23]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	6939      	ldr	r1, [r7, #16]
 8016bdc:	68f8      	ldr	r0, [r7, #12]
 8016bde:	f7ff ff3b 	bl	8016a58 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be4:	683a      	ldr	r2, [r7, #0]
 8016be6:	6939      	ldr	r1, [r7, #16]
 8016be8:	68f8      	ldr	r0, [r7, #12]
 8016bea:	f7ff ff73 	bl	8016ad4 <tcp_output_control_segment>
 8016bee:	e000      	b.n	8016bf2 <tcp_rst+0x8a>
    return;
 8016bf0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016bf2:	371c      	adds	r7, #28
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd90      	pop	{r4, r7, pc}
 8016bf8:	0801f6e0 	.word	0x0801f6e0
 8016bfc:	0801fe64 	.word	0x0801fe64
 8016c00:	0801f734 	.word	0x0801f734
 8016c04:	0801fe80 	.word	0x0801fe80

08016c08 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016c08:	b590      	push	{r4, r7, lr}
 8016c0a:	b087      	sub	sp, #28
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016c10:	2300      	movs	r3, #0
 8016c12:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016c14:	2300      	movs	r3, #0
 8016c16:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d106      	bne.n	8016c2c <tcp_send_empty_ack+0x24>
 8016c1e:	4b28      	ldr	r3, [pc, #160]	; (8016cc0 <tcp_send_empty_ack+0xb8>)
 8016c20:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016c24:	4927      	ldr	r1, [pc, #156]	; (8016cc4 <tcp_send_empty_ack+0xbc>)
 8016c26:	4828      	ldr	r0, [pc, #160]	; (8016cc8 <tcp_send_empty_ack+0xc0>)
 8016c28:	f006 fa58 	bl	801d0dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016c2c:	7dfb      	ldrb	r3, [r7, #23]
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	f003 0304 	and.w	r3, r3, #4
 8016c36:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016c38:	7d7b      	ldrb	r3, [r7, #21]
 8016c3a:	b29c      	uxth	r4, r3
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f7 ff57 	bl	800eaf4 <lwip_htonl>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2200      	movs	r2, #0
 8016c4a:	4621      	mov	r1, r4
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f7ff fec5 	bl	80169dc <tcp_output_alloc_header>
 8016c52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d109      	bne.n	8016c6e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	8b5b      	ldrh	r3, [r3, #26]
 8016c5e:	f043 0303 	orr.w	r3, r3, #3
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016c68:	f06f 0301 	mvn.w	r3, #1
 8016c6c:	e023      	b.n	8016cb6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016c6e:	7dbb      	ldrb	r3, [r7, #22]
 8016c70:	7dfa      	ldrb	r2, [r7, #23]
 8016c72:	6939      	ldr	r1, [r7, #16]
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f7ff feef 	bl	8016a58 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016c7a:	687a      	ldr	r2, [r7, #4]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	3304      	adds	r3, #4
 8016c80:	6939      	ldr	r1, [r7, #16]
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7ff ff26 	bl	8016ad4 <tcp_output_control_segment>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d007      	beq.n	8016ca4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	8b5b      	ldrh	r3, [r3, #26]
 8016c98:	f043 0303 	orr.w	r3, r3, #3
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	835a      	strh	r2, [r3, #26]
 8016ca2:	e006      	b.n	8016cb2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	8b5b      	ldrh	r3, [r3, #26]
 8016ca8:	f023 0303 	bic.w	r3, r3, #3
 8016cac:	b29a      	uxth	r2, r3
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	371c      	adds	r7, #28
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd90      	pop	{r4, r7, pc}
 8016cbe:	bf00      	nop
 8016cc0:	0801f6e0 	.word	0x0801f6e0
 8016cc4:	0801fe9c 	.word	0x0801fe9c
 8016cc8:	0801f734 	.word	0x0801f734

08016ccc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016ccc:	b590      	push	{r4, r7, lr}
 8016cce:	b087      	sub	sp, #28
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d106      	bne.n	8016cec <tcp_keepalive+0x20>
 8016cde:	4b18      	ldr	r3, [pc, #96]	; (8016d40 <tcp_keepalive+0x74>)
 8016ce0:	f640 0224 	movw	r2, #2084	; 0x824
 8016ce4:	4917      	ldr	r1, [pc, #92]	; (8016d44 <tcp_keepalive+0x78>)
 8016ce6:	4818      	ldr	r0, [pc, #96]	; (8016d48 <tcp_keepalive+0x7c>)
 8016ce8:	f006 f9f8 	bl	801d0dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016cec:	7dfb      	ldrb	r3, [r7, #23]
 8016cee:	b29c      	uxth	r4, r3
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7f7 fefc 	bl	800eaf4 <lwip_htonl>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	2200      	movs	r2, #0
 8016d00:	4621      	mov	r1, r4
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f7ff fe6a 	bl	80169dc <tcp_output_alloc_header>
 8016d08:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d102      	bne.n	8016d16 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016d10:	f04f 33ff 	mov.w	r3, #4294967295
 8016d14:	e010      	b.n	8016d38 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016d16:	7dfb      	ldrb	r3, [r7, #23]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	6939      	ldr	r1, [r7, #16]
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f7ff fe9b 	bl	8016a58 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016d22:	687a      	ldr	r2, [r7, #4]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	3304      	adds	r3, #4
 8016d28:	6939      	ldr	r1, [r7, #16]
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f7ff fed2 	bl	8016ad4 <tcp_output_control_segment>
 8016d30:	4603      	mov	r3, r0
 8016d32:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	371c      	adds	r7, #28
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd90      	pop	{r4, r7, pc}
 8016d40:	0801f6e0 	.word	0x0801f6e0
 8016d44:	0801febc 	.word	0x0801febc
 8016d48:	0801f734 	.word	0x0801f734

08016d4c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016d4c:	b590      	push	{r4, r7, lr}
 8016d4e:	b08b      	sub	sp, #44	; 0x2c
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016d54:	2300      	movs	r3, #0
 8016d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d106      	bne.n	8016d6e <tcp_zero_window_probe+0x22>
 8016d60:	4b4c      	ldr	r3, [pc, #304]	; (8016e94 <tcp_zero_window_probe+0x148>)
 8016d62:	f640 024f 	movw	r2, #2127	; 0x84f
 8016d66:	494c      	ldr	r1, [pc, #304]	; (8016e98 <tcp_zero_window_probe+0x14c>)
 8016d68:	484c      	ldr	r0, [pc, #304]	; (8016e9c <tcp_zero_window_probe+0x150>)
 8016d6a:	f006 f9b7 	bl	801d0dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d72:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016d74:	6a3b      	ldr	r3, [r7, #32]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d101      	bne.n	8016d7e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	e086      	b.n	8016e8c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016d84:	2bff      	cmp	r3, #255	; 0xff
 8016d86:	d007      	beq.n	8016d98 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016d8e:	3301      	adds	r3, #1
 8016d90:	b2da      	uxtb	r2, r3
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016d98:	6a3b      	ldr	r3, [r7, #32]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	899b      	ldrh	r3, [r3, #12]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f7 fe92 	bl	800eaca <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	f003 0301 	and.w	r3, r3, #1
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d005      	beq.n	8016dbe <tcp_zero_window_probe+0x72>
 8016db2:	6a3b      	ldr	r3, [r7, #32]
 8016db4:	891b      	ldrh	r3, [r3, #8]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d101      	bne.n	8016dbe <tcp_zero_window_probe+0x72>
 8016dba:	2301      	movs	r3, #1
 8016dbc:	e000      	b.n	8016dc0 <tcp_zero_window_probe+0x74>
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016dc2:	7ffb      	ldrb	r3, [r7, #31]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	bf0c      	ite	eq
 8016dc8:	2301      	moveq	r3, #1
 8016dca:	2300      	movne	r3, #0
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dd4:	b299      	uxth	r1, r3
 8016dd6:	6a3b      	ldr	r3, [r7, #32]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	8bba      	ldrh	r2, [r7, #28]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f7ff fdfc 	bl	80169dc <tcp_output_alloc_header>
 8016de4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d102      	bne.n	8016df2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016dec:	f04f 33ff 	mov.w	r3, #4294967295
 8016df0:	e04c      	b.n	8016e8c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016df2:	69bb      	ldr	r3, [r7, #24]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016df8:	7ffb      	ldrb	r3, [r7, #31]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d011      	beq.n	8016e22 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	899b      	ldrh	r3, [r3, #12]
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	b21b      	sxth	r3, r3
 8016e06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016e0a:	b21c      	sxth	r4, r3
 8016e0c:	2011      	movs	r0, #17
 8016e0e:	f7f7 fe5c 	bl	800eaca <lwip_htons>
 8016e12:	4603      	mov	r3, r0
 8016e14:	b21b      	sxth	r3, r3
 8016e16:	4323      	orrs	r3, r4
 8016e18:	b21b      	sxth	r3, r3
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	819a      	strh	r2, [r3, #12]
 8016e20:	e010      	b.n	8016e44 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	685b      	ldr	r3, [r3, #4]
 8016e26:	3314      	adds	r3, #20
 8016e28:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016e2a:	6a3b      	ldr	r3, [r7, #32]
 8016e2c:	6858      	ldr	r0, [r3, #4]
 8016e2e:	6a3b      	ldr	r3, [r7, #32]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	891a      	ldrh	r2, [r3, #8]
 8016e34:	6a3b      	ldr	r3, [r7, #32]
 8016e36:	891b      	ldrh	r3, [r3, #8]
 8016e38:	1ad3      	subs	r3, r2, r3
 8016e3a:	b29b      	uxth	r3, r3
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	6939      	ldr	r1, [r7, #16]
 8016e40:	f7f9 fe94 	bl	8010b6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016e44:	6a3b      	ldr	r3, [r7, #32]
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7f7 fe52 	bl	800eaf4 <lwip_htonl>
 8016e50:	4603      	mov	r3, r0
 8016e52:	3301      	adds	r3, #1
 8016e54:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	1ad3      	subs	r3, r2, r3
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	da02      	bge.n	8016e68 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	68fa      	ldr	r2, [r7, #12]
 8016e66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	69b9      	ldr	r1, [r7, #24]
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f7ff fdf1 	bl	8016a58 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	3304      	adds	r3, #4
 8016e7c:	69b9      	ldr	r1, [r7, #24]
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f7ff fe28 	bl	8016ad4 <tcp_output_control_segment>
 8016e84:	4603      	mov	r3, r0
 8016e86:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016e88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	372c      	adds	r7, #44	; 0x2c
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd90      	pop	{r4, r7, pc}
 8016e94:	0801f6e0 	.word	0x0801f6e0
 8016e98:	0801fed8 	.word	0x0801fed8
 8016e9c:	0801f734 	.word	0x0801f734

08016ea0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016ea8:	f7fa f8a8 	bl	8010ffc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016eac:	4b0a      	ldr	r3, [pc, #40]	; (8016ed8 <tcpip_tcp_timer+0x38>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d103      	bne.n	8016ebc <tcpip_tcp_timer+0x1c>
 8016eb4:	4b09      	ldr	r3, [pc, #36]	; (8016edc <tcpip_tcp_timer+0x3c>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d005      	beq.n	8016ec8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	4908      	ldr	r1, [pc, #32]	; (8016ee0 <tcpip_tcp_timer+0x40>)
 8016ec0:	20fa      	movs	r0, #250	; 0xfa
 8016ec2:	f000 f8f3 	bl	80170ac <sys_timeout>
 8016ec6:	e003      	b.n	8016ed0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016ec8:	4b06      	ldr	r3, [pc, #24]	; (8016ee4 <tcpip_tcp_timer+0x44>)
 8016eca:	2200      	movs	r2, #0
 8016ecc:	601a      	str	r2, [r3, #0]
  }
}
 8016ece:	bf00      	nop
 8016ed0:	bf00      	nop
 8016ed2:	3708      	adds	r7, #8
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}
 8016ed8:	20008678 	.word	0x20008678
 8016edc:	2000867c 	.word	0x2000867c
 8016ee0:	08016ea1 	.word	0x08016ea1
 8016ee4:	200086c4 	.word	0x200086c4

08016ee8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016eec:	4b0a      	ldr	r3, [pc, #40]	; (8016f18 <tcp_timer_needed+0x30>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d10f      	bne.n	8016f14 <tcp_timer_needed+0x2c>
 8016ef4:	4b09      	ldr	r3, [pc, #36]	; (8016f1c <tcp_timer_needed+0x34>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d103      	bne.n	8016f04 <tcp_timer_needed+0x1c>
 8016efc:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <tcp_timer_needed+0x38>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d007      	beq.n	8016f14 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016f04:	4b04      	ldr	r3, [pc, #16]	; (8016f18 <tcp_timer_needed+0x30>)
 8016f06:	2201      	movs	r2, #1
 8016f08:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	4905      	ldr	r1, [pc, #20]	; (8016f24 <tcp_timer_needed+0x3c>)
 8016f0e:	20fa      	movs	r0, #250	; 0xfa
 8016f10:	f000 f8cc 	bl	80170ac <sys_timeout>
  }
}
 8016f14:	bf00      	nop
 8016f16:	bd80      	pop	{r7, pc}
 8016f18:	200086c4 	.word	0x200086c4
 8016f1c:	20008678 	.word	0x20008678
 8016f20:	2000867c 	.word	0x2000867c
 8016f24:	08016ea1 	.word	0x08016ea1

08016f28 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016f34:	2006      	movs	r0, #6
 8016f36:	f7f8 fd2d 	bl	800f994 <memp_malloc>
 8016f3a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d109      	bne.n	8016f56 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d151      	bne.n	8016fec <sys_timeout_abs+0xc4>
 8016f48:	4b2a      	ldr	r3, [pc, #168]	; (8016ff4 <sys_timeout_abs+0xcc>)
 8016f4a:	22be      	movs	r2, #190	; 0xbe
 8016f4c:	492a      	ldr	r1, [pc, #168]	; (8016ff8 <sys_timeout_abs+0xd0>)
 8016f4e:	482b      	ldr	r0, [pc, #172]	; (8016ffc <sys_timeout_abs+0xd4>)
 8016f50:	f006 f8c4 	bl	801d0dc <iprintf>
    return;
 8016f54:	e04a      	b.n	8016fec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016f56:	693b      	ldr	r3, [r7, #16]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	68fa      	ldr	r2, [r7, #12]
 8016f6c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016f6e:	4b24      	ldr	r3, [pc, #144]	; (8017000 <sys_timeout_abs+0xd8>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d103      	bne.n	8016f7e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016f76:	4a22      	ldr	r2, [pc, #136]	; (8017000 <sys_timeout_abs+0xd8>)
 8016f78:	693b      	ldr	r3, [r7, #16]
 8016f7a:	6013      	str	r3, [r2, #0]
    return;
 8016f7c:	e037      	b.n	8016fee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016f7e:	693b      	ldr	r3, [r7, #16]
 8016f80:	685a      	ldr	r2, [r3, #4]
 8016f82:	4b1f      	ldr	r3, [pc, #124]	; (8017000 <sys_timeout_abs+0xd8>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	1ad3      	subs	r3, r2, r3
 8016f8a:	0fdb      	lsrs	r3, r3, #31
 8016f8c:	f003 0301 	and.w	r3, r3, #1
 8016f90:	b2db      	uxtb	r3, r3
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d007      	beq.n	8016fa6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016f96:	4b1a      	ldr	r3, [pc, #104]	; (8017000 <sys_timeout_abs+0xd8>)
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016f9e:	4a18      	ldr	r2, [pc, #96]	; (8017000 <sys_timeout_abs+0xd8>)
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	6013      	str	r3, [r2, #0]
 8016fa4:	e023      	b.n	8016fee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016fa6:	4b16      	ldr	r3, [pc, #88]	; (8017000 <sys_timeout_abs+0xd8>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	617b      	str	r3, [r7, #20]
 8016fac:	e01a      	b.n	8016fe4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d00b      	beq.n	8016fce <sys_timeout_abs+0xa6>
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	685a      	ldr	r2, [r3, #4]
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	1ad3      	subs	r3, r2, r3
 8016fc2:	0fdb      	lsrs	r3, r3, #31
 8016fc4:	f003 0301 	and.w	r3, r3, #1
 8016fc8:	b2db      	uxtb	r3, r3
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d007      	beq.n	8016fde <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	681a      	ldr	r2, [r3, #0]
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	693a      	ldr	r2, [r7, #16]
 8016fda:	601a      	str	r2, [r3, #0]
        break;
 8016fdc:	e007      	b.n	8016fee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	617b      	str	r3, [r7, #20]
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d1e1      	bne.n	8016fae <sys_timeout_abs+0x86>
 8016fea:	e000      	b.n	8016fee <sys_timeout_abs+0xc6>
    return;
 8016fec:	bf00      	nop
      }
    }
  }
}
 8016fee:	3718      	adds	r7, #24
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}
 8016ff4:	0801fefc 	.word	0x0801fefc
 8016ff8:	0801ff30 	.word	0x0801ff30
 8016ffc:	0801ff70 	.word	0x0801ff70
 8017000:	200086bc 	.word	0x200086bc

08017004 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	4798      	blx	r3

  now = sys_now();
 8017016:	f7f3 fb59 	bl	800a6cc <sys_now>
 801701a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	4b0f      	ldr	r3, [pc, #60]	; (8017060 <lwip_cyclic_timer+0x5c>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	4413      	add	r3, r2
 8017026:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	1ad3      	subs	r3, r2, r3
 801702e:	0fdb      	lsrs	r3, r3, #31
 8017030:	f003 0301 	and.w	r3, r3, #1
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b00      	cmp	r3, #0
 8017038:	d009      	beq.n	801704e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	4413      	add	r3, r2
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	4907      	ldr	r1, [pc, #28]	; (8017064 <lwip_cyclic_timer+0x60>)
 8017046:	4618      	mov	r0, r3
 8017048:	f7ff ff6e 	bl	8016f28 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801704c:	e004      	b.n	8017058 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	4904      	ldr	r1, [pc, #16]	; (8017064 <lwip_cyclic_timer+0x60>)
 8017052:	68f8      	ldr	r0, [r7, #12]
 8017054:	f7ff ff68 	bl	8016f28 <sys_timeout_abs>
}
 8017058:	bf00      	nop
 801705a:	3718      	adds	r7, #24
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	200086c0 	.word	0x200086c0
 8017064:	08017005 	.word	0x08017005

08017068 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801706e:	2301      	movs	r3, #1
 8017070:	607b      	str	r3, [r7, #4]
 8017072:	e00e      	b.n	8017092 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017074:	4a0b      	ldr	r2, [pc, #44]	; (80170a4 <sys_timeouts_init+0x3c>)
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	00db      	lsls	r3, r3, #3
 8017080:	4a08      	ldr	r2, [pc, #32]	; (80170a4 <sys_timeouts_init+0x3c>)
 8017082:	4413      	add	r3, r2
 8017084:	461a      	mov	r2, r3
 8017086:	4908      	ldr	r1, [pc, #32]	; (80170a8 <sys_timeouts_init+0x40>)
 8017088:	f000 f810 	bl	80170ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	3301      	adds	r3, #1
 8017090:	607b      	str	r3, [r7, #4]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2b05      	cmp	r3, #5
 8017096:	d9ed      	bls.n	8017074 <sys_timeouts_init+0xc>
  }
}
 8017098:	bf00      	nop
 801709a:	bf00      	nop
 801709c:	3708      	adds	r7, #8
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	08020f2c 	.word	0x08020f2c
 80170a8:	08017005 	.word	0x08017005

080170ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b086      	sub	sp, #24
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80170be:	d306      	bcc.n	80170ce <sys_timeout+0x22>
 80170c0:	4b0a      	ldr	r3, [pc, #40]	; (80170ec <sys_timeout+0x40>)
 80170c2:	f240 1229 	movw	r2, #297	; 0x129
 80170c6:	490a      	ldr	r1, [pc, #40]	; (80170f0 <sys_timeout+0x44>)
 80170c8:	480a      	ldr	r0, [pc, #40]	; (80170f4 <sys_timeout+0x48>)
 80170ca:	f006 f807 	bl	801d0dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80170ce:	f7f3 fafd 	bl	800a6cc <sys_now>
 80170d2:	4602      	mov	r2, r0
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	4413      	add	r3, r2
 80170d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80170da:	687a      	ldr	r2, [r7, #4]
 80170dc:	68b9      	ldr	r1, [r7, #8]
 80170de:	6978      	ldr	r0, [r7, #20]
 80170e0:	f7ff ff22 	bl	8016f28 <sys_timeout_abs>
#endif
}
 80170e4:	bf00      	nop
 80170e6:	3718      	adds	r7, #24
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	0801fefc 	.word	0x0801fefc
 80170f0:	0801ff98 	.word	0x0801ff98
 80170f4:	0801ff70 	.word	0x0801ff70

080170f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b084      	sub	sp, #16
 80170fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80170fe:	f7f3 fae5 	bl	800a6cc <sys_now>
 8017102:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017104:	4b1a      	ldr	r3, [pc, #104]	; (8017170 <sys_check_timeouts+0x78>)
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	b2db      	uxtb	r3, r3
 801710a:	2b00      	cmp	r3, #0
 801710c:	d001      	beq.n	8017112 <sys_check_timeouts+0x1a>
 801710e:	f7f8 fff9 	bl	8010104 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017112:	4b18      	ldr	r3, [pc, #96]	; (8017174 <sys_check_timeouts+0x7c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d022      	beq.n	8017164 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	68fa      	ldr	r2, [r7, #12]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	0fdb      	lsrs	r3, r3, #31
 8017128:	f003 0301 	and.w	r3, r3, #1
 801712c:	b2db      	uxtb	r3, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	d11a      	bne.n	8017168 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	4a0f      	ldr	r2, [pc, #60]	; (8017174 <sys_check_timeouts+0x7c>)
 8017138:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	689b      	ldr	r3, [r3, #8]
 801713e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	4a0b      	ldr	r2, [pc, #44]	; (8017178 <sys_check_timeouts+0x80>)
 801714c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801714e:	68b9      	ldr	r1, [r7, #8]
 8017150:	2006      	movs	r0, #6
 8017152:	f7f8 fc8f 	bl	800fa74 <memp_free>
    if (handler != NULL) {
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d0d3      	beq.n	8017104 <sys_check_timeouts+0xc>
      handler(arg);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6838      	ldr	r0, [r7, #0]
 8017160:	4798      	blx	r3
  do {
 8017162:	e7cf      	b.n	8017104 <sys_check_timeouts+0xc>
      return;
 8017164:	bf00      	nop
 8017166:	e000      	b.n	801716a <sys_check_timeouts+0x72>
      return;
 8017168:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801716a:	3710      	adds	r7, #16
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}
 8017170:	20008669 	.word	0x20008669
 8017174:	200086bc 	.word	0x200086bc
 8017178:	200086c0 	.word	0x200086c0

0801717c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017180:	f005 fe20 	bl	801cdc4 <rand>
 8017184:	4603      	mov	r3, r0
 8017186:	b29b      	uxth	r3, r3
 8017188:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801718c:	b29b      	uxth	r3, r3
 801718e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017192:	b29a      	uxth	r2, r3
 8017194:	4b01      	ldr	r3, [pc, #4]	; (801719c <udp_init+0x20>)
 8017196:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017198:	bf00      	nop
 801719a:	bd80      	pop	{r7, pc}
 801719c:	20000134 	.word	0x20000134

080171a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80171a0:	b480      	push	{r7}
 80171a2:	b083      	sub	sp, #12
 80171a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80171a6:	2300      	movs	r3, #0
 80171a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80171aa:	4b17      	ldr	r3, [pc, #92]	; (8017208 <udp_new_port+0x68>)
 80171ac:	881b      	ldrh	r3, [r3, #0]
 80171ae:	1c5a      	adds	r2, r3, #1
 80171b0:	b291      	uxth	r1, r2
 80171b2:	4a15      	ldr	r2, [pc, #84]	; (8017208 <udp_new_port+0x68>)
 80171b4:	8011      	strh	r1, [r2, #0]
 80171b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171ba:	4293      	cmp	r3, r2
 80171bc:	d103      	bne.n	80171c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80171be:	4b12      	ldr	r3, [pc, #72]	; (8017208 <udp_new_port+0x68>)
 80171c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80171c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80171c6:	4b11      	ldr	r3, [pc, #68]	; (801720c <udp_new_port+0x6c>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	603b      	str	r3, [r7, #0]
 80171cc:	e011      	b.n	80171f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	8a5a      	ldrh	r2, [r3, #18]
 80171d2:	4b0d      	ldr	r3, [pc, #52]	; (8017208 <udp_new_port+0x68>)
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d108      	bne.n	80171ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80171da:	88fb      	ldrh	r3, [r7, #6]
 80171dc:	3301      	adds	r3, #1
 80171de:	80fb      	strh	r3, [r7, #6]
 80171e0:	88fb      	ldrh	r3, [r7, #6]
 80171e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80171e6:	d3e0      	bcc.n	80171aa <udp_new_port+0xa>
        return 0;
 80171e8:	2300      	movs	r3, #0
 80171ea:	e007      	b.n	80171fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	68db      	ldr	r3, [r3, #12]
 80171f0:	603b      	str	r3, [r7, #0]
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1ea      	bne.n	80171ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80171f8:	4b03      	ldr	r3, [pc, #12]	; (8017208 <udp_new_port+0x68>)
 80171fa:	881b      	ldrh	r3, [r3, #0]
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	370c      	adds	r7, #12
 8017200:	46bd      	mov	sp, r7
 8017202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017206:	4770      	bx	lr
 8017208:	20000134 	.word	0x20000134
 801720c:	200086c8 	.word	0x200086c8

08017210 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b084      	sub	sp, #16
 8017214:	af00      	add	r7, sp, #0
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	4613      	mov	r3, r2
 801721c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d105      	bne.n	8017230 <udp_input_local_match+0x20>
 8017224:	4b27      	ldr	r3, [pc, #156]	; (80172c4 <udp_input_local_match+0xb4>)
 8017226:	2287      	movs	r2, #135	; 0x87
 8017228:	4927      	ldr	r1, [pc, #156]	; (80172c8 <udp_input_local_match+0xb8>)
 801722a:	4828      	ldr	r0, [pc, #160]	; (80172cc <udp_input_local_match+0xbc>)
 801722c:	f005 ff56 	bl	801d0dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d105      	bne.n	8017242 <udp_input_local_match+0x32>
 8017236:	4b23      	ldr	r3, [pc, #140]	; (80172c4 <udp_input_local_match+0xb4>)
 8017238:	2288      	movs	r2, #136	; 0x88
 801723a:	4925      	ldr	r1, [pc, #148]	; (80172d0 <udp_input_local_match+0xc0>)
 801723c:	4823      	ldr	r0, [pc, #140]	; (80172cc <udp_input_local_match+0xbc>)
 801723e:	f005 ff4d 	bl	801d0dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	7a1b      	ldrb	r3, [r3, #8]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00b      	beq.n	8017262 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	7a1a      	ldrb	r2, [r3, #8]
 801724e:	4b21      	ldr	r3, [pc, #132]	; (80172d4 <udp_input_local_match+0xc4>)
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017256:	3301      	adds	r3, #1
 8017258:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801725a:	429a      	cmp	r2, r3
 801725c:	d001      	beq.n	8017262 <udp_input_local_match+0x52>
    return 0;
 801725e:	2300      	movs	r3, #0
 8017260:	e02b      	b.n	80172ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017262:	79fb      	ldrb	r3, [r7, #7]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d018      	beq.n	801729a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d013      	beq.n	8017296 <udp_input_local_match+0x86>
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00f      	beq.n	8017296 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017276:	4b17      	ldr	r3, [pc, #92]	; (80172d4 <udp_input_local_match+0xc4>)
 8017278:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801727e:	d00a      	beq.n	8017296 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	4b13      	ldr	r3, [pc, #76]	; (80172d4 <udp_input_local_match+0xc4>)
 8017286:	695b      	ldr	r3, [r3, #20]
 8017288:	405a      	eors	r2, r3
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	3308      	adds	r3, #8
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017292:	2b00      	cmp	r3, #0
 8017294:	d110      	bne.n	80172b8 <udp_input_local_match+0xa8>
          return 1;
 8017296:	2301      	movs	r3, #1
 8017298:	e00f      	b.n	80172ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d009      	beq.n	80172b4 <udp_input_local_match+0xa4>
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d005      	beq.n	80172b4 <udp_input_local_match+0xa4>
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	4b09      	ldr	r3, [pc, #36]	; (80172d4 <udp_input_local_match+0xc4>)
 80172ae:	695b      	ldr	r3, [r3, #20]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d101      	bne.n	80172b8 <udp_input_local_match+0xa8>
        return 1;
 80172b4:	2301      	movs	r3, #1
 80172b6:	e000      	b.n	80172ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80172b8:	2300      	movs	r3, #0
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	0801ffe4 	.word	0x0801ffe4
 80172c8:	08020014 	.word	0x08020014
 80172cc:	08020038 	.word	0x08020038
 80172d0:	08020060 	.word	0x08020060
 80172d4:	2000550c 	.word	0x2000550c

080172d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80172d8:	b590      	push	{r4, r7, lr}
 80172da:	b08d      	sub	sp, #52	; 0x34
 80172dc:	af02      	add	r7, sp, #8
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80172e2:	2300      	movs	r3, #0
 80172e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d105      	bne.n	80172f8 <udp_input+0x20>
 80172ec:	4b7c      	ldr	r3, [pc, #496]	; (80174e0 <udp_input+0x208>)
 80172ee:	22cf      	movs	r2, #207	; 0xcf
 80172f0:	497c      	ldr	r1, [pc, #496]	; (80174e4 <udp_input+0x20c>)
 80172f2:	487d      	ldr	r0, [pc, #500]	; (80174e8 <udp_input+0x210>)
 80172f4:	f005 fef2 	bl	801d0dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d105      	bne.n	801730a <udp_input+0x32>
 80172fe:	4b78      	ldr	r3, [pc, #480]	; (80174e0 <udp_input+0x208>)
 8017300:	22d0      	movs	r2, #208	; 0xd0
 8017302:	497a      	ldr	r1, [pc, #488]	; (80174ec <udp_input+0x214>)
 8017304:	4878      	ldr	r0, [pc, #480]	; (80174e8 <udp_input+0x210>)
 8017306:	f005 fee9 	bl	801d0dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	895b      	ldrh	r3, [r3, #10]
 801730e:	2b07      	cmp	r3, #7
 8017310:	d803      	bhi.n	801731a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7f9 fa30 	bl	8010778 <pbuf_free>
    goto end;
 8017318:	e0de      	b.n	80174d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	685b      	ldr	r3, [r3, #4]
 801731e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017320:	4b73      	ldr	r3, [pc, #460]	; (80174f0 <udp_input+0x218>)
 8017322:	695b      	ldr	r3, [r3, #20]
 8017324:	4a72      	ldr	r2, [pc, #456]	; (80174f0 <udp_input+0x218>)
 8017326:	6812      	ldr	r2, [r2, #0]
 8017328:	4611      	mov	r1, r2
 801732a:	4618      	mov	r0, r3
 801732c:	f003 feec 	bl	801b108 <ip4_addr_isbroadcast_u32>
 8017330:	4603      	mov	r3, r0
 8017332:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	881b      	ldrh	r3, [r3, #0]
 8017338:	b29b      	uxth	r3, r3
 801733a:	4618      	mov	r0, r3
 801733c:	f7f7 fbc5 	bl	800eaca <lwip_htons>
 8017340:	4603      	mov	r3, r0
 8017342:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	885b      	ldrh	r3, [r3, #2]
 8017348:	b29b      	uxth	r3, r3
 801734a:	4618      	mov	r0, r3
 801734c:	f7f7 fbbd 	bl	800eaca <lwip_htons>
 8017350:	4603      	mov	r3, r0
 8017352:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017354:	2300      	movs	r3, #0
 8017356:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017358:	2300      	movs	r3, #0
 801735a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801735c:	2300      	movs	r3, #0
 801735e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017360:	4b64      	ldr	r3, [pc, #400]	; (80174f4 <udp_input+0x21c>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	627b      	str	r3, [r7, #36]	; 0x24
 8017366:	e054      	b.n	8017412 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736a:	8a5b      	ldrh	r3, [r3, #18]
 801736c:	89fa      	ldrh	r2, [r7, #14]
 801736e:	429a      	cmp	r2, r3
 8017370:	d14a      	bne.n	8017408 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017372:	7cfb      	ldrb	r3, [r7, #19]
 8017374:	461a      	mov	r2, r3
 8017376:	6839      	ldr	r1, [r7, #0]
 8017378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801737a:	f7ff ff49 	bl	8017210 <udp_input_local_match>
 801737e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017380:	2b00      	cmp	r3, #0
 8017382:	d041      	beq.n	8017408 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017386:	7c1b      	ldrb	r3, [r3, #16]
 8017388:	f003 0304 	and.w	r3, r3, #4
 801738c:	2b00      	cmp	r3, #0
 801738e:	d11d      	bne.n	80173cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017390:	69fb      	ldr	r3, [r7, #28]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d102      	bne.n	801739c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017398:	61fb      	str	r3, [r7, #28]
 801739a:	e017      	b.n	80173cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801739c:	7cfb      	ldrb	r3, [r7, #19]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d014      	beq.n	80173cc <udp_input+0xf4>
 80173a2:	4b53      	ldr	r3, [pc, #332]	; (80174f0 <udp_input+0x218>)
 80173a4:	695b      	ldr	r3, [r3, #20]
 80173a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173aa:	d10f      	bne.n	80173cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	681a      	ldr	r2, [r3, #0]
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	3304      	adds	r3, #4
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d008      	beq.n	80173cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80173ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	683b      	ldr	r3, [r7, #0]
 80173c0:	3304      	adds	r3, #4
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d101      	bne.n	80173cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80173cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ce:	8a9b      	ldrh	r3, [r3, #20]
 80173d0:	8a3a      	ldrh	r2, [r7, #16]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d118      	bne.n	8017408 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d005      	beq.n	80173ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80173de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e0:	685a      	ldr	r2, [r3, #4]
 80173e2:	4b43      	ldr	r3, [pc, #268]	; (80174f0 <udp_input+0x218>)
 80173e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d10e      	bne.n	8017408 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d014      	beq.n	801741a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80173f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f2:	68da      	ldr	r2, [r3, #12]
 80173f4:	6a3b      	ldr	r3, [r7, #32]
 80173f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80173f8:	4b3e      	ldr	r3, [pc, #248]	; (80174f4 <udp_input+0x21c>)
 80173fa:	681a      	ldr	r2, [r3, #0]
 80173fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017400:	4a3c      	ldr	r2, [pc, #240]	; (80174f4 <udp_input+0x21c>)
 8017402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017404:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017406:	e008      	b.n	801741a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801740a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801740e:	68db      	ldr	r3, [r3, #12]
 8017410:	627b      	str	r3, [r7, #36]	; 0x24
 8017412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017414:	2b00      	cmp	r3, #0
 8017416:	d1a7      	bne.n	8017368 <udp_input+0x90>
 8017418:	e000      	b.n	801741c <udp_input+0x144>
        break;
 801741a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741e:	2b00      	cmp	r3, #0
 8017420:	d101      	bne.n	8017426 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017428:	2b00      	cmp	r3, #0
 801742a:	d002      	beq.n	8017432 <udp_input+0x15a>
    for_us = 1;
 801742c:	2301      	movs	r3, #1
 801742e:	76fb      	strb	r3, [r7, #27]
 8017430:	e00a      	b.n	8017448 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	3304      	adds	r3, #4
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	4b2d      	ldr	r3, [pc, #180]	; (80174f0 <udp_input+0x218>)
 801743a:	695b      	ldr	r3, [r3, #20]
 801743c:	429a      	cmp	r2, r3
 801743e:	bf0c      	ite	eq
 8017440:	2301      	moveq	r3, #1
 8017442:	2300      	movne	r3, #0
 8017444:	b2db      	uxtb	r3, r3
 8017446:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017448:	7efb      	ldrb	r3, [r7, #27]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d041      	beq.n	80174d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801744e:	2108      	movs	r1, #8
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	f7f9 f90b 	bl	801066c <pbuf_remove_header>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d00a      	beq.n	8017472 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801745c:	4b20      	ldr	r3, [pc, #128]	; (80174e0 <udp_input+0x208>)
 801745e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017462:	4925      	ldr	r1, [pc, #148]	; (80174f8 <udp_input+0x220>)
 8017464:	4820      	ldr	r0, [pc, #128]	; (80174e8 <udp_input+0x210>)
 8017466:	f005 fe39 	bl	801d0dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7f9 f984 	bl	8010778 <pbuf_free>
      goto end;
 8017470:	e032      	b.n	80174d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017474:	2b00      	cmp	r3, #0
 8017476:	d012      	beq.n	801749e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747a:	699b      	ldr	r3, [r3, #24]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d00a      	beq.n	8017496 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017482:	699c      	ldr	r4, [r3, #24]
 8017484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017486:	69d8      	ldr	r0, [r3, #28]
 8017488:	8a3b      	ldrh	r3, [r7, #16]
 801748a:	9300      	str	r3, [sp, #0]
 801748c:	4b1b      	ldr	r3, [pc, #108]	; (80174fc <udp_input+0x224>)
 801748e:	687a      	ldr	r2, [r7, #4]
 8017490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017492:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017494:	e021      	b.n	80174da <udp_input+0x202>
        pbuf_free(p);
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f7f9 f96e 	bl	8010778 <pbuf_free>
        goto end;
 801749c:	e01c      	b.n	80174d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801749e:	7cfb      	ldrb	r3, [r7, #19]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d112      	bne.n	80174ca <udp_input+0x1f2>
 80174a4:	4b12      	ldr	r3, [pc, #72]	; (80174f0 <udp_input+0x218>)
 80174a6:	695b      	ldr	r3, [r3, #20]
 80174a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80174ac:	2be0      	cmp	r3, #224	; 0xe0
 80174ae:	d00c      	beq.n	80174ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80174b0:	4b0f      	ldr	r3, [pc, #60]	; (80174f0 <udp_input+0x218>)
 80174b2:	899b      	ldrh	r3, [r3, #12]
 80174b4:	3308      	adds	r3, #8
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	b21b      	sxth	r3, r3
 80174ba:	4619      	mov	r1, r3
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7f9 f948 	bl	8010752 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80174c2:	2103      	movs	r1, #3
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f003 fae1 	bl	801aa8c <icmp_dest_unreach>
      pbuf_free(p);
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f7f9 f954 	bl	8010778 <pbuf_free>
  return;
 80174d0:	e003      	b.n	80174da <udp_input+0x202>
    pbuf_free(p);
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f7f9 f950 	bl	8010778 <pbuf_free>
  return;
 80174d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80174da:	372c      	adds	r7, #44	; 0x2c
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd90      	pop	{r4, r7, pc}
 80174e0:	0801ffe4 	.word	0x0801ffe4
 80174e4:	08020088 	.word	0x08020088
 80174e8:	08020038 	.word	0x08020038
 80174ec:	080200a0 	.word	0x080200a0
 80174f0:	2000550c 	.word	0x2000550c
 80174f4:	200086c8 	.word	0x200086c8
 80174f8:	080200bc 	.word	0x080200bc
 80174fc:	2000551c 	.word	0x2000551c

08017500 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b088      	sub	sp, #32
 8017504:	af02      	add	r7, sp, #8
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d109      	bne.n	8017528 <udp_sendto+0x28>
 8017514:	4b23      	ldr	r3, [pc, #140]	; (80175a4 <udp_sendto+0xa4>)
 8017516:	f44f 7206 	mov.w	r2, #536	; 0x218
 801751a:	4923      	ldr	r1, [pc, #140]	; (80175a8 <udp_sendto+0xa8>)
 801751c:	4823      	ldr	r0, [pc, #140]	; (80175ac <udp_sendto+0xac>)
 801751e:	f005 fddd 	bl	801d0dc <iprintf>
 8017522:	f06f 030f 	mvn.w	r3, #15
 8017526:	e038      	b.n	801759a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d109      	bne.n	8017542 <udp_sendto+0x42>
 801752e:	4b1d      	ldr	r3, [pc, #116]	; (80175a4 <udp_sendto+0xa4>)
 8017530:	f240 2219 	movw	r2, #537	; 0x219
 8017534:	491e      	ldr	r1, [pc, #120]	; (80175b0 <udp_sendto+0xb0>)
 8017536:	481d      	ldr	r0, [pc, #116]	; (80175ac <udp_sendto+0xac>)
 8017538:	f005 fdd0 	bl	801d0dc <iprintf>
 801753c:	f06f 030f 	mvn.w	r3, #15
 8017540:	e02b      	b.n	801759a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d109      	bne.n	801755c <udp_sendto+0x5c>
 8017548:	4b16      	ldr	r3, [pc, #88]	; (80175a4 <udp_sendto+0xa4>)
 801754a:	f240 221a 	movw	r2, #538	; 0x21a
 801754e:	4919      	ldr	r1, [pc, #100]	; (80175b4 <udp_sendto+0xb4>)
 8017550:	4816      	ldr	r0, [pc, #88]	; (80175ac <udp_sendto+0xac>)
 8017552:	f005 fdc3 	bl	801d0dc <iprintf>
 8017556:	f06f 030f 	mvn.w	r3, #15
 801755a:	e01e      	b.n	801759a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	7a1b      	ldrb	r3, [r3, #8]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d006      	beq.n	8017572 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	7a1b      	ldrb	r3, [r3, #8]
 8017568:	4618      	mov	r0, r3
 801756a:	f7f8 fda5 	bl	80100b8 <netif_get_by_index>
 801756e:	6178      	str	r0, [r7, #20]
 8017570:	e003      	b.n	801757a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f003 fb14 	bl	801aba0 <ip4_route>
 8017578:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d102      	bne.n	8017586 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017580:	f06f 0303 	mvn.w	r3, #3
 8017584:	e009      	b.n	801759a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017586:	887a      	ldrh	r2, [r7, #2]
 8017588:	697b      	ldr	r3, [r7, #20]
 801758a:	9300      	str	r3, [sp, #0]
 801758c:	4613      	mov	r3, r2
 801758e:	687a      	ldr	r2, [r7, #4]
 8017590:	68b9      	ldr	r1, [r7, #8]
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f000 f810 	bl	80175b8 <udp_sendto_if>
 8017598:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801759a:	4618      	mov	r0, r3
 801759c:	3718      	adds	r7, #24
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd80      	pop	{r7, pc}
 80175a2:	bf00      	nop
 80175a4:	0801ffe4 	.word	0x0801ffe4
 80175a8:	08020108 	.word	0x08020108
 80175ac:	08020038 	.word	0x08020038
 80175b0:	08020120 	.word	0x08020120
 80175b4:	0802013c 	.word	0x0802013c

080175b8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b088      	sub	sp, #32
 80175bc:	af02      	add	r7, sp, #8
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	607a      	str	r2, [r7, #4]
 80175c4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d109      	bne.n	80175e0 <udp_sendto_if+0x28>
 80175cc:	4b2e      	ldr	r3, [pc, #184]	; (8017688 <udp_sendto_if+0xd0>)
 80175ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175d2:	492e      	ldr	r1, [pc, #184]	; (801768c <udp_sendto_if+0xd4>)
 80175d4:	482e      	ldr	r0, [pc, #184]	; (8017690 <udp_sendto_if+0xd8>)
 80175d6:	f005 fd81 	bl	801d0dc <iprintf>
 80175da:	f06f 030f 	mvn.w	r3, #15
 80175de:	e04f      	b.n	8017680 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d109      	bne.n	80175fa <udp_sendto_if+0x42>
 80175e6:	4b28      	ldr	r3, [pc, #160]	; (8017688 <udp_sendto_if+0xd0>)
 80175e8:	f240 2281 	movw	r2, #641	; 0x281
 80175ec:	4929      	ldr	r1, [pc, #164]	; (8017694 <udp_sendto_if+0xdc>)
 80175ee:	4828      	ldr	r0, [pc, #160]	; (8017690 <udp_sendto_if+0xd8>)
 80175f0:	f005 fd74 	bl	801d0dc <iprintf>
 80175f4:	f06f 030f 	mvn.w	r3, #15
 80175f8:	e042      	b.n	8017680 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d109      	bne.n	8017614 <udp_sendto_if+0x5c>
 8017600:	4b21      	ldr	r3, [pc, #132]	; (8017688 <udp_sendto_if+0xd0>)
 8017602:	f240 2282 	movw	r2, #642	; 0x282
 8017606:	4924      	ldr	r1, [pc, #144]	; (8017698 <udp_sendto_if+0xe0>)
 8017608:	4821      	ldr	r0, [pc, #132]	; (8017690 <udp_sendto_if+0xd8>)
 801760a:	f005 fd67 	bl	801d0dc <iprintf>
 801760e:	f06f 030f 	mvn.w	r3, #15
 8017612:	e035      	b.n	8017680 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d109      	bne.n	801762e <udp_sendto_if+0x76>
 801761a:	4b1b      	ldr	r3, [pc, #108]	; (8017688 <udp_sendto_if+0xd0>)
 801761c:	f240 2283 	movw	r2, #643	; 0x283
 8017620:	491e      	ldr	r1, [pc, #120]	; (801769c <udp_sendto_if+0xe4>)
 8017622:	481b      	ldr	r0, [pc, #108]	; (8017690 <udp_sendto_if+0xd8>)
 8017624:	f005 fd5a 	bl	801d0dc <iprintf>
 8017628:	f06f 030f 	mvn.w	r3, #15
 801762c:	e028      	b.n	8017680 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d009      	beq.n	8017648 <udp_sendto_if+0x90>
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d005      	beq.n	8017648 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017644:	2be0      	cmp	r3, #224	; 0xe0
 8017646:	d103      	bne.n	8017650 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017648:	6a3b      	ldr	r3, [r7, #32]
 801764a:	3304      	adds	r3, #4
 801764c:	617b      	str	r3, [r7, #20]
 801764e:	e00b      	b.n	8017668 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	6a3b      	ldr	r3, [r7, #32]
 8017656:	3304      	adds	r3, #4
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	429a      	cmp	r2, r3
 801765c:	d002      	beq.n	8017664 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801765e:	f06f 0303 	mvn.w	r3, #3
 8017662:	e00d      	b.n	8017680 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017668:	887a      	ldrh	r2, [r7, #2]
 801766a:	697b      	ldr	r3, [r7, #20]
 801766c:	9301      	str	r3, [sp, #4]
 801766e:	6a3b      	ldr	r3, [r7, #32]
 8017670:	9300      	str	r3, [sp, #0]
 8017672:	4613      	mov	r3, r2
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	68b9      	ldr	r1, [r7, #8]
 8017678:	68f8      	ldr	r0, [r7, #12]
 801767a:	f000 f811 	bl	80176a0 <udp_sendto_if_src>
 801767e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017680:	4618      	mov	r0, r3
 8017682:	3718      	adds	r7, #24
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	0801ffe4 	.word	0x0801ffe4
 801768c:	08020158 	.word	0x08020158
 8017690:	08020038 	.word	0x08020038
 8017694:	08020174 	.word	0x08020174
 8017698:	08020190 	.word	0x08020190
 801769c:	080201b0 	.word	0x080201b0

080176a0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08c      	sub	sp, #48	; 0x30
 80176a4:	af04      	add	r7, sp, #16
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
 80176ac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d109      	bne.n	80176c8 <udp_sendto_if_src+0x28>
 80176b4:	4b65      	ldr	r3, [pc, #404]	; (801784c <udp_sendto_if_src+0x1ac>)
 80176b6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80176ba:	4965      	ldr	r1, [pc, #404]	; (8017850 <udp_sendto_if_src+0x1b0>)
 80176bc:	4865      	ldr	r0, [pc, #404]	; (8017854 <udp_sendto_if_src+0x1b4>)
 80176be:	f005 fd0d 	bl	801d0dc <iprintf>
 80176c2:	f06f 030f 	mvn.w	r3, #15
 80176c6:	e0bc      	b.n	8017842 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d109      	bne.n	80176e2 <udp_sendto_if_src+0x42>
 80176ce:	4b5f      	ldr	r3, [pc, #380]	; (801784c <udp_sendto_if_src+0x1ac>)
 80176d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80176d4:	4960      	ldr	r1, [pc, #384]	; (8017858 <udp_sendto_if_src+0x1b8>)
 80176d6:	485f      	ldr	r0, [pc, #380]	; (8017854 <udp_sendto_if_src+0x1b4>)
 80176d8:	f005 fd00 	bl	801d0dc <iprintf>
 80176dc:	f06f 030f 	mvn.w	r3, #15
 80176e0:	e0af      	b.n	8017842 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d109      	bne.n	80176fc <udp_sendto_if_src+0x5c>
 80176e8:	4b58      	ldr	r3, [pc, #352]	; (801784c <udp_sendto_if_src+0x1ac>)
 80176ea:	f240 22d3 	movw	r2, #723	; 0x2d3
 80176ee:	495b      	ldr	r1, [pc, #364]	; (801785c <udp_sendto_if_src+0x1bc>)
 80176f0:	4858      	ldr	r0, [pc, #352]	; (8017854 <udp_sendto_if_src+0x1b4>)
 80176f2:	f005 fcf3 	bl	801d0dc <iprintf>
 80176f6:	f06f 030f 	mvn.w	r3, #15
 80176fa:	e0a2      	b.n	8017842 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80176fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d109      	bne.n	8017716 <udp_sendto_if_src+0x76>
 8017702:	4b52      	ldr	r3, [pc, #328]	; (801784c <udp_sendto_if_src+0x1ac>)
 8017704:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017708:	4955      	ldr	r1, [pc, #340]	; (8017860 <udp_sendto_if_src+0x1c0>)
 801770a:	4852      	ldr	r0, [pc, #328]	; (8017854 <udp_sendto_if_src+0x1b4>)
 801770c:	f005 fce6 	bl	801d0dc <iprintf>
 8017710:	f06f 030f 	mvn.w	r3, #15
 8017714:	e095      	b.n	8017842 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017718:	2b00      	cmp	r3, #0
 801771a:	d109      	bne.n	8017730 <udp_sendto_if_src+0x90>
 801771c:	4b4b      	ldr	r3, [pc, #300]	; (801784c <udp_sendto_if_src+0x1ac>)
 801771e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017722:	4950      	ldr	r1, [pc, #320]	; (8017864 <udp_sendto_if_src+0x1c4>)
 8017724:	484b      	ldr	r0, [pc, #300]	; (8017854 <udp_sendto_if_src+0x1b4>)
 8017726:	f005 fcd9 	bl	801d0dc <iprintf>
 801772a:	f06f 030f 	mvn.w	r3, #15
 801772e:	e088      	b.n	8017842 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	8a5b      	ldrh	r3, [r3, #18]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d10f      	bne.n	8017758 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017738:	68f9      	ldr	r1, [r7, #12]
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	8a5b      	ldrh	r3, [r3, #18]
 801773e:	461a      	mov	r2, r3
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f000 f893 	bl	801786c <udp_bind>
 8017746:	4603      	mov	r3, r0
 8017748:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801774a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d002      	beq.n	8017758 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017756:	e074      	b.n	8017842 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	891b      	ldrh	r3, [r3, #8]
 801775c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017760:	4293      	cmp	r3, r2
 8017762:	d902      	bls.n	801776a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017764:	f04f 33ff 	mov.w	r3, #4294967295
 8017768:	e06b      	b.n	8017842 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801776a:	2108      	movs	r1, #8
 801776c:	68b8      	ldr	r0, [r7, #8]
 801776e:	f7f8 ff6d 	bl	801064c <pbuf_add_header>
 8017772:	4603      	mov	r3, r0
 8017774:	2b00      	cmp	r3, #0
 8017776:	d015      	beq.n	80177a4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017778:	f44f 7220 	mov.w	r2, #640	; 0x280
 801777c:	2108      	movs	r1, #8
 801777e:	2022      	movs	r0, #34	; 0x22
 8017780:	f7f8 fd16 	bl	80101b0 <pbuf_alloc>
 8017784:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017786:	69fb      	ldr	r3, [r7, #28]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d102      	bne.n	8017792 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801778c:	f04f 33ff 	mov.w	r3, #4294967295
 8017790:	e057      	b.n	8017842 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	891b      	ldrh	r3, [r3, #8]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d006      	beq.n	80177a8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801779a:	68b9      	ldr	r1, [r7, #8]
 801779c:	69f8      	ldr	r0, [r7, #28]
 801779e:	f7f9 f903 	bl	80109a8 <pbuf_chain>
 80177a2:	e001      	b.n	80177a8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80177a8:	69fb      	ldr	r3, [r7, #28]
 80177aa:	895b      	ldrh	r3, [r3, #10]
 80177ac:	2b07      	cmp	r3, #7
 80177ae:	d806      	bhi.n	80177be <udp_sendto_if_src+0x11e>
 80177b0:	4b26      	ldr	r3, [pc, #152]	; (801784c <udp_sendto_if_src+0x1ac>)
 80177b2:	f240 320d 	movw	r2, #781	; 0x30d
 80177b6:	492c      	ldr	r1, [pc, #176]	; (8017868 <udp_sendto_if_src+0x1c8>)
 80177b8:	4826      	ldr	r0, [pc, #152]	; (8017854 <udp_sendto_if_src+0x1b4>)
 80177ba:	f005 fc8f 	bl	801d0dc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80177be:	69fb      	ldr	r3, [r7, #28]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	8a5b      	ldrh	r3, [r3, #18]
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7f7 f97e 	bl	800eaca <lwip_htons>
 80177ce:	4603      	mov	r3, r0
 80177d0:	461a      	mov	r2, r3
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80177d6:	887b      	ldrh	r3, [r7, #2]
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f7 f976 	bl	800eaca <lwip_htons>
 80177de:	4603      	mov	r3, r0
 80177e0:	461a      	mov	r2, r3
 80177e2:	697b      	ldr	r3, [r7, #20]
 80177e4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80177e6:	697b      	ldr	r3, [r7, #20]
 80177e8:	2200      	movs	r2, #0
 80177ea:	719a      	strb	r2, [r3, #6]
 80177ec:	2200      	movs	r2, #0
 80177ee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	891b      	ldrh	r3, [r3, #8]
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7f7 f968 	bl	800eaca <lwip_htons>
 80177fa:	4603      	mov	r3, r0
 80177fc:	461a      	mov	r2, r3
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017802:	2311      	movs	r3, #17
 8017804:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	7adb      	ldrb	r3, [r3, #11]
 801780a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	7a9b      	ldrb	r3, [r3, #10]
 8017810:	7cb9      	ldrb	r1, [r7, #18]
 8017812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017814:	9202      	str	r2, [sp, #8]
 8017816:	7cfa      	ldrb	r2, [r7, #19]
 8017818:	9201      	str	r2, [sp, #4]
 801781a:	9300      	str	r3, [sp, #0]
 801781c:	460b      	mov	r3, r1
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017822:	69f8      	ldr	r0, [r7, #28]
 8017824:	f003 fbc2 	bl	801afac <ip4_output_if_src>
 8017828:	4603      	mov	r3, r0
 801782a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801782c:	69fa      	ldr	r2, [r7, #28]
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	429a      	cmp	r2, r3
 8017832:	d004      	beq.n	801783e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017834:	69f8      	ldr	r0, [r7, #28]
 8017836:	f7f8 ff9f 	bl	8010778 <pbuf_free>
    q = NULL;
 801783a:	2300      	movs	r3, #0
 801783c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801783e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017842:	4618      	mov	r0, r3
 8017844:	3720      	adds	r7, #32
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	0801ffe4 	.word	0x0801ffe4
 8017850:	080201d0 	.word	0x080201d0
 8017854:	08020038 	.word	0x08020038
 8017858:	080201f0 	.word	0x080201f0
 801785c:	08020210 	.word	0x08020210
 8017860:	08020234 	.word	0x08020234
 8017864:	08020258 	.word	0x08020258
 8017868:	0802027c 	.word	0x0802027c

0801786c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b086      	sub	sp, #24
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	4613      	mov	r3, r2
 8017878:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d101      	bne.n	8017884 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017880:	4b39      	ldr	r3, [pc, #228]	; (8017968 <udp_bind+0xfc>)
 8017882:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d109      	bne.n	801789e <udp_bind+0x32>
 801788a:	4b38      	ldr	r3, [pc, #224]	; (801796c <udp_bind+0x100>)
 801788c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017890:	4937      	ldr	r1, [pc, #220]	; (8017970 <udp_bind+0x104>)
 8017892:	4838      	ldr	r0, [pc, #224]	; (8017974 <udp_bind+0x108>)
 8017894:	f005 fc22 	bl	801d0dc <iprintf>
 8017898:	f06f 030f 	mvn.w	r3, #15
 801789c:	e060      	b.n	8017960 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801789e:	2300      	movs	r3, #0
 80178a0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80178a2:	4b35      	ldr	r3, [pc, #212]	; (8017978 <udp_bind+0x10c>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	617b      	str	r3, [r7, #20]
 80178a8:	e009      	b.n	80178be <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d102      	bne.n	80178b8 <udp_bind+0x4c>
      rebind = 1;
 80178b2:	2301      	movs	r3, #1
 80178b4:	74fb      	strb	r3, [r7, #19]
      break;
 80178b6:	e005      	b.n	80178c4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	617b      	str	r3, [r7, #20]
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d1f2      	bne.n	80178aa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80178c4:	88fb      	ldrh	r3, [r7, #6]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d109      	bne.n	80178de <udp_bind+0x72>
    port = udp_new_port();
 80178ca:	f7ff fc69 	bl	80171a0 <udp_new_port>
 80178ce:	4603      	mov	r3, r0
 80178d0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80178d2:	88fb      	ldrh	r3, [r7, #6]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d12c      	bne.n	8017932 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80178d8:	f06f 0307 	mvn.w	r3, #7
 80178dc:	e040      	b.n	8017960 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80178de:	4b26      	ldr	r3, [pc, #152]	; (8017978 <udp_bind+0x10c>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	617b      	str	r3, [r7, #20]
 80178e4:	e022      	b.n	801792c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80178e6:	68fa      	ldr	r2, [r7, #12]
 80178e8:	697b      	ldr	r3, [r7, #20]
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d01b      	beq.n	8017926 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80178ee:	697b      	ldr	r3, [r7, #20]
 80178f0:	8a5b      	ldrh	r3, [r3, #18]
 80178f2:	88fa      	ldrh	r2, [r7, #6]
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d116      	bne.n	8017926 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	681a      	ldr	r2, [r3, #0]
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017900:	429a      	cmp	r2, r3
 8017902:	d00d      	beq.n	8017920 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d00a      	beq.n	8017920 <udp_bind+0xb4>
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d006      	beq.n	8017920 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017912:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017914:	2b00      	cmp	r3, #0
 8017916:	d003      	beq.n	8017920 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d102      	bne.n	8017926 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017920:	f06f 0307 	mvn.w	r3, #7
 8017924:	e01c      	b.n	8017960 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	68db      	ldr	r3, [r3, #12]
 801792a:	617b      	str	r3, [r7, #20]
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d1d9      	bne.n	80178e6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017932:	68bb      	ldr	r3, [r7, #8]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d002      	beq.n	801793e <udp_bind+0xd2>
 8017938:	68bb      	ldr	r3, [r7, #8]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	e000      	b.n	8017940 <udp_bind+0xd4>
 801793e:	2300      	movs	r3, #0
 8017940:	68fa      	ldr	r2, [r7, #12]
 8017942:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	88fa      	ldrh	r2, [r7, #6]
 8017948:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801794a:	7cfb      	ldrb	r3, [r7, #19]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d106      	bne.n	801795e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017950:	4b09      	ldr	r3, [pc, #36]	; (8017978 <udp_bind+0x10c>)
 8017952:	681a      	ldr	r2, [r3, #0]
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017958:	4a07      	ldr	r2, [pc, #28]	; (8017978 <udp_bind+0x10c>)
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801795e:	2300      	movs	r3, #0
}
 8017960:	4618      	mov	r0, r3
 8017962:	3718      	adds	r7, #24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	08020f5c 	.word	0x08020f5c
 801796c:	0801ffe4 	.word	0x0801ffe4
 8017970:	080202ac 	.word	0x080202ac
 8017974:	08020038 	.word	0x08020038
 8017978:	200086c8 	.word	0x200086c8

0801797c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b086      	sub	sp, #24
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	4613      	mov	r3, r2
 8017988:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d109      	bne.n	80179a4 <udp_connect+0x28>
 8017990:	4b2c      	ldr	r3, [pc, #176]	; (8017a44 <udp_connect+0xc8>)
 8017992:	f240 4235 	movw	r2, #1077	; 0x435
 8017996:	492c      	ldr	r1, [pc, #176]	; (8017a48 <udp_connect+0xcc>)
 8017998:	482c      	ldr	r0, [pc, #176]	; (8017a4c <udp_connect+0xd0>)
 801799a:	f005 fb9f 	bl	801d0dc <iprintf>
 801799e:	f06f 030f 	mvn.w	r3, #15
 80179a2:	e04b      	b.n	8017a3c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d109      	bne.n	80179be <udp_connect+0x42>
 80179aa:	4b26      	ldr	r3, [pc, #152]	; (8017a44 <udp_connect+0xc8>)
 80179ac:	f240 4236 	movw	r2, #1078	; 0x436
 80179b0:	4927      	ldr	r1, [pc, #156]	; (8017a50 <udp_connect+0xd4>)
 80179b2:	4826      	ldr	r0, [pc, #152]	; (8017a4c <udp_connect+0xd0>)
 80179b4:	f005 fb92 	bl	801d0dc <iprintf>
 80179b8:	f06f 030f 	mvn.w	r3, #15
 80179bc:	e03e      	b.n	8017a3c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	8a5b      	ldrh	r3, [r3, #18]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d10f      	bne.n	80179e6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80179c6:	68f9      	ldr	r1, [r7, #12]
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	8a5b      	ldrh	r3, [r3, #18]
 80179cc:	461a      	mov	r2, r3
 80179ce:	68f8      	ldr	r0, [r7, #12]
 80179d0:	f7ff ff4c 	bl	801786c <udp_bind>
 80179d4:	4603      	mov	r3, r0
 80179d6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80179d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d002      	beq.n	80179e6 <udp_connect+0x6a>
      return err;
 80179e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80179e4:	e02a      	b.n	8017a3c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d002      	beq.n	80179f2 <udp_connect+0x76>
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	e000      	b.n	80179f4 <udp_connect+0x78>
 80179f2:	2300      	movs	r3, #0
 80179f4:	68fa      	ldr	r2, [r7, #12]
 80179f6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	88fa      	ldrh	r2, [r7, #6]
 80179fc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	7c1b      	ldrb	r3, [r3, #16]
 8017a02:	f043 0304 	orr.w	r3, r3, #4
 8017a06:	b2da      	uxtb	r2, r3
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017a0c:	4b11      	ldr	r3, [pc, #68]	; (8017a54 <udp_connect+0xd8>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	617b      	str	r3, [r7, #20]
 8017a12:	e008      	b.n	8017a26 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017a14:	68fa      	ldr	r2, [r7, #12]
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d101      	bne.n	8017a20 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	e00d      	b.n	8017a3c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017a20:	697b      	ldr	r3, [r7, #20]
 8017a22:	68db      	ldr	r3, [r3, #12]
 8017a24:	617b      	str	r3, [r7, #20]
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d1f3      	bne.n	8017a14 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017a2c:	4b09      	ldr	r3, [pc, #36]	; (8017a54 <udp_connect+0xd8>)
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017a34:	4a07      	ldr	r2, [pc, #28]	; (8017a54 <udp_connect+0xd8>)
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017a3a:	2300      	movs	r3, #0
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3718      	adds	r7, #24
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	0801ffe4 	.word	0x0801ffe4
 8017a48:	080202c4 	.word	0x080202c4
 8017a4c:	08020038 	.word	0x08020038
 8017a50:	080202e0 	.word	0x080202e0
 8017a54:	200086c8 	.word	0x200086c8

08017a58 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d107      	bne.n	8017a7a <udp_recv+0x22>
 8017a6a:	4b08      	ldr	r3, [pc, #32]	; (8017a8c <udp_recv+0x34>)
 8017a6c:	f240 428a 	movw	r2, #1162	; 0x48a
 8017a70:	4907      	ldr	r1, [pc, #28]	; (8017a90 <udp_recv+0x38>)
 8017a72:	4808      	ldr	r0, [pc, #32]	; (8017a94 <udp_recv+0x3c>)
 8017a74:	f005 fb32 	bl	801d0dc <iprintf>
 8017a78:	e005      	b.n	8017a86 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	68ba      	ldr	r2, [r7, #8]
 8017a7e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	61da      	str	r2, [r3, #28]
}
 8017a86:	3710      	adds	r7, #16
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	0801ffe4 	.word	0x0801ffe4
 8017a90:	08020318 	.word	0x08020318
 8017a94:	08020038 	.word	0x08020038

08017a98 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d107      	bne.n	8017ab6 <udp_remove+0x1e>
 8017aa6:	4b19      	ldr	r3, [pc, #100]	; (8017b0c <udp_remove+0x74>)
 8017aa8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017aac:	4918      	ldr	r1, [pc, #96]	; (8017b10 <udp_remove+0x78>)
 8017aae:	4819      	ldr	r0, [pc, #100]	; (8017b14 <udp_remove+0x7c>)
 8017ab0:	f005 fb14 	bl	801d0dc <iprintf>
 8017ab4:	e026      	b.n	8017b04 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017ab6:	4b18      	ldr	r3, [pc, #96]	; (8017b18 <udp_remove+0x80>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d105      	bne.n	8017acc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017ac0:	4b15      	ldr	r3, [pc, #84]	; (8017b18 <udp_remove+0x80>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	4a14      	ldr	r2, [pc, #80]	; (8017b18 <udp_remove+0x80>)
 8017ac8:	6013      	str	r3, [r2, #0]
 8017aca:	e017      	b.n	8017afc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017acc:	4b12      	ldr	r3, [pc, #72]	; (8017b18 <udp_remove+0x80>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	60fb      	str	r3, [r7, #12]
 8017ad2:	e010      	b.n	8017af6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	68db      	ldr	r3, [r3, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d009      	beq.n	8017af0 <udp_remove+0x58>
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	687a      	ldr	r2, [r7, #4]
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d104      	bne.n	8017af0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	68da      	ldr	r2, [r3, #12]
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	60da      	str	r2, [r3, #12]
        break;
 8017aee:	e005      	b.n	8017afc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	60fb      	str	r3, [r7, #12]
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d1eb      	bne.n	8017ad4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017afc:	6879      	ldr	r1, [r7, #4]
 8017afe:	2000      	movs	r0, #0
 8017b00:	f7f7 ffb8 	bl	800fa74 <memp_free>
}
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	0801ffe4 	.word	0x0801ffe4
 8017b10:	08020330 	.word	0x08020330
 8017b14:	08020038 	.word	0x08020038
 8017b18:	200086c8 	.word	0x200086c8

08017b1c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017b22:	2000      	movs	r0, #0
 8017b24:	f7f7 ff36 	bl	800f994 <memp_malloc>
 8017b28:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d007      	beq.n	8017b40 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017b30:	2220      	movs	r2, #32
 8017b32:	2100      	movs	r1, #0
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f005 fb36 	bl	801d1a6 <memset>
    pcb->ttl = UDP_TTL;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	22ff      	movs	r2, #255	; 0xff
 8017b3e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017b40:	687b      	ldr	r3, [r7, #4]
}
 8017b42:	4618      	mov	r0, r3
 8017b44:	3708      	adds	r7, #8
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
	...

08017b4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b085      	sub	sp, #20
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d01e      	beq.n	8017b9a <udp_netif_ip_addr_changed+0x4e>
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d01a      	beq.n	8017b9a <udp_netif_ip_addr_changed+0x4e>
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d017      	beq.n	8017b9a <udp_netif_ip_addr_changed+0x4e>
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d013      	beq.n	8017b9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017b72:	4b0d      	ldr	r3, [pc, #52]	; (8017ba8 <udp_netif_ip_addr_changed+0x5c>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	60fb      	str	r3, [r7, #12]
 8017b78:	e00c      	b.n	8017b94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d103      	bne.n	8017b8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	68db      	ldr	r3, [r3, #12]
 8017b92:	60fb      	str	r3, [r7, #12]
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1ef      	bne.n	8017b7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017b9a:	bf00      	nop
 8017b9c:	3714      	adds	r7, #20
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	200086c8 	.word	0x200086c8

08017bac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8017bb0:	4b20      	ldr	r3, [pc, #128]	; (8017c34 <dhcp_inc_pcb_refcount+0x88>)
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d133      	bne.n	8017c20 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8017bb8:	4b1f      	ldr	r3, [pc, #124]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d005      	beq.n	8017bcc <dhcp_inc_pcb_refcount+0x20>
 8017bc0:	4b1e      	ldr	r3, [pc, #120]	; (8017c3c <dhcp_inc_pcb_refcount+0x90>)
 8017bc2:	22e5      	movs	r2, #229	; 0xe5
 8017bc4:	491e      	ldr	r1, [pc, #120]	; (8017c40 <dhcp_inc_pcb_refcount+0x94>)
 8017bc6:	481f      	ldr	r0, [pc, #124]	; (8017c44 <dhcp_inc_pcb_refcount+0x98>)
 8017bc8:	f005 fa88 	bl	801d0dc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8017bcc:	f7ff ffa6 	bl	8017b1c <udp_new>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	4a19      	ldr	r2, [pc, #100]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017bd4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8017bd6:	4b18      	ldr	r3, [pc, #96]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d102      	bne.n	8017be4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8017bde:	f04f 33ff 	mov.w	r3, #4294967295
 8017be2:	e024      	b.n	8017c2e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8017be4:	4b14      	ldr	r3, [pc, #80]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	7a5a      	ldrb	r2, [r3, #9]
 8017bea:	4b13      	ldr	r3, [pc, #76]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f042 0220 	orr.w	r2, r2, #32
 8017bf2:	b2d2      	uxtb	r2, r2
 8017bf4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8017bf6:	4b10      	ldr	r3, [pc, #64]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2244      	movs	r2, #68	; 0x44
 8017bfc:	4912      	ldr	r1, [pc, #72]	; (8017c48 <dhcp_inc_pcb_refcount+0x9c>)
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7ff fe34 	bl	801786c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8017c04:	4b0c      	ldr	r3, [pc, #48]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	2243      	movs	r2, #67	; 0x43
 8017c0a:	490f      	ldr	r1, [pc, #60]	; (8017c48 <dhcp_inc_pcb_refcount+0x9c>)
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7ff feb5 	bl	801797c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8017c12:	4b09      	ldr	r3, [pc, #36]	; (8017c38 <dhcp_inc_pcb_refcount+0x8c>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2200      	movs	r2, #0
 8017c18:	490c      	ldr	r1, [pc, #48]	; (8017c4c <dhcp_inc_pcb_refcount+0xa0>)
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7ff ff1c 	bl	8017a58 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8017c20:	4b04      	ldr	r3, [pc, #16]	; (8017c34 <dhcp_inc_pcb_refcount+0x88>)
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	3301      	adds	r3, #1
 8017c26:	b2da      	uxtb	r2, r3
 8017c28:	4b02      	ldr	r3, [pc, #8]	; (8017c34 <dhcp_inc_pcb_refcount+0x88>)
 8017c2a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8017c2c:	2300      	movs	r3, #0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	20008704 	.word	0x20008704
 8017c38:	20008700 	.word	0x20008700
 8017c3c:	08020348 	.word	0x08020348
 8017c40:	08020380 	.word	0x08020380
 8017c44:	080203a8 	.word	0x080203a8
 8017c48:	08020f5c 	.word	0x08020f5c
 8017c4c:	080195f5 	.word	0x080195f5

08017c50 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8017c54:	4b0e      	ldr	r3, [pc, #56]	; (8017c90 <dhcp_dec_pcb_refcount+0x40>)
 8017c56:	781b      	ldrb	r3, [r3, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d105      	bne.n	8017c68 <dhcp_dec_pcb_refcount+0x18>
 8017c5c:	4b0d      	ldr	r3, [pc, #52]	; (8017c94 <dhcp_dec_pcb_refcount+0x44>)
 8017c5e:	22ff      	movs	r2, #255	; 0xff
 8017c60:	490d      	ldr	r1, [pc, #52]	; (8017c98 <dhcp_dec_pcb_refcount+0x48>)
 8017c62:	480e      	ldr	r0, [pc, #56]	; (8017c9c <dhcp_dec_pcb_refcount+0x4c>)
 8017c64:	f005 fa3a 	bl	801d0dc <iprintf>
  dhcp_pcb_refcount--;
 8017c68:	4b09      	ldr	r3, [pc, #36]	; (8017c90 <dhcp_dec_pcb_refcount+0x40>)
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	3b01      	subs	r3, #1
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	4b07      	ldr	r3, [pc, #28]	; (8017c90 <dhcp_dec_pcb_refcount+0x40>)
 8017c72:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8017c74:	4b06      	ldr	r3, [pc, #24]	; (8017c90 <dhcp_dec_pcb_refcount+0x40>)
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d107      	bne.n	8017c8c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8017c7c:	4b08      	ldr	r3, [pc, #32]	; (8017ca0 <dhcp_dec_pcb_refcount+0x50>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7ff ff09 	bl	8017a98 <udp_remove>
    dhcp_pcb = NULL;
 8017c86:	4b06      	ldr	r3, [pc, #24]	; (8017ca0 <dhcp_dec_pcb_refcount+0x50>)
 8017c88:	2200      	movs	r2, #0
 8017c8a:	601a      	str	r2, [r3, #0]
  }
}
 8017c8c:	bf00      	nop
 8017c8e:	bd80      	pop	{r7, pc}
 8017c90:	20008704 	.word	0x20008704
 8017c94:	08020348 	.word	0x08020348
 8017c98:	080203d0 	.word	0x080203d0
 8017c9c:	080203a8 	.word	0x080203a8
 8017ca0:	20008700 	.word	0x20008700

08017ca4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b084      	sub	sp, #16
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cb0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017cb2:	210c      	movs	r1, #12
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f001 f8af 	bl	8018e18 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017cba:	4b06      	ldr	r3, [pc, #24]	; (8017cd4 <dhcp_handle_nak+0x30>)
 8017cbc:	4a05      	ldr	r2, [pc, #20]	; (8017cd4 <dhcp_handle_nak+0x30>)
 8017cbe:	4905      	ldr	r1, [pc, #20]	; (8017cd4 <dhcp_handle_nak+0x30>)
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7f8 f879 	bl	800fdb8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f000 fca2 	bl	8018610 <dhcp_discover>
}
 8017ccc:	bf00      	nop
 8017cce:	3710      	adds	r7, #16
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}
 8017cd4:	08020f5c 	.word	0x08020f5c

08017cd8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8017ce6:	2108      	movs	r1, #8
 8017ce8:	68f8      	ldr	r0, [r7, #12]
 8017cea:	f001 f895 	bl	8018e18 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	331c      	adds	r3, #28
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f002 fbc6 	bl	801a488 <etharp_query>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	799b      	ldrb	r3, [r3, #6]
 8017d04:	2bff      	cmp	r3, #255	; 0xff
 8017d06:	d005      	beq.n	8017d14 <dhcp_check+0x3c>
    dhcp->tries++;
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	799b      	ldrb	r3, [r3, #6]
 8017d0c:	3301      	adds	r3, #1
 8017d0e:	b2da      	uxtb	r2, r3
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8017d14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017d18:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017d1a:	893b      	ldrh	r3, [r7, #8]
 8017d1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017d20:	4a06      	ldr	r2, [pc, #24]	; (8017d3c <dhcp_check+0x64>)
 8017d22:	fb82 1203 	smull	r1, r2, r2, r3
 8017d26:	1152      	asrs	r2, r2, #5
 8017d28:	17db      	asrs	r3, r3, #31
 8017d2a:	1ad3      	subs	r3, r2, r3
 8017d2c:	b29a      	uxth	r2, r3
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8017d32:	bf00      	nop
 8017d34:	3710      	adds	r7, #16
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	10624dd3 	.word	0x10624dd3

08017d40 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017d50:	4b0c      	ldr	r3, [pc, #48]	; (8017d84 <dhcp_handle_offer+0x44>)
 8017d52:	789b      	ldrb	r3, [r3, #2]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d011      	beq.n	8017d7c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8017d5e:	4b0a      	ldr	r3, [pc, #40]	; (8017d88 <dhcp_handle_offer+0x48>)
 8017d60:	689b      	ldr	r3, [r3, #8]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7f6 fec6 	bl	800eaf4 <lwip_htonl>
 8017d68:	4602      	mov	r2, r0
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	691a      	ldr	r2, [r3, #16]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f000 f808 	bl	8017d8c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8017d7c:	bf00      	nop
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	200086f4 	.word	0x200086f4
 8017d88:	200086cc 	.word	0x200086cc

08017d8c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8017d8c:	b5b0      	push	{r4, r5, r7, lr}
 8017d8e:	b08a      	sub	sp, #40	; 0x28
 8017d90:	af02      	add	r7, sp, #8
 8017d92:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d109      	bne.n	8017dae <dhcp_select+0x22>
 8017d9a:	4b71      	ldr	r3, [pc, #452]	; (8017f60 <dhcp_select+0x1d4>)
 8017d9c:	f240 1277 	movw	r2, #375	; 0x177
 8017da0:	4970      	ldr	r1, [pc, #448]	; (8017f64 <dhcp_select+0x1d8>)
 8017da2:	4871      	ldr	r0, [pc, #452]	; (8017f68 <dhcp_select+0x1dc>)
 8017da4:	f005 f99a 	bl	801d0dc <iprintf>
 8017da8:	f06f 030f 	mvn.w	r3, #15
 8017dac:	e0d3      	b.n	8017f56 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d109      	bne.n	8017dce <dhcp_select+0x42>
 8017dba:	4b69      	ldr	r3, [pc, #420]	; (8017f60 <dhcp_select+0x1d4>)
 8017dbc:	f240 1279 	movw	r2, #377	; 0x179
 8017dc0:	496a      	ldr	r1, [pc, #424]	; (8017f6c <dhcp_select+0x1e0>)
 8017dc2:	4869      	ldr	r0, [pc, #420]	; (8017f68 <dhcp_select+0x1dc>)
 8017dc4:	f005 f98a 	bl	801d0dc <iprintf>
 8017dc8:	f06f 0305 	mvn.w	r3, #5
 8017dcc:	e0c3      	b.n	8017f56 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8017dce:	2101      	movs	r1, #1
 8017dd0:	69b8      	ldr	r0, [r7, #24]
 8017dd2:	f001 f821 	bl	8018e18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017dd6:	f107 030c 	add.w	r3, r7, #12
 8017dda:	2203      	movs	r2, #3
 8017ddc:	69b9      	ldr	r1, [r7, #24]
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f001 fcd6 	bl	8019790 <dhcp_create_msg>
 8017de4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017de6:	697b      	ldr	r3, [r7, #20]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f000 8085 	beq.w	8017ef8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017dee:	697b      	ldr	r3, [r7, #20]
 8017df0:	685b      	ldr	r3, [r3, #4]
 8017df2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017df4:	89b8      	ldrh	r0, [r7, #12]
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017dfc:	2302      	movs	r3, #2
 8017dfe:	2239      	movs	r2, #57	; 0x39
 8017e00:	f001 f824 	bl	8018e4c <dhcp_option>
 8017e04:	4603      	mov	r3, r0
 8017e06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017e08:	89b8      	ldrh	r0, [r7, #12]
 8017e0a:	693b      	ldr	r3, [r7, #16]
 8017e0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e14:	461a      	mov	r2, r3
 8017e16:	f001 f873 	bl	8018f00 <dhcp_option_short>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017e1e:	89b8      	ldrh	r0, [r7, #12]
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e26:	2304      	movs	r3, #4
 8017e28:	2232      	movs	r2, #50	; 0x32
 8017e2a:	f001 f80f 	bl	8018e4c <dhcp_option>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017e32:	89bc      	ldrh	r4, [r7, #12]
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	69db      	ldr	r3, [r3, #28]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7f6 fe58 	bl	800eaf4 <lwip_htonl>
 8017e44:	4603      	mov	r3, r0
 8017e46:	461a      	mov	r2, r3
 8017e48:	4629      	mov	r1, r5
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	f001 f88a 	bl	8018f64 <dhcp_option_long>
 8017e50:	4603      	mov	r3, r0
 8017e52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017e54:	89b8      	ldrh	r0, [r7, #12]
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e5c:	2304      	movs	r3, #4
 8017e5e:	2236      	movs	r2, #54	; 0x36
 8017e60:	f000 fff4 	bl	8018e4c <dhcp_option>
 8017e64:	4603      	mov	r3, r0
 8017e66:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8017e68:	89bc      	ldrh	r4, [r7, #12]
 8017e6a:	693b      	ldr	r3, [r7, #16]
 8017e6c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7f6 fe3d 	bl	800eaf4 <lwip_htonl>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	461a      	mov	r2, r3
 8017e7e:	4629      	mov	r1, r5
 8017e80:	4620      	mov	r0, r4
 8017e82:	f001 f86f 	bl	8018f64 <dhcp_option_long>
 8017e86:	4603      	mov	r3, r0
 8017e88:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017e8a:	89b8      	ldrh	r0, [r7, #12]
 8017e8c:	693b      	ldr	r3, [r7, #16]
 8017e8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e92:	2304      	movs	r3, #4
 8017e94:	2237      	movs	r2, #55	; 0x37
 8017e96:	f000 ffd9 	bl	8018e4c <dhcp_option>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	77bb      	strb	r3, [r7, #30]
 8017ea2:	e00e      	b.n	8017ec2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017ea4:	89b8      	ldrh	r0, [r7, #12]
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017eac:	7fbb      	ldrb	r3, [r7, #30]
 8017eae:	4a30      	ldr	r2, [pc, #192]	; (8017f70 <dhcp_select+0x1e4>)
 8017eb0:	5cd3      	ldrb	r3, [r2, r3]
 8017eb2:	461a      	mov	r2, r3
 8017eb4:	f000 fffe 	bl	8018eb4 <dhcp_option_byte>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017ebc:	7fbb      	ldrb	r3, [r7, #30]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	77bb      	strb	r3, [r7, #30]
 8017ec2:	7fbb      	ldrb	r3, [r7, #30]
 8017ec4:	2b03      	cmp	r3, #3
 8017ec6:	d9ed      	bls.n	8017ea4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017ec8:	89b8      	ldrh	r0, [r7, #12]
 8017eca:	693b      	ldr	r3, [r7, #16]
 8017ecc:	33f0      	adds	r3, #240	; 0xf0
 8017ece:	697a      	ldr	r2, [r7, #20]
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f001 fd33 	bl	801993c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017ed6:	4b27      	ldr	r3, [pc, #156]	; (8017f74 <dhcp_select+0x1e8>)
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	4b27      	ldr	r3, [pc, #156]	; (8017f78 <dhcp_select+0x1ec>)
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	9300      	str	r3, [sp, #0]
 8017ee2:	2343      	movs	r3, #67	; 0x43
 8017ee4:	4a25      	ldr	r2, [pc, #148]	; (8017f7c <dhcp_select+0x1f0>)
 8017ee6:	6979      	ldr	r1, [r7, #20]
 8017ee8:	f7ff fbda 	bl	80176a0 <udp_sendto_if_src>
 8017eec:	4603      	mov	r3, r0
 8017eee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017ef0:	6978      	ldr	r0, [r7, #20]
 8017ef2:	f7f8 fc41 	bl	8010778 <pbuf_free>
 8017ef6:	e001      	b.n	8017efc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017ef8:	23ff      	movs	r3, #255	; 0xff
 8017efa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017efc:	69bb      	ldr	r3, [r7, #24]
 8017efe:	799b      	ldrb	r3, [r3, #6]
 8017f00:	2bff      	cmp	r3, #255	; 0xff
 8017f02:	d005      	beq.n	8017f10 <dhcp_select+0x184>
    dhcp->tries++;
 8017f04:	69bb      	ldr	r3, [r7, #24]
 8017f06:	799b      	ldrb	r3, [r3, #6]
 8017f08:	3301      	adds	r3, #1
 8017f0a:	b2da      	uxtb	r2, r3
 8017f0c:	69bb      	ldr	r3, [r7, #24]
 8017f0e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017f10:	69bb      	ldr	r3, [r7, #24]
 8017f12:	799b      	ldrb	r3, [r3, #6]
 8017f14:	2b05      	cmp	r3, #5
 8017f16:	d80d      	bhi.n	8017f34 <dhcp_select+0x1a8>
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	799b      	ldrb	r3, [r3, #6]
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	2301      	movs	r3, #1
 8017f20:	4093      	lsls	r3, r2
 8017f22:	b29b      	uxth	r3, r3
 8017f24:	461a      	mov	r2, r3
 8017f26:	0152      	lsls	r2, r2, #5
 8017f28:	1ad2      	subs	r2, r2, r3
 8017f2a:	0092      	lsls	r2, r2, #2
 8017f2c:	4413      	add	r3, r2
 8017f2e:	00db      	lsls	r3, r3, #3
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	e001      	b.n	8017f38 <dhcp_select+0x1ac>
 8017f34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017f38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017f3a:	89fb      	ldrh	r3, [r7, #14]
 8017f3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017f40:	4a0f      	ldr	r2, [pc, #60]	; (8017f80 <dhcp_select+0x1f4>)
 8017f42:	fb82 1203 	smull	r1, r2, r2, r3
 8017f46:	1152      	asrs	r2, r2, #5
 8017f48:	17db      	asrs	r3, r3, #31
 8017f4a:	1ad3      	subs	r3, r2, r3
 8017f4c:	b29a      	uxth	r2, r3
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017f52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3720      	adds	r7, #32
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	08020348 	.word	0x08020348
 8017f64:	080203f4 	.word	0x080203f4
 8017f68:	080203a8 	.word	0x080203a8
 8017f6c:	08020410 	.word	0x08020410
 8017f70:	20000138 	.word	0x20000138
 8017f74:	20008700 	.word	0x20008700
 8017f78:	08020f5c 	.word	0x08020f5c
 8017f7c:	08020f60 	.word	0x08020f60
 8017f80:	10624dd3 	.word	0x10624dd3

08017f84 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8017f8a:	4b27      	ldr	r3, [pc, #156]	; (8018028 <dhcp_coarse_tmr+0xa4>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	607b      	str	r3, [r7, #4]
 8017f90:	e042      	b.n	8018018 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f96:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d039      	beq.n	8018012 <dhcp_coarse_tmr+0x8e>
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	795b      	ldrb	r3, [r3, #5]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d035      	beq.n	8018012 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	8a9b      	ldrh	r3, [r3, #20]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d012      	beq.n	8017fd4 <dhcp_coarse_tmr+0x50>
 8017fae:	683b      	ldr	r3, [r7, #0]
 8017fb0:	8a5b      	ldrh	r3, [r3, #18]
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	b29a      	uxth	r2, r3
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	825a      	strh	r2, [r3, #18]
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	8a5a      	ldrh	r2, [r3, #18]
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	8a9b      	ldrh	r3, [r3, #20]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d106      	bne.n	8017fd4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f000 fe8c 	bl	8018ce4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8017fcc:	6878      	ldr	r0, [r7, #4]
 8017fce:	f000 f9c3 	bl	8018358 <dhcp_start>
 8017fd2:	e01e      	b.n	8018012 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8017fd4:	683b      	ldr	r3, [r7, #0]
 8017fd6:	8a1b      	ldrh	r3, [r3, #16]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d00b      	beq.n	8017ff4 <dhcp_coarse_tmr+0x70>
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	8a1b      	ldrh	r3, [r3, #16]
 8017fe0:	1e5a      	subs	r2, r3, #1
 8017fe2:	b291      	uxth	r1, r2
 8017fe4:	683a      	ldr	r2, [r7, #0]
 8017fe6:	8211      	strh	r1, [r2, #16]
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d103      	bne.n	8017ff4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f000 f8c6 	bl	801817e <dhcp_t2_timeout>
 8017ff2:	e00e      	b.n	8018012 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	89db      	ldrh	r3, [r3, #14]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00a      	beq.n	8018012 <dhcp_coarse_tmr+0x8e>
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	89db      	ldrh	r3, [r3, #14]
 8018000:	1e5a      	subs	r2, r3, #1
 8018002:	b291      	uxth	r1, r2
 8018004:	683a      	ldr	r2, [r7, #0]
 8018006:	81d1      	strh	r1, [r2, #14]
 8018008:	2b01      	cmp	r3, #1
 801800a:	d102      	bne.n	8018012 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801800c:	6878      	ldr	r0, [r7, #4]
 801800e:	f000 f888 	bl	8018122 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	607b      	str	r3, [r7, #4]
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d1b9      	bne.n	8017f92 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801801e:	bf00      	nop
 8018020:	bf00      	nop
 8018022:	3708      	adds	r7, #8
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}
 8018028:	20008660 	.word	0x20008660

0801802c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b082      	sub	sp, #8
 8018030:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8018032:	4b16      	ldr	r3, [pc, #88]	; (801808c <dhcp_fine_tmr+0x60>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	607b      	str	r3, [r7, #4]
 8018038:	e020      	b.n	801807c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801803e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d017      	beq.n	8018076 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	891b      	ldrh	r3, [r3, #8]
 801804a:	2b01      	cmp	r3, #1
 801804c:	d906      	bls.n	801805c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	891b      	ldrh	r3, [r3, #8]
 8018052:	3b01      	subs	r3, #1
 8018054:	b29a      	uxth	r2, r3
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	811a      	strh	r2, [r3, #8]
 801805a:	e00c      	b.n	8018076 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	891b      	ldrh	r3, [r3, #8]
 8018060:	2b01      	cmp	r3, #1
 8018062:	d108      	bne.n	8018076 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	891b      	ldrh	r3, [r3, #8]
 8018068:	3b01      	subs	r3, #1
 801806a:	b29a      	uxth	r2, r3
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f000 f80d 	bl	8018090 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	607b      	str	r3, [r7, #4]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d1db      	bne.n	801803a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8018082:	bf00      	nop
 8018084:	bf00      	nop
 8018086:	3708      	adds	r7, #8
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}
 801808c:	20008660 	.word	0x20008660

08018090 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801809c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	795b      	ldrb	r3, [r3, #5]
 80180a2:	2b0c      	cmp	r3, #12
 80180a4:	d003      	beq.n	80180ae <dhcp_timeout+0x1e>
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	795b      	ldrb	r3, [r3, #5]
 80180aa:	2b06      	cmp	r3, #6
 80180ac:	d103      	bne.n	80180b6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80180ae:	6878      	ldr	r0, [r7, #4]
 80180b0:	f000 faae 	bl	8018610 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80180b4:	e031      	b.n	801811a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	795b      	ldrb	r3, [r3, #5]
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d10e      	bne.n	80180dc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	799b      	ldrb	r3, [r3, #6]
 80180c2:	2b05      	cmp	r3, #5
 80180c4:	d803      	bhi.n	80180ce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f7ff fe60 	bl	8017d8c <dhcp_select>
}
 80180cc:	e025      	b.n	801811a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80180ce:	6878      	ldr	r0, [r7, #4]
 80180d0:	f000 fe08 	bl	8018ce4 <dhcp_release_and_stop>
      dhcp_start(netif);
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f000 f93f 	bl	8018358 <dhcp_start>
}
 80180da:	e01e      	b.n	801811a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	795b      	ldrb	r3, [r3, #5]
 80180e0:	2b08      	cmp	r3, #8
 80180e2:	d10b      	bne.n	80180fc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	799b      	ldrb	r3, [r3, #6]
 80180e8:	2b01      	cmp	r3, #1
 80180ea:	d803      	bhi.n	80180f4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	f7ff fdf3 	bl	8017cd8 <dhcp_check>
}
 80180f2:	e012      	b.n	801811a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f000 fb2d 	bl	8018754 <dhcp_bind>
}
 80180fa:	e00e      	b.n	801811a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	795b      	ldrb	r3, [r3, #5]
 8018100:	2b03      	cmp	r3, #3
 8018102:	d10a      	bne.n	801811a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	799b      	ldrb	r3, [r3, #6]
 8018108:	2b01      	cmp	r3, #1
 801810a:	d803      	bhi.n	8018114 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f000 fd33 	bl	8018b78 <dhcp_reboot>
}
 8018112:	e002      	b.n	801811a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f000 fa7b 	bl	8018610 <dhcp_discover>
}
 801811a:	bf00      	nop
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}

08018122 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8018122:	b580      	push	{r7, lr}
 8018124:	b084      	sub	sp, #16
 8018126:	af00      	add	r7, sp, #0
 8018128:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801812e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	795b      	ldrb	r3, [r3, #5]
 8018134:	2b01      	cmp	r3, #1
 8018136:	d007      	beq.n	8018148 <dhcp_t1_timeout+0x26>
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	795b      	ldrb	r3, [r3, #5]
 801813c:	2b0a      	cmp	r3, #10
 801813e:	d003      	beq.n	8018148 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018144:	2b05      	cmp	r3, #5
 8018146:	d116      	bne.n	8018176 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f000 fbdd 	bl	8018908 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	899b      	ldrh	r3, [r3, #12]
 8018152:	461a      	mov	r2, r3
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	8a5b      	ldrh	r3, [r3, #18]
 8018158:	1ad3      	subs	r3, r2, r3
 801815a:	2b01      	cmp	r3, #1
 801815c:	dd0b      	ble.n	8018176 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	899b      	ldrh	r3, [r3, #12]
 8018162:	461a      	mov	r2, r3
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	8a5b      	ldrh	r3, [r3, #18]
 8018168:	1ad3      	subs	r3, r2, r3
 801816a:	0fda      	lsrs	r2, r3, #31
 801816c:	4413      	add	r3, r2
 801816e:	105b      	asrs	r3, r3, #1
 8018170:	b29a      	uxth	r2, r3
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018176:	bf00      	nop
 8018178:	3710      	adds	r7, #16
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}

0801817e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b084      	sub	sp, #16
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801818a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	795b      	ldrb	r3, [r3, #5]
 8018190:	2b01      	cmp	r3, #1
 8018192:	d00b      	beq.n	80181ac <dhcp_t2_timeout+0x2e>
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	795b      	ldrb	r3, [r3, #5]
 8018198:	2b0a      	cmp	r3, #10
 801819a:	d007      	beq.n	80181ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80181a0:	2b05      	cmp	r3, #5
 80181a2:	d003      	beq.n	80181ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	795b      	ldrb	r3, [r3, #5]
 80181a8:	2b04      	cmp	r3, #4
 80181aa:	d116      	bne.n	80181da <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f000 fc47 	bl	8018a40 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	8a9b      	ldrh	r3, [r3, #20]
 80181b6:	461a      	mov	r2, r3
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	8a5b      	ldrh	r3, [r3, #18]
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	2b01      	cmp	r3, #1
 80181c0:	dd0b      	ble.n	80181da <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	8a9b      	ldrh	r3, [r3, #20]
 80181c6:	461a      	mov	r2, r3
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	8a5b      	ldrh	r3, [r3, #18]
 80181cc:	1ad3      	subs	r3, r2, r3
 80181ce:	0fda      	lsrs	r2, r3, #31
 80181d0:	4413      	add	r3, r2
 80181d2:	105b      	asrs	r3, r3, #1
 80181d4:	b29a      	uxth	r2, r3
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80181da:	bf00      	nop
 80181dc:	3710      	adds	r7, #16
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
	...

080181e4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b086      	sub	sp, #24
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
 80181ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181f2:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	2200      	movs	r2, #0
 80181f8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	2200      	movs	r2, #0
 80181fe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018200:	4b36      	ldr	r3, [pc, #216]	; (80182dc <dhcp_handle_ack+0xf8>)
 8018202:	78db      	ldrb	r3, [r3, #3]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d003      	beq.n	8018210 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018208:	4b35      	ldr	r3, [pc, #212]	; (80182e0 <dhcp_handle_ack+0xfc>)
 801820a:	68da      	ldr	r2, [r3, #12]
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018210:	4b32      	ldr	r3, [pc, #200]	; (80182dc <dhcp_handle_ack+0xf8>)
 8018212:	791b      	ldrb	r3, [r3, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d004      	beq.n	8018222 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018218:	4b31      	ldr	r3, [pc, #196]	; (80182e0 <dhcp_handle_ack+0xfc>)
 801821a:	691a      	ldr	r2, [r3, #16]
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	62da      	str	r2, [r3, #44]	; 0x2c
 8018220:	e004      	b.n	801822c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018226:	085a      	lsrs	r2, r3, #1
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801822c:	4b2b      	ldr	r3, [pc, #172]	; (80182dc <dhcp_handle_ack+0xf8>)
 801822e:	795b      	ldrb	r3, [r3, #5]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d004      	beq.n	801823e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018234:	4b2a      	ldr	r3, [pc, #168]	; (80182e0 <dhcp_handle_ack+0xfc>)
 8018236:	695a      	ldr	r2, [r3, #20]
 8018238:	693b      	ldr	r3, [r7, #16]
 801823a:	631a      	str	r2, [r3, #48]	; 0x30
 801823c:	e007      	b.n	801824e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801823e:	693b      	ldr	r3, [r7, #16]
 8018240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018242:	4613      	mov	r3, r2
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	1a9b      	subs	r3, r3, r2
 8018248:	08da      	lsrs	r2, r3, #3
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	691a      	ldr	r2, [r3, #16]
 8018252:	693b      	ldr	r3, [r7, #16]
 8018254:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018256:	4b21      	ldr	r3, [pc, #132]	; (80182dc <dhcp_handle_ack+0xf8>)
 8018258:	799b      	ldrb	r3, [r3, #6]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d00b      	beq.n	8018276 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801825e:	4b20      	ldr	r3, [pc, #128]	; (80182e0 <dhcp_handle_ack+0xfc>)
 8018260:	699b      	ldr	r3, [r3, #24]
 8018262:	4618      	mov	r0, r3
 8018264:	f7f6 fc46 	bl	800eaf4 <lwip_htonl>
 8018268:	4602      	mov	r2, r0
 801826a:	693b      	ldr	r3, [r7, #16]
 801826c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	2201      	movs	r2, #1
 8018272:	71da      	strb	r2, [r3, #7]
 8018274:	e002      	b.n	801827c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018276:	693b      	ldr	r3, [r7, #16]
 8018278:	2200      	movs	r2, #0
 801827a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801827c:	4b17      	ldr	r3, [pc, #92]	; (80182dc <dhcp_handle_ack+0xf8>)
 801827e:	79db      	ldrb	r3, [r3, #7]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d007      	beq.n	8018294 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018284:	4b16      	ldr	r3, [pc, #88]	; (80182e0 <dhcp_handle_ack+0xfc>)
 8018286:	69db      	ldr	r3, [r3, #28]
 8018288:	4618      	mov	r0, r3
 801828a:	f7f6 fc33 	bl	800eaf4 <lwip_htonl>
 801828e:	4602      	mov	r2, r0
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018294:	2300      	movs	r3, #0
 8018296:	75fb      	strb	r3, [r7, #23]
 8018298:	e013      	b.n	80182c2 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801829a:	7dfb      	ldrb	r3, [r7, #23]
 801829c:	3308      	adds	r3, #8
 801829e:	4a10      	ldr	r2, [pc, #64]	; (80182e0 <dhcp_handle_ack+0xfc>)
 80182a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7f6 fc25 	bl	800eaf4 <lwip_htonl>
 80182aa:	4603      	mov	r3, r0
 80182ac:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80182ae:	f107 020c 	add.w	r2, r7, #12
 80182b2:	7dfb      	ldrb	r3, [r7, #23]
 80182b4:	4611      	mov	r1, r2
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7f6 fc3c 	bl	800eb34 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80182bc:	7dfb      	ldrb	r3, [r7, #23]
 80182be:	3301      	adds	r3, #1
 80182c0:	75fb      	strb	r3, [r7, #23]
 80182c2:	7dfb      	ldrb	r3, [r7, #23]
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	d805      	bhi.n	80182d4 <dhcp_handle_ack+0xf0>
 80182c8:	7dfb      	ldrb	r3, [r7, #23]
 80182ca:	3308      	adds	r3, #8
 80182cc:	4a03      	ldr	r2, [pc, #12]	; (80182dc <dhcp_handle_ack+0xf8>)
 80182ce:	5cd3      	ldrb	r3, [r2, r3]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d1e2      	bne.n	801829a <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80182d4:	bf00      	nop
 80182d6:	3718      	adds	r7, #24
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	200086f4 	.word	0x200086f4
 80182e0:	200086cc 	.word	0x200086cc

080182e4 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b082      	sub	sp, #8
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d106      	bne.n	8018302 <dhcp_set_struct+0x1e>
 80182f4:	4b13      	ldr	r3, [pc, #76]	; (8018344 <dhcp_set_struct+0x60>)
 80182f6:	f240 22b5 	movw	r2, #693	; 0x2b5
 80182fa:	4913      	ldr	r1, [pc, #76]	; (8018348 <dhcp_set_struct+0x64>)
 80182fc:	4813      	ldr	r0, [pc, #76]	; (801834c <dhcp_set_struct+0x68>)
 80182fe:	f004 feed 	bl	801d0dc <iprintf>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d106      	bne.n	8018316 <dhcp_set_struct+0x32>
 8018308:	4b0e      	ldr	r3, [pc, #56]	; (8018344 <dhcp_set_struct+0x60>)
 801830a:	f240 22b6 	movw	r2, #694	; 0x2b6
 801830e:	4910      	ldr	r1, [pc, #64]	; (8018350 <dhcp_set_struct+0x6c>)
 8018310:	480e      	ldr	r0, [pc, #56]	; (801834c <dhcp_set_struct+0x68>)
 8018312:	f004 fee3 	bl	801d0dc <iprintf>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801831a:	2b00      	cmp	r3, #0
 801831c:	d006      	beq.n	801832c <dhcp_set_struct+0x48>
 801831e:	4b09      	ldr	r3, [pc, #36]	; (8018344 <dhcp_set_struct+0x60>)
 8018320:	f240 22b7 	movw	r2, #695	; 0x2b7
 8018324:	490b      	ldr	r1, [pc, #44]	; (8018354 <dhcp_set_struct+0x70>)
 8018326:	4809      	ldr	r0, [pc, #36]	; (801834c <dhcp_set_struct+0x68>)
 8018328:	f004 fed8 	bl	801d0dc <iprintf>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801832c:	2234      	movs	r2, #52	; 0x34
 801832e:	2100      	movs	r1, #0
 8018330:	6838      	ldr	r0, [r7, #0]
 8018332:	f004 ff38 	bl	801d1a6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	683a      	ldr	r2, [r7, #0]
 801833a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801833c:	bf00      	nop
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	08020348 	.word	0x08020348
 8018348:	0802042c 	.word	0x0802042c
 801834c:	080203a8 	.word	0x080203a8
 8018350:	0802043c 	.word	0x0802043c
 8018354:	0802044c 	.word	0x0802044c

08018358 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b084      	sub	sp, #16
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d109      	bne.n	801837a <dhcp_start+0x22>
 8018366:	4b37      	ldr	r3, [pc, #220]	; (8018444 <dhcp_start+0xec>)
 8018368:	f240 22e7 	movw	r2, #743	; 0x2e7
 801836c:	4936      	ldr	r1, [pc, #216]	; (8018448 <dhcp_start+0xf0>)
 801836e:	4837      	ldr	r0, [pc, #220]	; (801844c <dhcp_start+0xf4>)
 8018370:	f004 feb4 	bl	801d0dc <iprintf>
 8018374:	f06f 030f 	mvn.w	r3, #15
 8018378:	e060      	b.n	801843c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018380:	f003 0301 	and.w	r3, r3, #1
 8018384:	2b00      	cmp	r3, #0
 8018386:	d109      	bne.n	801839c <dhcp_start+0x44>
 8018388:	4b2e      	ldr	r3, [pc, #184]	; (8018444 <dhcp_start+0xec>)
 801838a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801838e:	4930      	ldr	r1, [pc, #192]	; (8018450 <dhcp_start+0xf8>)
 8018390:	482e      	ldr	r0, [pc, #184]	; (801844c <dhcp_start+0xf4>)
 8018392:	f004 fea3 	bl	801d0dc <iprintf>
 8018396:	f06f 030f 	mvn.w	r3, #15
 801839a:	e04f      	b.n	801843c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80183a6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80183aa:	d202      	bcs.n	80183b2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80183ac:	f04f 33ff 	mov.w	r3, #4294967295
 80183b0:	e044      	b.n	801843c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d10d      	bne.n	80183d4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80183b8:	2034      	movs	r0, #52	; 0x34
 80183ba:	f7f7 f95b 	bl	800f674 <mem_malloc>
 80183be:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d102      	bne.n	80183cc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80183c6:	f04f 33ff 	mov.w	r3, #4294967295
 80183ca:	e037      	b.n	801843c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	68fa      	ldr	r2, [r7, #12]
 80183d0:	625a      	str	r2, [r3, #36]	; 0x24
 80183d2:	e005      	b.n	80183e0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	791b      	ldrb	r3, [r3, #4]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d001      	beq.n	80183e0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80183dc:	f7ff fc38 	bl	8017c50 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80183e0:	2234      	movs	r2, #52	; 0x34
 80183e2:	2100      	movs	r1, #0
 80183e4:	68f8      	ldr	r0, [r7, #12]
 80183e6:	f004 fede 	bl	801d1a6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80183ea:	f7ff fbdf 	bl	8017bac <dhcp_inc_pcb_refcount>
 80183ee:	4603      	mov	r3, r0
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d002      	beq.n	80183fa <dhcp_start+0xa2>
    return ERR_MEM;
 80183f4:	f04f 33ff 	mov.w	r3, #4294967295
 80183f8:	e020      	b.n	801843c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	2201      	movs	r2, #1
 80183fe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018406:	f003 0304 	and.w	r3, r3, #4
 801840a:	2b00      	cmp	r3, #0
 801840c:	d105      	bne.n	801841a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801840e:	2102      	movs	r1, #2
 8018410:	68f8      	ldr	r0, [r7, #12]
 8018412:	f000 fd01 	bl	8018e18 <dhcp_set_state>
    return ERR_OK;
 8018416:	2300      	movs	r3, #0
 8018418:	e010      	b.n	801843c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f000 f8f8 	bl	8018610 <dhcp_discover>
 8018420:	4603      	mov	r3, r0
 8018422:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8018424:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d005      	beq.n	8018438 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f000 fc59 	bl	8018ce4 <dhcp_release_and_stop>
    return ERR_MEM;
 8018432:	f04f 33ff 	mov.w	r3, #4294967295
 8018436:	e001      	b.n	801843c <dhcp_start+0xe4>
  }
  return result;
 8018438:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801843c:	4618      	mov	r0, r3
 801843e:	3710      	adds	r7, #16
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}
 8018444:	08020348 	.word	0x08020348
 8018448:	0802042c 	.word	0x0802042c
 801844c:	080203a8 	.word	0x080203a8
 8018450:	08020470 	.word	0x08020470

08018454 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b084      	sub	sp, #16
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018460:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d025      	beq.n	80184b4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	795b      	ldrb	r3, [r3, #5]
 801846c:	2b0a      	cmp	r3, #10
 801846e:	d008      	beq.n	8018482 <dhcp_network_changed+0x2e>
 8018470:	2b0a      	cmp	r3, #10
 8018472:	dc0d      	bgt.n	8018490 <dhcp_network_changed+0x3c>
 8018474:	2b00      	cmp	r3, #0
 8018476:	d01f      	beq.n	80184b8 <dhcp_network_changed+0x64>
 8018478:	2b00      	cmp	r3, #0
 801847a:	db09      	blt.n	8018490 <dhcp_network_changed+0x3c>
 801847c:	3b03      	subs	r3, #3
 801847e:	2b02      	cmp	r3, #2
 8018480:	d806      	bhi.n	8018490 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	2200      	movs	r2, #0
 8018486:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8018488:	6878      	ldr	r0, [r7, #4]
 801848a:	f000 fb75 	bl	8018b78 <dhcp_reboot>
      break;
 801848e:	e014      	b.n	80184ba <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	795b      	ldrb	r3, [r3, #5]
 8018494:	2b0c      	cmp	r3, #12
 8018496:	d906      	bls.n	80184a6 <dhcp_network_changed+0x52>
 8018498:	4b09      	ldr	r3, [pc, #36]	; (80184c0 <dhcp_network_changed+0x6c>)
 801849a:	f240 326d 	movw	r2, #877	; 0x36d
 801849e:	4909      	ldr	r1, [pc, #36]	; (80184c4 <dhcp_network_changed+0x70>)
 80184a0:	4809      	ldr	r0, [pc, #36]	; (80184c8 <dhcp_network_changed+0x74>)
 80184a2:	f004 fe1b 	bl	801d0dc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	2200      	movs	r2, #0
 80184aa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f000 f8af 	bl	8018610 <dhcp_discover>
      break;
 80184b2:	e002      	b.n	80184ba <dhcp_network_changed+0x66>
    return;
 80184b4:	bf00      	nop
 80184b6:	e000      	b.n	80184ba <dhcp_network_changed+0x66>
      break;
 80184b8:	bf00      	nop
  }
}
 80184ba:	3710      	adds	r7, #16
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	08020348 	.word	0x08020348
 80184c4:	08020494 	.word	0x08020494
 80184c8:	080203a8 	.word	0x080203a8

080184cc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d107      	bne.n	80184ec <dhcp_arp_reply+0x20>
 80184dc:	4b0e      	ldr	r3, [pc, #56]	; (8018518 <dhcp_arp_reply+0x4c>)
 80184de:	f240 328b 	movw	r2, #907	; 0x38b
 80184e2:	490e      	ldr	r1, [pc, #56]	; (801851c <dhcp_arp_reply+0x50>)
 80184e4:	480e      	ldr	r0, [pc, #56]	; (8018520 <dhcp_arp_reply+0x54>)
 80184e6:	f004 fdf9 	bl	801d0dc <iprintf>
 80184ea:	e012      	b.n	8018512 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d00c      	beq.n	8018512 <dhcp_arp_reply+0x46>
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	795b      	ldrb	r3, [r3, #5]
 80184fc:	2b08      	cmp	r3, #8
 80184fe:	d108      	bne.n	8018512 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	681a      	ldr	r2, [r3, #0]
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	69db      	ldr	r3, [r3, #28]
 8018508:	429a      	cmp	r2, r3
 801850a:	d102      	bne.n	8018512 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f000 f809 	bl	8018524 <dhcp_decline>
    }
  }
}
 8018512:	3710      	adds	r7, #16
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}
 8018518:	08020348 	.word	0x08020348
 801851c:	0802042c 	.word	0x0802042c
 8018520:	080203a8 	.word	0x080203a8

08018524 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8018524:	b5b0      	push	{r4, r5, r7, lr}
 8018526:	b08a      	sub	sp, #40	; 0x28
 8018528:	af02      	add	r7, sp, #8
 801852a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018530:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018532:	210c      	movs	r1, #12
 8018534:	69b8      	ldr	r0, [r7, #24]
 8018536:	f000 fc6f 	bl	8018e18 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801853a:	f107 030c 	add.w	r3, r7, #12
 801853e:	2204      	movs	r2, #4
 8018540:	69b9      	ldr	r1, [r7, #24]
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	f001 f924 	bl	8019790 <dhcp_create_msg>
 8018548:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801854a:	697b      	ldr	r3, [r7, #20]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d035      	beq.n	80185bc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018550:	697b      	ldr	r3, [r7, #20]
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018556:	89b8      	ldrh	r0, [r7, #12]
 8018558:	693b      	ldr	r3, [r7, #16]
 801855a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801855e:	2304      	movs	r3, #4
 8018560:	2232      	movs	r2, #50	; 0x32
 8018562:	f000 fc73 	bl	8018e4c <dhcp_option>
 8018566:	4603      	mov	r3, r0
 8018568:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801856a:	89bc      	ldrh	r4, [r7, #12]
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	69db      	ldr	r3, [r3, #28]
 8018576:	4618      	mov	r0, r3
 8018578:	f7f6 fabc 	bl	800eaf4 <lwip_htonl>
 801857c:	4603      	mov	r3, r0
 801857e:	461a      	mov	r2, r3
 8018580:	4629      	mov	r1, r5
 8018582:	4620      	mov	r0, r4
 8018584:	f000 fcee 	bl	8018f64 <dhcp_option_long>
 8018588:	4603      	mov	r3, r0
 801858a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801858c:	89b8      	ldrh	r0, [r7, #12]
 801858e:	693b      	ldr	r3, [r7, #16]
 8018590:	33f0      	adds	r3, #240	; 0xf0
 8018592:	697a      	ldr	r2, [r7, #20]
 8018594:	4619      	mov	r1, r3
 8018596:	f001 f9d1 	bl	801993c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801859a:	4b19      	ldr	r3, [pc, #100]	; (8018600 <dhcp_decline+0xdc>)
 801859c:	6818      	ldr	r0, [r3, #0]
 801859e:	4b19      	ldr	r3, [pc, #100]	; (8018604 <dhcp_decline+0xe0>)
 80185a0:	9301      	str	r3, [sp, #4]
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	9300      	str	r3, [sp, #0]
 80185a6:	2343      	movs	r3, #67	; 0x43
 80185a8:	4a17      	ldr	r2, [pc, #92]	; (8018608 <dhcp_decline+0xe4>)
 80185aa:	6979      	ldr	r1, [r7, #20]
 80185ac:	f7ff f878 	bl	80176a0 <udp_sendto_if_src>
 80185b0:	4603      	mov	r3, r0
 80185b2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80185b4:	6978      	ldr	r0, [r7, #20]
 80185b6:	f7f8 f8df 	bl	8010778 <pbuf_free>
 80185ba:	e001      	b.n	80185c0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80185bc:	23ff      	movs	r3, #255	; 0xff
 80185be:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80185c0:	69bb      	ldr	r3, [r7, #24]
 80185c2:	799b      	ldrb	r3, [r3, #6]
 80185c4:	2bff      	cmp	r3, #255	; 0xff
 80185c6:	d005      	beq.n	80185d4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80185c8:	69bb      	ldr	r3, [r7, #24]
 80185ca:	799b      	ldrb	r3, [r3, #6]
 80185cc:	3301      	adds	r3, #1
 80185ce:	b2da      	uxtb	r2, r3
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80185d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80185d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80185da:	89fb      	ldrh	r3, [r7, #14]
 80185dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80185e0:	4a0a      	ldr	r2, [pc, #40]	; (801860c <dhcp_decline+0xe8>)
 80185e2:	fb82 1203 	smull	r1, r2, r2, r3
 80185e6:	1152      	asrs	r2, r2, #5
 80185e8:	17db      	asrs	r3, r3, #31
 80185ea:	1ad3      	subs	r3, r2, r3
 80185ec:	b29a      	uxth	r2, r3
 80185ee:	69bb      	ldr	r3, [r7, #24]
 80185f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80185f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3720      	adds	r7, #32
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bdb0      	pop	{r4, r5, r7, pc}
 80185fe:	bf00      	nop
 8018600:	20008700 	.word	0x20008700
 8018604:	08020f5c 	.word	0x08020f5c
 8018608:	08020f60 	.word	0x08020f60
 801860c:	10624dd3 	.word	0x10624dd3

08018610 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b08a      	sub	sp, #40	; 0x28
 8018614:	af02      	add	r7, sp, #8
 8018616:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801861c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801861e:	2300      	movs	r3, #0
 8018620:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018622:	69bb      	ldr	r3, [r7, #24]
 8018624:	2200      	movs	r2, #0
 8018626:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018628:	2106      	movs	r1, #6
 801862a:	69b8      	ldr	r0, [r7, #24]
 801862c:	f000 fbf4 	bl	8018e18 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018630:	f107 0308 	add.w	r3, r7, #8
 8018634:	2201      	movs	r2, #1
 8018636:	69b9      	ldr	r1, [r7, #24]
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f001 f8a9 	bl	8019790 <dhcp_create_msg>
 801863e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018640:	693b      	ldr	r3, [r7, #16]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d04b      	beq.n	80186de <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801864c:	8938      	ldrh	r0, [r7, #8]
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018654:	2302      	movs	r3, #2
 8018656:	2239      	movs	r2, #57	; 0x39
 8018658:	f000 fbf8 	bl	8018e4c <dhcp_option>
 801865c:	4603      	mov	r3, r0
 801865e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018660:	8938      	ldrh	r0, [r7, #8]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801866c:	461a      	mov	r2, r3
 801866e:	f000 fc47 	bl	8018f00 <dhcp_option_short>
 8018672:	4603      	mov	r3, r0
 8018674:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018676:	8938      	ldrh	r0, [r7, #8]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801867e:	2304      	movs	r3, #4
 8018680:	2237      	movs	r2, #55	; 0x37
 8018682:	f000 fbe3 	bl	8018e4c <dhcp_option>
 8018686:	4603      	mov	r3, r0
 8018688:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801868a:	2300      	movs	r3, #0
 801868c:	77fb      	strb	r3, [r7, #31]
 801868e:	e00e      	b.n	80186ae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018690:	8938      	ldrh	r0, [r7, #8]
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018698:	7ffb      	ldrb	r3, [r7, #31]
 801869a:	4a29      	ldr	r2, [pc, #164]	; (8018740 <dhcp_discover+0x130>)
 801869c:	5cd3      	ldrb	r3, [r2, r3]
 801869e:	461a      	mov	r2, r3
 80186a0:	f000 fc08 	bl	8018eb4 <dhcp_option_byte>
 80186a4:	4603      	mov	r3, r0
 80186a6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80186a8:	7ffb      	ldrb	r3, [r7, #31]
 80186aa:	3301      	adds	r3, #1
 80186ac:	77fb      	strb	r3, [r7, #31]
 80186ae:	7ffb      	ldrb	r3, [r7, #31]
 80186b0:	2b03      	cmp	r3, #3
 80186b2:	d9ed      	bls.n	8018690 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80186b4:	8938      	ldrh	r0, [r7, #8]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	33f0      	adds	r3, #240	; 0xf0
 80186ba:	693a      	ldr	r2, [r7, #16]
 80186bc:	4619      	mov	r1, r3
 80186be:	f001 f93d 	bl	801993c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80186c2:	4b20      	ldr	r3, [pc, #128]	; (8018744 <dhcp_discover+0x134>)
 80186c4:	6818      	ldr	r0, [r3, #0]
 80186c6:	4b20      	ldr	r3, [pc, #128]	; (8018748 <dhcp_discover+0x138>)
 80186c8:	9301      	str	r3, [sp, #4]
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	9300      	str	r3, [sp, #0]
 80186ce:	2343      	movs	r3, #67	; 0x43
 80186d0:	4a1e      	ldr	r2, [pc, #120]	; (801874c <dhcp_discover+0x13c>)
 80186d2:	6939      	ldr	r1, [r7, #16]
 80186d4:	f7fe ffe4 	bl	80176a0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80186d8:	6938      	ldr	r0, [r7, #16]
 80186da:	f7f8 f84d 	bl	8010778 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80186de:	69bb      	ldr	r3, [r7, #24]
 80186e0:	799b      	ldrb	r3, [r3, #6]
 80186e2:	2bff      	cmp	r3, #255	; 0xff
 80186e4:	d005      	beq.n	80186f2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80186e6:	69bb      	ldr	r3, [r7, #24]
 80186e8:	799b      	ldrb	r3, [r3, #6]
 80186ea:	3301      	adds	r3, #1
 80186ec:	b2da      	uxtb	r2, r3
 80186ee:	69bb      	ldr	r3, [r7, #24]
 80186f0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80186f2:	69bb      	ldr	r3, [r7, #24]
 80186f4:	799b      	ldrb	r3, [r3, #6]
 80186f6:	2b05      	cmp	r3, #5
 80186f8:	d80d      	bhi.n	8018716 <dhcp_discover+0x106>
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	799b      	ldrb	r3, [r3, #6]
 80186fe:	461a      	mov	r2, r3
 8018700:	2301      	movs	r3, #1
 8018702:	4093      	lsls	r3, r2
 8018704:	b29b      	uxth	r3, r3
 8018706:	461a      	mov	r2, r3
 8018708:	0152      	lsls	r2, r2, #5
 801870a:	1ad2      	subs	r2, r2, r3
 801870c:	0092      	lsls	r2, r2, #2
 801870e:	4413      	add	r3, r2
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	b29b      	uxth	r3, r3
 8018714:	e001      	b.n	801871a <dhcp_discover+0x10a>
 8018716:	f64e 2360 	movw	r3, #60000	; 0xea60
 801871a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801871c:	897b      	ldrh	r3, [r7, #10]
 801871e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018722:	4a0b      	ldr	r2, [pc, #44]	; (8018750 <dhcp_discover+0x140>)
 8018724:	fb82 1203 	smull	r1, r2, r2, r3
 8018728:	1152      	asrs	r2, r2, #5
 801872a:	17db      	asrs	r3, r3, #31
 801872c:	1ad3      	subs	r3, r2, r3
 801872e:	b29a      	uxth	r2, r3
 8018730:	69bb      	ldr	r3, [r7, #24]
 8018732:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018734:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018738:	4618      	mov	r0, r3
 801873a:	3720      	adds	r7, #32
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	20000138 	.word	0x20000138
 8018744:	20008700 	.word	0x20008700
 8018748:	08020f5c 	.word	0x08020f5c
 801874c:	08020f60 	.word	0x08020f60
 8018750:	10624dd3 	.word	0x10624dd3

08018754 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b088      	sub	sp, #32
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d107      	bne.n	8018772 <dhcp_bind+0x1e>
 8018762:	4b64      	ldr	r3, [pc, #400]	; (80188f4 <dhcp_bind+0x1a0>)
 8018764:	f240 4215 	movw	r2, #1045	; 0x415
 8018768:	4963      	ldr	r1, [pc, #396]	; (80188f8 <dhcp_bind+0x1a4>)
 801876a:	4864      	ldr	r0, [pc, #400]	; (80188fc <dhcp_bind+0x1a8>)
 801876c:	f004 fcb6 	bl	801d0dc <iprintf>
 8018770:	e0bc      	b.n	80188ec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018776:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018778:	69bb      	ldr	r3, [r7, #24]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d107      	bne.n	801878e <dhcp_bind+0x3a>
 801877e:	4b5d      	ldr	r3, [pc, #372]	; (80188f4 <dhcp_bind+0x1a0>)
 8018780:	f240 4217 	movw	r2, #1047	; 0x417
 8018784:	495e      	ldr	r1, [pc, #376]	; (8018900 <dhcp_bind+0x1ac>)
 8018786:	485d      	ldr	r0, [pc, #372]	; (80188fc <dhcp_bind+0x1a8>)
 8018788:	f004 fca8 	bl	801d0dc <iprintf>
 801878c:	e0ae      	b.n	80188ec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801878e:	69bb      	ldr	r3, [r7, #24]
 8018790:	2200      	movs	r2, #0
 8018792:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018794:	69bb      	ldr	r3, [r7, #24]
 8018796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801879c:	d019      	beq.n	80187d2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187a2:	331e      	adds	r3, #30
 80187a4:	4a57      	ldr	r2, [pc, #348]	; (8018904 <dhcp_bind+0x1b0>)
 80187a6:	fba2 2303 	umull	r2, r3, r2, r3
 80187aa:	095b      	lsrs	r3, r3, #5
 80187ac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80187ae:	69fb      	ldr	r3, [r7, #28]
 80187b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187b4:	d302      	bcc.n	80187bc <dhcp_bind+0x68>
      timeout = 0xffff;
 80187b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187ba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	b29a      	uxth	r2, r3
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80187c4:	69bb      	ldr	r3, [r7, #24]
 80187c6:	8a9b      	ldrh	r3, [r3, #20]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d102      	bne.n	80187d2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80187cc:	69bb      	ldr	r3, [r7, #24]
 80187ce:	2201      	movs	r2, #1
 80187d0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80187d2:	69bb      	ldr	r3, [r7, #24]
 80187d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187da:	d01d      	beq.n	8018818 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80187dc:	69bb      	ldr	r3, [r7, #24]
 80187de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e0:	331e      	adds	r3, #30
 80187e2:	4a48      	ldr	r2, [pc, #288]	; (8018904 <dhcp_bind+0x1b0>)
 80187e4:	fba2 2303 	umull	r2, r3, r2, r3
 80187e8:	095b      	lsrs	r3, r3, #5
 80187ea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80187ec:	69fb      	ldr	r3, [r7, #28]
 80187ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187f2:	d302      	bcc.n	80187fa <dhcp_bind+0xa6>
      timeout = 0xffff;
 80187f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187f8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	b29a      	uxth	r2, r3
 80187fe:	69bb      	ldr	r3, [r7, #24]
 8018800:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8018802:	69bb      	ldr	r3, [r7, #24]
 8018804:	895b      	ldrh	r3, [r3, #10]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d102      	bne.n	8018810 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801880a:	69bb      	ldr	r3, [r7, #24]
 801880c:	2201      	movs	r2, #1
 801880e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8018810:	69bb      	ldr	r3, [r7, #24]
 8018812:	895a      	ldrh	r2, [r3, #10]
 8018814:	69bb      	ldr	r3, [r7, #24]
 8018816:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8018818:	69bb      	ldr	r3, [r7, #24]
 801881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018820:	d01d      	beq.n	801885e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018822:	69bb      	ldr	r3, [r7, #24]
 8018824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018826:	331e      	adds	r3, #30
 8018828:	4a36      	ldr	r2, [pc, #216]	; (8018904 <dhcp_bind+0x1b0>)
 801882a:	fba2 2303 	umull	r2, r3, r2, r3
 801882e:	095b      	lsrs	r3, r3, #5
 8018830:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018838:	d302      	bcc.n	8018840 <dhcp_bind+0xec>
      timeout = 0xffff;
 801883a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801883e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8018840:	69fb      	ldr	r3, [r7, #28]
 8018842:	b29a      	uxth	r2, r3
 8018844:	69bb      	ldr	r3, [r7, #24]
 8018846:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8018848:	69bb      	ldr	r3, [r7, #24]
 801884a:	899b      	ldrh	r3, [r3, #12]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d102      	bne.n	8018856 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8018850:	69bb      	ldr	r3, [r7, #24]
 8018852:	2201      	movs	r2, #1
 8018854:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8018856:	69bb      	ldr	r3, [r7, #24]
 8018858:	899a      	ldrh	r2, [r3, #12]
 801885a:	69bb      	ldr	r3, [r7, #24]
 801885c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801885e:	69bb      	ldr	r3, [r7, #24]
 8018860:	895a      	ldrh	r2, [r3, #10]
 8018862:	69bb      	ldr	r3, [r7, #24]
 8018864:	899b      	ldrh	r3, [r3, #12]
 8018866:	429a      	cmp	r2, r3
 8018868:	d306      	bcc.n	8018878 <dhcp_bind+0x124>
 801886a:	69bb      	ldr	r3, [r7, #24]
 801886c:	899b      	ldrh	r3, [r3, #12]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d002      	beq.n	8018878 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8018872:	69bb      	ldr	r3, [r7, #24]
 8018874:	2200      	movs	r2, #0
 8018876:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8018878:	69bb      	ldr	r3, [r7, #24]
 801887a:	79db      	ldrb	r3, [r3, #7]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d003      	beq.n	8018888 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8018880:	69bb      	ldr	r3, [r7, #24]
 8018882:	6a1b      	ldr	r3, [r3, #32]
 8018884:	613b      	str	r3, [r7, #16]
 8018886:	e014      	b.n	80188b2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8018888:	69bb      	ldr	r3, [r7, #24]
 801888a:	331c      	adds	r3, #28
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8018890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018894:	2b00      	cmp	r3, #0
 8018896:	db02      	blt.n	801889e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8018898:	23ff      	movs	r3, #255	; 0xff
 801889a:	613b      	str	r3, [r7, #16]
 801889c:	e009      	b.n	80188b2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801889e:	7dfb      	ldrb	r3, [r7, #23]
 80188a0:	2bbf      	cmp	r3, #191	; 0xbf
 80188a2:	d903      	bls.n	80188ac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80188a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80188a8:	613b      	str	r3, [r7, #16]
 80188aa:	e002      	b.n	80188b2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80188ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188b0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80188b2:	69bb      	ldr	r3, [r7, #24]
 80188b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d108      	bne.n	80188d0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80188be:	69bb      	ldr	r3, [r7, #24]
 80188c0:	69da      	ldr	r2, [r3, #28]
 80188c2:	693b      	ldr	r3, [r7, #16]
 80188c4:	4013      	ands	r3, r2
 80188c6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80188ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80188d0:	210a      	movs	r1, #10
 80188d2:	69b8      	ldr	r0, [r7, #24]
 80188d4:	f000 faa0 	bl	8018e18 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	f103 011c 	add.w	r1, r3, #28
 80188de:	f107 030c 	add.w	r3, r7, #12
 80188e2:	f107 0210 	add.w	r2, r7, #16
 80188e6:	6878      	ldr	r0, [r7, #4]
 80188e8:	f7f7 fa66 	bl	800fdb8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80188ec:	3720      	adds	r7, #32
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bd80      	pop	{r7, pc}
 80188f2:	bf00      	nop
 80188f4:	08020348 	.word	0x08020348
 80188f8:	080204a8 	.word	0x080204a8
 80188fc:	080203a8 	.word	0x080203a8
 8018900:	080204c4 	.word	0x080204c4
 8018904:	88888889 	.word	0x88888889

08018908 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b08a      	sub	sp, #40	; 0x28
 801890c:	af02      	add	r7, sp, #8
 801890e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018914:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8018916:	2105      	movs	r1, #5
 8018918:	69b8      	ldr	r0, [r7, #24]
 801891a:	f000 fa7d 	bl	8018e18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801891e:	f107 030c 	add.w	r3, r7, #12
 8018922:	2203      	movs	r2, #3
 8018924:	69b9      	ldr	r1, [r7, #24]
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f000 ff32 	bl	8019790 <dhcp_create_msg>
 801892c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801892e:	697b      	ldr	r3, [r7, #20]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d04e      	beq.n	80189d2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018934:	697b      	ldr	r3, [r7, #20]
 8018936:	685b      	ldr	r3, [r3, #4]
 8018938:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801893a:	89b8      	ldrh	r0, [r7, #12]
 801893c:	693b      	ldr	r3, [r7, #16]
 801893e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018942:	2302      	movs	r3, #2
 8018944:	2239      	movs	r2, #57	; 0x39
 8018946:	f000 fa81 	bl	8018e4c <dhcp_option>
 801894a:	4603      	mov	r3, r0
 801894c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801894e:	89b8      	ldrh	r0, [r7, #12]
 8018950:	693b      	ldr	r3, [r7, #16]
 8018952:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801895a:	461a      	mov	r2, r3
 801895c:	f000 fad0 	bl	8018f00 <dhcp_option_short>
 8018960:	4603      	mov	r3, r0
 8018962:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018964:	89b8      	ldrh	r0, [r7, #12]
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801896c:	2304      	movs	r3, #4
 801896e:	2237      	movs	r2, #55	; 0x37
 8018970:	f000 fa6c 	bl	8018e4c <dhcp_option>
 8018974:	4603      	mov	r3, r0
 8018976:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018978:	2300      	movs	r3, #0
 801897a:	77bb      	strb	r3, [r7, #30]
 801897c:	e00e      	b.n	801899c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801897e:	89b8      	ldrh	r0, [r7, #12]
 8018980:	693b      	ldr	r3, [r7, #16]
 8018982:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018986:	7fbb      	ldrb	r3, [r7, #30]
 8018988:	4a2a      	ldr	r2, [pc, #168]	; (8018a34 <dhcp_renew+0x12c>)
 801898a:	5cd3      	ldrb	r3, [r2, r3]
 801898c:	461a      	mov	r2, r3
 801898e:	f000 fa91 	bl	8018eb4 <dhcp_option_byte>
 8018992:	4603      	mov	r3, r0
 8018994:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018996:	7fbb      	ldrb	r3, [r7, #30]
 8018998:	3301      	adds	r3, #1
 801899a:	77bb      	strb	r3, [r7, #30]
 801899c:	7fbb      	ldrb	r3, [r7, #30]
 801899e:	2b03      	cmp	r3, #3
 80189a0:	d9ed      	bls.n	801897e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80189a2:	89b8      	ldrh	r0, [r7, #12]
 80189a4:	693b      	ldr	r3, [r7, #16]
 80189a6:	33f0      	adds	r3, #240	; 0xf0
 80189a8:	697a      	ldr	r2, [r7, #20]
 80189aa:	4619      	mov	r1, r3
 80189ac:	f000 ffc6 	bl	801993c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80189b0:	4b21      	ldr	r3, [pc, #132]	; (8018a38 <dhcp_renew+0x130>)
 80189b2:	6818      	ldr	r0, [r3, #0]
 80189b4:	69bb      	ldr	r3, [r7, #24]
 80189b6:	f103 0218 	add.w	r2, r3, #24
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	9300      	str	r3, [sp, #0]
 80189be:	2343      	movs	r3, #67	; 0x43
 80189c0:	6979      	ldr	r1, [r7, #20]
 80189c2:	f7fe fdf9 	bl	80175b8 <udp_sendto_if>
 80189c6:	4603      	mov	r3, r0
 80189c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80189ca:	6978      	ldr	r0, [r7, #20]
 80189cc:	f7f7 fed4 	bl	8010778 <pbuf_free>
 80189d0:	e001      	b.n	80189d6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80189d2:	23ff      	movs	r3, #255	; 0xff
 80189d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80189d6:	69bb      	ldr	r3, [r7, #24]
 80189d8:	799b      	ldrb	r3, [r3, #6]
 80189da:	2bff      	cmp	r3, #255	; 0xff
 80189dc:	d005      	beq.n	80189ea <dhcp_renew+0xe2>
    dhcp->tries++;
 80189de:	69bb      	ldr	r3, [r7, #24]
 80189e0:	799b      	ldrb	r3, [r3, #6]
 80189e2:	3301      	adds	r3, #1
 80189e4:	b2da      	uxtb	r2, r3
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80189ea:	69bb      	ldr	r3, [r7, #24]
 80189ec:	799b      	ldrb	r3, [r3, #6]
 80189ee:	2b09      	cmp	r3, #9
 80189f0:	d80a      	bhi.n	8018a08 <dhcp_renew+0x100>
 80189f2:	69bb      	ldr	r3, [r7, #24]
 80189f4:	799b      	ldrb	r3, [r3, #6]
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	461a      	mov	r2, r3
 80189fa:	0152      	lsls	r2, r2, #5
 80189fc:	1ad2      	subs	r2, r2, r3
 80189fe:	0092      	lsls	r2, r2, #2
 8018a00:	4413      	add	r3, r2
 8018a02:	011b      	lsls	r3, r3, #4
 8018a04:	b29b      	uxth	r3, r3
 8018a06:	e001      	b.n	8018a0c <dhcp_renew+0x104>
 8018a08:	f644 6320 	movw	r3, #20000	; 0x4e20
 8018a0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018a0e:	89fb      	ldrh	r3, [r7, #14]
 8018a10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018a14:	4a09      	ldr	r2, [pc, #36]	; (8018a3c <dhcp_renew+0x134>)
 8018a16:	fb82 1203 	smull	r1, r2, r2, r3
 8018a1a:	1152      	asrs	r2, r2, #5
 8018a1c:	17db      	asrs	r3, r3, #31
 8018a1e:	1ad3      	subs	r3, r2, r3
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	69bb      	ldr	r3, [r7, #24]
 8018a24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	3720      	adds	r7, #32
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop
 8018a34:	20000138 	.word	0x20000138
 8018a38:	20008700 	.word	0x20008700
 8018a3c:	10624dd3 	.word	0x10624dd3

08018a40 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b08a      	sub	sp, #40	; 0x28
 8018a44:	af02      	add	r7, sp, #8
 8018a46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a4c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8018a4e:	2104      	movs	r1, #4
 8018a50:	69b8      	ldr	r0, [r7, #24]
 8018a52:	f000 f9e1 	bl	8018e18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018a56:	f107 030c 	add.w	r3, r7, #12
 8018a5a:	2203      	movs	r2, #3
 8018a5c:	69b9      	ldr	r1, [r7, #24]
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f000 fe96 	bl	8019790 <dhcp_create_msg>
 8018a64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d04c      	beq.n	8018b06 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	685b      	ldr	r3, [r3, #4]
 8018a70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018a72:	89b8      	ldrh	r0, [r7, #12]
 8018a74:	693b      	ldr	r3, [r7, #16]
 8018a76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018a7a:	2302      	movs	r3, #2
 8018a7c:	2239      	movs	r2, #57	; 0x39
 8018a7e:	f000 f9e5 	bl	8018e4c <dhcp_option>
 8018a82:	4603      	mov	r3, r0
 8018a84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018a86:	89b8      	ldrh	r0, [r7, #12]
 8018a88:	693b      	ldr	r3, [r7, #16]
 8018a8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a92:	461a      	mov	r2, r3
 8018a94:	f000 fa34 	bl	8018f00 <dhcp_option_short>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018a9c:	89b8      	ldrh	r0, [r7, #12]
 8018a9e:	693b      	ldr	r3, [r7, #16]
 8018aa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018aa4:	2304      	movs	r3, #4
 8018aa6:	2237      	movs	r2, #55	; 0x37
 8018aa8:	f000 f9d0 	bl	8018e4c <dhcp_option>
 8018aac:	4603      	mov	r3, r0
 8018aae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	77bb      	strb	r3, [r7, #30]
 8018ab4:	e00e      	b.n	8018ad4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018ab6:	89b8      	ldrh	r0, [r7, #12]
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018abe:	7fbb      	ldrb	r3, [r7, #30]
 8018ac0:	4a29      	ldr	r2, [pc, #164]	; (8018b68 <dhcp_rebind+0x128>)
 8018ac2:	5cd3      	ldrb	r3, [r2, r3]
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	f000 f9f5 	bl	8018eb4 <dhcp_option_byte>
 8018aca:	4603      	mov	r3, r0
 8018acc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018ace:	7fbb      	ldrb	r3, [r7, #30]
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	77bb      	strb	r3, [r7, #30]
 8018ad4:	7fbb      	ldrb	r3, [r7, #30]
 8018ad6:	2b03      	cmp	r3, #3
 8018ad8:	d9ed      	bls.n	8018ab6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018ada:	89b8      	ldrh	r0, [r7, #12]
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	33f0      	adds	r3, #240	; 0xf0
 8018ae0:	697a      	ldr	r2, [r7, #20]
 8018ae2:	4619      	mov	r1, r3
 8018ae4:	f000 ff2a 	bl	801993c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018ae8:	4b20      	ldr	r3, [pc, #128]	; (8018b6c <dhcp_rebind+0x12c>)
 8018aea:	6818      	ldr	r0, [r3, #0]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	9300      	str	r3, [sp, #0]
 8018af0:	2343      	movs	r3, #67	; 0x43
 8018af2:	4a1f      	ldr	r2, [pc, #124]	; (8018b70 <dhcp_rebind+0x130>)
 8018af4:	6979      	ldr	r1, [r7, #20]
 8018af6:	f7fe fd5f 	bl	80175b8 <udp_sendto_if>
 8018afa:	4603      	mov	r3, r0
 8018afc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018afe:	6978      	ldr	r0, [r7, #20]
 8018b00:	f7f7 fe3a 	bl	8010778 <pbuf_free>
 8018b04:	e001      	b.n	8018b0a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018b06:	23ff      	movs	r3, #255	; 0xff
 8018b08:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	799b      	ldrb	r3, [r3, #6]
 8018b0e:	2bff      	cmp	r3, #255	; 0xff
 8018b10:	d005      	beq.n	8018b1e <dhcp_rebind+0xde>
    dhcp->tries++;
 8018b12:	69bb      	ldr	r3, [r7, #24]
 8018b14:	799b      	ldrb	r3, [r3, #6]
 8018b16:	3301      	adds	r3, #1
 8018b18:	b2da      	uxtb	r2, r3
 8018b1a:	69bb      	ldr	r3, [r7, #24]
 8018b1c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	799b      	ldrb	r3, [r3, #6]
 8018b22:	2b09      	cmp	r3, #9
 8018b24:	d80a      	bhi.n	8018b3c <dhcp_rebind+0xfc>
 8018b26:	69bb      	ldr	r3, [r7, #24]
 8018b28:	799b      	ldrb	r3, [r3, #6]
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	461a      	mov	r2, r3
 8018b2e:	0152      	lsls	r2, r2, #5
 8018b30:	1ad2      	subs	r2, r2, r3
 8018b32:	0092      	lsls	r2, r2, #2
 8018b34:	4413      	add	r3, r2
 8018b36:	00db      	lsls	r3, r3, #3
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	e001      	b.n	8018b40 <dhcp_rebind+0x100>
 8018b3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018b40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018b42:	89fb      	ldrh	r3, [r7, #14]
 8018b44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018b48:	4a0a      	ldr	r2, [pc, #40]	; (8018b74 <dhcp_rebind+0x134>)
 8018b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8018b4e:	1152      	asrs	r2, r2, #5
 8018b50:	17db      	asrs	r3, r3, #31
 8018b52:	1ad3      	subs	r3, r2, r3
 8018b54:	b29a      	uxth	r2, r3
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3720      	adds	r7, #32
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	20000138 	.word	0x20000138
 8018b6c:	20008700 	.word	0x20008700
 8018b70:	08020f60 	.word	0x08020f60
 8018b74:	10624dd3 	.word	0x10624dd3

08018b78 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8018b78:	b5b0      	push	{r4, r5, r7, lr}
 8018b7a:	b08a      	sub	sp, #40	; 0x28
 8018b7c:	af02      	add	r7, sp, #8
 8018b7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b84:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8018b86:	2103      	movs	r1, #3
 8018b88:	69b8      	ldr	r0, [r7, #24]
 8018b8a:	f000 f945 	bl	8018e18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018b8e:	f107 030c 	add.w	r3, r7, #12
 8018b92:	2203      	movs	r2, #3
 8018b94:	69b9      	ldr	r1, [r7, #24]
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f000 fdfa 	bl	8019790 <dhcp_create_msg>
 8018b9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d066      	beq.n	8018c72 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018ba4:	697b      	ldr	r3, [r7, #20]
 8018ba6:	685b      	ldr	r3, [r3, #4]
 8018ba8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018baa:	89b8      	ldrh	r0, [r7, #12]
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018bb2:	2302      	movs	r3, #2
 8018bb4:	2239      	movs	r2, #57	; 0x39
 8018bb6:	f000 f949 	bl	8018e4c <dhcp_option>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8018bbe:	89b8      	ldrh	r0, [r7, #12]
 8018bc0:	693b      	ldr	r3, [r7, #16]
 8018bc2:	33f0      	adds	r3, #240	; 0xf0
 8018bc4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018bc8:	4619      	mov	r1, r3
 8018bca:	f000 f999 	bl	8018f00 <dhcp_option_short>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018bd2:	89b8      	ldrh	r0, [r7, #12]
 8018bd4:	693b      	ldr	r3, [r7, #16]
 8018bd6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018bda:	2304      	movs	r3, #4
 8018bdc:	2232      	movs	r2, #50	; 0x32
 8018bde:	f000 f935 	bl	8018e4c <dhcp_option>
 8018be2:	4603      	mov	r3, r0
 8018be4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018be6:	89bc      	ldrh	r4, [r7, #12]
 8018be8:	693b      	ldr	r3, [r7, #16]
 8018bea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018bee:	69bb      	ldr	r3, [r7, #24]
 8018bf0:	69db      	ldr	r3, [r3, #28]
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7f5 ff7e 	bl	800eaf4 <lwip_htonl>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	461a      	mov	r2, r3
 8018bfc:	4629      	mov	r1, r5
 8018bfe:	4620      	mov	r0, r4
 8018c00:	f000 f9b0 	bl	8018f64 <dhcp_option_long>
 8018c04:	4603      	mov	r3, r0
 8018c06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018c08:	89b8      	ldrh	r0, [r7, #12]
 8018c0a:	693b      	ldr	r3, [r7, #16]
 8018c0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018c10:	2304      	movs	r3, #4
 8018c12:	2237      	movs	r2, #55	; 0x37
 8018c14:	f000 f91a 	bl	8018e4c <dhcp_option>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	77bb      	strb	r3, [r7, #30]
 8018c20:	e00e      	b.n	8018c40 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018c22:	89b8      	ldrh	r0, [r7, #12]
 8018c24:	693b      	ldr	r3, [r7, #16]
 8018c26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018c2a:	7fbb      	ldrb	r3, [r7, #30]
 8018c2c:	4a29      	ldr	r2, [pc, #164]	; (8018cd4 <dhcp_reboot+0x15c>)
 8018c2e:	5cd3      	ldrb	r3, [r2, r3]
 8018c30:	461a      	mov	r2, r3
 8018c32:	f000 f93f 	bl	8018eb4 <dhcp_option_byte>
 8018c36:	4603      	mov	r3, r0
 8018c38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018c3a:	7fbb      	ldrb	r3, [r7, #30]
 8018c3c:	3301      	adds	r3, #1
 8018c3e:	77bb      	strb	r3, [r7, #30]
 8018c40:	7fbb      	ldrb	r3, [r7, #30]
 8018c42:	2b03      	cmp	r3, #3
 8018c44:	d9ed      	bls.n	8018c22 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018c46:	89b8      	ldrh	r0, [r7, #12]
 8018c48:	693b      	ldr	r3, [r7, #16]
 8018c4a:	33f0      	adds	r3, #240	; 0xf0
 8018c4c:	697a      	ldr	r2, [r7, #20]
 8018c4e:	4619      	mov	r1, r3
 8018c50:	f000 fe74 	bl	801993c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018c54:	4b20      	ldr	r3, [pc, #128]	; (8018cd8 <dhcp_reboot+0x160>)
 8018c56:	6818      	ldr	r0, [r3, #0]
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	9300      	str	r3, [sp, #0]
 8018c5c:	2343      	movs	r3, #67	; 0x43
 8018c5e:	4a1f      	ldr	r2, [pc, #124]	; (8018cdc <dhcp_reboot+0x164>)
 8018c60:	6979      	ldr	r1, [r7, #20]
 8018c62:	f7fe fca9 	bl	80175b8 <udp_sendto_if>
 8018c66:	4603      	mov	r3, r0
 8018c68:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018c6a:	6978      	ldr	r0, [r7, #20]
 8018c6c:	f7f7 fd84 	bl	8010778 <pbuf_free>
 8018c70:	e001      	b.n	8018c76 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018c72:	23ff      	movs	r3, #255	; 0xff
 8018c74:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018c76:	69bb      	ldr	r3, [r7, #24]
 8018c78:	799b      	ldrb	r3, [r3, #6]
 8018c7a:	2bff      	cmp	r3, #255	; 0xff
 8018c7c:	d005      	beq.n	8018c8a <dhcp_reboot+0x112>
    dhcp->tries++;
 8018c7e:	69bb      	ldr	r3, [r7, #24]
 8018c80:	799b      	ldrb	r3, [r3, #6]
 8018c82:	3301      	adds	r3, #1
 8018c84:	b2da      	uxtb	r2, r3
 8018c86:	69bb      	ldr	r3, [r7, #24]
 8018c88:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018c8a:	69bb      	ldr	r3, [r7, #24]
 8018c8c:	799b      	ldrb	r3, [r3, #6]
 8018c8e:	2b09      	cmp	r3, #9
 8018c90:	d80a      	bhi.n	8018ca8 <dhcp_reboot+0x130>
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	799b      	ldrb	r3, [r3, #6]
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	461a      	mov	r2, r3
 8018c9a:	0152      	lsls	r2, r2, #5
 8018c9c:	1ad2      	subs	r2, r2, r3
 8018c9e:	0092      	lsls	r2, r2, #2
 8018ca0:	4413      	add	r3, r2
 8018ca2:	00db      	lsls	r3, r3, #3
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	e001      	b.n	8018cac <dhcp_reboot+0x134>
 8018ca8:	f242 7310 	movw	r3, #10000	; 0x2710
 8018cac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018cae:	89fb      	ldrh	r3, [r7, #14]
 8018cb0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018cb4:	4a0a      	ldr	r2, [pc, #40]	; (8018ce0 <dhcp_reboot+0x168>)
 8018cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8018cba:	1152      	asrs	r2, r2, #5
 8018cbc:	17db      	asrs	r3, r3, #31
 8018cbe:	1ad3      	subs	r3, r2, r3
 8018cc0:	b29a      	uxth	r2, r3
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018cc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018cca:	4618      	mov	r0, r3
 8018ccc:	3720      	adds	r7, #32
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8018cd2:	bf00      	nop
 8018cd4:	20000138 	.word	0x20000138
 8018cd8:	20008700 	.word	0x20008700
 8018cdc:	08020f60 	.word	0x08020f60
 8018ce0:	10624dd3 	.word	0x10624dd3

08018ce4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8018ce4:	b5b0      	push	{r4, r5, r7, lr}
 8018ce6:	b08a      	sub	sp, #40	; 0x28
 8018ce8:	af02      	add	r7, sp, #8
 8018cea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	f000 8084 	beq.w	8018e02 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8018cfa:	69fb      	ldr	r3, [r7, #28]
 8018cfc:	795b      	ldrb	r3, [r3, #5]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	f000 8081 	beq.w	8018e06 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8018d04:	69fb      	ldr	r3, [r7, #28]
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8018d10:	69fb      	ldr	r3, [r7, #28]
 8018d12:	2200      	movs	r2, #0
 8018d14:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018d16:	69fb      	ldr	r3, [r7, #28]
 8018d18:	2200      	movs	r2, #0
 8018d1a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8018d22:	69fb      	ldr	r3, [r7, #28]
 8018d24:	2200      	movs	r2, #0
 8018d26:	631a      	str	r2, [r3, #48]	; 0x30
 8018d28:	69fb      	ldr	r3, [r7, #28]
 8018d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8018d30:	69fb      	ldr	r3, [r7, #28]
 8018d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8018d38:	69fb      	ldr	r3, [r7, #28]
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	829a      	strh	r2, [r3, #20]
 8018d3e:	69fb      	ldr	r3, [r7, #28]
 8018d40:	8a9a      	ldrh	r2, [r3, #20]
 8018d42:	69fb      	ldr	r3, [r7, #28]
 8018d44:	825a      	strh	r2, [r3, #18]
 8018d46:	69fb      	ldr	r3, [r7, #28]
 8018d48:	8a5a      	ldrh	r2, [r3, #18]
 8018d4a:	69fb      	ldr	r3, [r7, #28]
 8018d4c:	821a      	strh	r2, [r3, #16]
 8018d4e:	69fb      	ldr	r3, [r7, #28]
 8018d50:	8a1a      	ldrh	r2, [r3, #16]
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f000 fe1e 	bl	8019998 <dhcp_supplied_address>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d03b      	beq.n	8018dda <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8018d62:	f107 030e 	add.w	r3, r7, #14
 8018d66:	2207      	movs	r2, #7
 8018d68:	69f9      	ldr	r1, [r7, #28]
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f000 fd10 	bl	8019790 <dhcp_create_msg>
 8018d70:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d030      	beq.n	8018dda <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018d7e:	89f8      	ldrh	r0, [r7, #14]
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018d86:	2304      	movs	r3, #4
 8018d88:	2236      	movs	r2, #54	; 0x36
 8018d8a:	f000 f85f 	bl	8018e4c <dhcp_option>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8018d92:	89fc      	ldrh	r4, [r7, #14]
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7f5 fea9 	bl	800eaf4 <lwip_htonl>
 8018da2:	4603      	mov	r3, r0
 8018da4:	461a      	mov	r2, r3
 8018da6:	4629      	mov	r1, r5
 8018da8:	4620      	mov	r0, r4
 8018daa:	f000 f8db 	bl	8018f64 <dhcp_option_long>
 8018dae:	4603      	mov	r3, r0
 8018db0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018db2:	89f8      	ldrh	r0, [r7, #14]
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	33f0      	adds	r3, #240	; 0xf0
 8018db8:	69ba      	ldr	r2, [r7, #24]
 8018dba:	4619      	mov	r1, r3
 8018dbc:	f000 fdbe 	bl	801993c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018dc0:	4b13      	ldr	r3, [pc, #76]	; (8018e10 <dhcp_release_and_stop+0x12c>)
 8018dc2:	6818      	ldr	r0, [r3, #0]
 8018dc4:	f107 0210 	add.w	r2, r7, #16
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	2343      	movs	r3, #67	; 0x43
 8018dce:	69b9      	ldr	r1, [r7, #24]
 8018dd0:	f7fe fbf2 	bl	80175b8 <udp_sendto_if>
      pbuf_free(p_out);
 8018dd4:	69b8      	ldr	r0, [r7, #24]
 8018dd6:	f7f7 fccf 	bl	8010778 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018dda:	4b0e      	ldr	r3, [pc, #56]	; (8018e14 <dhcp_release_and_stop+0x130>)
 8018ddc:	4a0d      	ldr	r2, [pc, #52]	; (8018e14 <dhcp_release_and_stop+0x130>)
 8018dde:	490d      	ldr	r1, [pc, #52]	; (8018e14 <dhcp_release_and_stop+0x130>)
 8018de0:	6878      	ldr	r0, [r7, #4]
 8018de2:	f7f6 ffe9 	bl	800fdb8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8018de6:	2100      	movs	r1, #0
 8018de8:	69f8      	ldr	r0, [r7, #28]
 8018dea:	f000 f815 	bl	8018e18 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8018dee:	69fb      	ldr	r3, [r7, #28]
 8018df0:	791b      	ldrb	r3, [r3, #4]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d008      	beq.n	8018e08 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018df6:	f7fe ff2b 	bl	8017c50 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8018dfa:	69fb      	ldr	r3, [r7, #28]
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	711a      	strb	r2, [r3, #4]
 8018e00:	e002      	b.n	8018e08 <dhcp_release_and_stop+0x124>
    return;
 8018e02:	bf00      	nop
 8018e04:	e000      	b.n	8018e08 <dhcp_release_and_stop+0x124>
    return;
 8018e06:	bf00      	nop
  }
}
 8018e08:	3720      	adds	r7, #32
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	20008700 	.word	0x20008700
 8018e14:	08020f5c 	.word	0x08020f5c

08018e18 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b083      	sub	sp, #12
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	460b      	mov	r3, r1
 8018e22:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	795b      	ldrb	r3, [r3, #5]
 8018e28:	78fa      	ldrb	r2, [r7, #3]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d008      	beq.n	8018e40 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	78fa      	ldrb	r2, [r7, #3]
 8018e32:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2200      	movs	r2, #0
 8018e38:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	811a      	strh	r2, [r3, #8]
  }
}
 8018e40:	bf00      	nop
 8018e42:	370c      	adds	r7, #12
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr

08018e4c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6039      	str	r1, [r7, #0]
 8018e54:	4611      	mov	r1, r2
 8018e56:	461a      	mov	r2, r3
 8018e58:	4603      	mov	r3, r0
 8018e5a:	80fb      	strh	r3, [r7, #6]
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	717b      	strb	r3, [r7, #5]
 8018e60:	4613      	mov	r3, r2
 8018e62:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018e64:	88fa      	ldrh	r2, [r7, #6]
 8018e66:	793b      	ldrb	r3, [r7, #4]
 8018e68:	4413      	add	r3, r2
 8018e6a:	3302      	adds	r3, #2
 8018e6c:	2b44      	cmp	r3, #68	; 0x44
 8018e6e:	d906      	bls.n	8018e7e <dhcp_option+0x32>
 8018e70:	4b0d      	ldr	r3, [pc, #52]	; (8018ea8 <dhcp_option+0x5c>)
 8018e72:	f240 529a 	movw	r2, #1434	; 0x59a
 8018e76:	490d      	ldr	r1, [pc, #52]	; (8018eac <dhcp_option+0x60>)
 8018e78:	480d      	ldr	r0, [pc, #52]	; (8018eb0 <dhcp_option+0x64>)
 8018e7a:	f004 f92f 	bl	801d0dc <iprintf>
  options[options_out_len++] = option_type;
 8018e7e:	88fb      	ldrh	r3, [r7, #6]
 8018e80:	1c5a      	adds	r2, r3, #1
 8018e82:	80fa      	strh	r2, [r7, #6]
 8018e84:	461a      	mov	r2, r3
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	4413      	add	r3, r2
 8018e8a:	797a      	ldrb	r2, [r7, #5]
 8018e8c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8018e8e:	88fb      	ldrh	r3, [r7, #6]
 8018e90:	1c5a      	adds	r2, r3, #1
 8018e92:	80fa      	strh	r2, [r7, #6]
 8018e94:	461a      	mov	r2, r3
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	4413      	add	r3, r2
 8018e9a:	793a      	ldrb	r2, [r7, #4]
 8018e9c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018e9e:	88fb      	ldrh	r3, [r7, #6]
}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3708      	adds	r7, #8
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}
 8018ea8:	08020348 	.word	0x08020348
 8018eac:	080204dc 	.word	0x080204dc
 8018eb0:	080203a8 	.word	0x080203a8

08018eb4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b082      	sub	sp, #8
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	4603      	mov	r3, r0
 8018ebc:	6039      	str	r1, [r7, #0]
 8018ebe:	80fb      	strh	r3, [r7, #6]
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018ec4:	88fb      	ldrh	r3, [r7, #6]
 8018ec6:	2b43      	cmp	r3, #67	; 0x43
 8018ec8:	d906      	bls.n	8018ed8 <dhcp_option_byte+0x24>
 8018eca:	4b0a      	ldr	r3, [pc, #40]	; (8018ef4 <dhcp_option_byte+0x40>)
 8018ecc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8018ed0:	4909      	ldr	r1, [pc, #36]	; (8018ef8 <dhcp_option_byte+0x44>)
 8018ed2:	480a      	ldr	r0, [pc, #40]	; (8018efc <dhcp_option_byte+0x48>)
 8018ed4:	f004 f902 	bl	801d0dc <iprintf>
  options[options_out_len++] = value;
 8018ed8:	88fb      	ldrh	r3, [r7, #6]
 8018eda:	1c5a      	adds	r2, r3, #1
 8018edc:	80fa      	strh	r2, [r7, #6]
 8018ede:	461a      	mov	r2, r3
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	4413      	add	r3, r2
 8018ee4:	797a      	ldrb	r2, [r7, #5]
 8018ee6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018ee8:	88fb      	ldrh	r3, [r7, #6]
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	3708      	adds	r7, #8
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	08020348 	.word	0x08020348
 8018ef8:	08020520 	.word	0x08020520
 8018efc:	080203a8 	.word	0x080203a8

08018f00 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b082      	sub	sp, #8
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	4603      	mov	r3, r0
 8018f08:	6039      	str	r1, [r7, #0]
 8018f0a:	80fb      	strh	r3, [r7, #6]
 8018f0c:	4613      	mov	r3, r2
 8018f0e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8018f10:	88fb      	ldrh	r3, [r7, #6]
 8018f12:	3302      	adds	r3, #2
 8018f14:	2b44      	cmp	r3, #68	; 0x44
 8018f16:	d906      	bls.n	8018f26 <dhcp_option_short+0x26>
 8018f18:	4b0f      	ldr	r3, [pc, #60]	; (8018f58 <dhcp_option_short+0x58>)
 8018f1a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8018f1e:	490f      	ldr	r1, [pc, #60]	; (8018f5c <dhcp_option_short+0x5c>)
 8018f20:	480f      	ldr	r0, [pc, #60]	; (8018f60 <dhcp_option_short+0x60>)
 8018f22:	f004 f8db 	bl	801d0dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8018f26:	88bb      	ldrh	r3, [r7, #4]
 8018f28:	0a1b      	lsrs	r3, r3, #8
 8018f2a:	b29a      	uxth	r2, r3
 8018f2c:	88fb      	ldrh	r3, [r7, #6]
 8018f2e:	1c59      	adds	r1, r3, #1
 8018f30:	80f9      	strh	r1, [r7, #6]
 8018f32:	4619      	mov	r1, r3
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	440b      	add	r3, r1
 8018f38:	b2d2      	uxtb	r2, r2
 8018f3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8018f3c:	88fb      	ldrh	r3, [r7, #6]
 8018f3e:	1c5a      	adds	r2, r3, #1
 8018f40:	80fa      	strh	r2, [r7, #6]
 8018f42:	461a      	mov	r2, r3
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	4413      	add	r3, r2
 8018f48:	88ba      	ldrh	r2, [r7, #4]
 8018f4a:	b2d2      	uxtb	r2, r2
 8018f4c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018f4e:	88fb      	ldrh	r3, [r7, #6]
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3708      	adds	r7, #8
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}
 8018f58:	08020348 	.word	0x08020348
 8018f5c:	08020558 	.word	0x08020558
 8018f60:	080203a8 	.word	0x080203a8

08018f64 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b084      	sub	sp, #16
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	60b9      	str	r1, [r7, #8]
 8018f6e:	607a      	str	r2, [r7, #4]
 8018f70:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8018f72:	89fb      	ldrh	r3, [r7, #14]
 8018f74:	3304      	adds	r3, #4
 8018f76:	2b44      	cmp	r3, #68	; 0x44
 8018f78:	d906      	bls.n	8018f88 <dhcp_option_long+0x24>
 8018f7a:	4b19      	ldr	r3, [pc, #100]	; (8018fe0 <dhcp_option_long+0x7c>)
 8018f7c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8018f80:	4918      	ldr	r1, [pc, #96]	; (8018fe4 <dhcp_option_long+0x80>)
 8018f82:	4819      	ldr	r0, [pc, #100]	; (8018fe8 <dhcp_option_long+0x84>)
 8018f84:	f004 f8aa 	bl	801d0dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	0e1a      	lsrs	r2, r3, #24
 8018f8c:	89fb      	ldrh	r3, [r7, #14]
 8018f8e:	1c59      	adds	r1, r3, #1
 8018f90:	81f9      	strh	r1, [r7, #14]
 8018f92:	4619      	mov	r1, r3
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	440b      	add	r3, r1
 8018f98:	b2d2      	uxtb	r2, r2
 8018f9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	0c1a      	lsrs	r2, r3, #16
 8018fa0:	89fb      	ldrh	r3, [r7, #14]
 8018fa2:	1c59      	adds	r1, r3, #1
 8018fa4:	81f9      	strh	r1, [r7, #14]
 8018fa6:	4619      	mov	r1, r3
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	440b      	add	r3, r1
 8018fac:	b2d2      	uxtb	r2, r2
 8018fae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	0a1a      	lsrs	r2, r3, #8
 8018fb4:	89fb      	ldrh	r3, [r7, #14]
 8018fb6:	1c59      	adds	r1, r3, #1
 8018fb8:	81f9      	strh	r1, [r7, #14]
 8018fba:	4619      	mov	r1, r3
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	440b      	add	r3, r1
 8018fc0:	b2d2      	uxtb	r2, r2
 8018fc2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8018fc4:	89fb      	ldrh	r3, [r7, #14]
 8018fc6:	1c5a      	adds	r2, r3, #1
 8018fc8:	81fa      	strh	r2, [r7, #14]
 8018fca:	461a      	mov	r2, r3
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	4413      	add	r3, r2
 8018fd0:	687a      	ldr	r2, [r7, #4]
 8018fd2:	b2d2      	uxtb	r2, r2
 8018fd4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8018fd8:	4618      	mov	r0, r3
 8018fda:	3710      	adds	r7, #16
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}
 8018fe0:	08020348 	.word	0x08020348
 8018fe4:	08020594 	.word	0x08020594
 8018fe8:	080203a8 	.word	0x080203a8

08018fec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b090      	sub	sp, #64	; 0x40
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8018ffe:	220a      	movs	r2, #10
 8019000:	2100      	movs	r1, #0
 8019002:	48ba      	ldr	r0, [pc, #744]	; (80192ec <dhcp_parse_reply+0x300>)
 8019004:	f004 f8cf 	bl	801d1a6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	895b      	ldrh	r3, [r3, #10]
 801900c:	2b2b      	cmp	r3, #43	; 0x2b
 801900e:	d802      	bhi.n	8019016 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019010:	f06f 0301 	mvn.w	r3, #1
 8019014:	e2ea      	b.n	80195ec <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	685b      	ldr	r3, [r3, #4]
 801901a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801901c:	23f0      	movs	r3, #240	; 0xf0
 801901e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	891b      	ldrh	r3, [r3, #8]
 8019024:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801902a:	e00c      	b.n	8019046 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801902e:	895b      	ldrh	r3, [r3, #10]
 8019030:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019032:	1ad3      	subs	r3, r2, r3
 8019034:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8019036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019038:	895b      	ldrh	r3, [r3, #10]
 801903a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801903c:	1ad3      	subs	r3, r2, r3
 801903e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8019040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019048:	2b00      	cmp	r3, #0
 801904a:	d004      	beq.n	8019056 <dhcp_parse_reply+0x6a>
 801904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801904e:	895b      	ldrh	r3, [r3, #10]
 8019050:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019052:	429a      	cmp	r2, r3
 8019054:	d2ea      	bcs.n	801902c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8019056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019058:	2b00      	cmp	r3, #0
 801905a:	d102      	bne.n	8019062 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801905c:	f06f 0301 	mvn.w	r3, #1
 8019060:	e2c4      	b.n	80195ec <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8019062:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019064:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8019066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019068:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019070:	e267      	b.n	8019542 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8019072:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019076:	4413      	add	r3, r2
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801907c:	2300      	movs	r3, #0
 801907e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8019082:	f04f 33ff 	mov.w	r3, #4294967295
 8019086:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019088:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801908a:	3302      	adds	r3, #2
 801908c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801908e:	8bfa      	ldrh	r2, [r7, #30]
 8019090:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019092:	429a      	cmp	r2, r3
 8019094:	d202      	bcs.n	801909c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019096:	f06f 0301 	mvn.w	r3, #1
 801909a:	e2a7      	b.n	80195ec <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801909c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801909e:	3301      	adds	r3, #1
 80190a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190a2:	8952      	ldrh	r2, [r2, #10]
 80190a4:	4293      	cmp	r3, r2
 80190a6:	da07      	bge.n	80190b8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80190a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190aa:	3301      	adds	r3, #1
 80190ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80190ae:	4413      	add	r3, r2
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80190b6:	e00b      	b.n	80190d0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80190b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d004      	beq.n	80190ca <dhcp_parse_reply+0xde>
 80190c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	685b      	ldr	r3, [r3, #4]
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	e000      	b.n	80190cc <dhcp_parse_reply+0xe0>
 80190ca:	2300      	movs	r3, #0
 80190cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80190d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80190d8:	7dfb      	ldrb	r3, [r7, #23]
 80190da:	2b3b      	cmp	r3, #59	; 0x3b
 80190dc:	f200 815a 	bhi.w	8019394 <dhcp_parse_reply+0x3a8>
 80190e0:	a201      	add	r2, pc, #4	; (adr r2, 80190e8 <dhcp_parse_reply+0xfc>)
 80190e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190e6:	bf00      	nop
 80190e8:	080191d9 	.word	0x080191d9
 80190ec:	080191e9 	.word	0x080191e9
 80190f0:	08019395 	.word	0x08019395
 80190f4:	0801920b 	.word	0x0801920b
 80190f8:	08019395 	.word	0x08019395
 80190fc:	08019395 	.word	0x08019395
 8019100:	08019237 	.word	0x08019237
 8019104:	08019395 	.word	0x08019395
 8019108:	08019395 	.word	0x08019395
 801910c:	08019395 	.word	0x08019395
 8019110:	08019395 	.word	0x08019395
 8019114:	08019395 	.word	0x08019395
 8019118:	08019395 	.word	0x08019395
 801911c:	08019395 	.word	0x08019395
 8019120:	08019395 	.word	0x08019395
 8019124:	08019395 	.word	0x08019395
 8019128:	08019395 	.word	0x08019395
 801912c:	08019395 	.word	0x08019395
 8019130:	08019395 	.word	0x08019395
 8019134:	08019395 	.word	0x08019395
 8019138:	08019395 	.word	0x08019395
 801913c:	08019395 	.word	0x08019395
 8019140:	08019395 	.word	0x08019395
 8019144:	08019395 	.word	0x08019395
 8019148:	08019395 	.word	0x08019395
 801914c:	08019395 	.word	0x08019395
 8019150:	08019395 	.word	0x08019395
 8019154:	08019395 	.word	0x08019395
 8019158:	08019395 	.word	0x08019395
 801915c:	08019395 	.word	0x08019395
 8019160:	08019395 	.word	0x08019395
 8019164:	08019395 	.word	0x08019395
 8019168:	08019395 	.word	0x08019395
 801916c:	08019395 	.word	0x08019395
 8019170:	08019395 	.word	0x08019395
 8019174:	08019395 	.word	0x08019395
 8019178:	08019395 	.word	0x08019395
 801917c:	08019395 	.word	0x08019395
 8019180:	08019395 	.word	0x08019395
 8019184:	08019395 	.word	0x08019395
 8019188:	08019395 	.word	0x08019395
 801918c:	08019395 	.word	0x08019395
 8019190:	08019395 	.word	0x08019395
 8019194:	08019395 	.word	0x08019395
 8019198:	08019395 	.word	0x08019395
 801919c:	08019395 	.word	0x08019395
 80191a0:	08019395 	.word	0x08019395
 80191a4:	08019395 	.word	0x08019395
 80191a8:	08019395 	.word	0x08019395
 80191ac:	08019395 	.word	0x08019395
 80191b0:	08019395 	.word	0x08019395
 80191b4:	0801928d 	.word	0x0801928d
 80191b8:	080192af 	.word	0x080192af
 80191bc:	0801930d 	.word	0x0801930d
 80191c0:	0801932f 	.word	0x0801932f
 80191c4:	08019395 	.word	0x08019395
 80191c8:	08019395 	.word	0x08019395
 80191cc:	08019395 	.word	0x08019395
 80191d0:	08019351 	.word	0x08019351
 80191d4:	08019373 	.word	0x08019373
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80191d8:	2300      	movs	r3, #0
 80191da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80191e6:	e0d9      	b.n	801939c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80191e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191ec:	2b04      	cmp	r3, #4
 80191ee:	d009      	beq.n	8019204 <dhcp_parse_reply+0x218>
 80191f0:	4b3f      	ldr	r3, [pc, #252]	; (80192f0 <dhcp_parse_reply+0x304>)
 80191f2:	f240 622e 	movw	r2, #1582	; 0x62e
 80191f6:	493f      	ldr	r1, [pc, #252]	; (80192f4 <dhcp_parse_reply+0x308>)
 80191f8:	483f      	ldr	r0, [pc, #252]	; (80192f8 <dhcp_parse_reply+0x30c>)
 80191fa:	f003 ff6f 	bl	801d0dc <iprintf>
 80191fe:	f06f 0305 	mvn.w	r3, #5
 8019202:	e1f3      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019204:	2306      	movs	r3, #6
 8019206:	623b      	str	r3, [r7, #32]
        break;
 8019208:	e0c8      	b.n	801939c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801920a:	2304      	movs	r3, #4
 801920c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019210:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019218:	429a      	cmp	r2, r3
 801921a:	d209      	bcs.n	8019230 <dhcp_parse_reply+0x244>
 801921c:	4b34      	ldr	r3, [pc, #208]	; (80192f0 <dhcp_parse_reply+0x304>)
 801921e:	f240 6233 	movw	r2, #1587	; 0x633
 8019222:	4936      	ldr	r1, [pc, #216]	; (80192fc <dhcp_parse_reply+0x310>)
 8019224:	4834      	ldr	r0, [pc, #208]	; (80192f8 <dhcp_parse_reply+0x30c>)
 8019226:	f003 ff59 	bl	801d0dc <iprintf>
 801922a:	f06f 0305 	mvn.w	r3, #5
 801922e:	e1dd      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019230:	2307      	movs	r3, #7
 8019232:	623b      	str	r3, [r7, #32]
        break;
 8019234:	e0b2      	b.n	801939c <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8019236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801923a:	f003 0303 	and.w	r3, r3, #3
 801923e:	b2db      	uxtb	r3, r3
 8019240:	2b00      	cmp	r3, #0
 8019242:	d009      	beq.n	8019258 <dhcp_parse_reply+0x26c>
 8019244:	4b2a      	ldr	r3, [pc, #168]	; (80192f0 <dhcp_parse_reply+0x304>)
 8019246:	f240 6239 	movw	r2, #1593	; 0x639
 801924a:	492d      	ldr	r1, [pc, #180]	; (8019300 <dhcp_parse_reply+0x314>)
 801924c:	482a      	ldr	r0, [pc, #168]	; (80192f8 <dhcp_parse_reply+0x30c>)
 801924e:	f003 ff45 	bl	801d0dc <iprintf>
 8019252:	f06f 0305 	mvn.w	r3, #5
 8019256:	e1c9      	b.n	80195ec <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8019258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801925c:	2b08      	cmp	r3, #8
 801925e:	bf28      	it	cs
 8019260:	2308      	movcs	r3, #8
 8019262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019266:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801926a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801926e:	429a      	cmp	r2, r3
 8019270:	d209      	bcs.n	8019286 <dhcp_parse_reply+0x29a>
 8019272:	4b1f      	ldr	r3, [pc, #124]	; (80192f0 <dhcp_parse_reply+0x304>)
 8019274:	f240 623c 	movw	r2, #1596	; 0x63c
 8019278:	4920      	ldr	r1, [pc, #128]	; (80192fc <dhcp_parse_reply+0x310>)
 801927a:	481f      	ldr	r0, [pc, #124]	; (80192f8 <dhcp_parse_reply+0x30c>)
 801927c:	f003 ff2e 	bl	801d0dc <iprintf>
 8019280:	f06f 0305 	mvn.w	r3, #5
 8019284:	e1b2      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8019286:	2308      	movs	r3, #8
 8019288:	623b      	str	r3, [r7, #32]
        break;
 801928a:	e087      	b.n	801939c <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801928c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019290:	2b04      	cmp	r3, #4
 8019292:	d009      	beq.n	80192a8 <dhcp_parse_reply+0x2bc>
 8019294:	4b16      	ldr	r3, [pc, #88]	; (80192f0 <dhcp_parse_reply+0x304>)
 8019296:	f240 6241 	movw	r2, #1601	; 0x641
 801929a:	4916      	ldr	r1, [pc, #88]	; (80192f4 <dhcp_parse_reply+0x308>)
 801929c:	4816      	ldr	r0, [pc, #88]	; (80192f8 <dhcp_parse_reply+0x30c>)
 801929e:	f003 ff1d 	bl	801d0dc <iprintf>
 80192a2:	f06f 0305 	mvn.w	r3, #5
 80192a6:	e1a1      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80192a8:	2303      	movs	r3, #3
 80192aa:	623b      	str	r3, [r7, #32]
        break;
 80192ac:	e076      	b.n	801939c <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80192ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192b2:	2b01      	cmp	r3, #1
 80192b4:	d009      	beq.n	80192ca <dhcp_parse_reply+0x2de>
 80192b6:	4b0e      	ldr	r3, [pc, #56]	; (80192f0 <dhcp_parse_reply+0x304>)
 80192b8:	f240 624f 	movw	r2, #1615	; 0x64f
 80192bc:	4911      	ldr	r1, [pc, #68]	; (8019304 <dhcp_parse_reply+0x318>)
 80192be:	480e      	ldr	r0, [pc, #56]	; (80192f8 <dhcp_parse_reply+0x30c>)
 80192c0:	f003 ff0c 	bl	801d0dc <iprintf>
 80192c4:	f06f 0305 	mvn.w	r3, #5
 80192c8:	e190      	b.n	80195ec <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80192ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80192cc:	2bf0      	cmp	r3, #240	; 0xf0
 80192ce:	d009      	beq.n	80192e4 <dhcp_parse_reply+0x2f8>
 80192d0:	4b07      	ldr	r3, [pc, #28]	; (80192f0 <dhcp_parse_reply+0x304>)
 80192d2:	f240 6251 	movw	r2, #1617	; 0x651
 80192d6:	490c      	ldr	r1, [pc, #48]	; (8019308 <dhcp_parse_reply+0x31c>)
 80192d8:	4807      	ldr	r0, [pc, #28]	; (80192f8 <dhcp_parse_reply+0x30c>)
 80192da:	f003 feff 	bl	801d0dc <iprintf>
 80192de:	f06f 0305 	mvn.w	r3, #5
 80192e2:	e183      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80192e4:	2300      	movs	r3, #0
 80192e6:	623b      	str	r3, [r7, #32]
        break;
 80192e8:	e058      	b.n	801939c <dhcp_parse_reply+0x3b0>
 80192ea:	bf00      	nop
 80192ec:	200086f4 	.word	0x200086f4
 80192f0:	08020348 	.word	0x08020348
 80192f4:	080205d0 	.word	0x080205d0
 80192f8:	080203a8 	.word	0x080203a8
 80192fc:	080205dc 	.word	0x080205dc
 8019300:	080205f0 	.word	0x080205f0
 8019304:	08020600 	.word	0x08020600
 8019308:	0802060c 	.word	0x0802060c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801930c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019310:	2b01      	cmp	r3, #1
 8019312:	d009      	beq.n	8019328 <dhcp_parse_reply+0x33c>
 8019314:	4b9d      	ldr	r3, [pc, #628]	; (801958c <dhcp_parse_reply+0x5a0>)
 8019316:	f240 6255 	movw	r2, #1621	; 0x655
 801931a:	499d      	ldr	r1, [pc, #628]	; (8019590 <dhcp_parse_reply+0x5a4>)
 801931c:	489d      	ldr	r0, [pc, #628]	; (8019594 <dhcp_parse_reply+0x5a8>)
 801931e:	f003 fedd 	bl	801d0dc <iprintf>
 8019322:	f06f 0305 	mvn.w	r3, #5
 8019326:	e161      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019328:	2301      	movs	r3, #1
 801932a:	623b      	str	r3, [r7, #32]
        break;
 801932c:	e036      	b.n	801939c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801932e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019332:	2b04      	cmp	r3, #4
 8019334:	d009      	beq.n	801934a <dhcp_parse_reply+0x35e>
 8019336:	4b95      	ldr	r3, [pc, #596]	; (801958c <dhcp_parse_reply+0x5a0>)
 8019338:	f240 6259 	movw	r2, #1625	; 0x659
 801933c:	4996      	ldr	r1, [pc, #600]	; (8019598 <dhcp_parse_reply+0x5ac>)
 801933e:	4895      	ldr	r0, [pc, #596]	; (8019594 <dhcp_parse_reply+0x5a8>)
 8019340:	f003 fecc 	bl	801d0dc <iprintf>
 8019344:	f06f 0305 	mvn.w	r3, #5
 8019348:	e150      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801934a:	2302      	movs	r3, #2
 801934c:	623b      	str	r3, [r7, #32]
        break;
 801934e:	e025      	b.n	801939c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019354:	2b04      	cmp	r3, #4
 8019356:	d009      	beq.n	801936c <dhcp_parse_reply+0x380>
 8019358:	4b8c      	ldr	r3, [pc, #560]	; (801958c <dhcp_parse_reply+0x5a0>)
 801935a:	f240 625d 	movw	r2, #1629	; 0x65d
 801935e:	498e      	ldr	r1, [pc, #568]	; (8019598 <dhcp_parse_reply+0x5ac>)
 8019360:	488c      	ldr	r0, [pc, #560]	; (8019594 <dhcp_parse_reply+0x5a8>)
 8019362:	f003 febb 	bl	801d0dc <iprintf>
 8019366:	f06f 0305 	mvn.w	r3, #5
 801936a:	e13f      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 801936c:	2304      	movs	r3, #4
 801936e:	623b      	str	r3, [r7, #32]
        break;
 8019370:	e014      	b.n	801939c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019376:	2b04      	cmp	r3, #4
 8019378:	d009      	beq.n	801938e <dhcp_parse_reply+0x3a2>
 801937a:	4b84      	ldr	r3, [pc, #528]	; (801958c <dhcp_parse_reply+0x5a0>)
 801937c:	f240 6261 	movw	r2, #1633	; 0x661
 8019380:	4985      	ldr	r1, [pc, #532]	; (8019598 <dhcp_parse_reply+0x5ac>)
 8019382:	4884      	ldr	r0, [pc, #528]	; (8019594 <dhcp_parse_reply+0x5a8>)
 8019384:	f003 feaa 	bl	801d0dc <iprintf>
 8019388:	f06f 0305 	mvn.w	r3, #5
 801938c:	e12e      	b.n	80195ec <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801938e:	2305      	movs	r3, #5
 8019390:	623b      	str	r3, [r7, #32]
        break;
 8019392:	e003      	b.n	801939c <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8019394:	2300      	movs	r3, #0
 8019396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801939a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801939c:	7dfb      	ldrb	r3, [r7, #23]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d103      	bne.n	80193aa <dhcp_parse_reply+0x3be>
      offset++;
 80193a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80193a4:	3301      	adds	r3, #1
 80193a6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80193a8:	e0a1      	b.n	80194ee <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80193aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80193ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193b0:	4413      	add	r3, r2
 80193b2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80193b6:	4293      	cmp	r3, r2
 80193b8:	dd02      	ble.n	80193c0 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 80193ba:	f06f 0301 	mvn.w	r3, #1
 80193be:	e115      	b.n	80195ec <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 80193c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193c4:	b29a      	uxth	r2, r3
 80193c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80193c8:	4413      	add	r3, r2
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	3302      	adds	r3, #2
 80193ce:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80193d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	f000 808a 	beq.w	80194ee <dhcp_parse_reply+0x502>
        u32_t value = 0;
 80193da:	2300      	movs	r3, #0
 80193dc:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80193de:	6a3b      	ldr	r3, [r7, #32]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	db02      	blt.n	80193ea <dhcp_parse_reply+0x3fe>
 80193e4:	6a3b      	ldr	r3, [r7, #32]
 80193e6:	2b09      	cmp	r3, #9
 80193e8:	dd06      	ble.n	80193f8 <dhcp_parse_reply+0x40c>
 80193ea:	4b68      	ldr	r3, [pc, #416]	; (801958c <dhcp_parse_reply+0x5a0>)
 80193ec:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80193f0:	496a      	ldr	r1, [pc, #424]	; (801959c <dhcp_parse_reply+0x5b0>)
 80193f2:	4868      	ldr	r0, [pc, #416]	; (8019594 <dhcp_parse_reply+0x5a8>)
 80193f4:	f003 fe72 	bl	801d0dc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80193f8:	4a69      	ldr	r2, [pc, #420]	; (80195a0 <dhcp_parse_reply+0x5b4>)
 80193fa:	6a3b      	ldr	r3, [r7, #32]
 80193fc:	4413      	add	r3, r2
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d174      	bne.n	80194ee <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8019404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019408:	2b04      	cmp	r3, #4
 801940a:	bf28      	it	cs
 801940c:	2304      	movcs	r3, #4
 801940e:	b2db      	uxtb	r3, r3
 8019410:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019412:	8bfb      	ldrh	r3, [r7, #30]
 8019414:	8aba      	ldrh	r2, [r7, #20]
 8019416:	f107 0108 	add.w	r1, r7, #8
 801941a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801941c:	f7f7 fba6 	bl	8010b6c <pbuf_copy_partial>
 8019420:	4603      	mov	r3, r0
 8019422:	461a      	mov	r2, r3
 8019424:	8abb      	ldrh	r3, [r7, #20]
 8019426:	4293      	cmp	r3, r2
 8019428:	d002      	beq.n	8019430 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801942a:	f06f 0301 	mvn.w	r3, #1
 801942e:	e0dd      	b.n	80195ec <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8019430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019434:	2b04      	cmp	r3, #4
 8019436:	d933      	bls.n	80194a0 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801943c:	f003 0303 	and.w	r3, r3, #3
 8019440:	b2db      	uxtb	r3, r3
 8019442:	2b00      	cmp	r3, #0
 8019444:	d009      	beq.n	801945a <dhcp_parse_reply+0x46e>
 8019446:	4b51      	ldr	r3, [pc, #324]	; (801958c <dhcp_parse_reply+0x5a0>)
 8019448:	f240 6281 	movw	r2, #1665	; 0x681
 801944c:	4955      	ldr	r1, [pc, #340]	; (80195a4 <dhcp_parse_reply+0x5b8>)
 801944e:	4851      	ldr	r0, [pc, #324]	; (8019594 <dhcp_parse_reply+0x5a8>)
 8019450:	f003 fe44 	bl	801d0dc <iprintf>
 8019454:	f06f 0305 	mvn.w	r3, #5
 8019458:	e0c8      	b.n	80195ec <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801945a:	4a51      	ldr	r2, [pc, #324]	; (80195a0 <dhcp_parse_reply+0x5b4>)
 801945c:	6a3b      	ldr	r3, [r7, #32]
 801945e:	4413      	add	r3, r2
 8019460:	2201      	movs	r2, #1
 8019462:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	4618      	mov	r0, r3
 8019468:	f7f5 fb44 	bl	800eaf4 <lwip_htonl>
 801946c:	4602      	mov	r2, r0
 801946e:	494e      	ldr	r1, [pc, #312]	; (80195a8 <dhcp_parse_reply+0x5bc>)
 8019470:	6a3b      	ldr	r3, [r7, #32]
 8019472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801947a:	3b04      	subs	r3, #4
 801947c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8019480:	8bfb      	ldrh	r3, [r7, #30]
 8019482:	3304      	adds	r3, #4
 8019484:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8019486:	8a7a      	ldrh	r2, [r7, #18]
 8019488:	8bfb      	ldrh	r3, [r7, #30]
 801948a:	429a      	cmp	r2, r3
 801948c:	d202      	bcs.n	8019494 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801948e:	f06f 0301 	mvn.w	r3, #1
 8019492:	e0ab      	b.n	80195ec <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 8019494:	8a7b      	ldrh	r3, [r7, #18]
 8019496:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019498:	6a3b      	ldr	r3, [r7, #32]
 801949a:	3301      	adds	r3, #1
 801949c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801949e:	e79e      	b.n	80193de <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 80194a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194a4:	2b04      	cmp	r3, #4
 80194a6:	d106      	bne.n	80194b6 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7f5 fb22 	bl	800eaf4 <lwip_htonl>
 80194b0:	4603      	mov	r3, r0
 80194b2:	60bb      	str	r3, [r7, #8]
 80194b4:	e011      	b.n	80194da <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80194b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194ba:	2b01      	cmp	r3, #1
 80194bc:	d009      	beq.n	80194d2 <dhcp_parse_reply+0x4e6>
 80194be:	4b33      	ldr	r3, [pc, #204]	; (801958c <dhcp_parse_reply+0x5a0>)
 80194c0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80194c4:	4939      	ldr	r1, [pc, #228]	; (80195ac <dhcp_parse_reply+0x5c0>)
 80194c6:	4833      	ldr	r0, [pc, #204]	; (8019594 <dhcp_parse_reply+0x5a8>)
 80194c8:	f003 fe08 	bl	801d0dc <iprintf>
 80194cc:	f06f 0305 	mvn.w	r3, #5
 80194d0:	e08c      	b.n	80195ec <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 80194d2:	f107 0308 	add.w	r3, r7, #8
 80194d6:	781b      	ldrb	r3, [r3, #0]
 80194d8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80194da:	4a31      	ldr	r2, [pc, #196]	; (80195a0 <dhcp_parse_reply+0x5b4>)
 80194dc:	6a3b      	ldr	r3, [r7, #32]
 80194de:	4413      	add	r3, r2
 80194e0:	2201      	movs	r2, #1
 80194e2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80194e4:	68ba      	ldr	r2, [r7, #8]
 80194e6:	4930      	ldr	r1, [pc, #192]	; (80195a8 <dhcp_parse_reply+0x5bc>)
 80194e8:	6a3b      	ldr	r3, [r7, #32]
 80194ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80194ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194f0:	895b      	ldrh	r3, [r3, #10]
 80194f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d324      	bcc.n	8019542 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 80194f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194fa:	895b      	ldrh	r3, [r3, #10]
 80194fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80194fe:	1ad3      	subs	r3, r2, r3
 8019500:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8019502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019504:	895b      	ldrh	r3, [r3, #10]
 8019506:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019508:	1ad3      	subs	r3, r2, r3
 801950a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801950c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801950e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019510:	429a      	cmp	r2, r3
 8019512:	d213      	bcs.n	801953c <dhcp_parse_reply+0x550>
        q = q->next;
 8019514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801951c:	2b00      	cmp	r3, #0
 801951e:	d109      	bne.n	8019534 <dhcp_parse_reply+0x548>
 8019520:	4b1a      	ldr	r3, [pc, #104]	; (801958c <dhcp_parse_reply+0x5a0>)
 8019522:	f240 629d 	movw	r2, #1693	; 0x69d
 8019526:	4922      	ldr	r1, [pc, #136]	; (80195b0 <dhcp_parse_reply+0x5c4>)
 8019528:	481a      	ldr	r0, [pc, #104]	; (8019594 <dhcp_parse_reply+0x5a8>)
 801952a:	f003 fdd7 	bl	801d0dc <iprintf>
 801952e:	f06f 0305 	mvn.w	r3, #5
 8019532:	e05b      	b.n	80195ec <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8019534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019536:	685b      	ldr	r3, [r3, #4]
 8019538:	63fb      	str	r3, [r7, #60]	; 0x3c
 801953a:	e002      	b.n	8019542 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801953c:	f06f 0301 	mvn.w	r3, #1
 8019540:	e054      	b.n	80195ec <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00a      	beq.n	801955e <dhcp_parse_reply+0x572>
 8019548:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801954a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801954c:	429a      	cmp	r2, r3
 801954e:	d206      	bcs.n	801955e <dhcp_parse_reply+0x572>
 8019550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019554:	4413      	add	r3, r2
 8019556:	781b      	ldrb	r3, [r3, #0]
 8019558:	2bff      	cmp	r3, #255	; 0xff
 801955a:	f47f ad8a 	bne.w	8019072 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801955e:	4b10      	ldr	r3, [pc, #64]	; (80195a0 <dhcp_parse_reply+0x5b4>)
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d02d      	beq.n	80195c2 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019566:	4b10      	ldr	r3, [pc, #64]	; (80195a8 <dhcp_parse_reply+0x5bc>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801956c:	4b0c      	ldr	r3, [pc, #48]	; (80195a0 <dhcp_parse_reply+0x5b4>)
 801956e:	2200      	movs	r2, #0
 8019570:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	2b01      	cmp	r3, #1
 8019576:	d102      	bne.n	801957e <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8019578:	2301      	movs	r3, #1
 801957a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801957c:	e021      	b.n	80195c2 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	2b02      	cmp	r3, #2
 8019582:	d117      	bne.n	80195b4 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8019584:	2301      	movs	r3, #1
 8019586:	62bb      	str	r3, [r7, #40]	; 0x28
 8019588:	e01b      	b.n	80195c2 <dhcp_parse_reply+0x5d6>
 801958a:	bf00      	nop
 801958c:	08020348 	.word	0x08020348
 8019590:	08020600 	.word	0x08020600
 8019594:	080203a8 	.word	0x080203a8
 8019598:	080205d0 	.word	0x080205d0
 801959c:	08020624 	.word	0x08020624
 80195a0:	200086f4 	.word	0x200086f4
 80195a4:	08020638 	.word	0x08020638
 80195a8:	200086cc 	.word	0x200086cc
 80195ac:	08020650 	.word	0x08020650
 80195b0:	08020664 	.word	0x08020664
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	2b03      	cmp	r3, #3
 80195b8:	d103      	bne.n	80195c2 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 80195ba:	2301      	movs	r3, #1
 80195bc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80195be:	2301      	movs	r3, #1
 80195c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80195c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d006      	beq.n	80195d6 <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80195c8:	2300      	movs	r3, #0
 80195ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80195cc:	236c      	movs	r3, #108	; 0x6c
 80195ce:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80195d0:	23ec      	movs	r3, #236	; 0xec
 80195d2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80195d4:	e527      	b.n	8019026 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80195d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d006      	beq.n	80195ea <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 80195dc:	2300      	movs	r3, #0
 80195de:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80195e0:	232c      	movs	r3, #44	; 0x2c
 80195e2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80195e4:	236c      	movs	r3, #108	; 0x6c
 80195e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80195e8:	e51d      	b.n	8019026 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80195ea:	2300      	movs	r3, #0
}
 80195ec:	4618      	mov	r0, r3
 80195ee:	3740      	adds	r7, #64	; 0x40
 80195f0:	46bd      	mov	sp, r7
 80195f2:	bd80      	pop	{r7, pc}

080195f4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b08a      	sub	sp, #40	; 0x28
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	60f8      	str	r0, [r7, #12]
 80195fc:	60b9      	str	r1, [r7, #8]
 80195fe:	607a      	str	r2, [r7, #4]
 8019600:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019602:	4b60      	ldr	r3, [pc, #384]	; (8019784 <dhcp_recv+0x190>)
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019608:	6a3b      	ldr	r3, [r7, #32]
 801960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801960c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019614:	69fb      	ldr	r3, [r7, #28]
 8019616:	2b00      	cmp	r3, #0
 8019618:	f000 809d 	beq.w	8019756 <dhcp_recv+0x162>
 801961c:	69fb      	ldr	r3, [r7, #28]
 801961e:	791b      	ldrb	r3, [r3, #4]
 8019620:	2b00      	cmp	r3, #0
 8019622:	f000 8098 	beq.w	8019756 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	895b      	ldrh	r3, [r3, #10]
 801962a:	2b2b      	cmp	r3, #43	; 0x2b
 801962c:	f240 8095 	bls.w	801975a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019630:	69bb      	ldr	r3, [r7, #24]
 8019632:	781b      	ldrb	r3, [r3, #0]
 8019634:	2b02      	cmp	r3, #2
 8019636:	f040 8092 	bne.w	801975e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801963a:	2300      	movs	r3, #0
 801963c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019640:	e012      	b.n	8019668 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019646:	6a3a      	ldr	r2, [r7, #32]
 8019648:	4413      	add	r3, r2
 801964a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801964e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019652:	69b9      	ldr	r1, [r7, #24]
 8019654:	440b      	add	r3, r1
 8019656:	7f1b      	ldrb	r3, [r3, #28]
 8019658:	429a      	cmp	r2, r3
 801965a:	f040 8082 	bne.w	8019762 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801965e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019662:	3301      	adds	r3, #1
 8019664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019668:	6a3b      	ldr	r3, [r7, #32]
 801966a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801966e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019672:	429a      	cmp	r2, r3
 8019674:	d203      	bcs.n	801967e <dhcp_recv+0x8a>
 8019676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801967a:	2b05      	cmp	r3, #5
 801967c:	d9e1      	bls.n	8019642 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801967e:	69bb      	ldr	r3, [r7, #24]
 8019680:	685b      	ldr	r3, [r3, #4]
 8019682:	4618      	mov	r0, r3
 8019684:	f7f5 fa36 	bl	800eaf4 <lwip_htonl>
 8019688:	4602      	mov	r2, r0
 801968a:	69fb      	ldr	r3, [r7, #28]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	429a      	cmp	r2, r3
 8019690:	d169      	bne.n	8019766 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019692:	69f9      	ldr	r1, [r7, #28]
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f7ff fca9 	bl	8018fec <dhcp_parse_reply>
 801969a:	4603      	mov	r3, r0
 801969c:	2b00      	cmp	r3, #0
 801969e:	d164      	bne.n	801976a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80196a0:	4b39      	ldr	r3, [pc, #228]	; (8019788 <dhcp_recv+0x194>)
 80196a2:	785b      	ldrb	r3, [r3, #1]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d062      	beq.n	801976e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80196ae:	4b37      	ldr	r3, [pc, #220]	; (801978c <dhcp_recv+0x198>)
 80196b0:	685b      	ldr	r3, [r3, #4]
 80196b2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80196b4:	7cfb      	ldrb	r3, [r7, #19]
 80196b6:	2b05      	cmp	r3, #5
 80196b8:	d12a      	bne.n	8019710 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	795b      	ldrb	r3, [r3, #5]
 80196be:	2b01      	cmp	r3, #1
 80196c0:	d112      	bne.n	80196e8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80196c2:	6979      	ldr	r1, [r7, #20]
 80196c4:	6a38      	ldr	r0, [r7, #32]
 80196c6:	f7fe fd8d 	bl	80181e4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80196ca:	6a3b      	ldr	r3, [r7, #32]
 80196cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80196d0:	f003 0308 	and.w	r3, r3, #8
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d003      	beq.n	80196e0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80196d8:	6a38      	ldr	r0, [r7, #32]
 80196da:	f7fe fafd 	bl	8017cd8 <dhcp_check>
 80196de:	e049      	b.n	8019774 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80196e0:	6a38      	ldr	r0, [r7, #32]
 80196e2:	f7ff f837 	bl	8018754 <dhcp_bind>
 80196e6:	e045      	b.n	8019774 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80196e8:	69fb      	ldr	r3, [r7, #28]
 80196ea:	795b      	ldrb	r3, [r3, #5]
 80196ec:	2b03      	cmp	r3, #3
 80196ee:	d007      	beq.n	8019700 <dhcp_recv+0x10c>
 80196f0:	69fb      	ldr	r3, [r7, #28]
 80196f2:	795b      	ldrb	r3, [r3, #5]
 80196f4:	2b04      	cmp	r3, #4
 80196f6:	d003      	beq.n	8019700 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80196f8:	69fb      	ldr	r3, [r7, #28]
 80196fa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80196fc:	2b05      	cmp	r3, #5
 80196fe:	d139      	bne.n	8019774 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019700:	6979      	ldr	r1, [r7, #20]
 8019702:	6a38      	ldr	r0, [r7, #32]
 8019704:	f7fe fd6e 	bl	80181e4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8019708:	6a38      	ldr	r0, [r7, #32]
 801970a:	f7ff f823 	bl	8018754 <dhcp_bind>
 801970e:	e031      	b.n	8019774 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019710:	7cfb      	ldrb	r3, [r7, #19]
 8019712:	2b06      	cmp	r3, #6
 8019714:	d113      	bne.n	801973e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019716:	69fb      	ldr	r3, [r7, #28]
 8019718:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801971a:	2b03      	cmp	r3, #3
 801971c:	d00b      	beq.n	8019736 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	795b      	ldrb	r3, [r3, #5]
 8019722:	2b01      	cmp	r3, #1
 8019724:	d007      	beq.n	8019736 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801972a:	2b04      	cmp	r3, #4
 801972c:	d003      	beq.n	8019736 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	795b      	ldrb	r3, [r3, #5]
 8019732:	2b05      	cmp	r3, #5
 8019734:	d103      	bne.n	801973e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019736:	6a38      	ldr	r0, [r7, #32]
 8019738:	f7fe fab4 	bl	8017ca4 <dhcp_handle_nak>
 801973c:	e01a      	b.n	8019774 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801973e:	7cfb      	ldrb	r3, [r7, #19]
 8019740:	2b02      	cmp	r3, #2
 8019742:	d116      	bne.n	8019772 <dhcp_recv+0x17e>
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	795b      	ldrb	r3, [r3, #5]
 8019748:	2b06      	cmp	r3, #6
 801974a:	d112      	bne.n	8019772 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801974c:	6979      	ldr	r1, [r7, #20]
 801974e:	6a38      	ldr	r0, [r7, #32]
 8019750:	f7fe faf6 	bl	8017d40 <dhcp_handle_offer>
 8019754:	e00e      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019756:	bf00      	nop
 8019758:	e00c      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801975a:	bf00      	nop
 801975c:	e00a      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801975e:	bf00      	nop
 8019760:	e008      	b.n	8019774 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019762:	bf00      	nop
 8019764:	e006      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019766:	bf00      	nop
 8019768:	e004      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801976a:	bf00      	nop
 801976c:	e002      	b.n	8019774 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801976e:	bf00      	nop
 8019770:	e000      	b.n	8019774 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019772:	bf00      	nop
  pbuf_free(p);
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f7f6 ffff 	bl	8010778 <pbuf_free>
}
 801977a:	bf00      	nop
 801977c:	3728      	adds	r7, #40	; 0x28
 801977e:	46bd      	mov	sp, r7
 8019780:	bd80      	pop	{r7, pc}
 8019782:	bf00      	nop
 8019784:	2000550c 	.word	0x2000550c
 8019788:	200086f4 	.word	0x200086f4
 801978c:	200086cc 	.word	0x200086cc

08019790 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b088      	sub	sp, #32
 8019794:	af00      	add	r7, sp, #0
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	603b      	str	r3, [r7, #0]
 801979c:	4613      	mov	r3, r2
 801979e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d108      	bne.n	80197b8 <dhcp_create_msg+0x28>
 80197a6:	4b5f      	ldr	r3, [pc, #380]	; (8019924 <dhcp_create_msg+0x194>)
 80197a8:	f240 7269 	movw	r2, #1897	; 0x769
 80197ac:	495e      	ldr	r1, [pc, #376]	; (8019928 <dhcp_create_msg+0x198>)
 80197ae:	485f      	ldr	r0, [pc, #380]	; (801992c <dhcp_create_msg+0x19c>)
 80197b0:	f003 fc94 	bl	801d0dc <iprintf>
 80197b4:	2300      	movs	r3, #0
 80197b6:	e0b1      	b.n	801991c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d108      	bne.n	80197d0 <dhcp_create_msg+0x40>
 80197be:	4b59      	ldr	r3, [pc, #356]	; (8019924 <dhcp_create_msg+0x194>)
 80197c0:	f240 726a 	movw	r2, #1898	; 0x76a
 80197c4:	495a      	ldr	r1, [pc, #360]	; (8019930 <dhcp_create_msg+0x1a0>)
 80197c6:	4859      	ldr	r0, [pc, #356]	; (801992c <dhcp_create_msg+0x19c>)
 80197c8:	f003 fc88 	bl	801d0dc <iprintf>
 80197cc:	2300      	movs	r3, #0
 80197ce:	e0a5      	b.n	801991c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80197d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80197d4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80197d8:	2036      	movs	r0, #54	; 0x36
 80197da:	f7f6 fce9 	bl	80101b0 <pbuf_alloc>
 80197de:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80197e0:	69bb      	ldr	r3, [r7, #24]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d101      	bne.n	80197ea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80197e6:	2300      	movs	r3, #0
 80197e8:	e098      	b.n	801991c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80197ea:	69bb      	ldr	r3, [r7, #24]
 80197ec:	895b      	ldrh	r3, [r3, #10]
 80197ee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80197f2:	d206      	bcs.n	8019802 <dhcp_create_msg+0x72>
 80197f4:	4b4b      	ldr	r3, [pc, #300]	; (8019924 <dhcp_create_msg+0x194>)
 80197f6:	f240 7271 	movw	r2, #1905	; 0x771
 80197fa:	494e      	ldr	r1, [pc, #312]	; (8019934 <dhcp_create_msg+0x1a4>)
 80197fc:	484b      	ldr	r0, [pc, #300]	; (801992c <dhcp_create_msg+0x19c>)
 80197fe:	f003 fc6d 	bl	801d0dc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019802:	79fb      	ldrb	r3, [r7, #7]
 8019804:	2b03      	cmp	r3, #3
 8019806:	d103      	bne.n	8019810 <dhcp_create_msg+0x80>
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	795b      	ldrb	r3, [r3, #5]
 801980c:	2b03      	cmp	r3, #3
 801980e:	d10d      	bne.n	801982c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019810:	68bb      	ldr	r3, [r7, #8]
 8019812:	799b      	ldrb	r3, [r3, #6]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d105      	bne.n	8019824 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8019818:	f003 fad4 	bl	801cdc4 <rand>
 801981c:	4603      	mov	r3, r0
 801981e:	461a      	mov	r2, r3
 8019820:	4b45      	ldr	r3, [pc, #276]	; (8019938 <dhcp_create_msg+0x1a8>)
 8019822:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019824:	4b44      	ldr	r3, [pc, #272]	; (8019938 <dhcp_create_msg+0x1a8>)
 8019826:	681a      	ldr	r2, [r3, #0]
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801982c:	69bb      	ldr	r3, [r7, #24]
 801982e:	685b      	ldr	r3, [r3, #4]
 8019830:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8019832:	f44f 729a 	mov.w	r2, #308	; 0x134
 8019836:	2100      	movs	r1, #0
 8019838:	6978      	ldr	r0, [r7, #20]
 801983a:	f003 fcb4 	bl	801d1a6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	2201      	movs	r2, #1
 8019842:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	2201      	movs	r2, #1
 8019848:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8019850:	697b      	ldr	r3, [r7, #20]
 8019852:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	4618      	mov	r0, r3
 801985a:	f7f5 f94b 	bl	800eaf4 <lwip_htonl>
 801985e:	4602      	mov	r2, r0
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019864:	79fb      	ldrb	r3, [r7, #7]
 8019866:	2b08      	cmp	r3, #8
 8019868:	d010      	beq.n	801988c <dhcp_create_msg+0xfc>
 801986a:	79fb      	ldrb	r3, [r7, #7]
 801986c:	2b04      	cmp	r3, #4
 801986e:	d00d      	beq.n	801988c <dhcp_create_msg+0xfc>
 8019870:	79fb      	ldrb	r3, [r7, #7]
 8019872:	2b07      	cmp	r3, #7
 8019874:	d00a      	beq.n	801988c <dhcp_create_msg+0xfc>
 8019876:	79fb      	ldrb	r3, [r7, #7]
 8019878:	2b03      	cmp	r3, #3
 801987a:	d10c      	bne.n	8019896 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801987c:	68bb      	ldr	r3, [r7, #8]
 801987e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019880:	2b05      	cmp	r3, #5
 8019882:	d003      	beq.n	801988c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019884:	68bb      	ldr	r3, [r7, #8]
 8019886:	795b      	ldrb	r3, [r3, #5]
 8019888:	2b04      	cmp	r3, #4
 801988a:	d104      	bne.n	8019896 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	3304      	adds	r3, #4
 8019890:	681a      	ldr	r2, [r3, #0]
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019896:	2300      	movs	r3, #0
 8019898:	83fb      	strh	r3, [r7, #30]
 801989a:	e00c      	b.n	80198b6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801989c:	8bfa      	ldrh	r2, [r7, #30]
 801989e:	8bfb      	ldrh	r3, [r7, #30]
 80198a0:	68f9      	ldr	r1, [r7, #12]
 80198a2:	440a      	add	r2, r1
 80198a4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80198a8:	697a      	ldr	r2, [r7, #20]
 80198aa:	4413      	add	r3, r2
 80198ac:	460a      	mov	r2, r1
 80198ae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80198b0:	8bfb      	ldrh	r3, [r7, #30]
 80198b2:	3301      	adds	r3, #1
 80198b4:	83fb      	strh	r3, [r7, #30]
 80198b6:	8bfb      	ldrh	r3, [r7, #30]
 80198b8:	2b05      	cmp	r3, #5
 80198ba:	d9ef      	bls.n	801989c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	2200      	movs	r2, #0
 80198c0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80198c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80198c8:	2200      	movs	r2, #0
 80198ca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80198ce:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80198d2:	2200      	movs	r2, #0
 80198d4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80198d8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80198dc:	2200      	movs	r2, #0
 80198de:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80198e2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80198ec:	2301      	movs	r3, #1
 80198ee:	2235      	movs	r2, #53	; 0x35
 80198f0:	2000      	movs	r0, #0
 80198f2:	f7ff faab 	bl	8018e4c <dhcp_option>
 80198f6:	4603      	mov	r3, r0
 80198f8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019900:	79fa      	ldrb	r2, [r7, #7]
 8019902:	8a7b      	ldrh	r3, [r7, #18]
 8019904:	4618      	mov	r0, r3
 8019906:	f7ff fad5 	bl	8018eb4 <dhcp_option_byte>
 801990a:	4603      	mov	r3, r0
 801990c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d002      	beq.n	801991a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	8a7a      	ldrh	r2, [r7, #18]
 8019918:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801991a:	69bb      	ldr	r3, [r7, #24]
}
 801991c:	4618      	mov	r0, r3
 801991e:	3720      	adds	r7, #32
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}
 8019924:	08020348 	.word	0x08020348
 8019928:	08020678 	.word	0x08020678
 801992c:	080203a8 	.word	0x080203a8
 8019930:	08020698 	.word	0x08020698
 8019934:	080206b8 	.word	0x080206b8
 8019938:	20008708 	.word	0x20008708

0801993c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	4603      	mov	r3, r0
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
 8019948:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801994a:	89fb      	ldrh	r3, [r7, #14]
 801994c:	1c5a      	adds	r2, r3, #1
 801994e:	81fa      	strh	r2, [r7, #14]
 8019950:	461a      	mov	r2, r3
 8019952:	68bb      	ldr	r3, [r7, #8]
 8019954:	4413      	add	r3, r2
 8019956:	22ff      	movs	r2, #255	; 0xff
 8019958:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801995a:	e007      	b.n	801996c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801995c:	89fb      	ldrh	r3, [r7, #14]
 801995e:	1c5a      	adds	r2, r3, #1
 8019960:	81fa      	strh	r2, [r7, #14]
 8019962:	461a      	mov	r2, r3
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	4413      	add	r3, r2
 8019968:	2200      	movs	r2, #0
 801996a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801996c:	89fb      	ldrh	r3, [r7, #14]
 801996e:	2b43      	cmp	r3, #67	; 0x43
 8019970:	d904      	bls.n	801997c <dhcp_option_trailer+0x40>
 8019972:	89fb      	ldrh	r3, [r7, #14]
 8019974:	f003 0303 	and.w	r3, r3, #3
 8019978:	2b00      	cmp	r3, #0
 801997a:	d002      	beq.n	8019982 <dhcp_option_trailer+0x46>
 801997c:	89fb      	ldrh	r3, [r7, #14]
 801997e:	2b43      	cmp	r3, #67	; 0x43
 8019980:	d9ec      	bls.n	801995c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8019982:	89fb      	ldrh	r3, [r7, #14]
 8019984:	33f0      	adds	r3, #240	; 0xf0
 8019986:	b29b      	uxth	r3, r3
 8019988:	4619      	mov	r1, r3
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f7f6 fd6e 	bl	801046c <pbuf_realloc>
}
 8019990:	bf00      	nop
 8019992:	3710      	adds	r7, #16
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}

08019998 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8019998:	b480      	push	{r7}
 801999a:	b085      	sub	sp, #20
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d017      	beq.n	80199d6 <dhcp_supplied_address+0x3e>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d013      	beq.n	80199d6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199b2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	795b      	ldrb	r3, [r3, #5]
 80199b8:	2b0a      	cmp	r3, #10
 80199ba:	d007      	beq.n	80199cc <dhcp_supplied_address+0x34>
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	795b      	ldrb	r3, [r3, #5]
 80199c0:	2b05      	cmp	r3, #5
 80199c2:	d003      	beq.n	80199cc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80199c8:	2b04      	cmp	r3, #4
 80199ca:	d101      	bne.n	80199d0 <dhcp_supplied_address+0x38>
 80199cc:	2301      	movs	r3, #1
 80199ce:	e000      	b.n	80199d2 <dhcp_supplied_address+0x3a>
 80199d0:	2300      	movs	r3, #0
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	e000      	b.n	80199d8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80199d6:	2300      	movs	r3, #0
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3714      	adds	r7, #20
 80199dc:	46bd      	mov	sp, r7
 80199de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e2:	4770      	bx	lr

080199e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80199ec:	4915      	ldr	r1, [pc, #84]	; (8019a44 <etharp_free_entry+0x60>)
 80199ee:	687a      	ldr	r2, [r7, #4]
 80199f0:	4613      	mov	r3, r2
 80199f2:	005b      	lsls	r3, r3, #1
 80199f4:	4413      	add	r3, r2
 80199f6:	00db      	lsls	r3, r3, #3
 80199f8:	440b      	add	r3, r1
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d013      	beq.n	8019a28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019a00:	4910      	ldr	r1, [pc, #64]	; (8019a44 <etharp_free_entry+0x60>)
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	4613      	mov	r3, r2
 8019a06:	005b      	lsls	r3, r3, #1
 8019a08:	4413      	add	r3, r2
 8019a0a:	00db      	lsls	r3, r3, #3
 8019a0c:	440b      	add	r3, r1
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7f6 feb1 	bl	8010778 <pbuf_free>
    arp_table[i].q = NULL;
 8019a16:	490b      	ldr	r1, [pc, #44]	; (8019a44 <etharp_free_entry+0x60>)
 8019a18:	687a      	ldr	r2, [r7, #4]
 8019a1a:	4613      	mov	r3, r2
 8019a1c:	005b      	lsls	r3, r3, #1
 8019a1e:	4413      	add	r3, r2
 8019a20:	00db      	lsls	r3, r3, #3
 8019a22:	440b      	add	r3, r1
 8019a24:	2200      	movs	r2, #0
 8019a26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019a28:	4906      	ldr	r1, [pc, #24]	; (8019a44 <etharp_free_entry+0x60>)
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	005b      	lsls	r3, r3, #1
 8019a30:	4413      	add	r3, r2
 8019a32:	00db      	lsls	r3, r3, #3
 8019a34:	440b      	add	r3, r1
 8019a36:	3314      	adds	r3, #20
 8019a38:	2200      	movs	r2, #0
 8019a3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019a3c:	bf00      	nop
 8019a3e:	3708      	adds	r7, #8
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}
 8019a44:	2000870c 	.word	0x2000870c

08019a48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b082      	sub	sp, #8
 8019a4c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019a4e:	2300      	movs	r3, #0
 8019a50:	607b      	str	r3, [r7, #4]
 8019a52:	e096      	b.n	8019b82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019a54:	494f      	ldr	r1, [pc, #316]	; (8019b94 <etharp_tmr+0x14c>)
 8019a56:	687a      	ldr	r2, [r7, #4]
 8019a58:	4613      	mov	r3, r2
 8019a5a:	005b      	lsls	r3, r3, #1
 8019a5c:	4413      	add	r3, r2
 8019a5e:	00db      	lsls	r3, r3, #3
 8019a60:	440b      	add	r3, r1
 8019a62:	3314      	adds	r3, #20
 8019a64:	781b      	ldrb	r3, [r3, #0]
 8019a66:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019a68:	78fb      	ldrb	r3, [r7, #3]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f000 8086 	beq.w	8019b7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019a70:	4948      	ldr	r1, [pc, #288]	; (8019b94 <etharp_tmr+0x14c>)
 8019a72:	687a      	ldr	r2, [r7, #4]
 8019a74:	4613      	mov	r3, r2
 8019a76:	005b      	lsls	r3, r3, #1
 8019a78:	4413      	add	r3, r2
 8019a7a:	00db      	lsls	r3, r3, #3
 8019a7c:	440b      	add	r3, r1
 8019a7e:	3312      	adds	r3, #18
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	3301      	adds	r3, #1
 8019a84:	b298      	uxth	r0, r3
 8019a86:	4943      	ldr	r1, [pc, #268]	; (8019b94 <etharp_tmr+0x14c>)
 8019a88:	687a      	ldr	r2, [r7, #4]
 8019a8a:	4613      	mov	r3, r2
 8019a8c:	005b      	lsls	r3, r3, #1
 8019a8e:	4413      	add	r3, r2
 8019a90:	00db      	lsls	r3, r3, #3
 8019a92:	440b      	add	r3, r1
 8019a94:	3312      	adds	r3, #18
 8019a96:	4602      	mov	r2, r0
 8019a98:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019a9a:	493e      	ldr	r1, [pc, #248]	; (8019b94 <etharp_tmr+0x14c>)
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	4613      	mov	r3, r2
 8019aa0:	005b      	lsls	r3, r3, #1
 8019aa2:	4413      	add	r3, r2
 8019aa4:	00db      	lsls	r3, r3, #3
 8019aa6:	440b      	add	r3, r1
 8019aa8:	3312      	adds	r3, #18
 8019aaa:	881b      	ldrh	r3, [r3, #0]
 8019aac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019ab0:	d215      	bcs.n	8019ade <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019ab2:	4938      	ldr	r1, [pc, #224]	; (8019b94 <etharp_tmr+0x14c>)
 8019ab4:	687a      	ldr	r2, [r7, #4]
 8019ab6:	4613      	mov	r3, r2
 8019ab8:	005b      	lsls	r3, r3, #1
 8019aba:	4413      	add	r3, r2
 8019abc:	00db      	lsls	r3, r3, #3
 8019abe:	440b      	add	r3, r1
 8019ac0:	3314      	adds	r3, #20
 8019ac2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019ac4:	2b01      	cmp	r3, #1
 8019ac6:	d10e      	bne.n	8019ae6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019ac8:	4932      	ldr	r1, [pc, #200]	; (8019b94 <etharp_tmr+0x14c>)
 8019aca:	687a      	ldr	r2, [r7, #4]
 8019acc:	4613      	mov	r3, r2
 8019ace:	005b      	lsls	r3, r3, #1
 8019ad0:	4413      	add	r3, r2
 8019ad2:	00db      	lsls	r3, r3, #3
 8019ad4:	440b      	add	r3, r1
 8019ad6:	3312      	adds	r3, #18
 8019ad8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019ada:	2b04      	cmp	r3, #4
 8019adc:	d903      	bls.n	8019ae6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019ade:	6878      	ldr	r0, [r7, #4]
 8019ae0:	f7ff ff80 	bl	80199e4 <etharp_free_entry>
 8019ae4:	e04a      	b.n	8019b7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019ae6:	492b      	ldr	r1, [pc, #172]	; (8019b94 <etharp_tmr+0x14c>)
 8019ae8:	687a      	ldr	r2, [r7, #4]
 8019aea:	4613      	mov	r3, r2
 8019aec:	005b      	lsls	r3, r3, #1
 8019aee:	4413      	add	r3, r2
 8019af0:	00db      	lsls	r3, r3, #3
 8019af2:	440b      	add	r3, r1
 8019af4:	3314      	adds	r3, #20
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	2b03      	cmp	r3, #3
 8019afa:	d10a      	bne.n	8019b12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019afc:	4925      	ldr	r1, [pc, #148]	; (8019b94 <etharp_tmr+0x14c>)
 8019afe:	687a      	ldr	r2, [r7, #4]
 8019b00:	4613      	mov	r3, r2
 8019b02:	005b      	lsls	r3, r3, #1
 8019b04:	4413      	add	r3, r2
 8019b06:	00db      	lsls	r3, r3, #3
 8019b08:	440b      	add	r3, r1
 8019b0a:	3314      	adds	r3, #20
 8019b0c:	2204      	movs	r2, #4
 8019b0e:	701a      	strb	r2, [r3, #0]
 8019b10:	e034      	b.n	8019b7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019b12:	4920      	ldr	r1, [pc, #128]	; (8019b94 <etharp_tmr+0x14c>)
 8019b14:	687a      	ldr	r2, [r7, #4]
 8019b16:	4613      	mov	r3, r2
 8019b18:	005b      	lsls	r3, r3, #1
 8019b1a:	4413      	add	r3, r2
 8019b1c:	00db      	lsls	r3, r3, #3
 8019b1e:	440b      	add	r3, r1
 8019b20:	3314      	adds	r3, #20
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	2b04      	cmp	r3, #4
 8019b26:	d10a      	bne.n	8019b3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019b28:	491a      	ldr	r1, [pc, #104]	; (8019b94 <etharp_tmr+0x14c>)
 8019b2a:	687a      	ldr	r2, [r7, #4]
 8019b2c:	4613      	mov	r3, r2
 8019b2e:	005b      	lsls	r3, r3, #1
 8019b30:	4413      	add	r3, r2
 8019b32:	00db      	lsls	r3, r3, #3
 8019b34:	440b      	add	r3, r1
 8019b36:	3314      	adds	r3, #20
 8019b38:	2202      	movs	r2, #2
 8019b3a:	701a      	strb	r2, [r3, #0]
 8019b3c:	e01e      	b.n	8019b7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019b3e:	4915      	ldr	r1, [pc, #84]	; (8019b94 <etharp_tmr+0x14c>)
 8019b40:	687a      	ldr	r2, [r7, #4]
 8019b42:	4613      	mov	r3, r2
 8019b44:	005b      	lsls	r3, r3, #1
 8019b46:	4413      	add	r3, r2
 8019b48:	00db      	lsls	r3, r3, #3
 8019b4a:	440b      	add	r3, r1
 8019b4c:	3314      	adds	r3, #20
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	2b01      	cmp	r3, #1
 8019b52:	d113      	bne.n	8019b7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019b54:	490f      	ldr	r1, [pc, #60]	; (8019b94 <etharp_tmr+0x14c>)
 8019b56:	687a      	ldr	r2, [r7, #4]
 8019b58:	4613      	mov	r3, r2
 8019b5a:	005b      	lsls	r3, r3, #1
 8019b5c:	4413      	add	r3, r2
 8019b5e:	00db      	lsls	r3, r3, #3
 8019b60:	440b      	add	r3, r1
 8019b62:	3308      	adds	r3, #8
 8019b64:	6818      	ldr	r0, [r3, #0]
 8019b66:	687a      	ldr	r2, [r7, #4]
 8019b68:	4613      	mov	r3, r2
 8019b6a:	005b      	lsls	r3, r3, #1
 8019b6c:	4413      	add	r3, r2
 8019b6e:	00db      	lsls	r3, r3, #3
 8019b70:	4a08      	ldr	r2, [pc, #32]	; (8019b94 <etharp_tmr+0x14c>)
 8019b72:	4413      	add	r3, r2
 8019b74:	3304      	adds	r3, #4
 8019b76:	4619      	mov	r1, r3
 8019b78:	f000 fe72 	bl	801a860 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	3301      	adds	r3, #1
 8019b80:	607b      	str	r3, [r7, #4]
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	2b09      	cmp	r3, #9
 8019b86:	f77f af65 	ble.w	8019a54 <etharp_tmr+0xc>
      }
    }
  }
}
 8019b8a:	bf00      	nop
 8019b8c:	bf00      	nop
 8019b8e:	3708      	adds	r7, #8
 8019b90:	46bd      	mov	sp, r7
 8019b92:	bd80      	pop	{r7, pc}
 8019b94:	2000870c 	.word	0x2000870c

08019b98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b08a      	sub	sp, #40	; 0x28
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	460b      	mov	r3, r1
 8019ba2:	607a      	str	r2, [r7, #4]
 8019ba4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019ba6:	230a      	movs	r3, #10
 8019ba8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019baa:	230a      	movs	r3, #10
 8019bac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019bae:	230a      	movs	r3, #10
 8019bb0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019bb6:	230a      	movs	r3, #10
 8019bb8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	83bb      	strh	r3, [r7, #28]
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	837b      	strh	r3, [r7, #26]
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	843b      	strh	r3, [r7, #32]
 8019bca:	e0ae      	b.n	8019d2a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019bcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bd0:	49a6      	ldr	r1, [pc, #664]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019bd2:	4613      	mov	r3, r2
 8019bd4:	005b      	lsls	r3, r3, #1
 8019bd6:	4413      	add	r3, r2
 8019bd8:	00db      	lsls	r3, r3, #3
 8019bda:	440b      	add	r3, r1
 8019bdc:	3314      	adds	r3, #20
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019be2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019be6:	2b0a      	cmp	r3, #10
 8019be8:	d105      	bne.n	8019bf6 <etharp_find_entry+0x5e>
 8019bea:	7dfb      	ldrb	r3, [r7, #23]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d102      	bne.n	8019bf6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019bf0:	8c3b      	ldrh	r3, [r7, #32]
 8019bf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8019bf4:	e095      	b.n	8019d22 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019bf6:	7dfb      	ldrb	r3, [r7, #23]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	f000 8092 	beq.w	8019d22 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019bfe:	7dfb      	ldrb	r3, [r7, #23]
 8019c00:	2b01      	cmp	r3, #1
 8019c02:	d009      	beq.n	8019c18 <etharp_find_entry+0x80>
 8019c04:	7dfb      	ldrb	r3, [r7, #23]
 8019c06:	2b01      	cmp	r3, #1
 8019c08:	d806      	bhi.n	8019c18 <etharp_find_entry+0x80>
 8019c0a:	4b99      	ldr	r3, [pc, #612]	; (8019e70 <etharp_find_entry+0x2d8>)
 8019c0c:	f240 1223 	movw	r2, #291	; 0x123
 8019c10:	4998      	ldr	r1, [pc, #608]	; (8019e74 <etharp_find_entry+0x2dc>)
 8019c12:	4899      	ldr	r0, [pc, #612]	; (8019e78 <etharp_find_entry+0x2e0>)
 8019c14:	f003 fa62 	bl	801d0dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d020      	beq.n	8019c60 <etharp_find_entry+0xc8>
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	6819      	ldr	r1, [r3, #0]
 8019c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c26:	4891      	ldr	r0, [pc, #580]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019c28:	4613      	mov	r3, r2
 8019c2a:	005b      	lsls	r3, r3, #1
 8019c2c:	4413      	add	r3, r2
 8019c2e:	00db      	lsls	r3, r3, #3
 8019c30:	4403      	add	r3, r0
 8019c32:	3304      	adds	r3, #4
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	4299      	cmp	r1, r3
 8019c38:	d112      	bne.n	8019c60 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d00c      	beq.n	8019c5a <etharp_find_entry+0xc2>
 8019c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c44:	4989      	ldr	r1, [pc, #548]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019c46:	4613      	mov	r3, r2
 8019c48:	005b      	lsls	r3, r3, #1
 8019c4a:	4413      	add	r3, r2
 8019c4c:	00db      	lsls	r3, r3, #3
 8019c4e:	440b      	add	r3, r1
 8019c50:	3308      	adds	r3, #8
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	687a      	ldr	r2, [r7, #4]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d102      	bne.n	8019c60 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019c5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c5e:	e100      	b.n	8019e62 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019c60:	7dfb      	ldrb	r3, [r7, #23]
 8019c62:	2b01      	cmp	r3, #1
 8019c64:	d140      	bne.n	8019ce8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019c66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c6a:	4980      	ldr	r1, [pc, #512]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019c6c:	4613      	mov	r3, r2
 8019c6e:	005b      	lsls	r3, r3, #1
 8019c70:	4413      	add	r3, r2
 8019c72:	00db      	lsls	r3, r3, #3
 8019c74:	440b      	add	r3, r1
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d01a      	beq.n	8019cb2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019c7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c80:	497a      	ldr	r1, [pc, #488]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019c82:	4613      	mov	r3, r2
 8019c84:	005b      	lsls	r3, r3, #1
 8019c86:	4413      	add	r3, r2
 8019c88:	00db      	lsls	r3, r3, #3
 8019c8a:	440b      	add	r3, r1
 8019c8c:	3312      	adds	r3, #18
 8019c8e:	881b      	ldrh	r3, [r3, #0]
 8019c90:	8bba      	ldrh	r2, [r7, #28]
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d845      	bhi.n	8019d22 <etharp_find_entry+0x18a>
            old_queue = i;
 8019c96:	8c3b      	ldrh	r3, [r7, #32]
 8019c98:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019c9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c9e:	4973      	ldr	r1, [pc, #460]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019ca0:	4613      	mov	r3, r2
 8019ca2:	005b      	lsls	r3, r3, #1
 8019ca4:	4413      	add	r3, r2
 8019ca6:	00db      	lsls	r3, r3, #3
 8019ca8:	440b      	add	r3, r1
 8019caa:	3312      	adds	r3, #18
 8019cac:	881b      	ldrh	r3, [r3, #0]
 8019cae:	83bb      	strh	r3, [r7, #28]
 8019cb0:	e037      	b.n	8019d22 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cb6:	496d      	ldr	r1, [pc, #436]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019cb8:	4613      	mov	r3, r2
 8019cba:	005b      	lsls	r3, r3, #1
 8019cbc:	4413      	add	r3, r2
 8019cbe:	00db      	lsls	r3, r3, #3
 8019cc0:	440b      	add	r3, r1
 8019cc2:	3312      	adds	r3, #18
 8019cc4:	881b      	ldrh	r3, [r3, #0]
 8019cc6:	8b7a      	ldrh	r2, [r7, #26]
 8019cc8:	429a      	cmp	r2, r3
 8019cca:	d82a      	bhi.n	8019d22 <etharp_find_entry+0x18a>
            old_pending = i;
 8019ccc:	8c3b      	ldrh	r3, [r7, #32]
 8019cce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cd4:	4965      	ldr	r1, [pc, #404]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019cd6:	4613      	mov	r3, r2
 8019cd8:	005b      	lsls	r3, r3, #1
 8019cda:	4413      	add	r3, r2
 8019cdc:	00db      	lsls	r3, r3, #3
 8019cde:	440b      	add	r3, r1
 8019ce0:	3312      	adds	r3, #18
 8019ce2:	881b      	ldrh	r3, [r3, #0]
 8019ce4:	837b      	strh	r3, [r7, #26]
 8019ce6:	e01c      	b.n	8019d22 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019ce8:	7dfb      	ldrb	r3, [r7, #23]
 8019cea:	2b01      	cmp	r3, #1
 8019cec:	d919      	bls.n	8019d22 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019cee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cf2:	495e      	ldr	r1, [pc, #376]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019cf4:	4613      	mov	r3, r2
 8019cf6:	005b      	lsls	r3, r3, #1
 8019cf8:	4413      	add	r3, r2
 8019cfa:	00db      	lsls	r3, r3, #3
 8019cfc:	440b      	add	r3, r1
 8019cfe:	3312      	adds	r3, #18
 8019d00:	881b      	ldrh	r3, [r3, #0]
 8019d02:	8b3a      	ldrh	r2, [r7, #24]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d80c      	bhi.n	8019d22 <etharp_find_entry+0x18a>
            old_stable = i;
 8019d08:	8c3b      	ldrh	r3, [r7, #32]
 8019d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019d0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d10:	4956      	ldr	r1, [pc, #344]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019d12:	4613      	mov	r3, r2
 8019d14:	005b      	lsls	r3, r3, #1
 8019d16:	4413      	add	r3, r2
 8019d18:	00db      	lsls	r3, r3, #3
 8019d1a:	440b      	add	r3, r1
 8019d1c:	3312      	adds	r3, #18
 8019d1e:	881b      	ldrh	r3, [r3, #0]
 8019d20:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019d22:	8c3b      	ldrh	r3, [r7, #32]
 8019d24:	3301      	adds	r3, #1
 8019d26:	b29b      	uxth	r3, r3
 8019d28:	843b      	strh	r3, [r7, #32]
 8019d2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d2e:	2b09      	cmp	r3, #9
 8019d30:	f77f af4c 	ble.w	8019bcc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019d34:	7afb      	ldrb	r3, [r7, #11]
 8019d36:	f003 0302 	and.w	r3, r3, #2
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d108      	bne.n	8019d50 <etharp_find_entry+0x1b8>
 8019d3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019d42:	2b0a      	cmp	r3, #10
 8019d44:	d107      	bne.n	8019d56 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019d46:	7afb      	ldrb	r3, [r7, #11]
 8019d48:	f003 0301 	and.w	r3, r3, #1
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d102      	bne.n	8019d56 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019d50:	f04f 33ff 	mov.w	r3, #4294967295
 8019d54:	e085      	b.n	8019e62 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019d56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019d5a:	2b09      	cmp	r3, #9
 8019d5c:	dc02      	bgt.n	8019d64 <etharp_find_entry+0x1cc>
    i = empty;
 8019d5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019d60:	843b      	strh	r3, [r7, #32]
 8019d62:	e039      	b.n	8019dd8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019d64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019d68:	2b09      	cmp	r3, #9
 8019d6a:	dc14      	bgt.n	8019d96 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d6e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019d70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d74:	493d      	ldr	r1, [pc, #244]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019d76:	4613      	mov	r3, r2
 8019d78:	005b      	lsls	r3, r3, #1
 8019d7a:	4413      	add	r3, r2
 8019d7c:	00db      	lsls	r3, r3, #3
 8019d7e:	440b      	add	r3, r1
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d018      	beq.n	8019db8 <etharp_find_entry+0x220>
 8019d86:	4b3a      	ldr	r3, [pc, #232]	; (8019e70 <etharp_find_entry+0x2d8>)
 8019d88:	f240 126d 	movw	r2, #365	; 0x16d
 8019d8c:	493b      	ldr	r1, [pc, #236]	; (8019e7c <etharp_find_entry+0x2e4>)
 8019d8e:	483a      	ldr	r0, [pc, #232]	; (8019e78 <etharp_find_entry+0x2e0>)
 8019d90:	f003 f9a4 	bl	801d0dc <iprintf>
 8019d94:	e010      	b.n	8019db8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019d96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019d9a:	2b09      	cmp	r3, #9
 8019d9c:	dc02      	bgt.n	8019da4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019d9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019da0:	843b      	strh	r3, [r7, #32]
 8019da2:	e009      	b.n	8019db8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019da4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019da8:	2b09      	cmp	r3, #9
 8019daa:	dc02      	bgt.n	8019db2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019dac:	8bfb      	ldrh	r3, [r7, #30]
 8019dae:	843b      	strh	r3, [r7, #32]
 8019db0:	e002      	b.n	8019db8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019db2:	f04f 33ff 	mov.w	r3, #4294967295
 8019db6:	e054      	b.n	8019e62 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019db8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019dbc:	2b09      	cmp	r3, #9
 8019dbe:	dd06      	ble.n	8019dce <etharp_find_entry+0x236>
 8019dc0:	4b2b      	ldr	r3, [pc, #172]	; (8019e70 <etharp_find_entry+0x2d8>)
 8019dc2:	f240 127f 	movw	r2, #383	; 0x17f
 8019dc6:	492e      	ldr	r1, [pc, #184]	; (8019e80 <etharp_find_entry+0x2e8>)
 8019dc8:	482b      	ldr	r0, [pc, #172]	; (8019e78 <etharp_find_entry+0x2e0>)
 8019dca:	f003 f987 	bl	801d0dc <iprintf>
    etharp_free_entry(i);
 8019dce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7ff fe06 	bl	80199e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019dd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019ddc:	2b09      	cmp	r3, #9
 8019dde:	dd06      	ble.n	8019dee <etharp_find_entry+0x256>
 8019de0:	4b23      	ldr	r3, [pc, #140]	; (8019e70 <etharp_find_entry+0x2d8>)
 8019de2:	f240 1283 	movw	r2, #387	; 0x183
 8019de6:	4926      	ldr	r1, [pc, #152]	; (8019e80 <etharp_find_entry+0x2e8>)
 8019de8:	4823      	ldr	r0, [pc, #140]	; (8019e78 <etharp_find_entry+0x2e0>)
 8019dea:	f003 f977 	bl	801d0dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019dee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019df2:	491e      	ldr	r1, [pc, #120]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019df4:	4613      	mov	r3, r2
 8019df6:	005b      	lsls	r3, r3, #1
 8019df8:	4413      	add	r3, r2
 8019dfa:	00db      	lsls	r3, r3, #3
 8019dfc:	440b      	add	r3, r1
 8019dfe:	3314      	adds	r3, #20
 8019e00:	781b      	ldrb	r3, [r3, #0]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d006      	beq.n	8019e14 <etharp_find_entry+0x27c>
 8019e06:	4b1a      	ldr	r3, [pc, #104]	; (8019e70 <etharp_find_entry+0x2d8>)
 8019e08:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019e0c:	491d      	ldr	r1, [pc, #116]	; (8019e84 <etharp_find_entry+0x2ec>)
 8019e0e:	481a      	ldr	r0, [pc, #104]	; (8019e78 <etharp_find_entry+0x2e0>)
 8019e10:	f003 f964 	bl	801d0dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d00b      	beq.n	8019e32 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	6819      	ldr	r1, [r3, #0]
 8019e22:	4812      	ldr	r0, [pc, #72]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019e24:	4613      	mov	r3, r2
 8019e26:	005b      	lsls	r3, r3, #1
 8019e28:	4413      	add	r3, r2
 8019e2a:	00db      	lsls	r3, r3, #3
 8019e2c:	4403      	add	r3, r0
 8019e2e:	3304      	adds	r3, #4
 8019e30:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019e32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e36:	490d      	ldr	r1, [pc, #52]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019e38:	4613      	mov	r3, r2
 8019e3a:	005b      	lsls	r3, r3, #1
 8019e3c:	4413      	add	r3, r2
 8019e3e:	00db      	lsls	r3, r3, #3
 8019e40:	440b      	add	r3, r1
 8019e42:	3312      	adds	r3, #18
 8019e44:	2200      	movs	r2, #0
 8019e46:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019e48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e4c:	4907      	ldr	r1, [pc, #28]	; (8019e6c <etharp_find_entry+0x2d4>)
 8019e4e:	4613      	mov	r3, r2
 8019e50:	005b      	lsls	r3, r3, #1
 8019e52:	4413      	add	r3, r2
 8019e54:	00db      	lsls	r3, r3, #3
 8019e56:	440b      	add	r3, r1
 8019e58:	3308      	adds	r3, #8
 8019e5a:	687a      	ldr	r2, [r7, #4]
 8019e5c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019e5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019e62:	4618      	mov	r0, r3
 8019e64:	3728      	adds	r7, #40	; 0x28
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}
 8019e6a:	bf00      	nop
 8019e6c:	2000870c 	.word	0x2000870c
 8019e70:	080206f8 	.word	0x080206f8
 8019e74:	08020730 	.word	0x08020730
 8019e78:	08020770 	.word	0x08020770
 8019e7c:	08020798 	.word	0x08020798
 8019e80:	080207b0 	.word	0x080207b0
 8019e84:	080207c4 	.word	0x080207c4

08019e88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b088      	sub	sp, #32
 8019e8c:	af02      	add	r7, sp, #8
 8019e8e:	60f8      	str	r0, [r7, #12]
 8019e90:	60b9      	str	r1, [r7, #8]
 8019e92:	607a      	str	r2, [r7, #4]
 8019e94:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019e9c:	2b06      	cmp	r3, #6
 8019e9e:	d006      	beq.n	8019eae <etharp_update_arp_entry+0x26>
 8019ea0:	4b48      	ldr	r3, [pc, #288]	; (8019fc4 <etharp_update_arp_entry+0x13c>)
 8019ea2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019ea6:	4948      	ldr	r1, [pc, #288]	; (8019fc8 <etharp_update_arp_entry+0x140>)
 8019ea8:	4848      	ldr	r0, [pc, #288]	; (8019fcc <etharp_update_arp_entry+0x144>)
 8019eaa:	f003 f917 	bl	801d0dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d012      	beq.n	8019eda <etharp_update_arp_entry+0x52>
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d00e      	beq.n	8019eda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	68f9      	ldr	r1, [r7, #12]
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f001 f920 	bl	801b108 <ip4_addr_isbroadcast_u32>
 8019ec8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d105      	bne.n	8019eda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ed6:	2be0      	cmp	r3, #224	; 0xe0
 8019ed8:	d102      	bne.n	8019ee0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019eda:	f06f 030f 	mvn.w	r3, #15
 8019ede:	e06c      	b.n	8019fba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019ee0:	78fb      	ldrb	r3, [r7, #3]
 8019ee2:	68fa      	ldr	r2, [r7, #12]
 8019ee4:	4619      	mov	r1, r3
 8019ee6:	68b8      	ldr	r0, [r7, #8]
 8019ee8:	f7ff fe56 	bl	8019b98 <etharp_find_entry>
 8019eec:	4603      	mov	r3, r0
 8019eee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019ef0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	da02      	bge.n	8019efe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019ef8:	8afb      	ldrh	r3, [r7, #22]
 8019efa:	b25b      	sxtb	r3, r3
 8019efc:	e05d      	b.n	8019fba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019efe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f02:	4933      	ldr	r1, [pc, #204]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f04:	4613      	mov	r3, r2
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	4413      	add	r3, r2
 8019f0a:	00db      	lsls	r3, r3, #3
 8019f0c:	440b      	add	r3, r1
 8019f0e:	3314      	adds	r3, #20
 8019f10:	2202      	movs	r2, #2
 8019f12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019f14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f18:	492d      	ldr	r1, [pc, #180]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f1a:	4613      	mov	r3, r2
 8019f1c:	005b      	lsls	r3, r3, #1
 8019f1e:	4413      	add	r3, r2
 8019f20:	00db      	lsls	r3, r3, #3
 8019f22:	440b      	add	r3, r1
 8019f24:	3308      	adds	r3, #8
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019f2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f2e:	4613      	mov	r3, r2
 8019f30:	005b      	lsls	r3, r3, #1
 8019f32:	4413      	add	r3, r2
 8019f34:	00db      	lsls	r3, r3, #3
 8019f36:	3308      	adds	r3, #8
 8019f38:	4a25      	ldr	r2, [pc, #148]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f3a:	4413      	add	r3, r2
 8019f3c:	3304      	adds	r3, #4
 8019f3e:	2206      	movs	r2, #6
 8019f40:	6879      	ldr	r1, [r7, #4]
 8019f42:	4618      	mov	r0, r3
 8019f44:	f003 f9bd 	bl	801d2c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019f48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f4c:	4920      	ldr	r1, [pc, #128]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f4e:	4613      	mov	r3, r2
 8019f50:	005b      	lsls	r3, r3, #1
 8019f52:	4413      	add	r3, r2
 8019f54:	00db      	lsls	r3, r3, #3
 8019f56:	440b      	add	r3, r1
 8019f58:	3312      	adds	r3, #18
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019f5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f62:	491b      	ldr	r1, [pc, #108]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f64:	4613      	mov	r3, r2
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	4413      	add	r3, r2
 8019f6a:	00db      	lsls	r3, r3, #3
 8019f6c:	440b      	add	r3, r1
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d021      	beq.n	8019fb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019f74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f78:	4915      	ldr	r1, [pc, #84]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	005b      	lsls	r3, r3, #1
 8019f7e:	4413      	add	r3, r2
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	440b      	add	r3, r1
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f8c:	4910      	ldr	r1, [pc, #64]	; (8019fd0 <etharp_update_arp_entry+0x148>)
 8019f8e:	4613      	mov	r3, r2
 8019f90:	005b      	lsls	r3, r3, #1
 8019f92:	4413      	add	r3, r2
 8019f94:	00db      	lsls	r3, r3, #3
 8019f96:	440b      	add	r3, r1
 8019f98:	2200      	movs	r2, #0
 8019f9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8019fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019fa6:	9300      	str	r3, [sp, #0]
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	6939      	ldr	r1, [r7, #16]
 8019fac:	68f8      	ldr	r0, [r7, #12]
 8019fae:	f001 ffb9 	bl	801bf24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019fb2:	6938      	ldr	r0, [r7, #16]
 8019fb4:	f7f6 fbe0 	bl	8010778 <pbuf_free>
  }
  return ERR_OK;
 8019fb8:	2300      	movs	r3, #0
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3718      	adds	r7, #24
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	080206f8 	.word	0x080206f8
 8019fc8:	080207f0 	.word	0x080207f0
 8019fcc:	08020770 	.word	0x08020770
 8019fd0:	2000870c 	.word	0x2000870c

08019fd4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b084      	sub	sp, #16
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019fdc:	2300      	movs	r3, #0
 8019fde:	60fb      	str	r3, [r7, #12]
 8019fe0:	e01e      	b.n	801a020 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019fe2:	4913      	ldr	r1, [pc, #76]	; (801a030 <etharp_cleanup_netif+0x5c>)
 8019fe4:	68fa      	ldr	r2, [r7, #12]
 8019fe6:	4613      	mov	r3, r2
 8019fe8:	005b      	lsls	r3, r3, #1
 8019fea:	4413      	add	r3, r2
 8019fec:	00db      	lsls	r3, r3, #3
 8019fee:	440b      	add	r3, r1
 8019ff0:	3314      	adds	r3, #20
 8019ff2:	781b      	ldrb	r3, [r3, #0]
 8019ff4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019ff6:	7afb      	ldrb	r3, [r7, #11]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d00e      	beq.n	801a01a <etharp_cleanup_netif+0x46>
 8019ffc:	490c      	ldr	r1, [pc, #48]	; (801a030 <etharp_cleanup_netif+0x5c>)
 8019ffe:	68fa      	ldr	r2, [r7, #12]
 801a000:	4613      	mov	r3, r2
 801a002:	005b      	lsls	r3, r3, #1
 801a004:	4413      	add	r3, r2
 801a006:	00db      	lsls	r3, r3, #3
 801a008:	440b      	add	r3, r1
 801a00a:	3308      	adds	r3, #8
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	687a      	ldr	r2, [r7, #4]
 801a010:	429a      	cmp	r2, r3
 801a012:	d102      	bne.n	801a01a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a014:	68f8      	ldr	r0, [r7, #12]
 801a016:	f7ff fce5 	bl	80199e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	3301      	adds	r3, #1
 801a01e:	60fb      	str	r3, [r7, #12]
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	2b09      	cmp	r3, #9
 801a024:	dddd      	ble.n	8019fe2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a026:	bf00      	nop
 801a028:	bf00      	nop
 801a02a:	3710      	adds	r7, #16
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	2000870c 	.word	0x2000870c

0801a034 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a034:	b5b0      	push	{r4, r5, r7, lr}
 801a036:	b08a      	sub	sp, #40	; 0x28
 801a038:	af04      	add	r7, sp, #16
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a03e:	683b      	ldr	r3, [r7, #0]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d107      	bne.n	801a054 <etharp_input+0x20>
 801a044:	4b3f      	ldr	r3, [pc, #252]	; (801a144 <etharp_input+0x110>)
 801a046:	f240 228a 	movw	r2, #650	; 0x28a
 801a04a:	493f      	ldr	r1, [pc, #252]	; (801a148 <etharp_input+0x114>)
 801a04c:	483f      	ldr	r0, [pc, #252]	; (801a14c <etharp_input+0x118>)
 801a04e:	f003 f845 	bl	801d0dc <iprintf>
 801a052:	e074      	b.n	801a13e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	685b      	ldr	r3, [r3, #4]
 801a058:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a05a:	693b      	ldr	r3, [r7, #16]
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	b29b      	uxth	r3, r3
 801a060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a064:	d10c      	bne.n	801a080 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a066:	693b      	ldr	r3, [r7, #16]
 801a068:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a06a:	2b06      	cmp	r3, #6
 801a06c:	d108      	bne.n	801a080 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a072:	2b04      	cmp	r3, #4
 801a074:	d104      	bne.n	801a080 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a076:	693b      	ldr	r3, [r7, #16]
 801a078:	885b      	ldrh	r3, [r3, #2]
 801a07a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a07c:	2b08      	cmp	r3, #8
 801a07e:	d003      	beq.n	801a088 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f7f6 fb79 	bl	8010778 <pbuf_free>
    return;
 801a086:	e05a      	b.n	801a13e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a088:	693b      	ldr	r3, [r7, #16]
 801a08a:	330e      	adds	r3, #14
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	3318      	adds	r3, #24
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a098:	683b      	ldr	r3, [r7, #0]
 801a09a:	3304      	adds	r3, #4
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d102      	bne.n	801a0a8 <etharp_input+0x74>
    for_us = 0;
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	75fb      	strb	r3, [r7, #23]
 801a0a6:	e009      	b.n	801a0bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a0a8:	68ba      	ldr	r2, [r7, #8]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	3304      	adds	r3, #4
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	bf0c      	ite	eq
 801a0b4:	2301      	moveq	r3, #1
 801a0b6:	2300      	movne	r3, #0
 801a0b8:	b2db      	uxtb	r3, r3
 801a0ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a0bc:	693b      	ldr	r3, [r7, #16]
 801a0be:	f103 0208 	add.w	r2, r3, #8
 801a0c2:	7dfb      	ldrb	r3, [r7, #23]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d001      	beq.n	801a0cc <etharp_input+0x98>
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	e000      	b.n	801a0ce <etharp_input+0x9a>
 801a0cc:	2302      	movs	r3, #2
 801a0ce:	f107 010c 	add.w	r1, r7, #12
 801a0d2:	6838      	ldr	r0, [r7, #0]
 801a0d4:	f7ff fed8 	bl	8019e88 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a0d8:	693b      	ldr	r3, [r7, #16]
 801a0da:	88db      	ldrh	r3, [r3, #6]
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0e2:	d003      	beq.n	801a0ec <etharp_input+0xb8>
 801a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0e8:	d01e      	beq.n	801a128 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a0ea:	e025      	b.n	801a138 <etharp_input+0x104>
      if (for_us) {
 801a0ec:	7dfb      	ldrb	r3, [r7, #23]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d021      	beq.n	801a136 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801a0f8:	693b      	ldr	r3, [r7, #16]
 801a0fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a0fe:	683b      	ldr	r3, [r7, #0]
 801a100:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a108:	693a      	ldr	r2, [r7, #16]
 801a10a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a10c:	2102      	movs	r1, #2
 801a10e:	9103      	str	r1, [sp, #12]
 801a110:	f107 010c 	add.w	r1, r7, #12
 801a114:	9102      	str	r1, [sp, #8]
 801a116:	9201      	str	r2, [sp, #4]
 801a118:	9300      	str	r3, [sp, #0]
 801a11a:	462b      	mov	r3, r5
 801a11c:	4622      	mov	r2, r4
 801a11e:	4601      	mov	r1, r0
 801a120:	6838      	ldr	r0, [r7, #0]
 801a122:	f000 faef 	bl	801a704 <etharp_raw>
      break;
 801a126:	e006      	b.n	801a136 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a128:	f107 030c 	add.w	r3, r7, #12
 801a12c:	4619      	mov	r1, r3
 801a12e:	6838      	ldr	r0, [r7, #0]
 801a130:	f7fe f9cc 	bl	80184cc <dhcp_arp_reply>
      break;
 801a134:	e000      	b.n	801a138 <etharp_input+0x104>
      break;
 801a136:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f7f6 fb1d 	bl	8010778 <pbuf_free>
}
 801a13e:	3718      	adds	r7, #24
 801a140:	46bd      	mov	sp, r7
 801a142:	bdb0      	pop	{r4, r5, r7, pc}
 801a144:	080206f8 	.word	0x080206f8
 801a148:	08020848 	.word	0x08020848
 801a14c:	08020770 	.word	0x08020770

0801a150 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b086      	sub	sp, #24
 801a154:	af02      	add	r7, sp, #8
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	4613      	mov	r3, r2
 801a15c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a15e:	79fa      	ldrb	r2, [r7, #7]
 801a160:	4944      	ldr	r1, [pc, #272]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a162:	4613      	mov	r3, r2
 801a164:	005b      	lsls	r3, r3, #1
 801a166:	4413      	add	r3, r2
 801a168:	00db      	lsls	r3, r3, #3
 801a16a:	440b      	add	r3, r1
 801a16c:	3314      	adds	r3, #20
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2b01      	cmp	r3, #1
 801a172:	d806      	bhi.n	801a182 <etharp_output_to_arp_index+0x32>
 801a174:	4b40      	ldr	r3, [pc, #256]	; (801a278 <etharp_output_to_arp_index+0x128>)
 801a176:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a17a:	4940      	ldr	r1, [pc, #256]	; (801a27c <etharp_output_to_arp_index+0x12c>)
 801a17c:	4840      	ldr	r0, [pc, #256]	; (801a280 <etharp_output_to_arp_index+0x130>)
 801a17e:	f002 ffad 	bl	801d0dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a182:	79fa      	ldrb	r2, [r7, #7]
 801a184:	493b      	ldr	r1, [pc, #236]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a186:	4613      	mov	r3, r2
 801a188:	005b      	lsls	r3, r3, #1
 801a18a:	4413      	add	r3, r2
 801a18c:	00db      	lsls	r3, r3, #3
 801a18e:	440b      	add	r3, r1
 801a190:	3314      	adds	r3, #20
 801a192:	781b      	ldrb	r3, [r3, #0]
 801a194:	2b02      	cmp	r3, #2
 801a196:	d153      	bne.n	801a240 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a198:	79fa      	ldrb	r2, [r7, #7]
 801a19a:	4936      	ldr	r1, [pc, #216]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a19c:	4613      	mov	r3, r2
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	4413      	add	r3, r2
 801a1a2:	00db      	lsls	r3, r3, #3
 801a1a4:	440b      	add	r3, r1
 801a1a6:	3312      	adds	r3, #18
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a1ae:	d919      	bls.n	801a1e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a1b0:	79fa      	ldrb	r2, [r7, #7]
 801a1b2:	4613      	mov	r3, r2
 801a1b4:	005b      	lsls	r3, r3, #1
 801a1b6:	4413      	add	r3, r2
 801a1b8:	00db      	lsls	r3, r3, #3
 801a1ba:	4a2e      	ldr	r2, [pc, #184]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a1bc:	4413      	add	r3, r2
 801a1be:	3304      	adds	r3, #4
 801a1c0:	4619      	mov	r1, r3
 801a1c2:	68f8      	ldr	r0, [r7, #12]
 801a1c4:	f000 fb4c 	bl	801a860 <etharp_request>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d138      	bne.n	801a240 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a1ce:	79fa      	ldrb	r2, [r7, #7]
 801a1d0:	4928      	ldr	r1, [pc, #160]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a1d2:	4613      	mov	r3, r2
 801a1d4:	005b      	lsls	r3, r3, #1
 801a1d6:	4413      	add	r3, r2
 801a1d8:	00db      	lsls	r3, r3, #3
 801a1da:	440b      	add	r3, r1
 801a1dc:	3314      	adds	r3, #20
 801a1de:	2203      	movs	r2, #3
 801a1e0:	701a      	strb	r2, [r3, #0]
 801a1e2:	e02d      	b.n	801a240 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a1e4:	79fa      	ldrb	r2, [r7, #7]
 801a1e6:	4923      	ldr	r1, [pc, #140]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a1e8:	4613      	mov	r3, r2
 801a1ea:	005b      	lsls	r3, r3, #1
 801a1ec:	4413      	add	r3, r2
 801a1ee:	00db      	lsls	r3, r3, #3
 801a1f0:	440b      	add	r3, r1
 801a1f2:	3312      	adds	r3, #18
 801a1f4:	881b      	ldrh	r3, [r3, #0]
 801a1f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a1fa:	d321      	bcc.n	801a240 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a1fc:	79fa      	ldrb	r2, [r7, #7]
 801a1fe:	4613      	mov	r3, r2
 801a200:	005b      	lsls	r3, r3, #1
 801a202:	4413      	add	r3, r2
 801a204:	00db      	lsls	r3, r3, #3
 801a206:	4a1b      	ldr	r2, [pc, #108]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a208:	4413      	add	r3, r2
 801a20a:	1d19      	adds	r1, r3, #4
 801a20c:	79fa      	ldrb	r2, [r7, #7]
 801a20e:	4613      	mov	r3, r2
 801a210:	005b      	lsls	r3, r3, #1
 801a212:	4413      	add	r3, r2
 801a214:	00db      	lsls	r3, r3, #3
 801a216:	3308      	adds	r3, #8
 801a218:	4a16      	ldr	r2, [pc, #88]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a21a:	4413      	add	r3, r2
 801a21c:	3304      	adds	r3, #4
 801a21e:	461a      	mov	r2, r3
 801a220:	68f8      	ldr	r0, [r7, #12]
 801a222:	f000 fafb 	bl	801a81c <etharp_request_dst>
 801a226:	4603      	mov	r3, r0
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d109      	bne.n	801a240 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a22c:	79fa      	ldrb	r2, [r7, #7]
 801a22e:	4911      	ldr	r1, [pc, #68]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a230:	4613      	mov	r3, r2
 801a232:	005b      	lsls	r3, r3, #1
 801a234:	4413      	add	r3, r2
 801a236:	00db      	lsls	r3, r3, #3
 801a238:	440b      	add	r3, r1
 801a23a:	3314      	adds	r3, #20
 801a23c:	2203      	movs	r2, #3
 801a23e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801a246:	79fa      	ldrb	r2, [r7, #7]
 801a248:	4613      	mov	r3, r2
 801a24a:	005b      	lsls	r3, r3, #1
 801a24c:	4413      	add	r3, r2
 801a24e:	00db      	lsls	r3, r3, #3
 801a250:	3308      	adds	r3, #8
 801a252:	4a08      	ldr	r2, [pc, #32]	; (801a274 <etharp_output_to_arp_index+0x124>)
 801a254:	4413      	add	r3, r2
 801a256:	3304      	adds	r3, #4
 801a258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a25c:	9200      	str	r2, [sp, #0]
 801a25e:	460a      	mov	r2, r1
 801a260:	68b9      	ldr	r1, [r7, #8]
 801a262:	68f8      	ldr	r0, [r7, #12]
 801a264:	f001 fe5e 	bl	801bf24 <ethernet_output>
 801a268:	4603      	mov	r3, r0
}
 801a26a:	4618      	mov	r0, r3
 801a26c:	3710      	adds	r7, #16
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	2000870c 	.word	0x2000870c
 801a278:	080206f8 	.word	0x080206f8
 801a27c:	08020868 	.word	0x08020868
 801a280:	08020770 	.word	0x08020770

0801a284 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b08a      	sub	sp, #40	; 0x28
 801a288:	af02      	add	r7, sp, #8
 801a28a:	60f8      	str	r0, [r7, #12]
 801a28c:	60b9      	str	r1, [r7, #8]
 801a28e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d106      	bne.n	801a2a8 <etharp_output+0x24>
 801a29a:	4b73      	ldr	r3, [pc, #460]	; (801a468 <etharp_output+0x1e4>)
 801a29c:	f240 321e 	movw	r2, #798	; 0x31e
 801a2a0:	4972      	ldr	r1, [pc, #456]	; (801a46c <etharp_output+0x1e8>)
 801a2a2:	4873      	ldr	r0, [pc, #460]	; (801a470 <etharp_output+0x1ec>)
 801a2a4:	f002 ff1a 	bl	801d0dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a2a8:	68bb      	ldr	r3, [r7, #8]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d106      	bne.n	801a2bc <etharp_output+0x38>
 801a2ae:	4b6e      	ldr	r3, [pc, #440]	; (801a468 <etharp_output+0x1e4>)
 801a2b0:	f240 321f 	movw	r2, #799	; 0x31f
 801a2b4:	496f      	ldr	r1, [pc, #444]	; (801a474 <etharp_output+0x1f0>)
 801a2b6:	486e      	ldr	r0, [pc, #440]	; (801a470 <etharp_output+0x1ec>)
 801a2b8:	f002 ff10 	bl	801d0dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d106      	bne.n	801a2d0 <etharp_output+0x4c>
 801a2c2:	4b69      	ldr	r3, [pc, #420]	; (801a468 <etharp_output+0x1e4>)
 801a2c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a2c8:	496b      	ldr	r1, [pc, #428]	; (801a478 <etharp_output+0x1f4>)
 801a2ca:	4869      	ldr	r0, [pc, #420]	; (801a470 <etharp_output+0x1ec>)
 801a2cc:	f002 ff06 	bl	801d0dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	68f9      	ldr	r1, [r7, #12]
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	f000 ff16 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d002      	beq.n	801a2e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a2e2:	4b66      	ldr	r3, [pc, #408]	; (801a47c <etharp_output+0x1f8>)
 801a2e4:	61fb      	str	r3, [r7, #28]
 801a2e6:	e0af      	b.n	801a448 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a2f0:	2be0      	cmp	r3, #224	; 0xe0
 801a2f2:	d118      	bne.n	801a326 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a2f4:	2301      	movs	r3, #1
 801a2f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a2fc:	235e      	movs	r3, #94	; 0x5e
 801a2fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	3301      	adds	r3, #1
 801a304:	781b      	ldrb	r3, [r3, #0]
 801a306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	3302      	adds	r3, #2
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	3303      	adds	r3, #3
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a31e:	f107 0310 	add.w	r3, r7, #16
 801a322:	61fb      	str	r3, [r7, #28]
 801a324:	e090      	b.n	801a448 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681a      	ldr	r2, [r3, #0]
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	3304      	adds	r3, #4
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	405a      	eors	r2, r3
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	3308      	adds	r3, #8
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	4013      	ands	r3, r2
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d012      	beq.n	801a364 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a344:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a348:	4293      	cmp	r3, r2
 801a34a:	d00b      	beq.n	801a364 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	330c      	adds	r3, #12
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d003      	beq.n	801a35e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	330c      	adds	r3, #12
 801a35a:	61bb      	str	r3, [r7, #24]
 801a35c:	e002      	b.n	801a364 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a35e:	f06f 0303 	mvn.w	r3, #3
 801a362:	e07d      	b.n	801a460 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a364:	4b46      	ldr	r3, [pc, #280]	; (801a480 <etharp_output+0x1fc>)
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	4619      	mov	r1, r3
 801a36a:	4a46      	ldr	r2, [pc, #280]	; (801a484 <etharp_output+0x200>)
 801a36c:	460b      	mov	r3, r1
 801a36e:	005b      	lsls	r3, r3, #1
 801a370:	440b      	add	r3, r1
 801a372:	00db      	lsls	r3, r3, #3
 801a374:	4413      	add	r3, r2
 801a376:	3314      	adds	r3, #20
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	2b01      	cmp	r3, #1
 801a37c:	d925      	bls.n	801a3ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a37e:	4b40      	ldr	r3, [pc, #256]	; (801a480 <etharp_output+0x1fc>)
 801a380:	781b      	ldrb	r3, [r3, #0]
 801a382:	4619      	mov	r1, r3
 801a384:	4a3f      	ldr	r2, [pc, #252]	; (801a484 <etharp_output+0x200>)
 801a386:	460b      	mov	r3, r1
 801a388:	005b      	lsls	r3, r3, #1
 801a38a:	440b      	add	r3, r1
 801a38c:	00db      	lsls	r3, r3, #3
 801a38e:	4413      	add	r3, r2
 801a390:	3308      	adds	r3, #8
 801a392:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a394:	68fa      	ldr	r2, [r7, #12]
 801a396:	429a      	cmp	r2, r3
 801a398:	d117      	bne.n	801a3ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a39a:	69bb      	ldr	r3, [r7, #24]
 801a39c:	681a      	ldr	r2, [r3, #0]
 801a39e:	4b38      	ldr	r3, [pc, #224]	; (801a480 <etharp_output+0x1fc>)
 801a3a0:	781b      	ldrb	r3, [r3, #0]
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	4937      	ldr	r1, [pc, #220]	; (801a484 <etharp_output+0x200>)
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	005b      	lsls	r3, r3, #1
 801a3aa:	4403      	add	r3, r0
 801a3ac:	00db      	lsls	r3, r3, #3
 801a3ae:	440b      	add	r3, r1
 801a3b0:	3304      	adds	r3, #4
 801a3b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a3b4:	429a      	cmp	r2, r3
 801a3b6:	d108      	bne.n	801a3ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a3b8:	4b31      	ldr	r3, [pc, #196]	; (801a480 <etharp_output+0x1fc>)
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	461a      	mov	r2, r3
 801a3be:	68b9      	ldr	r1, [r7, #8]
 801a3c0:	68f8      	ldr	r0, [r7, #12]
 801a3c2:	f7ff fec5 	bl	801a150 <etharp_output_to_arp_index>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	e04a      	b.n	801a460 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	75fb      	strb	r3, [r7, #23]
 801a3ce:	e031      	b.n	801a434 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a3d0:	7dfa      	ldrb	r2, [r7, #23]
 801a3d2:	492c      	ldr	r1, [pc, #176]	; (801a484 <etharp_output+0x200>)
 801a3d4:	4613      	mov	r3, r2
 801a3d6:	005b      	lsls	r3, r3, #1
 801a3d8:	4413      	add	r3, r2
 801a3da:	00db      	lsls	r3, r3, #3
 801a3dc:	440b      	add	r3, r1
 801a3de:	3314      	adds	r3, #20
 801a3e0:	781b      	ldrb	r3, [r3, #0]
 801a3e2:	2b01      	cmp	r3, #1
 801a3e4:	d923      	bls.n	801a42e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a3e6:	7dfa      	ldrb	r2, [r7, #23]
 801a3e8:	4926      	ldr	r1, [pc, #152]	; (801a484 <etharp_output+0x200>)
 801a3ea:	4613      	mov	r3, r2
 801a3ec:	005b      	lsls	r3, r3, #1
 801a3ee:	4413      	add	r3, r2
 801a3f0:	00db      	lsls	r3, r3, #3
 801a3f2:	440b      	add	r3, r1
 801a3f4:	3308      	adds	r3, #8
 801a3f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a3f8:	68fa      	ldr	r2, [r7, #12]
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d117      	bne.n	801a42e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a3fe:	69bb      	ldr	r3, [r7, #24]
 801a400:	6819      	ldr	r1, [r3, #0]
 801a402:	7dfa      	ldrb	r2, [r7, #23]
 801a404:	481f      	ldr	r0, [pc, #124]	; (801a484 <etharp_output+0x200>)
 801a406:	4613      	mov	r3, r2
 801a408:	005b      	lsls	r3, r3, #1
 801a40a:	4413      	add	r3, r2
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	4403      	add	r3, r0
 801a410:	3304      	adds	r3, #4
 801a412:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a414:	4299      	cmp	r1, r3
 801a416:	d10a      	bne.n	801a42e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a418:	4a19      	ldr	r2, [pc, #100]	; (801a480 <etharp_output+0x1fc>)
 801a41a:	7dfb      	ldrb	r3, [r7, #23]
 801a41c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a41e:	7dfb      	ldrb	r3, [r7, #23]
 801a420:	461a      	mov	r2, r3
 801a422:	68b9      	ldr	r1, [r7, #8]
 801a424:	68f8      	ldr	r0, [r7, #12]
 801a426:	f7ff fe93 	bl	801a150 <etharp_output_to_arp_index>
 801a42a:	4603      	mov	r3, r0
 801a42c:	e018      	b.n	801a460 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a42e:	7dfb      	ldrb	r3, [r7, #23]
 801a430:	3301      	adds	r3, #1
 801a432:	75fb      	strb	r3, [r7, #23]
 801a434:	7dfb      	ldrb	r3, [r7, #23]
 801a436:	2b09      	cmp	r3, #9
 801a438:	d9ca      	bls.n	801a3d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a43a:	68ba      	ldr	r2, [r7, #8]
 801a43c:	69b9      	ldr	r1, [r7, #24]
 801a43e:	68f8      	ldr	r0, [r7, #12]
 801a440:	f000 f822 	bl	801a488 <etharp_query>
 801a444:	4603      	mov	r3, r0
 801a446:	e00b      	b.n	801a460 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801a44e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a452:	9300      	str	r3, [sp, #0]
 801a454:	69fb      	ldr	r3, [r7, #28]
 801a456:	68b9      	ldr	r1, [r7, #8]
 801a458:	68f8      	ldr	r0, [r7, #12]
 801a45a:	f001 fd63 	bl	801bf24 <ethernet_output>
 801a45e:	4603      	mov	r3, r0
}
 801a460:	4618      	mov	r0, r3
 801a462:	3720      	adds	r7, #32
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}
 801a468:	080206f8 	.word	0x080206f8
 801a46c:	08020848 	.word	0x08020848
 801a470:	08020770 	.word	0x08020770
 801a474:	08020898 	.word	0x08020898
 801a478:	08020838 	.word	0x08020838
 801a47c:	08020f64 	.word	0x08020f64
 801a480:	200087fc 	.word	0x200087fc
 801a484:	2000870c 	.word	0x2000870c

0801a488 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b08c      	sub	sp, #48	; 0x30
 801a48c:	af02      	add	r7, sp, #8
 801a48e:	60f8      	str	r0, [r7, #12]
 801a490:	60b9      	str	r1, [r7, #8]
 801a492:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	332a      	adds	r3, #42	; 0x2a
 801a498:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a49a:	23ff      	movs	r3, #255	; 0xff
 801a49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	68f9      	ldr	r1, [r7, #12]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f000 fe2c 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d10c      	bne.n	801a4d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a4be:	2be0      	cmp	r3, #224	; 0xe0
 801a4c0:	d006      	beq.n	801a4d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a4c2:	68bb      	ldr	r3, [r7, #8]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d003      	beq.n	801a4d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d102      	bne.n	801a4d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a4d0:	f06f 030f 	mvn.w	r3, #15
 801a4d4:	e101      	b.n	801a6da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a4d6:	68fa      	ldr	r2, [r7, #12]
 801a4d8:	2101      	movs	r1, #1
 801a4da:	68b8      	ldr	r0, [r7, #8]
 801a4dc:	f7ff fb5c 	bl	8019b98 <etharp_find_entry>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a4e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	da02      	bge.n	801a4f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a4ec:	8a7b      	ldrh	r3, [r7, #18]
 801a4ee:	b25b      	sxtb	r3, r3
 801a4f0:	e0f3      	b.n	801a6da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a4f2:	8a7b      	ldrh	r3, [r7, #18]
 801a4f4:	2b7e      	cmp	r3, #126	; 0x7e
 801a4f6:	d906      	bls.n	801a506 <etharp_query+0x7e>
 801a4f8:	4b7a      	ldr	r3, [pc, #488]	; (801a6e4 <etharp_query+0x25c>)
 801a4fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a4fe:	497a      	ldr	r1, [pc, #488]	; (801a6e8 <etharp_query+0x260>)
 801a500:	487a      	ldr	r0, [pc, #488]	; (801a6ec <etharp_query+0x264>)
 801a502:	f002 fdeb 	bl	801d0dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a506:	8a7b      	ldrh	r3, [r7, #18]
 801a508:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a50a:	7c7a      	ldrb	r2, [r7, #17]
 801a50c:	4978      	ldr	r1, [pc, #480]	; (801a6f0 <etharp_query+0x268>)
 801a50e:	4613      	mov	r3, r2
 801a510:	005b      	lsls	r3, r3, #1
 801a512:	4413      	add	r3, r2
 801a514:	00db      	lsls	r3, r3, #3
 801a516:	440b      	add	r3, r1
 801a518:	3314      	adds	r3, #20
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d115      	bne.n	801a54c <etharp_query+0xc4>
    is_new_entry = 1;
 801a520:	2301      	movs	r3, #1
 801a522:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a524:	7c7a      	ldrb	r2, [r7, #17]
 801a526:	4972      	ldr	r1, [pc, #456]	; (801a6f0 <etharp_query+0x268>)
 801a528:	4613      	mov	r3, r2
 801a52a:	005b      	lsls	r3, r3, #1
 801a52c:	4413      	add	r3, r2
 801a52e:	00db      	lsls	r3, r3, #3
 801a530:	440b      	add	r3, r1
 801a532:	3314      	adds	r3, #20
 801a534:	2201      	movs	r2, #1
 801a536:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a538:	7c7a      	ldrb	r2, [r7, #17]
 801a53a:	496d      	ldr	r1, [pc, #436]	; (801a6f0 <etharp_query+0x268>)
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	440b      	add	r3, r1
 801a546:	3308      	adds	r3, #8
 801a548:	68fa      	ldr	r2, [r7, #12]
 801a54a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a54c:	7c7a      	ldrb	r2, [r7, #17]
 801a54e:	4968      	ldr	r1, [pc, #416]	; (801a6f0 <etharp_query+0x268>)
 801a550:	4613      	mov	r3, r2
 801a552:	005b      	lsls	r3, r3, #1
 801a554:	4413      	add	r3, r2
 801a556:	00db      	lsls	r3, r3, #3
 801a558:	440b      	add	r3, r1
 801a55a:	3314      	adds	r3, #20
 801a55c:	781b      	ldrb	r3, [r3, #0]
 801a55e:	2b01      	cmp	r3, #1
 801a560:	d011      	beq.n	801a586 <etharp_query+0xfe>
 801a562:	7c7a      	ldrb	r2, [r7, #17]
 801a564:	4962      	ldr	r1, [pc, #392]	; (801a6f0 <etharp_query+0x268>)
 801a566:	4613      	mov	r3, r2
 801a568:	005b      	lsls	r3, r3, #1
 801a56a:	4413      	add	r3, r2
 801a56c:	00db      	lsls	r3, r3, #3
 801a56e:	440b      	add	r3, r1
 801a570:	3314      	adds	r3, #20
 801a572:	781b      	ldrb	r3, [r3, #0]
 801a574:	2b01      	cmp	r3, #1
 801a576:	d806      	bhi.n	801a586 <etharp_query+0xfe>
 801a578:	4b5a      	ldr	r3, [pc, #360]	; (801a6e4 <etharp_query+0x25c>)
 801a57a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a57e:	495d      	ldr	r1, [pc, #372]	; (801a6f4 <etharp_query+0x26c>)
 801a580:	485a      	ldr	r0, [pc, #360]	; (801a6ec <etharp_query+0x264>)
 801a582:	f002 fdab 	bl	801d0dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a586:	6a3b      	ldr	r3, [r7, #32]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d102      	bne.n	801a592 <etharp_query+0x10a>
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d10c      	bne.n	801a5ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a592:	68b9      	ldr	r1, [r7, #8]
 801a594:	68f8      	ldr	r0, [r7, #12]
 801a596:	f000 f963 	bl	801a860 <etharp_request>
 801a59a:	4603      	mov	r3, r0
 801a59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d102      	bne.n	801a5ac <etharp_query+0x124>
      return result;
 801a5a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a5aa:	e096      	b.n	801a6da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d106      	bne.n	801a5c0 <etharp_query+0x138>
 801a5b2:	4b4c      	ldr	r3, [pc, #304]	; (801a6e4 <etharp_query+0x25c>)
 801a5b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a5b8:	494f      	ldr	r1, [pc, #316]	; (801a6f8 <etharp_query+0x270>)
 801a5ba:	484c      	ldr	r0, [pc, #304]	; (801a6ec <etharp_query+0x264>)
 801a5bc:	f002 fd8e 	bl	801d0dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a5c0:	7c7a      	ldrb	r2, [r7, #17]
 801a5c2:	494b      	ldr	r1, [pc, #300]	; (801a6f0 <etharp_query+0x268>)
 801a5c4:	4613      	mov	r3, r2
 801a5c6:	005b      	lsls	r3, r3, #1
 801a5c8:	4413      	add	r3, r2
 801a5ca:	00db      	lsls	r3, r3, #3
 801a5cc:	440b      	add	r3, r1
 801a5ce:	3314      	adds	r3, #20
 801a5d0:	781b      	ldrb	r3, [r3, #0]
 801a5d2:	2b01      	cmp	r3, #1
 801a5d4:	d917      	bls.n	801a606 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a5d6:	4a49      	ldr	r2, [pc, #292]	; (801a6fc <etharp_query+0x274>)
 801a5d8:	7c7b      	ldrb	r3, [r7, #17]
 801a5da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a5dc:	7c7a      	ldrb	r2, [r7, #17]
 801a5de:	4613      	mov	r3, r2
 801a5e0:	005b      	lsls	r3, r3, #1
 801a5e2:	4413      	add	r3, r2
 801a5e4:	00db      	lsls	r3, r3, #3
 801a5e6:	3308      	adds	r3, #8
 801a5e8:	4a41      	ldr	r2, [pc, #260]	; (801a6f0 <etharp_query+0x268>)
 801a5ea:	4413      	add	r3, r2
 801a5ec:	3304      	adds	r3, #4
 801a5ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a5f2:	9200      	str	r2, [sp, #0]
 801a5f4:	697a      	ldr	r2, [r7, #20]
 801a5f6:	6879      	ldr	r1, [r7, #4]
 801a5f8:	68f8      	ldr	r0, [r7, #12]
 801a5fa:	f001 fc93 	bl	801bf24 <ethernet_output>
 801a5fe:	4603      	mov	r3, r0
 801a600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a604:	e067      	b.n	801a6d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a606:	7c7a      	ldrb	r2, [r7, #17]
 801a608:	4939      	ldr	r1, [pc, #228]	; (801a6f0 <etharp_query+0x268>)
 801a60a:	4613      	mov	r3, r2
 801a60c:	005b      	lsls	r3, r3, #1
 801a60e:	4413      	add	r3, r2
 801a610:	00db      	lsls	r3, r3, #3
 801a612:	440b      	add	r3, r1
 801a614:	3314      	adds	r3, #20
 801a616:	781b      	ldrb	r3, [r3, #0]
 801a618:	2b01      	cmp	r3, #1
 801a61a:	d15c      	bne.n	801a6d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a61c:	2300      	movs	r3, #0
 801a61e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a624:	e01c      	b.n	801a660 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	895a      	ldrh	r2, [r3, #10]
 801a62a:	69fb      	ldr	r3, [r7, #28]
 801a62c:	891b      	ldrh	r3, [r3, #8]
 801a62e:	429a      	cmp	r2, r3
 801a630:	d10a      	bne.n	801a648 <etharp_query+0x1c0>
 801a632:	69fb      	ldr	r3, [r7, #28]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d006      	beq.n	801a648 <etharp_query+0x1c0>
 801a63a:	4b2a      	ldr	r3, [pc, #168]	; (801a6e4 <etharp_query+0x25c>)
 801a63c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a640:	492f      	ldr	r1, [pc, #188]	; (801a700 <etharp_query+0x278>)
 801a642:	482a      	ldr	r0, [pc, #168]	; (801a6ec <etharp_query+0x264>)
 801a644:	f002 fd4a 	bl	801d0dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a648:	69fb      	ldr	r3, [r7, #28]
 801a64a:	7b1b      	ldrb	r3, [r3, #12]
 801a64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a650:	2b00      	cmp	r3, #0
 801a652:	d002      	beq.n	801a65a <etharp_query+0x1d2>
        copy_needed = 1;
 801a654:	2301      	movs	r3, #1
 801a656:	61bb      	str	r3, [r7, #24]
        break;
 801a658:	e005      	b.n	801a666 <etharp_query+0x1de>
      }
      p = p->next;
 801a65a:	69fb      	ldr	r3, [r7, #28]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a660:	69fb      	ldr	r3, [r7, #28]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d1df      	bne.n	801a626 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a666:	69bb      	ldr	r3, [r7, #24]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d007      	beq.n	801a67c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a66c:	687a      	ldr	r2, [r7, #4]
 801a66e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a672:	200e      	movs	r0, #14
 801a674:	f7f6 fc24 	bl	8010ec0 <pbuf_clone>
 801a678:	61f8      	str	r0, [r7, #28]
 801a67a:	e004      	b.n	801a686 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a680:	69f8      	ldr	r0, [r7, #28]
 801a682:	f7f6 f919 	bl	80108b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a686:	69fb      	ldr	r3, [r7, #28]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d021      	beq.n	801a6d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a68c:	7c7a      	ldrb	r2, [r7, #17]
 801a68e:	4918      	ldr	r1, [pc, #96]	; (801a6f0 <etharp_query+0x268>)
 801a690:	4613      	mov	r3, r2
 801a692:	005b      	lsls	r3, r3, #1
 801a694:	4413      	add	r3, r2
 801a696:	00db      	lsls	r3, r3, #3
 801a698:	440b      	add	r3, r1
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d00a      	beq.n	801a6b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a6a0:	7c7a      	ldrb	r2, [r7, #17]
 801a6a2:	4913      	ldr	r1, [pc, #76]	; (801a6f0 <etharp_query+0x268>)
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	005b      	lsls	r3, r3, #1
 801a6a8:	4413      	add	r3, r2
 801a6aa:	00db      	lsls	r3, r3, #3
 801a6ac:	440b      	add	r3, r1
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f7f6 f861 	bl	8010778 <pbuf_free>
      }
      arp_table[i].q = p;
 801a6b6:	7c7a      	ldrb	r2, [r7, #17]
 801a6b8:	490d      	ldr	r1, [pc, #52]	; (801a6f0 <etharp_query+0x268>)
 801a6ba:	4613      	mov	r3, r2
 801a6bc:	005b      	lsls	r3, r3, #1
 801a6be:	4413      	add	r3, r2
 801a6c0:	00db      	lsls	r3, r3, #3
 801a6c2:	440b      	add	r3, r1
 801a6c4:	69fa      	ldr	r2, [r7, #28]
 801a6c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a6ce:	e002      	b.n	801a6d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a6d0:	23ff      	movs	r3, #255	; 0xff
 801a6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a6d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3728      	adds	r7, #40	; 0x28
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	080206f8 	.word	0x080206f8
 801a6e8:	080208a4 	.word	0x080208a4
 801a6ec:	08020770 	.word	0x08020770
 801a6f0:	2000870c 	.word	0x2000870c
 801a6f4:	080208b4 	.word	0x080208b4
 801a6f8:	08020898 	.word	0x08020898
 801a6fc:	200087fc 	.word	0x200087fc
 801a700:	080208dc 	.word	0x080208dc

0801a704 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a704:	b580      	push	{r7, lr}
 801a706:	b08a      	sub	sp, #40	; 0x28
 801a708:	af02      	add	r7, sp, #8
 801a70a:	60f8      	str	r0, [r7, #12]
 801a70c:	60b9      	str	r1, [r7, #8]
 801a70e:	607a      	str	r2, [r7, #4]
 801a710:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a712:	2300      	movs	r3, #0
 801a714:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d106      	bne.n	801a72a <etharp_raw+0x26>
 801a71c:	4b3a      	ldr	r3, [pc, #232]	; (801a808 <etharp_raw+0x104>)
 801a71e:	f240 4257 	movw	r2, #1111	; 0x457
 801a722:	493a      	ldr	r1, [pc, #232]	; (801a80c <etharp_raw+0x108>)
 801a724:	483a      	ldr	r0, [pc, #232]	; (801a810 <etharp_raw+0x10c>)
 801a726:	f002 fcd9 	bl	801d0dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a72a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a72e:	211c      	movs	r1, #28
 801a730:	200e      	movs	r0, #14
 801a732:	f7f5 fd3d 	bl	80101b0 <pbuf_alloc>
 801a736:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a738:	69bb      	ldr	r3, [r7, #24]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d102      	bne.n	801a744 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a73e:	f04f 33ff 	mov.w	r3, #4294967295
 801a742:	e05d      	b.n	801a800 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a744:	69bb      	ldr	r3, [r7, #24]
 801a746:	895b      	ldrh	r3, [r3, #10]
 801a748:	2b1b      	cmp	r3, #27
 801a74a:	d806      	bhi.n	801a75a <etharp_raw+0x56>
 801a74c:	4b2e      	ldr	r3, [pc, #184]	; (801a808 <etharp_raw+0x104>)
 801a74e:	f240 4262 	movw	r2, #1122	; 0x462
 801a752:	4930      	ldr	r1, [pc, #192]	; (801a814 <etharp_raw+0x110>)
 801a754:	482e      	ldr	r0, [pc, #184]	; (801a810 <etharp_raw+0x10c>)
 801a756:	f002 fcc1 	bl	801d0dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a75a:	69bb      	ldr	r3, [r7, #24]
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a760:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a762:	4618      	mov	r0, r3
 801a764:	f7f4 f9b1 	bl	800eaca <lwip_htons>
 801a768:	4603      	mov	r3, r0
 801a76a:	461a      	mov	r2, r3
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a776:	2b06      	cmp	r3, #6
 801a778:	d006      	beq.n	801a788 <etharp_raw+0x84>
 801a77a:	4b23      	ldr	r3, [pc, #140]	; (801a808 <etharp_raw+0x104>)
 801a77c:	f240 4269 	movw	r2, #1129	; 0x469
 801a780:	4925      	ldr	r1, [pc, #148]	; (801a818 <etharp_raw+0x114>)
 801a782:	4823      	ldr	r0, [pc, #140]	; (801a810 <etharp_raw+0x10c>)
 801a784:	f002 fcaa 	bl	801d0dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a788:	697b      	ldr	r3, [r7, #20]
 801a78a:	3308      	adds	r3, #8
 801a78c:	2206      	movs	r2, #6
 801a78e:	6839      	ldr	r1, [r7, #0]
 801a790:	4618      	mov	r0, r3
 801a792:	f002 fd96 	bl	801d2c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	3312      	adds	r3, #18
 801a79a:	2206      	movs	r2, #6
 801a79c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f002 fd8f 	bl	801d2c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	330e      	adds	r3, #14
 801a7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7aa:	6812      	ldr	r2, [r2, #0]
 801a7ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a7ae:	697b      	ldr	r3, [r7, #20]
 801a7b0:	3318      	adds	r3, #24
 801a7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7b4:	6812      	ldr	r2, [r2, #0]
 801a7b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a7b8:	697b      	ldr	r3, [r7, #20]
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	701a      	strb	r2, [r3, #0]
 801a7be:	2200      	movs	r2, #0
 801a7c0:	f042 0201 	orr.w	r2, r2, #1
 801a7c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a7c6:	697b      	ldr	r3, [r7, #20]
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	f042 0208 	orr.w	r2, r2, #8
 801a7ce:	709a      	strb	r2, [r3, #2]
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a7d4:	697b      	ldr	r3, [r7, #20]
 801a7d6:	2206      	movs	r2, #6
 801a7d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a7da:	697b      	ldr	r3, [r7, #20]
 801a7dc:	2204      	movs	r2, #4
 801a7de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a7e0:	f640 0306 	movw	r3, #2054	; 0x806
 801a7e4:	9300      	str	r3, [sp, #0]
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	68ba      	ldr	r2, [r7, #8]
 801a7ea:	69b9      	ldr	r1, [r7, #24]
 801a7ec:	68f8      	ldr	r0, [r7, #12]
 801a7ee:	f001 fb99 	bl	801bf24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a7f2:	69b8      	ldr	r0, [r7, #24]
 801a7f4:	f7f5 ffc0 	bl	8010778 <pbuf_free>
  p = NULL;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a7fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a800:	4618      	mov	r0, r3
 801a802:	3720      	adds	r7, #32
 801a804:	46bd      	mov	sp, r7
 801a806:	bd80      	pop	{r7, pc}
 801a808:	080206f8 	.word	0x080206f8
 801a80c:	08020848 	.word	0x08020848
 801a810:	08020770 	.word	0x08020770
 801a814:	080208f8 	.word	0x080208f8
 801a818:	0802092c 	.word	0x0802092c

0801a81c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a81c:	b580      	push	{r7, lr}
 801a81e:	b088      	sub	sp, #32
 801a820:	af04      	add	r7, sp, #16
 801a822:	60f8      	str	r0, [r7, #12]
 801a824:	60b9      	str	r1, [r7, #8]
 801a826:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a838:	2201      	movs	r2, #1
 801a83a:	9203      	str	r2, [sp, #12]
 801a83c:	68ba      	ldr	r2, [r7, #8]
 801a83e:	9202      	str	r2, [sp, #8]
 801a840:	4a06      	ldr	r2, [pc, #24]	; (801a85c <etharp_request_dst+0x40>)
 801a842:	9201      	str	r2, [sp, #4]
 801a844:	9300      	str	r3, [sp, #0]
 801a846:	4603      	mov	r3, r0
 801a848:	687a      	ldr	r2, [r7, #4]
 801a84a:	68f8      	ldr	r0, [r7, #12]
 801a84c:	f7ff ff5a 	bl	801a704 <etharp_raw>
 801a850:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a852:	4618      	mov	r0, r3
 801a854:	3710      	adds	r7, #16
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	08020f6c 	.word	0x08020f6c

0801a860 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b082      	sub	sp, #8
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
 801a868:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a86a:	4a05      	ldr	r2, [pc, #20]	; (801a880 <etharp_request+0x20>)
 801a86c:	6839      	ldr	r1, [r7, #0]
 801a86e:	6878      	ldr	r0, [r7, #4]
 801a870:	f7ff ffd4 	bl	801a81c <etharp_request_dst>
 801a874:	4603      	mov	r3, r0
}
 801a876:	4618      	mov	r0, r3
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
 801a87e:	bf00      	nop
 801a880:	08020f64 	.word	0x08020f64

0801a884 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b08e      	sub	sp, #56	; 0x38
 801a888:	af04      	add	r7, sp, #16
 801a88a:	6078      	str	r0, [r7, #4]
 801a88c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a88e:	4b79      	ldr	r3, [pc, #484]	; (801aa74 <icmp_input+0x1f0>)
 801a890:	689b      	ldr	r3, [r3, #8]
 801a892:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	f003 030f 	and.w	r3, r3, #15
 801a89c:	b2db      	uxtb	r3, r3
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8a6:	2b13      	cmp	r3, #19
 801a8a8:	f240 80cd 	bls.w	801aa46 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	895b      	ldrh	r3, [r3, #10]
 801a8b0:	2b03      	cmp	r3, #3
 801a8b2:	f240 80ca 	bls.w	801aa4a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	685b      	ldr	r3, [r3, #4]
 801a8ba:	781b      	ldrb	r3, [r3, #0]
 801a8bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a8c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	f000 80b7 	beq.w	801aa38 <icmp_input+0x1b4>
 801a8ca:	2b08      	cmp	r3, #8
 801a8cc:	f040 80b7 	bne.w	801aa3e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a8d0:	4b69      	ldr	r3, [pc, #420]	; (801aa78 <icmp_input+0x1f4>)
 801a8d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a8d4:	4b67      	ldr	r3, [pc, #412]	; (801aa74 <icmp_input+0x1f0>)
 801a8d6:	695b      	ldr	r3, [r3, #20]
 801a8d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a8dc:	2be0      	cmp	r3, #224	; 0xe0
 801a8de:	f000 80bb 	beq.w	801aa58 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a8e2:	4b64      	ldr	r3, [pc, #400]	; (801aa74 <icmp_input+0x1f0>)
 801a8e4:	695b      	ldr	r3, [r3, #20]
 801a8e6:	4a63      	ldr	r2, [pc, #396]	; (801aa74 <icmp_input+0x1f0>)
 801a8e8:	6812      	ldr	r2, [r2, #0]
 801a8ea:	4611      	mov	r1, r2
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f000 fc0b 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f040 80b1 	bne.w	801aa5c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	891b      	ldrh	r3, [r3, #8]
 801a8fe:	2b07      	cmp	r3, #7
 801a900:	f240 80a5 	bls.w	801aa4e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a906:	330e      	adds	r3, #14
 801a908:	4619      	mov	r1, r3
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f7f5 fe9e 	bl	801064c <pbuf_add_header>
 801a910:	4603      	mov	r3, r0
 801a912:	2b00      	cmp	r3, #0
 801a914:	d04b      	beq.n	801a9ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	891a      	ldrh	r2, [r3, #8]
 801a91a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a91c:	4413      	add	r3, r2
 801a91e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	891b      	ldrh	r3, [r3, #8]
 801a924:	8b7a      	ldrh	r2, [r7, #26]
 801a926:	429a      	cmp	r2, r3
 801a928:	f0c0 809a 	bcc.w	801aa60 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a92c:	8b7b      	ldrh	r3, [r7, #26]
 801a92e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a932:	4619      	mov	r1, r3
 801a934:	200e      	movs	r0, #14
 801a936:	f7f5 fc3b 	bl	80101b0 <pbuf_alloc>
 801a93a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	f000 8090 	beq.w	801aa64 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a944:	697b      	ldr	r3, [r7, #20]
 801a946:	895b      	ldrh	r3, [r3, #10]
 801a948:	461a      	mov	r2, r3
 801a94a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a94c:	3308      	adds	r3, #8
 801a94e:	429a      	cmp	r2, r3
 801a950:	d203      	bcs.n	801a95a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a952:	6978      	ldr	r0, [r7, #20]
 801a954:	f7f5 ff10 	bl	8010778 <pbuf_free>
          goto icmperr;
 801a958:	e085      	b.n	801aa66 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	685b      	ldr	r3, [r3, #4]
 801a95e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a962:	4618      	mov	r0, r3
 801a964:	f002 fcad 	bl	801d2c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a96a:	4619      	mov	r1, r3
 801a96c:	6978      	ldr	r0, [r7, #20]
 801a96e:	f7f5 fe7d 	bl	801066c <pbuf_remove_header>
 801a972:	4603      	mov	r3, r0
 801a974:	2b00      	cmp	r3, #0
 801a976:	d009      	beq.n	801a98c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a978:	4b40      	ldr	r3, [pc, #256]	; (801aa7c <icmp_input+0x1f8>)
 801a97a:	22b6      	movs	r2, #182	; 0xb6
 801a97c:	4940      	ldr	r1, [pc, #256]	; (801aa80 <icmp_input+0x1fc>)
 801a97e:	4841      	ldr	r0, [pc, #260]	; (801aa84 <icmp_input+0x200>)
 801a980:	f002 fbac 	bl	801d0dc <iprintf>
          pbuf_free(r);
 801a984:	6978      	ldr	r0, [r7, #20]
 801a986:	f7f5 fef7 	bl	8010778 <pbuf_free>
          goto icmperr;
 801a98a:	e06c      	b.n	801aa66 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a98c:	6879      	ldr	r1, [r7, #4]
 801a98e:	6978      	ldr	r0, [r7, #20]
 801a990:	f7f6 f81a 	bl	80109c8 <pbuf_copy>
 801a994:	4603      	mov	r3, r0
 801a996:	2b00      	cmp	r3, #0
 801a998:	d003      	beq.n	801a9a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a99a:	6978      	ldr	r0, [r7, #20]
 801a99c:	f7f5 feec 	bl	8010778 <pbuf_free>
          goto icmperr;
 801a9a0:	e061      	b.n	801aa66 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a9a2:	6878      	ldr	r0, [r7, #4]
 801a9a4:	f7f5 fee8 	bl	8010778 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a9a8:	697b      	ldr	r3, [r7, #20]
 801a9aa:	607b      	str	r3, [r7, #4]
 801a9ac:	e00f      	b.n	801a9ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a9ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a9b0:	330e      	adds	r3, #14
 801a9b2:	4619      	mov	r1, r3
 801a9b4:	6878      	ldr	r0, [r7, #4]
 801a9b6:	f7f5 fe59 	bl	801066c <pbuf_remove_header>
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d006      	beq.n	801a9ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a9c0:	4b2e      	ldr	r3, [pc, #184]	; (801aa7c <icmp_input+0x1f8>)
 801a9c2:	22c7      	movs	r2, #199	; 0xc7
 801a9c4:	4930      	ldr	r1, [pc, #192]	; (801aa88 <icmp_input+0x204>)
 801a9c6:	482f      	ldr	r0, [pc, #188]	; (801aa84 <icmp_input+0x200>)
 801a9c8:	f002 fb88 	bl	801d0dc <iprintf>
          goto icmperr;
 801a9cc:	e04b      	b.n	801aa66 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	685b      	ldr	r3, [r3, #4]
 801a9d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a9d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	6878      	ldr	r0, [r7, #4]
 801a9da:	f7f5 fe37 	bl	801064c <pbuf_add_header>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d12b      	bne.n	801aa3c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	685b      	ldr	r3, [r3, #4]
 801a9e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a9ea:	69fb      	ldr	r3, [r7, #28]
 801a9ec:	681a      	ldr	r2, [r3, #0]
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a9f2:	4b20      	ldr	r3, [pc, #128]	; (801aa74 <icmp_input+0x1f0>)
 801a9f4:	691a      	ldr	r2, [r3, #16]
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a9fa:	693b      	ldr	r3, [r7, #16]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801aa00:	693b      	ldr	r3, [r7, #16]
 801aa02:	2200      	movs	r2, #0
 801aa04:	709a      	strb	r2, [r3, #2]
 801aa06:	2200      	movs	r2, #0
 801aa08:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	22ff      	movs	r2, #255	; 0xff
 801aa0e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	2200      	movs	r2, #0
 801aa14:	729a      	strb	r2, [r3, #10]
 801aa16:	2200      	movs	r2, #0
 801aa18:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	9302      	str	r3, [sp, #8]
 801aa1e:	2301      	movs	r3, #1
 801aa20:	9301      	str	r3, [sp, #4]
 801aa22:	2300      	movs	r3, #0
 801aa24:	9300      	str	r3, [sp, #0]
 801aa26:	23ff      	movs	r3, #255	; 0xff
 801aa28:	2200      	movs	r2, #0
 801aa2a:	69f9      	ldr	r1, [r7, #28]
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f000 fa93 	bl	801af58 <ip4_output_if>
 801aa32:	4603      	mov	r3, r0
 801aa34:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801aa36:	e001      	b.n	801aa3c <icmp_input+0x1b8>
      break;
 801aa38:	bf00      	nop
 801aa3a:	e000      	b.n	801aa3e <icmp_input+0x1ba>
      break;
 801aa3c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801aa3e:	6878      	ldr	r0, [r7, #4]
 801aa40:	f7f5 fe9a 	bl	8010778 <pbuf_free>
  return;
 801aa44:	e013      	b.n	801aa6e <icmp_input+0x1ea>
    goto lenerr;
 801aa46:	bf00      	nop
 801aa48:	e002      	b.n	801aa50 <icmp_input+0x1cc>
    goto lenerr;
 801aa4a:	bf00      	nop
 801aa4c:	e000      	b.n	801aa50 <icmp_input+0x1cc>
        goto lenerr;
 801aa4e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801aa50:	6878      	ldr	r0, [r7, #4]
 801aa52:	f7f5 fe91 	bl	8010778 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aa56:	e00a      	b.n	801aa6e <icmp_input+0x1ea>
        goto icmperr;
 801aa58:	bf00      	nop
 801aa5a:	e004      	b.n	801aa66 <icmp_input+0x1e2>
        goto icmperr;
 801aa5c:	bf00      	nop
 801aa5e:	e002      	b.n	801aa66 <icmp_input+0x1e2>
          goto icmperr;
 801aa60:	bf00      	nop
 801aa62:	e000      	b.n	801aa66 <icmp_input+0x1e2>
          goto icmperr;
 801aa64:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801aa66:	6878      	ldr	r0, [r7, #4]
 801aa68:	f7f5 fe86 	bl	8010778 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aa6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801aa6e:	3728      	adds	r7, #40	; 0x28
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	2000550c 	.word	0x2000550c
 801aa78:	20005520 	.word	0x20005520
 801aa7c:	08020970 	.word	0x08020970
 801aa80:	080209a8 	.word	0x080209a8
 801aa84:	080209e0 	.word	0x080209e0
 801aa88:	08020a08 	.word	0x08020a08

0801aa8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b082      	sub	sp, #8
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	460b      	mov	r3, r1
 801aa96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801aa98:	78fb      	ldrb	r3, [r7, #3]
 801aa9a:	461a      	mov	r2, r3
 801aa9c:	2103      	movs	r1, #3
 801aa9e:	6878      	ldr	r0, [r7, #4]
 801aaa0:	f000 f814 	bl	801aacc <icmp_send_response>
}
 801aaa4:	bf00      	nop
 801aaa6:	3708      	adds	r7, #8
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}

0801aaac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	460b      	mov	r3, r1
 801aab6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801aab8:	78fb      	ldrb	r3, [r7, #3]
 801aaba:	461a      	mov	r2, r3
 801aabc:	210b      	movs	r1, #11
 801aabe:	6878      	ldr	r0, [r7, #4]
 801aac0:	f000 f804 	bl	801aacc <icmp_send_response>
}
 801aac4:	bf00      	nop
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b08c      	sub	sp, #48	; 0x30
 801aad0:	af04      	add	r7, sp, #16
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	460b      	mov	r3, r1
 801aad6:	70fb      	strb	r3, [r7, #3]
 801aad8:	4613      	mov	r3, r2
 801aada:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801aadc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aae0:	2124      	movs	r1, #36	; 0x24
 801aae2:	2022      	movs	r0, #34	; 0x22
 801aae4:	f7f5 fb64 	bl	80101b0 <pbuf_alloc>
 801aae8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801aaea:	69fb      	ldr	r3, [r7, #28]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d04c      	beq.n	801ab8a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801aaf0:	69fb      	ldr	r3, [r7, #28]
 801aaf2:	895b      	ldrh	r3, [r3, #10]
 801aaf4:	2b23      	cmp	r3, #35	; 0x23
 801aaf6:	d806      	bhi.n	801ab06 <icmp_send_response+0x3a>
 801aaf8:	4b26      	ldr	r3, [pc, #152]	; (801ab94 <icmp_send_response+0xc8>)
 801aafa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801aafe:	4926      	ldr	r1, [pc, #152]	; (801ab98 <icmp_send_response+0xcc>)
 801ab00:	4826      	ldr	r0, [pc, #152]	; (801ab9c <icmp_send_response+0xd0>)
 801ab02:	f002 faeb 	bl	801d0dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ab0c:	69fb      	ldr	r3, [r7, #28]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ab12:	697b      	ldr	r3, [r7, #20]
 801ab14:	78fa      	ldrb	r2, [r7, #3]
 801ab16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ab18:	697b      	ldr	r3, [r7, #20]
 801ab1a:	78ba      	ldrb	r2, [r7, #2]
 801ab1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	2200      	movs	r2, #0
 801ab22:	711a      	strb	r2, [r3, #4]
 801ab24:	2200      	movs	r2, #0
 801ab26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	719a      	strb	r2, [r3, #6]
 801ab2e:	2200      	movs	r2, #0
 801ab30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ab32:	69fb      	ldr	r3, [r7, #28]
 801ab34:	685b      	ldr	r3, [r3, #4]
 801ab36:	f103 0008 	add.w	r0, r3, #8
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	685b      	ldr	r3, [r3, #4]
 801ab3e:	221c      	movs	r2, #28
 801ab40:	4619      	mov	r1, r3
 801ab42:	f002 fbbe 	bl	801d2c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ab46:	69bb      	ldr	r3, [r7, #24]
 801ab48:	68db      	ldr	r3, [r3, #12]
 801ab4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ab4c:	f107 030c 	add.w	r3, r7, #12
 801ab50:	4618      	mov	r0, r3
 801ab52:	f000 f825 	bl	801aba0 <ip4_route>
 801ab56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ab58:	693b      	ldr	r3, [r7, #16]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d011      	beq.n	801ab82 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ab5e:	697b      	ldr	r3, [r7, #20]
 801ab60:	2200      	movs	r2, #0
 801ab62:	709a      	strb	r2, [r3, #2]
 801ab64:	2200      	movs	r2, #0
 801ab66:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ab68:	f107 020c 	add.w	r2, r7, #12
 801ab6c:	693b      	ldr	r3, [r7, #16]
 801ab6e:	9302      	str	r3, [sp, #8]
 801ab70:	2301      	movs	r3, #1
 801ab72:	9301      	str	r3, [sp, #4]
 801ab74:	2300      	movs	r3, #0
 801ab76:	9300      	str	r3, [sp, #0]
 801ab78:	23ff      	movs	r3, #255	; 0xff
 801ab7a:	2100      	movs	r1, #0
 801ab7c:	69f8      	ldr	r0, [r7, #28]
 801ab7e:	f000 f9eb 	bl	801af58 <ip4_output_if>
  }
  pbuf_free(q);
 801ab82:	69f8      	ldr	r0, [r7, #28]
 801ab84:	f7f5 fdf8 	bl	8010778 <pbuf_free>
 801ab88:	e000      	b.n	801ab8c <icmp_send_response+0xc0>
    return;
 801ab8a:	bf00      	nop
}
 801ab8c:	3720      	adds	r7, #32
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bd80      	pop	{r7, pc}
 801ab92:	bf00      	nop
 801ab94:	08020970 	.word	0x08020970
 801ab98:	08020a3c 	.word	0x08020a3c
 801ab9c:	080209e0 	.word	0x080209e0

0801aba0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b085      	sub	sp, #20
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801aba8:	4b33      	ldr	r3, [pc, #204]	; (801ac78 <ip4_route+0xd8>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	60fb      	str	r3, [r7, #12]
 801abae:	e036      	b.n	801ac1e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801abb6:	f003 0301 	and.w	r3, r3, #1
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d02b      	beq.n	801ac18 <ip4_route+0x78>
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801abc6:	089b      	lsrs	r3, r3, #2
 801abc8:	f003 0301 	and.w	r3, r3, #1
 801abcc:	b2db      	uxtb	r3, r3
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d022      	beq.n	801ac18 <ip4_route+0x78>
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	3304      	adds	r3, #4
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d01d      	beq.n	801ac18 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681a      	ldr	r2, [r3, #0]
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	3304      	adds	r3, #4
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	405a      	eors	r2, r3
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	3308      	adds	r3, #8
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4013      	ands	r3, r2
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d101      	bne.n	801abf8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	e038      	b.n	801ac6a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801abfe:	f003 0302 	and.w	r3, r3, #2
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d108      	bne.n	801ac18 <ip4_route+0x78>
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681a      	ldr	r2, [r3, #0]
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	330c      	adds	r3, #12
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d101      	bne.n	801ac18 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	e028      	b.n	801ac6a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	60fb      	str	r3, [r7, #12]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d1c5      	bne.n	801abb0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ac24:	4b15      	ldr	r3, [pc, #84]	; (801ac7c <ip4_route+0xdc>)
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d01a      	beq.n	801ac62 <ip4_route+0xc2>
 801ac2c:	4b13      	ldr	r3, [pc, #76]	; (801ac7c <ip4_route+0xdc>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ac34:	f003 0301 	and.w	r3, r3, #1
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d012      	beq.n	801ac62 <ip4_route+0xc2>
 801ac3c:	4b0f      	ldr	r3, [pc, #60]	; (801ac7c <ip4_route+0xdc>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ac44:	f003 0304 	and.w	r3, r3, #4
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d00a      	beq.n	801ac62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ac4c:	4b0b      	ldr	r3, [pc, #44]	; (801ac7c <ip4_route+0xdc>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	3304      	adds	r3, #4
 801ac52:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d004      	beq.n	801ac62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	b2db      	uxtb	r3, r3
 801ac5e:	2b7f      	cmp	r3, #127	; 0x7f
 801ac60:	d101      	bne.n	801ac66 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ac62:	2300      	movs	r3, #0
 801ac64:	e001      	b.n	801ac6a <ip4_route+0xca>
  }

  return netif_default;
 801ac66:	4b05      	ldr	r3, [pc, #20]	; (801ac7c <ip4_route+0xdc>)
 801ac68:	681b      	ldr	r3, [r3, #0]
}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	3714      	adds	r7, #20
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	20008660 	.word	0x20008660
 801ac7c:	20008664 	.word	0x20008664

0801ac80 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b082      	sub	sp, #8
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ac8e:	f003 0301 	and.w	r3, r3, #1
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d016      	beq.n	801acc6 <ip4_input_accept+0x46>
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	3304      	adds	r3, #4
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d011      	beq.n	801acc6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801aca2:	4b0b      	ldr	r3, [pc, #44]	; (801acd0 <ip4_input_accept+0x50>)
 801aca4:	695a      	ldr	r2, [r3, #20]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	3304      	adds	r3, #4
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	429a      	cmp	r2, r3
 801acae:	d008      	beq.n	801acc2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801acb0:	4b07      	ldr	r3, [pc, #28]	; (801acd0 <ip4_input_accept+0x50>)
 801acb2:	695b      	ldr	r3, [r3, #20]
 801acb4:	6879      	ldr	r1, [r7, #4]
 801acb6:	4618      	mov	r0, r3
 801acb8:	f000 fa26 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801acbc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d001      	beq.n	801acc6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801acc2:	2301      	movs	r3, #1
 801acc4:	e000      	b.n	801acc8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801acc6:	2300      	movs	r3, #0
}
 801acc8:	4618      	mov	r0, r3
 801acca:	3708      	adds	r7, #8
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}
 801acd0:	2000550c 	.word	0x2000550c

0801acd4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b088      	sub	sp, #32
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
 801acdc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801acde:	2301      	movs	r3, #1
 801ace0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	685b      	ldr	r3, [r3, #4]
 801ace6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801ace8:	69fb      	ldr	r3, [r7, #28]
 801acea:	781b      	ldrb	r3, [r3, #0]
 801acec:	091b      	lsrs	r3, r3, #4
 801acee:	b2db      	uxtb	r3, r3
 801acf0:	2b04      	cmp	r3, #4
 801acf2:	d004      	beq.n	801acfe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801acf4:	6878      	ldr	r0, [r7, #4]
 801acf6:	f7f5 fd3f 	bl	8010778 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801acfa:	2300      	movs	r3, #0
 801acfc:	e123      	b.n	801af46 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801acfe:	69fb      	ldr	r3, [r7, #28]
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	f003 030f 	and.w	r3, r3, #15
 801ad06:	b2db      	uxtb	r3, r3
 801ad08:	009b      	lsls	r3, r3, #2
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ad0e:	69fb      	ldr	r3, [r7, #28]
 801ad10:	885b      	ldrh	r3, [r3, #2]
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7f3 fed8 	bl	800eaca <lwip_htons>
 801ad1a:	4603      	mov	r3, r0
 801ad1c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	891b      	ldrh	r3, [r3, #8]
 801ad22:	8a3a      	ldrh	r2, [r7, #16]
 801ad24:	429a      	cmp	r2, r3
 801ad26:	d204      	bcs.n	801ad32 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801ad28:	8a3b      	ldrh	r3, [r7, #16]
 801ad2a:	4619      	mov	r1, r3
 801ad2c:	6878      	ldr	r0, [r7, #4]
 801ad2e:	f7f5 fb9d 	bl	801046c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	895b      	ldrh	r3, [r3, #10]
 801ad36:	8a7a      	ldrh	r2, [r7, #18]
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	d807      	bhi.n	801ad4c <ip4_input+0x78>
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	891b      	ldrh	r3, [r3, #8]
 801ad40:	8a3a      	ldrh	r2, [r7, #16]
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d802      	bhi.n	801ad4c <ip4_input+0x78>
 801ad46:	8a7b      	ldrh	r3, [r7, #18]
 801ad48:	2b13      	cmp	r3, #19
 801ad4a:	d804      	bhi.n	801ad56 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f7f5 fd13 	bl	8010778 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ad52:	2300      	movs	r3, #0
 801ad54:	e0f7      	b.n	801af46 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ad56:	69fb      	ldr	r3, [r7, #28]
 801ad58:	691b      	ldr	r3, [r3, #16]
 801ad5a:	4a7d      	ldr	r2, [pc, #500]	; (801af50 <ip4_input+0x27c>)
 801ad5c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	68db      	ldr	r3, [r3, #12]
 801ad62:	4a7b      	ldr	r2, [pc, #492]	; (801af50 <ip4_input+0x27c>)
 801ad64:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ad66:	4b7a      	ldr	r3, [pc, #488]	; (801af50 <ip4_input+0x27c>)
 801ad68:	695b      	ldr	r3, [r3, #20]
 801ad6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ad6e:	2be0      	cmp	r3, #224	; 0xe0
 801ad70:	d112      	bne.n	801ad98 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ad72:	683b      	ldr	r3, [r7, #0]
 801ad74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ad78:	f003 0301 	and.w	r3, r3, #1
 801ad7c:	b2db      	uxtb	r3, r3
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d007      	beq.n	801ad92 <ip4_input+0xbe>
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	3304      	adds	r3, #4
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d002      	beq.n	801ad92 <ip4_input+0xbe>
      netif = inp;
 801ad8c:	683b      	ldr	r3, [r7, #0]
 801ad8e:	61bb      	str	r3, [r7, #24]
 801ad90:	e02a      	b.n	801ade8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801ad92:	2300      	movs	r3, #0
 801ad94:	61bb      	str	r3, [r7, #24]
 801ad96:	e027      	b.n	801ade8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ad98:	6838      	ldr	r0, [r7, #0]
 801ad9a:	f7ff ff71 	bl	801ac80 <ip4_input_accept>
 801ad9e:	4603      	mov	r3, r0
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d002      	beq.n	801adaa <ip4_input+0xd6>
      netif = inp;
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	61bb      	str	r3, [r7, #24]
 801ada8:	e01e      	b.n	801ade8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801adaa:	2300      	movs	r3, #0
 801adac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801adae:	4b68      	ldr	r3, [pc, #416]	; (801af50 <ip4_input+0x27c>)
 801adb0:	695b      	ldr	r3, [r3, #20]
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	2b7f      	cmp	r3, #127	; 0x7f
 801adb6:	d017      	beq.n	801ade8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801adb8:	4b66      	ldr	r3, [pc, #408]	; (801af54 <ip4_input+0x280>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	61bb      	str	r3, [r7, #24]
 801adbe:	e00e      	b.n	801adde <ip4_input+0x10a>
          if (netif == inp) {
 801adc0:	69ba      	ldr	r2, [r7, #24]
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	429a      	cmp	r2, r3
 801adc6:	d006      	beq.n	801add6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801adc8:	69b8      	ldr	r0, [r7, #24]
 801adca:	f7ff ff59 	bl	801ac80 <ip4_input_accept>
 801adce:	4603      	mov	r3, r0
 801add0:	2b00      	cmp	r3, #0
 801add2:	d108      	bne.n	801ade6 <ip4_input+0x112>
 801add4:	e000      	b.n	801add8 <ip4_input+0x104>
            continue;
 801add6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801add8:	69bb      	ldr	r3, [r7, #24]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	61bb      	str	r3, [r7, #24]
 801adde:	69bb      	ldr	r3, [r7, #24]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d1ed      	bne.n	801adc0 <ip4_input+0xec>
 801ade4:	e000      	b.n	801ade8 <ip4_input+0x114>
            break;
 801ade6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ade8:	69bb      	ldr	r3, [r7, #24]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d111      	bne.n	801ae12 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801adee:	69fb      	ldr	r3, [r7, #28]
 801adf0:	7a5b      	ldrb	r3, [r3, #9]
 801adf2:	2b11      	cmp	r3, #17
 801adf4:	d10d      	bne.n	801ae12 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801adf6:	8a7b      	ldrh	r3, [r7, #18]
 801adf8:	69fa      	ldr	r2, [r7, #28]
 801adfa:	4413      	add	r3, r2
 801adfc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	885b      	ldrh	r3, [r3, #2]
 801ae02:	b29b      	uxth	r3, r3
 801ae04:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801ae08:	d103      	bne.n	801ae12 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ae0a:	683b      	ldr	r3, [r7, #0]
 801ae0c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ae12:	697b      	ldr	r3, [r7, #20]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d017      	beq.n	801ae48 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ae18:	4b4d      	ldr	r3, [pc, #308]	; (801af50 <ip4_input+0x27c>)
 801ae1a:	691b      	ldr	r3, [r3, #16]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d013      	beq.n	801ae48 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ae20:	4b4b      	ldr	r3, [pc, #300]	; (801af50 <ip4_input+0x27c>)
 801ae22:	691b      	ldr	r3, [r3, #16]
 801ae24:	6839      	ldr	r1, [r7, #0]
 801ae26:	4618      	mov	r0, r3
 801ae28:	f000 f96e 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d105      	bne.n	801ae3e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ae32:	4b47      	ldr	r3, [pc, #284]	; (801af50 <ip4_input+0x27c>)
 801ae34:	691b      	ldr	r3, [r3, #16]
 801ae36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ae3a:	2be0      	cmp	r3, #224	; 0xe0
 801ae3c:	d104      	bne.n	801ae48 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	f7f5 fc9a 	bl	8010778 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ae44:	2300      	movs	r3, #0
 801ae46:	e07e      	b.n	801af46 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d104      	bne.n	801ae58 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f7f5 fc92 	bl	8010778 <pbuf_free>
    return ERR_OK;
 801ae54:	2300      	movs	r3, #0
 801ae56:	e076      	b.n	801af46 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ae58:	69fb      	ldr	r3, [r7, #28]
 801ae5a:	88db      	ldrh	r3, [r3, #6]
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	461a      	mov	r2, r3
 801ae60:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ae64:	4013      	ands	r3, r2
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d00b      	beq.n	801ae82 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ae6a:	6878      	ldr	r0, [r7, #4]
 801ae6c:	f000 fc92 	bl	801b794 <ip4_reass>
 801ae70:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d101      	bne.n	801ae7c <ip4_input+0x1a8>
      return ERR_OK;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	e064      	b.n	801af46 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	685b      	ldr	r3, [r3, #4]
 801ae80:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ae82:	4a33      	ldr	r2, [pc, #204]	; (801af50 <ip4_input+0x27c>)
 801ae84:	69bb      	ldr	r3, [r7, #24]
 801ae86:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ae88:	4a31      	ldr	r2, [pc, #196]	; (801af50 <ip4_input+0x27c>)
 801ae8a:	683b      	ldr	r3, [r7, #0]
 801ae8c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ae8e:	4a30      	ldr	r2, [pc, #192]	; (801af50 <ip4_input+0x27c>)
 801ae90:	69fb      	ldr	r3, [r7, #28]
 801ae92:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ae94:	69fb      	ldr	r3, [r7, #28]
 801ae96:	781b      	ldrb	r3, [r3, #0]
 801ae98:	f003 030f 	and.w	r3, r3, #15
 801ae9c:	b2db      	uxtb	r3, r3
 801ae9e:	009b      	lsls	r3, r3, #2
 801aea0:	b2db      	uxtb	r3, r3
 801aea2:	b29a      	uxth	r2, r3
 801aea4:	4b2a      	ldr	r3, [pc, #168]	; (801af50 <ip4_input+0x27c>)
 801aea6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801aea8:	8a7b      	ldrh	r3, [r7, #18]
 801aeaa:	4619      	mov	r1, r3
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f7f5 fbdd 	bl	801066c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801aeb2:	69fb      	ldr	r3, [r7, #28]
 801aeb4:	7a5b      	ldrb	r3, [r3, #9]
 801aeb6:	2b11      	cmp	r3, #17
 801aeb8:	d006      	beq.n	801aec8 <ip4_input+0x1f4>
 801aeba:	2b11      	cmp	r3, #17
 801aebc:	dc13      	bgt.n	801aee6 <ip4_input+0x212>
 801aebe:	2b01      	cmp	r3, #1
 801aec0:	d00c      	beq.n	801aedc <ip4_input+0x208>
 801aec2:	2b06      	cmp	r3, #6
 801aec4:	d005      	beq.n	801aed2 <ip4_input+0x1fe>
 801aec6:	e00e      	b.n	801aee6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801aec8:	6839      	ldr	r1, [r7, #0]
 801aeca:	6878      	ldr	r0, [r7, #4]
 801aecc:	f7fc fa04 	bl	80172d8 <udp_input>
        break;
 801aed0:	e026      	b.n	801af20 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801aed2:	6839      	ldr	r1, [r7, #0]
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f7f7 fdef 	bl	8012ab8 <tcp_input>
        break;
 801aeda:	e021      	b.n	801af20 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801aedc:	6839      	ldr	r1, [r7, #0]
 801aede:	6878      	ldr	r0, [r7, #4]
 801aee0:	f7ff fcd0 	bl	801a884 <icmp_input>
        break;
 801aee4:	e01c      	b.n	801af20 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801aee6:	4b1a      	ldr	r3, [pc, #104]	; (801af50 <ip4_input+0x27c>)
 801aee8:	695b      	ldr	r3, [r3, #20]
 801aeea:	69b9      	ldr	r1, [r7, #24]
 801aeec:	4618      	mov	r0, r3
 801aeee:	f000 f90b 	bl	801b108 <ip4_addr_isbroadcast_u32>
 801aef2:	4603      	mov	r3, r0
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d10f      	bne.n	801af18 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801aef8:	4b15      	ldr	r3, [pc, #84]	; (801af50 <ip4_input+0x27c>)
 801aefa:	695b      	ldr	r3, [r3, #20]
 801aefc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801af00:	2be0      	cmp	r3, #224	; 0xe0
 801af02:	d009      	beq.n	801af18 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801af04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801af08:	4619      	mov	r1, r3
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f7f5 fc21 	bl	8010752 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801af10:	2102      	movs	r1, #2
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	f7ff fdba 	bl	801aa8c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801af18:	6878      	ldr	r0, [r7, #4]
 801af1a:	f7f5 fc2d 	bl	8010778 <pbuf_free>
        break;
 801af1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801af20:	4b0b      	ldr	r3, [pc, #44]	; (801af50 <ip4_input+0x27c>)
 801af22:	2200      	movs	r2, #0
 801af24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801af26:	4b0a      	ldr	r3, [pc, #40]	; (801af50 <ip4_input+0x27c>)
 801af28:	2200      	movs	r2, #0
 801af2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801af2c:	4b08      	ldr	r3, [pc, #32]	; (801af50 <ip4_input+0x27c>)
 801af2e:	2200      	movs	r2, #0
 801af30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801af32:	4b07      	ldr	r3, [pc, #28]	; (801af50 <ip4_input+0x27c>)
 801af34:	2200      	movs	r2, #0
 801af36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801af38:	4b05      	ldr	r3, [pc, #20]	; (801af50 <ip4_input+0x27c>)
 801af3a:	2200      	movs	r2, #0
 801af3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801af3e:	4b04      	ldr	r3, [pc, #16]	; (801af50 <ip4_input+0x27c>)
 801af40:	2200      	movs	r2, #0
 801af42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	3720      	adds	r7, #32
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	2000550c 	.word	0x2000550c
 801af54:	20008660 	.word	0x20008660

0801af58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b08a      	sub	sp, #40	; 0x28
 801af5c:	af04      	add	r7, sp, #16
 801af5e:	60f8      	str	r0, [r7, #12]
 801af60:	60b9      	str	r1, [r7, #8]
 801af62:	607a      	str	r2, [r7, #4]
 801af64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801af66:	68bb      	ldr	r3, [r7, #8]
 801af68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d009      	beq.n	801af84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d003      	beq.n	801af7e <ip4_output_if+0x26>
 801af76:	68bb      	ldr	r3, [r7, #8]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d102      	bne.n	801af84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af80:	3304      	adds	r3, #4
 801af82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801af84:	78fa      	ldrb	r2, [r7, #3]
 801af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af88:	9302      	str	r3, [sp, #8]
 801af8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801af8e:	9301      	str	r3, [sp, #4]
 801af90:	f897 3020 	ldrb.w	r3, [r7, #32]
 801af94:	9300      	str	r3, [sp, #0]
 801af96:	4613      	mov	r3, r2
 801af98:	687a      	ldr	r2, [r7, #4]
 801af9a:	6979      	ldr	r1, [r7, #20]
 801af9c:	68f8      	ldr	r0, [r7, #12]
 801af9e:	f000 f805 	bl	801afac <ip4_output_if_src>
 801afa2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801afa4:	4618      	mov	r0, r3
 801afa6:	3718      	adds	r7, #24
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}

0801afac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b088      	sub	sp, #32
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	60f8      	str	r0, [r7, #12]
 801afb4:	60b9      	str	r1, [r7, #8]
 801afb6:	607a      	str	r2, [r7, #4]
 801afb8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	7b9b      	ldrb	r3, [r3, #14]
 801afbe:	2b01      	cmp	r3, #1
 801afc0:	d006      	beq.n	801afd0 <ip4_output_if_src+0x24>
 801afc2:	4b4b      	ldr	r3, [pc, #300]	; (801b0f0 <ip4_output_if_src+0x144>)
 801afc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801afc8:	494a      	ldr	r1, [pc, #296]	; (801b0f4 <ip4_output_if_src+0x148>)
 801afca:	484b      	ldr	r0, [pc, #300]	; (801b0f8 <ip4_output_if_src+0x14c>)
 801afcc:	f002 f886 	bl	801d0dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d060      	beq.n	801b098 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801afd6:	2314      	movs	r3, #20
 801afd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801afda:	2114      	movs	r1, #20
 801afdc:	68f8      	ldr	r0, [r7, #12]
 801afde:	f7f5 fb35 	bl	801064c <pbuf_add_header>
 801afe2:	4603      	mov	r3, r0
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d002      	beq.n	801afee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801afe8:	f06f 0301 	mvn.w	r3, #1
 801afec:	e07c      	b.n	801b0e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	895b      	ldrh	r3, [r3, #10]
 801aff8:	2b13      	cmp	r3, #19
 801affa:	d806      	bhi.n	801b00a <ip4_output_if_src+0x5e>
 801affc:	4b3c      	ldr	r3, [pc, #240]	; (801b0f0 <ip4_output_if_src+0x144>)
 801affe:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b002:	493e      	ldr	r1, [pc, #248]	; (801b0fc <ip4_output_if_src+0x150>)
 801b004:	483c      	ldr	r0, [pc, #240]	; (801b0f8 <ip4_output_if_src+0x14c>)
 801b006:	f002 f869 	bl	801d0dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b00a:	69fb      	ldr	r3, [r7, #28]
 801b00c:	78fa      	ldrb	r2, [r7, #3]
 801b00e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b010:	69fb      	ldr	r3, [r7, #28]
 801b012:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b016:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	681a      	ldr	r2, [r3, #0]
 801b01c:	69fb      	ldr	r3, [r7, #28]
 801b01e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b020:	8b7b      	ldrh	r3, [r7, #26]
 801b022:	089b      	lsrs	r3, r3, #2
 801b024:	b29b      	uxth	r3, r3
 801b026:	b2db      	uxtb	r3, r3
 801b028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b02c:	b2da      	uxtb	r2, r3
 801b02e:	69fb      	ldr	r3, [r7, #28]
 801b030:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b032:	69fb      	ldr	r3, [r7, #28]
 801b034:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b038:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	891b      	ldrh	r3, [r3, #8]
 801b03e:	4618      	mov	r0, r3
 801b040:	f7f3 fd43 	bl	800eaca <lwip_htons>
 801b044:	4603      	mov	r3, r0
 801b046:	461a      	mov	r2, r3
 801b048:	69fb      	ldr	r3, [r7, #28]
 801b04a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b04c:	69fb      	ldr	r3, [r7, #28]
 801b04e:	2200      	movs	r2, #0
 801b050:	719a      	strb	r2, [r3, #6]
 801b052:	2200      	movs	r2, #0
 801b054:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b056:	4b2a      	ldr	r3, [pc, #168]	; (801b100 <ip4_output_if_src+0x154>)
 801b058:	881b      	ldrh	r3, [r3, #0]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f7f3 fd35 	bl	800eaca <lwip_htons>
 801b060:	4603      	mov	r3, r0
 801b062:	461a      	mov	r2, r3
 801b064:	69fb      	ldr	r3, [r7, #28]
 801b066:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b068:	4b25      	ldr	r3, [pc, #148]	; (801b100 <ip4_output_if_src+0x154>)
 801b06a:	881b      	ldrh	r3, [r3, #0]
 801b06c:	3301      	adds	r3, #1
 801b06e:	b29a      	uxth	r2, r3
 801b070:	4b23      	ldr	r3, [pc, #140]	; (801b100 <ip4_output_if_src+0x154>)
 801b072:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b074:	68bb      	ldr	r3, [r7, #8]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d104      	bne.n	801b084 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b07a:	4b22      	ldr	r3, [pc, #136]	; (801b104 <ip4_output_if_src+0x158>)
 801b07c:	681a      	ldr	r2, [r3, #0]
 801b07e:	69fb      	ldr	r3, [r7, #28]
 801b080:	60da      	str	r2, [r3, #12]
 801b082:	e003      	b.n	801b08c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	681a      	ldr	r2, [r3, #0]
 801b088:	69fb      	ldr	r3, [r7, #28]
 801b08a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b08c:	69fb      	ldr	r3, [r7, #28]
 801b08e:	2200      	movs	r2, #0
 801b090:	729a      	strb	r2, [r3, #10]
 801b092:	2200      	movs	r2, #0
 801b094:	72da      	strb	r2, [r3, #11]
 801b096:	e00f      	b.n	801b0b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	895b      	ldrh	r3, [r3, #10]
 801b09c:	2b13      	cmp	r3, #19
 801b09e:	d802      	bhi.n	801b0a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b0a0:	f06f 0301 	mvn.w	r3, #1
 801b0a4:	e020      	b.n	801b0e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	685b      	ldr	r3, [r3, #4]
 801b0aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b0ac:	69fb      	ldr	r3, [r7, #28]
 801b0ae:	691b      	ldr	r3, [r3, #16]
 801b0b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b0b2:	f107 0314 	add.w	r3, r7, #20
 801b0b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d00c      	beq.n	801b0da <ip4_output_if_src+0x12e>
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	891a      	ldrh	r2, [r3, #8]
 801b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d906      	bls.n	801b0da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b0d0:	68f8      	ldr	r0, [r7, #12]
 801b0d2:	f000 fd53 	bl	801bb7c <ip4_frag>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	e006      	b.n	801b0e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0dc:	695b      	ldr	r3, [r3, #20]
 801b0de:	687a      	ldr	r2, [r7, #4]
 801b0e0:	68f9      	ldr	r1, [r7, #12]
 801b0e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b0e4:	4798      	blx	r3
 801b0e6:	4603      	mov	r3, r0
}
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	3720      	adds	r7, #32
 801b0ec:	46bd      	mov	sp, r7
 801b0ee:	bd80      	pop	{r7, pc}
 801b0f0:	08020a68 	.word	0x08020a68
 801b0f4:	08020a9c 	.word	0x08020a9c
 801b0f8:	08020aa8 	.word	0x08020aa8
 801b0fc:	08020ad0 	.word	0x08020ad0
 801b100:	200087fe 	.word	0x200087fe
 801b104:	08020f5c 	.word	0x08020f5c

0801b108 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b108:	b480      	push	{r7}
 801b10a:	b085      	sub	sp, #20
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b11c:	d002      	beq.n	801b124 <ip4_addr_isbroadcast_u32+0x1c>
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d101      	bne.n	801b128 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b124:	2301      	movs	r3, #1
 801b126:	e02a      	b.n	801b17e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b12e:	f003 0302 	and.w	r3, r3, #2
 801b132:	2b00      	cmp	r3, #0
 801b134:	d101      	bne.n	801b13a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b136:	2300      	movs	r3, #0
 801b138:	e021      	b.n	801b17e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b13a:	683b      	ldr	r3, [r7, #0]
 801b13c:	3304      	adds	r3, #4
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	687a      	ldr	r2, [r7, #4]
 801b142:	429a      	cmp	r2, r3
 801b144:	d101      	bne.n	801b14a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b146:	2300      	movs	r3, #0
 801b148:	e019      	b.n	801b17e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b14a:	68fa      	ldr	r2, [r7, #12]
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	3304      	adds	r3, #4
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	405a      	eors	r2, r3
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	3308      	adds	r3, #8
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	4013      	ands	r3, r2
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d10d      	bne.n	801b17c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b160:	683b      	ldr	r3, [r7, #0]
 801b162:	3308      	adds	r3, #8
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	43da      	mvns	r2, r3
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	3308      	adds	r3, #8
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b174:	429a      	cmp	r2, r3
 801b176:	d101      	bne.n	801b17c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b178:	2301      	movs	r3, #1
 801b17a:	e000      	b.n	801b17e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b17c:	2300      	movs	r3, #0
  }
}
 801b17e:	4618      	mov	r0, r3
 801b180:	3714      	adds	r7, #20
 801b182:	46bd      	mov	sp, r7
 801b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b188:	4770      	bx	lr
	...

0801b18c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b084      	sub	sp, #16
 801b190:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b192:	2300      	movs	r3, #0
 801b194:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b196:	4b12      	ldr	r3, [pc, #72]	; (801b1e0 <ip_reass_tmr+0x54>)
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b19c:	e018      	b.n	801b1d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	7fdb      	ldrb	r3, [r3, #31]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d00b      	beq.n	801b1be <ip_reass_tmr+0x32>
      r->timer--;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	7fdb      	ldrb	r3, [r3, #31]
 801b1aa:	3b01      	subs	r3, #1
 801b1ac:	b2da      	uxtb	r2, r3
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	60fb      	str	r3, [r7, #12]
 801b1bc:	e008      	b.n	801b1d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b1c8:	68b9      	ldr	r1, [r7, #8]
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f000 f80a 	bl	801b1e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d1e3      	bne.n	801b19e <ip_reass_tmr+0x12>
    }
  }
}
 801b1d6:	bf00      	nop
 801b1d8:	bf00      	nop
 801b1da:	3710      	adds	r7, #16
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd80      	pop	{r7, pc}
 801b1e0:	20008800 	.word	0x20008800

0801b1e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b088      	sub	sp, #32
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b1f2:	683a      	ldr	r2, [r7, #0]
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d105      	bne.n	801b206 <ip_reass_free_complete_datagram+0x22>
 801b1fa:	4b45      	ldr	r3, [pc, #276]	; (801b310 <ip_reass_free_complete_datagram+0x12c>)
 801b1fc:	22ab      	movs	r2, #171	; 0xab
 801b1fe:	4945      	ldr	r1, [pc, #276]	; (801b314 <ip_reass_free_complete_datagram+0x130>)
 801b200:	4845      	ldr	r0, [pc, #276]	; (801b318 <ip_reass_free_complete_datagram+0x134>)
 801b202:	f001 ff6b 	bl	801d0dc <iprintf>
  if (prev != NULL) {
 801b206:	683b      	ldr	r3, [r7, #0]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d00a      	beq.n	801b222 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	429a      	cmp	r2, r3
 801b214:	d005      	beq.n	801b222 <ip_reass_free_complete_datagram+0x3e>
 801b216:	4b3e      	ldr	r3, [pc, #248]	; (801b310 <ip_reass_free_complete_datagram+0x12c>)
 801b218:	22ad      	movs	r2, #173	; 0xad
 801b21a:	4940      	ldr	r1, [pc, #256]	; (801b31c <ip_reass_free_complete_datagram+0x138>)
 801b21c:	483e      	ldr	r0, [pc, #248]	; (801b318 <ip_reass_free_complete_datagram+0x134>)
 801b21e:	f001 ff5d 	bl	801d0dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	685b      	ldr	r3, [r3, #4]
 801b226:	685b      	ldr	r3, [r3, #4]
 801b228:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b22a:	697b      	ldr	r3, [r7, #20]
 801b22c:	889b      	ldrh	r3, [r3, #4]
 801b22e:	b29b      	uxth	r3, r3
 801b230:	2b00      	cmp	r3, #0
 801b232:	d12a      	bne.n	801b28a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	685b      	ldr	r3, [r3, #4]
 801b238:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b23a:	697b      	ldr	r3, [r7, #20]
 801b23c:	681a      	ldr	r2, [r3, #0]
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b242:	69bb      	ldr	r3, [r7, #24]
 801b244:	6858      	ldr	r0, [r3, #4]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	3308      	adds	r3, #8
 801b24a:	2214      	movs	r2, #20
 801b24c:	4619      	mov	r1, r3
 801b24e:	f002 f838 	bl	801d2c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b252:	2101      	movs	r1, #1
 801b254:	69b8      	ldr	r0, [r7, #24]
 801b256:	f7ff fc29 	bl	801aaac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b25a:	69b8      	ldr	r0, [r7, #24]
 801b25c:	f7f5 fb14 	bl	8010888 <pbuf_clen>
 801b260:	4603      	mov	r3, r0
 801b262:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b264:	8bfa      	ldrh	r2, [r7, #30]
 801b266:	8a7b      	ldrh	r3, [r7, #18]
 801b268:	4413      	add	r3, r2
 801b26a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b26e:	db05      	blt.n	801b27c <ip_reass_free_complete_datagram+0x98>
 801b270:	4b27      	ldr	r3, [pc, #156]	; (801b310 <ip_reass_free_complete_datagram+0x12c>)
 801b272:	22bc      	movs	r2, #188	; 0xbc
 801b274:	492a      	ldr	r1, [pc, #168]	; (801b320 <ip_reass_free_complete_datagram+0x13c>)
 801b276:	4828      	ldr	r0, [pc, #160]	; (801b318 <ip_reass_free_complete_datagram+0x134>)
 801b278:	f001 ff30 	bl	801d0dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b27c:	8bfa      	ldrh	r2, [r7, #30]
 801b27e:	8a7b      	ldrh	r3, [r7, #18]
 801b280:	4413      	add	r3, r2
 801b282:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b284:	69b8      	ldr	r0, [r7, #24]
 801b286:	f7f5 fa77 	bl	8010778 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	685b      	ldr	r3, [r3, #4]
 801b28e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b290:	e01f      	b.n	801b2d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b292:	69bb      	ldr	r3, [r7, #24]
 801b294:	685b      	ldr	r3, [r3, #4]
 801b296:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b298:	69bb      	ldr	r3, [r7, #24]
 801b29a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b2a2:	68f8      	ldr	r0, [r7, #12]
 801b2a4:	f7f5 faf0 	bl	8010888 <pbuf_clen>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b2ac:	8bfa      	ldrh	r2, [r7, #30]
 801b2ae:	8a7b      	ldrh	r3, [r7, #18]
 801b2b0:	4413      	add	r3, r2
 801b2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b2b6:	db05      	blt.n	801b2c4 <ip_reass_free_complete_datagram+0xe0>
 801b2b8:	4b15      	ldr	r3, [pc, #84]	; (801b310 <ip_reass_free_complete_datagram+0x12c>)
 801b2ba:	22cc      	movs	r2, #204	; 0xcc
 801b2bc:	4918      	ldr	r1, [pc, #96]	; (801b320 <ip_reass_free_complete_datagram+0x13c>)
 801b2be:	4816      	ldr	r0, [pc, #88]	; (801b318 <ip_reass_free_complete_datagram+0x134>)
 801b2c0:	f001 ff0c 	bl	801d0dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b2c4:	8bfa      	ldrh	r2, [r7, #30]
 801b2c6:	8a7b      	ldrh	r3, [r7, #18]
 801b2c8:	4413      	add	r3, r2
 801b2ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b2cc:	68f8      	ldr	r0, [r7, #12]
 801b2ce:	f7f5 fa53 	bl	8010778 <pbuf_free>
  while (p != NULL) {
 801b2d2:	69bb      	ldr	r3, [r7, #24]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d1dc      	bne.n	801b292 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b2d8:	6839      	ldr	r1, [r7, #0]
 801b2da:	6878      	ldr	r0, [r7, #4]
 801b2dc:	f000 f8c2 	bl	801b464 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b2e0:	4b10      	ldr	r3, [pc, #64]	; (801b324 <ip_reass_free_complete_datagram+0x140>)
 801b2e2:	881b      	ldrh	r3, [r3, #0]
 801b2e4:	8bfa      	ldrh	r2, [r7, #30]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d905      	bls.n	801b2f6 <ip_reass_free_complete_datagram+0x112>
 801b2ea:	4b09      	ldr	r3, [pc, #36]	; (801b310 <ip_reass_free_complete_datagram+0x12c>)
 801b2ec:	22d2      	movs	r2, #210	; 0xd2
 801b2ee:	490e      	ldr	r1, [pc, #56]	; (801b328 <ip_reass_free_complete_datagram+0x144>)
 801b2f0:	4809      	ldr	r0, [pc, #36]	; (801b318 <ip_reass_free_complete_datagram+0x134>)
 801b2f2:	f001 fef3 	bl	801d0dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b2f6:	4b0b      	ldr	r3, [pc, #44]	; (801b324 <ip_reass_free_complete_datagram+0x140>)
 801b2f8:	881a      	ldrh	r2, [r3, #0]
 801b2fa:	8bfb      	ldrh	r3, [r7, #30]
 801b2fc:	1ad3      	subs	r3, r2, r3
 801b2fe:	b29a      	uxth	r2, r3
 801b300:	4b08      	ldr	r3, [pc, #32]	; (801b324 <ip_reass_free_complete_datagram+0x140>)
 801b302:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b304:	8bfb      	ldrh	r3, [r7, #30]
}
 801b306:	4618      	mov	r0, r3
 801b308:	3720      	adds	r7, #32
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	bf00      	nop
 801b310:	08020b00 	.word	0x08020b00
 801b314:	08020b3c 	.word	0x08020b3c
 801b318:	08020b48 	.word	0x08020b48
 801b31c:	08020b70 	.word	0x08020b70
 801b320:	08020b84 	.word	0x08020b84
 801b324:	20008804 	.word	0x20008804
 801b328:	08020ba4 	.word	0x08020ba4

0801b32c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b08a      	sub	sp, #40	; 0x28
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
 801b334:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b336:	2300      	movs	r3, #0
 801b338:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b33a:	2300      	movs	r3, #0
 801b33c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b33e:	2300      	movs	r3, #0
 801b340:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b342:	2300      	movs	r3, #0
 801b344:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b346:	2300      	movs	r3, #0
 801b348:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b34a:	4b28      	ldr	r3, [pc, #160]	; (801b3ec <ip_reass_remove_oldest_datagram+0xc0>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b350:	e030      	b.n	801b3b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b354:	695a      	ldr	r2, [r3, #20]
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	68db      	ldr	r3, [r3, #12]
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d10c      	bne.n	801b378 <ip_reass_remove_oldest_datagram+0x4c>
 801b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b360:	699a      	ldr	r2, [r3, #24]
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	691b      	ldr	r3, [r3, #16]
 801b366:	429a      	cmp	r2, r3
 801b368:	d106      	bne.n	801b378 <ip_reass_remove_oldest_datagram+0x4c>
 801b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b36c:	899a      	ldrh	r2, [r3, #12]
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	889b      	ldrh	r3, [r3, #4]
 801b372:	b29b      	uxth	r3, r3
 801b374:	429a      	cmp	r2, r3
 801b376:	d014      	beq.n	801b3a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b378:	693b      	ldr	r3, [r7, #16]
 801b37a:	3301      	adds	r3, #1
 801b37c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b37e:	6a3b      	ldr	r3, [r7, #32]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d104      	bne.n	801b38e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b386:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b388:	69fb      	ldr	r3, [r7, #28]
 801b38a:	61bb      	str	r3, [r7, #24]
 801b38c:	e009      	b.n	801b3a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b390:	7fda      	ldrb	r2, [r3, #31]
 801b392:	6a3b      	ldr	r3, [r7, #32]
 801b394:	7fdb      	ldrb	r3, [r3, #31]
 801b396:	429a      	cmp	r2, r3
 801b398:	d803      	bhi.n	801b3a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b39c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b39e:	69fb      	ldr	r3, [r7, #28]
 801b3a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d001      	beq.n	801b3ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d1cb      	bne.n	801b352 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b3ba:	6a3b      	ldr	r3, [r7, #32]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d008      	beq.n	801b3d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b3c0:	69b9      	ldr	r1, [r7, #24]
 801b3c2:	6a38      	ldr	r0, [r7, #32]
 801b3c4:	f7ff ff0e 	bl	801b1e4 <ip_reass_free_complete_datagram>
 801b3c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b3ca:	697a      	ldr	r2, [r7, #20]
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	4413      	add	r3, r2
 801b3d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b3d2:	697a      	ldr	r2, [r7, #20]
 801b3d4:	683b      	ldr	r3, [r7, #0]
 801b3d6:	429a      	cmp	r2, r3
 801b3d8:	da02      	bge.n	801b3e0 <ip_reass_remove_oldest_datagram+0xb4>
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	2b01      	cmp	r3, #1
 801b3de:	dcac      	bgt.n	801b33a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b3e0:	697b      	ldr	r3, [r7, #20]
}
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	3728      	adds	r7, #40	; 0x28
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}
 801b3ea:	bf00      	nop
 801b3ec:	20008800 	.word	0x20008800

0801b3f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b084      	sub	sp, #16
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
 801b3f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b3fa:	2004      	movs	r0, #4
 801b3fc:	f7f4 faca 	bl	800f994 <memp_malloc>
 801b400:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d110      	bne.n	801b42a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b408:	6839      	ldr	r1, [r7, #0]
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f7ff ff8e 	bl	801b32c <ip_reass_remove_oldest_datagram>
 801b410:	4602      	mov	r2, r0
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	4293      	cmp	r3, r2
 801b416:	dc03      	bgt.n	801b420 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b418:	2004      	movs	r0, #4
 801b41a:	f7f4 fabb 	bl	800f994 <memp_malloc>
 801b41e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d101      	bne.n	801b42a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b426:	2300      	movs	r3, #0
 801b428:	e016      	b.n	801b458 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b42a:	2220      	movs	r2, #32
 801b42c:	2100      	movs	r1, #0
 801b42e:	68f8      	ldr	r0, [r7, #12]
 801b430:	f001 feb9 	bl	801d1a6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	220f      	movs	r2, #15
 801b438:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b43a:	4b09      	ldr	r3, [pc, #36]	; (801b460 <ip_reass_enqueue_new_datagram+0x70>)
 801b43c:	681a      	ldr	r2, [r3, #0]
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b442:	4a07      	ldr	r2, [pc, #28]	; (801b460 <ip_reass_enqueue_new_datagram+0x70>)
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	3308      	adds	r3, #8
 801b44c:	2214      	movs	r2, #20
 801b44e:	6879      	ldr	r1, [r7, #4]
 801b450:	4618      	mov	r0, r3
 801b452:	f001 ff36 	bl	801d2c2 <memcpy>
  return ipr;
 801b456:	68fb      	ldr	r3, [r7, #12]
}
 801b458:	4618      	mov	r0, r3
 801b45a:	3710      	adds	r7, #16
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	20008800 	.word	0x20008800

0801b464 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b082      	sub	sp, #8
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b46e:	4b10      	ldr	r3, [pc, #64]	; (801b4b0 <ip_reass_dequeue_datagram+0x4c>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	687a      	ldr	r2, [r7, #4]
 801b474:	429a      	cmp	r2, r3
 801b476:	d104      	bne.n	801b482 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	4a0c      	ldr	r2, [pc, #48]	; (801b4b0 <ip_reass_dequeue_datagram+0x4c>)
 801b47e:	6013      	str	r3, [r2, #0]
 801b480:	e00d      	b.n	801b49e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d106      	bne.n	801b496 <ip_reass_dequeue_datagram+0x32>
 801b488:	4b0a      	ldr	r3, [pc, #40]	; (801b4b4 <ip_reass_dequeue_datagram+0x50>)
 801b48a:	f240 1245 	movw	r2, #325	; 0x145
 801b48e:	490a      	ldr	r1, [pc, #40]	; (801b4b8 <ip_reass_dequeue_datagram+0x54>)
 801b490:	480a      	ldr	r0, [pc, #40]	; (801b4bc <ip_reass_dequeue_datagram+0x58>)
 801b492:	f001 fe23 	bl	801d0dc <iprintf>
    prev->next = ipr->next;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681a      	ldr	r2, [r3, #0]
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b49e:	6879      	ldr	r1, [r7, #4]
 801b4a0:	2004      	movs	r0, #4
 801b4a2:	f7f4 fae7 	bl	800fa74 <memp_free>
}
 801b4a6:	bf00      	nop
 801b4a8:	3708      	adds	r7, #8
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	20008800 	.word	0x20008800
 801b4b4:	08020b00 	.word	0x08020b00
 801b4b8:	08020bc8 	.word	0x08020bc8
 801b4bc:	08020b48 	.word	0x08020b48

0801b4c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b08c      	sub	sp, #48	; 0x30
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	60f8      	str	r0, [r7, #12]
 801b4c8:	60b9      	str	r1, [r7, #8]
 801b4ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b4d4:	68bb      	ldr	r3, [r7, #8]
 801b4d6:	685b      	ldr	r3, [r3, #4]
 801b4d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b4da:	69fb      	ldr	r3, [r7, #28]
 801b4dc:	885b      	ldrh	r3, [r3, #2]
 801b4de:	b29b      	uxth	r3, r3
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7f3 faf2 	bl	800eaca <lwip_htons>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	781b      	ldrb	r3, [r3, #0]
 801b4ee:	f003 030f 	and.w	r3, r3, #15
 801b4f2:	b2db      	uxtb	r3, r3
 801b4f4:	009b      	lsls	r3, r3, #2
 801b4f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b4f8:	7e7b      	ldrb	r3, [r7, #25]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	8b7a      	ldrh	r2, [r7, #26]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d202      	bcs.n	801b508 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b502:	f04f 33ff 	mov.w	r3, #4294967295
 801b506:	e135      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b508:	7e7b      	ldrb	r3, [r7, #25]
 801b50a:	b29b      	uxth	r3, r3
 801b50c:	8b7a      	ldrh	r2, [r7, #26]
 801b50e:	1ad3      	subs	r3, r2, r3
 801b510:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b512:	69fb      	ldr	r3, [r7, #28]
 801b514:	88db      	ldrh	r3, [r3, #6]
 801b516:	b29b      	uxth	r3, r3
 801b518:	4618      	mov	r0, r3
 801b51a:	f7f3 fad6 	bl	800eaca <lwip_htons>
 801b51e:	4603      	mov	r3, r0
 801b520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b524:	b29b      	uxth	r3, r3
 801b526:	00db      	lsls	r3, r3, #3
 801b528:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b52a:	68bb      	ldr	r3, [r7, #8]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b532:	2200      	movs	r2, #0
 801b534:	701a      	strb	r2, [r3, #0]
 801b536:	2200      	movs	r2, #0
 801b538:	705a      	strb	r2, [r3, #1]
 801b53a:	2200      	movs	r2, #0
 801b53c:	709a      	strb	r2, [r3, #2]
 801b53e:	2200      	movs	r2, #0
 801b540:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b544:	8afa      	ldrh	r2, [r7, #22]
 801b546:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b548:	8afa      	ldrh	r2, [r7, #22]
 801b54a:	8b7b      	ldrh	r3, [r7, #26]
 801b54c:	4413      	add	r3, r2
 801b54e:	b29a      	uxth	r2, r3
 801b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b552:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b556:	88db      	ldrh	r3, [r3, #6]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	8afa      	ldrh	r2, [r7, #22]
 801b55c:	429a      	cmp	r2, r3
 801b55e:	d902      	bls.n	801b566 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b560:	f04f 33ff 	mov.w	r3, #4294967295
 801b564:	e106      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	685b      	ldr	r3, [r3, #4]
 801b56a:	627b      	str	r3, [r7, #36]	; 0x24
 801b56c:	e068      	b.n	801b640 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b570:	685b      	ldr	r3, [r3, #4]
 801b572:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b576:	889b      	ldrh	r3, [r3, #4]
 801b578:	b29a      	uxth	r2, r3
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	889b      	ldrh	r3, [r3, #4]
 801b57e:	b29b      	uxth	r3, r3
 801b580:	429a      	cmp	r2, r3
 801b582:	d235      	bcs.n	801b5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b588:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d020      	beq.n	801b5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b592:	889b      	ldrh	r3, [r3, #4]
 801b594:	b29a      	uxth	r2, r3
 801b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b598:	88db      	ldrh	r3, [r3, #6]
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	429a      	cmp	r2, r3
 801b59e:	d307      	bcc.n	801b5b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5a2:	88db      	ldrh	r3, [r3, #6]
 801b5a4:	b29a      	uxth	r2, r3
 801b5a6:	693b      	ldr	r3, [r7, #16]
 801b5a8:	889b      	ldrh	r3, [r3, #4]
 801b5aa:	b29b      	uxth	r3, r3
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d902      	bls.n	801b5b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801b5b4:	e0de      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5b8:	68ba      	ldr	r2, [r7, #8]
 801b5ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5be:	88db      	ldrh	r3, [r3, #6]
 801b5c0:	b29a      	uxth	r2, r3
 801b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5c4:	889b      	ldrh	r3, [r3, #4]
 801b5c6:	b29b      	uxth	r3, r3
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d03d      	beq.n	801b648 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b5d0:	e03a      	b.n	801b648 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5d4:	88db      	ldrh	r3, [r3, #6]
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	693b      	ldr	r3, [r7, #16]
 801b5da:	889b      	ldrh	r3, [r3, #4]
 801b5dc:	b29b      	uxth	r3, r3
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d902      	bls.n	801b5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b5e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e6:	e0c5      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	68ba      	ldr	r2, [r7, #8]
 801b5ec:	605a      	str	r2, [r3, #4]
      break;
 801b5ee:	e02b      	b.n	801b648 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5f2:	889b      	ldrh	r3, [r3, #4]
 801b5f4:	b29a      	uxth	r2, r3
 801b5f6:	693b      	ldr	r3, [r7, #16]
 801b5f8:	889b      	ldrh	r3, [r3, #4]
 801b5fa:	b29b      	uxth	r3, r3
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d102      	bne.n	801b606 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b600:	f04f 33ff 	mov.w	r3, #4294967295
 801b604:	e0b6      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b608:	889b      	ldrh	r3, [r3, #4]
 801b60a:	b29a      	uxth	r2, r3
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	88db      	ldrh	r3, [r3, #6]
 801b610:	b29b      	uxth	r3, r3
 801b612:	429a      	cmp	r2, r3
 801b614:	d202      	bcs.n	801b61c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b616:	f04f 33ff 	mov.w	r3, #4294967295
 801b61a:	e0ab      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d009      	beq.n	801b636 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b624:	88db      	ldrh	r3, [r3, #6]
 801b626:	b29a      	uxth	r2, r3
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	889b      	ldrh	r3, [r3, #4]
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	429a      	cmp	r2, r3
 801b630:	d001      	beq.n	801b636 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b632:	2300      	movs	r3, #0
 801b634:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b636:	693b      	ldr	r3, [r7, #16]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b642:	2b00      	cmp	r3, #0
 801b644:	d193      	bne.n	801b56e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b646:	e000      	b.n	801b64a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b648:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d12d      	bne.n	801b6ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b652:	2b00      	cmp	r3, #0
 801b654:	d01c      	beq.n	801b690 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b658:	88db      	ldrh	r3, [r3, #6]
 801b65a:	b29a      	uxth	r2, r3
 801b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b65e:	889b      	ldrh	r3, [r3, #4]
 801b660:	b29b      	uxth	r3, r3
 801b662:	429a      	cmp	r2, r3
 801b664:	d906      	bls.n	801b674 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b666:	4b45      	ldr	r3, [pc, #276]	; (801b77c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b668:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b66c:	4944      	ldr	r1, [pc, #272]	; (801b780 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b66e:	4845      	ldr	r0, [pc, #276]	; (801b784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b670:	f001 fd34 	bl	801d0dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b676:	68ba      	ldr	r2, [r7, #8]
 801b678:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b67c:	88db      	ldrh	r3, [r3, #6]
 801b67e:	b29a      	uxth	r2, r3
 801b680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b682:	889b      	ldrh	r3, [r3, #4]
 801b684:	b29b      	uxth	r3, r3
 801b686:	429a      	cmp	r2, r3
 801b688:	d010      	beq.n	801b6ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b68a:	2300      	movs	r3, #0
 801b68c:	623b      	str	r3, [r7, #32]
 801b68e:	e00d      	b.n	801b6ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	685b      	ldr	r3, [r3, #4]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d006      	beq.n	801b6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b698:	4b38      	ldr	r3, [pc, #224]	; (801b77c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b69a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b69e:	493a      	ldr	r1, [pc, #232]	; (801b788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b6a0:	4838      	ldr	r0, [pc, #224]	; (801b784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6a2:	f001 fd1b 	bl	801d0dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	68ba      	ldr	r2, [r7, #8]
 801b6aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d105      	bne.n	801b6be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	7f9b      	ldrb	r3, [r3, #30]
 801b6b6:	f003 0301 	and.w	r3, r3, #1
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d059      	beq.n	801b772 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b6be:	6a3b      	ldr	r3, [r7, #32]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d04f      	beq.n	801b764 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d006      	beq.n	801b6da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	685b      	ldr	r3, [r3, #4]
 801b6d0:	685b      	ldr	r3, [r3, #4]
 801b6d2:	889b      	ldrh	r3, [r3, #4]
 801b6d4:	b29b      	uxth	r3, r3
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d002      	beq.n	801b6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	623b      	str	r3, [r7, #32]
 801b6de:	e041      	b.n	801b764 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b6ea:	e012      	b.n	801b712 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ee:	685b      	ldr	r3, [r3, #4]
 801b6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f4:	88db      	ldrh	r3, [r3, #6]
 801b6f6:	b29a      	uxth	r2, r3
 801b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6fa:	889b      	ldrh	r3, [r3, #4]
 801b6fc:	b29b      	uxth	r3, r3
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d002      	beq.n	801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b702:	2300      	movs	r3, #0
 801b704:	623b      	str	r3, [r7, #32]
            break;
 801b706:	e007      	b.n	801b718 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b70a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b714:	2b00      	cmp	r3, #0
 801b716:	d1e9      	bne.n	801b6ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b718:	6a3b      	ldr	r3, [r7, #32]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d022      	beq.n	801b764 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	685b      	ldr	r3, [r3, #4]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d106      	bne.n	801b734 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b726:	4b15      	ldr	r3, [pc, #84]	; (801b77c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b728:	f240 12df 	movw	r2, #479	; 0x1df
 801b72c:	4917      	ldr	r1, [pc, #92]	; (801b78c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b72e:	4815      	ldr	r0, [pc, #84]	; (801b784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b730:	f001 fcd4 	bl	801d0dc <iprintf>
          LWIP_ASSERT("sanity check",
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	685b      	ldr	r3, [r3, #4]
 801b73a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b73c:	429a      	cmp	r2, r3
 801b73e:	d106      	bne.n	801b74e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b740:	4b0e      	ldr	r3, [pc, #56]	; (801b77c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b742:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b746:	4911      	ldr	r1, [pc, #68]	; (801b78c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b748:	480e      	ldr	r0, [pc, #56]	; (801b784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b74a:	f001 fcc7 	bl	801d0dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d006      	beq.n	801b764 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b756:	4b09      	ldr	r3, [pc, #36]	; (801b77c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b758:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b75c:	490c      	ldr	r1, [pc, #48]	; (801b790 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b75e:	4809      	ldr	r0, [pc, #36]	; (801b784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b760:	f001 fcbc 	bl	801d0dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b764:	6a3b      	ldr	r3, [r7, #32]
 801b766:	2b00      	cmp	r3, #0
 801b768:	bf14      	ite	ne
 801b76a:	2301      	movne	r3, #1
 801b76c:	2300      	moveq	r3, #0
 801b76e:	b2db      	uxtb	r3, r3
 801b770:	e000      	b.n	801b774 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b772:	2300      	movs	r3, #0
}
 801b774:	4618      	mov	r0, r3
 801b776:	3730      	adds	r7, #48	; 0x30
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}
 801b77c:	08020b00 	.word	0x08020b00
 801b780:	08020be4 	.word	0x08020be4
 801b784:	08020b48 	.word	0x08020b48
 801b788:	08020c04 	.word	0x08020c04
 801b78c:	08020c3c 	.word	0x08020c3c
 801b790:	08020c4c 	.word	0x08020c4c

0801b794 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b08e      	sub	sp, #56	; 0x38
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	685b      	ldr	r3, [r3, #4]
 801b7a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	f003 030f 	and.w	r3, r3, #15
 801b7aa:	b2db      	uxtb	r3, r3
 801b7ac:	009b      	lsls	r3, r3, #2
 801b7ae:	b2db      	uxtb	r3, r3
 801b7b0:	2b14      	cmp	r3, #20
 801b7b2:	f040 8171 	bne.w	801ba98 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7b8:	88db      	ldrh	r3, [r3, #6]
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	4618      	mov	r0, r3
 801b7be:	f7f3 f984 	bl	800eaca <lwip_htons>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	00db      	lsls	r3, r3, #3
 801b7cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7d0:	885b      	ldrh	r3, [r3, #2]
 801b7d2:	b29b      	uxth	r3, r3
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7f3 f978 	bl	800eaca <lwip_htons>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7e0:	781b      	ldrb	r3, [r3, #0]
 801b7e2:	f003 030f 	and.w	r3, r3, #15
 801b7e6:	b2db      	uxtb	r3, r3
 801b7e8:	009b      	lsls	r3, r3, #2
 801b7ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b7ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b7f2:	b29b      	uxth	r3, r3
 801b7f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	f0c0 8150 	bcc.w	801ba9c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b7fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b800:	b29b      	uxth	r3, r3
 801b802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b804:	1ad3      	subs	r3, r2, r3
 801b806:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b808:	6878      	ldr	r0, [r7, #4]
 801b80a:	f7f5 f83d 	bl	8010888 <pbuf_clen>
 801b80e:	4603      	mov	r3, r0
 801b810:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b812:	4b8c      	ldr	r3, [pc, #560]	; (801ba44 <ip4_reass+0x2b0>)
 801b814:	881b      	ldrh	r3, [r3, #0]
 801b816:	461a      	mov	r2, r3
 801b818:	8c3b      	ldrh	r3, [r7, #32]
 801b81a:	4413      	add	r3, r2
 801b81c:	2b0a      	cmp	r3, #10
 801b81e:	dd10      	ble.n	801b842 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b820:	8c3b      	ldrh	r3, [r7, #32]
 801b822:	4619      	mov	r1, r3
 801b824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b826:	f7ff fd81 	bl	801b32c <ip_reass_remove_oldest_datagram>
 801b82a:	4603      	mov	r3, r0
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	f000 8137 	beq.w	801baa0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b832:	4b84      	ldr	r3, [pc, #528]	; (801ba44 <ip4_reass+0x2b0>)
 801b834:	881b      	ldrh	r3, [r3, #0]
 801b836:	461a      	mov	r2, r3
 801b838:	8c3b      	ldrh	r3, [r7, #32]
 801b83a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b83c:	2b0a      	cmp	r3, #10
 801b83e:	f300 812f 	bgt.w	801baa0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b842:	4b81      	ldr	r3, [pc, #516]	; (801ba48 <ip4_reass+0x2b4>)
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	633b      	str	r3, [r7, #48]	; 0x30
 801b848:	e015      	b.n	801b876 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b84c:	695a      	ldr	r2, [r3, #20]
 801b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b850:	68db      	ldr	r3, [r3, #12]
 801b852:	429a      	cmp	r2, r3
 801b854:	d10c      	bne.n	801b870 <ip4_reass+0xdc>
 801b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b858:	699a      	ldr	r2, [r3, #24]
 801b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b85c:	691b      	ldr	r3, [r3, #16]
 801b85e:	429a      	cmp	r2, r3
 801b860:	d106      	bne.n	801b870 <ip4_reass+0xdc>
 801b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b864:	899a      	ldrh	r2, [r3, #12]
 801b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b868:	889b      	ldrh	r3, [r3, #4]
 801b86a:	b29b      	uxth	r3, r3
 801b86c:	429a      	cmp	r2, r3
 801b86e:	d006      	beq.n	801b87e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	633b      	str	r3, [r7, #48]	; 0x30
 801b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d1e6      	bne.n	801b84a <ip4_reass+0xb6>
 801b87c:	e000      	b.n	801b880 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b87e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b882:	2b00      	cmp	r3, #0
 801b884:	d109      	bne.n	801b89a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b886:	8c3b      	ldrh	r3, [r7, #32]
 801b888:	4619      	mov	r1, r3
 801b88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b88c:	f7ff fdb0 	bl	801b3f0 <ip_reass_enqueue_new_datagram>
 801b890:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b894:	2b00      	cmp	r3, #0
 801b896:	d11c      	bne.n	801b8d2 <ip4_reass+0x13e>
      goto nullreturn;
 801b898:	e105      	b.n	801baa6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b89c:	88db      	ldrh	r3, [r3, #6]
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7f3 f912 	bl	800eaca <lwip_htons>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d110      	bne.n	801b8d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8b2:	89db      	ldrh	r3, [r3, #14]
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7f3 f908 	bl	800eaca <lwip_htons>
 801b8ba:	4603      	mov	r3, r0
 801b8bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d006      	beq.n	801b8d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8c6:	3308      	adds	r3, #8
 801b8c8:	2214      	movs	r2, #20
 801b8ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f001 fcf8 	bl	801d2c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8d4:	88db      	ldrh	r3, [r3, #6]
 801b8d6:	b29b      	uxth	r3, r3
 801b8d8:	f003 0320 	and.w	r3, r3, #32
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	bf0c      	ite	eq
 801b8e0:	2301      	moveq	r3, #1
 801b8e2:	2300      	movne	r3, #0
 801b8e4:	b2db      	uxtb	r3, r3
 801b8e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b8e8:	69fb      	ldr	r3, [r7, #28]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d00e      	beq.n	801b90c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b8ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b8f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8f2:	4413      	add	r3, r2
 801b8f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b8f6:	8b7a      	ldrh	r2, [r7, #26]
 801b8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	f0c0 80a0 	bcc.w	801ba40 <ip4_reass+0x2ac>
 801b900:	8b7b      	ldrh	r3, [r7, #26]
 801b902:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b906:	4293      	cmp	r3, r2
 801b908:	f200 809a 	bhi.w	801ba40 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b90c:	69fa      	ldr	r2, [r7, #28]
 801b90e:	6879      	ldr	r1, [r7, #4]
 801b910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b912:	f7ff fdd5 	bl	801b4c0 <ip_reass_chain_frag_into_datagram_and_validate>
 801b916:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b91e:	f000 809b 	beq.w	801ba58 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b922:	4b48      	ldr	r3, [pc, #288]	; (801ba44 <ip4_reass+0x2b0>)
 801b924:	881a      	ldrh	r2, [r3, #0]
 801b926:	8c3b      	ldrh	r3, [r7, #32]
 801b928:	4413      	add	r3, r2
 801b92a:	b29a      	uxth	r2, r3
 801b92c:	4b45      	ldr	r3, [pc, #276]	; (801ba44 <ip4_reass+0x2b0>)
 801b92e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b930:	69fb      	ldr	r3, [r7, #28]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d00d      	beq.n	801b952 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b93a:	4413      	add	r3, r2
 801b93c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b940:	8a7a      	ldrh	r2, [r7, #18]
 801b942:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b946:	7f9b      	ldrb	r3, [r3, #30]
 801b948:	f043 0301 	orr.w	r3, r3, #1
 801b94c:	b2da      	uxtb	r2, r3
 801b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b950:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b952:	697b      	ldr	r3, [r7, #20]
 801b954:	2b01      	cmp	r3, #1
 801b956:	d171      	bne.n	801ba3c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b95a:	8b9b      	ldrh	r3, [r3, #28]
 801b95c:	3314      	adds	r3, #20
 801b95e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b962:	685b      	ldr	r3, [r3, #4]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b96c:	685b      	ldr	r3, [r3, #4]
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b974:	3308      	adds	r3, #8
 801b976:	2214      	movs	r2, #20
 801b978:	4619      	mov	r1, r3
 801b97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b97c:	f001 fca1 	bl	801d2c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b980:	8a3b      	ldrh	r3, [r7, #16]
 801b982:	4618      	mov	r0, r3
 801b984:	f7f3 f8a1 	bl	800eaca <lwip_htons>
 801b988:	4603      	mov	r3, r0
 801b98a:	461a      	mov	r2, r3
 801b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b98e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b992:	2200      	movs	r2, #0
 801b994:	719a      	strb	r2, [r3, #6]
 801b996:	2200      	movs	r2, #0
 801b998:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b99c:	2200      	movs	r2, #0
 801b99e:	729a      	strb	r2, [r3, #10]
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b9aa:	e00d      	b.n	801b9c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b9b2:	2114      	movs	r1, #20
 801b9b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b9b6:	f7f4 fe59 	bl	801066c <pbuf_remove_header>
      pbuf_cat(p, r);
 801b9ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b9bc:	6878      	ldr	r0, [r7, #4]
 801b9be:	f7f4 ff9d 	bl	80108fc <pbuf_cat>
      r = iprh->next_pbuf;
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d1ee      	bne.n	801b9ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b9ce:	4b1e      	ldr	r3, [pc, #120]	; (801ba48 <ip4_reass+0x2b4>)
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d102      	bne.n	801b9de <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b9d8:	2300      	movs	r3, #0
 801b9da:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9dc:	e010      	b.n	801ba00 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b9de:	4b1a      	ldr	r3, [pc, #104]	; (801ba48 <ip4_reass+0x2b4>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9e4:	e007      	b.n	801b9f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9ec:	429a      	cmp	r2, r3
 801b9ee:	d006      	beq.n	801b9fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d1f4      	bne.n	801b9e6 <ip4_reass+0x252>
 801b9fc:	e000      	b.n	801ba00 <ip4_reass+0x26c>
          break;
 801b9fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ba00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ba02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ba04:	f7ff fd2e 	bl	801b464 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	f7f4 ff3d 	bl	8010888 <pbuf_clen>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ba12:	4b0c      	ldr	r3, [pc, #48]	; (801ba44 <ip4_reass+0x2b0>)
 801ba14:	881b      	ldrh	r3, [r3, #0]
 801ba16:	8c3a      	ldrh	r2, [r7, #32]
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d906      	bls.n	801ba2a <ip4_reass+0x296>
 801ba1c:	4b0b      	ldr	r3, [pc, #44]	; (801ba4c <ip4_reass+0x2b8>)
 801ba1e:	f240 229b 	movw	r2, #667	; 0x29b
 801ba22:	490b      	ldr	r1, [pc, #44]	; (801ba50 <ip4_reass+0x2bc>)
 801ba24:	480b      	ldr	r0, [pc, #44]	; (801ba54 <ip4_reass+0x2c0>)
 801ba26:	f001 fb59 	bl	801d0dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ba2a:	4b06      	ldr	r3, [pc, #24]	; (801ba44 <ip4_reass+0x2b0>)
 801ba2c:	881a      	ldrh	r2, [r3, #0]
 801ba2e:	8c3b      	ldrh	r3, [r7, #32]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	b29a      	uxth	r2, r3
 801ba34:	4b03      	ldr	r3, [pc, #12]	; (801ba44 <ip4_reass+0x2b0>)
 801ba36:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	e038      	b.n	801baae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	e036      	b.n	801baae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801ba40:	bf00      	nop
 801ba42:	e00a      	b.n	801ba5a <ip4_reass+0x2c6>
 801ba44:	20008804 	.word	0x20008804
 801ba48:	20008800 	.word	0x20008800
 801ba4c:	08020b00 	.word	0x08020b00
 801ba50:	08020c70 	.word	0x08020c70
 801ba54:	08020b48 	.word	0x08020b48
    goto nullreturn_ipr;
 801ba58:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d106      	bne.n	801ba6e <ip4_reass+0x2da>
 801ba60:	4b15      	ldr	r3, [pc, #84]	; (801bab8 <ip4_reass+0x324>)
 801ba62:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ba66:	4915      	ldr	r1, [pc, #84]	; (801babc <ip4_reass+0x328>)
 801ba68:	4815      	ldr	r0, [pc, #84]	; (801bac0 <ip4_reass+0x32c>)
 801ba6a:	f001 fb37 	bl	801d0dc <iprintf>
  if (ipr->p == NULL) {
 801ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d116      	bne.n	801baa4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ba76:	4b13      	ldr	r3, [pc, #76]	; (801bac4 <ip4_reass+0x330>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba7c:	429a      	cmp	r2, r3
 801ba7e:	d006      	beq.n	801ba8e <ip4_reass+0x2fa>
 801ba80:	4b0d      	ldr	r3, [pc, #52]	; (801bab8 <ip4_reass+0x324>)
 801ba82:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ba86:	4910      	ldr	r1, [pc, #64]	; (801bac8 <ip4_reass+0x334>)
 801ba88:	480d      	ldr	r0, [pc, #52]	; (801bac0 <ip4_reass+0x32c>)
 801ba8a:	f001 fb27 	bl	801d0dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ba8e:	2100      	movs	r1, #0
 801ba90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ba92:	f7ff fce7 	bl	801b464 <ip_reass_dequeue_datagram>
 801ba96:	e006      	b.n	801baa6 <ip4_reass+0x312>
    goto nullreturn;
 801ba98:	bf00      	nop
 801ba9a:	e004      	b.n	801baa6 <ip4_reass+0x312>
    goto nullreturn;
 801ba9c:	bf00      	nop
 801ba9e:	e002      	b.n	801baa6 <ip4_reass+0x312>
      goto nullreturn;
 801baa0:	bf00      	nop
 801baa2:	e000      	b.n	801baa6 <ip4_reass+0x312>
  }

nullreturn:
 801baa4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	f7f4 fe66 	bl	8010778 <pbuf_free>
  return NULL;
 801baac:	2300      	movs	r3, #0
}
 801baae:	4618      	mov	r0, r3
 801bab0:	3738      	adds	r7, #56	; 0x38
 801bab2:	46bd      	mov	sp, r7
 801bab4:	bd80      	pop	{r7, pc}
 801bab6:	bf00      	nop
 801bab8:	08020b00 	.word	0x08020b00
 801babc:	08020c8c 	.word	0x08020c8c
 801bac0:	08020b48 	.word	0x08020b48
 801bac4:	20008800 	.word	0x20008800
 801bac8:	08020c98 	.word	0x08020c98

0801bacc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801bad0:	2005      	movs	r0, #5
 801bad2:	f7f3 ff5f 	bl	800f994 <memp_malloc>
 801bad6:	4603      	mov	r3, r0
}
 801bad8:	4618      	mov	r0, r3
 801bada:	bd80      	pop	{r7, pc}

0801badc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d106      	bne.n	801baf8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801baea:	4b07      	ldr	r3, [pc, #28]	; (801bb08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801baec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801baf0:	4906      	ldr	r1, [pc, #24]	; (801bb0c <ip_frag_free_pbuf_custom_ref+0x30>)
 801baf2:	4807      	ldr	r0, [pc, #28]	; (801bb10 <ip_frag_free_pbuf_custom_ref+0x34>)
 801baf4:	f001 faf2 	bl	801d0dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801baf8:	6879      	ldr	r1, [r7, #4]
 801bafa:	2005      	movs	r0, #5
 801bafc:	f7f3 ffba 	bl	800fa74 <memp_free>
}
 801bb00:	bf00      	nop
 801bb02:	3708      	adds	r7, #8
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	08020b00 	.word	0x08020b00
 801bb0c:	08020cb8 	.word	0x08020cb8
 801bb10:	08020b48 	.word	0x08020b48

0801bb14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b084      	sub	sp, #16
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d106      	bne.n	801bb34 <ipfrag_free_pbuf_custom+0x20>
 801bb26:	4b11      	ldr	r3, [pc, #68]	; (801bb6c <ipfrag_free_pbuf_custom+0x58>)
 801bb28:	f240 22ce 	movw	r2, #718	; 0x2ce
 801bb2c:	4910      	ldr	r1, [pc, #64]	; (801bb70 <ipfrag_free_pbuf_custom+0x5c>)
 801bb2e:	4811      	ldr	r0, [pc, #68]	; (801bb74 <ipfrag_free_pbuf_custom+0x60>)
 801bb30:	f001 fad4 	bl	801d0dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bb34:	68fa      	ldr	r2, [r7, #12]
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d006      	beq.n	801bb4a <ipfrag_free_pbuf_custom+0x36>
 801bb3c:	4b0b      	ldr	r3, [pc, #44]	; (801bb6c <ipfrag_free_pbuf_custom+0x58>)
 801bb3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801bb42:	490d      	ldr	r1, [pc, #52]	; (801bb78 <ipfrag_free_pbuf_custom+0x64>)
 801bb44:	480b      	ldr	r0, [pc, #44]	; (801bb74 <ipfrag_free_pbuf_custom+0x60>)
 801bb46:	f001 fac9 	bl	801d0dc <iprintf>
  if (pcr->original != NULL) {
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	695b      	ldr	r3, [r3, #20]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d004      	beq.n	801bb5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	695b      	ldr	r3, [r3, #20]
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7f4 fe0e 	bl	8010778 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801bb5c:	68f8      	ldr	r0, [r7, #12]
 801bb5e:	f7ff ffbd 	bl	801badc <ip_frag_free_pbuf_custom_ref>
}
 801bb62:	bf00      	nop
 801bb64:	3710      	adds	r7, #16
 801bb66:	46bd      	mov	sp, r7
 801bb68:	bd80      	pop	{r7, pc}
 801bb6a:	bf00      	nop
 801bb6c:	08020b00 	.word	0x08020b00
 801bb70:	08020cc4 	.word	0x08020cc4
 801bb74:	08020b48 	.word	0x08020b48
 801bb78:	08020cd0 	.word	0x08020cd0

0801bb7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b094      	sub	sp, #80	; 0x50
 801bb80:	af02      	add	r7, sp, #8
 801bb82:	60f8      	str	r0, [r7, #12]
 801bb84:	60b9      	str	r1, [r7, #8]
 801bb86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bb88:	2300      	movs	r3, #0
 801bb8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bb92:	3b14      	subs	r3, #20
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	da00      	bge.n	801bb9a <ip4_frag+0x1e>
 801bb98:	3307      	adds	r3, #7
 801bb9a:	10db      	asrs	r3, r3, #3
 801bb9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801bb9e:	2314      	movs	r3, #20
 801bba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbae:	781b      	ldrb	r3, [r3, #0]
 801bbb0:	f003 030f 	and.w	r3, r3, #15
 801bbb4:	b2db      	uxtb	r3, r3
 801bbb6:	009b      	lsls	r3, r3, #2
 801bbb8:	b2db      	uxtb	r3, r3
 801bbba:	2b14      	cmp	r3, #20
 801bbbc:	d002      	beq.n	801bbc4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bbbe:	f06f 0305 	mvn.w	r3, #5
 801bbc2:	e110      	b.n	801bde6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	895b      	ldrh	r3, [r3, #10]
 801bbc8:	2b13      	cmp	r3, #19
 801bbca:	d809      	bhi.n	801bbe0 <ip4_frag+0x64>
 801bbcc:	4b88      	ldr	r3, [pc, #544]	; (801bdf0 <ip4_frag+0x274>)
 801bbce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801bbd2:	4988      	ldr	r1, [pc, #544]	; (801bdf4 <ip4_frag+0x278>)
 801bbd4:	4888      	ldr	r0, [pc, #544]	; (801bdf8 <ip4_frag+0x27c>)
 801bbd6:	f001 fa81 	bl	801d0dc <iprintf>
 801bbda:	f06f 0305 	mvn.w	r3, #5
 801bbde:	e102      	b.n	801bde6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbe2:	88db      	ldrh	r3, [r3, #6]
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	f7f2 ff6f 	bl	800eaca <lwip_htons>
 801bbec:	4603      	mov	r3, r0
 801bbee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bbf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bbf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bbf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bbfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bbfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bc00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	891b      	ldrh	r3, [r3, #8]
 801bc06:	3b14      	subs	r3, #20
 801bc08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bc0c:	e0e1      	b.n	801bdd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bc0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bc10:	00db      	lsls	r3, r3, #3
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bc18:	4293      	cmp	r3, r2
 801bc1a:	bf28      	it	cs
 801bc1c:	4613      	movcs	r3, r2
 801bc1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bc20:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bc24:	2114      	movs	r1, #20
 801bc26:	200e      	movs	r0, #14
 801bc28:	f7f4 fac2 	bl	80101b0 <pbuf_alloc>
 801bc2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f000 80d5 	beq.w	801bde0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc38:	895b      	ldrh	r3, [r3, #10]
 801bc3a:	2b13      	cmp	r3, #19
 801bc3c:	d806      	bhi.n	801bc4c <ip4_frag+0xd0>
 801bc3e:	4b6c      	ldr	r3, [pc, #432]	; (801bdf0 <ip4_frag+0x274>)
 801bc40:	f44f 7249 	mov.w	r2, #804	; 0x324
 801bc44:	496d      	ldr	r1, [pc, #436]	; (801bdfc <ip4_frag+0x280>)
 801bc46:	486c      	ldr	r0, [pc, #432]	; (801bdf8 <ip4_frag+0x27c>)
 801bc48:	f001 fa48 	bl	801d0dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc4e:	685b      	ldr	r3, [r3, #4]
 801bc50:	2214      	movs	r2, #20
 801bc52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bc54:	4618      	mov	r0, r3
 801bc56:	f001 fb34 	bl	801d2c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc5c:	685b      	ldr	r3, [r3, #4]
 801bc5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bc60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bc62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bc66:	e064      	b.n	801bd32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	895a      	ldrh	r2, [r3, #10]
 801bc6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bc6e:	1ad3      	subs	r3, r2, r3
 801bc70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	895b      	ldrh	r3, [r3, #10]
 801bc76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bc78:	429a      	cmp	r2, r3
 801bc7a:	d906      	bls.n	801bc8a <ip4_frag+0x10e>
 801bc7c:	4b5c      	ldr	r3, [pc, #368]	; (801bdf0 <ip4_frag+0x274>)
 801bc7e:	f240 322d 	movw	r2, #813	; 0x32d
 801bc82:	495f      	ldr	r1, [pc, #380]	; (801be00 <ip4_frag+0x284>)
 801bc84:	485c      	ldr	r0, [pc, #368]	; (801bdf8 <ip4_frag+0x27c>)
 801bc86:	f001 fa29 	bl	801d0dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bc8a:	8bfa      	ldrh	r2, [r7, #30]
 801bc8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc90:	4293      	cmp	r3, r2
 801bc92:	bf28      	it	cs
 801bc94:	4613      	movcs	r3, r2
 801bc96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bc9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d105      	bne.n	801bcae <ip4_frag+0x132>
        poff = 0;
 801bca2:	2300      	movs	r3, #0
 801bca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	60fb      	str	r3, [r7, #12]
        continue;
 801bcac:	e041      	b.n	801bd32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bcae:	f7ff ff0d 	bl	801bacc <ip_frag_alloc_pbuf_custom_ref>
 801bcb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bcb4:	69bb      	ldr	r3, [r7, #24]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d103      	bne.n	801bcc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bcba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bcbc:	f7f4 fd5c 	bl	8010778 <pbuf_free>
        goto memerr;
 801bcc0:	e08f      	b.n	801bde2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bcc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bcc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bcca:	4413      	add	r3, r2
 801bccc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801bcd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801bcd4:	9201      	str	r2, [sp, #4]
 801bcd6:	9300      	str	r3, [sp, #0]
 801bcd8:	4603      	mov	r3, r0
 801bcda:	2241      	movs	r2, #65	; 0x41
 801bcdc:	2000      	movs	r0, #0
 801bcde:	f7f4 fb91 	bl	8010404 <pbuf_alloced_custom>
 801bce2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d106      	bne.n	801bcf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bcea:	69b8      	ldr	r0, [r7, #24]
 801bcec:	f7ff fef6 	bl	801badc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bcf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bcf2:	f7f4 fd41 	bl	8010778 <pbuf_free>
        goto memerr;
 801bcf6:	e074      	b.n	801bde2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bcf8:	68f8      	ldr	r0, [r7, #12]
 801bcfa:	f7f4 fddd 	bl	80108b8 <pbuf_ref>
      pcr->original = p;
 801bcfe:	69bb      	ldr	r3, [r7, #24]
 801bd00:	68fa      	ldr	r2, [r7, #12]
 801bd02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bd04:	69bb      	ldr	r3, [r7, #24]
 801bd06:	4a3f      	ldr	r2, [pc, #252]	; (801be04 <ip4_frag+0x288>)
 801bd08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bd0a:	6979      	ldr	r1, [r7, #20]
 801bd0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bd0e:	f7f4 fdf5 	bl	80108fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bd12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801bd16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bd1a:	1ad3      	subs	r3, r2, r3
 801bd1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801bd20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d004      	beq.n	801bd32 <ip4_frag+0x1b6>
        poff = 0;
 801bd28:	2300      	movs	r3, #0
 801bd2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bd32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d196      	bne.n	801bc68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bd3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bd3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bd40:	4413      	add	r3, r2
 801bd42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bd44:	68bb      	ldr	r3, [r7, #8]
 801bd46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bd48:	f1a3 0213 	sub.w	r2, r3, #19
 801bd4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bd50:	429a      	cmp	r2, r3
 801bd52:	bfcc      	ite	gt
 801bd54:	2301      	movgt	r3, #1
 801bd56:	2300      	movle	r3, #0
 801bd58:	b2db      	uxtb	r3, r3
 801bd5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bd5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bd60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801bd66:	6a3b      	ldr	r3, [r7, #32]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d002      	beq.n	801bd72 <ip4_frag+0x1f6>
 801bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d003      	beq.n	801bd7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bd72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bd74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bd78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bd7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7f2 fea4 	bl	800eaca <lwip_htons>
 801bd82:	4603      	mov	r3, r0
 801bd84:	461a      	mov	r2, r3
 801bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bd8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bd8c:	3314      	adds	r3, #20
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	4618      	mov	r0, r3
 801bd92:	f7f2 fe9a 	bl	800eaca <lwip_htons>
 801bd96:	4603      	mov	r3, r0
 801bd98:	461a      	mov	r2, r3
 801bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bda0:	2200      	movs	r2, #0
 801bda2:	729a      	strb	r2, [r3, #10]
 801bda4:	2200      	movs	r2, #0
 801bda6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	695b      	ldr	r3, [r3, #20]
 801bdac:	687a      	ldr	r2, [r7, #4]
 801bdae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bdb0:	68b8      	ldr	r0, [r7, #8]
 801bdb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bdb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bdb6:	f7f4 fcdf 	bl	8010778 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bdba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bdbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bdc0:	1ad3      	subs	r3, r2, r3
 801bdc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801bdc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bdca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bdcc:	4413      	add	r3, r2
 801bdce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801bdd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	f47f af19 	bne.w	801bc0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bddc:	2300      	movs	r3, #0
 801bdde:	e002      	b.n	801bde6 <ip4_frag+0x26a>
      goto memerr;
 801bde0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bde2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bde6:	4618      	mov	r0, r3
 801bde8:	3748      	adds	r7, #72	; 0x48
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd80      	pop	{r7, pc}
 801bdee:	bf00      	nop
 801bdf0:	08020b00 	.word	0x08020b00
 801bdf4:	08020cdc 	.word	0x08020cdc
 801bdf8:	08020b48 	.word	0x08020b48
 801bdfc:	08020cf8 	.word	0x08020cf8
 801be00:	08020d18 	.word	0x08020d18
 801be04:	0801bb15 	.word	0x0801bb15

0801be08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b086      	sub	sp, #24
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801be12:	230e      	movs	r3, #14
 801be14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	895b      	ldrh	r3, [r3, #10]
 801be1a:	2b0e      	cmp	r3, #14
 801be1c:	d96e      	bls.n	801befc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	7bdb      	ldrb	r3, [r3, #15]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d106      	bne.n	801be34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801be26:	683b      	ldr	r3, [r7, #0]
 801be28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801be2c:	3301      	adds	r3, #1
 801be2e:	b2da      	uxtb	r2, r3
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801be3a:	693b      	ldr	r3, [r7, #16]
 801be3c:	7b1a      	ldrb	r2, [r3, #12]
 801be3e:	7b5b      	ldrb	r3, [r3, #13]
 801be40:	021b      	lsls	r3, r3, #8
 801be42:	4313      	orrs	r3, r2
 801be44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	f003 0301 	and.w	r3, r3, #1
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d023      	beq.n	801be9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801be52:	693b      	ldr	r3, [r7, #16]
 801be54:	781b      	ldrb	r3, [r3, #0]
 801be56:	2b01      	cmp	r3, #1
 801be58:	d10f      	bne.n	801be7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	785b      	ldrb	r3, [r3, #1]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d11b      	bne.n	801be9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801be62:	693b      	ldr	r3, [r7, #16]
 801be64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801be66:	2b5e      	cmp	r3, #94	; 0x5e
 801be68:	d117      	bne.n	801be9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	7b5b      	ldrb	r3, [r3, #13]
 801be6e:	f043 0310 	orr.w	r3, r3, #16
 801be72:	b2da      	uxtb	r2, r3
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	735a      	strb	r2, [r3, #13]
 801be78:	e00f      	b.n	801be9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801be7a:	693b      	ldr	r3, [r7, #16]
 801be7c:	2206      	movs	r2, #6
 801be7e:	4928      	ldr	r1, [pc, #160]	; (801bf20 <ethernet_input+0x118>)
 801be80:	4618      	mov	r0, r3
 801be82:	f001 f980 	bl	801d186 <memcmp>
 801be86:	4603      	mov	r3, r0
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d106      	bne.n	801be9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	7b5b      	ldrb	r3, [r3, #13]
 801be90:	f043 0308 	orr.w	r3, r3, #8
 801be94:	b2da      	uxtb	r2, r3
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801be9a:	89fb      	ldrh	r3, [r7, #14]
 801be9c:	2b08      	cmp	r3, #8
 801be9e:	d003      	beq.n	801bea8 <ethernet_input+0xa0>
 801bea0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801bea4:	d014      	beq.n	801bed0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bea6:	e032      	b.n	801bf0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bea8:	683b      	ldr	r3, [r7, #0]
 801beaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801beae:	f003 0308 	and.w	r3, r3, #8
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d024      	beq.n	801bf00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801beb6:	8afb      	ldrh	r3, [r7, #22]
 801beb8:	4619      	mov	r1, r3
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	f7f4 fbd6 	bl	801066c <pbuf_remove_header>
 801bec0:	4603      	mov	r3, r0
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d11e      	bne.n	801bf04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801bec6:	6839      	ldr	r1, [r7, #0]
 801bec8:	6878      	ldr	r0, [r7, #4]
 801beca:	f7fe ff03 	bl	801acd4 <ip4_input>
      break;
 801bece:	e013      	b.n	801bef8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bed0:	683b      	ldr	r3, [r7, #0]
 801bed2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bed6:	f003 0308 	and.w	r3, r3, #8
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d014      	beq.n	801bf08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bede:	8afb      	ldrh	r3, [r7, #22]
 801bee0:	4619      	mov	r1, r3
 801bee2:	6878      	ldr	r0, [r7, #4]
 801bee4:	f7f4 fbc2 	bl	801066c <pbuf_remove_header>
 801bee8:	4603      	mov	r3, r0
 801beea:	2b00      	cmp	r3, #0
 801beec:	d10e      	bne.n	801bf0c <ethernet_input+0x104>
        etharp_input(p, netif);
 801beee:	6839      	ldr	r1, [r7, #0]
 801bef0:	6878      	ldr	r0, [r7, #4]
 801bef2:	f7fe f89f 	bl	801a034 <etharp_input>
      break;
 801bef6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801bef8:	2300      	movs	r3, #0
 801befa:	e00c      	b.n	801bf16 <ethernet_input+0x10e>
    goto free_and_return;
 801befc:	bf00      	nop
 801befe:	e006      	b.n	801bf0e <ethernet_input+0x106>
        goto free_and_return;
 801bf00:	bf00      	nop
 801bf02:	e004      	b.n	801bf0e <ethernet_input+0x106>
        goto free_and_return;
 801bf04:	bf00      	nop
 801bf06:	e002      	b.n	801bf0e <ethernet_input+0x106>
        goto free_and_return;
 801bf08:	bf00      	nop
 801bf0a:	e000      	b.n	801bf0e <ethernet_input+0x106>
        goto free_and_return;
 801bf0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801bf0e:	6878      	ldr	r0, [r7, #4]
 801bf10:	f7f4 fc32 	bl	8010778 <pbuf_free>
  return ERR_OK;
 801bf14:	2300      	movs	r3, #0
}
 801bf16:	4618      	mov	r0, r3
 801bf18:	3718      	adds	r7, #24
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	08020f64 	.word	0x08020f64

0801bf24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b086      	sub	sp, #24
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	60f8      	str	r0, [r7, #12]
 801bf2c:	60b9      	str	r1, [r7, #8]
 801bf2e:	607a      	str	r2, [r7, #4]
 801bf30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801bf32:	8c3b      	ldrh	r3, [r7, #32]
 801bf34:	4618      	mov	r0, r3
 801bf36:	f7f2 fdc8 	bl	800eaca <lwip_htons>
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801bf3e:	210e      	movs	r1, #14
 801bf40:	68b8      	ldr	r0, [r7, #8]
 801bf42:	f7f4 fb83 	bl	801064c <pbuf_add_header>
 801bf46:	4603      	mov	r3, r0
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d125      	bne.n	801bf98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801bf4c:	68bb      	ldr	r3, [r7, #8]
 801bf4e:	685b      	ldr	r3, [r3, #4]
 801bf50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801bf52:	693b      	ldr	r3, [r7, #16]
 801bf54:	8afa      	ldrh	r2, [r7, #22]
 801bf56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	2206      	movs	r2, #6
 801bf5c:	6839      	ldr	r1, [r7, #0]
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f001 f9af 	bl	801d2c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801bf64:	693b      	ldr	r3, [r7, #16]
 801bf66:	3306      	adds	r3, #6
 801bf68:	2206      	movs	r2, #6
 801bf6a:	6879      	ldr	r1, [r7, #4]
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f001 f9a8 	bl	801d2c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bf78:	2b06      	cmp	r3, #6
 801bf7a:	d006      	beq.n	801bf8a <ethernet_output+0x66>
 801bf7c:	4b0a      	ldr	r3, [pc, #40]	; (801bfa8 <ethernet_output+0x84>)
 801bf7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801bf82:	490a      	ldr	r1, [pc, #40]	; (801bfac <ethernet_output+0x88>)
 801bf84:	480a      	ldr	r0, [pc, #40]	; (801bfb0 <ethernet_output+0x8c>)
 801bf86:	f001 f8a9 	bl	801d0dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	699b      	ldr	r3, [r3, #24]
 801bf8e:	68b9      	ldr	r1, [r7, #8]
 801bf90:	68f8      	ldr	r0, [r7, #12]
 801bf92:	4798      	blx	r3
 801bf94:	4603      	mov	r3, r0
 801bf96:	e002      	b.n	801bf9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801bf98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801bf9a:	f06f 0301 	mvn.w	r3, #1
}
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	3718      	adds	r7, #24
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	bd80      	pop	{r7, pc}
 801bfa6:	bf00      	nop
 801bfa8:	08020d28 	.word	0x08020d28
 801bfac:	08020d60 	.word	0x08020d60
 801bfb0:	08020d94 	.word	0x08020d94

0801bfb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801bfb8:	2201      	movs	r2, #1
 801bfba:	4924      	ldr	r1, [pc, #144]	; (801c04c <MX_USB_DEVICE_Init+0x98>)
 801bfbc:	4824      	ldr	r0, [pc, #144]	; (801c050 <MX_USB_DEVICE_Init+0x9c>)
 801bfbe:	f7f1 fa30 	bl	800d422 <USBD_Init>
 801bfc2:	4603      	mov	r3, r0
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d001      	beq.n	801bfcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801bfc8:	f7e4 fc52 	bl	8000870 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 801bfcc:	4921      	ldr	r1, [pc, #132]	; (801c054 <MX_USB_DEVICE_Init+0xa0>)
 801bfce:	4820      	ldr	r0, [pc, #128]	; (801c050 <MX_USB_DEVICE_Init+0x9c>)
 801bfd0:	f7f1 fa57 	bl	800d482 <USBD_RegisterClass>
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d001      	beq.n	801bfde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801bfda:	f7e4 fc49 	bl	8000870 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 801bfde:	491e      	ldr	r1, [pc, #120]	; (801c058 <MX_USB_DEVICE_Init+0xa4>)
 801bfe0:	481b      	ldr	r0, [pc, #108]	; (801c050 <MX_USB_DEVICE_Init+0x9c>)
 801bfe2:	f7ef fcd3 	bl	800b98c <USBD_MSC_RegisterStorage>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d001      	beq.n	801bff0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801bfec:	f7e4 fc40 	bl	8000870 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801bff0:	4817      	ldr	r0, [pc, #92]	; (801c050 <MX_USB_DEVICE_Init+0x9c>)
 801bff2:	f7f1 fa7c 	bl	800d4ee <USBD_Start>
 801bff6:	4603      	mov	r3, r0
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d001      	beq.n	801c000 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801bffc:	f7e4 fc38 	bl	8000870 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c000:	2200      	movs	r2, #0
 801c002:	4916      	ldr	r1, [pc, #88]	; (801c05c <MX_USB_DEVICE_Init+0xa8>)
 801c004:	4816      	ldr	r0, [pc, #88]	; (801c060 <MX_USB_DEVICE_Init+0xac>)
 801c006:	f7f1 fa0c 	bl	800d422 <USBD_Init>
 801c00a:	4603      	mov	r3, r0
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d001      	beq.n	801c014 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 801c010:	f7e4 fc2e 	bl	8000870 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c014:	4913      	ldr	r1, [pc, #76]	; (801c064 <MX_USB_DEVICE_Init+0xb0>)
 801c016:	4812      	ldr	r0, [pc, #72]	; (801c060 <MX_USB_DEVICE_Init+0xac>)
 801c018:	f7f1 fa33 	bl	800d482 <USBD_RegisterClass>
 801c01c:	4603      	mov	r3, r0
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d001      	beq.n	801c026 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 801c022:	f7e4 fc25 	bl	8000870 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c026:	4910      	ldr	r1, [pc, #64]	; (801c068 <MX_USB_DEVICE_Init+0xb4>)
 801c028:	480d      	ldr	r0, [pc, #52]	; (801c060 <MX_USB_DEVICE_Init+0xac>)
 801c02a:	f7ef f947 	bl	800b2bc <USBD_CDC_RegisterInterface>
 801c02e:	4603      	mov	r3, r0
 801c030:	2b00      	cmp	r3, #0
 801c032:	d001      	beq.n	801c038 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 801c034:	f7e4 fc1c 	bl	8000870 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c038:	4809      	ldr	r0, [pc, #36]	; (801c060 <MX_USB_DEVICE_Init+0xac>)
 801c03a:	f7f1 fa58 	bl	800d4ee <USBD_Start>
 801c03e:	4603      	mov	r3, r0
 801c040:	2b00      	cmp	r3, #0
 801c042:	d001      	beq.n	801c048 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 801c044:	f7e4 fc14 	bl	8000870 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c048:	bf00      	nop
 801c04a:	bd80      	pop	{r7, pc}
 801c04c:	20000180 	.word	0x20000180
 801c050:	20008808 	.word	0x20008808
 801c054:	200000ac 	.word	0x200000ac
 801c058:	200001d0 	.word	0x200001d0
 801c05c:	20000150 	.word	0x20000150
 801c060:	20008ae4 	.word	0x20008ae4
 801c064:	2000002c 	.word	0x2000002c
 801c068:	2000013c 	.word	0x2000013c

0801c06c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c070:	2200      	movs	r2, #0
 801c072:	4905      	ldr	r1, [pc, #20]	; (801c088 <CDC_Init_FS+0x1c>)
 801c074:	4805      	ldr	r0, [pc, #20]	; (801c08c <CDC_Init_FS+0x20>)
 801c076:	f7ef f93b 	bl	800b2f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c07a:	4905      	ldr	r1, [pc, #20]	; (801c090 <CDC_Init_FS+0x24>)
 801c07c:	4803      	ldr	r0, [pc, #12]	; (801c08c <CDC_Init_FS+0x20>)
 801c07e:	f7ef f959 	bl	800b334 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c082:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c084:	4618      	mov	r0, r3
 801c086:	bd80      	pop	{r7, pc}
 801c088:	200095c0 	.word	0x200095c0
 801c08c:	20008ae4 	.word	0x20008ae4
 801c090:	20008dc0 	.word	0x20008dc0

0801c094 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c094:	b480      	push	{r7}
 801c096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c098:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c09a:	4618      	mov	r0, r3
 801c09c:	46bd      	mov	sp, r7
 801c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a2:	4770      	bx	lr

0801c0a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c0a4:	b480      	push	{r7}
 801c0a6:	b083      	sub	sp, #12
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	6039      	str	r1, [r7, #0]
 801c0ae:	71fb      	strb	r3, [r7, #7]
 801c0b0:	4613      	mov	r3, r2
 801c0b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c0b4:	79fb      	ldrb	r3, [r7, #7]
 801c0b6:	2b23      	cmp	r3, #35	; 0x23
 801c0b8:	d84a      	bhi.n	801c150 <CDC_Control_FS+0xac>
 801c0ba:	a201      	add	r2, pc, #4	; (adr r2, 801c0c0 <CDC_Control_FS+0x1c>)
 801c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0c0:	0801c151 	.word	0x0801c151
 801c0c4:	0801c151 	.word	0x0801c151
 801c0c8:	0801c151 	.word	0x0801c151
 801c0cc:	0801c151 	.word	0x0801c151
 801c0d0:	0801c151 	.word	0x0801c151
 801c0d4:	0801c151 	.word	0x0801c151
 801c0d8:	0801c151 	.word	0x0801c151
 801c0dc:	0801c151 	.word	0x0801c151
 801c0e0:	0801c151 	.word	0x0801c151
 801c0e4:	0801c151 	.word	0x0801c151
 801c0e8:	0801c151 	.word	0x0801c151
 801c0ec:	0801c151 	.word	0x0801c151
 801c0f0:	0801c151 	.word	0x0801c151
 801c0f4:	0801c151 	.word	0x0801c151
 801c0f8:	0801c151 	.word	0x0801c151
 801c0fc:	0801c151 	.word	0x0801c151
 801c100:	0801c151 	.word	0x0801c151
 801c104:	0801c151 	.word	0x0801c151
 801c108:	0801c151 	.word	0x0801c151
 801c10c:	0801c151 	.word	0x0801c151
 801c110:	0801c151 	.word	0x0801c151
 801c114:	0801c151 	.word	0x0801c151
 801c118:	0801c151 	.word	0x0801c151
 801c11c:	0801c151 	.word	0x0801c151
 801c120:	0801c151 	.word	0x0801c151
 801c124:	0801c151 	.word	0x0801c151
 801c128:	0801c151 	.word	0x0801c151
 801c12c:	0801c151 	.word	0x0801c151
 801c130:	0801c151 	.word	0x0801c151
 801c134:	0801c151 	.word	0x0801c151
 801c138:	0801c151 	.word	0x0801c151
 801c13c:	0801c151 	.word	0x0801c151
 801c140:	0801c151 	.word	0x0801c151
 801c144:	0801c151 	.word	0x0801c151
 801c148:	0801c151 	.word	0x0801c151
 801c14c:	0801c151 	.word	0x0801c151
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c150:	bf00      	nop
  }

  return (USBD_OK);
 801c152:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c154:	4618      	mov	r0, r3
 801c156:	370c      	adds	r7, #12
 801c158:	46bd      	mov	sp, r7
 801c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15e:	4770      	bx	lr

0801c160 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b082      	sub	sp, #8
 801c164:	af00      	add	r7, sp, #0
 801c166:	6078      	str	r0, [r7, #4]
 801c168:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c16a:	6879      	ldr	r1, [r7, #4]
 801c16c:	4809      	ldr	r0, [pc, #36]	; (801c194 <CDC_Receive_FS+0x34>)
 801c16e:	f7ef f8e1 	bl	800b334 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c172:	4808      	ldr	r0, [pc, #32]	; (801c194 <CDC_Receive_FS+0x34>)
 801c174:	f7ef f93c 	bl	800b3f0 <USBD_CDC_ReceivePacket>
  //memcpy(UserRxBufferFS, Buf, *Len);
#ifdef COM_PORT
  wr = 1;
 801c178:	4b07      	ldr	r3, [pc, #28]	; (801c198 <CDC_Receive_FS+0x38>)
 801c17a:	2201      	movs	r2, #1
 801c17c:	701a      	strb	r2, [r3, #0]
  byteNum++;
 801c17e:	4b07      	ldr	r3, [pc, #28]	; (801c19c <CDC_Receive_FS+0x3c>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	3301      	adds	r3, #1
 801c184:	4a05      	ldr	r2, [pc, #20]	; (801c19c <CDC_Receive_FS+0x3c>)
 801c186:	6013      	str	r3, [r2, #0]
#endif
  return (USBD_OK);
 801c188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	3708      	adds	r7, #8
 801c18e:	46bd      	mov	sp, r7
 801c190:	bd80      	pop	{r7, pc}
 801c192:	bf00      	nop
 801c194:	20008ae4 	.word	0x20008ae4
 801c198:	20000437 	.word	0x20000437
 801c19c:	20000414 	.word	0x20000414

0801c1a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b084      	sub	sp, #16
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	6078      	str	r0, [r7, #4]
 801c1a8:	460b      	mov	r3, r1
 801c1aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801c1ac:	2300      	movs	r3, #0
 801c1ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c1b0:	4b0d      	ldr	r3, [pc, #52]	; (801c1e8 <CDC_Transmit_FS+0x48>)
 801c1b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c1b8:	68bb      	ldr	r3, [r7, #8]
 801c1ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d001      	beq.n	801c1c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	e00b      	b.n	801c1de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c1c6:	887b      	ldrh	r3, [r7, #2]
 801c1c8:	461a      	mov	r2, r3
 801c1ca:	6879      	ldr	r1, [r7, #4]
 801c1cc:	4806      	ldr	r0, [pc, #24]	; (801c1e8 <CDC_Transmit_FS+0x48>)
 801c1ce:	f7ef f88f 	bl	800b2f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c1d2:	4805      	ldr	r0, [pc, #20]	; (801c1e8 <CDC_Transmit_FS+0x48>)
 801c1d4:	f7ef f8cc 	bl	800b370 <USBD_CDC_TransmitPacket>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c1de:	4618      	mov	r0, r3
 801c1e0:	3710      	adds	r7, #16
 801c1e2:	46bd      	mov	sp, r7
 801c1e4:	bd80      	pop	{r7, pc}
 801c1e6:	bf00      	nop
 801c1e8:	20008ae4 	.word	0x20008ae4

0801c1ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c1ec:	b480      	push	{r7}
 801c1ee:	b087      	sub	sp, #28
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	60b9      	str	r1, [r7, #8]
 801c1f6:	4613      	mov	r3, r2
 801c1f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c202:	4618      	mov	r0, r3
 801c204:	371c      	adds	r7, #28
 801c206:	46bd      	mov	sp, r7
 801c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20c:	4770      	bx	lr
	...

0801c210 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c210:	b480      	push	{r7}
 801c212:	b083      	sub	sp, #12
 801c214:	af00      	add	r7, sp, #0
 801c216:	4603      	mov	r3, r0
 801c218:	6039      	str	r1, [r7, #0]
 801c21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801c21c:	683b      	ldr	r3, [r7, #0]
 801c21e:	2212      	movs	r2, #18
 801c220:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801c222:	4b03      	ldr	r3, [pc, #12]	; (801c230 <USBD_HS_DeviceDescriptor+0x20>)
}
 801c224:	4618      	mov	r0, r3
 801c226:	370c      	adds	r7, #12
 801c228:	46bd      	mov	sp, r7
 801c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c22e:	4770      	bx	lr
 801c230:	2000019c 	.word	0x2000019c

0801c234 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c234:	b480      	push	{r7}
 801c236:	b083      	sub	sp, #12
 801c238:	af00      	add	r7, sp, #0
 801c23a:	4603      	mov	r3, r0
 801c23c:	6039      	str	r1, [r7, #0]
 801c23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	2204      	movs	r2, #4
 801c244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c246:	4b03      	ldr	r3, [pc, #12]	; (801c254 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801c248:	4618      	mov	r0, r3
 801c24a:	370c      	adds	r7, #12
 801c24c:	46bd      	mov	sp, r7
 801c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c252:	4770      	bx	lr
 801c254:	200001b0 	.word	0x200001b0

0801c258 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b082      	sub	sp, #8
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	4603      	mov	r3, r0
 801c260:	6039      	str	r1, [r7, #0]
 801c262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c264:	79fb      	ldrb	r3, [r7, #7]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d105      	bne.n	801c276 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801c26a:	683a      	ldr	r2, [r7, #0]
 801c26c:	4907      	ldr	r1, [pc, #28]	; (801c28c <USBD_HS_ProductStrDescriptor+0x34>)
 801c26e:	4808      	ldr	r0, [pc, #32]	; (801c290 <USBD_HS_ProductStrDescriptor+0x38>)
 801c270:	f7f2 faf0 	bl	800e854 <USBD_GetString>
 801c274:	e004      	b.n	801c280 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801c276:	683a      	ldr	r2, [r7, #0]
 801c278:	4904      	ldr	r1, [pc, #16]	; (801c28c <USBD_HS_ProductStrDescriptor+0x34>)
 801c27a:	4805      	ldr	r0, [pc, #20]	; (801c290 <USBD_HS_ProductStrDescriptor+0x38>)
 801c27c:	f7f2 faea 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c280:	4b02      	ldr	r3, [pc, #8]	; (801c28c <USBD_HS_ProductStrDescriptor+0x34>)
}
 801c282:	4618      	mov	r0, r3
 801c284:	3708      	adds	r7, #8
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}
 801c28a:	bf00      	nop
 801c28c:	20009dc0 	.word	0x20009dc0
 801c290:	08020dbc 	.word	0x08020dbc

0801c294 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b082      	sub	sp, #8
 801c298:	af00      	add	r7, sp, #0
 801c29a:	4603      	mov	r3, r0
 801c29c:	6039      	str	r1, [r7, #0]
 801c29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c2a0:	683a      	ldr	r2, [r7, #0]
 801c2a2:	4904      	ldr	r1, [pc, #16]	; (801c2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801c2a4:	4804      	ldr	r0, [pc, #16]	; (801c2b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801c2a6:	f7f2 fad5 	bl	800e854 <USBD_GetString>
  return USBD_StrDesc;
 801c2aa:	4b02      	ldr	r3, [pc, #8]	; (801c2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	3708      	adds	r7, #8
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}
 801c2b4:	20009dc0 	.word	0x20009dc0
 801c2b8:	08020dd0 	.word	0x08020dd0

0801c2bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	6039      	str	r1, [r7, #0]
 801c2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c2c8:	683b      	ldr	r3, [r7, #0]
 801c2ca:	221a      	movs	r2, #26
 801c2cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c2ce:	f000 f8e7 	bl	801c4a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801c2d2:	4b02      	ldr	r3, [pc, #8]	; (801c2dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	3708      	adds	r7, #8
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}
 801c2dc:	200001b4 	.word	0x200001b4

0801c2e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	6039      	str	r1, [r7, #0]
 801c2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c2ec:	79fb      	ldrb	r3, [r7, #7]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d105      	bne.n	801c2fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801c2f2:	683a      	ldr	r2, [r7, #0]
 801c2f4:	4907      	ldr	r1, [pc, #28]	; (801c314 <USBD_HS_ConfigStrDescriptor+0x34>)
 801c2f6:	4808      	ldr	r0, [pc, #32]	; (801c318 <USBD_HS_ConfigStrDescriptor+0x38>)
 801c2f8:	f7f2 faac 	bl	800e854 <USBD_GetString>
 801c2fc:	e004      	b.n	801c308 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801c2fe:	683a      	ldr	r2, [r7, #0]
 801c300:	4904      	ldr	r1, [pc, #16]	; (801c314 <USBD_HS_ConfigStrDescriptor+0x34>)
 801c302:	4805      	ldr	r0, [pc, #20]	; (801c318 <USBD_HS_ConfigStrDescriptor+0x38>)
 801c304:	f7f2 faa6 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c308:	4b02      	ldr	r3, [pc, #8]	; (801c314 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	3708      	adds	r7, #8
 801c30e:	46bd      	mov	sp, r7
 801c310:	bd80      	pop	{r7, pc}
 801c312:	bf00      	nop
 801c314:	20009dc0 	.word	0x20009dc0
 801c318:	08020de4 	.word	0x08020de4

0801c31c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b082      	sub	sp, #8
 801c320:	af00      	add	r7, sp, #0
 801c322:	4603      	mov	r3, r0
 801c324:	6039      	str	r1, [r7, #0]
 801c326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c328:	79fb      	ldrb	r3, [r7, #7]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d105      	bne.n	801c33a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801c32e:	683a      	ldr	r2, [r7, #0]
 801c330:	4907      	ldr	r1, [pc, #28]	; (801c350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801c332:	4808      	ldr	r0, [pc, #32]	; (801c354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801c334:	f7f2 fa8e 	bl	800e854 <USBD_GetString>
 801c338:	e004      	b.n	801c344 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801c33a:	683a      	ldr	r2, [r7, #0]
 801c33c:	4904      	ldr	r1, [pc, #16]	; (801c350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801c33e:	4805      	ldr	r0, [pc, #20]	; (801c354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801c340:	f7f2 fa88 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c344:	4b02      	ldr	r3, [pc, #8]	; (801c350 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801c346:	4618      	mov	r0, r3
 801c348:	3708      	adds	r7, #8
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
 801c34e:	bf00      	nop
 801c350:	20009dc0 	.word	0x20009dc0
 801c354:	08020df0 	.word	0x08020df0

0801c358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c358:	b480      	push	{r7}
 801c35a:	b083      	sub	sp, #12
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	4603      	mov	r3, r0
 801c360:	6039      	str	r1, [r7, #0]
 801c362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c364:	683b      	ldr	r3, [r7, #0]
 801c366:	2212      	movs	r2, #18
 801c368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c36a:	4b03      	ldr	r3, [pc, #12]	; (801c378 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	370c      	adds	r7, #12
 801c370:	46bd      	mov	sp, r7
 801c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c376:	4770      	bx	lr
 801c378:	2000016c 	.word	0x2000016c

0801c37c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c37c:	b480      	push	{r7}
 801c37e:	b083      	sub	sp, #12
 801c380:	af00      	add	r7, sp, #0
 801c382:	4603      	mov	r3, r0
 801c384:	6039      	str	r1, [r7, #0]
 801c386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c388:	683b      	ldr	r3, [r7, #0]
 801c38a:	2204      	movs	r2, #4
 801c38c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c38e:	4b03      	ldr	r3, [pc, #12]	; (801c39c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c390:	4618      	mov	r0, r3
 801c392:	370c      	adds	r7, #12
 801c394:	46bd      	mov	sp, r7
 801c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39a:	4770      	bx	lr
 801c39c:	200001b0 	.word	0x200001b0

0801c3a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	6039      	str	r1, [r7, #0]
 801c3aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c3ac:	79fb      	ldrb	r3, [r7, #7]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d105      	bne.n	801c3be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c3b2:	683a      	ldr	r2, [r7, #0]
 801c3b4:	4907      	ldr	r1, [pc, #28]	; (801c3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 801c3b6:	4808      	ldr	r0, [pc, #32]	; (801c3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 801c3b8:	f7f2 fa4c 	bl	800e854 <USBD_GetString>
 801c3bc:	e004      	b.n	801c3c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c3be:	683a      	ldr	r2, [r7, #0]
 801c3c0:	4904      	ldr	r1, [pc, #16]	; (801c3d4 <USBD_FS_ProductStrDescriptor+0x34>)
 801c3c2:	4805      	ldr	r0, [pc, #20]	; (801c3d8 <USBD_FS_ProductStrDescriptor+0x38>)
 801c3c4:	f7f2 fa46 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c3c8:	4b02      	ldr	r3, [pc, #8]	; (801c3d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	3708      	adds	r7, #8
 801c3ce:	46bd      	mov	sp, r7
 801c3d0:	bd80      	pop	{r7, pc}
 801c3d2:	bf00      	nop
 801c3d4:	20009dc0 	.word	0x20009dc0
 801c3d8:	08020e00 	.word	0x08020e00

0801c3dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	b082      	sub	sp, #8
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	6039      	str	r1, [r7, #0]
 801c3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c3e8:	683a      	ldr	r2, [r7, #0]
 801c3ea:	4904      	ldr	r1, [pc, #16]	; (801c3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c3ec:	4804      	ldr	r0, [pc, #16]	; (801c400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c3ee:	f7f2 fa31 	bl	800e854 <USBD_GetString>
  return USBD_StrDesc;
 801c3f2:	4b02      	ldr	r3, [pc, #8]	; (801c3fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	3708      	adds	r7, #8
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	20009dc0 	.word	0x20009dc0
 801c400:	08020dd0 	.word	0x08020dd0

0801c404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b082      	sub	sp, #8
 801c408:	af00      	add	r7, sp, #0
 801c40a:	4603      	mov	r3, r0
 801c40c:	6039      	str	r1, [r7, #0]
 801c40e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	221a      	movs	r2, #26
 801c414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c416:	f000 f843 	bl	801c4a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c41a:	4b02      	ldr	r3, [pc, #8]	; (801c424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c41c:	4618      	mov	r0, r3
 801c41e:	3708      	adds	r7, #8
 801c420:	46bd      	mov	sp, r7
 801c422:	bd80      	pop	{r7, pc}
 801c424:	200001b4 	.word	0x200001b4

0801c428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b082      	sub	sp, #8
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	4603      	mov	r3, r0
 801c430:	6039      	str	r1, [r7, #0]
 801c432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c434:	79fb      	ldrb	r3, [r7, #7]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d105      	bne.n	801c446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c43a:	683a      	ldr	r2, [r7, #0]
 801c43c:	4907      	ldr	r1, [pc, #28]	; (801c45c <USBD_FS_ConfigStrDescriptor+0x34>)
 801c43e:	4808      	ldr	r0, [pc, #32]	; (801c460 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c440:	f7f2 fa08 	bl	800e854 <USBD_GetString>
 801c444:	e004      	b.n	801c450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c446:	683a      	ldr	r2, [r7, #0]
 801c448:	4904      	ldr	r1, [pc, #16]	; (801c45c <USBD_FS_ConfigStrDescriptor+0x34>)
 801c44a:	4805      	ldr	r0, [pc, #20]	; (801c460 <USBD_FS_ConfigStrDescriptor+0x38>)
 801c44c:	f7f2 fa02 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c450:	4b02      	ldr	r3, [pc, #8]	; (801c45c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c452:	4618      	mov	r0, r3
 801c454:	3708      	adds	r7, #8
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}
 801c45a:	bf00      	nop
 801c45c:	20009dc0 	.word	0x20009dc0
 801c460:	08020e18 	.word	0x08020e18

0801c464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b082      	sub	sp, #8
 801c468:	af00      	add	r7, sp, #0
 801c46a:	4603      	mov	r3, r0
 801c46c:	6039      	str	r1, [r7, #0]
 801c46e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c470:	79fb      	ldrb	r3, [r7, #7]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d105      	bne.n	801c482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c476:	683a      	ldr	r2, [r7, #0]
 801c478:	4907      	ldr	r1, [pc, #28]	; (801c498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c47a:	4808      	ldr	r0, [pc, #32]	; (801c49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c47c:	f7f2 f9ea 	bl	800e854 <USBD_GetString>
 801c480:	e004      	b.n	801c48c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c482:	683a      	ldr	r2, [r7, #0]
 801c484:	4904      	ldr	r1, [pc, #16]	; (801c498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c486:	4805      	ldr	r0, [pc, #20]	; (801c49c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c488:	f7f2 f9e4 	bl	800e854 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c48c:	4b02      	ldr	r3, [pc, #8]	; (801c498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3708      	adds	r7, #8
 801c492:	46bd      	mov	sp, r7
 801c494:	bd80      	pop	{r7, pc}
 801c496:	bf00      	nop
 801c498:	20009dc0 	.word	0x20009dc0
 801c49c:	08020e24 	.word	0x08020e24

0801c4a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b084      	sub	sp, #16
 801c4a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c4a6:	4b0f      	ldr	r3, [pc, #60]	; (801c4e4 <Get_SerialNum+0x44>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c4ac:	4b0e      	ldr	r3, [pc, #56]	; (801c4e8 <Get_SerialNum+0x48>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c4b2:	4b0e      	ldr	r3, [pc, #56]	; (801c4ec <Get_SerialNum+0x4c>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c4b8:	68fa      	ldr	r2, [r7, #12]
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	4413      	add	r3, r2
 801c4be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d009      	beq.n	801c4da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c4c6:	2208      	movs	r2, #8
 801c4c8:	4909      	ldr	r1, [pc, #36]	; (801c4f0 <Get_SerialNum+0x50>)
 801c4ca:	68f8      	ldr	r0, [r7, #12]
 801c4cc:	f000 f814 	bl	801c4f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c4d0:	2204      	movs	r2, #4
 801c4d2:	4908      	ldr	r1, [pc, #32]	; (801c4f4 <Get_SerialNum+0x54>)
 801c4d4:	68b8      	ldr	r0, [r7, #8]
 801c4d6:	f000 f80f 	bl	801c4f8 <IntToUnicode>
  }
}
 801c4da:	bf00      	nop
 801c4dc:	3710      	adds	r7, #16
 801c4de:	46bd      	mov	sp, r7
 801c4e0:	bd80      	pop	{r7, pc}
 801c4e2:	bf00      	nop
 801c4e4:	1fff7a10 	.word	0x1fff7a10
 801c4e8:	1fff7a14 	.word	0x1fff7a14
 801c4ec:	1fff7a18 	.word	0x1fff7a18
 801c4f0:	200001b6 	.word	0x200001b6
 801c4f4:	200001c6 	.word	0x200001c6

0801c4f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c4f8:	b480      	push	{r7}
 801c4fa:	b087      	sub	sp, #28
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	60f8      	str	r0, [r7, #12]
 801c500:	60b9      	str	r1, [r7, #8]
 801c502:	4613      	mov	r3, r2
 801c504:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c506:	2300      	movs	r3, #0
 801c508:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c50a:	2300      	movs	r3, #0
 801c50c:	75fb      	strb	r3, [r7, #23]
 801c50e:	e027      	b.n	801c560 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	0f1b      	lsrs	r3, r3, #28
 801c514:	2b09      	cmp	r3, #9
 801c516:	d80b      	bhi.n	801c530 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	0f1b      	lsrs	r3, r3, #28
 801c51c:	b2da      	uxtb	r2, r3
 801c51e:	7dfb      	ldrb	r3, [r7, #23]
 801c520:	005b      	lsls	r3, r3, #1
 801c522:	4619      	mov	r1, r3
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	440b      	add	r3, r1
 801c528:	3230      	adds	r2, #48	; 0x30
 801c52a:	b2d2      	uxtb	r2, r2
 801c52c:	701a      	strb	r2, [r3, #0]
 801c52e:	e00a      	b.n	801c546 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	0f1b      	lsrs	r3, r3, #28
 801c534:	b2da      	uxtb	r2, r3
 801c536:	7dfb      	ldrb	r3, [r7, #23]
 801c538:	005b      	lsls	r3, r3, #1
 801c53a:	4619      	mov	r1, r3
 801c53c:	68bb      	ldr	r3, [r7, #8]
 801c53e:	440b      	add	r3, r1
 801c540:	3237      	adds	r2, #55	; 0x37
 801c542:	b2d2      	uxtb	r2, r2
 801c544:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	011b      	lsls	r3, r3, #4
 801c54a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c54c:	7dfb      	ldrb	r3, [r7, #23]
 801c54e:	005b      	lsls	r3, r3, #1
 801c550:	3301      	adds	r3, #1
 801c552:	68ba      	ldr	r2, [r7, #8]
 801c554:	4413      	add	r3, r2
 801c556:	2200      	movs	r2, #0
 801c558:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c55a:	7dfb      	ldrb	r3, [r7, #23]
 801c55c:	3301      	adds	r3, #1
 801c55e:	75fb      	strb	r3, [r7, #23]
 801c560:	7dfa      	ldrb	r2, [r7, #23]
 801c562:	79fb      	ldrb	r3, [r7, #7]
 801c564:	429a      	cmp	r2, r3
 801c566:	d3d3      	bcc.n	801c510 <IntToUnicode+0x18>
  }
}
 801c568:	bf00      	nop
 801c56a:	bf00      	nop
 801c56c:	371c      	adds	r7, #28
 801c56e:	46bd      	mov	sp, r7
 801c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c574:	4770      	bx	lr

0801c576 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 801c576:	b480      	push	{r7}
 801c578:	b083      	sub	sp, #12
 801c57a:	af00      	add	r7, sp, #0
 801c57c:	4603      	mov	r3, r0
 801c57e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 801c580:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801c582:	4618      	mov	r0, r3
 801c584:	370c      	adds	r7, #12
 801c586:	46bd      	mov	sp, r7
 801c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c58c:	4770      	bx	lr

0801c58e <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801c58e:	b480      	push	{r7}
 801c590:	b085      	sub	sp, #20
 801c592:	af00      	add	r7, sp, #0
 801c594:	4603      	mov	r3, r0
 801c596:	60b9      	str	r1, [r7, #8]
 801c598:	607a      	str	r2, [r7, #4]
 801c59a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 801c59c:	68bb      	ldr	r3, [r7, #8]
 801c59e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801c5a2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c5aa:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801c5ac:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	3714      	adds	r7, #20
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5b8:	4770      	bx	lr

0801c5ba <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 801c5ba:	b480      	push	{r7}
 801c5bc:	b083      	sub	sp, #12
 801c5be:	af00      	add	r7, sp, #0
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 801c5c4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	370c      	adds	r7, #12
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d0:	4770      	bx	lr

0801c5d2 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 801c5d2:	b480      	push	{r7}
 801c5d4:	b083      	sub	sp, #12
 801c5d6:	af00      	add	r7, sp, #0
 801c5d8:	4603      	mov	r3, r0
 801c5da:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 801c5dc:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 801c5de:	4618      	mov	r0, r3
 801c5e0:	370c      	adds	r7, #12
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e8:	4770      	bx	lr

0801c5ea <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801c5ea:	b480      	push	{r7}
 801c5ec:	b085      	sub	sp, #20
 801c5ee:	af00      	add	r7, sp, #0
 801c5f0:	60b9      	str	r1, [r7, #8]
 801c5f2:	607a      	str	r2, [r7, #4]
 801c5f4:	461a      	mov	r2, r3
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	73fb      	strb	r3, [r7, #15]
 801c5fa:	4613      	mov	r3, r2
 801c5fc:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801c5fe:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 801c600:	4618      	mov	r0, r3
 801c602:	3714      	adds	r7, #20
 801c604:	46bd      	mov	sp, r7
 801c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c60a:	4770      	bx	lr

0801c60c <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801c60c:	b480      	push	{r7}
 801c60e:	b085      	sub	sp, #20
 801c610:	af00      	add	r7, sp, #0
 801c612:	60b9      	str	r1, [r7, #8]
 801c614:	607a      	str	r2, [r7, #4]
 801c616:	461a      	mov	r2, r3
 801c618:	4603      	mov	r3, r0
 801c61a:	73fb      	strb	r3, [r7, #15]
 801c61c:	4613      	mov	r3, r2
 801c61e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801c620:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 801c622:	4618      	mov	r0, r3
 801c624:	3714      	adds	r7, #20
 801c626:	46bd      	mov	sp, r7
 801c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c62c:	4770      	bx	lr

0801c62e <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 801c62e:	b480      	push	{r7}
 801c630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 801c632:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 801c634:	4618      	mov	r0, r3
 801c636:	46bd      	mov	sp, r7
 801c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c63c:	4770      	bx	lr
	...

0801c640 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b08c      	sub	sp, #48	; 0x30
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c648:	f107 031c 	add.w	r3, r7, #28
 801c64c:	2200      	movs	r2, #0
 801c64e:	601a      	str	r2, [r3, #0]
 801c650:	605a      	str	r2, [r3, #4]
 801c652:	609a      	str	r2, [r3, #8]
 801c654:	60da      	str	r2, [r3, #12]
 801c656:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c660:	d13b      	bne.n	801c6da <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c662:	2300      	movs	r3, #0
 801c664:	61bb      	str	r3, [r7, #24]
 801c666:	4b3c      	ldr	r3, [pc, #240]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c66a:	4a3b      	ldr	r2, [pc, #236]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c66c:	f043 0301 	orr.w	r3, r3, #1
 801c670:	6313      	str	r3, [r2, #48]	; 0x30
 801c672:	4b39      	ldr	r3, [pc, #228]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c676:	f003 0301 	and.w	r3, r3, #1
 801c67a:	61bb      	str	r3, [r7, #24]
 801c67c:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c67e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c684:	2302      	movs	r3, #2
 801c686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c688:	2300      	movs	r3, #0
 801c68a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c68c:	2303      	movs	r3, #3
 801c68e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801c690:	230a      	movs	r3, #10
 801c692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c694:	f107 031c 	add.w	r3, r7, #28
 801c698:	4619      	mov	r1, r3
 801c69a:	4830      	ldr	r0, [pc, #192]	; (801c75c <HAL_PCD_MspInit+0x11c>)
 801c69c:	f7e6 ff44 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c6a0:	4b2d      	ldr	r3, [pc, #180]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6a4:	4a2c      	ldr	r2, [pc, #176]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c6aa:	6353      	str	r3, [r2, #52]	; 0x34
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	617b      	str	r3, [r7, #20]
 801c6b0:	4b29      	ldr	r3, [pc, #164]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6b4:	4a28      	ldr	r2, [pc, #160]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c6ba:	6453      	str	r3, [r2, #68]	; 0x44
 801c6bc:	4b26      	ldr	r3, [pc, #152]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c6c4:	617b      	str	r3, [r7, #20]
 801c6c6:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	2100      	movs	r1, #0
 801c6cc:	2043      	movs	r0, #67	; 0x43
 801c6ce:	f7e5 f9f0 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c6d2:	2043      	movs	r0, #67	; 0x43
 801c6d4:	f7e5 fa09 	bl	8001aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801c6d8:	e039      	b.n	801c74e <HAL_PCD_MspInit+0x10e>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	4a20      	ldr	r2, [pc, #128]	; (801c760 <HAL_PCD_MspInit+0x120>)
 801c6e0:	4293      	cmp	r3, r2
 801c6e2:	d134      	bne.n	801c74e <HAL_PCD_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	613b      	str	r3, [r7, #16]
 801c6e8:	4b1b      	ldr	r3, [pc, #108]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ec:	4a1a      	ldr	r2, [pc, #104]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6ee:	f043 0302 	orr.w	r3, r3, #2
 801c6f2:	6313      	str	r3, [r2, #48]	; 0x30
 801c6f4:	4b18      	ldr	r3, [pc, #96]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6f8:	f003 0302 	and.w	r3, r3, #2
 801c6fc:	613b      	str	r3, [r7, #16]
 801c6fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801c700:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801c704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c706:	2302      	movs	r3, #2
 801c708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c70a:	2300      	movs	r3, #0
 801c70c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c70e:	2303      	movs	r3, #3
 801c710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801c712:	230c      	movs	r3, #12
 801c714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c716:	f107 031c 	add.w	r3, r7, #28
 801c71a:	4619      	mov	r1, r3
 801c71c:	4811      	ldr	r0, [pc, #68]	; (801c764 <HAL_PCD_MspInit+0x124>)
 801c71e:	f7e6 ff03 	bl	8003528 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801c722:	2300      	movs	r3, #0
 801c724:	60fb      	str	r3, [r7, #12]
 801c726:	4b0c      	ldr	r3, [pc, #48]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c72a:	4a0b      	ldr	r2, [pc, #44]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c72c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801c730:	6313      	str	r3, [r2, #48]	; 0x30
 801c732:	4b09      	ldr	r3, [pc, #36]	; (801c758 <HAL_PCD_MspInit+0x118>)
 801c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c73a:	60fb      	str	r3, [r7, #12]
 801c73c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801c73e:	2200      	movs	r2, #0
 801c740:	2100      	movs	r1, #0
 801c742:	204d      	movs	r0, #77	; 0x4d
 801c744:	f7e5 f9b5 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801c748:	204d      	movs	r0, #77	; 0x4d
 801c74a:	f7e5 f9ce 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 801c74e:	bf00      	nop
 801c750:	3730      	adds	r7, #48	; 0x30
 801c752:	46bd      	mov	sp, r7
 801c754:	bd80      	pop	{r7, pc}
 801c756:	bf00      	nop
 801c758:	40023800 	.word	0x40023800
 801c75c:	40020000 	.word	0x40020000
 801c760:	40040000 	.word	0x40040000
 801c764:	40020400 	.word	0x40020400

0801c768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	b082      	sub	sp, #8
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801c77c:	4619      	mov	r1, r3
 801c77e:	4610      	mov	r0, r2
 801c780:	f7f0 ff02 	bl	800d588 <USBD_LL_SetupStage>
}
 801c784:	bf00      	nop
 801c786:	3708      	adds	r7, #8
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}

0801c78c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b082      	sub	sp, #8
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
 801c794:	460b      	mov	r3, r1
 801c796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801c79e:	78fa      	ldrb	r2, [r7, #3]
 801c7a0:	6879      	ldr	r1, [r7, #4]
 801c7a2:	4613      	mov	r3, r2
 801c7a4:	00db      	lsls	r3, r3, #3
 801c7a6:	4413      	add	r3, r2
 801c7a8:	009b      	lsls	r3, r3, #2
 801c7aa:	440b      	add	r3, r1
 801c7ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801c7b0:	681a      	ldr	r2, [r3, #0]
 801c7b2:	78fb      	ldrb	r3, [r7, #3]
 801c7b4:	4619      	mov	r1, r3
 801c7b6:	f7f0 ff3c 	bl	800d632 <USBD_LL_DataOutStage>
}
 801c7ba:	bf00      	nop
 801c7bc:	3708      	adds	r7, #8
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	bd80      	pop	{r7, pc}

0801c7c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7c2:	b580      	push	{r7, lr}
 801c7c4:	b082      	sub	sp, #8
 801c7c6:	af00      	add	r7, sp, #0
 801c7c8:	6078      	str	r0, [r7, #4]
 801c7ca:	460b      	mov	r3, r1
 801c7cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801c7d4:	78fa      	ldrb	r2, [r7, #3]
 801c7d6:	6879      	ldr	r1, [r7, #4]
 801c7d8:	4613      	mov	r3, r2
 801c7da:	00db      	lsls	r3, r3, #3
 801c7dc:	4413      	add	r3, r2
 801c7de:	009b      	lsls	r3, r3, #2
 801c7e0:	440b      	add	r3, r1
 801c7e2:	3320      	adds	r3, #32
 801c7e4:	681a      	ldr	r2, [r3, #0]
 801c7e6:	78fb      	ldrb	r3, [r7, #3]
 801c7e8:	4619      	mov	r1, r3
 801c7ea:	f7f0 ffd5 	bl	800d798 <USBD_LL_DataInStage>
}
 801c7ee:	bf00      	nop
 801c7f0:	3708      	adds	r7, #8
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}

0801c7f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7f6:	b580      	push	{r7, lr}
 801c7f8:	b082      	sub	sp, #8
 801c7fa:	af00      	add	r7, sp, #0
 801c7fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c804:	4618      	mov	r0, r3
 801c806:	f7f1 f90f 	bl	800da28 <USBD_LL_SOF>
}
 801c80a:	bf00      	nop
 801c80c:	3708      	adds	r7, #8
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}

0801c812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c812:	b580      	push	{r7, lr}
 801c814:	b084      	sub	sp, #16
 801c816:	af00      	add	r7, sp, #0
 801c818:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c81a:	2301      	movs	r3, #1
 801c81c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	79db      	ldrb	r3, [r3, #7]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d102      	bne.n	801c82c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801c826:	2300      	movs	r3, #0
 801c828:	73fb      	strb	r3, [r7, #15]
 801c82a:	e008      	b.n	801c83e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	79db      	ldrb	r3, [r3, #7]
 801c830:	2b02      	cmp	r3, #2
 801c832:	d102      	bne.n	801c83a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801c834:	2301      	movs	r3, #1
 801c836:	73fb      	strb	r3, [r7, #15]
 801c838:	e001      	b.n	801c83e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801c83a:	f7e4 f819 	bl	8000870 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c844:	7bfa      	ldrb	r2, [r7, #15]
 801c846:	4611      	mov	r1, r2
 801c848:	4618      	mov	r0, r3
 801c84a:	f7f1 f8a9 	bl	800d9a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c854:	4618      	mov	r0, r3
 801c856:	f7f1 f851 	bl	800d8fc <USBD_LL_Reset>
}
 801c85a:	bf00      	nop
 801c85c:	3710      	adds	r7, #16
 801c85e:	46bd      	mov	sp, r7
 801c860:	bd80      	pop	{r7, pc}
	...

0801c864 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b082      	sub	sp, #8
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c872:	4618      	mov	r0, r3
 801c874:	f7f1 f8a4 	bl	800d9c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	687a      	ldr	r2, [r7, #4]
 801c884:	6812      	ldr	r2, [r2, #0]
 801c886:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c88a:	f043 0301 	orr.w	r3, r3, #1
 801c88e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	7adb      	ldrb	r3, [r3, #11]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d005      	beq.n	801c8a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c898:	4b04      	ldr	r3, [pc, #16]	; (801c8ac <HAL_PCD_SuspendCallback+0x48>)
 801c89a:	691b      	ldr	r3, [r3, #16]
 801c89c:	4a03      	ldr	r2, [pc, #12]	; (801c8ac <HAL_PCD_SuspendCallback+0x48>)
 801c89e:	f043 0306 	orr.w	r3, r3, #6
 801c8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c8a4:	bf00      	nop
 801c8a6:	3708      	adds	r7, #8
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd80      	pop	{r7, pc}
 801c8ac:	e000ed00 	.word	0xe000ed00

0801c8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f7f1 f89a 	bl	800d9f8 <USBD_LL_Resume>
}
 801c8c4:	bf00      	nop
 801c8c6:	3708      	adds	r7, #8
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}

0801c8cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b082      	sub	sp, #8
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	460b      	mov	r3, r1
 801c8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c8de:	78fa      	ldrb	r2, [r7, #3]
 801c8e0:	4611      	mov	r1, r2
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7f1 f8f2 	bl	800dacc <USBD_LL_IsoOUTIncomplete>
}
 801c8e8:	bf00      	nop
 801c8ea:	3708      	adds	r7, #8
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	bd80      	pop	{r7, pc}

0801c8f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b082      	sub	sp, #8
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
 801c8f8:	460b      	mov	r3, r1
 801c8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c902:	78fa      	ldrb	r2, [r7, #3]
 801c904:	4611      	mov	r1, r2
 801c906:	4618      	mov	r0, r3
 801c908:	f7f1 f8ae 	bl	800da68 <USBD_LL_IsoINIncomplete>
}
 801c90c:	bf00      	nop
 801c90e:	3708      	adds	r7, #8
 801c910:	46bd      	mov	sp, r7
 801c912:	bd80      	pop	{r7, pc}

0801c914 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c914:	b580      	push	{r7, lr}
 801c916:	b082      	sub	sp, #8
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c922:	4618      	mov	r0, r3
 801c924:	f7f1 f904 	bl	800db30 <USBD_LL_DevConnected>
}
 801c928:	bf00      	nop
 801c92a:	3708      	adds	r7, #8
 801c92c:	46bd      	mov	sp, r7
 801c92e:	bd80      	pop	{r7, pc}

0801c930 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b082      	sub	sp, #8
 801c934:	af00      	add	r7, sp, #0
 801c936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801c93e:	4618      	mov	r0, r3
 801c940:	f7f1 f901 	bl	800db46 <USBD_LL_DevDisconnected>
}
 801c944:	bf00      	nop
 801c946:	3708      	adds	r7, #8
 801c948:	46bd      	mov	sp, r7
 801c94a:	bd80      	pop	{r7, pc}

0801c94c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b082      	sub	sp, #8
 801c950:	af00      	add	r7, sp, #0
 801c952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	781b      	ldrb	r3, [r3, #0]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d13c      	bne.n	801c9d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c95c:	4a43      	ldr	r2, [pc, #268]	; (801ca6c <USBD_LL_Init+0x120>)
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	4a41      	ldr	r2, [pc, #260]	; (801ca6c <USBD_LL_Init+0x120>)
 801c968:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c96c:	4b3f      	ldr	r3, [pc, #252]	; (801ca6c <USBD_LL_Init+0x120>)
 801c96e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801c972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801c974:	4b3d      	ldr	r3, [pc, #244]	; (801ca6c <USBD_LL_Init+0x120>)
 801c976:	2204      	movs	r2, #4
 801c978:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c97a:	4b3c      	ldr	r3, [pc, #240]	; (801ca6c <USBD_LL_Init+0x120>)
 801c97c:	2202      	movs	r2, #2
 801c97e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c980:	4b3a      	ldr	r3, [pc, #232]	; (801ca6c <USBD_LL_Init+0x120>)
 801c982:	2200      	movs	r2, #0
 801c984:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c986:	4b39      	ldr	r3, [pc, #228]	; (801ca6c <USBD_LL_Init+0x120>)
 801c988:	2202      	movs	r2, #2
 801c98a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c98c:	4b37      	ldr	r3, [pc, #220]	; (801ca6c <USBD_LL_Init+0x120>)
 801c98e:	2200      	movs	r2, #0
 801c990:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c992:	4b36      	ldr	r3, [pc, #216]	; (801ca6c <USBD_LL_Init+0x120>)
 801c994:	2200      	movs	r2, #0
 801c996:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c998:	4b34      	ldr	r3, [pc, #208]	; (801ca6c <USBD_LL_Init+0x120>)
 801c99a:	2200      	movs	r2, #0
 801c99c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801c99e:	4b33      	ldr	r3, [pc, #204]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c9a4:	4b31      	ldr	r3, [pc, #196]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c9aa:	4830      	ldr	r0, [pc, #192]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9ac:	f7e6 ff58 	bl	8003860 <HAL_PCD_Init>
 801c9b0:	4603      	mov	r3, r0
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d001      	beq.n	801c9ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801c9b6:	f7e3 ff5b 	bl	8000870 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c9ba:	2180      	movs	r1, #128	; 0x80
 801c9bc:	482b      	ldr	r0, [pc, #172]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9be:	f7e8 f9b0 	bl	8004d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c9c2:	2240      	movs	r2, #64	; 0x40
 801c9c4:	2100      	movs	r1, #0
 801c9c6:	4829      	ldr	r0, [pc, #164]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9c8:	f7e8 f964 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c9cc:	2280      	movs	r2, #128	; 0x80
 801c9ce:	2101      	movs	r1, #1
 801c9d0:	4826      	ldr	r0, [pc, #152]	; (801ca6c <USBD_LL_Init+0x120>)
 801c9d2:	f7e8 f95f 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	781b      	ldrb	r3, [r3, #0]
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d140      	bne.n	801ca60 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801c9de:	4a24      	ldr	r2, [pc, #144]	; (801ca70 <USBD_LL_Init+0x124>)
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	4a21      	ldr	r2, [pc, #132]	; (801ca70 <USBD_LL_Init+0x124>)
 801c9ea:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801c9ee:	4b20      	ldr	r3, [pc, #128]	; (801ca70 <USBD_LL_Init+0x124>)
 801c9f0:	4a20      	ldr	r2, [pc, #128]	; (801ca74 <USBD_LL_Init+0x128>)
 801c9f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 801c9f4:	4b1e      	ldr	r3, [pc, #120]	; (801ca70 <USBD_LL_Init+0x124>)
 801c9f6:	2206      	movs	r2, #6
 801c9f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801c9fa:	4b1d      	ldr	r3, [pc, #116]	; (801ca70 <USBD_LL_Init+0x124>)
 801c9fc:	2202      	movs	r2, #2
 801c9fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801ca00:	4b1b      	ldr	r3, [pc, #108]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca02:	2200      	movs	r2, #0
 801ca04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801ca06:	4b1a      	ldr	r3, [pc, #104]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca08:	2202      	movs	r2, #2
 801ca0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801ca0c:	4b18      	ldr	r3, [pc, #96]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca0e:	2200      	movs	r2, #0
 801ca10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801ca12:	4b17      	ldr	r3, [pc, #92]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca14:	2200      	movs	r2, #0
 801ca16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801ca18:	4b15      	ldr	r3, [pc, #84]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801ca1e:	4b14      	ldr	r3, [pc, #80]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca20:	2200      	movs	r2, #0
 801ca22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801ca24:	4b12      	ldr	r3, [pc, #72]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca26:	2200      	movs	r2, #0
 801ca28:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801ca2a:	4b11      	ldr	r3, [pc, #68]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801ca30:	480f      	ldr	r0, [pc, #60]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca32:	f7e6 ff15 	bl	8003860 <HAL_PCD_Init>
 801ca36:	4603      	mov	r3, r0
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d001      	beq.n	801ca40 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 801ca3c:	f7e3 ff18 	bl	8000870 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801ca40:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ca44:	480a      	ldr	r0, [pc, #40]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca46:	f7e8 f96c 	bl	8004d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801ca4a:	2280      	movs	r2, #128	; 0x80
 801ca4c:	2100      	movs	r1, #0
 801ca4e:	4808      	ldr	r0, [pc, #32]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca50:	f7e8 f920 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801ca54:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ca58:	2101      	movs	r1, #1
 801ca5a:	4805      	ldr	r0, [pc, #20]	; (801ca70 <USBD_LL_Init+0x124>)
 801ca5c:	f7e8 f91a 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ca60:	2300      	movs	r3, #0
}
 801ca62:	4618      	mov	r0, r3
 801ca64:	3708      	adds	r7, #8
 801ca66:	46bd      	mov	sp, r7
 801ca68:	bd80      	pop	{r7, pc}
 801ca6a:	bf00      	nop
 801ca6c:	20009fc0 	.word	0x20009fc0
 801ca70:	2000a4a4 	.word	0x2000a4a4
 801ca74:	40040000 	.word	0x40040000

0801ca78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b084      	sub	sp, #16
 801ca7c:	af00      	add	r7, sp, #0
 801ca7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca80:	2300      	movs	r3, #0
 801ca82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca84:	2300      	movs	r3, #0
 801ca86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7e6 fff5 	bl	8003a7e <HAL_PCD_Start>
 801ca94:	4603      	mov	r3, r0
 801ca96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca98:	7bfb      	ldrb	r3, [r7, #15]
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f000 f962 	bl	801cd64 <USBD_Get_USB_Status>
 801caa0:	4603      	mov	r3, r0
 801caa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801caa4:	7bbb      	ldrb	r3, [r7, #14]
}
 801caa6:	4618      	mov	r0, r3
 801caa8:	3710      	adds	r7, #16
 801caaa:	46bd      	mov	sp, r7
 801caac:	bd80      	pop	{r7, pc}

0801caae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801caae:	b580      	push	{r7, lr}
 801cab0:	b084      	sub	sp, #16
 801cab2:	af00      	add	r7, sp, #0
 801cab4:	6078      	str	r0, [r7, #4]
 801cab6:	4608      	mov	r0, r1
 801cab8:	4611      	mov	r1, r2
 801caba:	461a      	mov	r2, r3
 801cabc:	4603      	mov	r3, r0
 801cabe:	70fb      	strb	r3, [r7, #3]
 801cac0:	460b      	mov	r3, r1
 801cac2:	70bb      	strb	r3, [r7, #2]
 801cac4:	4613      	mov	r3, r2
 801cac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cac8:	2300      	movs	r3, #0
 801caca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cacc:	2300      	movs	r3, #0
 801cace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cad6:	78bb      	ldrb	r3, [r7, #2]
 801cad8:	883a      	ldrh	r2, [r7, #0]
 801cada:	78f9      	ldrb	r1, [r7, #3]
 801cadc:	f7e7 fcc9 	bl	8004472 <HAL_PCD_EP_Open>
 801cae0:	4603      	mov	r3, r0
 801cae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cae4:	7bfb      	ldrb	r3, [r7, #15]
 801cae6:	4618      	mov	r0, r3
 801cae8:	f000 f93c 	bl	801cd64 <USBD_Get_USB_Status>
 801caec:	4603      	mov	r3, r0
 801caee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801caf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801caf2:	4618      	mov	r0, r3
 801caf4:	3710      	adds	r7, #16
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}

0801cafa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cafa:	b580      	push	{r7, lr}
 801cafc:	b084      	sub	sp, #16
 801cafe:	af00      	add	r7, sp, #0
 801cb00:	6078      	str	r0, [r7, #4]
 801cb02:	460b      	mov	r3, r1
 801cb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb06:	2300      	movs	r3, #0
 801cb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb14:	78fa      	ldrb	r2, [r7, #3]
 801cb16:	4611      	mov	r1, r2
 801cb18:	4618      	mov	r0, r3
 801cb1a:	f7e7 fd12 	bl	8004542 <HAL_PCD_EP_Close>
 801cb1e:	4603      	mov	r3, r0
 801cb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb22:	7bfb      	ldrb	r3, [r7, #15]
 801cb24:	4618      	mov	r0, r3
 801cb26:	f000 f91d 	bl	801cd64 <USBD_Get_USB_Status>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801cb30:	4618      	mov	r0, r3
 801cb32:	3710      	adds	r7, #16
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bd80      	pop	{r7, pc}

0801cb38 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b084      	sub	sp, #16
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
 801cb40:	460b      	mov	r3, r1
 801cb42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb44:	2300      	movs	r3, #0
 801cb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb48:	2300      	movs	r3, #0
 801cb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb52:	78fa      	ldrb	r2, [r7, #3]
 801cb54:	4611      	mov	r1, r2
 801cb56:	4618      	mov	r0, r3
 801cb58:	f7e7 feb4 	bl	80048c4 <HAL_PCD_EP_Flush>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb60:	7bfb      	ldrb	r3, [r7, #15]
 801cb62:	4618      	mov	r0, r3
 801cb64:	f000 f8fe 	bl	801cd64 <USBD_Get_USB_Status>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801cb6e:	4618      	mov	r0, r3
 801cb70:	3710      	adds	r7, #16
 801cb72:	46bd      	mov	sp, r7
 801cb74:	bd80      	pop	{r7, pc}

0801cb76 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb76:	b580      	push	{r7, lr}
 801cb78:	b084      	sub	sp, #16
 801cb7a:	af00      	add	r7, sp, #0
 801cb7c:	6078      	str	r0, [r7, #4]
 801cb7e:	460b      	mov	r3, r1
 801cb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb82:	2300      	movs	r3, #0
 801cb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb86:	2300      	movs	r3, #0
 801cb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb90:	78fa      	ldrb	r2, [r7, #3]
 801cb92:	4611      	mov	r1, r2
 801cb94:	4618      	mov	r0, r3
 801cb96:	f7e7 fdab 	bl	80046f0 <HAL_PCD_EP_SetStall>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb9e:	7bfb      	ldrb	r3, [r7, #15]
 801cba0:	4618      	mov	r0, r3
 801cba2:	f000 f8df 	bl	801cd64 <USBD_Get_USB_Status>
 801cba6:	4603      	mov	r3, r0
 801cba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801cbac:	4618      	mov	r0, r3
 801cbae:	3710      	adds	r7, #16
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bd80      	pop	{r7, pc}

0801cbb4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b084      	sub	sp, #16
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cbce:	78fa      	ldrb	r2, [r7, #3]
 801cbd0:	4611      	mov	r1, r2
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7e7 fdef 	bl	80047b6 <HAL_PCD_EP_ClrStall>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbdc:	7bfb      	ldrb	r3, [r7, #15]
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f000 f8c0 	bl	801cd64 <USBD_Get_USB_Status>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 801cbea:	4618      	mov	r0, r3
 801cbec:	3710      	adds	r7, #16
 801cbee:	46bd      	mov	sp, r7
 801cbf0:	bd80      	pop	{r7, pc}

0801cbf2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cbf2:	b480      	push	{r7}
 801cbf4:	b085      	sub	sp, #20
 801cbf6:	af00      	add	r7, sp, #0
 801cbf8:	6078      	str	r0, [r7, #4]
 801cbfa:	460b      	mov	r3, r1
 801cbfc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cc04:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cc06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	da0b      	bge.n	801cc26 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cc0e:	78fb      	ldrb	r3, [r7, #3]
 801cc10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cc14:	68f9      	ldr	r1, [r7, #12]
 801cc16:	4613      	mov	r3, r2
 801cc18:	00db      	lsls	r3, r3, #3
 801cc1a:	4413      	add	r3, r2
 801cc1c:	009b      	lsls	r3, r3, #2
 801cc1e:	440b      	add	r3, r1
 801cc20:	3316      	adds	r3, #22
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	e00b      	b.n	801cc3e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cc26:	78fb      	ldrb	r3, [r7, #3]
 801cc28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cc2c:	68f9      	ldr	r1, [r7, #12]
 801cc2e:	4613      	mov	r3, r2
 801cc30:	00db      	lsls	r3, r3, #3
 801cc32:	4413      	add	r3, r2
 801cc34:	009b      	lsls	r3, r3, #2
 801cc36:	440b      	add	r3, r1
 801cc38:	f203 2356 	addw	r3, r3, #598	; 0x256
 801cc3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cc3e:	4618      	mov	r0, r3
 801cc40:	3714      	adds	r7, #20
 801cc42:	46bd      	mov	sp, r7
 801cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc48:	4770      	bx	lr

0801cc4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cc4a:	b580      	push	{r7, lr}
 801cc4c:	b084      	sub	sp, #16
 801cc4e:	af00      	add	r7, sp, #0
 801cc50:	6078      	str	r0, [r7, #4]
 801cc52:	460b      	mov	r3, r1
 801cc54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc56:	2300      	movs	r3, #0
 801cc58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cc64:	78fa      	ldrb	r2, [r7, #3]
 801cc66:	4611      	mov	r1, r2
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7e7 fbde 	bl	800442a <HAL_PCD_SetAddress>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc72:	7bfb      	ldrb	r3, [r7, #15]
 801cc74:	4618      	mov	r0, r3
 801cc76:	f000 f875 	bl	801cd64 <USBD_Get_USB_Status>
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cc7e:	7bbb      	ldrb	r3, [r7, #14]
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3710      	adds	r7, #16
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}

0801cc88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b086      	sub	sp, #24
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	60f8      	str	r0, [r7, #12]
 801cc90:	607a      	str	r2, [r7, #4]
 801cc92:	603b      	str	r3, [r7, #0]
 801cc94:	460b      	mov	r3, r1
 801cc96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cca6:	7af9      	ldrb	r1, [r7, #11]
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	687a      	ldr	r2, [r7, #4]
 801ccac:	f7e7 fce6 	bl	800467c <HAL_PCD_EP_Transmit>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ccb4:	7dfb      	ldrb	r3, [r7, #23]
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	f000 f854 	bl	801cd64 <USBD_Get_USB_Status>
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ccc0:	7dbb      	ldrb	r3, [r7, #22]
}
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	3718      	adds	r7, #24
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	bd80      	pop	{r7, pc}

0801ccca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ccca:	b580      	push	{r7, lr}
 801cccc:	b086      	sub	sp, #24
 801ccce:	af00      	add	r7, sp, #0
 801ccd0:	60f8      	str	r0, [r7, #12]
 801ccd2:	607a      	str	r2, [r7, #4]
 801ccd4:	603b      	str	r3, [r7, #0]
 801ccd6:	460b      	mov	r3, r1
 801ccd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ccde:	2300      	movs	r3, #0
 801cce0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cce8:	7af9      	ldrb	r1, [r7, #11]
 801ccea:	683b      	ldr	r3, [r7, #0]
 801ccec:	687a      	ldr	r2, [r7, #4]
 801ccee:	f7e7 fc72 	bl	80045d6 <HAL_PCD_EP_Receive>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ccf6:	7dfb      	ldrb	r3, [r7, #23]
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f000 f833 	bl	801cd64 <USBD_Get_USB_Status>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cd02:	7dbb      	ldrb	r3, [r7, #22]
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3718      	adds	r7, #24
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}

0801cd0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b082      	sub	sp, #8
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
 801cd14:	460b      	mov	r3, r1
 801cd16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cd1e:	78fa      	ldrb	r2, [r7, #3]
 801cd20:	4611      	mov	r1, r2
 801cd22:	4618      	mov	r0, r3
 801cd24:	f7e7 fc92 	bl	800464c <HAL_PCD_EP_GetRxCount>
 801cd28:	4603      	mov	r3, r0
}
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	3708      	adds	r7, #8
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	bd80      	pop	{r7, pc}
	...

0801cd34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cd34:	b480      	push	{r7}
 801cd36:	b083      	sub	sp, #12
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cd3c:	4b03      	ldr	r3, [pc, #12]	; (801cd4c <USBD_static_malloc+0x18>)
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	370c      	adds	r7, #12
 801cd42:	46bd      	mov	sp, r7
 801cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd48:	4770      	bx	lr
 801cd4a:	bf00      	nop
 801cd4c:	2000a988 	.word	0x2000a988

0801cd50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cd50:	b480      	push	{r7}
 801cd52:	b083      	sub	sp, #12
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]

}
 801cd58:	bf00      	nop
 801cd5a:	370c      	adds	r7, #12
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd62:	4770      	bx	lr

0801cd64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cd64:	b480      	push	{r7}
 801cd66:	b085      	sub	sp, #20
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cd72:	79fb      	ldrb	r3, [r7, #7]
 801cd74:	2b03      	cmp	r3, #3
 801cd76:	d817      	bhi.n	801cda8 <USBD_Get_USB_Status+0x44>
 801cd78:	a201      	add	r2, pc, #4	; (adr r2, 801cd80 <USBD_Get_USB_Status+0x1c>)
 801cd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd7e:	bf00      	nop
 801cd80:	0801cd91 	.word	0x0801cd91
 801cd84:	0801cd97 	.word	0x0801cd97
 801cd88:	0801cd9d 	.word	0x0801cd9d
 801cd8c:	0801cda3 	.word	0x0801cda3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cd90:	2300      	movs	r3, #0
 801cd92:	73fb      	strb	r3, [r7, #15]
    break;
 801cd94:	e00b      	b.n	801cdae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cd96:	2303      	movs	r3, #3
 801cd98:	73fb      	strb	r3, [r7, #15]
    break;
 801cd9a:	e008      	b.n	801cdae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	73fb      	strb	r3, [r7, #15]
    break;
 801cda0:	e005      	b.n	801cdae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cda2:	2303      	movs	r3, #3
 801cda4:	73fb      	strb	r3, [r7, #15]
    break;
 801cda6:	e002      	b.n	801cdae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801cda8:	2303      	movs	r3, #3
 801cdaa:	73fb      	strb	r3, [r7, #15]
    break;
 801cdac:	bf00      	nop
  }
  return usb_status;
 801cdae:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	3714      	adds	r7, #20
 801cdb4:	46bd      	mov	sp, r7
 801cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdba:	4770      	bx	lr

0801cdbc <atoi>:
 801cdbc:	220a      	movs	r2, #10
 801cdbe:	2100      	movs	r1, #0
 801cdc0:	f000 b8c0 	b.w	801cf44 <strtol>

0801cdc4 <rand>:
 801cdc4:	4b16      	ldr	r3, [pc, #88]	; (801ce20 <rand+0x5c>)
 801cdc6:	b510      	push	{r4, lr}
 801cdc8:	681c      	ldr	r4, [r3, #0]
 801cdca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cdcc:	b9b3      	cbnz	r3, 801cdfc <rand+0x38>
 801cdce:	2018      	movs	r0, #24
 801cdd0:	f000 faf0 	bl	801d3b4 <malloc>
 801cdd4:	4602      	mov	r2, r0
 801cdd6:	6320      	str	r0, [r4, #48]	; 0x30
 801cdd8:	b920      	cbnz	r0, 801cde4 <rand+0x20>
 801cdda:	4b12      	ldr	r3, [pc, #72]	; (801ce24 <rand+0x60>)
 801cddc:	4812      	ldr	r0, [pc, #72]	; (801ce28 <rand+0x64>)
 801cdde:	2152      	movs	r1, #82	; 0x52
 801cde0:	f000 fa7e 	bl	801d2e0 <__assert_func>
 801cde4:	4911      	ldr	r1, [pc, #68]	; (801ce2c <rand+0x68>)
 801cde6:	4b12      	ldr	r3, [pc, #72]	; (801ce30 <rand+0x6c>)
 801cde8:	e9c0 1300 	strd	r1, r3, [r0]
 801cdec:	4b11      	ldr	r3, [pc, #68]	; (801ce34 <rand+0x70>)
 801cdee:	6083      	str	r3, [r0, #8]
 801cdf0:	230b      	movs	r3, #11
 801cdf2:	8183      	strh	r3, [r0, #12]
 801cdf4:	2100      	movs	r1, #0
 801cdf6:	2001      	movs	r0, #1
 801cdf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cdfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cdfe:	480e      	ldr	r0, [pc, #56]	; (801ce38 <rand+0x74>)
 801ce00:	690b      	ldr	r3, [r1, #16]
 801ce02:	694c      	ldr	r4, [r1, #20]
 801ce04:	4a0d      	ldr	r2, [pc, #52]	; (801ce3c <rand+0x78>)
 801ce06:	4358      	muls	r0, r3
 801ce08:	fb02 0004 	mla	r0, r2, r4, r0
 801ce0c:	fba3 3202 	umull	r3, r2, r3, r2
 801ce10:	3301      	adds	r3, #1
 801ce12:	eb40 0002 	adc.w	r0, r0, r2
 801ce16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ce1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ce1e:	bd10      	pop	{r4, pc}
 801ce20:	20000248 	.word	0x20000248
 801ce24:	08020f98 	.word	0x08020f98
 801ce28:	08020faf 	.word	0x08020faf
 801ce2c:	abcd330e 	.word	0xabcd330e
 801ce30:	e66d1234 	.word	0xe66d1234
 801ce34:	0005deec 	.word	0x0005deec
 801ce38:	5851f42d 	.word	0x5851f42d
 801ce3c:	4c957f2d 	.word	0x4c957f2d

0801ce40 <_strtol_l.constprop.0>:
 801ce40:	2b01      	cmp	r3, #1
 801ce42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce46:	d001      	beq.n	801ce4c <_strtol_l.constprop.0+0xc>
 801ce48:	2b24      	cmp	r3, #36	; 0x24
 801ce4a:	d906      	bls.n	801ce5a <_strtol_l.constprop.0+0x1a>
 801ce4c:	f000 fa0c 	bl	801d268 <__errno>
 801ce50:	2316      	movs	r3, #22
 801ce52:	6003      	str	r3, [r0, #0]
 801ce54:	2000      	movs	r0, #0
 801ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801cf40 <_strtol_l.constprop.0+0x100>
 801ce5e:	460d      	mov	r5, r1
 801ce60:	462e      	mov	r6, r5
 801ce62:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce66:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801ce6a:	f017 0708 	ands.w	r7, r7, #8
 801ce6e:	d1f7      	bne.n	801ce60 <_strtol_l.constprop.0+0x20>
 801ce70:	2c2d      	cmp	r4, #45	; 0x2d
 801ce72:	d132      	bne.n	801ceda <_strtol_l.constprop.0+0x9a>
 801ce74:	782c      	ldrb	r4, [r5, #0]
 801ce76:	2701      	movs	r7, #1
 801ce78:	1cb5      	adds	r5, r6, #2
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d05b      	beq.n	801cf36 <_strtol_l.constprop.0+0xf6>
 801ce7e:	2b10      	cmp	r3, #16
 801ce80:	d109      	bne.n	801ce96 <_strtol_l.constprop.0+0x56>
 801ce82:	2c30      	cmp	r4, #48	; 0x30
 801ce84:	d107      	bne.n	801ce96 <_strtol_l.constprop.0+0x56>
 801ce86:	782c      	ldrb	r4, [r5, #0]
 801ce88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ce8c:	2c58      	cmp	r4, #88	; 0x58
 801ce8e:	d14d      	bne.n	801cf2c <_strtol_l.constprop.0+0xec>
 801ce90:	786c      	ldrb	r4, [r5, #1]
 801ce92:	2310      	movs	r3, #16
 801ce94:	3502      	adds	r5, #2
 801ce96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ce9a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce9e:	f04f 0e00 	mov.w	lr, #0
 801cea2:	fbb8 f9f3 	udiv	r9, r8, r3
 801cea6:	4676      	mov	r6, lr
 801cea8:	fb03 8a19 	mls	sl, r3, r9, r8
 801ceac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ceb0:	f1bc 0f09 	cmp.w	ip, #9
 801ceb4:	d816      	bhi.n	801cee4 <_strtol_l.constprop.0+0xa4>
 801ceb6:	4664      	mov	r4, ip
 801ceb8:	42a3      	cmp	r3, r4
 801ceba:	dd24      	ble.n	801cf06 <_strtol_l.constprop.0+0xc6>
 801cebc:	f1be 3fff 	cmp.w	lr, #4294967295
 801cec0:	d008      	beq.n	801ced4 <_strtol_l.constprop.0+0x94>
 801cec2:	45b1      	cmp	r9, r6
 801cec4:	d31c      	bcc.n	801cf00 <_strtol_l.constprop.0+0xc0>
 801cec6:	d101      	bne.n	801cecc <_strtol_l.constprop.0+0x8c>
 801cec8:	45a2      	cmp	sl, r4
 801ceca:	db19      	blt.n	801cf00 <_strtol_l.constprop.0+0xc0>
 801cecc:	fb06 4603 	mla	r6, r6, r3, r4
 801ced0:	f04f 0e01 	mov.w	lr, #1
 801ced4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ced8:	e7e8      	b.n	801ceac <_strtol_l.constprop.0+0x6c>
 801ceda:	2c2b      	cmp	r4, #43	; 0x2b
 801cedc:	bf04      	itt	eq
 801cede:	782c      	ldrbeq	r4, [r5, #0]
 801cee0:	1cb5      	addeq	r5, r6, #2
 801cee2:	e7ca      	b.n	801ce7a <_strtol_l.constprop.0+0x3a>
 801cee4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801cee8:	f1bc 0f19 	cmp.w	ip, #25
 801ceec:	d801      	bhi.n	801cef2 <_strtol_l.constprop.0+0xb2>
 801ceee:	3c37      	subs	r4, #55	; 0x37
 801cef0:	e7e2      	b.n	801ceb8 <_strtol_l.constprop.0+0x78>
 801cef2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801cef6:	f1bc 0f19 	cmp.w	ip, #25
 801cefa:	d804      	bhi.n	801cf06 <_strtol_l.constprop.0+0xc6>
 801cefc:	3c57      	subs	r4, #87	; 0x57
 801cefe:	e7db      	b.n	801ceb8 <_strtol_l.constprop.0+0x78>
 801cf00:	f04f 3eff 	mov.w	lr, #4294967295
 801cf04:	e7e6      	b.n	801ced4 <_strtol_l.constprop.0+0x94>
 801cf06:	f1be 3fff 	cmp.w	lr, #4294967295
 801cf0a:	d105      	bne.n	801cf18 <_strtol_l.constprop.0+0xd8>
 801cf0c:	2322      	movs	r3, #34	; 0x22
 801cf0e:	6003      	str	r3, [r0, #0]
 801cf10:	4646      	mov	r6, r8
 801cf12:	b942      	cbnz	r2, 801cf26 <_strtol_l.constprop.0+0xe6>
 801cf14:	4630      	mov	r0, r6
 801cf16:	e79e      	b.n	801ce56 <_strtol_l.constprop.0+0x16>
 801cf18:	b107      	cbz	r7, 801cf1c <_strtol_l.constprop.0+0xdc>
 801cf1a:	4276      	negs	r6, r6
 801cf1c:	2a00      	cmp	r2, #0
 801cf1e:	d0f9      	beq.n	801cf14 <_strtol_l.constprop.0+0xd4>
 801cf20:	f1be 0f00 	cmp.w	lr, #0
 801cf24:	d000      	beq.n	801cf28 <_strtol_l.constprop.0+0xe8>
 801cf26:	1e69      	subs	r1, r5, #1
 801cf28:	6011      	str	r1, [r2, #0]
 801cf2a:	e7f3      	b.n	801cf14 <_strtol_l.constprop.0+0xd4>
 801cf2c:	2430      	movs	r4, #48	; 0x30
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d1b1      	bne.n	801ce96 <_strtol_l.constprop.0+0x56>
 801cf32:	2308      	movs	r3, #8
 801cf34:	e7af      	b.n	801ce96 <_strtol_l.constprop.0+0x56>
 801cf36:	2c30      	cmp	r4, #48	; 0x30
 801cf38:	d0a5      	beq.n	801ce86 <_strtol_l.constprop.0+0x46>
 801cf3a:	230a      	movs	r3, #10
 801cf3c:	e7ab      	b.n	801ce96 <_strtol_l.constprop.0+0x56>
 801cf3e:	bf00      	nop
 801cf40:	08021008 	.word	0x08021008

0801cf44 <strtol>:
 801cf44:	4613      	mov	r3, r2
 801cf46:	460a      	mov	r2, r1
 801cf48:	4601      	mov	r1, r0
 801cf4a:	4802      	ldr	r0, [pc, #8]	; (801cf54 <strtol+0x10>)
 801cf4c:	6800      	ldr	r0, [r0, #0]
 801cf4e:	f7ff bf77 	b.w	801ce40 <_strtol_l.constprop.0>
 801cf52:	bf00      	nop
 801cf54:	20000248 	.word	0x20000248

0801cf58 <std>:
 801cf58:	2300      	movs	r3, #0
 801cf5a:	b510      	push	{r4, lr}
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	e9c0 3300 	strd	r3, r3, [r0]
 801cf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf66:	6083      	str	r3, [r0, #8]
 801cf68:	8181      	strh	r1, [r0, #12]
 801cf6a:	6643      	str	r3, [r0, #100]	; 0x64
 801cf6c:	81c2      	strh	r2, [r0, #14]
 801cf6e:	6183      	str	r3, [r0, #24]
 801cf70:	4619      	mov	r1, r3
 801cf72:	2208      	movs	r2, #8
 801cf74:	305c      	adds	r0, #92	; 0x5c
 801cf76:	f000 f916 	bl	801d1a6 <memset>
 801cf7a:	4b0d      	ldr	r3, [pc, #52]	; (801cfb0 <std+0x58>)
 801cf7c:	6263      	str	r3, [r4, #36]	; 0x24
 801cf7e:	4b0d      	ldr	r3, [pc, #52]	; (801cfb4 <std+0x5c>)
 801cf80:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf82:	4b0d      	ldr	r3, [pc, #52]	; (801cfb8 <std+0x60>)
 801cf84:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf86:	4b0d      	ldr	r3, [pc, #52]	; (801cfbc <std+0x64>)
 801cf88:	6323      	str	r3, [r4, #48]	; 0x30
 801cf8a:	4b0d      	ldr	r3, [pc, #52]	; (801cfc0 <std+0x68>)
 801cf8c:	6224      	str	r4, [r4, #32]
 801cf8e:	429c      	cmp	r4, r3
 801cf90:	d006      	beq.n	801cfa0 <std+0x48>
 801cf92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cf96:	4294      	cmp	r4, r2
 801cf98:	d002      	beq.n	801cfa0 <std+0x48>
 801cf9a:	33d0      	adds	r3, #208	; 0xd0
 801cf9c:	429c      	cmp	r4, r3
 801cf9e:	d105      	bne.n	801cfac <std+0x54>
 801cfa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfa8:	f000 b988 	b.w	801d2bc <__retarget_lock_init_recursive>
 801cfac:	bd10      	pop	{r4, pc}
 801cfae:	bf00      	nop
 801cfb0:	0801d101 	.word	0x0801d101
 801cfb4:	0801d123 	.word	0x0801d123
 801cfb8:	0801d15b 	.word	0x0801d15b
 801cfbc:	0801d17f 	.word	0x0801d17f
 801cfc0:	2000aba8 	.word	0x2000aba8

0801cfc4 <stdio_exit_handler>:
 801cfc4:	4a02      	ldr	r2, [pc, #8]	; (801cfd0 <stdio_exit_handler+0xc>)
 801cfc6:	4903      	ldr	r1, [pc, #12]	; (801cfd4 <stdio_exit_handler+0x10>)
 801cfc8:	4803      	ldr	r0, [pc, #12]	; (801cfd8 <stdio_exit_handler+0x14>)
 801cfca:	f000 b869 	b.w	801d0a0 <_fwalk_sglue>
 801cfce:	bf00      	nop
 801cfd0:	200001f0 	.word	0x200001f0
 801cfd4:	0801dbd1 	.word	0x0801dbd1
 801cfd8:	200001fc 	.word	0x200001fc

0801cfdc <cleanup_stdio>:
 801cfdc:	6841      	ldr	r1, [r0, #4]
 801cfde:	4b0c      	ldr	r3, [pc, #48]	; (801d010 <cleanup_stdio+0x34>)
 801cfe0:	4299      	cmp	r1, r3
 801cfe2:	b510      	push	{r4, lr}
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	d001      	beq.n	801cfec <cleanup_stdio+0x10>
 801cfe8:	f000 fdf2 	bl	801dbd0 <_fflush_r>
 801cfec:	68a1      	ldr	r1, [r4, #8]
 801cfee:	4b09      	ldr	r3, [pc, #36]	; (801d014 <cleanup_stdio+0x38>)
 801cff0:	4299      	cmp	r1, r3
 801cff2:	d002      	beq.n	801cffa <cleanup_stdio+0x1e>
 801cff4:	4620      	mov	r0, r4
 801cff6:	f000 fdeb 	bl	801dbd0 <_fflush_r>
 801cffa:	68e1      	ldr	r1, [r4, #12]
 801cffc:	4b06      	ldr	r3, [pc, #24]	; (801d018 <cleanup_stdio+0x3c>)
 801cffe:	4299      	cmp	r1, r3
 801d000:	d004      	beq.n	801d00c <cleanup_stdio+0x30>
 801d002:	4620      	mov	r0, r4
 801d004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d008:	f000 bde2 	b.w	801dbd0 <_fflush_r>
 801d00c:	bd10      	pop	{r4, pc}
 801d00e:	bf00      	nop
 801d010:	2000aba8 	.word	0x2000aba8
 801d014:	2000ac10 	.word	0x2000ac10
 801d018:	2000ac78 	.word	0x2000ac78

0801d01c <global_stdio_init.part.0>:
 801d01c:	b510      	push	{r4, lr}
 801d01e:	4b0b      	ldr	r3, [pc, #44]	; (801d04c <global_stdio_init.part.0+0x30>)
 801d020:	4c0b      	ldr	r4, [pc, #44]	; (801d050 <global_stdio_init.part.0+0x34>)
 801d022:	4a0c      	ldr	r2, [pc, #48]	; (801d054 <global_stdio_init.part.0+0x38>)
 801d024:	601a      	str	r2, [r3, #0]
 801d026:	4620      	mov	r0, r4
 801d028:	2200      	movs	r2, #0
 801d02a:	2104      	movs	r1, #4
 801d02c:	f7ff ff94 	bl	801cf58 <std>
 801d030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d034:	2201      	movs	r2, #1
 801d036:	2109      	movs	r1, #9
 801d038:	f7ff ff8e 	bl	801cf58 <std>
 801d03c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d040:	2202      	movs	r2, #2
 801d042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d046:	2112      	movs	r1, #18
 801d048:	f7ff bf86 	b.w	801cf58 <std>
 801d04c:	2000ace0 	.word	0x2000ace0
 801d050:	2000aba8 	.word	0x2000aba8
 801d054:	0801cfc5 	.word	0x0801cfc5

0801d058 <__sfp_lock_acquire>:
 801d058:	4801      	ldr	r0, [pc, #4]	; (801d060 <__sfp_lock_acquire+0x8>)
 801d05a:	f000 b930 	b.w	801d2be <__retarget_lock_acquire_recursive>
 801d05e:	bf00      	nop
 801d060:	2000ace9 	.word	0x2000ace9

0801d064 <__sfp_lock_release>:
 801d064:	4801      	ldr	r0, [pc, #4]	; (801d06c <__sfp_lock_release+0x8>)
 801d066:	f000 b92b 	b.w	801d2c0 <__retarget_lock_release_recursive>
 801d06a:	bf00      	nop
 801d06c:	2000ace9 	.word	0x2000ace9

0801d070 <__sinit>:
 801d070:	b510      	push	{r4, lr}
 801d072:	4604      	mov	r4, r0
 801d074:	f7ff fff0 	bl	801d058 <__sfp_lock_acquire>
 801d078:	6a23      	ldr	r3, [r4, #32]
 801d07a:	b11b      	cbz	r3, 801d084 <__sinit+0x14>
 801d07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d080:	f7ff bff0 	b.w	801d064 <__sfp_lock_release>
 801d084:	4b04      	ldr	r3, [pc, #16]	; (801d098 <__sinit+0x28>)
 801d086:	6223      	str	r3, [r4, #32]
 801d088:	4b04      	ldr	r3, [pc, #16]	; (801d09c <__sinit+0x2c>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d1f5      	bne.n	801d07c <__sinit+0xc>
 801d090:	f7ff ffc4 	bl	801d01c <global_stdio_init.part.0>
 801d094:	e7f2      	b.n	801d07c <__sinit+0xc>
 801d096:	bf00      	nop
 801d098:	0801cfdd 	.word	0x0801cfdd
 801d09c:	2000ace0 	.word	0x2000ace0

0801d0a0 <_fwalk_sglue>:
 801d0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0a4:	4607      	mov	r7, r0
 801d0a6:	4688      	mov	r8, r1
 801d0a8:	4614      	mov	r4, r2
 801d0aa:	2600      	movs	r6, #0
 801d0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d0b0:	f1b9 0901 	subs.w	r9, r9, #1
 801d0b4:	d505      	bpl.n	801d0c2 <_fwalk_sglue+0x22>
 801d0b6:	6824      	ldr	r4, [r4, #0]
 801d0b8:	2c00      	cmp	r4, #0
 801d0ba:	d1f7      	bne.n	801d0ac <_fwalk_sglue+0xc>
 801d0bc:	4630      	mov	r0, r6
 801d0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0c2:	89ab      	ldrh	r3, [r5, #12]
 801d0c4:	2b01      	cmp	r3, #1
 801d0c6:	d907      	bls.n	801d0d8 <_fwalk_sglue+0x38>
 801d0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d0cc:	3301      	adds	r3, #1
 801d0ce:	d003      	beq.n	801d0d8 <_fwalk_sglue+0x38>
 801d0d0:	4629      	mov	r1, r5
 801d0d2:	4638      	mov	r0, r7
 801d0d4:	47c0      	blx	r8
 801d0d6:	4306      	orrs	r6, r0
 801d0d8:	3568      	adds	r5, #104	; 0x68
 801d0da:	e7e9      	b.n	801d0b0 <_fwalk_sglue+0x10>

0801d0dc <iprintf>:
 801d0dc:	b40f      	push	{r0, r1, r2, r3}
 801d0de:	b507      	push	{r0, r1, r2, lr}
 801d0e0:	4906      	ldr	r1, [pc, #24]	; (801d0fc <iprintf+0x20>)
 801d0e2:	ab04      	add	r3, sp, #16
 801d0e4:	6808      	ldr	r0, [r1, #0]
 801d0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0ea:	6881      	ldr	r1, [r0, #8]
 801d0ec:	9301      	str	r3, [sp, #4]
 801d0ee:	f000 fa3f 	bl	801d570 <_vfiprintf_r>
 801d0f2:	b003      	add	sp, #12
 801d0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0f8:	b004      	add	sp, #16
 801d0fa:	4770      	bx	lr
 801d0fc:	20000248 	.word	0x20000248

0801d100 <__sread>:
 801d100:	b510      	push	{r4, lr}
 801d102:	460c      	mov	r4, r1
 801d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d108:	f000 f88a 	bl	801d220 <_read_r>
 801d10c:	2800      	cmp	r0, #0
 801d10e:	bfab      	itete	ge
 801d110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d112:	89a3      	ldrhlt	r3, [r4, #12]
 801d114:	181b      	addge	r3, r3, r0
 801d116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d11a:	bfac      	ite	ge
 801d11c:	6563      	strge	r3, [r4, #84]	; 0x54
 801d11e:	81a3      	strhlt	r3, [r4, #12]
 801d120:	bd10      	pop	{r4, pc}

0801d122 <__swrite>:
 801d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d126:	461f      	mov	r7, r3
 801d128:	898b      	ldrh	r3, [r1, #12]
 801d12a:	05db      	lsls	r3, r3, #23
 801d12c:	4605      	mov	r5, r0
 801d12e:	460c      	mov	r4, r1
 801d130:	4616      	mov	r6, r2
 801d132:	d505      	bpl.n	801d140 <__swrite+0x1e>
 801d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d138:	2302      	movs	r3, #2
 801d13a:	2200      	movs	r2, #0
 801d13c:	f000 f85e 	bl	801d1fc <_lseek_r>
 801d140:	89a3      	ldrh	r3, [r4, #12]
 801d142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d14a:	81a3      	strh	r3, [r4, #12]
 801d14c:	4632      	mov	r2, r6
 801d14e:	463b      	mov	r3, r7
 801d150:	4628      	mov	r0, r5
 801d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d156:	f000 b875 	b.w	801d244 <_write_r>

0801d15a <__sseek>:
 801d15a:	b510      	push	{r4, lr}
 801d15c:	460c      	mov	r4, r1
 801d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d162:	f000 f84b 	bl	801d1fc <_lseek_r>
 801d166:	1c43      	adds	r3, r0, #1
 801d168:	89a3      	ldrh	r3, [r4, #12]
 801d16a:	bf15      	itete	ne
 801d16c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d176:	81a3      	strheq	r3, [r4, #12]
 801d178:	bf18      	it	ne
 801d17a:	81a3      	strhne	r3, [r4, #12]
 801d17c:	bd10      	pop	{r4, pc}

0801d17e <__sclose>:
 801d17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d182:	f000 b82b 	b.w	801d1dc <_close_r>

0801d186 <memcmp>:
 801d186:	b510      	push	{r4, lr}
 801d188:	3901      	subs	r1, #1
 801d18a:	4402      	add	r2, r0
 801d18c:	4290      	cmp	r0, r2
 801d18e:	d101      	bne.n	801d194 <memcmp+0xe>
 801d190:	2000      	movs	r0, #0
 801d192:	e005      	b.n	801d1a0 <memcmp+0x1a>
 801d194:	7803      	ldrb	r3, [r0, #0]
 801d196:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d19a:	42a3      	cmp	r3, r4
 801d19c:	d001      	beq.n	801d1a2 <memcmp+0x1c>
 801d19e:	1b18      	subs	r0, r3, r4
 801d1a0:	bd10      	pop	{r4, pc}
 801d1a2:	3001      	adds	r0, #1
 801d1a4:	e7f2      	b.n	801d18c <memcmp+0x6>

0801d1a6 <memset>:
 801d1a6:	4402      	add	r2, r0
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	4293      	cmp	r3, r2
 801d1ac:	d100      	bne.n	801d1b0 <memset+0xa>
 801d1ae:	4770      	bx	lr
 801d1b0:	f803 1b01 	strb.w	r1, [r3], #1
 801d1b4:	e7f9      	b.n	801d1aa <memset+0x4>

0801d1b6 <strncpy>:
 801d1b6:	b510      	push	{r4, lr}
 801d1b8:	3901      	subs	r1, #1
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	b132      	cbz	r2, 801d1cc <strncpy+0x16>
 801d1be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d1c2:	f803 4b01 	strb.w	r4, [r3], #1
 801d1c6:	3a01      	subs	r2, #1
 801d1c8:	2c00      	cmp	r4, #0
 801d1ca:	d1f7      	bne.n	801d1bc <strncpy+0x6>
 801d1cc:	441a      	add	r2, r3
 801d1ce:	2100      	movs	r1, #0
 801d1d0:	4293      	cmp	r3, r2
 801d1d2:	d100      	bne.n	801d1d6 <strncpy+0x20>
 801d1d4:	bd10      	pop	{r4, pc}
 801d1d6:	f803 1b01 	strb.w	r1, [r3], #1
 801d1da:	e7f9      	b.n	801d1d0 <strncpy+0x1a>

0801d1dc <_close_r>:
 801d1dc:	b538      	push	{r3, r4, r5, lr}
 801d1de:	4d06      	ldr	r5, [pc, #24]	; (801d1f8 <_close_r+0x1c>)
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	4604      	mov	r4, r0
 801d1e4:	4608      	mov	r0, r1
 801d1e6:	602b      	str	r3, [r5, #0]
 801d1e8:	f7e3 fd63 	bl	8000cb2 <_close>
 801d1ec:	1c43      	adds	r3, r0, #1
 801d1ee:	d102      	bne.n	801d1f6 <_close_r+0x1a>
 801d1f0:	682b      	ldr	r3, [r5, #0]
 801d1f2:	b103      	cbz	r3, 801d1f6 <_close_r+0x1a>
 801d1f4:	6023      	str	r3, [r4, #0]
 801d1f6:	bd38      	pop	{r3, r4, r5, pc}
 801d1f8:	2000ace4 	.word	0x2000ace4

0801d1fc <_lseek_r>:
 801d1fc:	b538      	push	{r3, r4, r5, lr}
 801d1fe:	4d07      	ldr	r5, [pc, #28]	; (801d21c <_lseek_r+0x20>)
 801d200:	4604      	mov	r4, r0
 801d202:	4608      	mov	r0, r1
 801d204:	4611      	mov	r1, r2
 801d206:	2200      	movs	r2, #0
 801d208:	602a      	str	r2, [r5, #0]
 801d20a:	461a      	mov	r2, r3
 801d20c:	f7e3 fd78 	bl	8000d00 <_lseek>
 801d210:	1c43      	adds	r3, r0, #1
 801d212:	d102      	bne.n	801d21a <_lseek_r+0x1e>
 801d214:	682b      	ldr	r3, [r5, #0]
 801d216:	b103      	cbz	r3, 801d21a <_lseek_r+0x1e>
 801d218:	6023      	str	r3, [r4, #0]
 801d21a:	bd38      	pop	{r3, r4, r5, pc}
 801d21c:	2000ace4 	.word	0x2000ace4

0801d220 <_read_r>:
 801d220:	b538      	push	{r3, r4, r5, lr}
 801d222:	4d07      	ldr	r5, [pc, #28]	; (801d240 <_read_r+0x20>)
 801d224:	4604      	mov	r4, r0
 801d226:	4608      	mov	r0, r1
 801d228:	4611      	mov	r1, r2
 801d22a:	2200      	movs	r2, #0
 801d22c:	602a      	str	r2, [r5, #0]
 801d22e:	461a      	mov	r2, r3
 801d230:	f7e3 fd06 	bl	8000c40 <_read>
 801d234:	1c43      	adds	r3, r0, #1
 801d236:	d102      	bne.n	801d23e <_read_r+0x1e>
 801d238:	682b      	ldr	r3, [r5, #0]
 801d23a:	b103      	cbz	r3, 801d23e <_read_r+0x1e>
 801d23c:	6023      	str	r3, [r4, #0]
 801d23e:	bd38      	pop	{r3, r4, r5, pc}
 801d240:	2000ace4 	.word	0x2000ace4

0801d244 <_write_r>:
 801d244:	b538      	push	{r3, r4, r5, lr}
 801d246:	4d07      	ldr	r5, [pc, #28]	; (801d264 <_write_r+0x20>)
 801d248:	4604      	mov	r4, r0
 801d24a:	4608      	mov	r0, r1
 801d24c:	4611      	mov	r1, r2
 801d24e:	2200      	movs	r2, #0
 801d250:	602a      	str	r2, [r5, #0]
 801d252:	461a      	mov	r2, r3
 801d254:	f7e3 fd11 	bl	8000c7a <_write>
 801d258:	1c43      	adds	r3, r0, #1
 801d25a:	d102      	bne.n	801d262 <_write_r+0x1e>
 801d25c:	682b      	ldr	r3, [r5, #0]
 801d25e:	b103      	cbz	r3, 801d262 <_write_r+0x1e>
 801d260:	6023      	str	r3, [r4, #0]
 801d262:	bd38      	pop	{r3, r4, r5, pc}
 801d264:	2000ace4 	.word	0x2000ace4

0801d268 <__errno>:
 801d268:	4b01      	ldr	r3, [pc, #4]	; (801d270 <__errno+0x8>)
 801d26a:	6818      	ldr	r0, [r3, #0]
 801d26c:	4770      	bx	lr
 801d26e:	bf00      	nop
 801d270:	20000248 	.word	0x20000248

0801d274 <__libc_init_array>:
 801d274:	b570      	push	{r4, r5, r6, lr}
 801d276:	4d0d      	ldr	r5, [pc, #52]	; (801d2ac <__libc_init_array+0x38>)
 801d278:	4c0d      	ldr	r4, [pc, #52]	; (801d2b0 <__libc_init_array+0x3c>)
 801d27a:	1b64      	subs	r4, r4, r5
 801d27c:	10a4      	asrs	r4, r4, #2
 801d27e:	2600      	movs	r6, #0
 801d280:	42a6      	cmp	r6, r4
 801d282:	d109      	bne.n	801d298 <__libc_init_array+0x24>
 801d284:	4d0b      	ldr	r5, [pc, #44]	; (801d2b4 <__libc_init_array+0x40>)
 801d286:	4c0c      	ldr	r4, [pc, #48]	; (801d2b8 <__libc_init_array+0x44>)
 801d288:	f000 fe52 	bl	801df30 <_init>
 801d28c:	1b64      	subs	r4, r4, r5
 801d28e:	10a4      	asrs	r4, r4, #2
 801d290:	2600      	movs	r6, #0
 801d292:	42a6      	cmp	r6, r4
 801d294:	d105      	bne.n	801d2a2 <__libc_init_array+0x2e>
 801d296:	bd70      	pop	{r4, r5, r6, pc}
 801d298:	f855 3b04 	ldr.w	r3, [r5], #4
 801d29c:	4798      	blx	r3
 801d29e:	3601      	adds	r6, #1
 801d2a0:	e7ee      	b.n	801d280 <__libc_init_array+0xc>
 801d2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d2a6:	4798      	blx	r3
 801d2a8:	3601      	adds	r6, #1
 801d2aa:	e7f2      	b.n	801d292 <__libc_init_array+0x1e>
 801d2ac:	08021180 	.word	0x08021180
 801d2b0:	08021180 	.word	0x08021180
 801d2b4:	08021180 	.word	0x08021180
 801d2b8:	08021184 	.word	0x08021184

0801d2bc <__retarget_lock_init_recursive>:
 801d2bc:	4770      	bx	lr

0801d2be <__retarget_lock_acquire_recursive>:
 801d2be:	4770      	bx	lr

0801d2c0 <__retarget_lock_release_recursive>:
 801d2c0:	4770      	bx	lr

0801d2c2 <memcpy>:
 801d2c2:	440a      	add	r2, r1
 801d2c4:	4291      	cmp	r1, r2
 801d2c6:	f100 33ff 	add.w	r3, r0, #4294967295
 801d2ca:	d100      	bne.n	801d2ce <memcpy+0xc>
 801d2cc:	4770      	bx	lr
 801d2ce:	b510      	push	{r4, lr}
 801d2d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d2d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d2d8:	4291      	cmp	r1, r2
 801d2da:	d1f9      	bne.n	801d2d0 <memcpy+0xe>
 801d2dc:	bd10      	pop	{r4, pc}
	...

0801d2e0 <__assert_func>:
 801d2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d2e2:	4614      	mov	r4, r2
 801d2e4:	461a      	mov	r2, r3
 801d2e6:	4b09      	ldr	r3, [pc, #36]	; (801d30c <__assert_func+0x2c>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	4605      	mov	r5, r0
 801d2ec:	68d8      	ldr	r0, [r3, #12]
 801d2ee:	b14c      	cbz	r4, 801d304 <__assert_func+0x24>
 801d2f0:	4b07      	ldr	r3, [pc, #28]	; (801d310 <__assert_func+0x30>)
 801d2f2:	9100      	str	r1, [sp, #0]
 801d2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d2f8:	4906      	ldr	r1, [pc, #24]	; (801d314 <__assert_func+0x34>)
 801d2fa:	462b      	mov	r3, r5
 801d2fc:	f000 fc90 	bl	801dc20 <fiprintf>
 801d300:	f000 fd46 	bl	801dd90 <abort>
 801d304:	4b04      	ldr	r3, [pc, #16]	; (801d318 <__assert_func+0x38>)
 801d306:	461c      	mov	r4, r3
 801d308:	e7f3      	b.n	801d2f2 <__assert_func+0x12>
 801d30a:	bf00      	nop
 801d30c:	20000248 	.word	0x20000248
 801d310:	08021108 	.word	0x08021108
 801d314:	08021115 	.word	0x08021115
 801d318:	08021143 	.word	0x08021143

0801d31c <_free_r>:
 801d31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d31e:	2900      	cmp	r1, #0
 801d320:	d044      	beq.n	801d3ac <_free_r+0x90>
 801d322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d326:	9001      	str	r0, [sp, #4]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	f1a1 0404 	sub.w	r4, r1, #4
 801d32e:	bfb8      	it	lt
 801d330:	18e4      	addlt	r4, r4, r3
 801d332:	f000 f8e7 	bl	801d504 <__malloc_lock>
 801d336:	4a1e      	ldr	r2, [pc, #120]	; (801d3b0 <_free_r+0x94>)
 801d338:	9801      	ldr	r0, [sp, #4]
 801d33a:	6813      	ldr	r3, [r2, #0]
 801d33c:	b933      	cbnz	r3, 801d34c <_free_r+0x30>
 801d33e:	6063      	str	r3, [r4, #4]
 801d340:	6014      	str	r4, [r2, #0]
 801d342:	b003      	add	sp, #12
 801d344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d348:	f000 b8e2 	b.w	801d510 <__malloc_unlock>
 801d34c:	42a3      	cmp	r3, r4
 801d34e:	d908      	bls.n	801d362 <_free_r+0x46>
 801d350:	6825      	ldr	r5, [r4, #0]
 801d352:	1961      	adds	r1, r4, r5
 801d354:	428b      	cmp	r3, r1
 801d356:	bf01      	itttt	eq
 801d358:	6819      	ldreq	r1, [r3, #0]
 801d35a:	685b      	ldreq	r3, [r3, #4]
 801d35c:	1949      	addeq	r1, r1, r5
 801d35e:	6021      	streq	r1, [r4, #0]
 801d360:	e7ed      	b.n	801d33e <_free_r+0x22>
 801d362:	461a      	mov	r2, r3
 801d364:	685b      	ldr	r3, [r3, #4]
 801d366:	b10b      	cbz	r3, 801d36c <_free_r+0x50>
 801d368:	42a3      	cmp	r3, r4
 801d36a:	d9fa      	bls.n	801d362 <_free_r+0x46>
 801d36c:	6811      	ldr	r1, [r2, #0]
 801d36e:	1855      	adds	r5, r2, r1
 801d370:	42a5      	cmp	r5, r4
 801d372:	d10b      	bne.n	801d38c <_free_r+0x70>
 801d374:	6824      	ldr	r4, [r4, #0]
 801d376:	4421      	add	r1, r4
 801d378:	1854      	adds	r4, r2, r1
 801d37a:	42a3      	cmp	r3, r4
 801d37c:	6011      	str	r1, [r2, #0]
 801d37e:	d1e0      	bne.n	801d342 <_free_r+0x26>
 801d380:	681c      	ldr	r4, [r3, #0]
 801d382:	685b      	ldr	r3, [r3, #4]
 801d384:	6053      	str	r3, [r2, #4]
 801d386:	440c      	add	r4, r1
 801d388:	6014      	str	r4, [r2, #0]
 801d38a:	e7da      	b.n	801d342 <_free_r+0x26>
 801d38c:	d902      	bls.n	801d394 <_free_r+0x78>
 801d38e:	230c      	movs	r3, #12
 801d390:	6003      	str	r3, [r0, #0]
 801d392:	e7d6      	b.n	801d342 <_free_r+0x26>
 801d394:	6825      	ldr	r5, [r4, #0]
 801d396:	1961      	adds	r1, r4, r5
 801d398:	428b      	cmp	r3, r1
 801d39a:	bf04      	itt	eq
 801d39c:	6819      	ldreq	r1, [r3, #0]
 801d39e:	685b      	ldreq	r3, [r3, #4]
 801d3a0:	6063      	str	r3, [r4, #4]
 801d3a2:	bf04      	itt	eq
 801d3a4:	1949      	addeq	r1, r1, r5
 801d3a6:	6021      	streq	r1, [r4, #0]
 801d3a8:	6054      	str	r4, [r2, #4]
 801d3aa:	e7ca      	b.n	801d342 <_free_r+0x26>
 801d3ac:	b003      	add	sp, #12
 801d3ae:	bd30      	pop	{r4, r5, pc}
 801d3b0:	2000acec 	.word	0x2000acec

0801d3b4 <malloc>:
 801d3b4:	4b02      	ldr	r3, [pc, #8]	; (801d3c0 <malloc+0xc>)
 801d3b6:	4601      	mov	r1, r0
 801d3b8:	6818      	ldr	r0, [r3, #0]
 801d3ba:	f000 b823 	b.w	801d404 <_malloc_r>
 801d3be:	bf00      	nop
 801d3c0:	20000248 	.word	0x20000248

0801d3c4 <sbrk_aligned>:
 801d3c4:	b570      	push	{r4, r5, r6, lr}
 801d3c6:	4e0e      	ldr	r6, [pc, #56]	; (801d400 <sbrk_aligned+0x3c>)
 801d3c8:	460c      	mov	r4, r1
 801d3ca:	6831      	ldr	r1, [r6, #0]
 801d3cc:	4605      	mov	r5, r0
 801d3ce:	b911      	cbnz	r1, 801d3d6 <sbrk_aligned+0x12>
 801d3d0:	f000 fcce 	bl	801dd70 <_sbrk_r>
 801d3d4:	6030      	str	r0, [r6, #0]
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	4628      	mov	r0, r5
 801d3da:	f000 fcc9 	bl	801dd70 <_sbrk_r>
 801d3de:	1c43      	adds	r3, r0, #1
 801d3e0:	d00a      	beq.n	801d3f8 <sbrk_aligned+0x34>
 801d3e2:	1cc4      	adds	r4, r0, #3
 801d3e4:	f024 0403 	bic.w	r4, r4, #3
 801d3e8:	42a0      	cmp	r0, r4
 801d3ea:	d007      	beq.n	801d3fc <sbrk_aligned+0x38>
 801d3ec:	1a21      	subs	r1, r4, r0
 801d3ee:	4628      	mov	r0, r5
 801d3f0:	f000 fcbe 	bl	801dd70 <_sbrk_r>
 801d3f4:	3001      	adds	r0, #1
 801d3f6:	d101      	bne.n	801d3fc <sbrk_aligned+0x38>
 801d3f8:	f04f 34ff 	mov.w	r4, #4294967295
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	bd70      	pop	{r4, r5, r6, pc}
 801d400:	2000acf0 	.word	0x2000acf0

0801d404 <_malloc_r>:
 801d404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d408:	1ccd      	adds	r5, r1, #3
 801d40a:	f025 0503 	bic.w	r5, r5, #3
 801d40e:	3508      	adds	r5, #8
 801d410:	2d0c      	cmp	r5, #12
 801d412:	bf38      	it	cc
 801d414:	250c      	movcc	r5, #12
 801d416:	2d00      	cmp	r5, #0
 801d418:	4607      	mov	r7, r0
 801d41a:	db01      	blt.n	801d420 <_malloc_r+0x1c>
 801d41c:	42a9      	cmp	r1, r5
 801d41e:	d905      	bls.n	801d42c <_malloc_r+0x28>
 801d420:	230c      	movs	r3, #12
 801d422:	603b      	str	r3, [r7, #0]
 801d424:	2600      	movs	r6, #0
 801d426:	4630      	mov	r0, r6
 801d428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d42c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d500 <_malloc_r+0xfc>
 801d430:	f000 f868 	bl	801d504 <__malloc_lock>
 801d434:	f8d8 3000 	ldr.w	r3, [r8]
 801d438:	461c      	mov	r4, r3
 801d43a:	bb5c      	cbnz	r4, 801d494 <_malloc_r+0x90>
 801d43c:	4629      	mov	r1, r5
 801d43e:	4638      	mov	r0, r7
 801d440:	f7ff ffc0 	bl	801d3c4 <sbrk_aligned>
 801d444:	1c43      	adds	r3, r0, #1
 801d446:	4604      	mov	r4, r0
 801d448:	d155      	bne.n	801d4f6 <_malloc_r+0xf2>
 801d44a:	f8d8 4000 	ldr.w	r4, [r8]
 801d44e:	4626      	mov	r6, r4
 801d450:	2e00      	cmp	r6, #0
 801d452:	d145      	bne.n	801d4e0 <_malloc_r+0xdc>
 801d454:	2c00      	cmp	r4, #0
 801d456:	d048      	beq.n	801d4ea <_malloc_r+0xe6>
 801d458:	6823      	ldr	r3, [r4, #0]
 801d45a:	4631      	mov	r1, r6
 801d45c:	4638      	mov	r0, r7
 801d45e:	eb04 0903 	add.w	r9, r4, r3
 801d462:	f000 fc85 	bl	801dd70 <_sbrk_r>
 801d466:	4581      	cmp	r9, r0
 801d468:	d13f      	bne.n	801d4ea <_malloc_r+0xe6>
 801d46a:	6821      	ldr	r1, [r4, #0]
 801d46c:	1a6d      	subs	r5, r5, r1
 801d46e:	4629      	mov	r1, r5
 801d470:	4638      	mov	r0, r7
 801d472:	f7ff ffa7 	bl	801d3c4 <sbrk_aligned>
 801d476:	3001      	adds	r0, #1
 801d478:	d037      	beq.n	801d4ea <_malloc_r+0xe6>
 801d47a:	6823      	ldr	r3, [r4, #0]
 801d47c:	442b      	add	r3, r5
 801d47e:	6023      	str	r3, [r4, #0]
 801d480:	f8d8 3000 	ldr.w	r3, [r8]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d038      	beq.n	801d4fa <_malloc_r+0xf6>
 801d488:	685a      	ldr	r2, [r3, #4]
 801d48a:	42a2      	cmp	r2, r4
 801d48c:	d12b      	bne.n	801d4e6 <_malloc_r+0xe2>
 801d48e:	2200      	movs	r2, #0
 801d490:	605a      	str	r2, [r3, #4]
 801d492:	e00f      	b.n	801d4b4 <_malloc_r+0xb0>
 801d494:	6822      	ldr	r2, [r4, #0]
 801d496:	1b52      	subs	r2, r2, r5
 801d498:	d41f      	bmi.n	801d4da <_malloc_r+0xd6>
 801d49a:	2a0b      	cmp	r2, #11
 801d49c:	d917      	bls.n	801d4ce <_malloc_r+0xca>
 801d49e:	1961      	adds	r1, r4, r5
 801d4a0:	42a3      	cmp	r3, r4
 801d4a2:	6025      	str	r5, [r4, #0]
 801d4a4:	bf18      	it	ne
 801d4a6:	6059      	strne	r1, [r3, #4]
 801d4a8:	6863      	ldr	r3, [r4, #4]
 801d4aa:	bf08      	it	eq
 801d4ac:	f8c8 1000 	streq.w	r1, [r8]
 801d4b0:	5162      	str	r2, [r4, r5]
 801d4b2:	604b      	str	r3, [r1, #4]
 801d4b4:	4638      	mov	r0, r7
 801d4b6:	f104 060b 	add.w	r6, r4, #11
 801d4ba:	f000 f829 	bl	801d510 <__malloc_unlock>
 801d4be:	f026 0607 	bic.w	r6, r6, #7
 801d4c2:	1d23      	adds	r3, r4, #4
 801d4c4:	1af2      	subs	r2, r6, r3
 801d4c6:	d0ae      	beq.n	801d426 <_malloc_r+0x22>
 801d4c8:	1b9b      	subs	r3, r3, r6
 801d4ca:	50a3      	str	r3, [r4, r2]
 801d4cc:	e7ab      	b.n	801d426 <_malloc_r+0x22>
 801d4ce:	42a3      	cmp	r3, r4
 801d4d0:	6862      	ldr	r2, [r4, #4]
 801d4d2:	d1dd      	bne.n	801d490 <_malloc_r+0x8c>
 801d4d4:	f8c8 2000 	str.w	r2, [r8]
 801d4d8:	e7ec      	b.n	801d4b4 <_malloc_r+0xb0>
 801d4da:	4623      	mov	r3, r4
 801d4dc:	6864      	ldr	r4, [r4, #4]
 801d4de:	e7ac      	b.n	801d43a <_malloc_r+0x36>
 801d4e0:	4634      	mov	r4, r6
 801d4e2:	6876      	ldr	r6, [r6, #4]
 801d4e4:	e7b4      	b.n	801d450 <_malloc_r+0x4c>
 801d4e6:	4613      	mov	r3, r2
 801d4e8:	e7cc      	b.n	801d484 <_malloc_r+0x80>
 801d4ea:	230c      	movs	r3, #12
 801d4ec:	603b      	str	r3, [r7, #0]
 801d4ee:	4638      	mov	r0, r7
 801d4f0:	f000 f80e 	bl	801d510 <__malloc_unlock>
 801d4f4:	e797      	b.n	801d426 <_malloc_r+0x22>
 801d4f6:	6025      	str	r5, [r4, #0]
 801d4f8:	e7dc      	b.n	801d4b4 <_malloc_r+0xb0>
 801d4fa:	605b      	str	r3, [r3, #4]
 801d4fc:	deff      	udf	#255	; 0xff
 801d4fe:	bf00      	nop
 801d500:	2000acec 	.word	0x2000acec

0801d504 <__malloc_lock>:
 801d504:	4801      	ldr	r0, [pc, #4]	; (801d50c <__malloc_lock+0x8>)
 801d506:	f7ff beda 	b.w	801d2be <__retarget_lock_acquire_recursive>
 801d50a:	bf00      	nop
 801d50c:	2000ace8 	.word	0x2000ace8

0801d510 <__malloc_unlock>:
 801d510:	4801      	ldr	r0, [pc, #4]	; (801d518 <__malloc_unlock+0x8>)
 801d512:	f7ff bed5 	b.w	801d2c0 <__retarget_lock_release_recursive>
 801d516:	bf00      	nop
 801d518:	2000ace8 	.word	0x2000ace8

0801d51c <__sfputc_r>:
 801d51c:	6893      	ldr	r3, [r2, #8]
 801d51e:	3b01      	subs	r3, #1
 801d520:	2b00      	cmp	r3, #0
 801d522:	b410      	push	{r4}
 801d524:	6093      	str	r3, [r2, #8]
 801d526:	da08      	bge.n	801d53a <__sfputc_r+0x1e>
 801d528:	6994      	ldr	r4, [r2, #24]
 801d52a:	42a3      	cmp	r3, r4
 801d52c:	db01      	blt.n	801d532 <__sfputc_r+0x16>
 801d52e:	290a      	cmp	r1, #10
 801d530:	d103      	bne.n	801d53a <__sfputc_r+0x1e>
 801d532:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d536:	f000 bb85 	b.w	801dc44 <__swbuf_r>
 801d53a:	6813      	ldr	r3, [r2, #0]
 801d53c:	1c58      	adds	r0, r3, #1
 801d53e:	6010      	str	r0, [r2, #0]
 801d540:	7019      	strb	r1, [r3, #0]
 801d542:	4608      	mov	r0, r1
 801d544:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d548:	4770      	bx	lr

0801d54a <__sfputs_r>:
 801d54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d54c:	4606      	mov	r6, r0
 801d54e:	460f      	mov	r7, r1
 801d550:	4614      	mov	r4, r2
 801d552:	18d5      	adds	r5, r2, r3
 801d554:	42ac      	cmp	r4, r5
 801d556:	d101      	bne.n	801d55c <__sfputs_r+0x12>
 801d558:	2000      	movs	r0, #0
 801d55a:	e007      	b.n	801d56c <__sfputs_r+0x22>
 801d55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d560:	463a      	mov	r2, r7
 801d562:	4630      	mov	r0, r6
 801d564:	f7ff ffda 	bl	801d51c <__sfputc_r>
 801d568:	1c43      	adds	r3, r0, #1
 801d56a:	d1f3      	bne.n	801d554 <__sfputs_r+0xa>
 801d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d570 <_vfiprintf_r>:
 801d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d574:	460d      	mov	r5, r1
 801d576:	b09d      	sub	sp, #116	; 0x74
 801d578:	4614      	mov	r4, r2
 801d57a:	4698      	mov	r8, r3
 801d57c:	4606      	mov	r6, r0
 801d57e:	b118      	cbz	r0, 801d588 <_vfiprintf_r+0x18>
 801d580:	6a03      	ldr	r3, [r0, #32]
 801d582:	b90b      	cbnz	r3, 801d588 <_vfiprintf_r+0x18>
 801d584:	f7ff fd74 	bl	801d070 <__sinit>
 801d588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d58a:	07d9      	lsls	r1, r3, #31
 801d58c:	d405      	bmi.n	801d59a <_vfiprintf_r+0x2a>
 801d58e:	89ab      	ldrh	r3, [r5, #12]
 801d590:	059a      	lsls	r2, r3, #22
 801d592:	d402      	bmi.n	801d59a <_vfiprintf_r+0x2a>
 801d594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d596:	f7ff fe92 	bl	801d2be <__retarget_lock_acquire_recursive>
 801d59a:	89ab      	ldrh	r3, [r5, #12]
 801d59c:	071b      	lsls	r3, r3, #28
 801d59e:	d501      	bpl.n	801d5a4 <_vfiprintf_r+0x34>
 801d5a0:	692b      	ldr	r3, [r5, #16]
 801d5a2:	b99b      	cbnz	r3, 801d5cc <_vfiprintf_r+0x5c>
 801d5a4:	4629      	mov	r1, r5
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f000 fb8a 	bl	801dcc0 <__swsetup_r>
 801d5ac:	b170      	cbz	r0, 801d5cc <_vfiprintf_r+0x5c>
 801d5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d5b0:	07dc      	lsls	r4, r3, #31
 801d5b2:	d504      	bpl.n	801d5be <_vfiprintf_r+0x4e>
 801d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d5b8:	b01d      	add	sp, #116	; 0x74
 801d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5be:	89ab      	ldrh	r3, [r5, #12]
 801d5c0:	0598      	lsls	r0, r3, #22
 801d5c2:	d4f7      	bmi.n	801d5b4 <_vfiprintf_r+0x44>
 801d5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d5c6:	f7ff fe7b 	bl	801d2c0 <__retarget_lock_release_recursive>
 801d5ca:	e7f3      	b.n	801d5b4 <_vfiprintf_r+0x44>
 801d5cc:	2300      	movs	r3, #0
 801d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d5d0:	2320      	movs	r3, #32
 801d5d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d5d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d5da:	2330      	movs	r3, #48	; 0x30
 801d5dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d790 <_vfiprintf_r+0x220>
 801d5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d5e4:	f04f 0901 	mov.w	r9, #1
 801d5e8:	4623      	mov	r3, r4
 801d5ea:	469a      	mov	sl, r3
 801d5ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d5f0:	b10a      	cbz	r2, 801d5f6 <_vfiprintf_r+0x86>
 801d5f2:	2a25      	cmp	r2, #37	; 0x25
 801d5f4:	d1f9      	bne.n	801d5ea <_vfiprintf_r+0x7a>
 801d5f6:	ebba 0b04 	subs.w	fp, sl, r4
 801d5fa:	d00b      	beq.n	801d614 <_vfiprintf_r+0xa4>
 801d5fc:	465b      	mov	r3, fp
 801d5fe:	4622      	mov	r2, r4
 801d600:	4629      	mov	r1, r5
 801d602:	4630      	mov	r0, r6
 801d604:	f7ff ffa1 	bl	801d54a <__sfputs_r>
 801d608:	3001      	adds	r0, #1
 801d60a:	f000 80a9 	beq.w	801d760 <_vfiprintf_r+0x1f0>
 801d60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d610:	445a      	add	r2, fp
 801d612:	9209      	str	r2, [sp, #36]	; 0x24
 801d614:	f89a 3000 	ldrb.w	r3, [sl]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	f000 80a1 	beq.w	801d760 <_vfiprintf_r+0x1f0>
 801d61e:	2300      	movs	r3, #0
 801d620:	f04f 32ff 	mov.w	r2, #4294967295
 801d624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d628:	f10a 0a01 	add.w	sl, sl, #1
 801d62c:	9304      	str	r3, [sp, #16]
 801d62e:	9307      	str	r3, [sp, #28]
 801d630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d634:	931a      	str	r3, [sp, #104]	; 0x68
 801d636:	4654      	mov	r4, sl
 801d638:	2205      	movs	r2, #5
 801d63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d63e:	4854      	ldr	r0, [pc, #336]	; (801d790 <_vfiprintf_r+0x220>)
 801d640:	f7e2 fdce 	bl	80001e0 <memchr>
 801d644:	9a04      	ldr	r2, [sp, #16]
 801d646:	b9d8      	cbnz	r0, 801d680 <_vfiprintf_r+0x110>
 801d648:	06d1      	lsls	r1, r2, #27
 801d64a:	bf44      	itt	mi
 801d64c:	2320      	movmi	r3, #32
 801d64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d652:	0713      	lsls	r3, r2, #28
 801d654:	bf44      	itt	mi
 801d656:	232b      	movmi	r3, #43	; 0x2b
 801d658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d65c:	f89a 3000 	ldrb.w	r3, [sl]
 801d660:	2b2a      	cmp	r3, #42	; 0x2a
 801d662:	d015      	beq.n	801d690 <_vfiprintf_r+0x120>
 801d664:	9a07      	ldr	r2, [sp, #28]
 801d666:	4654      	mov	r4, sl
 801d668:	2000      	movs	r0, #0
 801d66a:	f04f 0c0a 	mov.w	ip, #10
 801d66e:	4621      	mov	r1, r4
 801d670:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d674:	3b30      	subs	r3, #48	; 0x30
 801d676:	2b09      	cmp	r3, #9
 801d678:	d94d      	bls.n	801d716 <_vfiprintf_r+0x1a6>
 801d67a:	b1b0      	cbz	r0, 801d6aa <_vfiprintf_r+0x13a>
 801d67c:	9207      	str	r2, [sp, #28]
 801d67e:	e014      	b.n	801d6aa <_vfiprintf_r+0x13a>
 801d680:	eba0 0308 	sub.w	r3, r0, r8
 801d684:	fa09 f303 	lsl.w	r3, r9, r3
 801d688:	4313      	orrs	r3, r2
 801d68a:	9304      	str	r3, [sp, #16]
 801d68c:	46a2      	mov	sl, r4
 801d68e:	e7d2      	b.n	801d636 <_vfiprintf_r+0xc6>
 801d690:	9b03      	ldr	r3, [sp, #12]
 801d692:	1d19      	adds	r1, r3, #4
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	9103      	str	r1, [sp, #12]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	bfbb      	ittet	lt
 801d69c:	425b      	neglt	r3, r3
 801d69e:	f042 0202 	orrlt.w	r2, r2, #2
 801d6a2:	9307      	strge	r3, [sp, #28]
 801d6a4:	9307      	strlt	r3, [sp, #28]
 801d6a6:	bfb8      	it	lt
 801d6a8:	9204      	strlt	r2, [sp, #16]
 801d6aa:	7823      	ldrb	r3, [r4, #0]
 801d6ac:	2b2e      	cmp	r3, #46	; 0x2e
 801d6ae:	d10c      	bne.n	801d6ca <_vfiprintf_r+0x15a>
 801d6b0:	7863      	ldrb	r3, [r4, #1]
 801d6b2:	2b2a      	cmp	r3, #42	; 0x2a
 801d6b4:	d134      	bne.n	801d720 <_vfiprintf_r+0x1b0>
 801d6b6:	9b03      	ldr	r3, [sp, #12]
 801d6b8:	1d1a      	adds	r2, r3, #4
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	9203      	str	r2, [sp, #12]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	bfb8      	it	lt
 801d6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 801d6c6:	3402      	adds	r4, #2
 801d6c8:	9305      	str	r3, [sp, #20]
 801d6ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d7a0 <_vfiprintf_r+0x230>
 801d6ce:	7821      	ldrb	r1, [r4, #0]
 801d6d0:	2203      	movs	r2, #3
 801d6d2:	4650      	mov	r0, sl
 801d6d4:	f7e2 fd84 	bl	80001e0 <memchr>
 801d6d8:	b138      	cbz	r0, 801d6ea <_vfiprintf_r+0x17a>
 801d6da:	9b04      	ldr	r3, [sp, #16]
 801d6dc:	eba0 000a 	sub.w	r0, r0, sl
 801d6e0:	2240      	movs	r2, #64	; 0x40
 801d6e2:	4082      	lsls	r2, r0
 801d6e4:	4313      	orrs	r3, r2
 801d6e6:	3401      	adds	r4, #1
 801d6e8:	9304      	str	r3, [sp, #16]
 801d6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6ee:	4829      	ldr	r0, [pc, #164]	; (801d794 <_vfiprintf_r+0x224>)
 801d6f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d6f4:	2206      	movs	r2, #6
 801d6f6:	f7e2 fd73 	bl	80001e0 <memchr>
 801d6fa:	2800      	cmp	r0, #0
 801d6fc:	d03f      	beq.n	801d77e <_vfiprintf_r+0x20e>
 801d6fe:	4b26      	ldr	r3, [pc, #152]	; (801d798 <_vfiprintf_r+0x228>)
 801d700:	bb1b      	cbnz	r3, 801d74a <_vfiprintf_r+0x1da>
 801d702:	9b03      	ldr	r3, [sp, #12]
 801d704:	3307      	adds	r3, #7
 801d706:	f023 0307 	bic.w	r3, r3, #7
 801d70a:	3308      	adds	r3, #8
 801d70c:	9303      	str	r3, [sp, #12]
 801d70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d710:	443b      	add	r3, r7
 801d712:	9309      	str	r3, [sp, #36]	; 0x24
 801d714:	e768      	b.n	801d5e8 <_vfiprintf_r+0x78>
 801d716:	fb0c 3202 	mla	r2, ip, r2, r3
 801d71a:	460c      	mov	r4, r1
 801d71c:	2001      	movs	r0, #1
 801d71e:	e7a6      	b.n	801d66e <_vfiprintf_r+0xfe>
 801d720:	2300      	movs	r3, #0
 801d722:	3401      	adds	r4, #1
 801d724:	9305      	str	r3, [sp, #20]
 801d726:	4619      	mov	r1, r3
 801d728:	f04f 0c0a 	mov.w	ip, #10
 801d72c:	4620      	mov	r0, r4
 801d72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d732:	3a30      	subs	r2, #48	; 0x30
 801d734:	2a09      	cmp	r2, #9
 801d736:	d903      	bls.n	801d740 <_vfiprintf_r+0x1d0>
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d0c6      	beq.n	801d6ca <_vfiprintf_r+0x15a>
 801d73c:	9105      	str	r1, [sp, #20]
 801d73e:	e7c4      	b.n	801d6ca <_vfiprintf_r+0x15a>
 801d740:	fb0c 2101 	mla	r1, ip, r1, r2
 801d744:	4604      	mov	r4, r0
 801d746:	2301      	movs	r3, #1
 801d748:	e7f0      	b.n	801d72c <_vfiprintf_r+0x1bc>
 801d74a:	ab03      	add	r3, sp, #12
 801d74c:	9300      	str	r3, [sp, #0]
 801d74e:	462a      	mov	r2, r5
 801d750:	4b12      	ldr	r3, [pc, #72]	; (801d79c <_vfiprintf_r+0x22c>)
 801d752:	a904      	add	r1, sp, #16
 801d754:	4630      	mov	r0, r6
 801d756:	f3af 8000 	nop.w
 801d75a:	4607      	mov	r7, r0
 801d75c:	1c78      	adds	r0, r7, #1
 801d75e:	d1d6      	bne.n	801d70e <_vfiprintf_r+0x19e>
 801d760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d762:	07d9      	lsls	r1, r3, #31
 801d764:	d405      	bmi.n	801d772 <_vfiprintf_r+0x202>
 801d766:	89ab      	ldrh	r3, [r5, #12]
 801d768:	059a      	lsls	r2, r3, #22
 801d76a:	d402      	bmi.n	801d772 <_vfiprintf_r+0x202>
 801d76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d76e:	f7ff fda7 	bl	801d2c0 <__retarget_lock_release_recursive>
 801d772:	89ab      	ldrh	r3, [r5, #12]
 801d774:	065b      	lsls	r3, r3, #25
 801d776:	f53f af1d 	bmi.w	801d5b4 <_vfiprintf_r+0x44>
 801d77a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d77c:	e71c      	b.n	801d5b8 <_vfiprintf_r+0x48>
 801d77e:	ab03      	add	r3, sp, #12
 801d780:	9300      	str	r3, [sp, #0]
 801d782:	462a      	mov	r2, r5
 801d784:	4b05      	ldr	r3, [pc, #20]	; (801d79c <_vfiprintf_r+0x22c>)
 801d786:	a904      	add	r1, sp, #16
 801d788:	4630      	mov	r0, r6
 801d78a:	f000 f879 	bl	801d880 <_printf_i>
 801d78e:	e7e4      	b.n	801d75a <_vfiprintf_r+0x1ea>
 801d790:	08021144 	.word	0x08021144
 801d794:	0802114e 	.word	0x0802114e
 801d798:	00000000 	.word	0x00000000
 801d79c:	0801d54b 	.word	0x0801d54b
 801d7a0:	0802114a 	.word	0x0802114a

0801d7a4 <_printf_common>:
 801d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7a8:	4616      	mov	r6, r2
 801d7aa:	4699      	mov	r9, r3
 801d7ac:	688a      	ldr	r2, [r1, #8]
 801d7ae:	690b      	ldr	r3, [r1, #16]
 801d7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d7b4:	4293      	cmp	r3, r2
 801d7b6:	bfb8      	it	lt
 801d7b8:	4613      	movlt	r3, r2
 801d7ba:	6033      	str	r3, [r6, #0]
 801d7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d7c0:	4607      	mov	r7, r0
 801d7c2:	460c      	mov	r4, r1
 801d7c4:	b10a      	cbz	r2, 801d7ca <_printf_common+0x26>
 801d7c6:	3301      	adds	r3, #1
 801d7c8:	6033      	str	r3, [r6, #0]
 801d7ca:	6823      	ldr	r3, [r4, #0]
 801d7cc:	0699      	lsls	r1, r3, #26
 801d7ce:	bf42      	ittt	mi
 801d7d0:	6833      	ldrmi	r3, [r6, #0]
 801d7d2:	3302      	addmi	r3, #2
 801d7d4:	6033      	strmi	r3, [r6, #0]
 801d7d6:	6825      	ldr	r5, [r4, #0]
 801d7d8:	f015 0506 	ands.w	r5, r5, #6
 801d7dc:	d106      	bne.n	801d7ec <_printf_common+0x48>
 801d7de:	f104 0a19 	add.w	sl, r4, #25
 801d7e2:	68e3      	ldr	r3, [r4, #12]
 801d7e4:	6832      	ldr	r2, [r6, #0]
 801d7e6:	1a9b      	subs	r3, r3, r2
 801d7e8:	42ab      	cmp	r3, r5
 801d7ea:	dc26      	bgt.n	801d83a <_printf_common+0x96>
 801d7ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d7f0:	1e13      	subs	r3, r2, #0
 801d7f2:	6822      	ldr	r2, [r4, #0]
 801d7f4:	bf18      	it	ne
 801d7f6:	2301      	movne	r3, #1
 801d7f8:	0692      	lsls	r2, r2, #26
 801d7fa:	d42b      	bmi.n	801d854 <_printf_common+0xb0>
 801d7fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d800:	4649      	mov	r1, r9
 801d802:	4638      	mov	r0, r7
 801d804:	47c0      	blx	r8
 801d806:	3001      	adds	r0, #1
 801d808:	d01e      	beq.n	801d848 <_printf_common+0xa4>
 801d80a:	6823      	ldr	r3, [r4, #0]
 801d80c:	6922      	ldr	r2, [r4, #16]
 801d80e:	f003 0306 	and.w	r3, r3, #6
 801d812:	2b04      	cmp	r3, #4
 801d814:	bf02      	ittt	eq
 801d816:	68e5      	ldreq	r5, [r4, #12]
 801d818:	6833      	ldreq	r3, [r6, #0]
 801d81a:	1aed      	subeq	r5, r5, r3
 801d81c:	68a3      	ldr	r3, [r4, #8]
 801d81e:	bf0c      	ite	eq
 801d820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d824:	2500      	movne	r5, #0
 801d826:	4293      	cmp	r3, r2
 801d828:	bfc4      	itt	gt
 801d82a:	1a9b      	subgt	r3, r3, r2
 801d82c:	18ed      	addgt	r5, r5, r3
 801d82e:	2600      	movs	r6, #0
 801d830:	341a      	adds	r4, #26
 801d832:	42b5      	cmp	r5, r6
 801d834:	d11a      	bne.n	801d86c <_printf_common+0xc8>
 801d836:	2000      	movs	r0, #0
 801d838:	e008      	b.n	801d84c <_printf_common+0xa8>
 801d83a:	2301      	movs	r3, #1
 801d83c:	4652      	mov	r2, sl
 801d83e:	4649      	mov	r1, r9
 801d840:	4638      	mov	r0, r7
 801d842:	47c0      	blx	r8
 801d844:	3001      	adds	r0, #1
 801d846:	d103      	bne.n	801d850 <_printf_common+0xac>
 801d848:	f04f 30ff 	mov.w	r0, #4294967295
 801d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d850:	3501      	adds	r5, #1
 801d852:	e7c6      	b.n	801d7e2 <_printf_common+0x3e>
 801d854:	18e1      	adds	r1, r4, r3
 801d856:	1c5a      	adds	r2, r3, #1
 801d858:	2030      	movs	r0, #48	; 0x30
 801d85a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d85e:	4422      	add	r2, r4
 801d860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d868:	3302      	adds	r3, #2
 801d86a:	e7c7      	b.n	801d7fc <_printf_common+0x58>
 801d86c:	2301      	movs	r3, #1
 801d86e:	4622      	mov	r2, r4
 801d870:	4649      	mov	r1, r9
 801d872:	4638      	mov	r0, r7
 801d874:	47c0      	blx	r8
 801d876:	3001      	adds	r0, #1
 801d878:	d0e6      	beq.n	801d848 <_printf_common+0xa4>
 801d87a:	3601      	adds	r6, #1
 801d87c:	e7d9      	b.n	801d832 <_printf_common+0x8e>
	...

0801d880 <_printf_i>:
 801d880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d884:	7e0f      	ldrb	r7, [r1, #24]
 801d886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d888:	2f78      	cmp	r7, #120	; 0x78
 801d88a:	4691      	mov	r9, r2
 801d88c:	4680      	mov	r8, r0
 801d88e:	460c      	mov	r4, r1
 801d890:	469a      	mov	sl, r3
 801d892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d896:	d807      	bhi.n	801d8a8 <_printf_i+0x28>
 801d898:	2f62      	cmp	r7, #98	; 0x62
 801d89a:	d80a      	bhi.n	801d8b2 <_printf_i+0x32>
 801d89c:	2f00      	cmp	r7, #0
 801d89e:	f000 80d4 	beq.w	801da4a <_printf_i+0x1ca>
 801d8a2:	2f58      	cmp	r7, #88	; 0x58
 801d8a4:	f000 80c0 	beq.w	801da28 <_printf_i+0x1a8>
 801d8a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d8ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d8b0:	e03a      	b.n	801d928 <_printf_i+0xa8>
 801d8b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d8b6:	2b15      	cmp	r3, #21
 801d8b8:	d8f6      	bhi.n	801d8a8 <_printf_i+0x28>
 801d8ba:	a101      	add	r1, pc, #4	; (adr r1, 801d8c0 <_printf_i+0x40>)
 801d8bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d8c0:	0801d919 	.word	0x0801d919
 801d8c4:	0801d92d 	.word	0x0801d92d
 801d8c8:	0801d8a9 	.word	0x0801d8a9
 801d8cc:	0801d8a9 	.word	0x0801d8a9
 801d8d0:	0801d8a9 	.word	0x0801d8a9
 801d8d4:	0801d8a9 	.word	0x0801d8a9
 801d8d8:	0801d92d 	.word	0x0801d92d
 801d8dc:	0801d8a9 	.word	0x0801d8a9
 801d8e0:	0801d8a9 	.word	0x0801d8a9
 801d8e4:	0801d8a9 	.word	0x0801d8a9
 801d8e8:	0801d8a9 	.word	0x0801d8a9
 801d8ec:	0801da31 	.word	0x0801da31
 801d8f0:	0801d959 	.word	0x0801d959
 801d8f4:	0801d9eb 	.word	0x0801d9eb
 801d8f8:	0801d8a9 	.word	0x0801d8a9
 801d8fc:	0801d8a9 	.word	0x0801d8a9
 801d900:	0801da53 	.word	0x0801da53
 801d904:	0801d8a9 	.word	0x0801d8a9
 801d908:	0801d959 	.word	0x0801d959
 801d90c:	0801d8a9 	.word	0x0801d8a9
 801d910:	0801d8a9 	.word	0x0801d8a9
 801d914:	0801d9f3 	.word	0x0801d9f3
 801d918:	682b      	ldr	r3, [r5, #0]
 801d91a:	1d1a      	adds	r2, r3, #4
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	602a      	str	r2, [r5, #0]
 801d920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d928:	2301      	movs	r3, #1
 801d92a:	e09f      	b.n	801da6c <_printf_i+0x1ec>
 801d92c:	6820      	ldr	r0, [r4, #0]
 801d92e:	682b      	ldr	r3, [r5, #0]
 801d930:	0607      	lsls	r7, r0, #24
 801d932:	f103 0104 	add.w	r1, r3, #4
 801d936:	6029      	str	r1, [r5, #0]
 801d938:	d501      	bpl.n	801d93e <_printf_i+0xbe>
 801d93a:	681e      	ldr	r6, [r3, #0]
 801d93c:	e003      	b.n	801d946 <_printf_i+0xc6>
 801d93e:	0646      	lsls	r6, r0, #25
 801d940:	d5fb      	bpl.n	801d93a <_printf_i+0xba>
 801d942:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d946:	2e00      	cmp	r6, #0
 801d948:	da03      	bge.n	801d952 <_printf_i+0xd2>
 801d94a:	232d      	movs	r3, #45	; 0x2d
 801d94c:	4276      	negs	r6, r6
 801d94e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d952:	485a      	ldr	r0, [pc, #360]	; (801dabc <_printf_i+0x23c>)
 801d954:	230a      	movs	r3, #10
 801d956:	e012      	b.n	801d97e <_printf_i+0xfe>
 801d958:	682b      	ldr	r3, [r5, #0]
 801d95a:	6820      	ldr	r0, [r4, #0]
 801d95c:	1d19      	adds	r1, r3, #4
 801d95e:	6029      	str	r1, [r5, #0]
 801d960:	0605      	lsls	r5, r0, #24
 801d962:	d501      	bpl.n	801d968 <_printf_i+0xe8>
 801d964:	681e      	ldr	r6, [r3, #0]
 801d966:	e002      	b.n	801d96e <_printf_i+0xee>
 801d968:	0641      	lsls	r1, r0, #25
 801d96a:	d5fb      	bpl.n	801d964 <_printf_i+0xe4>
 801d96c:	881e      	ldrh	r6, [r3, #0]
 801d96e:	4853      	ldr	r0, [pc, #332]	; (801dabc <_printf_i+0x23c>)
 801d970:	2f6f      	cmp	r7, #111	; 0x6f
 801d972:	bf0c      	ite	eq
 801d974:	2308      	moveq	r3, #8
 801d976:	230a      	movne	r3, #10
 801d978:	2100      	movs	r1, #0
 801d97a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d97e:	6865      	ldr	r5, [r4, #4]
 801d980:	60a5      	str	r5, [r4, #8]
 801d982:	2d00      	cmp	r5, #0
 801d984:	bfa2      	ittt	ge
 801d986:	6821      	ldrge	r1, [r4, #0]
 801d988:	f021 0104 	bicge.w	r1, r1, #4
 801d98c:	6021      	strge	r1, [r4, #0]
 801d98e:	b90e      	cbnz	r6, 801d994 <_printf_i+0x114>
 801d990:	2d00      	cmp	r5, #0
 801d992:	d04b      	beq.n	801da2c <_printf_i+0x1ac>
 801d994:	4615      	mov	r5, r2
 801d996:	fbb6 f1f3 	udiv	r1, r6, r3
 801d99a:	fb03 6711 	mls	r7, r3, r1, r6
 801d99e:	5dc7      	ldrb	r7, [r0, r7]
 801d9a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d9a4:	4637      	mov	r7, r6
 801d9a6:	42bb      	cmp	r3, r7
 801d9a8:	460e      	mov	r6, r1
 801d9aa:	d9f4      	bls.n	801d996 <_printf_i+0x116>
 801d9ac:	2b08      	cmp	r3, #8
 801d9ae:	d10b      	bne.n	801d9c8 <_printf_i+0x148>
 801d9b0:	6823      	ldr	r3, [r4, #0]
 801d9b2:	07de      	lsls	r6, r3, #31
 801d9b4:	d508      	bpl.n	801d9c8 <_printf_i+0x148>
 801d9b6:	6923      	ldr	r3, [r4, #16]
 801d9b8:	6861      	ldr	r1, [r4, #4]
 801d9ba:	4299      	cmp	r1, r3
 801d9bc:	bfde      	ittt	le
 801d9be:	2330      	movle	r3, #48	; 0x30
 801d9c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d9c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d9c8:	1b52      	subs	r2, r2, r5
 801d9ca:	6122      	str	r2, [r4, #16]
 801d9cc:	f8cd a000 	str.w	sl, [sp]
 801d9d0:	464b      	mov	r3, r9
 801d9d2:	aa03      	add	r2, sp, #12
 801d9d4:	4621      	mov	r1, r4
 801d9d6:	4640      	mov	r0, r8
 801d9d8:	f7ff fee4 	bl	801d7a4 <_printf_common>
 801d9dc:	3001      	adds	r0, #1
 801d9de:	d14a      	bne.n	801da76 <_printf_i+0x1f6>
 801d9e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d9e4:	b004      	add	sp, #16
 801d9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9ea:	6823      	ldr	r3, [r4, #0]
 801d9ec:	f043 0320 	orr.w	r3, r3, #32
 801d9f0:	6023      	str	r3, [r4, #0]
 801d9f2:	4833      	ldr	r0, [pc, #204]	; (801dac0 <_printf_i+0x240>)
 801d9f4:	2778      	movs	r7, #120	; 0x78
 801d9f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d9fa:	6823      	ldr	r3, [r4, #0]
 801d9fc:	6829      	ldr	r1, [r5, #0]
 801d9fe:	061f      	lsls	r7, r3, #24
 801da00:	f851 6b04 	ldr.w	r6, [r1], #4
 801da04:	d402      	bmi.n	801da0c <_printf_i+0x18c>
 801da06:	065f      	lsls	r7, r3, #25
 801da08:	bf48      	it	mi
 801da0a:	b2b6      	uxthmi	r6, r6
 801da0c:	07df      	lsls	r7, r3, #31
 801da0e:	bf48      	it	mi
 801da10:	f043 0320 	orrmi.w	r3, r3, #32
 801da14:	6029      	str	r1, [r5, #0]
 801da16:	bf48      	it	mi
 801da18:	6023      	strmi	r3, [r4, #0]
 801da1a:	b91e      	cbnz	r6, 801da24 <_printf_i+0x1a4>
 801da1c:	6823      	ldr	r3, [r4, #0]
 801da1e:	f023 0320 	bic.w	r3, r3, #32
 801da22:	6023      	str	r3, [r4, #0]
 801da24:	2310      	movs	r3, #16
 801da26:	e7a7      	b.n	801d978 <_printf_i+0xf8>
 801da28:	4824      	ldr	r0, [pc, #144]	; (801dabc <_printf_i+0x23c>)
 801da2a:	e7e4      	b.n	801d9f6 <_printf_i+0x176>
 801da2c:	4615      	mov	r5, r2
 801da2e:	e7bd      	b.n	801d9ac <_printf_i+0x12c>
 801da30:	682b      	ldr	r3, [r5, #0]
 801da32:	6826      	ldr	r6, [r4, #0]
 801da34:	6961      	ldr	r1, [r4, #20]
 801da36:	1d18      	adds	r0, r3, #4
 801da38:	6028      	str	r0, [r5, #0]
 801da3a:	0635      	lsls	r5, r6, #24
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	d501      	bpl.n	801da44 <_printf_i+0x1c4>
 801da40:	6019      	str	r1, [r3, #0]
 801da42:	e002      	b.n	801da4a <_printf_i+0x1ca>
 801da44:	0670      	lsls	r0, r6, #25
 801da46:	d5fb      	bpl.n	801da40 <_printf_i+0x1c0>
 801da48:	8019      	strh	r1, [r3, #0]
 801da4a:	2300      	movs	r3, #0
 801da4c:	6123      	str	r3, [r4, #16]
 801da4e:	4615      	mov	r5, r2
 801da50:	e7bc      	b.n	801d9cc <_printf_i+0x14c>
 801da52:	682b      	ldr	r3, [r5, #0]
 801da54:	1d1a      	adds	r2, r3, #4
 801da56:	602a      	str	r2, [r5, #0]
 801da58:	681d      	ldr	r5, [r3, #0]
 801da5a:	6862      	ldr	r2, [r4, #4]
 801da5c:	2100      	movs	r1, #0
 801da5e:	4628      	mov	r0, r5
 801da60:	f7e2 fbbe 	bl	80001e0 <memchr>
 801da64:	b108      	cbz	r0, 801da6a <_printf_i+0x1ea>
 801da66:	1b40      	subs	r0, r0, r5
 801da68:	6060      	str	r0, [r4, #4]
 801da6a:	6863      	ldr	r3, [r4, #4]
 801da6c:	6123      	str	r3, [r4, #16]
 801da6e:	2300      	movs	r3, #0
 801da70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801da74:	e7aa      	b.n	801d9cc <_printf_i+0x14c>
 801da76:	6923      	ldr	r3, [r4, #16]
 801da78:	462a      	mov	r2, r5
 801da7a:	4649      	mov	r1, r9
 801da7c:	4640      	mov	r0, r8
 801da7e:	47d0      	blx	sl
 801da80:	3001      	adds	r0, #1
 801da82:	d0ad      	beq.n	801d9e0 <_printf_i+0x160>
 801da84:	6823      	ldr	r3, [r4, #0]
 801da86:	079b      	lsls	r3, r3, #30
 801da88:	d413      	bmi.n	801dab2 <_printf_i+0x232>
 801da8a:	68e0      	ldr	r0, [r4, #12]
 801da8c:	9b03      	ldr	r3, [sp, #12]
 801da8e:	4298      	cmp	r0, r3
 801da90:	bfb8      	it	lt
 801da92:	4618      	movlt	r0, r3
 801da94:	e7a6      	b.n	801d9e4 <_printf_i+0x164>
 801da96:	2301      	movs	r3, #1
 801da98:	4632      	mov	r2, r6
 801da9a:	4649      	mov	r1, r9
 801da9c:	4640      	mov	r0, r8
 801da9e:	47d0      	blx	sl
 801daa0:	3001      	adds	r0, #1
 801daa2:	d09d      	beq.n	801d9e0 <_printf_i+0x160>
 801daa4:	3501      	adds	r5, #1
 801daa6:	68e3      	ldr	r3, [r4, #12]
 801daa8:	9903      	ldr	r1, [sp, #12]
 801daaa:	1a5b      	subs	r3, r3, r1
 801daac:	42ab      	cmp	r3, r5
 801daae:	dcf2      	bgt.n	801da96 <_printf_i+0x216>
 801dab0:	e7eb      	b.n	801da8a <_printf_i+0x20a>
 801dab2:	2500      	movs	r5, #0
 801dab4:	f104 0619 	add.w	r6, r4, #25
 801dab8:	e7f5      	b.n	801daa6 <_printf_i+0x226>
 801daba:	bf00      	nop
 801dabc:	08021155 	.word	0x08021155
 801dac0:	08021166 	.word	0x08021166

0801dac4 <__sflush_r>:
 801dac4:	898a      	ldrh	r2, [r1, #12]
 801dac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daca:	4605      	mov	r5, r0
 801dacc:	0710      	lsls	r0, r2, #28
 801dace:	460c      	mov	r4, r1
 801dad0:	d458      	bmi.n	801db84 <__sflush_r+0xc0>
 801dad2:	684b      	ldr	r3, [r1, #4]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	dc05      	bgt.n	801dae4 <__sflush_r+0x20>
 801dad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dada:	2b00      	cmp	r3, #0
 801dadc:	dc02      	bgt.n	801dae4 <__sflush_r+0x20>
 801dade:	2000      	movs	r0, #0
 801dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dae6:	2e00      	cmp	r6, #0
 801dae8:	d0f9      	beq.n	801dade <__sflush_r+0x1a>
 801daea:	2300      	movs	r3, #0
 801daec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801daf0:	682f      	ldr	r7, [r5, #0]
 801daf2:	6a21      	ldr	r1, [r4, #32]
 801daf4:	602b      	str	r3, [r5, #0]
 801daf6:	d032      	beq.n	801db5e <__sflush_r+0x9a>
 801daf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dafa:	89a3      	ldrh	r3, [r4, #12]
 801dafc:	075a      	lsls	r2, r3, #29
 801dafe:	d505      	bpl.n	801db0c <__sflush_r+0x48>
 801db00:	6863      	ldr	r3, [r4, #4]
 801db02:	1ac0      	subs	r0, r0, r3
 801db04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db06:	b10b      	cbz	r3, 801db0c <__sflush_r+0x48>
 801db08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db0a:	1ac0      	subs	r0, r0, r3
 801db0c:	2300      	movs	r3, #0
 801db0e:	4602      	mov	r2, r0
 801db10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db12:	6a21      	ldr	r1, [r4, #32]
 801db14:	4628      	mov	r0, r5
 801db16:	47b0      	blx	r6
 801db18:	1c43      	adds	r3, r0, #1
 801db1a:	89a3      	ldrh	r3, [r4, #12]
 801db1c:	d106      	bne.n	801db2c <__sflush_r+0x68>
 801db1e:	6829      	ldr	r1, [r5, #0]
 801db20:	291d      	cmp	r1, #29
 801db22:	d82b      	bhi.n	801db7c <__sflush_r+0xb8>
 801db24:	4a29      	ldr	r2, [pc, #164]	; (801dbcc <__sflush_r+0x108>)
 801db26:	410a      	asrs	r2, r1
 801db28:	07d6      	lsls	r6, r2, #31
 801db2a:	d427      	bmi.n	801db7c <__sflush_r+0xb8>
 801db2c:	2200      	movs	r2, #0
 801db2e:	6062      	str	r2, [r4, #4]
 801db30:	04d9      	lsls	r1, r3, #19
 801db32:	6922      	ldr	r2, [r4, #16]
 801db34:	6022      	str	r2, [r4, #0]
 801db36:	d504      	bpl.n	801db42 <__sflush_r+0x7e>
 801db38:	1c42      	adds	r2, r0, #1
 801db3a:	d101      	bne.n	801db40 <__sflush_r+0x7c>
 801db3c:	682b      	ldr	r3, [r5, #0]
 801db3e:	b903      	cbnz	r3, 801db42 <__sflush_r+0x7e>
 801db40:	6560      	str	r0, [r4, #84]	; 0x54
 801db42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db44:	602f      	str	r7, [r5, #0]
 801db46:	2900      	cmp	r1, #0
 801db48:	d0c9      	beq.n	801dade <__sflush_r+0x1a>
 801db4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db4e:	4299      	cmp	r1, r3
 801db50:	d002      	beq.n	801db58 <__sflush_r+0x94>
 801db52:	4628      	mov	r0, r5
 801db54:	f7ff fbe2 	bl	801d31c <_free_r>
 801db58:	2000      	movs	r0, #0
 801db5a:	6360      	str	r0, [r4, #52]	; 0x34
 801db5c:	e7c0      	b.n	801dae0 <__sflush_r+0x1c>
 801db5e:	2301      	movs	r3, #1
 801db60:	4628      	mov	r0, r5
 801db62:	47b0      	blx	r6
 801db64:	1c41      	adds	r1, r0, #1
 801db66:	d1c8      	bne.n	801dafa <__sflush_r+0x36>
 801db68:	682b      	ldr	r3, [r5, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d0c5      	beq.n	801dafa <__sflush_r+0x36>
 801db6e:	2b1d      	cmp	r3, #29
 801db70:	d001      	beq.n	801db76 <__sflush_r+0xb2>
 801db72:	2b16      	cmp	r3, #22
 801db74:	d101      	bne.n	801db7a <__sflush_r+0xb6>
 801db76:	602f      	str	r7, [r5, #0]
 801db78:	e7b1      	b.n	801dade <__sflush_r+0x1a>
 801db7a:	89a3      	ldrh	r3, [r4, #12]
 801db7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db80:	81a3      	strh	r3, [r4, #12]
 801db82:	e7ad      	b.n	801dae0 <__sflush_r+0x1c>
 801db84:	690f      	ldr	r7, [r1, #16]
 801db86:	2f00      	cmp	r7, #0
 801db88:	d0a9      	beq.n	801dade <__sflush_r+0x1a>
 801db8a:	0793      	lsls	r3, r2, #30
 801db8c:	680e      	ldr	r6, [r1, #0]
 801db8e:	bf08      	it	eq
 801db90:	694b      	ldreq	r3, [r1, #20]
 801db92:	600f      	str	r7, [r1, #0]
 801db94:	bf18      	it	ne
 801db96:	2300      	movne	r3, #0
 801db98:	eba6 0807 	sub.w	r8, r6, r7
 801db9c:	608b      	str	r3, [r1, #8]
 801db9e:	f1b8 0f00 	cmp.w	r8, #0
 801dba2:	dd9c      	ble.n	801dade <__sflush_r+0x1a>
 801dba4:	6a21      	ldr	r1, [r4, #32]
 801dba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dba8:	4643      	mov	r3, r8
 801dbaa:	463a      	mov	r2, r7
 801dbac:	4628      	mov	r0, r5
 801dbae:	47b0      	blx	r6
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	dc06      	bgt.n	801dbc2 <__sflush_r+0xfe>
 801dbb4:	89a3      	ldrh	r3, [r4, #12]
 801dbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbba:	81a3      	strh	r3, [r4, #12]
 801dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbc0:	e78e      	b.n	801dae0 <__sflush_r+0x1c>
 801dbc2:	4407      	add	r7, r0
 801dbc4:	eba8 0800 	sub.w	r8, r8, r0
 801dbc8:	e7e9      	b.n	801db9e <__sflush_r+0xda>
 801dbca:	bf00      	nop
 801dbcc:	dfbffffe 	.word	0xdfbffffe

0801dbd0 <_fflush_r>:
 801dbd0:	b538      	push	{r3, r4, r5, lr}
 801dbd2:	690b      	ldr	r3, [r1, #16]
 801dbd4:	4605      	mov	r5, r0
 801dbd6:	460c      	mov	r4, r1
 801dbd8:	b913      	cbnz	r3, 801dbe0 <_fflush_r+0x10>
 801dbda:	2500      	movs	r5, #0
 801dbdc:	4628      	mov	r0, r5
 801dbde:	bd38      	pop	{r3, r4, r5, pc}
 801dbe0:	b118      	cbz	r0, 801dbea <_fflush_r+0x1a>
 801dbe2:	6a03      	ldr	r3, [r0, #32]
 801dbe4:	b90b      	cbnz	r3, 801dbea <_fflush_r+0x1a>
 801dbe6:	f7ff fa43 	bl	801d070 <__sinit>
 801dbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d0f3      	beq.n	801dbda <_fflush_r+0xa>
 801dbf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dbf4:	07d0      	lsls	r0, r2, #31
 801dbf6:	d404      	bmi.n	801dc02 <_fflush_r+0x32>
 801dbf8:	0599      	lsls	r1, r3, #22
 801dbfa:	d402      	bmi.n	801dc02 <_fflush_r+0x32>
 801dbfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbfe:	f7ff fb5e 	bl	801d2be <__retarget_lock_acquire_recursive>
 801dc02:	4628      	mov	r0, r5
 801dc04:	4621      	mov	r1, r4
 801dc06:	f7ff ff5d 	bl	801dac4 <__sflush_r>
 801dc0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc0c:	07da      	lsls	r2, r3, #31
 801dc0e:	4605      	mov	r5, r0
 801dc10:	d4e4      	bmi.n	801dbdc <_fflush_r+0xc>
 801dc12:	89a3      	ldrh	r3, [r4, #12]
 801dc14:	059b      	lsls	r3, r3, #22
 801dc16:	d4e1      	bmi.n	801dbdc <_fflush_r+0xc>
 801dc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc1a:	f7ff fb51 	bl	801d2c0 <__retarget_lock_release_recursive>
 801dc1e:	e7dd      	b.n	801dbdc <_fflush_r+0xc>

0801dc20 <fiprintf>:
 801dc20:	b40e      	push	{r1, r2, r3}
 801dc22:	b503      	push	{r0, r1, lr}
 801dc24:	4601      	mov	r1, r0
 801dc26:	ab03      	add	r3, sp, #12
 801dc28:	4805      	ldr	r0, [pc, #20]	; (801dc40 <fiprintf+0x20>)
 801dc2a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc2e:	6800      	ldr	r0, [r0, #0]
 801dc30:	9301      	str	r3, [sp, #4]
 801dc32:	f7ff fc9d 	bl	801d570 <_vfiprintf_r>
 801dc36:	b002      	add	sp, #8
 801dc38:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc3c:	b003      	add	sp, #12
 801dc3e:	4770      	bx	lr
 801dc40:	20000248 	.word	0x20000248

0801dc44 <__swbuf_r>:
 801dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc46:	460e      	mov	r6, r1
 801dc48:	4614      	mov	r4, r2
 801dc4a:	4605      	mov	r5, r0
 801dc4c:	b118      	cbz	r0, 801dc56 <__swbuf_r+0x12>
 801dc4e:	6a03      	ldr	r3, [r0, #32]
 801dc50:	b90b      	cbnz	r3, 801dc56 <__swbuf_r+0x12>
 801dc52:	f7ff fa0d 	bl	801d070 <__sinit>
 801dc56:	69a3      	ldr	r3, [r4, #24]
 801dc58:	60a3      	str	r3, [r4, #8]
 801dc5a:	89a3      	ldrh	r3, [r4, #12]
 801dc5c:	071a      	lsls	r2, r3, #28
 801dc5e:	d525      	bpl.n	801dcac <__swbuf_r+0x68>
 801dc60:	6923      	ldr	r3, [r4, #16]
 801dc62:	b31b      	cbz	r3, 801dcac <__swbuf_r+0x68>
 801dc64:	6823      	ldr	r3, [r4, #0]
 801dc66:	6922      	ldr	r2, [r4, #16]
 801dc68:	1a98      	subs	r0, r3, r2
 801dc6a:	6963      	ldr	r3, [r4, #20]
 801dc6c:	b2f6      	uxtb	r6, r6
 801dc6e:	4283      	cmp	r3, r0
 801dc70:	4637      	mov	r7, r6
 801dc72:	dc04      	bgt.n	801dc7e <__swbuf_r+0x3a>
 801dc74:	4621      	mov	r1, r4
 801dc76:	4628      	mov	r0, r5
 801dc78:	f7ff ffaa 	bl	801dbd0 <_fflush_r>
 801dc7c:	b9e0      	cbnz	r0, 801dcb8 <__swbuf_r+0x74>
 801dc7e:	68a3      	ldr	r3, [r4, #8]
 801dc80:	3b01      	subs	r3, #1
 801dc82:	60a3      	str	r3, [r4, #8]
 801dc84:	6823      	ldr	r3, [r4, #0]
 801dc86:	1c5a      	adds	r2, r3, #1
 801dc88:	6022      	str	r2, [r4, #0]
 801dc8a:	701e      	strb	r6, [r3, #0]
 801dc8c:	6962      	ldr	r2, [r4, #20]
 801dc8e:	1c43      	adds	r3, r0, #1
 801dc90:	429a      	cmp	r2, r3
 801dc92:	d004      	beq.n	801dc9e <__swbuf_r+0x5a>
 801dc94:	89a3      	ldrh	r3, [r4, #12]
 801dc96:	07db      	lsls	r3, r3, #31
 801dc98:	d506      	bpl.n	801dca8 <__swbuf_r+0x64>
 801dc9a:	2e0a      	cmp	r6, #10
 801dc9c:	d104      	bne.n	801dca8 <__swbuf_r+0x64>
 801dc9e:	4621      	mov	r1, r4
 801dca0:	4628      	mov	r0, r5
 801dca2:	f7ff ff95 	bl	801dbd0 <_fflush_r>
 801dca6:	b938      	cbnz	r0, 801dcb8 <__swbuf_r+0x74>
 801dca8:	4638      	mov	r0, r7
 801dcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcac:	4621      	mov	r1, r4
 801dcae:	4628      	mov	r0, r5
 801dcb0:	f000 f806 	bl	801dcc0 <__swsetup_r>
 801dcb4:	2800      	cmp	r0, #0
 801dcb6:	d0d5      	beq.n	801dc64 <__swbuf_r+0x20>
 801dcb8:	f04f 37ff 	mov.w	r7, #4294967295
 801dcbc:	e7f4      	b.n	801dca8 <__swbuf_r+0x64>
	...

0801dcc0 <__swsetup_r>:
 801dcc0:	b538      	push	{r3, r4, r5, lr}
 801dcc2:	4b2a      	ldr	r3, [pc, #168]	; (801dd6c <__swsetup_r+0xac>)
 801dcc4:	4605      	mov	r5, r0
 801dcc6:	6818      	ldr	r0, [r3, #0]
 801dcc8:	460c      	mov	r4, r1
 801dcca:	b118      	cbz	r0, 801dcd4 <__swsetup_r+0x14>
 801dccc:	6a03      	ldr	r3, [r0, #32]
 801dcce:	b90b      	cbnz	r3, 801dcd4 <__swsetup_r+0x14>
 801dcd0:	f7ff f9ce 	bl	801d070 <__sinit>
 801dcd4:	89a3      	ldrh	r3, [r4, #12]
 801dcd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dcda:	0718      	lsls	r0, r3, #28
 801dcdc:	d422      	bmi.n	801dd24 <__swsetup_r+0x64>
 801dcde:	06d9      	lsls	r1, r3, #27
 801dce0:	d407      	bmi.n	801dcf2 <__swsetup_r+0x32>
 801dce2:	2309      	movs	r3, #9
 801dce4:	602b      	str	r3, [r5, #0]
 801dce6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dcea:	81a3      	strh	r3, [r4, #12]
 801dcec:	f04f 30ff 	mov.w	r0, #4294967295
 801dcf0:	e034      	b.n	801dd5c <__swsetup_r+0x9c>
 801dcf2:	0758      	lsls	r0, r3, #29
 801dcf4:	d512      	bpl.n	801dd1c <__swsetup_r+0x5c>
 801dcf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcf8:	b141      	cbz	r1, 801dd0c <__swsetup_r+0x4c>
 801dcfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcfe:	4299      	cmp	r1, r3
 801dd00:	d002      	beq.n	801dd08 <__swsetup_r+0x48>
 801dd02:	4628      	mov	r0, r5
 801dd04:	f7ff fb0a 	bl	801d31c <_free_r>
 801dd08:	2300      	movs	r3, #0
 801dd0a:	6363      	str	r3, [r4, #52]	; 0x34
 801dd0c:	89a3      	ldrh	r3, [r4, #12]
 801dd0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dd12:	81a3      	strh	r3, [r4, #12]
 801dd14:	2300      	movs	r3, #0
 801dd16:	6063      	str	r3, [r4, #4]
 801dd18:	6923      	ldr	r3, [r4, #16]
 801dd1a:	6023      	str	r3, [r4, #0]
 801dd1c:	89a3      	ldrh	r3, [r4, #12]
 801dd1e:	f043 0308 	orr.w	r3, r3, #8
 801dd22:	81a3      	strh	r3, [r4, #12]
 801dd24:	6923      	ldr	r3, [r4, #16]
 801dd26:	b94b      	cbnz	r3, 801dd3c <__swsetup_r+0x7c>
 801dd28:	89a3      	ldrh	r3, [r4, #12]
 801dd2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dd2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dd32:	d003      	beq.n	801dd3c <__swsetup_r+0x7c>
 801dd34:	4621      	mov	r1, r4
 801dd36:	4628      	mov	r0, r5
 801dd38:	f000 f857 	bl	801ddea <__smakebuf_r>
 801dd3c:	89a0      	ldrh	r0, [r4, #12]
 801dd3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dd42:	f010 0301 	ands.w	r3, r0, #1
 801dd46:	d00a      	beq.n	801dd5e <__swsetup_r+0x9e>
 801dd48:	2300      	movs	r3, #0
 801dd4a:	60a3      	str	r3, [r4, #8]
 801dd4c:	6963      	ldr	r3, [r4, #20]
 801dd4e:	425b      	negs	r3, r3
 801dd50:	61a3      	str	r3, [r4, #24]
 801dd52:	6923      	ldr	r3, [r4, #16]
 801dd54:	b943      	cbnz	r3, 801dd68 <__swsetup_r+0xa8>
 801dd56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dd5a:	d1c4      	bne.n	801dce6 <__swsetup_r+0x26>
 801dd5c:	bd38      	pop	{r3, r4, r5, pc}
 801dd5e:	0781      	lsls	r1, r0, #30
 801dd60:	bf58      	it	pl
 801dd62:	6963      	ldrpl	r3, [r4, #20]
 801dd64:	60a3      	str	r3, [r4, #8]
 801dd66:	e7f4      	b.n	801dd52 <__swsetup_r+0x92>
 801dd68:	2000      	movs	r0, #0
 801dd6a:	e7f7      	b.n	801dd5c <__swsetup_r+0x9c>
 801dd6c:	20000248 	.word	0x20000248

0801dd70 <_sbrk_r>:
 801dd70:	b538      	push	{r3, r4, r5, lr}
 801dd72:	4d06      	ldr	r5, [pc, #24]	; (801dd8c <_sbrk_r+0x1c>)
 801dd74:	2300      	movs	r3, #0
 801dd76:	4604      	mov	r4, r0
 801dd78:	4608      	mov	r0, r1
 801dd7a:	602b      	str	r3, [r5, #0]
 801dd7c:	f7e2 ffce 	bl	8000d1c <_sbrk>
 801dd80:	1c43      	adds	r3, r0, #1
 801dd82:	d102      	bne.n	801dd8a <_sbrk_r+0x1a>
 801dd84:	682b      	ldr	r3, [r5, #0]
 801dd86:	b103      	cbz	r3, 801dd8a <_sbrk_r+0x1a>
 801dd88:	6023      	str	r3, [r4, #0]
 801dd8a:	bd38      	pop	{r3, r4, r5, pc}
 801dd8c:	2000ace4 	.word	0x2000ace4

0801dd90 <abort>:
 801dd90:	b508      	push	{r3, lr}
 801dd92:	2006      	movs	r0, #6
 801dd94:	f000 f88e 	bl	801deb4 <raise>
 801dd98:	2001      	movs	r0, #1
 801dd9a:	f7e2 ff47 	bl	8000c2c <_exit>

0801dd9e <__swhatbuf_r>:
 801dd9e:	b570      	push	{r4, r5, r6, lr}
 801dda0:	460c      	mov	r4, r1
 801dda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dda6:	2900      	cmp	r1, #0
 801dda8:	b096      	sub	sp, #88	; 0x58
 801ddaa:	4615      	mov	r5, r2
 801ddac:	461e      	mov	r6, r3
 801ddae:	da0d      	bge.n	801ddcc <__swhatbuf_r+0x2e>
 801ddb0:	89a3      	ldrh	r3, [r4, #12]
 801ddb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ddb6:	f04f 0100 	mov.w	r1, #0
 801ddba:	bf0c      	ite	eq
 801ddbc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ddc0:	2340      	movne	r3, #64	; 0x40
 801ddc2:	2000      	movs	r0, #0
 801ddc4:	6031      	str	r1, [r6, #0]
 801ddc6:	602b      	str	r3, [r5, #0]
 801ddc8:	b016      	add	sp, #88	; 0x58
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	466a      	mov	r2, sp
 801ddce:	f000 f879 	bl	801dec4 <_fstat_r>
 801ddd2:	2800      	cmp	r0, #0
 801ddd4:	dbec      	blt.n	801ddb0 <__swhatbuf_r+0x12>
 801ddd6:	9901      	ldr	r1, [sp, #4]
 801ddd8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801dddc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801dde0:	4259      	negs	r1, r3
 801dde2:	4159      	adcs	r1, r3
 801dde4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dde8:	e7eb      	b.n	801ddc2 <__swhatbuf_r+0x24>

0801ddea <__smakebuf_r>:
 801ddea:	898b      	ldrh	r3, [r1, #12]
 801ddec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ddee:	079d      	lsls	r5, r3, #30
 801ddf0:	4606      	mov	r6, r0
 801ddf2:	460c      	mov	r4, r1
 801ddf4:	d507      	bpl.n	801de06 <__smakebuf_r+0x1c>
 801ddf6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ddfa:	6023      	str	r3, [r4, #0]
 801ddfc:	6123      	str	r3, [r4, #16]
 801ddfe:	2301      	movs	r3, #1
 801de00:	6163      	str	r3, [r4, #20]
 801de02:	b002      	add	sp, #8
 801de04:	bd70      	pop	{r4, r5, r6, pc}
 801de06:	ab01      	add	r3, sp, #4
 801de08:	466a      	mov	r2, sp
 801de0a:	f7ff ffc8 	bl	801dd9e <__swhatbuf_r>
 801de0e:	9900      	ldr	r1, [sp, #0]
 801de10:	4605      	mov	r5, r0
 801de12:	4630      	mov	r0, r6
 801de14:	f7ff faf6 	bl	801d404 <_malloc_r>
 801de18:	b948      	cbnz	r0, 801de2e <__smakebuf_r+0x44>
 801de1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de1e:	059a      	lsls	r2, r3, #22
 801de20:	d4ef      	bmi.n	801de02 <__smakebuf_r+0x18>
 801de22:	f023 0303 	bic.w	r3, r3, #3
 801de26:	f043 0302 	orr.w	r3, r3, #2
 801de2a:	81a3      	strh	r3, [r4, #12]
 801de2c:	e7e3      	b.n	801ddf6 <__smakebuf_r+0xc>
 801de2e:	89a3      	ldrh	r3, [r4, #12]
 801de30:	6020      	str	r0, [r4, #0]
 801de32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de36:	81a3      	strh	r3, [r4, #12]
 801de38:	9b00      	ldr	r3, [sp, #0]
 801de3a:	6163      	str	r3, [r4, #20]
 801de3c:	9b01      	ldr	r3, [sp, #4]
 801de3e:	6120      	str	r0, [r4, #16]
 801de40:	b15b      	cbz	r3, 801de5a <__smakebuf_r+0x70>
 801de42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de46:	4630      	mov	r0, r6
 801de48:	f000 f84e 	bl	801dee8 <_isatty_r>
 801de4c:	b128      	cbz	r0, 801de5a <__smakebuf_r+0x70>
 801de4e:	89a3      	ldrh	r3, [r4, #12]
 801de50:	f023 0303 	bic.w	r3, r3, #3
 801de54:	f043 0301 	orr.w	r3, r3, #1
 801de58:	81a3      	strh	r3, [r4, #12]
 801de5a:	89a3      	ldrh	r3, [r4, #12]
 801de5c:	431d      	orrs	r5, r3
 801de5e:	81a5      	strh	r5, [r4, #12]
 801de60:	e7cf      	b.n	801de02 <__smakebuf_r+0x18>

0801de62 <_raise_r>:
 801de62:	291f      	cmp	r1, #31
 801de64:	b538      	push	{r3, r4, r5, lr}
 801de66:	4604      	mov	r4, r0
 801de68:	460d      	mov	r5, r1
 801de6a:	d904      	bls.n	801de76 <_raise_r+0x14>
 801de6c:	2316      	movs	r3, #22
 801de6e:	6003      	str	r3, [r0, #0]
 801de70:	f04f 30ff 	mov.w	r0, #4294967295
 801de74:	bd38      	pop	{r3, r4, r5, pc}
 801de76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801de78:	b112      	cbz	r2, 801de80 <_raise_r+0x1e>
 801de7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801de7e:	b94b      	cbnz	r3, 801de94 <_raise_r+0x32>
 801de80:	4620      	mov	r0, r4
 801de82:	f000 f853 	bl	801df2c <_getpid_r>
 801de86:	462a      	mov	r2, r5
 801de88:	4601      	mov	r1, r0
 801de8a:	4620      	mov	r0, r4
 801de8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de90:	f000 b83a 	b.w	801df08 <_kill_r>
 801de94:	2b01      	cmp	r3, #1
 801de96:	d00a      	beq.n	801deae <_raise_r+0x4c>
 801de98:	1c59      	adds	r1, r3, #1
 801de9a:	d103      	bne.n	801dea4 <_raise_r+0x42>
 801de9c:	2316      	movs	r3, #22
 801de9e:	6003      	str	r3, [r0, #0]
 801dea0:	2001      	movs	r0, #1
 801dea2:	e7e7      	b.n	801de74 <_raise_r+0x12>
 801dea4:	2400      	movs	r4, #0
 801dea6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801deaa:	4628      	mov	r0, r5
 801deac:	4798      	blx	r3
 801deae:	2000      	movs	r0, #0
 801deb0:	e7e0      	b.n	801de74 <_raise_r+0x12>
	...

0801deb4 <raise>:
 801deb4:	4b02      	ldr	r3, [pc, #8]	; (801dec0 <raise+0xc>)
 801deb6:	4601      	mov	r1, r0
 801deb8:	6818      	ldr	r0, [r3, #0]
 801deba:	f7ff bfd2 	b.w	801de62 <_raise_r>
 801debe:	bf00      	nop
 801dec0:	20000248 	.word	0x20000248

0801dec4 <_fstat_r>:
 801dec4:	b538      	push	{r3, r4, r5, lr}
 801dec6:	4d07      	ldr	r5, [pc, #28]	; (801dee4 <_fstat_r+0x20>)
 801dec8:	2300      	movs	r3, #0
 801deca:	4604      	mov	r4, r0
 801decc:	4608      	mov	r0, r1
 801dece:	4611      	mov	r1, r2
 801ded0:	602b      	str	r3, [r5, #0]
 801ded2:	f7e2 fefa 	bl	8000cca <_fstat>
 801ded6:	1c43      	adds	r3, r0, #1
 801ded8:	d102      	bne.n	801dee0 <_fstat_r+0x1c>
 801deda:	682b      	ldr	r3, [r5, #0]
 801dedc:	b103      	cbz	r3, 801dee0 <_fstat_r+0x1c>
 801dede:	6023      	str	r3, [r4, #0]
 801dee0:	bd38      	pop	{r3, r4, r5, pc}
 801dee2:	bf00      	nop
 801dee4:	2000ace4 	.word	0x2000ace4

0801dee8 <_isatty_r>:
 801dee8:	b538      	push	{r3, r4, r5, lr}
 801deea:	4d06      	ldr	r5, [pc, #24]	; (801df04 <_isatty_r+0x1c>)
 801deec:	2300      	movs	r3, #0
 801deee:	4604      	mov	r4, r0
 801def0:	4608      	mov	r0, r1
 801def2:	602b      	str	r3, [r5, #0]
 801def4:	f7e2 fef9 	bl	8000cea <_isatty>
 801def8:	1c43      	adds	r3, r0, #1
 801defa:	d102      	bne.n	801df02 <_isatty_r+0x1a>
 801defc:	682b      	ldr	r3, [r5, #0]
 801defe:	b103      	cbz	r3, 801df02 <_isatty_r+0x1a>
 801df00:	6023      	str	r3, [r4, #0]
 801df02:	bd38      	pop	{r3, r4, r5, pc}
 801df04:	2000ace4 	.word	0x2000ace4

0801df08 <_kill_r>:
 801df08:	b538      	push	{r3, r4, r5, lr}
 801df0a:	4d07      	ldr	r5, [pc, #28]	; (801df28 <_kill_r+0x20>)
 801df0c:	2300      	movs	r3, #0
 801df0e:	4604      	mov	r4, r0
 801df10:	4608      	mov	r0, r1
 801df12:	4611      	mov	r1, r2
 801df14:	602b      	str	r3, [r5, #0]
 801df16:	f7e2 fe77 	bl	8000c08 <_kill>
 801df1a:	1c43      	adds	r3, r0, #1
 801df1c:	d102      	bne.n	801df24 <_kill_r+0x1c>
 801df1e:	682b      	ldr	r3, [r5, #0]
 801df20:	b103      	cbz	r3, 801df24 <_kill_r+0x1c>
 801df22:	6023      	str	r3, [r4, #0]
 801df24:	bd38      	pop	{r3, r4, r5, pc}
 801df26:	bf00      	nop
 801df28:	2000ace4 	.word	0x2000ace4

0801df2c <_getpid_r>:
 801df2c:	f7e2 be64 	b.w	8000bf8 <_getpid>

0801df30 <_init>:
 801df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df32:	bf00      	nop
 801df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df36:	bc08      	pop	{r3}
 801df38:	469e      	mov	lr, r3
 801df3a:	4770      	bx	lr

0801df3c <_fini>:
 801df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df3e:	bf00      	nop
 801df40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df42:	bc08      	pop	{r3}
 801df44:	469e      	mov	lr, r3
 801df46:	4770      	bx	lr
