
Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da4  08019038  08019038  00029038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bddc  0801bddc  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bddc  0801bddc  0002bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bde4  0801bde4  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bde4  0801bde4  0002bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bde8  0801bde8  0002bde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0801bdec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003025c  2**0
                  CONTENTS
 10 .bss          0000a52c  2000025c  2000025c  0003025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a788  2000a788  0003025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a6d5  00000000  00000000  000302cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007de9  00000000  00000000  0005a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001eb0  00000000  00000000  00062790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017e8  00000000  00000000  00064640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032841  00000000  00000000  00065e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003597d  00000000  00000000  00098669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2074  00000000  00000000  000cdfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000084bc  00000000  00000000  001b005c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001b8518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019020 	.word	0x08019020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	08019020 	.word	0x08019020

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 f864 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81a 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8d6 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f8ac 	bl	80006d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000580:	f000 f880 	bl	8000684 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000584:	f016 fd8e 	bl	80170a4 <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 8000588:	f007 fd24 	bl	8007fd4 <MX_LWIP_Init>
  MX_FATFS_Init();
 800058c:	f007 fcb8 	bl	8007f00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
  HAL_UART_Receive_DMA(&huart3, RX_buff, sizeof(RX_buff));
 8000590:	221e      	movs	r2, #30
 8000592:	4904      	ldr	r1, [pc, #16]	; (80005a4 <main+0x38>)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x3c>)
 8000596:	f005 f857 	bl	8005648 <HAL_UART_Receive_DMA>
  //tcp_server_init();
  tcp_client_init();
 800059a:	f000 fd11 	bl	8000fc0 <tcp_client_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart3, TX_buff, sizeof(TX_buff),0xFFFF);
	  //HAL_Delay(5000);
	  MX_LWIP_Process();
 800059e:	f007 fe59 	bl	8008254 <MX_LWIP_Process>
 80005a2:	e7fc      	b.n	800059e <main+0x32>
 80005a4:	20000380 	.word	0x20000380
 80005a8:	20000278 	.word	0x20000278

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f017 fe6b 	bl	8018296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <SystemClock_Config+0xd0>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <SystemClock_Config+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xd4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fac9 	bl	8004bc8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f8dc 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fd2a 	bl	80050b8 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f8c5 	bl	80007f8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800066e:	f004 fe09 	bl	8005284 <HAL_RCC_EnableCSS>
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_USART3_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006bc:	f004 ff03 	bl	80054c6 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 f897 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000278 	.word	0x20000278
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200c      	movs	r0, #12
 8000700:	f001 f90d 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000704:	200c      	movs	r0, #12
 8000706:	f001 f926 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200e      	movs	r0, #14
 8000710:	f001 f905 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000714:	200e      	movs	r0, #14
 8000716:	f001 f91e 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x24>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d104      	bne.n	80007e6 <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_DMA(&huart3, RX_buff, sizeof(RX_buff));
 80007dc:	221e      	movs	r2, #30
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <HAL_UART_RxCpltCallback+0x28>)
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <HAL_UART_RxCpltCallback+0x24>)
 80007e2:	f004 ff31 	bl	8005648 <HAL_UART_Receive_DMA>
#ifndef COM_PORT_USB
		byteNum++;
		wr = 1;
#endif
	}
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000278 	.word	0x20000278
 80007f4:	20000380 	.word	0x20000380

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <HAL_UART_MspInit+0x150>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 8091 	bne.w	800099a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <HAL_UART_MspInit+0x154>)
 8000882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <HAL_UART_MspInit+0x154>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4837      	ldr	r0, [pc, #220]	; (80009ac <HAL_UART_MspInit+0x158>)
 80008ce:	f002 fd61 	bl	8003394 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80008d2:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008d4:	4a37      	ldr	r2, [pc, #220]	; (80009b4 <HAL_UART_MspInit+0x160>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80008d8:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e0:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000912:	4827      	ldr	r0, [pc, #156]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000914:	f001 f83a 	bl	800198c <HAL_DMA_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800091e:	f7ff ff6b 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000930:	4a22      	ldr	r2, [pc, #136]	; (80009bc <HAL_UART_MspInit+0x168>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800093e:	2240      	movs	r2, #64	; 0x40
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000970:	f001 f80c 	bl	800198c <HAL_DMA_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800097a:	f7ff ff3d 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000982:	639a      	str	r2, [r3, #56]	; 0x38
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2027      	movs	r0, #39	; 0x27
 8000990:	f000 ffc5 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000994:	2027      	movs	r0, #39	; 0x27
 8000996:	f000 ffde 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004800 	.word	0x40004800
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	200002c0 	.word	0x200002c0
 80009b4:	40026028 	.word	0x40026028
 80009b8:	20000320 	.word	0x20000320
 80009bc:	40026058 	.word	0x40026058

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009c4:	f004 fd64 	bl	8005490 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x8>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 fe66 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <DMA1_Stream1_IRQHandler+0x10>)
 8000a1e:	f001 f94d 	bl	8001cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200002c0 	.word	0x200002c0

08000a2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Stream3_IRQHandler+0x10>)
 8000a32:	f001 f943 	bl	8001cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000320 	.word	0x20000320

08000a40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USART3_IRQHandler+0x10>)
 8000a46:	f004 fe25 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, RX_buff, sizeof(RX_buff));
  //HAL_UART_Transmit_IT(&huart3, TX_buff_it, sizeof(TX_buff_it));

  /* USER CODE END USART3_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000278 	.word	0x20000278

08000a54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <OTG_FS_IRQHandler+0x10>)
 8000a5a:	f002 ff7b 	bl	8003954 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20009a54 	.word	0x20009a54

08000a68 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <OTG_HS_IRQHandler+0x10>)
 8000a6e:	f002 ff71 	bl	8003954 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20009f38 	.word	0x20009f38

08000a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_kill>:

int _kill(int pid, int sig)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <_kill+0x20>)
 8000a98:	2216      	movs	r2, #22
 8000a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	2000a778 	.word	0x2000a778

08000ab0 <_exit>:

void _exit (int status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffe5 	bl	8000a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ac2:	e7fe      	b.n	8000ac2 <_exit+0x12>

08000ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
  }

  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
  }
  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d205      	bcs.n	8000bdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <_sbrk+0x6c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200003a4 	.word	0x200003a4
 8000c08:	2000a788 	.word	0x2000a788
 8000c0c:	2000a778 	.word	0x2000a778

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <tcp_client_send>:
static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void input_config_data();

static void tcp_client_send(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	struct pbuf *ptrBuf;
	err_t wr_err = ERR_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]


	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000c42:	e02d      	b.n	8000ca0 <tcp_client_send+0x6c>
	{
		ptrBuf = es->p;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]

		wr_err = tcp_write(newpcb, ptrBuf->payload, ptrBuf->len, TCP_WRITE_FLAG_COPY);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6859      	ldr	r1, [r3, #4]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	895a      	ldrh	r2, [r3, #10]
 8000c52:	2301      	movs	r3, #1
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f011 fefd 	bl	8012a54 <tcp_write>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8000c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d11c      	bne.n	8000ca0 <tcp_client_send+0x6c>
		{
			u16_t len;
			int cnt;

			len = ptrBuf->len;
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	895b      	ldrh	r3, [r3, #10]
 8000c6a:	81fb      	strh	r3, [r7, #14]

			es->p = ptrBuf->next;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	605a      	str	r2, [r3, #4]

			if (es->p != NULL)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <tcp_client_send+0x52>
			{
				pbuf_ref(es->p);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f00d fa97 	bl	800e1b4 <pbuf_ref>

			}

			do
			{
				cnt = pbuf_free(ptrBuf);
 8000c86:	6938      	ldr	r0, [r7, #16]
 8000c88:	f00d f9f4 	bl	800e074 <pbuf_free>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60bb      	str	r3, [r7, #8]

			}
			while(cnt == 0);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f7      	beq.n	8000c86 <tcp_client_send+0x52>

			tcp_recved(newpcb, len);
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f00d ffd8 	bl	800ec50 <tcp_recved>
	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10b      	bne.n	8000cc0 <tcp_client_send+0x8c>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <tcp_client_send+0x8c>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	895a      	ldrh	r2, [r3, #10]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d9c1      	bls.n	8000c44 <tcp_client_send+0x10>

		}

	}

}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <tcp_client_handler>:

static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	461e      	mov	r6, r3
	//struct tcp_client_struct *esTX;

	char bufRX[es->p->len];
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	8959      	ldrh	r1, [r3, #10]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	b28b      	uxth	r3, r1
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4698      	mov	r8, r3
 8000cea:	4691      	mov	r9, r2
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d00:	b28b      	uxth	r3, r1
 8000d02:	2200      	movs	r2, #0
 8000d04:	461c      	mov	r4, r3
 8000d06:	4615      	mov	r5, r2
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	00eb      	lsls	r3, r5, #3
 8000d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d16:	00e2      	lsls	r2, r4, #3
 8000d18:	460b      	mov	r3, r1
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	ebad 0d03 	sub.w	sp, sp, r3
 8000d24:	466b      	mov	r3, sp
 8000d26:	3300      	adds	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]

	memset((void *)bufRX,'\0', es->p->len);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	895b      	ldrh	r3, [r3, #10]
 8000d30:	461a      	mov	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f017 faae 	bl	8018296 <memset>

	strncpy (bufRX, es->p->payload, es->p->len);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	895b      	ldrh	r3, [r3, #10]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f017 faac 	bl	80182a6 <strncpy>

	strncpy (tcpRX, es->p->payload, es->p->len);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	6859      	ldr	r1, [r3, #4]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	895b      	ldrh	r3, [r3, #10]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <tcp_client_handler+0xbc>)
 8000d5e:	f017 faa2 	bl	80182a6 <strncpy>

	HAL_UART_Transmit_DMA(&huart3, bufRX, es->p->len);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	895b      	ldrh	r3, [r3, #10]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <tcp_client_handler+0xc0>)
 8000d6e:	f004 fbfb 	bl	8005568 <HAL_UART_Transmit_DMA>

	//tcp_client_send(newpcb, es);

	//pbuf_free(es->p);

	esBuff = es;
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <tcp_client_handler+0xc4>)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	46b5      	mov	sp, r6




}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d84:	200003b0 	.word	0x200003b0
 8000d88:	20000278 	.word	0x20000278
 8000d8c:	200003c4 	.word	0x200003c4

08000d90 <tcp_client_connectin_close>:

static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]

	tcp_arg(newpcb, NULL);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f00e ff2f 	bl	800fc00 <tcp_arg>
	tcp_recv(newpcb, NULL);
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f00e ff3d 	bl	800fc24 <tcp_recv>
	tcp_sent(newpcb, NULL);
 8000daa:	2100      	movs	r1, #0
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f00e ff5b 	bl	800fc68 <tcp_sent>
	tcp_poll(newpcb, NULL, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f00e ff9a 	bl	800fcf0 <tcp_poll>
	tcp_err(newpcb, NULL);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f00e ff74 	bl	800fcac <tcp_err>

	mem_free(es);
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f00b ff79 	bl	800ccbc <mem_free>

	tcp_close(newpcb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f00d fdf0 	bl	800e9b0 <tcp_close>

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <input_config_data>:

static void input_config_data(struct entry_struct *newEntry, char *msg, int msgSize, int del, const int byteN)
{
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	b08c      	sub	sp, #48	; 0x30
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	466b      	mov	r3, sp
 8000dea:	469a      	mov	sl, r3

	char NumStr = newEntry->NumStr;//REMOTE_IP_ADDRESS{Num = 0,Num = 1,Num = 2,Num = 3}, one Num of REMOTE_IP_ADDRESS is three strCnt of UserRxBufferFS
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	77bb      	strb	r3, [r7, #30]
	char NumColum = newEntry->NumColum;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	785b      	ldrb	r3, [r3, #1]
 8000df6:	777b      	strb	r3, [r7, #29]
	uint8_t *pStore = newEntry->pstore;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	int Num = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
	int strCntRX = 0;//UserRxBufferFS{strCnt = 0,strCnt = 1,strCnt = 2,strCnt = 3,strCnt = ...}
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
	char ipBuffchr[NumColum];
 8000e06:	7f7e      	ldrb	r6, [r7, #29]
 8000e08:	4633      	mov	r3, r6
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	b2f3      	uxtb	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	4698      	mov	r8, r3
 8000e14:	4691      	mov	r9, r2
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e2a:	b2f3      	uxtb	r3, r6
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	461c      	mov	r4, r3
 8000e30:	4615      	mov	r5, r2
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	00eb      	lsls	r3, r5, #3
 8000e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e40:	00e2      	lsls	r2, r4, #3
 8000e42:	4633      	mov	r3, r6
 8000e44:	3307      	adds	r3, #7
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e4e:	466b      	mov	r3, sp
 8000e50:	3300      	adds	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
	int ipBuffint = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
	int strCntBuff = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]

	memset(pStore, '\0', NumStr);
 8000e5c:	7fbb      	ldrb	r3, [r7, #30]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e64:	f017 fa17 	bl	8018296 <memset>
	memset(ipBuffchr, '\0', NumColum);
 8000e68:	7f7b      	ldrb	r3, [r7, #29]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f017 fa11 	bl	8018296 <memset>

	HAL_Delay(del*1000);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fc4e 	bl	8001720 <HAL_Delay>

#ifdef COM_PORT_USB
	CDC_Transmit_FS((uint8_t *)msg, (uint16_t)msgSize);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	68b8      	ldr	r0, [r7, #8]
 8000e8c:	f016 fa00 	bl	8017290 <CDC_Transmit_FS>
#else
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, (uint16_t)msgSize);
#endif

	while (byteNum < byteN + 1)
 8000e90:	bf00      	nop
 8000e92:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <input_config_data+0x1dc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dafa      	bge.n	8000e92 <input_config_data+0xba>
	{
		;
	}

	if (wr)
 8000e9c:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <input_config_data+0x1e0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 8081 	beq.w	8000fa8 <input_config_data+0x1d0>
	{
		while (Num < NumStr)
 8000ea6:	e054      	b.n	8000f52 <input_config_data+0x17a>
#else
				while ((char)RX_buff[strCntRX] != '.' & (char)RX_buff[strCntRX] != '\0' )
#endif
			{
#ifdef COM_PORT_USB
				ipBuffchr[strCntBuff] = (char)UserRxBufferFS[strCntRX];
 8000ea8:	4a44      	ldr	r2, [pc, #272]	; (8000fbc <input_config_data+0x1e4>)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	4413      	add	r3, r2
 8000eae:	7819      	ldrb	r1, [r3, #0]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
#else
				ipBuffchr[strCntBuff] = (char)RX_buff[strCntRX];
#endif

				strCntRX++;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
				strCntBuff++;
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	623b      	str	r3, [r7, #32]
			while ((char)UserRxBufferFS[strCntRX] != '.' & (char)UserRxBufferFS[strCntRX] != '\0' )
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	; (8000fbc <input_config_data+0x1e4>)
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b2e      	cmp	r3, #46	; 0x2e
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4938      	ldr	r1, [pc, #224]	; (8000fbc <input_config_data+0x1e4>)
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	440b      	add	r3, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4013      	ands	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1da      	bne.n	8000ea8 <input_config_data+0xd0>
			}

			strCntBuff = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
			strCntRX++;
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	3301      	adds	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24


			for (char n = 0;n < NumColum;n++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	77fb      	strb	r3, [r7, #31]
 8000f00:	e00c      	b.n	8000f1c <input_config_data+0x144>
			{
				ipBuffint |= (ipBuffchr[n] << 8*n);
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
			for (char n = 0;n < NumColum;n++)
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	77fb      	strb	r3, [r7, #31]
 8000f1c:	7ffa      	ldrb	r2, [r7, #31]
 8000f1e:	7f7b      	ldrb	r3, [r7, #29]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3ee      	bcc.n	8000f02 <input_config_data+0x12a>


			}

			*pStore = atoi((char *)&ipBuffint);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f016 ffbf 	bl	8017eac <atoi>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	701a      	strb	r2, [r3, #0]

			pStore++;
 8000f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f38:	3301      	adds	r3, #1
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			Num++;
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	3301      	adds	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28

			memset(ipBuffchr, '\0', sizeof(ipBuffchr));
 8000f42:	4633      	mov	r3, r6
 8000f44:	461a      	mov	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f017 f9a4 	bl	8018296 <memset>
			ipBuffint = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
		while (Num < NumStr)
 8000f52:	7fbb      	ldrb	r3, [r7, #30]
 8000f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbb5      	blt.n	8000ec6 <input_config_data+0xee>
		}

		wr = 0;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <input_config_data+0x1e0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
#ifdef COM_PORT_USB
		UserRxBufferFS[strCntRX-1] = '\n';
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <input_config_data+0x1e4>)
 8000f66:	210a      	movs	r1, #10
 8000f68:	54d1      	strb	r1, [r2, r3]
		UserRxBufferFS[strCntRX] = '\r';
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <input_config_data+0x1e4>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	4413      	add	r3, r2
 8000f70:	220d      	movs	r2, #13
 8000f72:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t *)UserRxBufferFS, (uint16_t) (strCntRX+2));
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3302      	adds	r3, #2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <input_config_data+0x1e4>)
 8000f80:	f016 f986 	bl	8017290 <CDC_Transmit_FS>
		memset(UserRxBufferFS, '\0', sizeof(UserRxBufferFS));
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <input_config_data+0x1e4>)
 8000f8c:	f017 f983 	bl	8018296 <memset>
		RX_buff[strCntRX] = '\r';
		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)RX_buff, (uint16_t) (strCntRX+2));
		memset(RX_buff, '\0', sizeof(RX_buff));
#endif

		memset(pStore, '\0', NumStr);
 8000f90:	7fbb      	ldrb	r3, [r7, #30]
 8000f92:	461a      	mov	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f98:	f017 f97d 	bl	8018296 <memset>
		memset(ipBuffchr, '\0', NumColum);
 8000f9c:	7f7b      	ldrb	r3, [r7, #29]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f017 f977 	bl	8018296 <memset>
 8000fa8:	46d5      	mov	sp, sl

	}
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb4:	200003a0 	.word	0x200003a0
 8000fb8:	200003bf 	.word	0x200003bf
 8000fbc:	20008854 	.word	0x20008854

08000fc0 <tcp_client_init>:




void tcp_client_init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af02      	add	r7, sp, #8
	err_t ret_err;
	entry = (struct entry_struct *) mem_malloc(sizeof(struct entry_struct *));
 8000fc6:	2004      	movs	r0, #4
 8000fc8:	f00b ffde 	bl	800cf88 <mem_malloc>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <tcp_client_init+0x134>)
 8000fd0:	6013      	str	r3, [r2, #0]



	entry->NumColum = 3;
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <tcp_client_init+0x134>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_IP_ADDRESS);
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <tcp_client_init+0x134>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_IP_ADDRESS;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <tcp_client_init+0x134>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <tcp_client_init+0x138>)
 8000fe8:	605a      	str	r2, [r3, #4]


	input_config_data(entry, (char *)"Enter IP address: ", strlen("Enter IP address: "), 7, byteNum);
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <tcp_client_init+0x134>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <tcp_client_init+0x13c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	2212      	movs	r2, #18
 8000ff8:	4941      	ldr	r1, [pc, #260]	; (8001100 <tcp_client_init+0x140>)
 8000ffa:	f7ff feed 	bl	8000dd8 <input_config_data>



	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <tcp_client_init+0x138>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	061a      	lsls	r2, r3, #24
 8001004:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <tcp_client_init+0x138>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	431a      	orrs	r2, r3
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <tcp_client_init+0x138>)
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	4313      	orrs	r3, r2
 8001014:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <tcp_client_init+0x138>)
 8001016:	78d2      	ldrb	r2, [r2, #3]
 8001018:	4313      	orrs	r3, r2
 800101a:	061a      	lsls	r2, r3, #24
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <tcp_client_init+0x138>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	0619      	lsls	r1, r3, #24
 8001022:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <tcp_client_init+0x138>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	4319      	orrs	r1, r3
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <tcp_client_init+0x138>)
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	430b      	orrs	r3, r1
 8001032:	4931      	ldr	r1, [pc, #196]	; (80010f8 <tcp_client_init+0x138>)
 8001034:	78c9      	ldrb	r1, [r1, #3]
 8001036:	430b      	orrs	r3, r1
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800103e:	431a      	orrs	r2, r3
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <tcp_client_init+0x138>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	0619      	lsls	r1, r3, #24
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <tcp_client_init+0x138>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	4319      	orrs	r1, r3
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <tcp_client_init+0x138>)
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	430b      	orrs	r3, r1
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <tcp_client_init+0x138>)
 8001058:	78c9      	ldrb	r1, [r1, #3]
 800105a:	430b      	orrs	r3, r1
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001062:	431a      	orrs	r2, r3
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <tcp_client_init+0x138>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	0619      	lsls	r1, r3, #24
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <tcp_client_init+0x138>)
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	4319      	orrs	r1, r3
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <tcp_client_init+0x138>)
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	430b      	orrs	r3, r1
 800107a:	491f      	ldr	r1, [pc, #124]	; (80010f8 <tcp_client_init+0x138>)
 800107c:	78c9      	ldrb	r1, [r1, #3]
 800107e:	430b      	orrs	r3, r1
 8001080:	0e1b      	lsrs	r3, r3, #24
 8001082:	4313      	orrs	r3, r2
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <tcp_client_init+0x144>)
 8001086:	6013      	str	r3, [r2, #0]

	entry->NumColum = 2;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <tcp_client_init+0x134>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2202      	movs	r2, #2
 800108e:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_PORT);
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <tcp_client_init+0x134>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_PORT;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <tcp_client_init+0x134>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <tcp_client_init+0x148>)
 800109e:	605a      	str	r2, [r3, #4]

	input_config_data(entry, (char *)"Enter PORT: ", strlen("Enter PORT: "), 1, byteNum);
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <tcp_client_init+0x134>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <tcp_client_init+0x13c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	220c      	movs	r2, #12
 80010ae:	4917      	ldr	r1, [pc, #92]	; (800110c <tcp_client_init+0x14c>)
 80010b0:	f7ff fe92 	bl	8000dd8 <input_config_data>

	cppcb = tcp_new();
 80010b4:	f00e fd9c 	bl	800fbf0 <tcp_new>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <tcp_client_init+0x150>)
 80010bc:	6013      	str	r3, [r2, #0]

	if (cppcb != NULL)
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <tcp_client_init+0x150>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <tcp_client_init+0x11e>
	{
		ret_err = tcp_connect(cppcb, &remote_ipaddr, REMOTE_PORT[0], tcp_client_connect);
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <tcp_client_init+0x150>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <tcp_client_init+0x148>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <tcp_client_init+0x154>)
 80010d2:	490c      	ldr	r1, [pc, #48]	; (8001104 <tcp_client_init+0x144>)
 80010d4:	f00d fe52 	bl	800ed7c <tcp_connect>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	else
	{
		memp_free(MEMP_TCP_PCB, cppcb);

	}
}
 80010dc:	e005      	b.n	80010ea <tcp_client_init+0x12a>
		memp_free(MEMP_TCP_PCB, cppcb);
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <tcp_client_init+0x150>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	2001      	movs	r0, #1
 80010e6:	f00c f94f 	bl	800d388 <memp_free>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200003c0 	.word	0x200003c0
 80010f8:	200003a8 	.word	0x200003a8
 80010fc:	200003a0 	.word	0x200003a0
 8001100:	08019038 	.word	0x08019038
 8001104:	200003cc 	.word	0x200003cc
 8001108:	200003ac 	.word	0x200003ac
 800110c:	0801904c 	.word	0x0801904c
 8001110:	200003c8 	.word	0x200003c8
 8001114:	08001119 	.word	0x08001119

08001118 <tcp_client_connect>:

static err_t tcp_client_connect(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4613      	mov	r3, r2
 8001124:	71fb      	strb	r3, [r7, #7]
	err_t ret_err;

	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)memp_malloc(sizeof(struct tcp_client_struct *));
 8001126:	2004      	movs	r0, #4
 8001128:	f00c f8be 	bl	800d2a8 <memp_malloc>
 800112c:	6138      	str	r0, [r7, #16]

//	es = (struct tcp_client_struct *)arg;

	if (es != NULL)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01f      	beq.n	8001174 <tcp_client_connect+0x5c>
	{

		es->p = NULL;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
		es->pcb = newpcb;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	609a      	str	r2, [r3, #8]
		es->state = ES_C_CONNECT;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]

		//*pwr = 1;

		tcp_arg(newpcb, es);
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f00e fd59 	bl	800fc00 <tcp_arg>

		tcp_recv(newpcb, tcp_client_recive);
 800114e:	490f      	ldr	r1, [pc, #60]	; (800118c <tcp_client_connect+0x74>)
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f00e fd67 	bl	800fc24 <tcp_recv>

		tcp_err(newpcb, tcp_client_err);
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <tcp_client_connect+0x78>)
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f00e fda7 	bl	800fcac <tcp_err>

		tcp_poll(newpcb, tcp_client_poll, 5);
 800115e:	2205      	movs	r2, #5
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <tcp_client_connect+0x7c>)
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f00e fdc4 	bl	800fcf0 <tcp_poll>

		esBuff = es;
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <tcp_client_connect+0x80>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6013      	str	r3, [r2, #0]

		ret_err = ERR_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]
 8001172:	e005      	b.n	8001180 <tcp_client_connect+0x68>

	}
	else
	{

		tcp_client_connectin_close(newpcb, es);
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff fe0a 	bl	8000d90 <tcp_client_connectin_close>

		ret_err = ERR_MEM;
 800117c:	23ff      	movs	r3, #255	; 0xff
 800117e:	75fb      	strb	r3, [r7, #23]
	}

	return ret_err;
 8001180:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0800119d 	.word	0x0800119d
 8001190:	08001309 	.word	0x08001309
 8001194:	08001249 	.word	0x08001249
 8001198:	200003c4 	.word	0x200003c4

0800119c <tcp_client_recive>:
	return ret_err;

}

static err_t tcp_client_recive(void *arg, struct tcp_pcb *newpcb, struct pbuf *p, err_t err)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)arg;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	613b      	str	r3, [r7, #16]

	if (es == NULL)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <tcp_client_recive+0x34>
	{
		es->state = ES_C_CLOSE;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2204      	movs	r2, #4
 80011b8:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <tcp_client_recive+0x2e>
		{
			tcp_client_connectin_close(newpcb, es);
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	68b8      	ldr	r0, [r7, #8]
 80011c6:	f7ff fde3 	bl	8000d90 <tcp_client_connectin_close>

		}

		ret_err = ERR_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]
 80011ce:	e034      	b.n	800123a <tcp_client_recive+0x9e>
	}
	else if (err != ERR_OK)
 80011d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <tcp_client_recive+0x4c>
	{
		ret_err = err;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	75fb      	strb	r3, [r7, #23]

		pbuf_free(es->p);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c ff47 	bl	800e074 <pbuf_free>
 80011e6:	e028      	b.n	800123a <tcp_client_recive+0x9e>

	}
	else
	{
		switch (es->state)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d002      	beq.n	80011f6 <tcp_client_recive+0x5a>
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d013      	beq.n	800121c <tcp_client_recive+0x80>
				pbuf_free(p);

				break;

			default:
				break;
 80011f4:	e021      	b.n	800123a <tcp_client_recive+0x9e>
				es->p = p;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
				tcp_recved(newpcb, p->tot_len);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	891b      	ldrh	r3, [r3, #8]
 8001200:	4619      	mov	r1, r3
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f00d fd24 	bl	800ec50 <tcp_recved>
				tcp_client_handler(newpcb, es);
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f7ff fd5c 	bl	8000cc8 <tcp_client_handler>
				pbuf_free(p);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f00c ff2f 	bl	800e074 <pbuf_free>
				ret_err = ERR_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]
				break;
 800121a:	e00e      	b.n	800123a <tcp_client_recive+0x9e>
				tcp_recved(newpcb, p->tot_len);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	891b      	ldrh	r3, [r3, #8]
 8001220:	4619      	mov	r1, r3
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f00d fd14 	bl	800ec50 <tcp_recved>
				pbuf_free(es->p);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	f00c ff21 	bl	800e074 <pbuf_free>
				pbuf_free(p);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f00c ff1e 	bl	800e074 <pbuf_free>
				break;
 8001238:	bf00      	nop

	}



	return ret_err;
 800123a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <tcp_client_poll>:



static err_t tcp_client_poll(void *arg, struct tcp_pcb *newpcb)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	struct tcp_client_struct *es;

	struct tcp_client_struct *esTX;

	es = (struct tcp_client_struct *) arg;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]


	if (es != NULL)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d04a      	beq.n	80012f2 <tcp_client_poll+0xaa>
	{
		if (wr == 1)
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <tcp_client_poll+0xb4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d12c      	bne.n	80012be <tcp_client_poll+0x76>
		{
			esTX = es;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	60bb      	str	r3, [r7, #8]

			//esTX->p = es->p;

			esTX->p = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct tcp_client_struct), PBUF_POOL);
 8001268:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800126c:	210c      	movs	r1, #12
 800126e:	2036      	movs	r0, #54	; 0x36
 8001270:	f00c fc1c 	bl	800daac <pbuf_alloc>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	605a      	str	r2, [r3, #4]

			esTX->p->payload = (void *)"Hello from Client\n\r";
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <tcp_client_poll+0xb8>)
 8001280:	605a      	str	r2, [r3, #4]

			esTX->p->len = sizeof("Hello from Client\n\r");
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2214      	movs	r2, #20
 8001288:	815a      	strh	r2, [r3, #10]

			esTX->p->tot_len = esTX->p->tot_len - esTX->p->len + sizeof("Hello from Client\n\r");
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	891a      	ldrh	r2, [r3, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	895b      	ldrh	r3, [r3, #10]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b29a      	uxth	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	3214      	adds	r2, #20
 80012a0:	b292      	uxth	r2, r2
 80012a2:	811a      	strh	r2, [r3, #8]
			//tcp_sent(newpcb, tcp_client_sent);

			tcp_client_send(newpcb, esTX);
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fcc4 	bl	8000c34 <tcp_client_send>

			pbuf_free(esTX->p);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00c fedf 	bl	800e074 <pbuf_free>

			esTX->p = NULL;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	e014      	b.n	80012e8 <tcp_client_poll+0xa0>

		}
		else if (es->p != NULL)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <tcp_client_poll+0x8a>

//			tcp_sent(newpcb, tcp_client_sent);
//
//			tcp_client_send(newpcb, es);

			pbuf_free(es->p);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c fed2 	bl	800e074 <pbuf_free>
 80012d0:	e00a      	b.n	80012e8 <tcp_client_poll+0xa0>

		}

		else
		{
			if (es->state == ES_C_CLOSE)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d106      	bne.n	80012e8 <tcp_client_poll+0xa0>
			{
				tcp_client_connectin_close(newpcb, es);
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff fd57 	bl	8000d90 <tcp_client_connectin_close>

				mem_free(es);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f00b fcea 	bl	800ccbc <mem_free>

			}
		}

		esBuff->state = es->state;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <tcp_client_poll+0xbc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	701a      	strb	r2, [r3, #0]

	}

	return ERR_OK;
 80012f2:	2300      	movs	r3, #0

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200003bf 	.word	0x200003bf
 8001300:	0801905c 	.word	0x0801905c
 8001304:	200003c4 	.word	0x200003c4

08001308 <tcp_client_err>:
static void tcp_client_err(void *arg, err_t err)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *) arg;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]

	mem_free(es);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f00b fccf 	bl	800ccbc <mem_free>

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800132c:	f7ff fc70 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f017 f805 	bl	8018364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f907 	bl	800056c <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 800136c:	0801bdec 	.word	0x0801bdec
  ldr r2, =_sbss
 8001370:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001374:	2000a788 	.word	0x2000a788

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>

0800137a <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <DP83848_RegisterBusIO+0x28>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <DP83848_RegisterBusIO+0x28>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <DP83848_RegisterBusIO+0x28>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e014      	b.n	80013d2 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d17c      	bne.n	80014f8 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2220      	movs	r2, #32
 8001410:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e01c      	b.n	8001452 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	2119      	movs	r1, #25
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	4798      	blx	r3
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	da03      	bge.n	8001434 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 800142c:	f06f 0304 	mvn.w	r3, #4
 8001430:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001432:	e00b      	b.n	800144c <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	d105      	bne.n	800144c <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
         break;
 800144a:	e005      	b.n	8001458 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b1f      	cmp	r3, #31
 8001456:	d9df      	bls.n	8001418 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b1f      	cmp	r3, #31
 800145e:	d902      	bls.n	8001466 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001460:	f06f 0302 	mvn.w	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d145      	bne.n	80014f8 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6810      	ldr	r0, [r2, #0]
 8001474:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001478:	2100      	movs	r1, #0
 800147a:	4798      	blx	r3
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	db37      	blt.n	80014f2 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6810      	ldr	r0, [r2, #0]
 800148a:	f107 0208 	add.w	r2, r7, #8
 800148e:	2100      	movs	r1, #0
 8001490:	4798      	blx	r3
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	db28      	blt.n	80014ea <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4798      	blx	r3
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80014a2:	e01c      	b.n	80014de <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4798      	blx	r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014b6:	d80e      	bhi.n	80014d6 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6810      	ldr	r0, [r2, #0]
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	2100      	movs	r1, #0
 80014c6:	4798      	blx	r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da07      	bge.n	80014de <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80014ce:	f06f 0304 	mvn.w	r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
                 break;
 80014d4:	e010      	b.n	80014f8 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80014d6:	f06f 0301 	mvn.w	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
               break;
 80014dc:	e00c      	b.n	80014f8 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1dd      	bne.n	80014a4 <DP83848_Init+0xc6>
 80014e8:	e006      	b.n	80014f8 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80014ea:	f06f 0304 	mvn.w	r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	e002      	b.n	80014f8 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80014f2:	f06f 0303 	mvn.w	r3, #3
 80014f6:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d112      	bne.n	8001524 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4798      	blx	r3
 8001504:	4603      	mov	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001508:	bf00      	nop
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4798      	blx	r3
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800151c:	d9f5      	bls.n	800150a <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001524:	693b      	ldr	r3, [r7, #16]
 }
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6810      	ldr	r0, [r2, #0]
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	2101      	movs	r1, #1
 8001548:	4798      	blx	r3
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001550:	f06f 0304 	mvn.w	r3, #4
 8001554:	e06e      	b.n	8001634 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6810      	ldr	r0, [r2, #0]
 800155e:	f107 020c 	add.w	r2, r7, #12
 8001562:	2101      	movs	r1, #1
 8001564:	4798      	blx	r3
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	da02      	bge.n	8001572 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800156c:	f06f 0304 	mvn.w	r3, #4
 8001570:	e060      	b.n	8001634 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800157c:	2301      	movs	r3, #1
 800157e:	e059      	b.n	8001634 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6810      	ldr	r0, [r2, #0]
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	2100      	movs	r1, #0
 800158e:	4798      	blx	r3
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	da02      	bge.n	800159c <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001596:	f06f 0304 	mvn.w	r3, #4
 800159a:	e04b      	b.n	8001634 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d11b      	bne.n	80015de <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <DP83848_GetLinkState+0x90>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80015ba:	2302      	movs	r3, #2
 80015bc:	e03a      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e033      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80015d6:	2304      	movs	r3, #4
 80015d8:	e02c      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80015da:	2305      	movs	r3, #5
 80015dc:	e02a      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6810      	ldr	r0, [r2, #0]
 80015e6:	f107 020c 	add.w	r2, r7, #12
 80015ea:	2110      	movs	r1, #16
 80015ec:	4798      	blx	r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da02      	bge.n	80015fa <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80015f4:	f06f 0304 	mvn.w	r3, #4
 80015f8:	e01c      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001604:	2306      	movs	r3, #6
 8001606:	e015      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0306 	and.w	r3, r3, #6
 800160e:	2b04      	cmp	r3, #4
 8001610:	d101      	bne.n	8001616 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001612:	2302      	movs	r3, #2
 8001614:	e00e      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0306 	and.w	r3, r3, #6
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001620:	2303      	movs	r3, #3
 8001622:	e007      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0306 	and.w	r3, r3, #6
 800162a:	2b06      	cmp	r3, #6
 800162c:	d101      	bne.n	8001632 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800162e:	2304      	movs	r3, #4
 8001630:	e000      	b.n	8001634 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001632:	2305      	movs	r3, #5
    }
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_Init+0x40>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_Init+0x40>)
 8001652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x40>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f94f 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff f8c8 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f967 	bl	8001972 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f92f 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	200003d0 	.word	0x200003d0

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200003d0 	.word	0x200003d0

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff feb6 	bl	8001708 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e099      	b.n	8001adc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e00f      	b.n	80019ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fe9d 	bl	8001708 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d908      	bls.n	80019ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e078      	b.n	8001adc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e8      	bne.n	80019ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_DMA_Init+0x158>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d117      	bne.n	8001aae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fb01 	bl	8002098 <DMA_CheckFifoParam>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e016      	b.n	8001adc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fab8 	bl	800202c <DMA_CalcBaseAndBitshift>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	223f      	movs	r2, #63	; 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f010803f 	.word	0xf010803f

08001ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_Start_IT+0x26>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e040      	b.n	8001b90 <HAL_DMA_Start_IT+0xa8>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d12f      	bne.n	8001b82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa4a 	bl	8001fd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0216 	orr.w	r2, r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e005      	b.n	8001b8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba6:	f7ff fdaf 	bl	8001708 <HAL_GetTick>
 8001baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d008      	beq.n	8001bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e052      	b.n	8001c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0216 	bic.w	r2, r2, #22
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <HAL_DMA_Abort+0x62>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0208 	bic.w	r2, r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	e013      	b.n	8001c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1c:	f7ff fd74 	bl	8001708 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d90c      	bls.n	8001c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e015      	b.n	8001c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e4      	bne.n	8001c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	223f      	movs	r2, #63	; 0x3f
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d004      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00c      	b.n	8001cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2205      	movs	r2, #5
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_DMA_IRQHandler+0x248>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a8e      	ldr	r2, [pc, #568]	; (8001f08 <HAL_DMA_IRQHandler+0x24c>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01a      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2208      	movs	r2, #8
 8001d16:	409a      	lsls	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f043 0202 	orr.w	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2204      	movs	r2, #4
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2204      	movs	r2, #4
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2210      	movs	r2, #16
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d043      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03c      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2210      	movs	r2, #16
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d018      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d108      	bne.n	8001dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d024      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
 8001dea:	e01f      	b.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
 8001dfc:	e016      	b.n	8001e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0208 	bic.w	r2, r2, #8
 8001e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2220      	movs	r2, #32
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 808f 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8087 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2220      	movs	r2, #32
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d136      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_IRQHandler+0x1da>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	223f      	movs	r2, #63	; 0x3f
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d07e      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3
        }
        return;
 8001ed2:	e079      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01d      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d031      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
 8001f00:	e02c      	b.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000
 8001f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e01e      	b.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0210 	bic.w	r2, r2, #16
 8001f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d032      	beq.n	8001fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2205      	movs	r2, #5
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d307      	bcc.n	8001fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x2cc>
 8001fa2:	e000      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc8:	bf00      	nop
    }
  }
}
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d108      	bne.n	8002010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800200e:	e007      	b.n	8002020 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	60da      	str	r2, [r3, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3b10      	subs	r3, #16
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <DMA_CalcBaseAndBitshift+0x64>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <DMA_CalcBaseAndBitshift+0x68>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d909      	bls.n	800206e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	1d1a      	adds	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	659a      	str	r2, [r3, #88]	; 0x58
 800206c:	e007      	b.n	800207e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	aaaaaaab 	.word	0xaaaaaaab
 8002094:	0801bae0 	.word	0x0801bae0

08002098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d856      	bhi.n	8002166 <DMA_CheckFifoParam+0xce>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <DMA_CheckFifoParam+0x28>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020e3 	.word	0x080020e3
 80020c8:	080020d1 	.word	0x080020d1
 80020cc:	08002167 	.word	0x08002167
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d046      	beq.n	800216a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e0:	e043      	b.n	800216a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ea:	d140      	bne.n	800216e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e03d      	b.n	800216e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fa:	d121      	bne.n	8002140 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d837      	bhi.n	8002172 <DMA_CheckFifoParam+0xda>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <DMA_CheckFifoParam+0x70>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002119 	.word	0x08002119
 800210c:	0800211f 	.word	0x0800211f
 8002110:	08002119 	.word	0x08002119
 8002114:	08002131 	.word	0x08002131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      break;
 800211c:	e030      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d025      	beq.n	8002176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212e:	e022      	b.n	8002176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002138:	d11f      	bne.n	800217a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213e:	e01c      	b.n	800217a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d903      	bls.n	800214e <DMA_CheckFifoParam+0xb6>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d003      	beq.n	8002154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800214c:	e018      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      break;
 8002152:	e015      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
      break;
 8002164:	e00b      	b.n	800217e <DMA_CheckFifoParam+0xe6>
      break;
 8002166:	bf00      	nop
 8002168:	e00a      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e008      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e006      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e004      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e002      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;   
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
    }
  } 
  
  return status; 
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06c      	b.n	800227c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2223      	movs	r2, #35	; 0x23
 80021b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 fa09 	bl	80085cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_ETH_Init+0xf4>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_ETH_Init+0xf4>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_ETH_Init+0xf4>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_ETH_Init+0xf8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_ETH_Init+0xf8>)
 80021dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_ETH_Init+0xf8>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4927      	ldr	r1, [pc, #156]	; (8002288 <HAL_ETH_Init+0xf8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_ETH_Init+0xf8>)
 80021f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800220a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800220c:	f7ff fa7c 	bl	8001708 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002212:	e011      	b.n	8002238 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002214:	f7ff fa78 	bl	8001708 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002222:	d909      	bls.n	8002238 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2204      	movs	r2, #4
 8002228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	22e0      	movs	r2, #224	; 0xe0
 8002230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e021      	b.n	800227c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e4      	bne.n	8002214 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fdfc 	bl	8002e48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fea3 	bl	8002f9c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fef9 	bl	800304e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	461a      	mov	r2, r3
 8002262:	2100      	movs	r1, #0
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fe61 	bl	8002f2c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2210      	movs	r2, #16
 8002276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	40013800 	.word	0x40013800

0800228c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229a:	2b10      	cmp	r3, #16
 800229c:	d150      	bne.n	8002340 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2223      	movs	r2, #35	; 0x23
 80022a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2204      	movs	r2, #4
 80022aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f9fd 	bl	80026ac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fa28 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0204 	orr.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff fa15 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fc42 	bl	8002b88 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800231a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002332:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2223      	movs	r2, #35	; 0x23
 8002338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002358:	2b23      	cmp	r3, #35	; 0x23
 800235a:	d14a      	bne.n	80023f2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2223      	movs	r2, #35	; 0x23
 8002360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800237a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002392:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff f9b7 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fbe4 	bl	8002b88 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0208 	bic.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff f9a1 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07c      	b.n	800251c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	2b23      	cmp	r3, #35	; 0x23
 800242a:	d176      	bne.n	800251a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800242c:	2200      	movs	r2, #0
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fe79 	bl	8003128 <ETH_Prepare_Tx_Descriptors>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f043 0202 	orr.w	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e065      	b.n	800251c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002450:	f3bf 8f4f 	dsb	sy
}
 8002454:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3206      	adds	r2, #6
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	2b03      	cmp	r3, #3
 8002474:	d904      	bls.n	8002480 <HAL_ETH_Transmit+0x84>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	1f1a      	subs	r2, r3, #4
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3106      	adds	r1, #6
 800248c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002494:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002496:	f7ff f937 	bl	8001708 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800249c:	e037      	b.n	800250e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d011      	beq.n	80024d4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f043 0208 	orr.w	r2, r3, #8
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e023      	b.n	800251c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024da:	d018      	beq.n	800250e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024dc:	f7ff f914 	bl	8001708 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d302      	bcc.n	80024f2 <HAL_ETH_Transmit+0xf6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002508:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e006      	b.n	800251c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dbc3      	blt.n	800249e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0a8      	b.n	80026a2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002556:	2b23      	cmp	r3, #35	; 0x23
 8002558:	d001      	beq.n	800255e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0a1      	b.n	80026a2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	3212      	adds	r2, #18
 800256a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	f1c3 0304 	rsb	r3, r3, #4
 8002578:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800257a:	e06a      	b.n	8002652 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_ETH_ReadData+0x88>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d040      	beq.n	800262e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025e0:	3b04      	subs	r3, #4
 80025e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002608:	461a      	mov	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f006 f98d 	bl	800892c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	441a      	add	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2200      	movs	r2, #0
 800262c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d902      	bls.n	8002640 <HAL_ETH_ReadData+0x11c>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b04      	subs	r3, #4
 800263e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	3212      	adds	r2, #18
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002656:	2b00      	cmp	r3, #0
 8002658:	db06      	blt.n	8002668 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d202      	bcs.n	8002668 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d089      	beq.n	800257c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	441a      	add	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f815 	bl	80026ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80026b8:	2301      	movs	r3, #1
 80026ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	3212      	adds	r2, #18
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80026d4:	e03d      	b.n	8002752 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d112      	bne.n	8002704 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4618      	mov	r0, r3
 80026e4:	f006 f8f2 	bl	80088cc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	74fb      	strb	r3, [r7, #19]
 80026f2:	e007      	b.n	8002704 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	461a      	mov	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	461a      	mov	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <ETH_UpdateDescriptor+0xfc>)
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	e003      	b.n	8002722 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002720:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d902      	bls.n	8002740 <ETH_UpdateDescriptor+0x94>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b04      	subs	r3, #4
 800273e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	3212      	adds	r2, #18
 8002746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274a:	617b      	str	r3, [r7, #20]
      desccount--;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	3b01      	subs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <ETH_UpdateDescriptor+0xb2>
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1bb      	bne.n	80026d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	429a      	cmp	r2, r3
 8002766:	d01a      	beq.n	800279e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002772:	f3bf 8f5f 	dmb	sy
}
 8002776:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	18ca      	adds	r2, r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002790:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	80004600 	.word	0x80004600

080027ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 031c 	and.w	r3, r3, #28
 80027c8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	02db      	lsls	r3, r3, #11
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0302 	bic.w	r3, r3, #2
 80027ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80027fc:	f7fe ff84 	bl	8001708 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002802:	e00d      	b.n	8002820 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002804:	f7fe ff80 	bl	8001708 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d301      	bcc.n	8002818 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e010      	b.n	800283a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ec      	bne.n	8002804 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 031c 	and.w	r3, r3, #28
 800285e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	b29b      	uxth	r3, r3
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800289c:	f7fe ff34 	bl	8001708 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028a2:	e00d      	b.n	80028c0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80028a4:	f7fe ff30 	bl	8001708 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b2:	d301      	bcc.n	80028b8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e009      	b.n	80028cc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ec      	bne.n	80028a4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d9      	b.n	8002a9c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e00b      	b.n	8002ad4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d105      	bne.n	8002ad2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f883 	bl	8002bd4 <ETH_SetMACConfig>

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 031c 	bic.w	r3, r3, #28
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002af4:	f002 fc98 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8002af8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d908      	bls.n	8002b14 <HAL_ETH_SetMDIOClockRange+0x38>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d804      	bhi.n	8002b14 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e027      	b.n	8002b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d908      	bls.n	8002b2e <HAL_ETH_SetMDIOClockRange+0x52>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d204      	bcs.n	8002b2e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f043 030c 	orr.w	r3, r3, #12
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e01a      	b.n	8002b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d303      	bcc.n	8002b3e <HAL_ETH_SetMDIOClockRange+0x62>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d911      	bls.n	8002b62 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d908      	bls.n	8002b58 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d804      	bhi.n	8002b58 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e005      	b.n	8002b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e000      	b.n	8002b64 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002b62:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	01312cff 	.word	0x01312cff
 8002b78:	02160ebf 	.word	0x02160ebf
 8002b7c:	03938700 	.word	0x03938700
 8002b80:	05f5e0ff 	.word	0x05f5e0ff
 8002b84:	08f0d17f 	.word	0x08f0d17f

08002b88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002baa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe fdb1 	bl	8001720 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bc8:	6193      	str	r3, [r2, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <ETH_SetMACConfig+0x15c>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7c1b      	ldrb	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <ETH_SetMACConfig+0x28>
 8002bf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bfa:	e000      	b.n	8002bfe <ETH_SetMACConfig+0x2a>
 8002bfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7c5b      	ldrb	r3, [r3, #17]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_SetMACConfig+0x38>
 8002c06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c0a:	e000      	b.n	8002c0e <ETH_SetMACConfig+0x3a>
 8002c0c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c0e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7fdb      	ldrb	r3, [r3, #31]
 8002c1a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c1c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	7f92      	ldrb	r2, [r2, #30]
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	d102      	bne.n	8002c32 <ETH_SetMACConfig+0x5e>
 8002c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c30:	e000      	b.n	8002c34 <ETH_SetMACConfig+0x60>
 8002c32:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
 8002c3a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c3c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d102      	bne.n	8002c5c <ETH_SetMACConfig+0x88>
 8002c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5a:	e000      	b.n	8002c5e <ETH_SetMACConfig+0x8a>
 8002c5c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7bdb      	ldrb	r3, [r3, #15]
 8002c64:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c66:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c74:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c76:	4313      	orrs	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe fd46 	bl	8001720 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d101      	bne.n	8002cc2 <ETH_SetMACConfig+0xee>
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	e000      	b.n	8002cc4 <ETH_SetMACConfig+0xf0>
 8002cc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cc4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002cd2:	2a01      	cmp	r2, #1
 8002cd4:	d101      	bne.n	8002cda <ETH_SetMACConfig+0x106>
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	e000      	b.n	8002cdc <ETH_SetMACConfig+0x108>
 8002cda:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002cdc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d101      	bne.n	8002cec <ETH_SetMACConfig+0x118>
 8002ce8:	2204      	movs	r2, #4
 8002cea:	e000      	b.n	8002cee <ETH_SetMACConfig+0x11a>
 8002cec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002cf6:	2a01      	cmp	r2, #1
 8002cf8:	d101      	bne.n	8002cfe <ETH_SetMACConfig+0x12a>
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	e000      	b.n	8002d00 <ETH_SetMACConfig+0x12c>
 8002cfe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d00:	4313      	orrs	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe fd01 	bl	8001720 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	ff20810f 	.word	0xff20810f

08002d34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <ETH_SetDMAConfig+0x110>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <ETH_SetDMAConfig+0x2c>
 8002d5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d5e:	e000      	b.n	8002d62 <ETH_SetDMAConfig+0x2e>
 8002d60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	7b5b      	ldrb	r3, [r3, #13]
 8002d66:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d68:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	7f52      	ldrb	r2, [r2, #29]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d102      	bne.n	8002d78 <ETH_SetDMAConfig+0x44>
 8002d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d76:	e000      	b.n	8002d7a <ETH_SetDMAConfig+0x46>
 8002d78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d7a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7b9b      	ldrb	r3, [r3, #14]
 8002d80:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d82:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7f1b      	ldrb	r3, [r3, #28]
 8002d8e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	7f9b      	ldrb	r3, [r3, #30]
 8002d96:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d98:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002da6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fe fca8 	bl	8001720 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002de8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002dee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002df4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dfc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002dfe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7fe fc79 	bl	8001720 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	f8de3f23 	.word	0xf8de3f23

08002e48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b0a6      	sub	sp, #152	; 0x98
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e84:	2300      	movs	r3, #0
 8002e86:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002eaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ebc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fe86 	bl	8002bd4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002efc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff08 	bl	8002d34 <ETH_SetDMAConfig>
}
 8002f24:	bf00      	nop
 8002f26:	3798      	adds	r7, #152	; 0x98
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3305      	adds	r3, #5
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	3204      	adds	r2, #4
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <ETH_MACAddressConfig+0x68>)
 8002f4e:	4413      	add	r3, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3303      	adds	r3, #3
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	061a      	lsls	r2, r3, #24
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3302      	adds	r3, #2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	4313      	orrs	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <ETH_MACAddressConfig+0x6c>)
 8002f7e:	4413      	add	r3, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	6013      	str	r3, [r2, #0]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40028040 	.word	0x40028040
 8002f98:	40028044 	.word	0x40028044

08002f9c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e03e      	b.n	8003028 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	3206      	adds	r2, #6
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d80c      	bhi.n	800300c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	e004      	b.n	8003016 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d9bd      	bls.n	8002faa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003040:	611a      	str	r2, [r3, #16]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e046      	b.n	80030ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6919      	ldr	r1, [r3, #16]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003098:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80030a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	3212      	adds	r2, #18
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d80c      	bhi.n	80030da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6919      	ldr	r1, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	e004      	b.n	80030e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d9b5      	bls.n	800305c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311a:	60da      	str	r2, [r3, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003128:	b480      	push	{r7}
 800312a:	b08d      	sub	sp, #52	; 0x34
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3318      	adds	r3, #24
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316a:	d007      	beq.n	800317c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	3304      	adds	r3, #4
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800317c:	2302      	movs	r3, #2
 800317e:	e103      	b.n	8003388 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	3301      	adds	r3, #1
 8003184:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003198:	f023 031f 	bic.w	r3, r3, #31
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	6852      	ldr	r2, [r2, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	431a      	orrs	r2, r3
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003206:	f3bf 8f5f 	dmb	sy
}
 800320a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003218:	e084      	b.n	8003324 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e005      	b.n	8003246 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	3301      	adds	r3, #1
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b03      	cmp	r3, #3
 8003250:	d902      	bls.n	8003258 <ETH_Prepare_Tx_Descriptors+0x130>
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	3b04      	subs	r3, #4
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800327a:	d007      	beq.n	800328c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	3304      	adds	r3, #4
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d029      	beq.n	80032e0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003298:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	e019      	b.n	80032d4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80032a0:	f3bf 8f5f 	dmb	sy
}
 80032a4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	3301      	adds	r3, #1
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d902      	bls.n	80032c4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	3b04      	subs	r3, #4
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032cc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	3301      	adds	r3, #1
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3e1      	bcc.n	80032a0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	e053      	b.n	8003388 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	3301      	adds	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80032fe:	f023 031f 	bic.w	r3, r3, #31
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	431a      	orrs	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3301      	adds	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003312:	f3bf 8f5f 	dmb	sy
}
 8003316:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f af76 	bne.w	800321a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d006      	beq.n	8003342 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335e:	6979      	ldr	r1, [r7, #20]
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	3304      	adds	r3, #4
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003382:	b662      	cpsie	i
}
 8003384:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3734      	adds	r7, #52	; 0x34
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e16b      	b.n	8003688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 815a 	bne.w	8003682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d005      	beq.n	80033e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d130      	bne.n	8003448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80b4 	beq.w	8003682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a5f      	ldr	r2, [pc, #380]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_GPIO_Init+0x310>)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_GPIO_Init+0x314>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <HAL_GPIO_Init+0x226>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_GPIO_Init+0x318>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x222>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_GPIO_Init+0x31c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x21e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_GPIO_Init+0x320>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x21a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4e      	ldr	r2, [pc, #312]	; (80036b8 <HAL_GPIO_Init+0x324>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x216>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4d      	ldr	r2, [pc, #308]	; (80036bc <HAL_GPIO_Init+0x328>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x212>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4c      	ldr	r2, [pc, #304]	; (80036c0 <HAL_GPIO_Init+0x32c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4b      	ldr	r2, [pc, #300]	; (80036c4 <HAL_GPIO_Init+0x330>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x20a>
 800359a:	2307      	movs	r3, #7
 800359c:	e00e      	b.n	80035bc <HAL_GPIO_Init+0x228>
 800359e:	2308      	movs	r3, #8
 80035a0:	e00c      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00a      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ba:	2300      	movs	r3, #0
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035cc:	4935      	ldr	r1, [pc, #212]	; (80036a4 <HAL_GPIO_Init+0x310>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_GPIO_Init+0x334>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fe:	4a32      	ldr	r2, [pc, #200]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003628:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f67f ae90 	bls.w	80033b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e101      	b.n	80038e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f014 f819 	bl	8017730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800370c:	d102      	bne.n	8003714 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 f9c6 	bl	8006aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7c1a      	ldrb	r2, [r3, #16]
 8003726:	f88d 2000 	strb.w	r2, [sp]
 800372a:	3304      	adds	r3, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	f003 f8a5 	bl	800687c <USB_CoreInit>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0ce      	b.n	80038e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f003 f9be 	bl	8006acc <USB_SetCurrentMode>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0bf      	b.n	80038e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	e04a      	b.n	80037fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3315      	adds	r3, #21
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3314      	adds	r3, #20
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	b298      	uxth	r0, r3
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	332e      	adds	r3, #46	; 0x2e
 80037a4:	4602      	mov	r2, r0
 80037a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3318      	adds	r3, #24
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	331c      	adds	r3, #28
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3320      	adds	r3, #32
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	3301      	adds	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	429a      	cmp	r2, r3
 8003806:	d3af      	bcc.n	8003768 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e044      	b.n	8003898 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800383a:	7bfa      	ldrb	r2, [r7, #15]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	3301      	adds	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3b5      	bcc.n	800380e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7c1a      	ldrb	r2, [r3, #16]
 80038aa:	f88d 2000 	strb.w	r2, [sp]
 80038ae:	3304      	adds	r3, #4
 80038b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b2:	f003 f957 	bl	8006b64 <USB_DevInit>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e00c      	b.n	80038e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 f99b 	bl	8007c16 <USB_DevDisconnect>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_Start+0x1c>
 8003902:	2302      	movs	r3, #2
 8003904:	e022      	b.n	800394c <HAL_PCD_Start+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 f8a8 	bl	8006a88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 f949 	bl	8007bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b08d      	sub	sp, #52	; 0x34
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f004 fa07 	bl	8007d7e <USB_GetMode>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 848c 	bne.w	8004290 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f004 f96b 	bl	8007c58 <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8482 	beq.w	800428e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 f958 	bl	8007c58 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f002 0202 	and.w	r2, r2, #2
 80039c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 f946 	bl	8007c58 <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d161      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0210 	bic.w	r2, r2, #16
 80039e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 020f 	and.w	r2, r3, #15
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	0c5b      	lsrs	r3, r3, #17
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d124      	bne.n	8003a5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d035      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6a38      	ldr	r0, [r7, #32]
 8003a32:	f003 ff7d 	bl	8007930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a42:	441a      	add	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a54:	441a      	add	r2, r3
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	615a      	str	r2, [r3, #20]
 8003a5a:	e016      	b.n	8003a8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	0c5b      	lsrs	r3, r3, #17
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d110      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a6e:	2208      	movs	r2, #8
 8003a70:	4619      	mov	r1, r3
 8003a72:	6a38      	ldr	r0, [r7, #32]
 8003a74:	f003 ff5c 	bl	8007930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a84:	441a      	add	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0210 	orr.w	r2, r2, #16
 8003a98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 f8da 	bl	8007c58 <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aae:	f040 80a7 	bne.w	8003c00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f8df 	bl	8007c7e <USB_ReadDevAllOutEpInterrupt>
 8003ac0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ac2:	e099      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 808e 	beq.w	8003bec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 f903 	bl	8007ce6 <USB_ReadDevOutEPInterrupt>
 8003ae0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2301      	movs	r3, #1
 8003afc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fecf 	bl	80048a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2308      	movs	r3, #8
 8003b20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 ffa5 	bl	8004a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	461a      	mov	r2, r3
 8003b42:	2310      	movs	r3, #16
 8003b44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d030      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d109      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d108      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f013 ff0e 	bl	80179bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	2302      	movs	r3, #2
 8003bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2320      	movs	r3, #32
 8003bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f47f af62 	bne.w	8003ac4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 f827 	bl	8007c58 <USB_ReadInterrupts>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c14:	f040 80db 	bne.w	8003dce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 f848 	bl	8007cb2 <USB_ReadDevAllInEpInterrupt>
 8003c22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c28:	e0cd      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80c2 	beq.w	8003dba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 f86e 	bl	8007d22 <USB_ReadDevInEPInterrupt>
 8003c46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d057      	beq.n	8003d02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69f9      	ldr	r1, [r7, #28]
 8003c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c72:	4013      	ands	r3, r2
 8003c74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	461a      	mov	r2, r3
 8003c84:	2301      	movs	r3, #1
 8003c86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	799b      	ldrb	r3, [r3, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d132      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3320      	adds	r3, #32
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4403      	add	r3, r0
 8003cb0:	331c      	adds	r3, #28
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4419      	add	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4403      	add	r3, r0
 8003cc4:	3320      	adds	r3, #32
 8003cc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x3a2>
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3324      	adds	r3, #36	; 0x24
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	f004 f875 	bl	8007de0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f013 fdd8 	bl	80178b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	461a      	mov	r2, r3
 8003d36:	2310      	movs	r3, #16
 8003d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	461a      	mov	r2, r3
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d023      	beq.n	8003da8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d62:	6a38      	ldr	r0, [r7, #32]
 8003d64:	f003 f862 	bl	8006e2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3310      	adds	r3, #16
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d108      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2200      	movs	r2, #0
 8003d88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f013 fe25 	bl	80179e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	461a      	mov	r2, r3
 8003da4:	2302      	movs	r3, #2
 8003da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fce8 	bl	800478a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f af2e 	bne.w	8003c2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 ff40 	bl	8007c58 <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de2:	d122      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fecf 	bl	8004bb0 <HAL_PCDEx_LPM_Callback>
 8003e12:	e002      	b.n	8003e1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f013 fdc3 	bl	80179a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 ff12 	bl	8007c58 <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3e:	d112      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f013 fd7f 	bl	8017954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e64:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fef4 	bl	8007c58 <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	f040 80b7 	bne.w	8003fec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2110      	movs	r1, #16
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 ffc7 	bl	8006e2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea2:	e046      	b.n	8003f32 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ed6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	3301      	adds	r3, #1
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	791b      	ldrb	r3, [r3, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d3b2      	bcc.n	8003ea4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7bdb      	ldrb	r3, [r3, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6a:	f043 030b 	orr.w	r3, r3, #11
 8003f6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f043 030b 	orr.w	r3, r3, #11
 8003f84:	6453      	str	r3, [r2, #68]	; 0x44
 8003f86:	e015      	b.n	8003fb4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fae:	f043 030b 	orr.w	r3, r3, #11
 8003fb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f003 ff02 	bl	8007de0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fe31 	bl	8007c58 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004000:	d123      	bne.n	800404a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f003 fec7 	bl	8007d9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f002 ff84 	bl	8006f1e <USB_GetDevSpeed>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681c      	ldr	r4, [r3, #0]
 8004022:	f001 fa01 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8004026:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800402c:	461a      	mov	r2, r3
 800402e:	4620      	mov	r0, r4
 8004030:	f002 fc88 	bl	8006944 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f013 fc64 	bl	8017902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004048:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fe02 	bl	8007c58 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b08      	cmp	r3, #8
 800405c:	d10a      	bne.n	8004074 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f013 fc41 	bl	80178e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f002 0208 	and.w	r2, r2, #8
 8004072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fded 	bl	8007c58 <USB_ReadInterrupts>
 800407e:	4603      	mov	r3, r0
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d123      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004094:	2301      	movs	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	e014      	b.n	80040c4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fb08 	bl	80046ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	3301      	adds	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	791b      	ldrb	r3, [r3, #4]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d3e4      	bcc.n	800409a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fdbf 	bl	8007c58 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e4:	d13c      	bne.n	8004160 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e6:	2301      	movs	r3, #1
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	e02b      	b.n	8004144 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3318      	adds	r3, #24
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d115      	bne.n	800413e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004112:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004114:	2b00      	cmp	r3, #0
 8004116:	da12      	bge.n	800413e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3317      	adds	r3, #23
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fac8 	bl	80046ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	791b      	ldrb	r3, [r3, #4]
 8004148:	461a      	mov	r2, r3
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	4293      	cmp	r3, r2
 800414e:	d3cd      	bcc.n	80040ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800415e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fd77 	bl	8007c58 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004174:	d156      	bne.n	8004224 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004176:	2301      	movs	r3, #1
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	e045      	b.n	8004208 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d12e      	bne.n	8004202 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da2b      	bge.n	8004202 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80041b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d121      	bne.n	8004202 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f203 2357 	addw	r3, r3, #599	; 0x257
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fe:	6053      	str	r3, [r2, #4]
            break;
 8004200:	e008      	b.n	8004214 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	3301      	adds	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	461a      	mov	r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	4293      	cmp	r3, r2
 8004212:	d3b3      	bcc.n	800417c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f003 fd15 	bl	8007c58 <USB_ReadInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d10a      	bne.n	8004250 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f013 fbe2 	bl	8017a04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800424e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fcff 	bl	8007c58 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b04      	cmp	r3, #4
 8004262:	d115      	bne.n	8004290 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f013 fbd2 	bl	8017a20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	e000      	b.n	8004290 <HAL_PCD_IRQHandler+0x93c>
      return;
 800428e:	bf00      	nop
    }
  }
}
 8004290:	3734      	adds	r7, #52	; 0x34
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}

08004296 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_PCD_SetAddress+0x1a>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e012      	b.n	80042d6 <HAL_PCD_SetAddress+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 fc5e 	bl	8007b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	4608      	mov	r0, r1
 80042e8:	4611      	mov	r1, r2
 80042ea:	461a      	mov	r2, r3
 80042ec:	4603      	mov	r3, r0
 80042ee:	70fb      	strb	r3, [r7, #3]
 80042f0:	460b      	mov	r3, r1
 80042f2:	803b      	strh	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004300:	2b00      	cmp	r3, #0
 8004302:	da0f      	bge.n	8004324 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	3310      	adds	r3, #16
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	3304      	adds	r3, #4
 800431a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	705a      	strb	r2, [r3, #1]
 8004322:	e00f      	b.n	8004344 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	f003 020f 	and.w	r2, r3, #15
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	3304      	adds	r3, #4
 800433c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004350:	883a      	ldrh	r2, [r7, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	78ba      	ldrb	r2, [r7, #2]
 800435a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800436e:	78bb      	ldrb	r3, [r7, #2]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d102      	bne.n	800437a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_PCD_EP_Open+0xaa>
 8004384:	2302      	movs	r3, #2
 8004386:	e00e      	b.n	80043a6 <HAL_PCD_EP_Open+0xc8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f002 fde6 	bl	8006f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80043a4:	7afb      	ldrb	r3, [r7, #11]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da0f      	bge.n	80043e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	3310      	adds	r3, #16
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	3304      	adds	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	705a      	strb	r2, [r3, #1]
 80043e0:	e00f      	b.n	8004402 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_PCD_EP_Close+0x6e>
 8004418:	2302      	movs	r3, #2
 800441a:	e00e      	b.n	800443a <HAL_PCD_EP_Close+0x8c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	4618      	mov	r0, r3
 800442c:	f002 fe24 	bl	8007078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	460b      	mov	r3, r1
 8004450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	3304      	adds	r3, #4
 800446a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2200      	movs	r2, #0
 800447c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004484:	7afb      	ldrb	r3, [r7, #11]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	b2da      	uxtb	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	799b      	ldrb	r3, [r3, #6]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d102      	bne.n	800449e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	f002 fec1 	bl	8007230 <USB_EPStartXfer>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	460b      	mov	r3, r1
 80044f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3310      	adds	r3, #16
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2200      	movs	r2, #0
 8004520:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2201      	movs	r2, #1
 8004526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004528:	7afb      	ldrb	r3, [r7, #11]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	b2da      	uxtb	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	799b      	ldrb	r3, [r3, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	799b      	ldrb	r3, [r3, #6]
 800454a:	461a      	mov	r2, r3
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	f002 fe6f 	bl	8007230 <USB_EPStartXfer>

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	7912      	ldrb	r2, [r2, #4]
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e04f      	b.n	800461a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800457a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457e:	2b00      	cmp	r3, #0
 8004580:	da0f      	bge.n	80045a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	3310      	adds	r3, #16
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	705a      	strb	r2, [r3, #1]
 80045a0:	e00d      	b.n	80045be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_PCD_EP_SetStall+0x82>
 80045da:	2302      	movs	r3, #2
 80045dc:	e01d      	b.n	800461a <HAL_PCD_EP_SetStall+0xbe>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 f9f7 	bl	80079e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7999      	ldrb	r1, [r3, #6]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800460a:	461a      	mov	r2, r3
 800460c:	f003 fbe8 	bl	8007de0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	7912      	ldrb	r2, [r2, #4]
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e042      	b.n	80046c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da0f      	bge.n	8004668 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3310      	adds	r3, #16
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	705a      	strb	r2, [r3, #1]
 8004666:	e00f      	b.n	8004688 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 020f 	and.w	r2, r3, #15
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_PCD_EP_ClrStall+0x86>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e00e      	b.n	80046c6 <HAL_PCD_EP_ClrStall+0xa4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fa00 	bl	8007abc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da0c      	bge.n	80046fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 020f 	and.w	r2, r3, #15
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	3310      	adds	r3, #16
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	3304      	adds	r3, #4
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e00c      	b.n	8004716 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	3304      	adds	r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 f81f 	bl	8007760 <USB_EPStopXfer>
 8004722:	4603      	mov	r3, r0
 8004724:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004726:	7afb      	ldrb	r3, [r7, #11]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_PCD_EP_Flush+0x1a>
 8004746:	2302      	movs	r3, #2
 8004748:	e01b      	b.n	8004782 <HAL_PCD_EP_Flush+0x52>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8004752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da09      	bge.n	800476e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f002 fb60 	bl	8006e2c <USB_FlushTxFifo>
 800476c:	e004      	b.n	8004778 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fb8c 	bl	8006e90 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08a      	sub	sp, #40	; 0x28
 800478e:	af02      	add	r7, sp, #8
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	3310      	adds	r3, #16
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	3304      	adds	r3, #4
 80047b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d901      	bls.n	80047c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d902      	bls.n	80047de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3303      	adds	r3, #3
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047e6:	e02a      	b.n	800483e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d902      	bls.n	8004804 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3303      	adds	r3, #3
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68d9      	ldr	r1, [r3, #12]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4603      	mov	r3, r0
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f003 f847 	bl	80078b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	d809      	bhi.n	8004868 <PCD_WriteEmptyTxFifo+0xde>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800485c:	429a      	cmp	r2, r3
 800485e:	d203      	bcs.n	8004868 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1bf      	bne.n	80047e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	d811      	bhi.n	8004898 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	43db      	mvns	r3, r3
 800488e:	6939      	ldr	r1, [r7, #16]
 8004890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004894:	4013      	ands	r3, r2
 8004896:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	333c      	adds	r3, #60	; 0x3c
 80048bc:	3304      	adds	r3, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	799b      	ldrb	r3, [r3, #6]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d17b      	bne.n	80049d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f240 80b9 	bls.w	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80b3 	beq.w	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490c:	6093      	str	r3, [r2, #8]
 800490e:	e0a7      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	461a      	mov	r2, r3
 8004928:	2320      	movs	r3, #32
 800492a:	6093      	str	r3, [r2, #8]
 800492c:	e098      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 8093 	bne.w	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a4b      	ldr	r2, [pc, #300]	; (8004a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d90f      	bls.n	8004962 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	6093      	str	r3, [r2, #8]
 8004960:	e07e      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	3304      	adds	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	0159      	lsls	r1, r3, #5
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	440b      	add	r3, r1
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d114      	bne.n	80049c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80049ac:	461a      	mov	r2, r3
 80049ae:	2101      	movs	r1, #1
 80049b0:	f003 fa16 	bl	8007de0 <USB_EP0_OutStart>
 80049b4:	e006      	b.n	80049c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	441a      	add	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f012 ff56 	bl	801787c <HAL_PCD_DataOutStageCallback>
 80049d0:	e046      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d124      	bne.n	8004a24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	6093      	str	r3, [r2, #8]
 80049f8:	e032      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2320      	movs	r3, #32
 8004a14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f012 ff2d 	bl	801787c <HAL_PCD_DataOutStageCallback>
 8004a22:	e01d      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d114      	bne.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2100      	movs	r1, #0
 8004a50:	f003 f9c6 	bl	8007de0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f012 ff0e 	bl	801787c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	4f54300a 	.word	0x4f54300a
 8004a70:	4f54310a 	.word	0x4f54310a

08004a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	333c      	adds	r3, #60	; 0x3c
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <PCD_EP_OutSetupPacket_int+0x88>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d90e      	bls.n	8004ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f012 fec5 	bl	8017858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <PCD_EP_OutSetupPacket_int+0x88>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d90c      	bls.n	8004af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	799b      	ldrb	r3, [r3, #6]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d108      	bne.n	8004af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2101      	movs	r1, #1
 8004aec:	f003 f978 	bl	8007de0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	4f54300a 	.word	0x4f54300a

08004b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b1e:	883b      	ldrh	r3, [r7, #0]
 8004b20:	0419      	lsls	r1, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b2c:	e028      	b.n	8004b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e00d      	b.n	8004b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	3340      	adds	r3, #64	; 0x40
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4413      	add	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3ec      	bcc.n	8004b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b68:	883b      	ldrh	r3, [r7, #0]
 8004b6a:	0418      	lsls	r0, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6819      	ldr	r1, [r3, #0]
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	4302      	orrs	r2, r0
 8004b78:	3340      	adds	r3, #64	; 0x40
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e267      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d075      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be6:	4b88      	ldr	r3, [pc, #544]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b85      	ldr	r3, [pc, #532]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d112      	bne.n	8004c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfe:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	4b7e      	ldr	r3, [pc, #504]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05b      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x108>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d157      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e242      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCC_OscConfig+0x74>
 8004c2e:	4b76      	ldr	r3, [pc, #472]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a75      	ldr	r2, [pc, #468]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e01d      	b.n	8004c78 <HAL_RCC_OscConfig+0xb0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x98>
 8004c46:	4b70      	ldr	r3, [pc, #448]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6f      	ldr	r2, [pc, #444]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6c      	ldr	r2, [pc, #432]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCC_OscConfig+0xb0>
 8004c60:	4b69      	ldr	r3, [pc, #420]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a68      	ldr	r2, [pc, #416]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b66      	ldr	r3, [pc, #408]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fc fd42 	bl	8001708 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fc fd3e 	bl	8001708 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e207      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0xc0>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fc fd2e 	bl	8001708 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fc fd2a 	bl	8001708 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e1f3      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xe8>
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d063      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cde:	4b4a      	ldr	r3, [pc, #296]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d11c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf6:	4b44      	ldr	r3, [pc, #272]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d116      	bne.n	8004d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d02:	4b41      	ldr	r3, [pc, #260]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCC_OscConfig+0x152>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e1c7      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4937      	ldr	r1, [pc, #220]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2e:	e03a      	b.n	8004da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d38:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fc fce3 	bl	8001708 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fc fcdf 	bl	8001708 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1a8      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4925      	ldr	r1, [pc, #148]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]
 8004d78:	e015      	b.n	8004da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fc fcc2 	bl	8001708 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d88:	f7fc fcbe 	bl	8001708 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e187      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d036      	beq.n	8004e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <HAL_RCC_OscConfig+0x248>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fc fca2 	bl	8001708 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fc fc9e 	bl	8001708 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e167      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x200>
 8004de6:	e01b      	b.n	8004e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_OscConfig+0x248>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dee:	f7fc fc8b 	bl	8001708 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df4:	e00e      	b.n	8004e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df6:	f7fc fc87 	bl	8001708 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d907      	bls.n	8004e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e150      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470000 	.word	0x42470000
 8004e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ea      	bne.n	8004df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8097 	beq.w	8004f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	4b7d      	ldr	r3, [pc, #500]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a7c      	ldr	r2, [pc, #496]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b7a      	ldr	r3, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5e:	4b77      	ldr	r3, [pc, #476]	; (800503c <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d118      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6a:	4b74      	ldr	r3, [pc, #464]	; (800503c <HAL_RCC_OscConfig+0x474>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a73      	ldr	r2, [pc, #460]	; (800503c <HAL_RCC_OscConfig+0x474>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e76:	f7fc fc47 	bl	8001708 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fc fc43 	bl	8001708 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e10c      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCC_OscConfig+0x474>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x2ea>
 8004ea4:	4b64      	ldr	r3, [pc, #400]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a63      	ldr	r2, [pc, #396]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	e01c      	b.n	8004eec <HAL_RCC_OscConfig+0x324>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x30c>
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a5e      	ldr	r2, [pc, #376]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0304 	orr.w	r3, r3, #4
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a5b      	ldr	r2, [pc, #364]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0x324>
 8004ed4:	4b58      	ldr	r3, [pc, #352]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	4b55      	ldr	r3, [pc, #340]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a54      	ldr	r2, [pc, #336]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d015      	beq.n	8004f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fc fc08 	bl	8001708 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fc fc04 	bl	8001708 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0cb      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	4b49      	ldr	r3, [pc, #292]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ee      	beq.n	8004efc <HAL_RCC_OscConfig+0x334>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f20:	f7fc fbf2 	bl	8001708 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fc fbee 	bl	8001708 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0b5      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1ee      	bne.n	8004f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	4a38      	ldr	r2, [pc, #224]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80a1 	beq.w	80050a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d05c      	beq.n	800502c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d141      	bne.n	8004ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <HAL_RCC_OscConfig+0x478>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fc fbc2 	bl	8001708 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fc fbbe 	bl	8001708 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e087      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	4b27      	ldr	r3, [pc, #156]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	061b      	lsls	r3, r3, #24
 8004fca:	491b      	ldr	r1, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <HAL_RCC_OscConfig+0x478>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fb97 	bl	8001708 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fb93 	bl	8001708 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e05c      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x416>
 8004ffc:	e054      	b.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <HAL_RCC_OscConfig+0x478>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fc fb80 	bl	8001708 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500c:	f7fc fb7c 	bl	8001708 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e045      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_RCC_OscConfig+0x470>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x444>
 800502a:	e03d      	b.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e038      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
 8005038:	40023800 	.word	0x40023800
 800503c:	40007000 	.word	0x40007000
 8005040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCC_OscConfig+0x4ec>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d028      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d121      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d11a      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800507a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800507c:	4293      	cmp	r3, r2
 800507e:	d111      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	3b01      	subs	r3, #1
 800508e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800

080050b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0cc      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b68      	ldr	r3, [pc, #416]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d90c      	bls.n	80050f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b65      	ldr	r3, [pc, #404]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0b8      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d020      	beq.n	8005142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a58      	ldr	r2, [pc, #352]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005124:	4b53      	ldr	r3, [pc, #332]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a52      	ldr	r2, [pc, #328]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800512e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005130:	4b50      	ldr	r3, [pc, #320]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	494d      	ldr	r1, [pc, #308]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d044      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b47      	ldr	r3, [pc, #284]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d119      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e07f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d003      	beq.n	8005176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005172:	2b03      	cmp	r3, #3
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e06f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005186:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e067      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005196:	4b37      	ldr	r3, [pc, #220]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4934      	ldr	r1, [pc, #208]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a8:	f7fc faae 	bl	8001708 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b0:	f7fc faaa 	bl	8001708 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e04f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	4b2b      	ldr	r3, [pc, #172]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 020c 	and.w	r2, r3, #12
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1eb      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d20c      	bcs.n	8005200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b22      	ldr	r3, [pc, #136]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e032      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4916      	ldr	r1, [pc, #88]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	490e      	ldr	r1, [pc, #56]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800523e:	f000 f82d 	bl	800529c <HAL_RCC_GetSysClockFreq>
 8005242:	4602      	mov	r2, r0
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	490a      	ldr	r1, [pc, #40]	; (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 8005250:	5ccb      	ldrb	r3, [r1, r3]
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fc fa0e 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40023c00 	.word	0x40023c00
 8005274:	40023800 	.word	0x40023800
 8005278:	0801bac8 	.word	0x0801bac8
 800527c:	20000000 	.word	0x20000000
 8005280:	20000004 	.word	0x20000004

08005284 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_EnableCSS+0x14>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	4247004c 	.word	0x4247004c

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b090      	sub	sp, #64	; 0x40
 80052a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	2300      	movs	r3, #0
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ac:	2300      	movs	r3, #0
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 030c 	and.w	r3, r3, #12
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d00d      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x40>
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	f200 80a1 	bhi.w	8005408 <HAL_RCC_GetSysClockFreq+0x16c>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x34>
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ce:	e09b      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d0:	4b53      	ldr	r3, [pc, #332]	; (8005420 <HAL_RCC_GetSysClockFreq+0x184>)
 80052d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80052d4:	e09b      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d6:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCC_GetSysClockFreq+0x188>)
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052da:	e098      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052dc:	4b4f      	ldr	r3, [pc, #316]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e6:	4b4d      	ldr	r3, [pc, #308]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d028      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f2:	4b4a      	ldr	r3, [pc, #296]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	2200      	movs	r2, #0
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	627a      	str	r2, [r7, #36]	; 0x24
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005304:	2100      	movs	r1, #0
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_RCC_GetSysClockFreq+0x188>)
 8005308:	fb03 f201 	mul.w	r2, r3, r1
 800530c:	2300      	movs	r3, #0
 800530e:	fb00 f303 	mul.w	r3, r0, r3
 8005312:	4413      	add	r3, r2
 8005314:	4a43      	ldr	r2, [pc, #268]	; (8005424 <HAL_RCC_GetSysClockFreq+0x188>)
 8005316:	fba0 1202 	umull	r1, r2, r0, r2
 800531a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531c:	460a      	mov	r2, r1
 800531e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005322:	4413      	add	r3, r2
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	2200      	movs	r2, #0
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	61fa      	str	r2, [r7, #28]
 800532e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005336:	f7fa ff9b 	bl	8000270 <__aeabi_uldivmod>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4613      	mov	r3, r2
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005342:	e053      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	099b      	lsrs	r3, r3, #6
 800534a:	2200      	movs	r2, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	617a      	str	r2, [r7, #20]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005356:	f04f 0b00 	mov.w	fp, #0
 800535a:	4652      	mov	r2, sl
 800535c:	465b      	mov	r3, fp
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	0159      	lsls	r1, r3, #5
 8005368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536c:	0150      	lsls	r0, r2, #5
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	ebb2 080a 	subs.w	r8, r2, sl
 8005376:	eb63 090b 	sbc.w	r9, r3, fp
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800538a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800538e:	ebb2 0408 	subs.w	r4, r2, r8
 8005392:	eb63 0509 	sbc.w	r5, r3, r9
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	00eb      	lsls	r3, r5, #3
 80053a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a4:	00e2      	lsls	r2, r4, #3
 80053a6:	4614      	mov	r4, r2
 80053a8:	461d      	mov	r5, r3
 80053aa:	eb14 030a 	adds.w	r3, r4, sl
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	eb45 030b 	adc.w	r3, r5, fp
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053c2:	4629      	mov	r1, r5
 80053c4:	028b      	lsls	r3, r1, #10
 80053c6:	4621      	mov	r1, r4
 80053c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053cc:	4621      	mov	r1, r4
 80053ce:	028a      	lsls	r2, r1, #10
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	2200      	movs	r2, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	60fa      	str	r2, [r7, #12]
 80053dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e0:	f7fa ff46 	bl	8000270 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_GetSysClockFreq+0x180>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	3301      	adds	r3, #1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005406:	e002      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetSysClockFreq+0x184>)
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800540c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005410:	4618      	mov	r0, r3
 8005412:	3740      	adds	r7, #64	; 0x40
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	00f42400 	.word	0x00f42400
 8005424:	017d7840 	.word	0x017d7840

08005428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RCC_GetHCLKFreq+0x14>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000000 	.word	0x20000000

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff0 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	0801bad8 	.word	0x0801bad8

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800546c:	f7ff ffdc 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0b5b      	lsrs	r3, r3, #13
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	0801bad8 	.word	0x0801bad8

08005490 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d104      	bne.n	80054aa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054a0:	f000 f80a 	bl	80054b8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	701a      	strb	r2, [r3, #0]
  }
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800
 80054b4:	4002380e 	.word	0x4002380e

080054b8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e042      	b.n	800555e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fb f9b1 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	; 0x24
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005508:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 ff42 	bl	8006394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08c      	sub	sp, #48	; 0x30
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b20      	cmp	r3, #32
 8005580:	d156      	bne.n	8005630 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_UART_Transmit_DMA+0x26>
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e04f      	b.n	8005632 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4a21      	ldr	r2, [pc, #132]	; (800563c <HAL_UART_Transmit_DMA+0xd4>)
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	4a20      	ldr	r2, [pc, #128]	; (8005640 <HAL_UART_Transmit_DMA+0xd8>)
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <HAL_UART_Transmit_DMA+0xdc>)
 80055c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	2200      	movs	r2, #0
 80055d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3304      	adds	r3, #4
 80055e6:	461a      	mov	r2, r3
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	f7fc fa7d 	bl	8001ae8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	617b      	str	r3, [r7, #20]
   return(result);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005618:	627a      	str	r2, [r7, #36]	; 0x24
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6a39      	ldr	r1, [r7, #32]
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	61fb      	str	r3, [r7, #28]
   return(result);
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	08005c21 	.word	0x08005c21
 8005640:	08005cbb 	.word	0x08005cbb
 8005644:	08005e3f 	.word	0x08005e3f

08005648 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	d112      	bne.n	8005688 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_UART_Receive_DMA+0x26>
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e00b      	b.n	800568a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	461a      	mov	r2, r3
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fc28 	bl	8005ed4 <UART_Start_Receive_DMA>
 8005684:	4603      	mov	r3, r0
 8005686:	e000      	b.n	800568a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b0ba      	sub	sp, #232	; 0xe8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fd8f 	bl	8006216 <UART_Receive_IT>
      return;
 80056f8:	e25b      	b.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80de 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80d1 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f043 0201 	orr.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
 800574e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 81f2 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd1a 	bl	8006216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_UART_IRQHandler+0x17a>
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04f      	beq.n	80058ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fc22 	bl	8006058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d141      	bne.n	80058a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800584e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800585a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d9      	bne.n	8005822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	4a7e      	ldr	r2, [pc, #504]	; (8005a74 <HAL_UART_IRQHandler+0x3e0>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	4618      	mov	r0, r3
 8005884:	f7fc f9f8 	bl	8001c78 <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e00e      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9a8 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00a      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9a4 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e006      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9a0 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80058ba:	e175      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	bf00      	nop
    return;
 80058be:	e173      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 814f 	bne.w	8005b68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8148 	beq.w	8005b68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8141 	beq.w	8005b68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	f040 80b6 	bne.w	8005a78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8145 	beq.w	8005bac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800592a:	429a      	cmp	r2, r3
 800592c:	f080 813e 	bcs.w	8005bac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	f000 8088 	beq.w	8005a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800595c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800597e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800598a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d9      	bne.n	8005946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e1      	bne.n	8005992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fc f8a1 	bl	8001b98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8cb 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a72:	e09b      	b.n	8005bac <HAL_UART_IRQHandler+0x518>
 8005a74:	0800611f 	.word	0x0800611f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 808e 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8089 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ac2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e3      	bne.n	8005a9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3314      	adds	r3, #20
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005afa:	633a      	str	r2, [r7, #48]	; 0x30
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b40:	61fa      	str	r2, [r7, #28]
 8005b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	69b9      	ldr	r1, [r7, #24]
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e3      	bne.n	8005b1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f851 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b66:	e023      	b.n	8005bb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <HAL_UART_IRQHandler+0x4f4>
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fae0 	bl	8006146 <UART_Transmit_IT>
    return;
 8005b86:	e014      	b.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb20 	bl	80061e6 <UART_EndTransmit_IT>
    return;
 8005ba6:	e004      	b.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ba8:	bf00      	nop
 8005baa:	e002      	b.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bac:	bf00      	nop
 8005bae:	e000      	b.n	8005bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bb0:	bf00      	nop
  }
}
 8005bb2:	37e8      	adds	r7, #232	; 0xe8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b090      	sub	sp, #64	; 0x40
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d137      	bne.n	8005cac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3e:	2200      	movs	r2, #0
 8005c40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3314      	adds	r3, #20
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	623b      	str	r3, [r7, #32]
   return(result);
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c96:	61fa      	str	r2, [r7, #28]
 8005c98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005caa:	e002      	b.n	8005cb2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005cac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cae:	f7ff ff83 	bl	8005bb8 <HAL_UART_TxCpltCallback>
}
 8005cb2:	bf00      	nop
 8005cb4:	3740      	adds	r7, #64	; 0x40
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff7f 	bl	8005bcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b09c      	sub	sp, #112	; 0x70
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d172      	bne.n	8005dd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d18:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	667b      	str	r3, [r7, #100]	; 0x64
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d4c:	647a      	str	r2, [r7, #68]	; 0x44
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d76:	663b      	str	r3, [r7, #96]	; 0x60
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d80:	633a      	str	r2, [r7, #48]	; 0x30
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d119      	bne.n	8005dd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dc4:	61fa      	str	r2, [r7, #28]
 8005dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	2200      	movs	r2, #0
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d106      	bne.n	8005df4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dea:	4619      	mov	r1, r3
 8005dec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dee:	f7ff ff0b 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005df2:	e002      	b.n	8005dfa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005df4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005df6:	f7fa fce9 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 8005dfa:	bf00      	nop
 8005dfc:	3770      	adds	r7, #112	; 0x70
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	4619      	mov	r1, r3
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff feed 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e2e:	e002      	b.n	8005e36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff fed5 	bl	8005be0 <HAL_UART_RxHalfCpltCallback>
}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	2300      	movne	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b21      	cmp	r3, #33	; 0x21
 8005e70:	d108      	bne.n	8005e84 <UART_DMAError+0x46>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e7e:	68b8      	ldr	r0, [r7, #8]
 8005e80:	f000 f8c2 	bl	8006008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b22      	cmp	r3, #34	; 0x22
 8005ea4:	d108      	bne.n	8005eb8 <UART_DMAError+0x7a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f000 f8d0 	bl	8006058 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f7ff fe95 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b098      	sub	sp, #96	; 0x60
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2222      	movs	r2, #34	; 0x22
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	4a3e      	ldr	r2, [pc, #248]	; (8005ffc <UART_Start_Receive_DMA+0x128>)
 8005f02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	4a3d      	ldr	r2, [pc, #244]	; (8006000 <UART_Start_Receive_DMA+0x12c>)
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	4a3c      	ldr	r2, [pc, #240]	; (8006004 <UART_Start_Receive_DMA+0x130>)
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	f7fb fdd8 	bl	8001ae8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d019      	beq.n	8005f8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005faa:	63ba      	str	r2, [r7, #56]	; 0x38
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fde:	627a      	str	r2, [r7, #36]	; 0x24
 8005fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6a39      	ldr	r1, [r7, #32]
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3760      	adds	r7, #96	; 0x60
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	08005cd7 	.word	0x08005cd7
 8006000:	08005e03 	.word	0x08005e03
 8006004:	08005e3f 	.word	0x08005e3f

08006008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	61ba      	str	r2, [r7, #24]
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e5      	bne.n	8006010 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800604c:	bf00      	nop
 800604e:	3724      	adds	r7, #36	; 0x24
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b095      	sub	sp, #84	; 0x54
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006080:	643a      	str	r2, [r7, #64]	; 0x40
 8006082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d119      	bne.n	8006104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f023 0310 	bic.w	r3, r3, #16
 80060e6:	647b      	str	r3, [r7, #68]	; 0x44
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f0:	61ba      	str	r2, [r7, #24]
 80060f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	613b      	str	r3, [r7, #16]
   return(result);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006112:	bf00      	nop
 8006114:	3754      	adds	r7, #84	; 0x54
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fd5b 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b21      	cmp	r3, #33	; 0x21
 8006158:	d13e      	bne.n	80061d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d114      	bne.n	800618e <UART_Transmit_IT+0x48>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d110      	bne.n	800618e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	1c9a      	adds	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]
 800618c:	e008      	b.n	80061a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6211      	str	r1, [r2, #32]
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4619      	mov	r1, r3
 80061ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10f      	bne.n	80061d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fcd6 	bl	8005bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b08c      	sub	sp, #48	; 0x30
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b22      	cmp	r3, #34	; 0x22
 8006228:	f040 80ae 	bne.w	8006388 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006234:	d117      	bne.n	8006266 <UART_Receive_IT+0x50>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d113      	bne.n	8006266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006254:	b29a      	uxth	r2, r3
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	629a      	str	r2, [r3, #40]	; 0x28
 8006264:	e026      	b.n	80062b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006278:	d007      	beq.n	800628a <UART_Receive_IT+0x74>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <UART_Receive_IT+0x82>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e008      	b.n	80062aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29b      	uxth	r3, r3
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	4619      	mov	r1, r3
 80062c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d15d      	bne.n	8006384 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0220 	bic.w	r2, r2, #32
 80062d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0201 	bic.w	r2, r2, #1
 80062f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	2b01      	cmp	r3, #1
 800630c:	d135      	bne.n	800637a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	613b      	str	r3, [r7, #16]
   return(result);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 0310 	bic.w	r3, r3, #16
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	623a      	str	r2, [r7, #32]
 8006336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	61bb      	str	r3, [r7, #24]
   return(result);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b10      	cmp	r3, #16
 8006354:	d10a      	bne.n	800636c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fc48 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 8006378:	e002      	b.n	8006380 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fa fa26 	bl	80007cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e002      	b.n	800638a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3730      	adds	r7, #48	; 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006398:	b0c0      	sub	sp, #256	; 0x100
 800639a:	af00      	add	r7, sp, #0
 800639c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	ea40 0301 	orr.w	r3, r0, r1
 80063bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063ec:	f021 010c 	bic.w	r1, r1, #12
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fa:	430b      	orrs	r3, r1
 80063fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	6999      	ldr	r1, [r3, #24]
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	ea40 0301 	orr.w	r3, r0, r1
 800641a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b8f      	ldr	r3, [pc, #572]	; (8006660 <UART_SetConfig+0x2cc>)
 8006424:	429a      	cmp	r2, r3
 8006426:	d005      	beq.n	8006434 <UART_SetConfig+0xa0>
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b8d      	ldr	r3, [pc, #564]	; (8006664 <UART_SetConfig+0x2d0>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d104      	bne.n	800643e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7ff f818 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006438:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800643c:	e003      	b.n	8006446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800643e:	f7fe ffff 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006442:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	f040 810c 	bne.w	800666c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006458:	2200      	movs	r2, #0
 800645a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800645e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006466:	4622      	mov	r2, r4
 8006468:	462b      	mov	r3, r5
 800646a:	1891      	adds	r1, r2, r2
 800646c:	65b9      	str	r1, [r7, #88]	; 0x58
 800646e:	415b      	adcs	r3, r3
 8006470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006476:	4621      	mov	r1, r4
 8006478:	eb12 0801 	adds.w	r8, r2, r1
 800647c:	4629      	mov	r1, r5
 800647e:	eb43 0901 	adc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a4:	462b      	mov	r3, r5
 80064a6:	eb49 0303 	adc.w	r3, r9, r3
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c2:	460b      	mov	r3, r1
 80064c4:	18db      	adds	r3, r3, r3
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
 80064c8:	4613      	mov	r3, r2
 80064ca:	eb42 0303 	adc.w	r3, r2, r3
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
 80064d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064d8:	f7f9 feca 	bl	8000270 <__aeabi_uldivmod>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <UART_SetConfig+0x2d4>)
 80064e2:	fba3 2302 	umull	r2, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	011c      	lsls	r4, r3, #4
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	1891      	adds	r1, r2, r2
 8006502:	64b9      	str	r1, [r7, #72]	; 0x48
 8006504:	415b      	adcs	r3, r3
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800650c:	4641      	mov	r1, r8
 800650e:	eb12 0a01 	adds.w	sl, r2, r1
 8006512:	4649      	mov	r1, r9
 8006514:	eb43 0b01 	adc.w	fp, r3, r1
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800652c:	4692      	mov	sl, r2
 800652e:	469b      	mov	fp, r3
 8006530:	4643      	mov	r3, r8
 8006532:	eb1a 0303 	adds.w	r3, sl, r3
 8006536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653a:	464b      	mov	r3, r9
 800653c:	eb4b 0303 	adc.w	r3, fp, r3
 8006540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006550:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006558:	460b      	mov	r3, r1
 800655a:	18db      	adds	r3, r3, r3
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
 800655e:	4613      	mov	r3, r2
 8006560:	eb42 0303 	adc.w	r3, r2, r3
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800656e:	f7f9 fe7f 	bl	8000270 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4611      	mov	r1, r2
 8006578:	4b3b      	ldr	r3, [pc, #236]	; (8006668 <UART_SetConfig+0x2d4>)
 800657a:	fba3 2301 	umull	r2, r3, r3, r1
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	2264      	movs	r2, #100	; 0x64
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	1acb      	subs	r3, r1, r3
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800658e:	4b36      	ldr	r3, [pc, #216]	; (8006668 <UART_SetConfig+0x2d4>)
 8006590:	fba3 2302 	umull	r2, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800659c:	441c      	add	r4, r3
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b8:	415b      	adcs	r3, r3
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c0:	4641      	mov	r1, r8
 80065c2:	1851      	adds	r1, r2, r1
 80065c4:	6339      	str	r1, [r7, #48]	; 0x30
 80065c6:	4649      	mov	r1, r9
 80065c8:	414b      	adcs	r3, r1
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065d8:	4659      	mov	r1, fp
 80065da:	00cb      	lsls	r3, r1, #3
 80065dc:	4651      	mov	r1, sl
 80065de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e2:	4651      	mov	r1, sl
 80065e4:	00ca      	lsls	r2, r1, #3
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	4642      	mov	r2, r8
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f4:	464b      	mov	r3, r9
 80065f6:	460a      	mov	r2, r1
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800660c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006614:	460b      	mov	r3, r1
 8006616:	18db      	adds	r3, r3, r3
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
 800661a:	4613      	mov	r3, r2
 800661c:	eb42 0303 	adc.w	r3, r2, r3
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662a:	f7f9 fe21 	bl	8000270 <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <UART_SetConfig+0x2d4>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	; 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	3332      	adds	r3, #50	; 0x32
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <UART_SetConfig+0x2d4>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 0207 	and.w	r2, r3, #7
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4422      	add	r2, r4
 800665a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800665c:	e106      	b.n	800686c <UART_SetConfig+0x4d8>
 800665e:	bf00      	nop
 8006660:	40011000 	.word	0x40011000
 8006664:	40011400 	.word	0x40011400
 8006668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800666c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006670:	2200      	movs	r2, #0
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800667e:	4642      	mov	r2, r8
 8006680:	464b      	mov	r3, r9
 8006682:	1891      	adds	r1, r2, r2
 8006684:	6239      	str	r1, [r7, #32]
 8006686:	415b      	adcs	r3, r3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800668e:	4641      	mov	r1, r8
 8006690:	1854      	adds	r4, r2, r1
 8006692:	4649      	mov	r1, r9
 8006694:	eb43 0501 	adc.w	r5, r3, r1
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	00eb      	lsls	r3, r5, #3
 80066a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066a6:	00e2      	lsls	r2, r4, #3
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	4643      	mov	r3, r8
 80066ae:	18e3      	adds	r3, r4, r3
 80066b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b4:	464b      	mov	r3, r9
 80066b6:	eb45 0303 	adc.w	r3, r5, r3
 80066ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066da:	4629      	mov	r1, r5
 80066dc:	008b      	lsls	r3, r1, #2
 80066de:	4621      	mov	r1, r4
 80066e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e4:	4621      	mov	r1, r4
 80066e6:	008a      	lsls	r2, r1, #2
 80066e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066ec:	f7f9 fdc0 	bl	8000270 <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4b60      	ldr	r3, [pc, #384]	; (8006878 <UART_SetConfig+0x4e4>)
 80066f6:	fba3 2302 	umull	r2, r3, r3, r2
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	011c      	lsls	r4, r3, #4
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800670c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	61b9      	str	r1, [r7, #24]
 8006718:	415b      	adcs	r3, r3
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6139      	str	r1, [r7, #16]
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	67bb      	str	r3, [r7, #120]	; 0x78
 800676a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006778:	4649      	mov	r1, r9
 800677a:	008b      	lsls	r3, r1, #2
 800677c:	4641      	mov	r1, r8
 800677e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006782:	4641      	mov	r1, r8
 8006784:	008a      	lsls	r2, r1, #2
 8006786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678a:	f7f9 fd71 	bl	8000270 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4611      	mov	r1, r2
 8006794:	4b38      	ldr	r3, [pc, #224]	; (8006878 <UART_SetConfig+0x4e4>)
 8006796:	fba3 2301 	umull	r2, r3, r3, r1
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2264      	movs	r2, #100	; 0x64
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	3332      	adds	r3, #50	; 0x32
 80067a8:	4a33      	ldr	r2, [pc, #204]	; (8006878 <UART_SetConfig+0x4e4>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b4:	441c      	add	r4, r3
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ba:	2200      	movs	r2, #0
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
 80067be:	677a      	str	r2, [r7, #116]	; 0x74
 80067c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	415b      	adcs	r3, r3
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
 8006806:	464b      	mov	r3, r9
 8006808:	460a      	mov	r2, r1
 800680a:	eb42 0303 	adc.w	r3, r2, r3
 800680e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
 800681a:	667a      	str	r2, [r7, #100]	; 0x64
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006828:	4649      	mov	r1, r9
 800682a:	008b      	lsls	r3, r1, #2
 800682c:	4641      	mov	r1, r8
 800682e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006832:	4641      	mov	r1, r8
 8006834:	008a      	lsls	r2, r1, #2
 8006836:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683a:	f7f9 fd19 	bl	8000270 <__aeabi_uldivmod>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <UART_SetConfig+0x4e4>)
 8006844:	fba3 1302 	umull	r1, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	2164      	movs	r1, #100	; 0x64
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	3332      	adds	r3, #50	; 0x32
 8006856:	4a08      	ldr	r2, [pc, #32]	; (8006878 <UART_SetConfig+0x4e4>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4422      	add	r2, r4
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	bf00      	nop
 800686e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006872:	46bd      	mov	sp, r7
 8006874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006878:	51eb851f 	.word	0x51eb851f

0800687c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	f107 001c 	add.w	r0, r7, #28
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006892:	2b01      	cmp	r3, #1
 8006894:	d123      	bne.n	80068de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d105      	bne.n	80068d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fae2 	bl	8007e9c <USB_CoreReset>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	e01b      	b.n	8006916 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fad6 	bl	8007e9c <USB_CoreReset>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
 8006908:	e005      	b.n	8006916 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006916:	7fbb      	ldrb	r3, [r7, #30]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d10b      	bne.n	8006934 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f043 0206 	orr.w	r2, r3, #6
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006940:	b004      	add	sp, #16
 8006942:	4770      	bx	lr

08006944 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4613      	mov	r3, r2
 8006950:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d165      	bne.n	8006a24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4a41      	ldr	r2, [pc, #260]	; (8006a60 <USB_SetTurnaroundTime+0x11c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d906      	bls.n	800696e <USB_SetTurnaroundTime+0x2a>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <USB_SetTurnaroundTime+0x120>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d202      	bcs.n	800696e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006968:	230f      	movs	r3, #15
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e062      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a3c      	ldr	r2, [pc, #240]	; (8006a64 <USB_SetTurnaroundTime+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d306      	bcc.n	8006984 <USB_SetTurnaroundTime+0x40>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <USB_SetTurnaroundTime+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d202      	bcs.n	8006984 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800697e:	230e      	movs	r3, #14
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e057      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4a38      	ldr	r2, [pc, #224]	; (8006a68 <USB_SetTurnaroundTime+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d306      	bcc.n	800699a <USB_SetTurnaroundTime+0x56>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4a37      	ldr	r2, [pc, #220]	; (8006a6c <USB_SetTurnaroundTime+0x128>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d202      	bcs.n	800699a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006994:	230d      	movs	r3, #13
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e04c      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <USB_SetTurnaroundTime+0x128>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d306      	bcc.n	80069b0 <USB_SetTurnaroundTime+0x6c>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <USB_SetTurnaroundTime+0x12c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d802      	bhi.n	80069b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069aa:	230c      	movs	r3, #12
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e041      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4a2f      	ldr	r2, [pc, #188]	; (8006a70 <USB_SetTurnaroundTime+0x12c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d906      	bls.n	80069c6 <USB_SetTurnaroundTime+0x82>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a2e      	ldr	r2, [pc, #184]	; (8006a74 <USB_SetTurnaroundTime+0x130>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d802      	bhi.n	80069c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069c0:	230b      	movs	r3, #11
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e036      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4a2a      	ldr	r2, [pc, #168]	; (8006a74 <USB_SetTurnaroundTime+0x130>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d906      	bls.n	80069dc <USB_SetTurnaroundTime+0x98>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <USB_SetTurnaroundTime+0x134>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d802      	bhi.n	80069dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069d6:	230a      	movs	r3, #10
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e02b      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <USB_SetTurnaroundTime+0x134>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d906      	bls.n	80069f2 <USB_SetTurnaroundTime+0xae>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <USB_SetTurnaroundTime+0x138>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d202      	bcs.n	80069f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069ec:	2309      	movs	r3, #9
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e020      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <USB_SetTurnaroundTime+0x138>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d306      	bcc.n	8006a08 <USB_SetTurnaroundTime+0xc4>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <USB_SetTurnaroundTime+0x13c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d802      	bhi.n	8006a08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a02:	2308      	movs	r3, #8
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e015      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <USB_SetTurnaroundTime+0x13c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d906      	bls.n	8006a1e <USB_SetTurnaroundTime+0xda>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <USB_SetTurnaroundTime+0x140>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d202      	bcs.n	8006a1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a18:	2307      	movs	r3, #7
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e00a      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a1e:	2306      	movs	r3, #6
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e007      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e001      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a30:	2309      	movs	r3, #9
 8006a32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	00d8acbf 	.word	0x00d8acbf
 8006a64:	00e4e1c0 	.word	0x00e4e1c0
 8006a68:	00f42400 	.word	0x00f42400
 8006a6c:	01067380 	.word	0x01067380
 8006a70:	011a499f 	.word	0x011a499f
 8006a74:	01312cff 	.word	0x01312cff
 8006a78:	014ca43f 	.word	0x014ca43f
 8006a7c:	016e3600 	.word	0x016e3600
 8006a80:	01a6ab1f 	.word	0x01a6ab1f
 8006a84:	01e84800 	.word	0x01e84800

08006a88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f043 0201 	orr.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d115      	bne.n	8006b1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006afa:	200a      	movs	r0, #10
 8006afc:	f7fa fe10 	bl	8001720 <HAL_Delay>
      ms += 10U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	330a      	adds	r3, #10
 8006b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f939 	bl	8007d7e <USB_GetMode>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d01e      	beq.n	8006b50 <USB_SetCurrentMode+0x84>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2bc7      	cmp	r3, #199	; 0xc7
 8006b16:	d9f0      	bls.n	8006afa <USB_SetCurrentMode+0x2e>
 8006b18:	e01a      	b.n	8006b50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d115      	bne.n	8006b4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f7fa fdf7 	bl	8001720 <HAL_Delay>
      ms += 10U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	330a      	adds	r3, #10
 8006b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f920 	bl	8007d7e <USB_GetMode>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <USB_SetCurrentMode+0x84>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2bc7      	cmp	r3, #199	; 0xc7
 8006b48:	d9f0      	bls.n	8006b2c <USB_SetCurrentMode+0x60>
 8006b4a:	e001      	b.n	8006b50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e005      	b.n	8006b5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2bc8      	cmp	r3, #200	; 0xc8
 8006b54:	d101      	bne.n	8006b5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b64:	b084      	sub	sp, #16
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e009      	b.n	8006b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3340      	adds	r3, #64	; 0x40
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3301      	adds	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b0e      	cmp	r3, #14
 8006b9c:	d9f2      	bls.n	8006b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11c      	bne.n	8006be0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bde:	e00b      	b.n	8006bf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d10d      	bne.n	8006c28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f968 	bl	8006eec <USB_SetDevSpeed>
 8006c1c:	e008      	b.n	8006c30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f963 	bl	8006eec <USB_SetDevSpeed>
 8006c26:	e003      	b.n	8006c30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c28:	2103      	movs	r1, #3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f95e 	bl	8006eec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c30:	2110      	movs	r1, #16
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8fa 	bl	8006e2c <USB_FlushTxFifo>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f924 	bl	8006e90 <USB_FlushRxFifo>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	461a      	mov	r2, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e043      	b.n	8006d04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d118      	bne.n	8006cc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e013      	b.n	8006cd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e008      	b.n	8006cd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d08:	461a      	mov	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d3b5      	bcc.n	8006c7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	e043      	b.n	8006d9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2c:	d118      	bne.n	8006d60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	461a      	mov	r2, r3
 8006d42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e013      	b.n	8006d72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e008      	b.n	8006d72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006da2:	461a      	mov	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d3b5      	bcc.n	8006d16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f043 0210 	orr.w	r2, r3, #16
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <USB_DevInit+0x2c4>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f043 0208 	orr.w	r2, r3, #8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d107      	bne.n	8006e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	f043 0304 	orr.w	r3, r3, #4
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e24:	b004      	add	sp, #16
 8006e26:	4770      	bx	lr
 8006e28:	803c3800 	.word	0x803c3800

08006e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e46:	d901      	bls.n	8006e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e01b      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	daf2      	bge.n	8006e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e70:	d901      	bls.n	8006e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e006      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d0f0      	beq.n	8006e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e018      	b.n	8006ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	daf2      	bge.n	8006e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ecc:	d901      	bls.n	8006ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e006      	b.n	8006ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d0f0      	beq.n	8006ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
 8006f42:	e00a      	b.n	8006f5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d002      	beq.n	8006f50 <USB_GetDevSpeed+0x32>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b06      	cmp	r3, #6
 8006f4e:	d102      	bne.n	8006f56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f50:	2302      	movs	r3, #2
 8006f52:	75fb      	strb	r3, [r7, #23]
 8006f54:	e001      	b.n	8006f5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f56:	230f      	movs	r3, #15
 8006f58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d13a      	bne.n	8006ffa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d155      	bne.n	8007068 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	059b      	lsls	r3, r3, #22
 8006fde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e036      	b.n	8007068 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	2101      	movs	r1, #1
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	041b      	lsls	r3, r3, #16
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007018:	4313      	orrs	r3, r2
 800701a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11a      	bne.n	8007068 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	791b      	ldrb	r3, [r3, #4]
 800704c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800704e:	430b      	orrs	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007066:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d161      	bne.n	8007158 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070aa:	d11f      	bne.n	80070ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710c:	4013      	ands	r3, r2
 800710e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	2101      	movs	r1, #1
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	b29b      	uxth	r3, r3
 8007128:	43db      	mvns	r3, r3
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007130:	4013      	ands	r3, r2
 8007132:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	0159      	lsls	r1, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	440b      	add	r3, r1
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	4619      	mov	r1, r3
 8007150:	4b35      	ldr	r3, [pc, #212]	; (8007228 <USB_DeactivateEndpoint+0x1b0>)
 8007152:	4013      	ands	r3, r2
 8007154:	600b      	str	r3, [r1, #0]
 8007156:	e060      	b.n	800721a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716e:	d11f      	bne.n	80071b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800718e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	43db      	mvns	r3, r3
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d0:	4013      	ands	r3, r2
 80071d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	2101      	movs	r1, #1
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	43db      	mvns	r3, r3
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f4:	4013      	ands	r3, r2
 80071f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	0159      	lsls	r1, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	440b      	add	r3, r1
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	4619      	mov	r1, r3
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <USB_DeactivateEndpoint+0x1b4>)
 8007216:	4013      	ands	r3, r2
 8007218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	ec337800 	.word	0xec337800
 800722c:	eff37800 	.word	0xeff37800

08007230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b01      	cmp	r3, #1
 800724e:	f040 817a 	bne.w	8007546 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d132      	bne.n	80072c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800727c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b8:	0cdb      	lsrs	r3, r3, #19
 80072ba:	04db      	lsls	r3, r3, #19
 80072bc:	6113      	str	r3, [r2, #16]
 80072be:	e092      	b.n	80073e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072da:	0cdb      	lsrs	r3, r3, #19
 80072dc:	04db      	lsls	r3, r3, #19
 80072de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007302:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11a      	bne.n	8007340 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	d903      	bls.n	800731e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	e01b      	b.n	8007378 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6919      	ldr	r1, [r3, #16]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	440b      	add	r3, r1
 8007358:	1e59      	subs	r1, r3, #1
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007362:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007364:	4ba2      	ldr	r3, [pc, #648]	; (80075f0 <USB_EPStartXfer+0x3c0>)
 8007366:	400b      	ands	r3, r1
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	0148      	lsls	r0, r1, #5
 800736c:	69f9      	ldr	r1, [r7, #28]
 800736e:	4401      	add	r1, r0
 8007370:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800738e:	69b9      	ldr	r1, [r7, #24]
 8007390:	0148      	lsls	r0, r1, #5
 8007392:	69f9      	ldr	r1, [r7, #28]
 8007394:	4401      	add	r1, r0
 8007396:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800739a:	4313      	orrs	r3, r2
 800739c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d11f      	bne.n	80073e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d14b      	bne.n	8007484 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d128      	bne.n	8007462 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d110      	bne.n	8007442 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	e00f      	b.n	8007462 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007460:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e165      	b.n	8007750 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d015      	beq.n	80074d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 814d 	beq.w	8007750 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	2101      	movs	r1, #1
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d2:	4313      	orrs	r3, r2
 80074d4:	634b      	str	r3, [r1, #52]	; 0x34
 80074d6:	e13b      	b.n	8007750 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d110      	bne.n	800750a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e00f      	b.n	800752a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007528:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	68d9      	ldr	r1, [r3, #12]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	b298      	uxth	r0, r3
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4603      	mov	r3, r0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f9b8 	bl	80078b4 <USB_WritePacket>
 8007544:	e104      	b.n	8007750 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	440a      	add	r2, r1
 800755c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007560:	0cdb      	lsrs	r3, r3, #19
 8007562:	04db      	lsls	r3, r3, #19
 8007564:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007588:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d131      	bne.n	80075f4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	0148      	lsls	r0, r1, #5
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	4401      	add	r1, r0
 80075c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ec:	6113      	str	r3, [r2, #16]
 80075ee:	e061      	b.n	80076b4 <USB_EPStartXfer+0x484>
 80075f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d123      	bne.n	8007644 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007612:	69b9      	ldr	r1, [r7, #24]
 8007614:	0148      	lsls	r0, r1, #5
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	4401      	add	r1, r0
 800761a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007640:	6113      	str	r3, [r2, #16]
 8007642:	e037      	b.n	80076b4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4413      	add	r3, r2
 800764e:	1e5a      	subs	r2, r3, #1
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	fbb2 f3f3 	udiv	r3, r2, r3
 8007658:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	8afa      	ldrh	r2, [r7, #22]
 8007660:	fb03 f202 	mul.w	r2, r3, r2
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	04d9      	lsls	r1, r3, #19
 800767a:	4b38      	ldr	r3, [pc, #224]	; (800775c <USB_EPStartXfer+0x52c>)
 800767c:	400b      	ands	r3, r1
 800767e:	69b9      	ldr	r1, [r7, #24]
 8007680:	0148      	lsls	r0, r1, #5
 8007682:	69f9      	ldr	r1, [r7, #28]
 8007684:	4401      	add	r1, r0
 8007686:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800768a:	4313      	orrs	r3, r2
 800768c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a4:	69b9      	ldr	r1, [r7, #24]
 80076a6:	0148      	lsls	r0, r1, #5
 80076a8:	69f9      	ldr	r1, [r7, #28]
 80076aa:	4401      	add	r1, r0
 80076ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076b0:	4313      	orrs	r3, r2
 80076b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10d      	bne.n	80076d6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	68d9      	ldr	r1, [r3, #12]
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	460a      	mov	r2, r1
 80076d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d128      	bne.n	8007730 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d110      	bne.n	8007710 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e00f      	b.n	8007730 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800774e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	1ff80000 	.word	0x1ff80000

08007760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d14a      	bne.n	8007814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007796:	f040 8086 	bne.w	80078a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	7812      	ldrb	r2, [r2, #0]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d902      	bls.n	80077f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
          break;
 80077f6:	e056      	b.n	80078a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007810:	d0e7      	beq.n	80077e2 <USB_EPStopXfer+0x82>
 8007812:	e048      	b.n	80078a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800782c:	d13b      	bne.n	80078a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	7812      	ldrb	r2, [r2, #0]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007882:	4293      	cmp	r3, r2
 8007884:	d902      	bls.n	800788c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
          break;
 800788a:	e00c      	b.n	80078a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a4:	d0e7      	beq.n	8007876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	; 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	460b      	mov	r3, r1
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d123      	bne.n	8007922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078da:	88bb      	ldrh	r3, [r7, #4]
 80078dc:	3303      	adds	r3, #3
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e018      	b.n	800791a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	031a      	lsls	r2, r3, #12
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f4:	461a      	mov	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	3301      	adds	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3301      	adds	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d3e2      	bcc.n	80078e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3724      	adds	r7, #36	; 0x24
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007930:	b480      	push	{r7}
 8007932:	b08b      	sub	sp, #44	; 0x2c
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	b29b      	uxth	r3, r3
 800794c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	623b      	str	r3, [r7, #32]
 800795a:	e014      	b.n	8007986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	601a      	str	r2, [r3, #0]
    pDest++;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	3301      	adds	r3, #1
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3301      	adds	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	3301      	adds	r3, #1
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	3301      	adds	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	3301      	adds	r3, #1
 8007984:	623b      	str	r3, [r7, #32]
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3e6      	bcc.n	800795c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800798e:	8bfb      	ldrh	r3, [r7, #30]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01e      	beq.n	80079d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799e:	461a      	mov	r2, r3
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	701a      	strb	r2, [r3, #0]
      i++;
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	3301      	adds	r3, #1
 80079be:	623b      	str	r3, [r7, #32]
      pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079c6:	8bfb      	ldrh	r3, [r7, #30]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079cc:	8bfb      	ldrh	r3, [r7, #30]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1ea      	bne.n	80079a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	372c      	adds	r7, #44	; 0x2c
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d12c      	bne.n	8007a56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	db12      	blt.n	8007a34 <USB_EPSetStall+0x54>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00f      	beq.n	8007a34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e02b      	b.n	8007aae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	db12      	blt.n	8007a8e <USB_EPSetStall+0xae>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00f      	beq.n	8007a8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d128      	bne.n	8007b2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007af6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d003      	beq.n	8007b08 <USB_EPClearStall+0x4c>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	791b      	ldrb	r3, [r3, #4]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d138      	bne.n	8007b7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e027      	b.n	8007b7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	791b      	ldrb	r3, [r3, #4]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d003      	beq.n	8007b5a <USB_EPClearStall+0x9e>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	791b      	ldrb	r3, [r3, #4]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d10f      	bne.n	8007b7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007baa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c02:	f023 0302 	bic.w	r3, r3, #2
 8007c06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	b29b      	uxth	r3, r3
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d14:	68bb      	ldr	r3, [r7, #8]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d52:	01db      	lsls	r3, r3, #7
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d70:	68bb      	ldr	r3, [r7, #8]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	460b      	mov	r3, r1
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	333c      	adds	r3, #60	; 0x3c
 8007df6:	3304      	adds	r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4a26      	ldr	r2, [pc, #152]	; (8007e98 <USB_EP0_OutStart+0xb8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d90a      	bls.n	8007e1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e14:	d101      	bne.n	8007e1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e037      	b.n	8007e8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	461a      	mov	r2, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f043 0318 	orr.w	r3, r3, #24
 8007e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10f      	bne.n	8007e88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	4f54300a 	.word	0x4f54300a

08007e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007eb4:	d901      	bls.n	8007eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e01b      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	daf2      	bge.n	8007ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ede:	d901      	bls.n	8007ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e006      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d0f0      	beq.n	8007ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f04:	4904      	ldr	r1, [pc, #16]	; (8007f18 <MX_FATFS_Init+0x18>)
 8007f06:	4805      	ldr	r0, [pc, #20]	; (8007f1c <MX_FATFS_Init+0x1c>)
 8007f08:	f004 fd48 	bl	800c99c <FATFS_LinkDriver>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <MX_FATFS_Init+0x20>)
 8007f12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	200003d8 	.word	0x200003d8
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	200003d4 	.word	0x200003d4

08007f24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <USER_initialize+0x24>)
 8007f30:	2201      	movs	r2, #1
 8007f32:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f34:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <USER_initialize+0x24>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20000009 	.word	0x20000009

08007f4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <USER_status+0x24>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <USER_status+0x24>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000009 	.word	0x20000009

08007f74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007f84:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007fa2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	603a      	str	r2, [r7, #0]
 8007fba:	71fb      	strb	r3, [r7, #7]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
    return res;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
	...

08007fd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007fda:	4b87      	ldr	r3, [pc, #540]	; (80081f8 <MX_LWIP_Init+0x224>)
 8007fdc:	22c0      	movs	r2, #192	; 0xc0
 8007fde:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007fe0:	4b85      	ldr	r3, [pc, #532]	; (80081f8 <MX_LWIP_Init+0x224>)
 8007fe2:	22a8      	movs	r2, #168	; 0xa8
 8007fe4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007fe6:	4b84      	ldr	r3, [pc, #528]	; (80081f8 <MX_LWIP_Init+0x224>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8007fec:	4b82      	ldr	r3, [pc, #520]	; (80081f8 <MX_LWIP_Init+0x224>)
 8007fee:	226f      	movs	r2, #111	; 0x6f
 8007ff0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007ff2:	4b82      	ldr	r3, [pc, #520]	; (80081fc <MX_LWIP_Init+0x228>)
 8007ff4:	22ff      	movs	r2, #255	; 0xff
 8007ff6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007ff8:	4b80      	ldr	r3, [pc, #512]	; (80081fc <MX_LWIP_Init+0x228>)
 8007ffa:	22ff      	movs	r2, #255	; 0xff
 8007ffc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007ffe:	4b7f      	ldr	r3, [pc, #508]	; (80081fc <MX_LWIP_Init+0x228>)
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008004:	4b7d      	ldr	r3, [pc, #500]	; (80081fc <MX_LWIP_Init+0x228>)
 8008006:	2200      	movs	r2, #0
 8008008:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800800a:	4b7d      	ldr	r3, [pc, #500]	; (8008200 <MX_LWIP_Init+0x22c>)
 800800c:	22c0      	movs	r2, #192	; 0xc0
 800800e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008010:	4b7b      	ldr	r3, [pc, #492]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008012:	22a8      	movs	r2, #168	; 0xa8
 8008014:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008016:	4b7a      	ldr	r3, [pc, #488]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008018:	2200      	movs	r2, #0
 800801a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800801c:	4b78      	ldr	r3, [pc, #480]	; (8008200 <MX_LWIP_Init+0x22c>)
 800801e:	2201      	movs	r2, #1
 8008020:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008022:	f004 fcf8 	bl	800ca16 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008026:	4b74      	ldr	r3, [pc, #464]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	061a      	lsls	r2, r3, #24
 800802c:	4b72      	ldr	r3, [pc, #456]	; (80081f8 <MX_LWIP_Init+0x224>)
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	431a      	orrs	r2, r3
 8008034:	4b70      	ldr	r3, [pc, #448]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008036:	789b      	ldrb	r3, [r3, #2]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	4313      	orrs	r3, r2
 800803c:	4a6e      	ldr	r2, [pc, #440]	; (80081f8 <MX_LWIP_Init+0x224>)
 800803e:	78d2      	ldrb	r2, [r2, #3]
 8008040:	4313      	orrs	r3, r2
 8008042:	061a      	lsls	r2, r3, #24
 8008044:	4b6c      	ldr	r3, [pc, #432]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	0619      	lsls	r1, r3, #24
 800804a:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <MX_LWIP_Init+0x224>)
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	4319      	orrs	r1, r3
 8008052:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008054:	789b      	ldrb	r3, [r3, #2]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	430b      	orrs	r3, r1
 800805a:	4967      	ldr	r1, [pc, #412]	; (80081f8 <MX_LWIP_Init+0x224>)
 800805c:	78c9      	ldrb	r1, [r1, #3]
 800805e:	430b      	orrs	r3, r1
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008066:	431a      	orrs	r2, r3
 8008068:	4b63      	ldr	r3, [pc, #396]	; (80081f8 <MX_LWIP_Init+0x224>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	0619      	lsls	r1, r3, #24
 800806e:	4b62      	ldr	r3, [pc, #392]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	4319      	orrs	r1, r3
 8008076:	4b60      	ldr	r3, [pc, #384]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008078:	789b      	ldrb	r3, [r3, #2]
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	430b      	orrs	r3, r1
 800807e:	495e      	ldr	r1, [pc, #376]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008080:	78c9      	ldrb	r1, [r1, #3]
 8008082:	430b      	orrs	r3, r1
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800808a:	431a      	orrs	r2, r3
 800808c:	4b5a      	ldr	r3, [pc, #360]	; (80081f8 <MX_LWIP_Init+0x224>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	0619      	lsls	r1, r3, #24
 8008092:	4b59      	ldr	r3, [pc, #356]	; (80081f8 <MX_LWIP_Init+0x224>)
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	4319      	orrs	r1, r3
 800809a:	4b57      	ldr	r3, [pc, #348]	; (80081f8 <MX_LWIP_Init+0x224>)
 800809c:	789b      	ldrb	r3, [r3, #2]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	430b      	orrs	r3, r1
 80080a2:	4955      	ldr	r1, [pc, #340]	; (80081f8 <MX_LWIP_Init+0x224>)
 80080a4:	78c9      	ldrb	r1, [r1, #3]
 80080a6:	430b      	orrs	r3, r1
 80080a8:	0e1b      	lsrs	r3, r3, #24
 80080aa:	4313      	orrs	r3, r2
 80080ac:	4a55      	ldr	r2, [pc, #340]	; (8008204 <MX_LWIP_Init+0x230>)
 80080ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80080b0:	4b52      	ldr	r3, [pc, #328]	; (80081fc <MX_LWIP_Init+0x228>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	061a      	lsls	r2, r3, #24
 80080b6:	4b51      	ldr	r3, [pc, #324]	; (80081fc <MX_LWIP_Init+0x228>)
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	431a      	orrs	r2, r3
 80080be:	4b4f      	ldr	r3, [pc, #316]	; (80081fc <MX_LWIP_Init+0x228>)
 80080c0:	789b      	ldrb	r3, [r3, #2]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	4313      	orrs	r3, r2
 80080c6:	4a4d      	ldr	r2, [pc, #308]	; (80081fc <MX_LWIP_Init+0x228>)
 80080c8:	78d2      	ldrb	r2, [r2, #3]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	061a      	lsls	r2, r3, #24
 80080ce:	4b4b      	ldr	r3, [pc, #300]	; (80081fc <MX_LWIP_Init+0x228>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	0619      	lsls	r1, r3, #24
 80080d4:	4b49      	ldr	r3, [pc, #292]	; (80081fc <MX_LWIP_Init+0x228>)
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	041b      	lsls	r3, r3, #16
 80080da:	4319      	orrs	r1, r3
 80080dc:	4b47      	ldr	r3, [pc, #284]	; (80081fc <MX_LWIP_Init+0x228>)
 80080de:	789b      	ldrb	r3, [r3, #2]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	430b      	orrs	r3, r1
 80080e4:	4945      	ldr	r1, [pc, #276]	; (80081fc <MX_LWIP_Init+0x228>)
 80080e6:	78c9      	ldrb	r1, [r1, #3]
 80080e8:	430b      	orrs	r3, r1
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080f0:	431a      	orrs	r2, r3
 80080f2:	4b42      	ldr	r3, [pc, #264]	; (80081fc <MX_LWIP_Init+0x228>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	0619      	lsls	r1, r3, #24
 80080f8:	4b40      	ldr	r3, [pc, #256]	; (80081fc <MX_LWIP_Init+0x228>)
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	4319      	orrs	r1, r3
 8008100:	4b3e      	ldr	r3, [pc, #248]	; (80081fc <MX_LWIP_Init+0x228>)
 8008102:	789b      	ldrb	r3, [r3, #2]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	430b      	orrs	r3, r1
 8008108:	493c      	ldr	r1, [pc, #240]	; (80081fc <MX_LWIP_Init+0x228>)
 800810a:	78c9      	ldrb	r1, [r1, #3]
 800810c:	430b      	orrs	r3, r1
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008114:	431a      	orrs	r2, r3
 8008116:	4b39      	ldr	r3, [pc, #228]	; (80081fc <MX_LWIP_Init+0x228>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	0619      	lsls	r1, r3, #24
 800811c:	4b37      	ldr	r3, [pc, #220]	; (80081fc <MX_LWIP_Init+0x228>)
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	4319      	orrs	r1, r3
 8008124:	4b35      	ldr	r3, [pc, #212]	; (80081fc <MX_LWIP_Init+0x228>)
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	430b      	orrs	r3, r1
 800812c:	4933      	ldr	r1, [pc, #204]	; (80081fc <MX_LWIP_Init+0x228>)
 800812e:	78c9      	ldrb	r1, [r1, #3]
 8008130:	430b      	orrs	r3, r1
 8008132:	0e1b      	lsrs	r3, r3, #24
 8008134:	4313      	orrs	r3, r2
 8008136:	4a34      	ldr	r2, [pc, #208]	; (8008208 <MX_LWIP_Init+0x234>)
 8008138:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800813a:	4b31      	ldr	r3, [pc, #196]	; (8008200 <MX_LWIP_Init+0x22c>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	061a      	lsls	r2, r3, #24
 8008140:	4b2f      	ldr	r3, [pc, #188]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	431a      	orrs	r2, r3
 8008148:	4b2d      	ldr	r3, [pc, #180]	; (8008200 <MX_LWIP_Init+0x22c>)
 800814a:	789b      	ldrb	r3, [r3, #2]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	4313      	orrs	r3, r2
 8008150:	4a2b      	ldr	r2, [pc, #172]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008152:	78d2      	ldrb	r2, [r2, #3]
 8008154:	4313      	orrs	r3, r2
 8008156:	061a      	lsls	r2, r3, #24
 8008158:	4b29      	ldr	r3, [pc, #164]	; (8008200 <MX_LWIP_Init+0x22c>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	0619      	lsls	r1, r3, #24
 800815e:	4b28      	ldr	r3, [pc, #160]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	4319      	orrs	r1, r3
 8008166:	4b26      	ldr	r3, [pc, #152]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008168:	789b      	ldrb	r3, [r3, #2]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	430b      	orrs	r3, r1
 800816e:	4924      	ldr	r1, [pc, #144]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008170:	78c9      	ldrb	r1, [r1, #3]
 8008172:	430b      	orrs	r3, r1
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800817a:	431a      	orrs	r2, r3
 800817c:	4b20      	ldr	r3, [pc, #128]	; (8008200 <MX_LWIP_Init+0x22c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	0619      	lsls	r1, r3, #24
 8008182:	4b1f      	ldr	r3, [pc, #124]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	4319      	orrs	r1, r3
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <MX_LWIP_Init+0x22c>)
 800818c:	789b      	ldrb	r3, [r3, #2]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	430b      	orrs	r3, r1
 8008192:	491b      	ldr	r1, [pc, #108]	; (8008200 <MX_LWIP_Init+0x22c>)
 8008194:	78c9      	ldrb	r1, [r1, #3]
 8008196:	430b      	orrs	r3, r1
 8008198:	0a1b      	lsrs	r3, r3, #8
 800819a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800819e:	431a      	orrs	r2, r3
 80081a0:	4b17      	ldr	r3, [pc, #92]	; (8008200 <MX_LWIP_Init+0x22c>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	0619      	lsls	r1, r3, #24
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <MX_LWIP_Init+0x22c>)
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	4319      	orrs	r1, r3
 80081ae:	4b14      	ldr	r3, [pc, #80]	; (8008200 <MX_LWIP_Init+0x22c>)
 80081b0:	789b      	ldrb	r3, [r3, #2]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	430b      	orrs	r3, r1
 80081b6:	4912      	ldr	r1, [pc, #72]	; (8008200 <MX_LWIP_Init+0x22c>)
 80081b8:	78c9      	ldrb	r1, [r1, #3]
 80081ba:	430b      	orrs	r3, r1
 80081bc:	0e1b      	lsrs	r3, r3, #24
 80081be:	4313      	orrs	r3, r2
 80081c0:	4a12      	ldr	r2, [pc, #72]	; (800820c <MX_LWIP_Init+0x238>)
 80081c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80081c4:	4b12      	ldr	r3, [pc, #72]	; (8008210 <MX_LWIP_Init+0x23c>)
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	4b12      	ldr	r3, [pc, #72]	; (8008214 <MX_LWIP_Init+0x240>)
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	2300      	movs	r3, #0
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <MX_LWIP_Init+0x238>)
 80081d2:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <MX_LWIP_Init+0x234>)
 80081d4:	490b      	ldr	r1, [pc, #44]	; (8008204 <MX_LWIP_Init+0x230>)
 80081d6:	4810      	ldr	r0, [pc, #64]	; (8008218 <MX_LWIP_Init+0x244>)
 80081d8:	f005 f908 	bl	800d3ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80081dc:	480e      	ldr	r0, [pc, #56]	; (8008218 <MX_LWIP_Init+0x244>)
 80081de:	f005 fab7 	bl	800d750 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80081e2:	480d      	ldr	r0, [pc, #52]	; (8008218 <MX_LWIP_Init+0x244>)
 80081e4:	f005 fac4 	bl	800d770 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80081e8:	490c      	ldr	r1, [pc, #48]	; (800821c <MX_LWIP_Init+0x248>)
 80081ea:	480b      	ldr	r0, [pc, #44]	; (8008218 <MX_LWIP_Init+0x244>)
 80081ec:	f005 fbc2 	bl	800d974 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000420 	.word	0x20000420
 80081fc:	20000424 	.word	0x20000424
 8008200:	20000428 	.word	0x20000428
 8008204:	20000414 	.word	0x20000414
 8008208:	20000418 	.word	0x20000418
 800820c:	2000041c 	.word	0x2000041c
 8008210:	08016ef9 	.word	0x08016ef9
 8008214:	0800852d 	.word	0x0800852d
 8008218:	200003e0 	.word	0x200003e0
 800821c:	08008271 	.word	0x08008271

08008220 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008228:	f7f9 fa6e 	bl	8001708 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	4b08      	ldr	r3, [pc, #32]	; (8008250 <Ethernet_Link_Periodic_Handle+0x30>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b63      	cmp	r3, #99	; 0x63
 8008236:	d907      	bls.n	8008248 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008238:	f7f9 fa66 	bl	8001708 <HAL_GetTick>
 800823c:	4603      	mov	r3, r0
 800823e:	4a04      	ldr	r2, [pc, #16]	; (8008250 <Ethernet_Link_Periodic_Handle+0x30>)
 8008240:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fab6 	bl	80087b4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200003dc 	.word	0x200003dc

08008254 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008258:	4804      	ldr	r0, [pc, #16]	; (800826c <MX_LWIP_Process+0x18>)
 800825a:	f000 f947 	bl	80084ec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800825e:	f00c fa5f 	bl	8014720 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008262:	4802      	ldr	r0, [pc, #8]	; (800826c <MX_LWIP_Process+0x18>)
 8008264:	f7ff ffdc 	bl	8008220 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008268:	bf00      	nop
 800826a:	bd80      	pop	{r7, pc}
 800826c:	200003e0 	.word	0x200003e0

08008270 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008290:	4b40      	ldr	r3, [pc, #256]	; (8008394 <low_level_init+0x110>)
 8008292:	4a41      	ldr	r2, [pc, #260]	; (8008398 <low_level_init+0x114>)
 8008294:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008296:	2300      	movs	r3, #0
 8008298:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800829a:	2380      	movs	r3, #128	; 0x80
 800829c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800829e:	23e1      	movs	r3, #225	; 0xe1
 80082a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80082a2:	2300      	movs	r3, #0
 80082a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80082a6:	2300      	movs	r3, #0
 80082a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80082aa:	2300      	movs	r3, #0
 80082ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80082ae:	4a39      	ldr	r2, [pc, #228]	; (8008394 <low_level_init+0x110>)
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80082b6:	4b37      	ldr	r3, [pc, #220]	; (8008394 <low_level_init+0x110>)
 80082b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80082bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80082be:	4b35      	ldr	r3, [pc, #212]	; (8008394 <low_level_init+0x110>)
 80082c0:	4a36      	ldr	r2, [pc, #216]	; (800839c <low_level_init+0x118>)
 80082c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80082c4:	4b33      	ldr	r3, [pc, #204]	; (8008394 <low_level_init+0x110>)
 80082c6:	4a36      	ldr	r2, [pc, #216]	; (80083a0 <low_level_init+0x11c>)
 80082c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80082ca:	4b32      	ldr	r3, [pc, #200]	; (8008394 <low_level_init+0x110>)
 80082cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80082d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80082d2:	4830      	ldr	r0, [pc, #192]	; (8008394 <low_level_init+0x110>)
 80082d4:	f7f9 ff5c 	bl	8002190 <HAL_ETH_Init>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80082dc:	2238      	movs	r2, #56	; 0x38
 80082de:	2100      	movs	r1, #0
 80082e0:	4830      	ldr	r0, [pc, #192]	; (80083a4 <low_level_init+0x120>)
 80082e2:	f00f ffd8 	bl	8018296 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80082e6:	4b2f      	ldr	r3, [pc, #188]	; (80083a4 <low_level_init+0x120>)
 80082e8:	2221      	movs	r2, #33	; 0x21
 80082ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80082ec:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <low_level_init+0x120>)
 80082ee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80082f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80082f4:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <low_level_init+0x120>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80082fa:	482b      	ldr	r0, [pc, #172]	; (80083a8 <low_level_init+0x124>)
 80082fc:	f004 ff3e 	bl	800d17c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2206      	movs	r2, #6
 8008304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008308:	4b22      	ldr	r3, [pc, #136]	; (8008394 <low_level_init+0x110>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008314:	4b1f      	ldr	r3, [pc, #124]	; (8008394 <low_level_init+0x110>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	785a      	ldrb	r2, [r3, #1]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008320:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <low_level_init+0x110>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	789a      	ldrb	r2, [r3, #2]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800832c:	4b19      	ldr	r3, [pc, #100]	; (8008394 <low_level_init+0x110>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	78da      	ldrb	r2, [r3, #3]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <low_level_init+0x110>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	791a      	ldrb	r2, [r3, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008344:	4b13      	ldr	r3, [pc, #76]	; (8008394 <low_level_init+0x110>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	795a      	ldrb	r2, [r3, #5]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008356:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800835e:	f043 030a 	orr.w	r3, r3, #10
 8008362:	b2da      	uxtb	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800836a:	4910      	ldr	r1, [pc, #64]	; (80083ac <low_level_init+0x128>)
 800836c:	4810      	ldr	r0, [pc, #64]	; (80083b0 <low_level_init+0x12c>)
 800836e:	f7f9 f804 	bl	800137a <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8008372:	480f      	ldr	r0, [pc, #60]	; (80083b0 <low_level_init+0x12c>)
 8008374:	f7f9 f833 	bl	80013de <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa18 	bl	80087b4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008384:	e001      	b.n	800838a <low_level_init+0x106>
    Error_Handler();
 8008386:	f7f8 fa37 	bl	80007f8 <Error_Handler>
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20004ef8 	.word	0x20004ef8
 8008398:	40028000 	.word	0x40028000
 800839c:	20004e58 	.word	0x20004e58
 80083a0:	20004db8 	.word	0x20004db8
 80083a4:	20004fa8 	.word	0x20004fa8
 80083a8:	0801bae8 	.word	0x0801bae8
 80083ac:	20000020 	.word	0x20000020
 80083b0:	20004fe0 	.word	0x20004fe0

080083b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b092      	sub	sp, #72	; 0x48
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80083cc:	f107 030c 	add.w	r3, r7, #12
 80083d0:	2230      	movs	r2, #48	; 0x30
 80083d2:	2100      	movs	r1, #0
 80083d4:	4618      	mov	r0, r3
 80083d6:	f00f ff5e 	bl	8018296 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	2230      	movs	r2, #48	; 0x30
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f00f ff57 	bl	8018296 <memset>

  for(q = p; q != NULL; q = q->next)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
 80083ec:	e045      	b.n	800847a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80083ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d902      	bls.n	80083fa <low_level_output+0x46>
      return ERR_IF;
 80083f4:	f06f 030b 	mvn.w	r3, #11
 80083f8:	e055      	b.n	80084a6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80083fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fc:	6859      	ldr	r1, [r3, #4]
 80083fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	3348      	adds	r3, #72	; 0x48
 800840a:	443b      	add	r3, r7
 800840c:	3b3c      	subs	r3, #60	; 0x3c
 800840e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008412:	895b      	ldrh	r3, [r3, #10]
 8008414:	4619      	mov	r1, r3
 8008416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008418:	4613      	mov	r3, r2
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	3348      	adds	r3, #72	; 0x48
 8008422:	443b      	add	r3, r7
 8008424:	3b38      	subs	r3, #56	; 0x38
 8008426:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842a:	2b00      	cmp	r3, #0
 800842c:	d011      	beq.n	8008452 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800842e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	f107 000c 	add.w	r0, r7, #12
 8008436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008438:	460b      	mov	r3, r1
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	440b      	add	r3, r1
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	18c1      	adds	r1, r0, r3
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	3348      	adds	r3, #72	; 0x48
 800844c:	443b      	add	r3, r7
 800844e:	3b34      	subs	r3, #52	; 0x34
 8008450:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800845a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800845c:	4613      	mov	r3, r2
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	3348      	adds	r3, #72	; 0x48
 8008466:	443b      	add	r3, r7
 8008468:	3b34      	subs	r3, #52	; 0x34
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	3301      	adds	r3, #1
 8008472:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
 800847a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1b6      	bne.n	80083ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	891b      	ldrh	r3, [r3, #8]
 8008484:	461a      	mov	r2, r3
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <low_level_output+0xfc>)
 8008488:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <low_level_output+0xfc>)
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <low_level_output+0xfc>)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008498:	2214      	movs	r2, #20
 800849a:	4905      	ldr	r1, [pc, #20]	; (80084b0 <low_level_output+0xfc>)
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <low_level_output+0x100>)
 800849e:	f7f9 ffad 	bl	80023fc <HAL_ETH_Transmit>

  return errval;
 80084a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3748      	adds	r7, #72	; 0x48
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20004fa8 	.word	0x20004fa8
 80084b4:	20004ef8 	.word	0x20004ef8

080084b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <low_level_input+0x2c>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d105      	bne.n	80084d8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4619      	mov	r1, r3
 80084d2:	4805      	ldr	r0, [pc, #20]	; (80084e8 <low_level_input+0x30>)
 80084d4:	f7fa f826 	bl	8002524 <HAL_ETH_ReadData>
  }

  return p;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20004db4 	.word	0x20004db4
 80084e8:	20004ef8 	.word	0x20004ef8

080084ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ffdd 	bl	80084b8 <low_level_input>
 80084fe:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f005 fdac 	bl	800e074 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1ea      	bne.n	80084f8 <ethernetif_input+0xc>
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <ethernetif_init+0x1c>
 800853a:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <ethernetif_init+0x48>)
 800853c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008540:	490d      	ldr	r1, [pc, #52]	; (8008578 <ethernetif_init+0x4c>)
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <ethernetif_init+0x50>)
 8008544:	f00f fe42 	bl	80181cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2273      	movs	r2, #115	; 0x73
 800854c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2274      	movs	r2, #116	; 0x74
 8008554:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a09      	ldr	r2, [pc, #36]	; (8008580 <ethernetif_init+0x54>)
 800855c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a08      	ldr	r2, [pc, #32]	; (8008584 <ethernetif_init+0x58>)
 8008562:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff fe8d 	bl	8008284 <low_level_init>

  return ERR_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	08019070 	.word	0x08019070
 8008578:	0801908c 	.word	0x0801908c
 800857c:	0801909c 	.word	0x0801909c
 8008580:	080153b1 	.word	0x080153b1
 8008584:	080083b5 	.word	0x080083b5

08008588 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	4807      	ldr	r0, [pc, #28]	; (80085b4 <pbuf_free_custom+0x2c>)
 8008598:	f004 fed2 	bl	800d340 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <pbuf_free_custom+0x30>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d102      	bne.n	80085aa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <pbuf_free_custom+0x30>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	701a      	strb	r2, [r3, #0]
  }
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	0801bae8 	.word	0x0801bae8
 80085b8:	20004db4 	.word	0x20004db4

080085bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085c0:	f7f9 f8a2 	bl	8001708 <HAL_GetTick>
 80085c4:	4603      	mov	r3, r0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	609a      	str	r2, [r3, #8]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a46      	ldr	r2, [pc, #280]	; (8008704 <HAL_ETH_MspInit+0x138>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	f040 8085 	bne.w	80086fa <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80085f0:	2300      	movs	r3, #0
 80085f2:	623b      	str	r3, [r7, #32]
 80085f4:	4b44      	ldr	r3, [pc, #272]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	4a43      	ldr	r2, [pc, #268]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 80085fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008600:	4b41      	ldr	r3, [pc, #260]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008608:	623b      	str	r3, [r7, #32]
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	4b3d      	ldr	r3, [pc, #244]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	4a3c      	ldr	r2, [pc, #240]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800861a:	6313      	str	r3, [r2, #48]	; 0x30
 800861c:	4b3a      	ldr	r3, [pc, #232]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	4b36      	ldr	r3, [pc, #216]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	4a35      	ldr	r2, [pc, #212]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008636:	6313      	str	r3, [r2, #48]	; 0x30
 8008638:	4b33      	ldr	r3, [pc, #204]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	4a2e      	ldr	r2, [pc, #184]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800864e:	f043 0304 	orr.w	r3, r3, #4
 8008652:	6313      	str	r3, [r2, #48]	; 0x30
 8008654:	4b2c      	ldr	r3, [pc, #176]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	4b28      	ldr	r3, [pc, #160]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	4a27      	ldr	r2, [pc, #156]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800866a:	f043 0301 	orr.w	r3, r3, #1
 800866e:	6313      	str	r3, [r2, #48]	; 0x30
 8008670:	4b25      	ldr	r3, [pc, #148]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	4b21      	ldr	r3, [pc, #132]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	4a20      	ldr	r2, [pc, #128]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 8008686:	f043 0302 	orr.w	r3, r3, #2
 800868a:	6313      	str	r3, [r2, #48]	; 0x30
 800868c:	4b1e      	ldr	r3, [pc, #120]	; (8008708 <HAL_ETH_MspInit+0x13c>)
 800868e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008698:	2332      	movs	r3, #50	; 0x32
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869c:	2302      	movs	r3, #2
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a4:	2303      	movs	r3, #3
 80086a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086a8:	230b      	movs	r3, #11
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b0:	4619      	mov	r1, r3
 80086b2:	4816      	ldr	r0, [pc, #88]	; (800870c <HAL_ETH_MspInit+0x140>)
 80086b4:	f7fa fe6e 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80086b8:	2386      	movs	r3, #134	; 0x86
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086bc:	2302      	movs	r3, #2
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086c4:	2303      	movs	r3, #3
 80086c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086c8:	230b      	movs	r3, #11
 80086ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d0:	4619      	mov	r1, r3
 80086d2:	480f      	ldr	r0, [pc, #60]	; (8008710 <HAL_ETH_MspInit+0x144>)
 80086d4:	f7fa fe5e 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80086d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086de:	2302      	movs	r3, #2
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e6:	2303      	movs	r3, #3
 80086e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086ea:	230b      	movs	r3, #11
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086f2:	4619      	mov	r1, r3
 80086f4:	4807      	ldr	r0, [pc, #28]	; (8008714 <HAL_ETH_MspInit+0x148>)
 80086f6:	f7fa fe4d 	bl	8003394 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80086fa:	bf00      	nop
 80086fc:	3738      	adds	r7, #56	; 0x38
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40028000 	.word	0x40028000
 8008708:	40023800 	.word	0x40023800
 800870c:	40020800 	.word	0x40020800
 8008710:	40020000 	.word	0x40020000
 8008714:	40020400 	.word	0x40020400

08008718 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800871c:	4802      	ldr	r0, [pc, #8]	; (8008728 <ETH_PHY_IO_Init+0x10>)
 800871e:	f7fa f9dd 	bl	8002adc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20004ef8 	.word	0x20004ef8

0800872c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  return 0;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	4807      	ldr	r0, [pc, #28]	; (800876c <ETH_PHY_IO_ReadReg+0x30>)
 8008750:	f7fa f82c 	bl	80027ac <HAL_ETH_ReadPHYRegister>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295
 800875e:	e000      	b.n	8008762 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20004ef8 	.word	0x20004ef8

08008770 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	68f9      	ldr	r1, [r7, #12]
 8008782:	4807      	ldr	r0, [pc, #28]	; (80087a0 <ETH_PHY_IO_WriteReg+0x30>)
 8008784:	f7fa f85d 	bl	8002842 <HAL_ETH_WritePHYRegister>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295
 8008792:	e000      	b.n	8008796 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20004ef8 	.word	0x20004ef8

080087a4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087a8:	f7f8 ffae 	bl	8001708 <HAL_GetTick>
 80087ac:	4603      	mov	r3, r0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b0a0      	sub	sp, #128	; 0x80
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	2264      	movs	r2, #100	; 0x64
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f00f fd66 	bl	8018296 <memset>
  int32_t PHYLinkState = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087d2:	2300      	movs	r3, #0
 80087d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80087d6:	2300      	movs	r3, #0
 80087d8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80087da:	483a      	ldr	r0, [pc, #232]	; (80088c4 <ethernet_link_check_state+0x110>)
 80087dc:	f7f8 fea7 	bl	800152e <DP83848_GetLinkState>
 80087e0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087e8:	089b      	lsrs	r3, r3, #2
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00c      	beq.n	800880e <ethernet_link_check_state+0x5a>
 80087f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	dc09      	bgt.n	800880e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80087fa:	4833      	ldr	r0, [pc, #204]	; (80088c8 <ethernet_link_check_state+0x114>)
 80087fc:	f7f9 fda5 	bl	800234a <HAL_ETH_Stop>
    netif_set_down(netif);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f005 f821 	bl	800d848 <netif_set_down>
    netif_set_link_down(netif);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f005 f884 	bl	800d914 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800880c:	e055      	b.n	80088ba <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d14e      	bne.n	80088ba <ethernet_link_check_state+0x106>
 800881c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800881e:	2b01      	cmp	r3, #1
 8008820:	dd4b      	ble.n	80088ba <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008824:	3b02      	subs	r3, #2
 8008826:	2b03      	cmp	r3, #3
 8008828:	d82a      	bhi.n	8008880 <ethernet_link_check_state+0xcc>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <ethernet_link_check_state+0x7c>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008841 	.word	0x08008841
 8008834:	08008853 	.word	0x08008853
 8008838:	08008863 	.word	0x08008863
 800883c:	08008873 	.word	0x08008873
      duplex = ETH_FULLDUPLEX_MODE;
 8008840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008844:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800884a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800884c:	2301      	movs	r3, #1
 800884e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008850:	e017      	b.n	8008882 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008852:	2300      	movs	r3, #0
 8008854:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800885a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800885c:	2301      	movs	r3, #1
 800885e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008860:	e00f      	b.n	8008882 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008866:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008868:	2300      	movs	r3, #0
 800886a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800886c:	2301      	movs	r3, #1
 800886e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008870:	e007      	b.n	8008882 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008872:	2300      	movs	r3, #0
 8008874:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008876:	2300      	movs	r3, #0
 8008878:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800887a:	2301      	movs	r3, #1
 800887c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800887e:	e000      	b.n	8008882 <ethernet_link_check_state+0xce>
      break;
 8008880:	bf00      	nop
    if(linkchanged)
 8008882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d018      	beq.n	80088ba <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	4619      	mov	r1, r3
 800888e:	480e      	ldr	r0, [pc, #56]	; (80088c8 <ethernet_link_check_state+0x114>)
 8008890:	f7fa f820 	bl	80028d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800889a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	4619      	mov	r1, r3
 80088a2:	4809      	ldr	r0, [pc, #36]	; (80088c8 <ethernet_link_check_state+0x114>)
 80088a4:	f7fa f900 	bl	8002aa8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80088a8:	4807      	ldr	r0, [pc, #28]	; (80088c8 <ethernet_link_check_state+0x114>)
 80088aa:	f7f9 fcef 	bl	800228c <HAL_ETH_Start>
      netif_set_up(netif);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f004 ff5e 	bl	800d770 <netif_set_up>
      netif_set_link_up(netif);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f004 fff9 	bl	800d8ac <netif_set_link_up>
}
 80088ba:	bf00      	nop
 80088bc:	3780      	adds	r7, #128	; 0x80
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20004fe0 	.word	0x20004fe0
 80088c8:	20004ef8 	.word	0x20004ef8

080088cc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80088d4:	4812      	ldr	r0, [pc, #72]	; (8008920 <HAL_ETH_RxAllocateCallback+0x54>)
 80088d6:	f004 fcc5 	bl	800d264 <memp_malloc_pool>
 80088da:	60f8      	str	r0, [r7, #12]
  if (p)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d014      	beq.n	800890c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f103 0220 	add.w	r2, r3, #32
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4a0d      	ldr	r2, [pc, #52]	; (8008924 <HAL_ETH_RxAllocateCallback+0x58>)
 80088f0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80088fa:	9201      	str	r2, [sp, #4]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2241      	movs	r2, #65	; 0x41
 8008902:	2100      	movs	r1, #0
 8008904:	2000      	movs	r0, #0
 8008906:	f005 f9fb 	bl	800dd00 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800890a:	e005      	b.n	8008918 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <HAL_ETH_RxAllocateCallback+0x5c>)
 800890e:	2201      	movs	r2, #1
 8008910:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	0801bae8 	.word	0x0801bae8
 8008924:	08008589 	.word	0x08008589
 8008928:	20004db4 	.word	0x20004db4

0800892c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800892c:	b480      	push	{r7}
 800892e:	b089      	sub	sp, #36	; 0x24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3b20      	subs	r3, #32
 800894a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2200      	movs	r2, #0
 8008956:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	887a      	ldrh	r2, [r7, #2]
 800895c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e003      	b.n	8008976 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e009      	b.n	8008998 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	891a      	ldrh	r2, [r3, #8]
 8008988:	887b      	ldrh	r3, [r7, #2]
 800898a:	4413      	add	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f2      	bne.n	8008984 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	3724      	adds	r7, #36	; 0x24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089bc:	f00f fa32 	bl	8017e24 <USBD_static_malloc>
 80089c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32b0      	adds	r2, #176	; 0xb0
 80089d2:	2100      	movs	r1, #0
 80089d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80089d8:	2302      	movs	r3, #2
 80089da:	e0d4      	b.n	8008b86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80089dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80089e0:	2100      	movs	r1, #0
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f00f fc57 	bl	8018296 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	32b0      	adds	r2, #176	; 0xb0
 80089f2:	68f9      	ldr	r1, [r7, #12]
 80089f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	32b0      	adds	r2, #176	; 0xb0
 8008a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7c1b      	ldrb	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d138      	bne.n	8008a86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a14:	4b5e      	ldr	r3, [pc, #376]	; (8008b90 <USBD_CDC_Init+0x1e4>)
 8008a16:	7819      	ldrb	r1, [r3, #0]
 8008a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f00f f8bd 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a24:	4b5a      	ldr	r3, [pc, #360]	; (8008b90 <USBD_CDC_Init+0x1e4>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 020f 	and.w	r2, r3, #15
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	3324      	adds	r3, #36	; 0x24
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a3e:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008a40:	7819      	ldrb	r1, [r3, #0]
 8008a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a46:	2202      	movs	r2, #2
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f00f f8a8 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a4e:	4b51      	ldr	r3, [pc, #324]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f003 020f 	and.w	r2, r3, #15
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a66:	2201      	movs	r2, #1
 8008a68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a6a:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <USBD_CDC_Init+0x1ec>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 020f 	and.w	r2, r3, #15
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	3326      	adds	r3, #38	; 0x26
 8008a80:	2210      	movs	r2, #16
 8008a82:	801a      	strh	r2, [r3, #0]
 8008a84:	e035      	b.n	8008af2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a86:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <USBD_CDC_Init+0x1e4>)
 8008a88:	7819      	ldrb	r1, [r3, #0]
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f00f f885 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a94:	4b3e      	ldr	r3, [pc, #248]	; (8008b90 <USBD_CDC_Init+0x1e4>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3324      	adds	r3, #36	; 0x24
 8008aaa:	2201      	movs	r2, #1
 8008aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008aae:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008ab0:	7819      	ldrb	r1, [r3, #0]
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f00f f871 	bl	8017b9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008abc:	4b35      	ldr	r3, [pc, #212]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 020f 	and.w	r2, r3, #15
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ad8:	4b2f      	ldr	r3, [pc, #188]	; (8008b98 <USBD_CDC_Init+0x1ec>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 020f 	and.w	r2, r3, #15
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	3326      	adds	r3, #38	; 0x26
 8008aee:	2210      	movs	r2, #16
 8008af0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008af2:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <USBD_CDC_Init+0x1ec>)
 8008af4:	7819      	ldrb	r1, [r3, #0]
 8008af6:	2308      	movs	r3, #8
 8008af8:	2203      	movs	r2, #3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f00f f84f 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b00:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <USBD_CDC_Init+0x1ec>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	2201      	movs	r2, #1
 8008b18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	33b0      	adds	r3, #176	; 0xb0
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008b50:	2302      	movs	r3, #2
 8008b52:	e018      	b.n	8008b86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7c1b      	ldrb	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008b5e:	7819      	ldrb	r1, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f00f f925 	bl	8017dba <USBD_LL_PrepareReceive>
 8008b70:	e008      	b.n	8008b84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <USBD_CDC_Init+0x1e8>)
 8008b74:	7819      	ldrb	r1, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b7c:	2340      	movs	r3, #64	; 0x40
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f00f f91b 	bl	8017dba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200000bb 	.word	0x200000bb
 8008b94:	200000bc 	.word	0x200000bc
 8008b98:	200000bd 	.word	0x200000bd

08008b9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ba8:	4b3a      	ldr	r3, [pc, #232]	; (8008c94 <USBD_CDC_DeInit+0xf8>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f00f f81b 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008bb4:	4b37      	ldr	r3, [pc, #220]	; (8008c94 <USBD_CDC_DeInit+0xf8>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 020f 	and.w	r2, r3, #15
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3324      	adds	r3, #36	; 0x24
 8008bca:	2200      	movs	r2, #0
 8008bcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008bce:	4b32      	ldr	r3, [pc, #200]	; (8008c98 <USBD_CDC_DeInit+0xfc>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f00f f808 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008bda:	4b2f      	ldr	r3, [pc, #188]	; (8008c98 <USBD_CDC_DeInit+0xfc>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	f003 020f 	and.w	r2, r3, #15
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008bf6:	4b29      	ldr	r3, [pc, #164]	; (8008c9c <USBD_CDC_DeInit+0x100>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f00e fff4 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c02:	4b26      	ldr	r3, [pc, #152]	; (8008c9c <USBD_CDC_DeInit+0x100>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	2200      	movs	r2, #0
 8008c1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c1c:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <USBD_CDC_DeInit+0x100>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3326      	adds	r3, #38	; 0x26
 8008c32:	2200      	movs	r2, #0
 8008c34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	32b0      	adds	r2, #176	; 0xb0
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01f      	beq.n	8008c88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	33b0      	adds	r3, #176	; 0xb0
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	32b0      	adds	r2, #176	; 0xb0
 8008c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00f f8e8 	bl	8017e40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	32b0      	adds	r2, #176	; 0xb0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	200000bb 	.word	0x200000bb
 8008c98:	200000bc 	.word	0x200000bc
 8008c9c:	200000bd 	.word	0x200000bd

08008ca0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	32b0      	adds	r2, #176	; 0xb0
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e0bf      	b.n	8008e50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d050      	beq.n	8008d7e <USBD_CDC_Setup+0xde>
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	f040 80af 	bne.w	8008e40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	88db      	ldrh	r3, [r3, #6]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d03a      	beq.n	8008d60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	b25b      	sxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da1b      	bge.n	8008d2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	33b0      	adds	r3, #176	; 0xb0
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	88d2      	ldrh	r2, [r2, #6]
 8008d10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	2b07      	cmp	r3, #7
 8008d18:	bf28      	it	cs
 8008d1a:	2307      	movcs	r3, #7
 8008d1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	89fa      	ldrh	r2, [r7, #14]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f003 fd6d 	bl	800c804 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d2a:	e090      	b.n	8008e4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785a      	ldrb	r2, [r3, #1]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8008d3c:	d803      	bhi.n	8008d46 <USBD_CDC_Setup+0xa6>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	e000      	b.n	8008d48 <USBD_CDC_Setup+0xa8>
 8008d46:	2240      	movs	r2, #64	; 0x40
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008d4e:	6939      	ldr	r1, [r7, #16]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d56:	461a      	mov	r2, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f003 fd7f 	bl	800c85c <USBD_CtlPrepareRx>
      break;
 8008d5e:	e076      	b.n	8008e4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	33b0      	adds	r3, #176	; 0xb0
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	7850      	ldrb	r0, [r2, #1]
 8008d76:	2200      	movs	r2, #0
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	4798      	blx	r3
      break;
 8008d7c:	e067      	b.n	8008e4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b0b      	cmp	r3, #11
 8008d84:	d851      	bhi.n	8008e2a <USBD_CDC_Setup+0x18a>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_CDC_Setup+0xec>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008dbd 	.word	0x08008dbd
 8008d90:	08008e39 	.word	0x08008e39
 8008d94:	08008e2b 	.word	0x08008e2b
 8008d98:	08008e2b 	.word	0x08008e2b
 8008d9c:	08008e2b 	.word	0x08008e2b
 8008da0:	08008e2b 	.word	0x08008e2b
 8008da4:	08008e2b 	.word	0x08008e2b
 8008da8:	08008e2b 	.word	0x08008e2b
 8008dac:	08008e2b 	.word	0x08008e2b
 8008db0:	08008e2b 	.word	0x08008e2b
 8008db4:	08008de7 	.word	0x08008de7
 8008db8:	08008e11 	.word	0x08008e11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d107      	bne.n	8008dd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008dc8:	f107 030a 	add.w	r3, r7, #10
 8008dcc:	2202      	movs	r2, #2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f003 fd17 	bl	800c804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd6:	e032      	b.n	8008e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 fca1 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	75fb      	strb	r3, [r7, #23]
          break;
 8008de4:	e02b      	b.n	8008e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d107      	bne.n	8008e02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008df2:	f107 030d 	add.w	r3, r7, #13
 8008df6:	2201      	movs	r2, #1
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f003 fd02 	bl	800c804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e00:	e01d      	b.n	8008e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f003 fc8c 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0e:	e016      	b.n	8008e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d00f      	beq.n	8008e3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f003 fc7f 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e24:	2303      	movs	r3, #3
 8008e26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e28:	e008      	b.n	8008e3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f003 fc78 	bl	800c722 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	75fb      	strb	r3, [r7, #23]
          break;
 8008e36:	e002      	b.n	8008e3e <USBD_CDC_Setup+0x19e>
          break;
 8008e38:	bf00      	nop
 8008e3a:	e008      	b.n	8008e4e <USBD_CDC_Setup+0x1ae>
          break;
 8008e3c:	bf00      	nop
      }
      break;
 8008e3e:	e006      	b.n	8008e4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f003 fc6d 	bl	800c722 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	32b0      	adds	r2, #176	; 0xb0
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e065      	b.n	8008f4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	32b0      	adds	r2, #176	; 0xb0
 8008e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	f003 020f 	and.w	r2, r3, #15
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	440b      	add	r3, r1
 8008ea4:	3318      	adds	r3, #24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d02f      	beq.n	8008f0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	3318      	adds	r3, #24
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	f003 010f 	and.w	r1, r3, #15
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	440b      	add	r3, r1
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4403      	add	r3, r0
 8008ed4:	331c      	adds	r3, #28
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d112      	bne.n	8008f0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	f003 020f 	and.w	r2, r3, #15
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	3318      	adds	r3, #24
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f00e ff37 	bl	8017d78 <USBD_LL_Transmit>
 8008f0a:	e01f      	b.n	8008f4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	33b0      	adds	r3, #176	; 0xb0
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	33b0      	adds	r3, #176	; 0xb0
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	32b0      	adds	r2, #176	; 0xb0
 8008f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	32b0      	adds	r2, #176	; 0xb0
 8008f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e01a      	b.n	8008fbe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f00e ff35 	bl	8017dfc <USBD_LL_GetRxDataSize>
 8008f92:	4602      	mov	r2, r0
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	33b0      	adds	r3, #176	; 0xb0
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	32b0      	adds	r2, #176	; 0xb0
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e025      	b.n	8009034 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	33b0      	adds	r3, #176	; 0xb0
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01a      	beq.n	8009032 <USBD_CDC_EP0_RxReady+0x6c>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009002:	2bff      	cmp	r3, #255	; 0xff
 8009004:	d015      	beq.n	8009032 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	33b0      	adds	r3, #176	; 0xb0
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800901e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009026:	b292      	uxth	r2, r2
 8009028:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	22ff      	movs	r2, #255	; 0xff
 800902e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009044:	2182      	movs	r1, #130	; 0x82
 8009046:	4818      	ldr	r0, [pc, #96]	; (80090a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009048:	f002 fd32 	bl	800bab0 <USBD_GetEpDesc>
 800904c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800904e:	2101      	movs	r1, #1
 8009050:	4815      	ldr	r0, [pc, #84]	; (80090a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009052:	f002 fd2d 	bl	800bab0 <USBD_GetEpDesc>
 8009056:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009058:	2181      	movs	r1, #129	; 0x81
 800905a:	4813      	ldr	r0, [pc, #76]	; (80090a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800905c:	f002 fd28 	bl	800bab0 <USBD_GetEpDesc>
 8009060:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2210      	movs	r2, #16
 800906c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d006      	beq.n	8009082 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2200      	movs	r2, #0
 8009078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800907c:	711a      	strb	r2, [r3, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d006      	beq.n	8009096 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009090:	711a      	strb	r2, [r3, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2243      	movs	r2, #67	; 0x43
 800909a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000078 	.word	0x20000078

080090ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090b4:	2182      	movs	r1, #130	; 0x82
 80090b6:	4818      	ldr	r0, [pc, #96]	; (8009118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090b8:	f002 fcfa 	bl	800bab0 <USBD_GetEpDesc>
 80090bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090be:	2101      	movs	r1, #1
 80090c0:	4815      	ldr	r0, [pc, #84]	; (8009118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090c2:	f002 fcf5 	bl	800bab0 <USBD_GetEpDesc>
 80090c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090c8:	2181      	movs	r1, #129	; 0x81
 80090ca:	4813      	ldr	r0, [pc, #76]	; (8009118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090cc:	f002 fcf0 	bl	800bab0 <USBD_GetEpDesc>
 80090d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2210      	movs	r2, #16
 80090dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d006      	beq.n	80090f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2200      	movs	r2, #0
 80090e8:	711a      	strb	r2, [r3, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f042 0202 	orr.w	r2, r2, #2
 80090f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d006      	beq.n	8009106 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	711a      	strb	r2, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f042 0202 	orr.w	r2, r2, #2
 8009104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2243      	movs	r2, #67	; 0x43
 800910a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000078 	.word	0x20000078

0800911c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009124:	2182      	movs	r1, #130	; 0x82
 8009126:	4818      	ldr	r0, [pc, #96]	; (8009188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009128:	f002 fcc2 	bl	800bab0 <USBD_GetEpDesc>
 800912c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800912e:	2101      	movs	r1, #1
 8009130:	4815      	ldr	r0, [pc, #84]	; (8009188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009132:	f002 fcbd 	bl	800bab0 <USBD_GetEpDesc>
 8009136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009138:	2181      	movs	r1, #129	; 0x81
 800913a:	4813      	ldr	r0, [pc, #76]	; (8009188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800913c:	f002 fcb8 	bl	800bab0 <USBD_GetEpDesc>
 8009140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2210      	movs	r2, #16
 800914c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d006      	beq.n	8009162 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2200      	movs	r2, #0
 8009158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800915c:	711a      	strb	r2, [r3, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009170:	711a      	strb	r2, [r3, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2243      	movs	r2, #67	; 0x43
 800917a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000078 	.word	0x20000078

0800918c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	220a      	movs	r2, #10
 8009198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	20000034 	.word	0x20000034

080091ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091bc:	2303      	movs	r3, #3
 80091be:	e009      	b.n	80091d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	33b0      	adds	r3, #176	; 0xb0
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	32b0      	adds	r2, #176	; 0xb0
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009202:	2303      	movs	r3, #3
 8009204:	e008      	b.n	8009218 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	371c      	adds	r7, #28
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	32b0      	adds	r2, #176	; 0xb0
 8009238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	e004      	b.n	8009252 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	32b0      	adds	r2, #176	; 0xb0
 8009272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009276:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	e025      	b.n	80092d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11f      	bne.n	80092d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2201      	movs	r2, #1
 8009294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009298:	4b10      	ldr	r3, [pc, #64]	; (80092dc <USBD_CDC_TransmitPacket+0x7c>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f003 020f 	and.w	r2, r3, #15
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4403      	add	r3, r0
 80092b2:	3318      	adds	r3, #24
 80092b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80092b6:	4b09      	ldr	r3, [pc, #36]	; (80092dc <USBD_CDC_TransmitPacket+0x7c>)
 80092b8:	7819      	ldrb	r1, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f00e fd56 	bl	8017d78 <USBD_LL_Transmit>

    ret = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200000bb 	.word	0x200000bb

080092e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	32b0      	adds	r2, #176	; 0xb0
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32b0      	adds	r2, #176	; 0xb0
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	e018      	b.n	8009340 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7c1b      	ldrb	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10a      	bne.n	800932c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <USBD_CDC_ReceivePacket+0x68>)
 8009318:	7819      	ldrb	r1, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f00e fd48 	bl	8017dba <USBD_LL_PrepareReceive>
 800932a:	e008      	b.n	800933e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <USBD_CDC_ReceivePacket+0x68>)
 800932e:	7819      	ldrb	r1, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f00e fd3e 	bl	8017dba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	200000bc 	.word	0x200000bc

0800934c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8009358:	f44f 701d 	mov.w	r0, #628	; 0x274
 800935c:	f00e fd62 	bl	8017e24 <USBD_static_malloc>
 8009360:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32b0      	adds	r2, #176	; 0xb0
 8009372:	2100      	movs	r1, #0
 8009374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009378:	2302      	movs	r3, #2
 800937a:	e06e      	b.n	800945a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	32b0      	adds	r2, #176	; 0xb0
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7c1b      	ldrb	r3, [r3, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d12b      	bne.n	8009400 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80093a8:	4b2e      	ldr	r3, [pc, #184]	; (8009464 <USBD_MSC_Init+0x118>)
 80093aa:	7819      	ldrb	r1, [r3, #0]
 80093ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093b0:	2202      	movs	r2, #2
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f00e fbf3 	bl	8017b9e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80093b8:	4b2a      	ldr	r3, [pc, #168]	; (8009464 <USBD_MSC_Init+0x118>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 020f 	and.w	r2, r3, #15
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093d0:	2201      	movs	r2, #1
 80093d2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <USBD_MSC_Init+0x11c>)
 80093d6:	7819      	ldrb	r1, [r3, #0]
 80093d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093dc:	2202      	movs	r2, #2
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f00e fbdd 	bl	8017b9e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80093e4:	4b20      	ldr	r3, [pc, #128]	; (8009468 <USBD_MSC_Init+0x11c>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	f003 020f 	and.w	r2, r3, #15
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	3324      	adds	r3, #36	; 0x24
 80093fa:	2201      	movs	r2, #1
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	e028      	b.n	8009452 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009400:	4b18      	ldr	r3, [pc, #96]	; (8009464 <USBD_MSC_Init+0x118>)
 8009402:	7819      	ldrb	r1, [r3, #0]
 8009404:	2340      	movs	r3, #64	; 0x40
 8009406:	2202      	movs	r2, #2
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f00e fbc8 	bl	8017b9e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800940e:	4b15      	ldr	r3, [pc, #84]	; (8009464 <USBD_MSC_Init+0x118>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	f003 020f 	and.w	r2, r3, #15
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009426:	2201      	movs	r2, #1
 8009428:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800942a:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <USBD_MSC_Init+0x11c>)
 800942c:	7819      	ldrb	r1, [r3, #0]
 800942e:	2340      	movs	r3, #64	; 0x40
 8009430:	2202      	movs	r2, #2
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f00e fbb3 	bl	8017b9e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009438:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <USBD_MSC_Init+0x11c>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 020f 	and.w	r2, r3, #15
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	3324      	adds	r3, #36	; 0x24
 800944e:	2201      	movs	r2, #1
 8009450:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa2c 	bl	80098b0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000123 	.word	0x20000123
 8009468:	20000122 	.word	0x20000122

0800946c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8009478:	4b26      	ldr	r3, [pc, #152]	; (8009514 <USBD_MSC_DeInit+0xa8>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f00e fbb3 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009484:	4b23      	ldr	r3, [pc, #140]	; (8009514 <USBD_MSC_DeInit+0xa8>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 020f 	and.w	r2, r3, #15
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800949c:	2200      	movs	r2, #0
 800949e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <USBD_MSC_DeInit+0xac>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f00e fb9f 	bl	8017bea <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <USBD_MSC_DeInit+0xac>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f003 020f 	and.w	r2, r3, #15
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	440b      	add	r3, r1
 80094c0:	3324      	adds	r3, #36	; 0x24
 80094c2:	2200      	movs	r2, #0
 80094c4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	32b0      	adds	r2, #176	; 0xb0
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d018      	beq.n	800950a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fa67 	bl	80099ac <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	32b0      	adds	r2, #176	; 0xb0
 80094e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f00e fca7 	bl	8017e40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	32b0      	adds	r2, #176	; 0xb0
 80094fc:	2100      	movs	r1, #0
 80094fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000123 	.word	0x20000123
 8009518:	20000122 	.word	0x20000122

0800951c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32b0      	adds	r2, #176	; 0xb0
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	e0e1      	b.n	800970c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009550:	2b00      	cmp	r3, #0
 8009552:	d053      	beq.n	80095fc <USBD_MSC_Setup+0xe0>
 8009554:	2b20      	cmp	r3, #32
 8009556:	f040 80d1 	bne.w	80096fc <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2bfe      	cmp	r3, #254	; 0xfe
 8009560:	d002      	beq.n	8009568 <USBD_MSC_Setup+0x4c>
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d02a      	beq.n	80095bc <USBD_MSC_Setup+0xa0>
 8009566:	e041      	b.n	80095ec <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11e      	bne.n	80095ae <USBD_MSC_Setup+0x92>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	88db      	ldrh	r3, [r3, #6]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d11a      	bne.n	80095ae <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800957e:	2b00      	cmp	r3, #0
 8009580:	da15      	bge.n	80095ae <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	33b0      	adds	r3, #176	; 0xb0
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	4798      	blx	r3
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2201      	movs	r2, #1
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f003 f92d 	bl	800c804 <USBD_CtlSendData>
 80095aa:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095ac:	e025      	b.n	80095fa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f003 f8b6 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 80095b6:	2303      	movs	r3, #3
 80095b8:	75fb      	strb	r3, [r7, #23]
          break;
 80095ba:	e01e      	b.n	80095fa <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10c      	bne.n	80095de <USBD_MSC_Setup+0xc2>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	88db      	ldrh	r3, [r3, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db03      	blt.n	80095de <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9b4 	bl	8009944 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095dc:	e00d      	b.n	80095fa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f003 f89e 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 80095e6:	2303      	movs	r3, #3
 80095e8:	75fb      	strb	r3, [r7, #23]
          break;
 80095ea:	e006      	b.n	80095fa <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f003 f897 	bl	800c722 <USBD_CtlError>
          ret = USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	75fb      	strb	r3, [r7, #23]
          break;
 80095f8:	bf00      	nop
      }
      break;
 80095fa:	e086      	b.n	800970a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b0b      	cmp	r3, #11
 8009602:	d872      	bhi.n	80096ea <USBD_MSC_Setup+0x1ce>
 8009604:	a201      	add	r2, pc, #4	; (adr r2, 800960c <USBD_MSC_Setup+0xf0>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	0800963d 	.word	0x0800963d
 8009610:	080096b9 	.word	0x080096b9
 8009614:	080096eb 	.word	0x080096eb
 8009618:	080096eb 	.word	0x080096eb
 800961c:	080096eb 	.word	0x080096eb
 8009620:	080096eb 	.word	0x080096eb
 8009624:	080096eb 	.word	0x080096eb
 8009628:	080096eb 	.word	0x080096eb
 800962c:	080096eb 	.word	0x080096eb
 8009630:	080096eb 	.word	0x080096eb
 8009634:	08009667 	.word	0x08009667
 8009638:	08009691 	.word	0x08009691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b03      	cmp	r3, #3
 8009646:	d107      	bne.n	8009658 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009648:	f107 030e 	add.w	r3, r7, #14
 800964c:	2202      	movs	r2, #2
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 f8d7 	bl	800c804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009656:	e050      	b.n	80096fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f003 f861 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 8009660:	2303      	movs	r3, #3
 8009662:	75fb      	strb	r3, [r7, #23]
          break;
 8009664:	e049      	b.n	80096fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b03      	cmp	r3, #3
 8009670:	d107      	bne.n	8009682 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3304      	adds	r3, #4
 8009676:	2201      	movs	r2, #1
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f003 f8c2 	bl	800c804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009680:	e03b      	b.n	80096fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f003 f84c 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	75fb      	strb	r3, [r7, #23]
          break;
 800968e:	e034      	b.n	80096fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b03      	cmp	r3, #3
 800969a:	d106      	bne.n	80096aa <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096a8:	e027      	b.n	80096fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f003 f838 	bl	800c722 <USBD_CtlError>
            ret = USBD_FAIL;
 80096b2:	2303      	movs	r3, #3
 80096b4:	75fb      	strb	r3, [r7, #23]
          break;
 80096b6:	e020      	b.n	80096fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d119      	bne.n	80096f8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d115      	bne.n	80096f8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	889b      	ldrh	r3, [r3, #4]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f00e faa7 	bl	8017c28 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	889b      	ldrh	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb2e 	bl	8009d44 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80096e8:	e006      	b.n	80096f8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f003 f818 	bl	800c722 <USBD_CtlError>
          ret = USBD_FAIL;
 80096f2:	2303      	movs	r3, #3
 80096f4:	75fb      	strb	r3, [r7, #23]
          break;
 80096f6:	e000      	b.n	80096fa <USBD_MSC_Setup+0x1de>
          break;
 80096f8:	bf00      	nop
      }
      break;
 80096fa:	e006      	b.n	800970a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f003 f80f 	bl	800c722 <USBD_CtlError>
      ret = USBD_FAIL;
 8009704:	2303      	movs	r3, #3
 8009706:	75fb      	strb	r3, [r7, #23]
      break;
 8009708:	bf00      	nop
  }

  return (uint8_t)ret;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f959 	bl	80099dc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f983 	bl	8009a50 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800975c:	2181      	movs	r1, #129	; 0x81
 800975e:	4812      	ldr	r0, [pc, #72]	; (80097a8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009760:	f002 f9a6 	bl	800bab0 <USBD_GetEpDesc>
 8009764:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009766:	2101      	movs	r1, #1
 8009768:	480f      	ldr	r0, [pc, #60]	; (80097a8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800976a:	f002 f9a1 	bl	800bab0 <USBD_GetEpDesc>
 800976e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d006      	beq.n	8009784 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	711a      	strb	r2, [r3, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f042 0202 	orr.w	r2, r2, #2
 8009782:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d006      	beq.n	8009798 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2200      	movs	r2, #0
 800978e:	711a      	strb	r2, [r3, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f042 0202 	orr.w	r2, r2, #2
 8009796:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800979e:	4b02      	ldr	r3, [pc, #8]	; (80097a8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200000f8 	.word	0x200000f8

080097ac <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80097b4:	2181      	movs	r1, #129	; 0x81
 80097b6:	4812      	ldr	r0, [pc, #72]	; (8009800 <USBD_MSC_GetFSCfgDesc+0x54>)
 80097b8:	f002 f97a 	bl	800bab0 <USBD_GetEpDesc>
 80097bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80097be:	2101      	movs	r1, #1
 80097c0:	480f      	ldr	r0, [pc, #60]	; (8009800 <USBD_MSC_GetFSCfgDesc+0x54>)
 80097c2:	f002 f975 	bl	800bab0 <USBD_GetEpDesc>
 80097c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097d6:	711a      	strb	r2, [r3, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ea:	711a      	strb	r2, [r3, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80097f6:	4b02      	ldr	r3, [pc, #8]	; (8009800 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	200000f8 	.word	0x200000f8

08009804 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800980c:	2181      	movs	r1, #129	; 0x81
 800980e:	4812      	ldr	r0, [pc, #72]	; (8009858 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009810:	f002 f94e 	bl	800bab0 <USBD_GetEpDesc>
 8009814:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009816:	2101      	movs	r1, #1
 8009818:	480f      	ldr	r0, [pc, #60]	; (8009858 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800981a:	f002 f949 	bl	800bab0 <USBD_GetEpDesc>
 800981e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d006      	beq.n	8009834 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982e:	711a      	strb	r2, [r3, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d006      	beq.n	8009848 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2200      	movs	r2, #0
 800983e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009842:	711a      	strb	r2, [r3, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800984e:	4b02      	ldr	r3, [pc, #8]	; (8009858 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	200000f8 	.word	0x200000f8

0800985c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	220a      	movs	r2, #10
 8009868:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800986a:	4b03      	ldr	r3, [pc, #12]	; (8009878 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	20000118 	.word	0x20000118

0800987c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e009      	b.n	80098a4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	33b0      	adds	r3, #176	; 0xb0
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32b0      	adds	r2, #176	; 0xb0
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d032      	beq.n	8009934 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	33b0      	adds	r3, #176	; 0xb0
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2000      	movs	r0, #0
 8009906:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <MSC_BOT_Init+0x8c>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f00e f98a 	bl	8017c28 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009914:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <MSC_BOT_Init+0x90>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f00e f984 	bl	8017c28 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009920:	4b06      	ldr	r3, [pc, #24]	; (800993c <MSC_BOT_Init+0x8c>)
 8009922:	7819      	ldrb	r1, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800992a:	231f      	movs	r3, #31
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f00e fa44 	bl	8017dba <USBD_LL_PrepareReceive>
 8009932:	e000      	b.n	8009936 <MSC_BOT_Init+0x86>
    return;
 8009934:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20000123 	.word	0x20000123
 8009940:	20000122 	.word	0x20000122

08009944 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32b0      	adds	r2, #176	; 0xb0
 8009956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01b      	beq.n	800999a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800996e:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <MSC_BOT_Reset+0x60>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f00e f995 	bl	8017ca4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <MSC_BOT_Reset+0x64>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f00e f98f 	bl	8017ca4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009986:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <MSC_BOT_Reset+0x64>)
 8009988:	7819      	ldrb	r1, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8009990:	231f      	movs	r3, #31
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f00e fa11 	bl	8017dba <USBD_LL_PrepareReceive>
 8009998:	e000      	b.n	800999c <MSC_BOT_Reset+0x58>
    return;
 800999a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000122 	.word	0x20000122
 80099a8:	20000123 	.word	0x20000123

080099ac <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	32b0      	adds	r2, #176	; 0xb0
 80099be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	721a      	strb	r2, [r3, #8]
  }
}
 80099d0:	bf00      	nop
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	32b0      	adds	r2, #176	; 0xb0
 80099f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d020      	beq.n	8009a40 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	7a1b      	ldrb	r3, [r3, #8]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d005      	beq.n	8009a12 <MSC_BOT_DataIn+0x36>
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	db1c      	blt.n	8009a44 <MSC_BOT_DataIn+0x68>
 8009a0a:	3b03      	subs	r3, #3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d819      	bhi.n	8009a44 <MSC_BOT_DataIn+0x68>
 8009a10:	e011      	b.n	8009a36 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9c9 	bl	8009db8 <SCSI_ProcessCmd>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	da0d      	bge.n	8009a48 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f90c 	bl	8009c4c <MSC_BOT_SendCSW>
      }
      break;
 8009a34:	e008      	b.n	8009a48 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f907 	bl	8009c4c <MSC_BOT_SendCSW>
      break;
 8009a3e:	e004      	b.n	8009a4a <MSC_BOT_DataIn+0x6e>
    return;
 8009a40:	bf00      	nop
 8009a42:	e002      	b.n	8009a4a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <MSC_BOT_DataIn+0x6e>
      break;
 8009a48:	bf00      	nop
  }
}
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	32b0      	adds	r2, #176	; 0xb0
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d01c      	beq.n	8009aac <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	7a1b      	ldrb	r3, [r3, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <MSC_BOT_DataOut+0x30>
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d004      	beq.n	8009a88 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009a7e:	e018      	b.n	8009ab2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f819 	bl	8009ab8 <MSC_BOT_CBW_Decode>
      break;
 8009a86:	e014      	b.n	8009ab2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009a94:	461a      	mov	r2, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f98e 	bl	8009db8 <SCSI_ProcessCmd>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da06      	bge.n	8009ab0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f8d1 	bl	8009c4c <MSC_BOT_SendCSW>
      break;
 8009aaa:	e001      	b.n	8009ab0 <MSC_BOT_DataOut+0x60>
    return;
 8009aac:	bf00      	nop
 8009aae:	e000      	b.n	8009ab2 <MSC_BOT_DataOut+0x62>
      break;
 8009ab0:	bf00      	nop
  }
}
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	32b0      	adds	r2, #176	; 0xb0
 8009aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ace:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d079      	beq.n	8009bca <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009aee:	4b3a      	ldr	r3, [pc, #232]	; (8009bd8 <MSC_BOT_CBW_Decode+0x120>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f00e f981 	bl	8017dfc <USBD_LL_GetRxDataSize>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b1f      	cmp	r3, #31
 8009afe:	d114      	bne.n	8009b2a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009b06:	4a35      	ldr	r2, [pc, #212]	; (8009bdc <MSC_BOT_CBW_Decode+0x124>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d10e      	bne.n	8009b2a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d809      	bhi.n	8009b2a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d90e      	bls.n	8009b48 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b30:	2320      	movs	r3, #32
 8009b32:	2205      	movs	r2, #5
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fe56 	bl	800a7e6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f8bd 	bl	8009cc0 <MSC_BOT_Abort>
 8009b46:	e043      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009b54:	461a      	mov	r2, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f92e 	bl	8009db8 <SCSI_ProcessCmd>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da0c      	bge.n	8009b7c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	7a1b      	ldrb	r3, [r3, #8]
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d104      	bne.n	8009b74 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f86d 	bl	8009c4c <MSC_BOT_SendCSW>
 8009b72:	e02d      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8a3 	bl	8009cc0 <MSC_BOT_Abort>
 8009b7a:	e029      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	7a1b      	ldrb	r3, [r3, #8]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d024      	beq.n	8009bce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d020      	beq.n	8009bce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d01c      	beq.n	8009bce <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f103 0110 	add.w	r1, r3, #16
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f819 	bl	8009be0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009bae:	e00f      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f846 	bl	8009c4c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009bc0:	e006      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f87c 	bl	8009cc0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009bc8:	e002      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
    return;
 8009bca:	bf00      	nop
 8009bcc:	e000      	b.n	8009bd0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8009bce:	bf00      	nop
    }
  }
}
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000123 	.word	0x20000123
 8009bdc:	43425355 	.word	0x43425355

08009be0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	32b0      	adds	r2, #176	; 0xb0
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d01e      	beq.n	8009c40 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	bf28      	it	cs
 8009c0e:	4613      	movcs	r3, r2
 8009c10:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2204      	movs	r2, #4
 8009c2e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <MSC_BOT_SendData+0x68>)
 8009c32:	7819      	ldrb	r1, [r3, #0]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f00e f89d 	bl	8017d78 <USBD_LL_Transmit>
 8009c3e:	e000      	b.n	8009c42 <MSC_BOT_SendData+0x62>
    return;
 8009c40:	bf00      	nop
}
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20000122 	.word	0x20000122

08009c4c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	32b0      	adds	r2, #176	; 0xb0
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01d      	beq.n	8009caa <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4a10      	ldr	r2, [pc, #64]	; (8009cb4 <MSC_BOT_SendCSW+0x68>)
 8009c72:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009c84:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <MSC_BOT_SendCSW+0x6c>)
 8009c86:	7819      	ldrb	r1, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8009c8e:	230d      	movs	r3, #13
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f00e f871 	bl	8017d78 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <MSC_BOT_SendCSW+0x70>)
 8009c98:	7819      	ldrb	r1, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8009ca0:	231f      	movs	r3, #31
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f00e f889 	bl	8017dba <USBD_LL_PrepareReceive>
 8009ca8:	e000      	b.n	8009cac <MSC_BOT_SendCSW+0x60>
    return;
 8009caa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	53425355 	.word	0x53425355
 8009cb8:	20000122 	.word	0x20000122
 8009cbc:	20000123 	.word	0x20000123

08009cc0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32b0      	adds	r2, #176	; 0xb0
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d02a      	beq.n	8009d34 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10e      	bne.n	8009d06 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d105      	bne.n	8009d06 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009cfa:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <MSC_BOT_Abort+0x7c>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f00d ffb0 	bl	8017c66 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009d06:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <MSC_BOT_Abort+0x80>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f00d ffaa 	bl	8017c66 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	7a5b      	ldrb	r3, [r3, #9]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d10d      	bne.n	8009d36 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <MSC_BOT_Abort+0x80>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f00d ffa0 	bl	8017c66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009d26:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <MSC_BOT_Abort+0x7c>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f00d ff9a 	bl	8017c66 <USBD_LL_StallEP>
 8009d32:	e000      	b.n	8009d36 <MSC_BOT_Abort+0x76>
    return;
 8009d34:	bf00      	nop
  }
}
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000123 	.word	0x20000123
 8009d40:	20000122 	.word	0x20000122

08009d44 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	32b0      	adds	r2, #176	; 0xb0
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01d      	beq.n	8009da2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7a5b      	ldrb	r3, [r3, #9]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d10c      	bne.n	8009d88 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009d6e:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <MSC_BOT_CplClrFeature+0x6c>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f00d ff76 	bl	8017c66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009d7a:	4b0e      	ldr	r3, [pc, #56]	; (8009db4 <MSC_BOT_CplClrFeature+0x70>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f00d ff70 	bl	8017c66 <USBD_LL_StallEP>
 8009d86:	e00f      	b.n	8009da8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da0a      	bge.n	8009da6 <MSC_BOT_CplClrFeature+0x62>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	7a5b      	ldrb	r3, [r3, #9]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d006      	beq.n	8009da6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009d98:	2101      	movs	r1, #1
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ff56 	bl	8009c4c <MSC_BOT_SendCSW>
 8009da0:	e002      	b.n	8009da8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8009da2:	bf00      	nop
 8009da4:	e000      	b.n	8009da8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009da6:	bf00      	nop
  }
}
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000122 	.word	0x20000122
 8009db4:	20000123 	.word	0x20000123

08009db8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	32b0      	adds	r2, #176	; 0xb0
 8009dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8009de0:	e168      	b.n	800a0b4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2baa      	cmp	r3, #170	; 0xaa
 8009de8:	f000 8144 	beq.w	800a074 <SCSI_ProcessCmd+0x2bc>
 8009dec:	2baa      	cmp	r3, #170	; 0xaa
 8009dee:	f300 8153 	bgt.w	800a098 <SCSI_ProcessCmd+0x2e0>
 8009df2:	2ba8      	cmp	r3, #168	; 0xa8
 8009df4:	f000 812c 	beq.w	800a050 <SCSI_ProcessCmd+0x298>
 8009df8:	2ba8      	cmp	r3, #168	; 0xa8
 8009dfa:	f300 814d 	bgt.w	800a098 <SCSI_ProcessCmd+0x2e0>
 8009dfe:	2b5a      	cmp	r3, #90	; 0x5a
 8009e00:	f300 80c0 	bgt.w	8009f84 <SCSI_ProcessCmd+0x1cc>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f2c0 8147 	blt.w	800a098 <SCSI_ProcessCmd+0x2e0>
 8009e0a:	2b5a      	cmp	r3, #90	; 0x5a
 8009e0c:	f200 8144 	bhi.w	800a098 <SCSI_ProcessCmd+0x2e0>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <SCSI_ProcessCmd+0x60>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	08009f8b 	.word	0x08009f8b
 8009e1c:	0800a099 	.word	0x0800a099
 8009e20:	0800a099 	.word	0x0800a099
 8009e24:	08009f9d 	.word	0x08009f9d
 8009e28:	0800a099 	.word	0x0800a099
 8009e2c:	0800a099 	.word	0x0800a099
 8009e30:	0800a099 	.word	0x0800a099
 8009e34:	0800a099 	.word	0x0800a099
 8009e38:	0800a099 	.word	0x0800a099
 8009e3c:	0800a099 	.word	0x0800a099
 8009e40:	0800a099 	.word	0x0800a099
 8009e44:	0800a099 	.word	0x0800a099
 8009e48:	0800a099 	.word	0x0800a099
 8009e4c:	0800a099 	.word	0x0800a099
 8009e50:	0800a099 	.word	0x0800a099
 8009e54:	0800a099 	.word	0x0800a099
 8009e58:	0800a099 	.word	0x0800a099
 8009e5c:	0800a099 	.word	0x0800a099
 8009e60:	08009faf 	.word	0x08009faf
 8009e64:	0800a099 	.word	0x0800a099
 8009e68:	0800a099 	.word	0x0800a099
 8009e6c:	0800a099 	.word	0x0800a099
 8009e70:	0800a099 	.word	0x0800a099
 8009e74:	0800a099 	.word	0x0800a099
 8009e78:	0800a099 	.word	0x0800a099
 8009e7c:	0800a099 	.word	0x0800a099
 8009e80:	08009fe5 	.word	0x08009fe5
 8009e84:	08009fc1 	.word	0x08009fc1
 8009e88:	0800a099 	.word	0x0800a099
 8009e8c:	0800a099 	.word	0x0800a099
 8009e90:	08009fd3 	.word	0x08009fd3
 8009e94:	0800a099 	.word	0x0800a099
 8009e98:	0800a099 	.word	0x0800a099
 8009e9c:	0800a099 	.word	0x0800a099
 8009ea0:	0800a099 	.word	0x0800a099
 8009ea4:	0800a009 	.word	0x0800a009
 8009ea8:	0800a099 	.word	0x0800a099
 8009eac:	0800a01b 	.word	0x0800a01b
 8009eb0:	0800a099 	.word	0x0800a099
 8009eb4:	0800a099 	.word	0x0800a099
 8009eb8:	0800a03f 	.word	0x0800a03f
 8009ebc:	0800a099 	.word	0x0800a099
 8009ec0:	0800a063 	.word	0x0800a063
 8009ec4:	0800a099 	.word	0x0800a099
 8009ec8:	0800a099 	.word	0x0800a099
 8009ecc:	0800a099 	.word	0x0800a099
 8009ed0:	0800a099 	.word	0x0800a099
 8009ed4:	0800a087 	.word	0x0800a087
 8009ed8:	0800a099 	.word	0x0800a099
 8009edc:	0800a099 	.word	0x0800a099
 8009ee0:	0800a099 	.word	0x0800a099
 8009ee4:	0800a099 	.word	0x0800a099
 8009ee8:	0800a099 	.word	0x0800a099
 8009eec:	0800a099 	.word	0x0800a099
 8009ef0:	0800a099 	.word	0x0800a099
 8009ef4:	0800a099 	.word	0x0800a099
 8009ef8:	0800a099 	.word	0x0800a099
 8009efc:	0800a099 	.word	0x0800a099
 8009f00:	0800a099 	.word	0x0800a099
 8009f04:	0800a099 	.word	0x0800a099
 8009f08:	0800a099 	.word	0x0800a099
 8009f0c:	0800a099 	.word	0x0800a099
 8009f10:	0800a099 	.word	0x0800a099
 8009f14:	0800a099 	.word	0x0800a099
 8009f18:	0800a099 	.word	0x0800a099
 8009f1c:	0800a099 	.word	0x0800a099
 8009f20:	0800a099 	.word	0x0800a099
 8009f24:	0800a099 	.word	0x0800a099
 8009f28:	0800a099 	.word	0x0800a099
 8009f2c:	0800a099 	.word	0x0800a099
 8009f30:	0800a099 	.word	0x0800a099
 8009f34:	0800a099 	.word	0x0800a099
 8009f38:	0800a099 	.word	0x0800a099
 8009f3c:	0800a099 	.word	0x0800a099
 8009f40:	0800a099 	.word	0x0800a099
 8009f44:	0800a099 	.word	0x0800a099
 8009f48:	0800a099 	.word	0x0800a099
 8009f4c:	0800a099 	.word	0x0800a099
 8009f50:	0800a099 	.word	0x0800a099
 8009f54:	0800a099 	.word	0x0800a099
 8009f58:	0800a099 	.word	0x0800a099
 8009f5c:	0800a099 	.word	0x0800a099
 8009f60:	0800a099 	.word	0x0800a099
 8009f64:	0800a099 	.word	0x0800a099
 8009f68:	0800a099 	.word	0x0800a099
 8009f6c:	0800a099 	.word	0x0800a099
 8009f70:	0800a099 	.word	0x0800a099
 8009f74:	0800a099 	.word	0x0800a099
 8009f78:	0800a099 	.word	0x0800a099
 8009f7c:	0800a099 	.word	0x0800a099
 8009f80:	08009ff7 	.word	0x08009ff7
 8009f84:	2b9e      	cmp	r3, #158	; 0x9e
 8009f86:	d051      	beq.n	800a02c <SCSI_ProcessCmd+0x274>
 8009f88:	e086      	b.n	800a098 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f893 	bl	800a0bc <SCSI_TestUnitReady>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
      break;
 8009f9a:	e089      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fb9c 	bl	800a6e0 <SCSI_RequestSense>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]
      break;
 8009fac:	e080      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f8db 	bl	800a170 <SCSI_Inquiry>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbe:	e077      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fc58 	bl	800a87c <SCSI_StartStopUnit>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd0:	e06e      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fca4 	bl	800a926 <SCSI_AllowPreventRemovable>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe2:	e065      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009fe4:	7afb      	ldrb	r3, [r7, #11]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 faec 	bl	800a5c8 <SCSI_ModeSense6>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff4:	e05c      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 fb29 	bl	800a654 <SCSI_ModeSense10>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
      break;
 800a006:	e053      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	4619      	mov	r1, r3
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f000 fa5e 	bl	800a4d0 <SCSI_ReadFormatCapacity>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
      break;
 800a018:	e04a      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	4619      	mov	r1, r3
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f923 	bl	800a26c <SCSI_ReadCapacity10>
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
      break;
 800a02a:	e041      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	4619      	mov	r1, r3
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f998 	bl	800a368 <SCSI_ReadCapacity16>
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]
      break;
 800a03c:	e038      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4619      	mov	r1, r3
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 fc9b 	bl	800a980 <SCSI_Read10>
 800a04a:	4603      	mov	r3, r0
 800a04c:	75fb      	strb	r3, [r7, #23]
      break;
 800a04e:	e02f      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4619      	mov	r1, r3
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fd3c 	bl	800aad4 <SCSI_Read12>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e026      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	4619      	mov	r1, r3
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fde7 	bl	800ac3c <SCSI_Write10>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
      break;
 800a072:	e01d      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a074:	7afb      	ldrb	r3, [r7, #11]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	4619      	mov	r1, r3
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 feb4 	bl	800ade8 <SCSI_Write12>
 800a080:	4603      	mov	r3, r0
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	e014      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 ff91 	bl	800afb4 <SCSI_Verify10>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]
      break;
 800a096:	e00b      	b.n	800a0b0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a098:	7af9      	ldrb	r1, [r7, #11]
 800a09a:	2320      	movs	r3, #32
 800a09c:	2205      	movs	r2, #5
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fba1 	bl	800a7e6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a0aa:	23ff      	movs	r3, #255	; 0xff
 800a0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ae:	bf00      	nop
  }

  return ret;
 800a0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	32b0      	adds	r2, #176	; 0xb0
 800a0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	e03f      	b.n	800a166 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00a      	beq.n	800a106 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a0f6:	2320      	movs	r3, #32
 800a0f8:	2205      	movs	r2, #5
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fb73 	bl	800a7e6 <SCSI_SenseCode>

    return -1;
 800a100:	f04f 33ff 	mov.w	r3, #4294967295
 800a104:	e02f      	b.n	800a166 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d10b      	bne.n	800a128 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a110:	7af9      	ldrb	r1, [r7, #11]
 800a112:	233a      	movs	r3, #58	; 0x3a
 800a114:	2202      	movs	r2, #2
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fb65 	bl	800a7e6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2205      	movs	r2, #5
 800a120:	721a      	strb	r2, [r3, #8]
    return -1;
 800a122:	f04f 33ff 	mov.w	r3, #4294967295
 800a126:	e01e      	b.n	800a166 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	33b0      	adds	r3, #176	; 0xb0
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	7afa      	ldrb	r2, [r7, #11]
 800a13c:	4610      	mov	r0, r2
 800a13e:	4798      	blx	r3
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a146:	7af9      	ldrb	r1, [r7, #11]
 800a148:	233a      	movs	r3, #58	; 0x3a
 800a14a:	2202      	movs	r2, #2
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fb4a 	bl	800a7e6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2205      	movs	r2, #5
 800a156:	721a      	strb	r2, [r3, #8]

    return -1;
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	e003      	b.n	800a166 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2200      	movs	r2, #0
 800a162:	60da      	str	r2, [r3, #12]

  return 0;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	460b      	mov	r3, r1
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	32b0      	adds	r2, #176	; 0xb0
 800a188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	e05f      	b.n	800a25a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a1aa:	2320      	movs	r3, #32
 800a1ac:	2205      	movs	r2, #5
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fb19 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b8:	e04f      	b.n	800a25a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d020      	beq.n	800a20a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3302      	adds	r3, #2
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800a1d2:	2206      	movs	r2, #6
 800a1d4:	4923      	ldr	r1, [pc, #140]	; (800a264 <SCSI_Inquiry+0xf4>)
 800a1d6:	69b8      	ldr	r0, [r7, #24]
 800a1d8:	f001 f872 	bl	800b2c0 <SCSI_UpdateBotData>
 800a1dc:	e03c      	b.n	800a258 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b80      	cmp	r3, #128	; 0x80
 800a1e6:	d105      	bne.n	800a1f4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	491f      	ldr	r1, [pc, #124]	; (800a268 <SCSI_Inquiry+0xf8>)
 800a1ec:	69b8      	ldr	r0, [r7, #24]
 800a1ee:	f001 f867 	bl	800b2c0 <SCSI_UpdateBotData>
 800a1f2:	e031      	b.n	800a258 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a1fa:	2324      	movs	r3, #36	; 0x24
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 faf1 	bl	800a7e6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800a204:	f04f 33ff 	mov.w	r3, #4294967295
 800a208:	e027      	b.n	800a25a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	33b0      	adds	r3, #176	; 0xb0
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a21a:	69d9      	ldr	r1, [r3, #28]
 800a21c:	7afa      	ldrb	r2, [r7, #11]
 800a21e:	4613      	mov	r3, r2
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a226:	440b      	add	r3, r1
 800a228:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	3304      	adds	r3, #4
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	3305      	adds	r3, #5
 800a234:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3304      	adds	r3, #4
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8bfa      	ldrh	r2, [r7, #30]
 800a240:	429a      	cmp	r2, r3
 800a242:	d303      	bcc.n	800a24c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3304      	adds	r3, #4
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a24c:	8bfb      	ldrh	r3, [r7, #30]
 800a24e:	461a      	mov	r2, r3
 800a250:	6979      	ldr	r1, [r7, #20]
 800a252:	69b8      	ldr	r0, [r7, #24]
 800a254:	f001 f834 	bl	800b2c0 <SCSI_UpdateBotData>
  }

  return 0;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000124 	.word	0x20000124
 800a268:	2000012c 	.word	0x2000012c

0800a26c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	460b      	mov	r3, r1
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	32b0      	adds	r2, #176	; 0xb0
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	e064      	b.n	800a360 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	33b0      	adds	r3, #176	; 0xb0
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800a2b4:	7af8      	ldrb	r0, [r7, #11]
 800a2b6:	4798      	blx	r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a2bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <SCSI_ReadCapacity10+0x62>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d108      	bne.n	800a2e0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a2ce:	7af9      	ldrb	r1, [r7, #11]
 800a2d0:	233a      	movs	r3, #58	; 0x3a
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 fa86 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295
 800a2de:	e03f      	b.n	800a360 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	0e1b      	lsrs	r3, r3, #24
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	0c1b      	lsrs	r3, r3, #16
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a306:	3b01      	subs	r3, #1
 800a308:	0a1b      	lsrs	r3, r3, #8
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a316:	b2db      	uxtb	r3, r3
 800a318:	3b01      	subs	r3, #1
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a326:	161b      	asrs	r3, r3, #24
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a334:	141b      	asrs	r3, r3, #16
 800a336:	b2da      	uxtb	r2, r3
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	b29b      	uxth	r3, r3
 800a346:	b2da      	uxtb	r2, r3
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a352:	b2da      	uxtb	r2, r3
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2208      	movs	r2, #8
 800a35c:	60da      	str	r2, [r3, #12]

  return 0;
 800a35e:	2300      	movs	r3, #0

}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	460b      	mov	r3, r1
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	32b0      	adds	r2, #176	; 0xb0
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a38c:	f04f 33ff 	mov.w	r3, #4294967295
 800a390:	e09a      	b.n	800a4c8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	33b0      	adds	r3, #176	; 0xb0
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800a3b0:	7af8      	ldrb	r0, [r7, #11]
 800a3b2:	4798      	blx	r3
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a3b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <SCSI_ReadCapacity16+0x62>
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d108      	bne.n	800a3dc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a3ca:	7af9      	ldrb	r1, [r7, #11]
 800a3cc:	233a      	movs	r3, #58	; 0x3a
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fa08 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	e075      	b.n	800a4c8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	330a      	adds	r3, #10
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	330b      	adds	r3, #11
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a3ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	330c      	adds	r3, #12
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a3f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	320d      	adds	r2, #13
 800a3fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a3fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a404:	2300      	movs	r3, #0
 800a406:	61fb      	str	r3, [r7, #28]
 800a408:	e008      	b.n	800a41c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	4413      	add	r3, r2
 800a410:	3310      	adds	r3, #16
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	3301      	adds	r3, #1
 800a41a:	61fb      	str	r3, [r7, #28]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	429a      	cmp	r2, r3
 800a424:	d3f1      	bcc.n	800a40a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a42c:	3b01      	subs	r3, #1
 800a42e:	0e1b      	lsrs	r3, r3, #24
 800a430:	b2da      	uxtb	r2, r3
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a43c:	3b01      	subs	r3, #1
 800a43e:	0c1b      	lsrs	r3, r3, #16
 800a440:	b2da      	uxtb	r2, r3
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a44c:	3b01      	subs	r3, #1
 800a44e:	0a1b      	lsrs	r3, r3, #8
 800a450:	b2da      	uxtb	r2, r3
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	3b01      	subs	r3, #1
 800a460:	b2da      	uxtb	r2, r3
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a46c:	161b      	asrs	r3, r3, #24
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a47a:	141b      	asrs	r3, r3, #16
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a488:	0a1b      	lsrs	r3, r3, #8
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	330a      	adds	r3, #10
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	330b      	adds	r3, #11
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a4ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	330c      	adds	r3, #12
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a4b8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	320d      	adds	r2, #13
 800a4be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a4c0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	60da      	str	r2, [r3, #12]

  return 0;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3720      	adds	r7, #32
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	32b0      	adds	r2, #176	; 0xb0
 800a4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ec:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	e061      	b.n	800a5be <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	33b0      	adds	r3, #176	; 0xb0
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f107 0214 	add.w	r2, r7, #20
 800a510:	f107 0110 	add.w	r1, r7, #16
 800a514:	7af8      	ldrb	r0, [r7, #11]
 800a516:	4798      	blx	r3
 800a518:	4603      	mov	r3, r0
 800a51a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a51c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d104      	bne.n	800a52e <SCSI_ReadFormatCapacity+0x5e>
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d108      	bne.n	800a540 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a52e:	7af9      	ldrb	r1, [r7, #11]
 800a530:	233a      	movs	r3, #58	; 0x3a
 800a532:	2202      	movs	r2, #2
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 f956 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800a53a:	f04f 33ff 	mov.w	r3, #4294967295
 800a53e:	e03e      	b.n	800a5be <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800a540:	2300      	movs	r3, #0
 800a542:	83fb      	strh	r3, [r7, #30]
 800a544:	e007      	b.n	800a556 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800a546:	8bfb      	ldrh	r3, [r7, #30]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	4413      	add	r3, r2
 800a54c:	2200      	movs	r2, #0
 800a54e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a550:	8bfb      	ldrh	r3, [r7, #30]
 800a552:	3301      	adds	r3, #1
 800a554:	83fb      	strh	r3, [r7, #30]
 800a556:	8bfb      	ldrh	r3, [r7, #30]
 800a558:	2b0b      	cmp	r3, #11
 800a55a:	d9f4      	bls.n	800a546 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2208      	movs	r2, #8
 800a560:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3b01      	subs	r3, #1
 800a566:	0e1b      	lsrs	r3, r3, #24
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	3b01      	subs	r3, #1
 800a572:	0c1b      	lsrs	r3, r3, #16
 800a574:	b2da      	uxtb	r2, r3
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	b2da      	uxtb	r2, r3
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2202      	movs	r2, #2
 800a596:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a598:	8abb      	ldrh	r3, [r7, #20]
 800a59a:	141b      	asrs	r3, r3, #16
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a5a2:	8abb      	ldrh	r3, [r7, #20]
 800a5a4:	0a1b      	lsrs	r3, r3, #8
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a5ae:	8abb      	ldrh	r3, [r7, #20]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	220c      	movs	r2, #12
 800a5ba:	60da      	str	r2, [r3, #12]

  return 0;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	32b0      	adds	r2, #176	; 0xb0
 800a5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	e027      	b.n	800a646 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	33b0      	adds	r3, #176	; 0xb0
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	7afa      	ldrb	r2, [r7, #11]
 800a60a:	4610      	mov	r0, r2
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800a614:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <SCSI_ModeSense6+0x88>)
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <SCSI_ModeSense6+0x88>)
 800a620:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	8afa      	ldrh	r2, [r7, #22]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d303      	bcc.n	800a638 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a638:	8afb      	ldrh	r3, [r7, #22]
 800a63a:	461a      	mov	r2, r3
 800a63c:	4904      	ldr	r1, [pc, #16]	; (800a650 <SCSI_ModeSense6+0x88>)
 800a63e:	6938      	ldr	r0, [r7, #16]
 800a640:	f000 fe3e 	bl	800b2c0 <SCSI_UpdateBotData>

  return 0;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20000134 	.word	0x20000134

0800a654 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	460b      	mov	r3, r1
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	32b0      	adds	r2, #176	; 0xb0
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a672:	2308      	movs	r3, #8
 800a674:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295
 800a680:	e027      	b.n	800a6d2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	33b0      	adds	r3, #176	; 0xb0
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	7afa      	ldrb	r2, [r7, #11]
 800a696:	4610      	mov	r0, r2
 800a698:	4798      	blx	r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d006      	beq.n	800a6ae <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800a6a0:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <SCSI_ModeSense10+0x88>)
 800a6a2:	78db      	ldrb	r3, [r3, #3]
 800a6a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <SCSI_ModeSense10+0x88>)
 800a6ac:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	8afa      	ldrh	r2, [r7, #22]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d303      	bcc.n	800a6c4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a6c4:	8afb      	ldrh	r3, [r7, #22]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4904      	ldr	r1, [pc, #16]	; (800a6dc <SCSI_ModeSense10+0x88>)
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f000 fdf8 	bl	800b2c0 <SCSI_UpdateBotData>

  return 0;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000138 	.word	0x20000138

0800a6e0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	32b0      	adds	r2, #176	; 0xb0
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295
 800a708:	e069      	b.n	800a7de <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a71a:	2320      	movs	r3, #32
 800a71c:	2205      	movs	r2, #5
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 f861 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800a724:	f04f 33ff 	mov.w	r3, #4294967295
 800a728:	e059      	b.n	800a7de <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
 800a72e:	e007      	b.n	800a740 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4413      	add	r3, r2
 800a736:	2200      	movs	r2, #0
 800a738:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	3301      	adds	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	2b11      	cmp	r3, #17
 800a744:	d9f4      	bls.n	800a730 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2270      	movs	r2, #112	; 0x70
 800a74a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	220c      	movs	r2, #12
 800a750:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a75e:	429a      	cmp	r2, r3
 800a760:	d02e      	beq.n	800a7c0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a768:	461a      	mov	r2, r3
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3248      	adds	r2, #72	; 0x48
 800a76e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	3348      	adds	r3, #72	; 0x48
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4413      	add	r3, r2
 800a784:	791a      	ldrb	r2, [r3, #4]
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	3348      	adds	r3, #72	; 0x48
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4413      	add	r3, r2
 800a798:	795a      	ldrb	r2, [r3, #5]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d103      	bne.n	800a7c0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2212      	movs	r2, #18
 800a7c4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b12      	cmp	r3, #18
 800a7ce:	d805      	bhi.n	800a7dc <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	70fb      	strb	r3, [r7, #3]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70bb      	strb	r3, [r7, #2]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	32b0      	adds	r2, #176	; 0xb0
 800a80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d02c      	beq.n	800a870 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a81c:	461a      	mov	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3248      	adds	r2, #72	; 0x48
 800a822:	78b9      	ldrb	r1, [r7, #2]
 800a824:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	3348      	adds	r3, #72	; 0x48
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	4413      	add	r3, r2
 800a836:	787a      	ldrb	r2, [r7, #1]
 800a838:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	3348      	adds	r3, #72	; 0x48
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	4413      	add	r3, r2
 800a848:	2200      	movs	r2, #0
 800a84a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a852:	3301      	adds	r3, #1
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a862:	2b04      	cmp	r3, #4
 800a864:	d105      	bne.n	800a872 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800a86e:	e000      	b.n	800a872 <SCSI_SenseCode+0x8c>
    return;
 800a870:	bf00      	nop
  }
}
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	460b      	mov	r3, r1
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	32b0      	adds	r2, #176	; 0xb0
 800a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a898:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a4:	e03b      	b.n	800a91e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d10f      	bne.n	800a8d0 <SCSI_StartStopUnit+0x54>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d108      	bne.n	800a8d0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a8be:	7af9      	ldrb	r1, [r7, #11]
 800a8c0:	2324      	movs	r3, #36	; 0x24
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff ff8e 	bl	800a7e6 <SCSI_SenseCode>

    return -1;
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	e026      	b.n	800a91e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 0303 	and.w	r3, r3, #3
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d104      	bne.n	800a8e8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a8e6:	e016      	b.n	800a916 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	f003 0303 	and.w	r3, r3, #3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d104      	bne.n	800a900 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a8fe:	e00a      	b.n	800a916 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3304      	adds	r3, #4
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d103      	bne.n	800a916 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2200      	movs	r2, #0
 800a91a:	60da      	str	r2, [r3, #12]

  return 0;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a926:	b480      	push	{r7}
 800a928:	b087      	sub	sp, #28
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	460b      	mov	r3, r1
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	32b0      	adds	r2, #176	; 0xb0
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a94a:	f04f 33ff 	mov.w	r3, #4294967295
 800a94e:	e011      	b.n	800a974 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3304      	adds	r3, #4
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a962:	e003      	b.n	800a96c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2200      	movs	r2, #0
 800a970:	60da      	str	r2, [r3, #12]

  return 0;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	371c      	adds	r7, #28
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	460b      	mov	r3, r1
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	32b0      	adds	r2, #176	; 0xb0
 800a998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <SCSI_Read10+0x2a>
  {
    return -1;
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a8:	e090      	b.n	800aacc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	7a1b      	ldrb	r3, [r3, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f040 8082 	bne.w	800aab8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	db0a      	blt.n	800a9d6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a9c6:	2320      	movs	r3, #32
 800a9c8:	2205      	movs	r2, #5
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f7ff ff0b 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e07a      	b.n	800aacc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d108      	bne.n	800a9f2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a9e0:	7af9      	ldrb	r1, [r7, #11]
 800a9e2:	233a      	movs	r3, #58	; 0x3a
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff fefd 	bl	800a7e6 <SCSI_SenseCode>

      return -1;
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f0:	e06c      	b.n	800aacc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	33b0      	adds	r3, #176	; 0xb0
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	7afa      	ldrb	r2, [r7, #11]
 800aa06:	4610      	mov	r0, r2
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d008      	beq.n	800aa22 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aa10:	7af9      	ldrb	r1, [r7, #11]
 800aa12:	233a      	movs	r3, #58	; 0x3a
 800aa14:	2202      	movs	r2, #2
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7ff fee5 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa20:	e054      	b.n	800aacc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3302      	adds	r3, #2
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3303      	adds	r3, #3
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	3205      	adds	r2, #5
 800aa42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800aa44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3307      	adds	r3, #7
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	3208      	adds	r2, #8
 800aa58:	7812      	ldrb	r2, [r2, #0]
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa6e:	7af9      	ldrb	r1, [r7, #11]
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fadc 	bl	800b02e <SCSI_CheckAddressRange>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da02      	bge.n	800aa82 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	e024      	b.n	800aacc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa8e:	6979      	ldr	r1, [r7, #20]
 800aa90:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d00a      	beq.n	800aab2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aaa2:	2320      	movs	r3, #32
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fe9d 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	e00c      	b.n	800aacc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2202      	movs	r2, #2
 800aab6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aabe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	4619      	mov	r1, r3
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fadf 	bl	800b088 <SCSI_ProcessRead>
 800aaca:	4603      	mov	r3, r0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	460b      	mov	r3, r1
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	32b0      	adds	r2, #176	; 0xb0
 800aaec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <SCSI_Read12+0x2a>
  {
    return -1;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 800aafc:	e09a      	b.n	800ac34 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	7a1b      	ldrb	r3, [r3, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f040 808c 	bne.w	800ac20 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ab0e:	b25b      	sxtb	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	db0a      	blt.n	800ab2a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab1a:	2320      	movs	r3, #32
 800ab1c:	2205      	movs	r2, #5
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fe61 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e084      	b.n	800ac34 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d108      	bne.n	800ab46 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab34:	7af9      	ldrb	r1, [r7, #11]
 800ab36:	233a      	movs	r3, #58	; 0x3a
 800ab38:	2202      	movs	r2, #2
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fe53 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295
 800ab44:	e076      	b.n	800ac34 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	33b0      	adds	r3, #176	; 0xb0
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	7afa      	ldrb	r2, [r7, #11]
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	4798      	blx	r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d008      	beq.n	800ab76 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab64:	7af9      	ldrb	r1, [r7, #11]
 800ab66:	233a      	movs	r3, #58	; 0x3a
 800ab68:	2202      	movs	r2, #2
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fe3b 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ab70:	f04f 33ff 	mov.w	r3, #4294967295
 800ab74:	e05e      	b.n	800ac34 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3302      	adds	r3, #2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3303      	adds	r3, #3
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab86:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab90:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	3205      	adds	r2, #5
 800ab96:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ab98:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3306      	adds	r3, #6
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3307      	adds	r3, #7
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800abb0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3308      	adds	r3, #8
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800abba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	3209      	adds	r2, #9
 800abc0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800abc2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abd6:	7af9      	ldrb	r1, [r7, #11]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 fa28 	bl	800b02e <SCSI_CheckAddressRange>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da02      	bge.n	800abea <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800abe4:	f04f 33ff 	mov.w	r3, #4294967295
 800abe8:	e024      	b.n	800ac34 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800abfc:	fb01 f303 	mul.w	r3, r1, r3
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d00a      	beq.n	800ac1a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac0a:	2320      	movs	r3, #32
 800ac0c:	2205      	movs	r2, #5
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7ff fde9 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	e00c      	b.n	800ac34 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac26:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 fa2b 	bl	800b088 <SCSI_ProcessRead>
 800ac32:	4603      	mov	r3, r0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	460b      	mov	r3, r1
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	32b0      	adds	r2, #176	; 0xb0
 800ac54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac58:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <SCSI_Write10+0x2a>
  {
    return -1;
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	e0ba      	b.n	800addc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	7a1b      	ldrb	r3, [r3, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 80b0 	bne.w	800add0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac80:	2320      	movs	r3, #32
 800ac82:	2205      	movs	r2, #5
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fdae 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ac8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8e:	e0a5      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ac96:	b25b      	sxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da0a      	bge.n	800acb2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aca2:	2320      	movs	r3, #32
 800aca4:	2205      	movs	r2, #5
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fd9d 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e094      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	33b0      	adds	r3, #176	; 0xb0
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	7afa      	ldrb	r2, [r7, #11]
 800acc6:	4610      	mov	r0, r2
 800acc8:	4798      	blx	r3
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d008      	beq.n	800ace2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800acd0:	7af9      	ldrb	r1, [r7, #11]
 800acd2:	233a      	movs	r3, #58	; 0x3a
 800acd4:	2202      	movs	r2, #2
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff fd85 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800acdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ace0:	e07c      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	33b0      	adds	r3, #176	; 0xb0
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	7afa      	ldrb	r2, [r7, #11]
 800acf6:	4610      	mov	r0, r2
 800acf8:	4798      	blx	r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d008      	beq.n	800ad12 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ad00:	7af9      	ldrb	r1, [r7, #11]
 800ad02:	2327      	movs	r3, #39	; 0x27
 800ad04:	2202      	movs	r2, #2
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fd6d 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	e064      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3302      	adds	r3, #2
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3303      	adds	r3, #3
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3304      	adds	r3, #4
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ad2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	3205      	adds	r2, #5
 800ad32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ad34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3307      	adds	r3, #7
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	3208      	adds	r2, #8
 800ad48:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ad5e:	7af9      	ldrb	r1, [r7, #11]
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 f964 	bl	800b02e <SCSI_CheckAddressRange>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da02      	bge.n	800ad72 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	e034      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ad7e:	fb02 f303 	mul.w	r3, r2, r3
 800ad82:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d00a      	beq.n	800ada6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ad96:	2320      	movs	r3, #32
 800ad98:	2205      	movs	r2, #5
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff fd23 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e01a      	b.n	800addc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adac:	bf28      	it	cs
 800adae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800adb2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2201      	movs	r2, #1
 800adb8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800adba:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <SCSI_Write10+0x1a8>)
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f103 0210 	add.w	r2, r3, #16
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f00c fff7 	bl	8017dba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	e005      	b.n	800addc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800add0:	7afb      	ldrb	r3, [r7, #11]
 800add2:	4619      	mov	r1, r3
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f9dd 	bl	800b194 <SCSI_ProcessWrite>
 800adda:	4603      	mov	r3, r0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20000123 	.word	0x20000123

0800ade8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	460b      	mov	r3, r1
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	32b0      	adds	r2, #176	; 0xb0
 800ae00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae04:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <SCSI_Write12+0x2a>
  {
    return -1;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	e0ca      	b.n	800afa8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	7a1b      	ldrb	r3, [r3, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f040 80c0 	bne.w	800af9c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10a      	bne.n	800ae3c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ae2c:	2320      	movs	r3, #32
 800ae2e:	2205      	movs	r2, #5
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fcd8 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3a:	e0b5      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ae42:	b25b      	sxtb	r3, r3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	da0a      	bge.n	800ae5e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ae4e:	2320      	movs	r3, #32
 800ae50:	2205      	movs	r2, #5
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7ff fcc7 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5c:	e0a4      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	33b0      	adds	r3, #176	; 0xb0
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	7afa      	ldrb	r2, [r7, #11]
 800ae72:	4610      	mov	r0, r2
 800ae74:	4798      	blx	r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae7c:	7af9      	ldrb	r1, [r7, #11]
 800ae7e:	233a      	movs	r3, #58	; 0x3a
 800ae80:	2202      	movs	r2, #2
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7ff fcaf 	bl	800a7e6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	721a      	strb	r2, [r3, #8]
      return -1;
 800ae8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae92:	e089      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	33b0      	adds	r3, #176	; 0xb0
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	7afa      	ldrb	r2, [r7, #11]
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00b      	beq.n	800aeca <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aeb2:	7af9      	ldrb	r1, [r7, #11]
 800aeb4:	2327      	movs	r3, #39	; 0x27
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fc94 	bl	800a7e6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2205      	movs	r2, #5
 800aec2:	721a      	strb	r2, [r3, #8]
      return -1;
 800aec4:	f04f 33ff 	mov.w	r3, #4294967295
 800aec8:	e06e      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3302      	adds	r3, #2
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3303      	adds	r3, #3
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aeda:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3304      	adds	r3, #4
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aee4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	3205      	adds	r2, #5
 800aeea:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aeec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3306      	adds	r3, #6
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3307      	adds	r3, #7
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800af04:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3308      	adds	r3, #8
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800af0e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	3209      	adds	r2, #9
 800af14:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800af16:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af2a:	7af9      	ldrb	r1, [r7, #11]
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f87e 	bl	800b02e <SCSI_CheckAddressRange>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	da02      	bge.n	800af3e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800af38:	f04f 33ff 	mov.w	r3, #4294967295
 800af3c:	e034      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800af4a:	fb02 f303 	mul.w	r3, r2, r3
 800af4e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d00a      	beq.n	800af72 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af62:	2320      	movs	r3, #32
 800af64:	2205      	movs	r2, #5
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fc3d 	bl	800a7e6 <SCSI_SenseCode>
      return -1;
 800af6c:	f04f 33ff 	mov.w	r3, #4294967295
 800af70:	e01a      	b.n	800afa8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af78:	bf28      	it	cs
 800af7a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800af7e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2201      	movs	r2, #1
 800af84:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800af86:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <SCSI_Write12+0x1c8>)
 800af88:	7819      	ldrb	r1, [r3, #0]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f103 0210 	add.w	r2, r3, #16
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f00c ff11 	bl	8017dba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	e005      	b.n	800afa8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	4619      	mov	r1, r3
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 f8f7 	bl	800b194 <SCSI_ProcessWrite>
 800afa6:	4603      	mov	r3, r0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000123 	.word	0x20000123

0800afb4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	460b      	mov	r3, r1
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	32b0      	adds	r2, #176	; 0xb0
 800afcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <SCSI_Verify10+0x2a>
  {
    return -1;
 800afd8:	f04f 33ff 	mov.w	r3, #4294967295
 800afdc:	e023      	b.n	800b026 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3301      	adds	r3, #1
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 0302 	and.w	r3, r3, #2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d008      	beq.n	800affe <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800afec:	7af9      	ldrb	r1, [r7, #11]
 800afee:	2324      	movs	r3, #36	; 0x24
 800aff0:	2205      	movs	r2, #5
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff fbf7 	bl	800a7e6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aff8:	f04f 33ff 	mov.w	r3, #4294967295
 800affc:	e013      	b.n	800b026 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b00a:	7af9      	ldrb	r1, [r7, #11]
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 f80e 	bl	800b02e <SCSI_CheckAddressRange>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	da02      	bge.n	800b01e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800b018:	f04f 33ff 	mov.w	r3, #4294967295
 800b01c:	e003      	b.n	800b026 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	60da      	str	r2, [r3, #12]

  return 0;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b086      	sub	sp, #24
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
 800b03a:	460b      	mov	r3, r1
 800b03c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	32b0      	adds	r2, #176	; 0xb0
 800b048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b054:	f04f 33ff 	mov.w	r3, #4294967295
 800b058:	e011      	b.n	800b07e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	441a      	add	r2, r3
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b066:	429a      	cmp	r2, r3
 800b068:	d908      	bls.n	800b07c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b06a:	7af9      	ldrb	r1, [r7, #11]
 800b06c:	2321      	movs	r3, #33	; 0x21
 800b06e:	2205      	movs	r2, #5
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fbb8 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800b076:	f04f 33ff 	mov.w	r3, #4294967295
 800b07a:	e000      	b.n	800b07e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	32b0      	adds	r2, #176	; 0xb0
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	e06a      	b.n	800b186 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c8:	bf28      	it	cs
 800b0ca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b0ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	33b0      	adds	r3, #176	; 0xb0
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	691c      	ldr	r4, [r3, #16]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0110 	add.w	r1, r3, #16
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	78f8      	ldrb	r0, [r7, #3]
 800b100:	47a0      	blx	r4
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	da08      	bge.n	800b11a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b108:	78f9      	ldrb	r1, [r7, #3]
 800b10a:	2311      	movs	r3, #17
 800b10c:	2204      	movs	r2, #4
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff fb69 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800b114:	f04f 33ff 	mov.w	r3, #4294967295
 800b118:	e035      	b.n	800b186 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b11a:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <SCSI_ProcessRead+0x108>)
 800b11c:	7819      	ldrb	r1, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f103 0210 	add.w	r2, r3, #16
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f00c fe26 	bl	8017d78 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b138:	4619      	mov	r1, r3
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b140:	441a      	add	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b154:	4619      	mov	r1, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	fbb3 f3f1 	udiv	r3, r3, r1
 800b15c:	1ad2      	subs	r2, r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	1ad2      	subs	r2, r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2203      	movs	r2, #3
 800b182:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd90      	pop	{r4, r7, pc}
 800b18e:	bf00      	nop
 800b190:	20000122 	.word	0x20000122

0800b194 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32b0      	adds	r2, #176	; 0xb0
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ba:	e07a      	b.n	800b2b2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1d4:	bf28      	it	cs
 800b1d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b1da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	33b0      	adds	r3, #176	; 0xb0
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	695c      	ldr	r4, [r3, #20]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f103 0110 	add.w	r1, r3, #16
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b200:	4618      	mov	r0, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b208:	b29b      	uxth	r3, r3
 800b20a:	78f8      	ldrb	r0, [r7, #3]
 800b20c:	47a0      	blx	r4
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	da08      	bge.n	800b226 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b214:	78f9      	ldrb	r1, [r7, #3]
 800b216:	2303      	movs	r3, #3
 800b218:	2204      	movs	r2, #4
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff fae3 	bl	800a7e6 <SCSI_SenseCode>
    return -1;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	e045      	b.n	800b2b2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b232:	4619      	mov	r1, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	fbb3 f3f1 	udiv	r3, r3, r1
 800b23a:	441a      	add	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b24e:	4619      	mov	r1, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	fbb3 f3f1 	udiv	r3, r3, r1
 800b256:	1ad2      	subs	r2, r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b278:	2100      	movs	r1, #0
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7fe fce6 	bl	8009c4c <MSC_BOT_SendCSW>
 800b280:	e016      	b.n	800b2b0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b296:	bf28      	it	cs
 800b298:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b29c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b29e:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <SCSI_ProcessWrite+0x128>)
 800b2a0:	7819      	ldrb	r1, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f103 0210 	add.w	r2, r3, #16
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f00c fd85 	bl	8017dba <USBD_LL_PrepareReceive>
  }

  return 0;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd90      	pop	{r4, r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000123 	.word	0x20000123

0800b2c0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2dc:	e013      	b.n	800b306 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b2de:	8afa      	ldrh	r2, [r7, #22]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b2e4:	e00b      	b.n	800b2fe <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b2e6:	8afb      	ldrh	r3, [r7, #22]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b2ec:	8afb      	ldrh	r3, [r7, #22]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	441a      	add	r2, r3
 800b2f2:	8afb      	ldrh	r3, [r7, #22]
 800b2f4:	7811      	ldrb	r1, [r2, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b2fe:	8afb      	ldrh	r3, [r7, #22]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f0      	bne.n	800b2e6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	4613      	mov	r3, r2
 800b31e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	e01f      	b.n	800b36a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	79fa      	ldrb	r2, [r7, #7]
 800b35c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f00c fb6c 	bl	8017a3c <USBD_LL_Init>
 800b364:	4603      	mov	r3, r0
 800b366:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b368:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	e025      	b.n	800b3d6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	32ae      	adds	r2, #174	; 0xae
 800b39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00f      	beq.n	800b3c6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	32ae      	adds	r2, #174	; 0xae
 800b3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	f107 020e 	add.w	r2, r7, #14
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	4798      	blx	r3
 800b3be:	4602      	mov	r2, r0
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f00c fbbe 	bl	8017b68 <USBD_LL_Start>
 800b3ec:	4603      	mov	r3, r0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3fe:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d009      	beq.n	800b43a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	4611      	mov	r1, r2
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	78fa      	ldrb	r2, [r7, #3]
 800b45e:	4611      	mov	r1, r2
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	4798      	blx	r3
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 f90f 	bl	800c6ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4ac:	f003 031f 	and.w	r3, r3, #31
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d01a      	beq.n	800b4ea <USBD_LL_SetupStage+0x72>
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d822      	bhi.n	800b4fe <USBD_LL_SetupStage+0x86>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <USBD_LL_SetupStage+0x4a>
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d00a      	beq.n	800b4d6 <USBD_LL_SetupStage+0x5e>
 800b4c0:	e01d      	b.n	800b4fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fb66 	bl	800bb9c <USBD_StdDevReq>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d4:	e020      	b.n	800b518 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fbce 	bl	800bc80 <USBD_StdItfReq>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e8:	e016      	b.n	800b518 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fc30 	bl	800bd58 <USBD_StdEPReq>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fc:	e00c      	b.n	800b518 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b504:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f00c fbaa 	bl	8017c66 <USBD_LL_StallEP>
 800b512:	4603      	mov	r3, r0
 800b514:	73fb      	strb	r3, [r7, #15]
      break;
 800b516:	bf00      	nop
  }

  return ret;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	460b      	mov	r3, r1
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d16e      	bne.n	800b618 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b540:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b548:	2b03      	cmp	r3, #3
 800b54a:	f040 8098 	bne.w	800b67e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	429a      	cmp	r2, r3
 800b558:	d913      	bls.n	800b582 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	1ad2      	subs	r2, r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	68da      	ldr	r2, [r3, #12]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	4293      	cmp	r3, r2
 800b572:	bf28      	it	cs
 800b574:	4613      	movcs	r3, r2
 800b576:	461a      	mov	r2, r3
 800b578:	6879      	ldr	r1, [r7, #4]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 f98b 	bl	800c896 <USBD_CtlContinueRx>
 800b580:	e07d      	b.n	800b67e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b588:	f003 031f 	and.w	r3, r3, #31
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d014      	beq.n	800b5ba <USBD_LL_DataOutStage+0x98>
 800b590:	2b02      	cmp	r3, #2
 800b592:	d81d      	bhi.n	800b5d0 <USBD_LL_DataOutStage+0xae>
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <USBD_LL_DataOutStage+0x7c>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d003      	beq.n	800b5a4 <USBD_LL_DataOutStage+0x82>
 800b59c:	e018      	b.n	800b5d0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75bb      	strb	r3, [r7, #22]
            break;
 800b5a2:	e018      	b.n	800b5d6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fa64 	bl	800ba7c <USBD_CoreFindIF>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	75bb      	strb	r3, [r7, #22]
            break;
 800b5b8:	e00d      	b.n	800b5d6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fa66 	bl	800ba96 <USBD_CoreFindEP>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75bb      	strb	r3, [r7, #22]
            break;
 800b5ce:	e002      	b.n	800b5d6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b5d4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5d6:	7dbb      	ldrb	r3, [r7, #22]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d119      	bne.n	800b610 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d113      	bne.n	800b610 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5e8:	7dba      	ldrb	r2, [r7, #22]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	32ae      	adds	r2, #174	; 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b5f8:	7dba      	ldrb	r2, [r7, #22]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b600:	7dba      	ldrb	r2, [r7, #22]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	32ae      	adds	r2, #174	; 0xae
 800b606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f001 f951 	bl	800c8b8 <USBD_CtlSendStatus>
 800b616:	e032      	b.n	800b67e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	4619      	mov	r1, r3
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fa37 	bl	800ba96 <USBD_CoreFindEP>
 800b628:	4603      	mov	r3, r0
 800b62a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b62c:	7dbb      	ldrb	r3, [r7, #22]
 800b62e:	2bff      	cmp	r3, #255	; 0xff
 800b630:	d025      	beq.n	800b67e <USBD_LL_DataOutStage+0x15c>
 800b632:	7dbb      	ldrb	r3, [r7, #22]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d122      	bne.n	800b67e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b03      	cmp	r3, #3
 800b642:	d117      	bne.n	800b674 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b644:	7dba      	ldrb	r2, [r7, #22]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	32ae      	adds	r2, #174	; 0xae
 800b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64e:	699b      	ldr	r3, [r3, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00f      	beq.n	800b674 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b654:	7dba      	ldrb	r2, [r7, #22]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b65c:	7dba      	ldrb	r2, [r7, #22]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	32ae      	adds	r2, #174	; 0xae
 800b662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	4611      	mov	r1, r2
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	4798      	blx	r3
 800b670:	4603      	mov	r3, r0
 800b672:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b674:	7dfb      	ldrb	r3, [r7, #23]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	e000      	b.n	800b680 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	460b      	mov	r3, r1
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d16f      	bne.n	800b77c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3314      	adds	r3, #20
 800b6a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d15a      	bne.n	800b762 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d914      	bls.n	800b6e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	1ad2      	subs	r2, r2, r3
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f001 f8b3 	bl	800c83a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f00c fb6d 	bl	8017dba <USBD_LL_PrepareReceive>
 800b6e0:	e03f      	b.n	800b762 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d11c      	bne.n	800b728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d316      	bcc.n	800b728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b704:	429a      	cmp	r2, r3
 800b706:	d20f      	bcs.n	800b728 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b708:	2200      	movs	r2, #0
 800b70a:	2100      	movs	r1, #0
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f001 f894 	bl	800c83a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b71a:	2300      	movs	r3, #0
 800b71c:	2200      	movs	r2, #0
 800b71e:	2100      	movs	r1, #0
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f00c fb4a 	bl	8017dba <USBD_LL_PrepareReceive>
 800b726:	e01c      	b.n	800b762 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b03      	cmp	r3, #3
 800b732:	d10f      	bne.n	800b754 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d009      	beq.n	800b754 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b754:	2180      	movs	r1, #128	; 0x80
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f00c fa85 	bl	8017c66 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f001 f8be 	bl	800c8de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d03a      	beq.n	800b7e2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7ff fe42 	bl	800b3f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b77a:	e032      	b.n	800b7e2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b77c:	7afb      	ldrb	r3, [r7, #11]
 800b77e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b782:	b2db      	uxtb	r3, r3
 800b784:	4619      	mov	r1, r3
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 f985 	bl	800ba96 <USBD_CoreFindEP>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2bff      	cmp	r3, #255	; 0xff
 800b794:	d025      	beq.n	800b7e2 <USBD_LL_DataInStage+0x15a>
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d122      	bne.n	800b7e2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d11c      	bne.n	800b7e2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7a8:	7dfa      	ldrb	r2, [r7, #23]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	32ae      	adds	r2, #174	; 0xae
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d014      	beq.n	800b7e2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b7b8:	7dfa      	ldrb	r2, [r7, #23]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b7c0:	7dfa      	ldrb	r2, [r7, #23]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	32ae      	adds	r2, #174	; 0xae
 800b7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	7afa      	ldrb	r2, [r7, #11]
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	4798      	blx	r3
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7d8:	7dbb      	ldrb	r3, [r7, #22]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b7de:	7dbb      	ldrb	r3, [r7, #22]
 800b7e0:	e000      	b.n	800b7e4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b824:	2b00      	cmp	r3, #0
 800b826:	d014      	beq.n	800b852 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00e      	beq.n	800b852 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6852      	ldr	r2, [r2, #4]
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	4611      	mov	r1, r2
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	4798      	blx	r3
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b84e:	2303      	movs	r3, #3
 800b850:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	2200      	movs	r2, #0
 800b856:	2100      	movs	r1, #0
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f00c f9a0 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2240      	movs	r2, #64	; 0x40
 800b86a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b86e:	2340      	movs	r3, #64	; 0x40
 800b870:	2200      	movs	r2, #0
 800b872:	2180      	movs	r1, #128	; 0x80
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f00c f992 	bl	8017b9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2240      	movs	r2, #64	; 0x40
 800b884:	621a      	str	r2, [r3, #32]

  return ret;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d006      	beq.n	800b8d2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2204      	movs	r2, #4
 800b8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b04      	cmp	r3, #4
 800b8fa:	d106      	bne.n	800b90a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b902:	b2da      	uxtb	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d110      	bne.n	800b94e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	; 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b976:	2303      	movs	r3, #3
 800b978:	e01c      	b.n	800b9b4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b03      	cmp	r3, #3
 800b984:	d115      	bne.n	800b9b2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	32ae      	adds	r2, #174	; 0xae
 800b990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00b      	beq.n	800b9b2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	32ae      	adds	r2, #174	; 0xae
 800b9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	78fa      	ldrb	r2, [r7, #3]
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32ae      	adds	r2, #174	; 0xae
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e01c      	b.n	800ba18 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d115      	bne.n	800ba16 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	32ae      	adds	r2, #174	; 0xae
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	32ae      	adds	r2, #174	; 0xae
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	78fa      	ldrb	r2, [r7, #3]
 800ba10:	4611      	mov	r1, r2
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00e      	beq.n	800ba72 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6852      	ldr	r2, [r2, #4]
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	4611      	mov	r1, r2
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba6e:	2303      	movs	r3, #3
 800ba70:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	885b      	ldrh	r3, [r3, #2]
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d920      	bls.n	800bb1a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bae0:	e013      	b.n	800bb0a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bae2:	f107 030a 	add.w	r3, r7, #10
 800bae6:	4619      	mov	r1, r3
 800bae8:	6978      	ldr	r0, [r7, #20]
 800baea:	f000 f81b 	bl	800bb24 <USBD_GetNextDesc>
 800baee:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	785b      	ldrb	r3, [r3, #1]
 800baf4:	2b05      	cmp	r3, #5
 800baf6:	d108      	bne.n	800bb0a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	789b      	ldrb	r3, [r3, #2]
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d008      	beq.n	800bb18 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	885b      	ldrh	r3, [r3, #2]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	897b      	ldrh	r3, [r7, #10]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d8e5      	bhi.n	800bae2 <USBD_GetEpDesc+0x32>
 800bb16:	e000      	b.n	800bb1a <USBD_GetEpDesc+0x6a>
          break;
 800bb18:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb1a:	693b      	ldr	r3, [r7, #16]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	881a      	ldrh	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4413      	add	r3, r2
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb50:	68fb      	ldr	r3, [r7, #12]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b087      	sub	sp, #28
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	3301      	adds	r3, #1
 800bb74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb7c:	8a3b      	ldrh	r3, [r7, #16]
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	b21a      	sxth	r2, r3
 800bb82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	b21b      	sxth	r3, r3
 800bb8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb8c:	89fb      	ldrh	r3, [r7, #14]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	371c      	adds	r7, #28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
	...

0800bb9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d005      	beq.n	800bbc2 <USBD_StdDevReq+0x26>
 800bbb6:	2b40      	cmp	r3, #64	; 0x40
 800bbb8:	d857      	bhi.n	800bc6a <USBD_StdDevReq+0xce>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00f      	beq.n	800bbde <USBD_StdDevReq+0x42>
 800bbbe:	2b20      	cmp	r3, #32
 800bbc0:	d153      	bne.n	800bc6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32ae      	adds	r2, #174	; 0xae
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
      break;
 800bbdc:	e04a      	b.n	800bc74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	d83b      	bhi.n	800bc5e <USBD_StdDevReq+0xc2>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <USBD_StdDevReq+0x50>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc55 	.word	0x0800bc55
 800bbf4:	0800bc5f 	.word	0x0800bc5f
 800bbf8:	0800bc4b 	.word	0x0800bc4b
 800bbfc:	0800bc5f 	.word	0x0800bc5f
 800bc00:	0800bc1f 	.word	0x0800bc1f
 800bc04:	0800bc15 	.word	0x0800bc15
 800bc08:	0800bc5f 	.word	0x0800bc5f
 800bc0c:	0800bc37 	.word	0x0800bc37
 800bc10:	0800bc29 	.word	0x0800bc29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fa3c 	bl	800c094 <USBD_GetDescriptor>
          break;
 800bc1c:	e024      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fba1 	bl	800c368 <USBD_SetAddress>
          break;
 800bc26:	e01f      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fbe0 	bl	800c3f0 <USBD_SetConfig>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
          break;
 800bc34:	e018      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fc83 	bl	800c544 <USBD_GetConfig>
          break;
 800bc3e:	e013      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fcb4 	bl	800c5b0 <USBD_GetStatus>
          break;
 800bc48:	e00e      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fce3 	bl	800c618 <USBD_SetFeature>
          break;
 800bc52:	e009      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fd07 	bl	800c66a <USBD_ClrFeature>
          break;
 800bc5c:	e004      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fd5e 	bl	800c722 <USBD_CtlError>
          break;
 800bc66:	bf00      	nop
      }
      break;
 800bc68:	e004      	b.n	800bc74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fd58 	bl	800c722 <USBD_CtlError>
      break;
 800bc72:	bf00      	nop
  }

  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop

0800bc80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc96:	2b40      	cmp	r3, #64	; 0x40
 800bc98:	d005      	beq.n	800bca6 <USBD_StdItfReq+0x26>
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d852      	bhi.n	800bd44 <USBD_StdItfReq+0xc4>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <USBD_StdItfReq+0x26>
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d14e      	bne.n	800bd44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d840      	bhi.n	800bd36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	889b      	ldrh	r3, [r3, #4]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d836      	bhi.n	800bd2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	889b      	ldrh	r3, [r3, #4]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff fed8 	bl	800ba7c <USBD_CoreFindIF>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2bff      	cmp	r3, #255	; 0xff
 800bcd4:	d01d      	beq.n	800bd12 <USBD_StdItfReq+0x92>
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d11a      	bne.n	800bd12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bcdc:	7bba      	ldrb	r2, [r7, #14]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	32ae      	adds	r2, #174	; 0xae
 800bce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00f      	beq.n	800bd0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bcec:	7bba      	ldrb	r2, [r7, #14]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcf4:	7bba      	ldrb	r2, [r7, #14]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	32ae      	adds	r2, #174	; 0xae
 800bcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd0a:	e004      	b.n	800bd16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd10:	e001      	b.n	800bd16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	88db      	ldrh	r3, [r3, #6]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d110      	bne.n	800bd40 <USBD_StdItfReq+0xc0>
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10d      	bne.n	800bd40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fdc7 	bl	800c8b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd2a:	e009      	b.n	800bd40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fcf7 	bl	800c722 <USBD_CtlError>
          break;
 800bd34:	e004      	b.n	800bd40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fcf2 	bl	800c722 <USBD_CtlError>
          break;
 800bd3e:	e000      	b.n	800bd42 <USBD_StdItfReq+0xc2>
          break;
 800bd40:	bf00      	nop
      }
      break;
 800bd42:	e004      	b.n	800bd4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fceb 	bl	800c722 <USBD_CtlError>
      break;
 800bd4c:	bf00      	nop
  }

  return ret;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	889b      	ldrh	r3, [r3, #4]
 800bd6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	d007      	beq.n	800bd88 <USBD_StdEPReq+0x30>
 800bd78:	2b40      	cmp	r3, #64	; 0x40
 800bd7a:	f200 817f 	bhi.w	800c07c <USBD_StdEPReq+0x324>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d02a      	beq.n	800bdd8 <USBD_StdEPReq+0x80>
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	f040 817a 	bne.w	800c07c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fe82 	bl	800ba96 <USBD_CoreFindEP>
 800bd92:	4603      	mov	r3, r0
 800bd94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd96:	7b7b      	ldrb	r3, [r7, #13]
 800bd98:	2bff      	cmp	r3, #255	; 0xff
 800bd9a:	f000 8174 	beq.w	800c086 <USBD_StdEPReq+0x32e>
 800bd9e:	7b7b      	ldrb	r3, [r7, #13]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 8170 	bne.w	800c086 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bda6:	7b7a      	ldrb	r2, [r7, #13]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdae:	7b7a      	ldrb	r2, [r7, #13]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	32ae      	adds	r2, #174	; 0xae
 800bdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 8163 	beq.w	800c086 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bdc0:	7b7a      	ldrb	r2, [r7, #13]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	32ae      	adds	r2, #174	; 0xae
 800bdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	4798      	blx	r3
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bdd6:	e156      	b.n	800c086 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d008      	beq.n	800bdf2 <USBD_StdEPReq+0x9a>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	f300 8145 	bgt.w	800c070 <USBD_StdEPReq+0x318>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 809b 	beq.w	800bf22 <USBD_StdEPReq+0x1ca>
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d03c      	beq.n	800be6a <USBD_StdEPReq+0x112>
 800bdf0:	e13e      	b.n	800c070 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d002      	beq.n	800be04 <USBD_StdEPReq+0xac>
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d016      	beq.n	800be30 <USBD_StdEPReq+0xd8>
 800be02:	e02c      	b.n	800be5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00d      	beq.n	800be26 <USBD_StdEPReq+0xce>
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	2b80      	cmp	r3, #128	; 0x80
 800be0e:	d00a      	beq.n	800be26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f00b ff26 	bl	8017c66 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be1a:	2180      	movs	r1, #128	; 0x80
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f00b ff22 	bl	8017c66 <USBD_LL_StallEP>
 800be22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be24:	e020      	b.n	800be68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fc7a 	bl	800c722 <USBD_CtlError>
              break;
 800be2e:	e01b      	b.n	800be68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	885b      	ldrh	r3, [r3, #2]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10e      	bne.n	800be56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <USBD_StdEPReq+0xfe>
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	2b80      	cmp	r3, #128	; 0x80
 800be42:	d008      	beq.n	800be56 <USBD_StdEPReq+0xfe>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	88db      	ldrh	r3, [r3, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f00b ff08 	bl	8017c66 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fd2e 	bl	800c8b8 <USBD_CtlSendStatus>

              break;
 800be5c:	e004      	b.n	800be68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fc5e 	bl	800c722 <USBD_CtlError>
              break;
 800be66:	bf00      	nop
          }
          break;
 800be68:	e107      	b.n	800c07a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b02      	cmp	r3, #2
 800be74:	d002      	beq.n	800be7c <USBD_StdEPReq+0x124>
 800be76:	2b03      	cmp	r3, #3
 800be78:	d016      	beq.n	800bea8 <USBD_StdEPReq+0x150>
 800be7a:	e04b      	b.n	800bf14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00d      	beq.n	800be9e <USBD_StdEPReq+0x146>
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b80      	cmp	r3, #128	; 0x80
 800be86:	d00a      	beq.n	800be9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f00b feea 	bl	8017c66 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be92:	2180      	movs	r1, #128	; 0x80
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f00b fee6 	bl	8017c66 <USBD_LL_StallEP>
 800be9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be9c:	e040      	b.n	800bf20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fc3e 	bl	800c722 <USBD_CtlError>
              break;
 800bea6:	e03b      	b.n	800bf20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	885b      	ldrh	r3, [r3, #2]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d136      	bne.n	800bf1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
 800beb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f00b fef0 	bl	8017ca4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fcf7 	bl	800c8b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fde1 	bl	800ba96 <USBD_CoreFindEP>
 800bed4:	4603      	mov	r3, r0
 800bed6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bed8:	7b7b      	ldrb	r3, [r7, #13]
 800beda:	2bff      	cmp	r3, #255	; 0xff
 800bedc:	d01f      	beq.n	800bf1e <USBD_StdEPReq+0x1c6>
 800bede:	7b7b      	ldrb	r3, [r7, #13]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d11c      	bne.n	800bf1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bee4:	7b7a      	ldrb	r2, [r7, #13]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800beec:	7b7a      	ldrb	r2, [r7, #13]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32ae      	adds	r2, #174	; 0xae
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d010      	beq.n	800bf1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800befc:	7b7a      	ldrb	r2, [r7, #13]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	32ae      	adds	r2, #174	; 0xae
 800bf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf12:	e004      	b.n	800bf1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fc03 	bl	800c722 <USBD_CtlError>
              break;
 800bf1c:	e000      	b.n	800bf20 <USBD_StdEPReq+0x1c8>
              break;
 800bf1e:	bf00      	nop
          }
          break;
 800bf20:	e0ab      	b.n	800c07a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d002      	beq.n	800bf34 <USBD_StdEPReq+0x1dc>
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d032      	beq.n	800bf98 <USBD_StdEPReq+0x240>
 800bf32:	e097      	b.n	800c064 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <USBD_StdEPReq+0x1f2>
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
 800bf3c:	2b80      	cmp	r3, #128	; 0x80
 800bf3e:	d004      	beq.n	800bf4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fbed 	bl	800c722 <USBD_CtlError>
                break;
 800bf48:	e091      	b.n	800c06e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	da0b      	bge.n	800bf6a <USBD_StdEPReq+0x212>
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	3310      	adds	r3, #16
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	4413      	add	r3, r2
 800bf66:	3304      	adds	r3, #4
 800bf68:	e00b      	b.n	800bf82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	3304      	adds	r3, #4
 800bf82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fc37 	bl	800c804 <USBD_CtlSendData>
              break;
 800bf96:	e06a      	b.n	800c06e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da11      	bge.n	800bfc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	f003 020f 	and.w	r2, r3, #15
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3324      	adds	r3, #36	; 0x24
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d117      	bne.n	800bfea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fbb0 	bl	800c722 <USBD_CtlError>
                  break;
 800bfc2:	e054      	b.n	800c06e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	f003 020f 	and.w	r2, r3, #15
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	440b      	add	r3, r1
 800bfd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fb9d 	bl	800c722 <USBD_CtlError>
                  break;
 800bfe8:	e041      	b.n	800c06e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da0b      	bge.n	800c00a <USBD_StdEPReq+0x2b2>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	3310      	adds	r3, #16
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	4413      	add	r3, r2
 800c006:	3304      	adds	r3, #4
 800c008:	e00b      	b.n	800c022 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c010:	4613      	mov	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4413      	add	r3, r2
 800c020:	3304      	adds	r3, #4
 800c022:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <USBD_StdEPReq+0x2d8>
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	2b80      	cmp	r3, #128	; 0x80
 800c02e:	d103      	bne.n	800c038 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	e00e      	b.n	800c056 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f00b fe50 	bl	8017ce2 <USBD_LL_IsStallEP>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2201      	movs	r2, #1
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e002      	b.n	800c056 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2202      	movs	r2, #2
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fbd1 	bl	800c804 <USBD_CtlSendData>
              break;
 800c062:	e004      	b.n	800c06e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fb5b 	bl	800c722 <USBD_CtlError>
              break;
 800c06c:	bf00      	nop
          }
          break;
 800c06e:	e004      	b.n	800c07a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fb55 	bl	800c722 <USBD_CtlError>
          break;
 800c078:	bf00      	nop
      }
      break;
 800c07a:	e005      	b.n	800c088 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fb4f 	bl	800c722 <USBD_CtlError>
      break;
 800c084:	e000      	b.n	800c088 <USBD_StdEPReq+0x330>
      break;
 800c086:	bf00      	nop
  }

  return ret;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	2b06      	cmp	r3, #6
 800c0b6:	f200 8128 	bhi.w	800c30a <USBD_GetDescriptor+0x276>
 800c0ba:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <USBD_GetDescriptor+0x2c>)
 800c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c0:	0800c0dd 	.word	0x0800c0dd
 800c0c4:	0800c0f5 	.word	0x0800c0f5
 800c0c8:	0800c135 	.word	0x0800c135
 800c0cc:	0800c30b 	.word	0x0800c30b
 800c0d0:	0800c30b 	.word	0x0800c30b
 800c0d4:	0800c2ab 	.word	0x0800c2ab
 800c0d8:	0800c2d7 	.word	0x0800c2d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	7c12      	ldrb	r2, [r2, #16]
 800c0e8:	f107 0108 	add.w	r1, r7, #8
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4798      	blx	r3
 800c0f0:	60f8      	str	r0, [r7, #12]
      break;
 800c0f2:	e112      	b.n	800c31a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	7c1b      	ldrb	r3, [r3, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10d      	bne.n	800c118 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c104:	f107 0208 	add.w	r2, r7, #8
 800c108:	4610      	mov	r0, r2
 800c10a:	4798      	blx	r3
 800c10c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	2202      	movs	r2, #2
 800c114:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c116:	e100      	b.n	800c31a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	f107 0208 	add.w	r2, r7, #8
 800c124:	4610      	mov	r0, r2
 800c126:	4798      	blx	r3
 800c128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3301      	adds	r3, #1
 800c12e:	2202      	movs	r2, #2
 800c130:	701a      	strb	r2, [r3, #0]
      break;
 800c132:	e0f2      	b.n	800c31a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	885b      	ldrh	r3, [r3, #2]
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b05      	cmp	r3, #5
 800c13c:	f200 80ac 	bhi.w	800c298 <USBD_GetDescriptor+0x204>
 800c140:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <USBD_GetDescriptor+0xb4>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c161 	.word	0x0800c161
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c1c9 	.word	0x0800c1c9
 800c154:	0800c1fd 	.word	0x0800c1fd
 800c158:	0800c231 	.word	0x0800c231
 800c15c:	0800c265 	.word	0x0800c265
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00b      	beq.n	800c184 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	7c12      	ldrb	r2, [r2, #16]
 800c178:	f107 0108 	add.w	r1, r7, #8
 800c17c:	4610      	mov	r0, r2
 800c17e:	4798      	blx	r3
 800c180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c182:	e091      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 facb 	bl	800c722 <USBD_CtlError>
            err++;
 800c18c:	7afb      	ldrb	r3, [r7, #11]
 800c18e:	3301      	adds	r3, #1
 800c190:	72fb      	strb	r3, [r7, #11]
          break;
 800c192:	e089      	b.n	800c2a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	7c12      	ldrb	r2, [r2, #16]
 800c1ac:	f107 0108 	add.w	r1, r7, #8
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	4798      	blx	r3
 800c1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b6:	e077      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fab1 	bl	800c722 <USBD_CtlError>
            err++;
 800c1c0:	7afb      	ldrb	r3, [r7, #11]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1c6:	e06f      	b.n	800c2a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	7c12      	ldrb	r2, [r2, #16]
 800c1e0:	f107 0108 	add.w	r1, r7, #8
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4798      	blx	r3
 800c1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ea:	e05d      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fa97 	bl	800c722 <USBD_CtlError>
            err++;
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1fa:	e055      	b.n	800c2a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	7c12      	ldrb	r2, [r2, #16]
 800c214:	f107 0108 	add.w	r1, r7, #8
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
 800c21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21e:	e043      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fa7d 	bl	800c722 <USBD_CtlError>
            err++;
 800c228:	7afb      	ldrb	r3, [r7, #11]
 800c22a:	3301      	adds	r3, #1
 800c22c:	72fb      	strb	r3, [r7, #11]
          break;
 800c22e:	e03b      	b.n	800c2a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00b      	beq.n	800c254 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7c12      	ldrb	r2, [r2, #16]
 800c248:	f107 0108 	add.w	r1, r7, #8
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c252:	e029      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa63 	bl	800c722 <USBD_CtlError>
            err++;
 800c25c:	7afb      	ldrb	r3, [r7, #11]
 800c25e:	3301      	adds	r3, #1
 800c260:	72fb      	strb	r3, [r7, #11]
          break;
 800c262:	e021      	b.n	800c2a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	7c12      	ldrb	r2, [r2, #16]
 800c27c:	f107 0108 	add.w	r1, r7, #8
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
 800c284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c286:	e00f      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa49 	bl	800c722 <USBD_CtlError>
            err++;
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	3301      	adds	r3, #1
 800c294:	72fb      	strb	r3, [r7, #11]
          break;
 800c296:	e007      	b.n	800c2a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fa41 	bl	800c722 <USBD_CtlError>
          err++;
 800c2a0:	7afb      	ldrb	r3, [r7, #11]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2a6:	bf00      	nop
      }
      break;
 800c2a8:	e037      	b.n	800c31a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7c1b      	ldrb	r3, [r3, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d109      	bne.n	800c2c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	f107 0208 	add.w	r2, r7, #8
 800c2be:	4610      	mov	r0, r2
 800c2c0:	4798      	blx	r3
 800c2c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2c4:	e029      	b.n	800c31a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fa2a 	bl	800c722 <USBD_CtlError>
        err++;
 800c2ce:	7afb      	ldrb	r3, [r7, #11]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c2d4:	e021      	b.n	800c31a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7c1b      	ldrb	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10d      	bne.n	800c2fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e6:	f107 0208 	add.w	r2, r7, #8
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	4798      	blx	r3
 800c2ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	2207      	movs	r2, #7
 800c2f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2f8:	e00f      	b.n	800c31a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fa10 	bl	800c722 <USBD_CtlError>
        err++;
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	3301      	adds	r3, #1
 800c306:	72fb      	strb	r3, [r7, #11]
      break;
 800c308:	e007      	b.n	800c31a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa08 	bl	800c722 <USBD_CtlError>
      err++;
 800c312:	7afb      	ldrb	r3, [r7, #11]
 800c314:	3301      	adds	r3, #1
 800c316:	72fb      	strb	r3, [r7, #11]
      break;
 800c318:	bf00      	nop
  }

  if (err != 0U)
 800c31a:	7afb      	ldrb	r3, [r7, #11]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d11e      	bne.n	800c35e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	88db      	ldrh	r3, [r3, #6]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d016      	beq.n	800c356 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c328:	893b      	ldrh	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00e      	beq.n	800c34c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	88da      	ldrh	r2, [r3, #6]
 800c332:	893b      	ldrh	r3, [r7, #8]
 800c334:	4293      	cmp	r3, r2
 800c336:	bf28      	it	cs
 800c338:	4613      	movcs	r3, r2
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c33e:	893b      	ldrh	r3, [r7, #8]
 800c340:	461a      	mov	r2, r3
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fa5d 	bl	800c804 <USBD_CtlSendData>
 800c34a:	e009      	b.n	800c360 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f9e7 	bl	800c722 <USBD_CtlError>
 800c354:	e004      	b.n	800c360 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 faae 	bl	800c8b8 <USBD_CtlSendStatus>
 800c35c:	e000      	b.n	800c360 <USBD_GetDescriptor+0x2cc>
    return;
 800c35e:	bf00      	nop
  }
}
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop

0800c368 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	889b      	ldrh	r3, [r3, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d131      	bne.n	800c3de <USBD_SetAddress+0x76>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	88db      	ldrh	r3, [r3, #6]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d12d      	bne.n	800c3de <USBD_SetAddress+0x76>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	885b      	ldrh	r3, [r3, #2]
 800c386:	2b7f      	cmp	r3, #127	; 0x7f
 800c388:	d829      	bhi.n	800c3de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	885b      	ldrh	r3, [r3, #2]
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c394:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d104      	bne.n	800c3ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f9bc 	bl	800c722 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3aa:	e01d      	b.n	800c3e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7bfa      	ldrb	r2, [r7, #15]
 800c3b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f00b fcbe 	bl	8017d3a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa7a 	bl	800c8b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d2:	e009      	b.n	800c3e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3dc:	e004      	b.n	800c3e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f99e 	bl	800c722 <USBD_CtlError>
  }
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	885b      	ldrh	r3, [r3, #2]
 800c402:	b2da      	uxtb	r2, r3
 800c404:	4b4e      	ldr	r3, [pc, #312]	; (800c540 <USBD_SetConfig+0x150>)
 800c406:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c408:	4b4d      	ldr	r3, [pc, #308]	; (800c540 <USBD_SetConfig+0x150>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d905      	bls.n	800c41c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f985 	bl	800c722 <USBD_CtlError>
    return USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	e08c      	b.n	800c536 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b02      	cmp	r3, #2
 800c426:	d002      	beq.n	800c42e <USBD_SetConfig+0x3e>
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d029      	beq.n	800c480 <USBD_SetConfig+0x90>
 800c42c:	e075      	b.n	800c51a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c42e:	4b44      	ldr	r3, [pc, #272]	; (800c540 <USBD_SetConfig+0x150>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d020      	beq.n	800c478 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c436:	4b42      	ldr	r3, [pc, #264]	; (800c540 <USBD_SetConfig+0x150>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c440:	4b3f      	ldr	r3, [pc, #252]	; (800c540 <USBD_SetConfig+0x150>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7fe ffe0 	bl	800b40c <USBD_SetClassConfig>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d008      	beq.n	800c468 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 f962 	bl	800c722 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2202      	movs	r2, #2
 800c462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c466:	e065      	b.n	800c534 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fa25 	bl	800c8b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2203      	movs	r2, #3
 800c472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c476:	e05d      	b.n	800c534 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fa1d 	bl	800c8b8 <USBD_CtlSendStatus>
      break;
 800c47e:	e059      	b.n	800c534 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c480:	4b2f      	ldr	r3, [pc, #188]	; (800c540 <USBD_SetConfig+0x150>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d112      	bne.n	800c4ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c490:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <USBD_SetConfig+0x150>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	461a      	mov	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c49a:	4b29      	ldr	r3, [pc, #164]	; (800c540 <USBD_SetConfig+0x150>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7fe ffcf 	bl	800b444 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa06 	bl	800c8b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4ac:	e042      	b.n	800c534 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c4ae:	4b24      	ldr	r3, [pc, #144]	; (800c540 <USBD_SetConfig+0x150>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d02a      	beq.n	800c512 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7fe ffbd 	bl	800b444 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c4ca:	4b1d      	ldr	r3, [pc, #116]	; (800c540 <USBD_SetConfig+0x150>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4d4:	4b1a      	ldr	r3, [pc, #104]	; (800c540 <USBD_SetConfig+0x150>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7fe ff96 	bl	800b40c <USBD_SetClassConfig>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00f      	beq.n	800c50a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f918 	bl	800c722 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7fe ffa2 	bl	800b444 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c508:	e014      	b.n	800c534 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f9d4 	bl	800c8b8 <USBD_CtlSendStatus>
      break;
 800c510:	e010      	b.n	800c534 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f9d0 	bl	800c8b8 <USBD_CtlSendStatus>
      break;
 800c518:	e00c      	b.n	800c534 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f900 	bl	800c722 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c522:	4b07      	ldr	r3, [pc, #28]	; (800c540 <USBD_SetConfig+0x150>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7fe ff8b 	bl	800b444 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c52e:	2303      	movs	r3, #3
 800c530:	73fb      	strb	r3, [r7, #15]
      break;
 800c532:	bf00      	nop
  }

  return ret;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20005000 	.word	0x20005000

0800c544 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	88db      	ldrh	r3, [r3, #6]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d004      	beq.n	800c560 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f8e2 	bl	800c722 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c55e:	e023      	b.n	800c5a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	dc02      	bgt.n	800c572 <USBD_GetConfig+0x2e>
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dc03      	bgt.n	800c578 <USBD_GetConfig+0x34>
 800c570:	e015      	b.n	800c59e <USBD_GetConfig+0x5a>
 800c572:	2b03      	cmp	r3, #3
 800c574:	d00b      	beq.n	800c58e <USBD_GetConfig+0x4a>
 800c576:	e012      	b.n	800c59e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3308      	adds	r3, #8
 800c582:	2201      	movs	r2, #1
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f93c 	bl	800c804 <USBD_CtlSendData>
        break;
 800c58c:	e00c      	b.n	800c5a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3304      	adds	r3, #4
 800c592:	2201      	movs	r2, #1
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f934 	bl	800c804 <USBD_CtlSendData>
        break;
 800c59c:	e004      	b.n	800c5a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f8be 	bl	800c722 <USBD_CtlError>
        break;
 800c5a6:	bf00      	nop
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d81e      	bhi.n	800c606 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	88db      	ldrh	r3, [r3, #6]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d004      	beq.n	800c5da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f8a5 	bl	800c722 <USBD_CtlError>
        break;
 800c5d8:	e01a      	b.n	800c610 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d005      	beq.n	800c5f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	f043 0202 	orr.w	r2, r3, #2
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	330c      	adds	r3, #12
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f900 	bl	800c804 <USBD_CtlSendData>
      break;
 800c604:	e004      	b.n	800c610 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f88a 	bl	800c722 <USBD_CtlError>
      break;
 800c60e:	bf00      	nop
  }
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	885b      	ldrh	r3, [r3, #2]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d107      	bne.n	800c63a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f940 	bl	800c8b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c638:	e013      	b.n	800c662 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d10b      	bne.n	800c65a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	889b      	ldrh	r3, [r3, #4]
 800c646:	0a1b      	lsrs	r3, r3, #8
 800c648:	b29b      	uxth	r3, r3
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f930 	bl	800c8b8 <USBD_CtlSendStatus>
}
 800c658:	e003      	b.n	800c662 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f860 	bl	800c722 <USBD_CtlError>
}
 800c662:	bf00      	nop
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	3b01      	subs	r3, #1
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d80b      	bhi.n	800c69a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	2b01      	cmp	r3, #1
 800c688:	d10c      	bne.n	800c6a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f910 	bl	800c8b8 <USBD_CtlSendStatus>
      }
      break;
 800c698:	e004      	b.n	800c6a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f840 	bl	800c722 <USBD_CtlError>
      break;
 800c6a2:	e000      	b.n	800c6a6 <USBD_ClrFeature+0x3c>
      break;
 800c6a4:	bf00      	nop
  }
}
 800c6a6:	bf00      	nop
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	781a      	ldrb	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	781a      	ldrb	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff fa40 	bl	800bb5e <SWAPBYTE>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f7ff fa33 	bl	800bb5e <SWAPBYTE>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3301      	adds	r3, #1
 800c704:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3301      	adds	r3, #1
 800c70a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff fa26 	bl	800bb5e <SWAPBYTE>
 800c712:	4603      	mov	r3, r0
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	80da      	strh	r2, [r3, #6]
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b082      	sub	sp, #8
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c72c:	2180      	movs	r1, #128	; 0x80
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f00b fa99 	bl	8017c66 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c734:	2100      	movs	r1, #0
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f00b fa95 	bl	8017c66 <USBD_LL_StallEP>
}
 800c73c:	bf00      	nop
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d036      	beq.n	800c7c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c75e:	6938      	ldr	r0, [r7, #16]
 800c760:	f000 f836 	bl	800c7d0 <USBD_GetLen>
 800c764:	4603      	mov	r3, r0
 800c766:	3301      	adds	r3, #1
 800c768:	b29b      	uxth	r3, r3
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	4413      	add	r3, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	7812      	ldrb	r2, [r2, #0]
 800c77c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	3301      	adds	r3, #1
 800c782:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c784:	7dfb      	ldrb	r3, [r7, #23]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	4413      	add	r3, r2
 800c78a:	2203      	movs	r2, #3
 800c78c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	3301      	adds	r3, #1
 800c792:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c794:	e013      	b.n	800c7be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	4413      	add	r3, r2
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	613b      	str	r3, [r7, #16]
    idx++;
 800c7a8:	7dfb      	ldrb	r3, [r7, #23]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e7      	bne.n	800c796 <USBD_GetString+0x52>
 800c7c6:	e000      	b.n	800c7ca <USBD_GetString+0x86>
    return;
 800c7c8:	bf00      	nop
  }
}
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c7e0:	e005      	b.n	800c7ee <USBD_GetLen+0x1e>
  {
    len++;
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1f5      	bne.n	800c7e2 <USBD_GetLen+0x12>
  }

  return len;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2202      	movs	r2, #2
 800c814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	2100      	movs	r1, #0
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f00b faa4 	bl	8017d78 <USBD_LL_Transmit>

  return USBD_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	2100      	movs	r1, #0
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f00b fa93 	bl	8017d78 <USBD_LL_Transmit>

  return USBD_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2203      	movs	r2, #3
 800c86c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	2100      	movs	r1, #0
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f00b fa97 	bl	8017dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f00b fa86 	bl	8017dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2204      	movs	r2, #4
 800c8c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f00b fa52 	bl	8017d78 <USBD_LL_Transmit>

  return USBD_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2205      	movs	r2, #5
 800c8ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f00b fa60 	bl	8017dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	4613      	mov	r3, r2
 800c910:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c912:	2301      	movs	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c91a:	4b1f      	ldr	r3, [pc, #124]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c91c:	7a5b      	ldrb	r3, [r3, #9]
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d131      	bne.n	800c988 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c924:	4b1c      	ldr	r3, [pc, #112]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c926:	7a5b      	ldrb	r3, [r3, #9]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b1a      	ldr	r3, [pc, #104]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c92e:	2100      	movs	r1, #0
 800c930:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c932:	4b19      	ldr	r3, [pc, #100]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c934:	7a5b      	ldrb	r3, [r3, #9]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	4a17      	ldr	r2, [pc, #92]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c944:	7a5b      	ldrb	r3, [r3, #9]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	461a      	mov	r2, r3
 800c94a:	4b13      	ldr	r3, [pc, #76]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c94c:	4413      	add	r3, r2
 800c94e:	79fa      	ldrb	r2, [r7, #7]
 800c950:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c952:	4b11      	ldr	r3, [pc, #68]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c954:	7a5b      	ldrb	r3, [r3, #9]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	b2d1      	uxtb	r1, r2
 800c95c:	4a0e      	ldr	r2, [pc, #56]	; (800c998 <FATFS_LinkDriverEx+0x94>)
 800c95e:	7251      	strb	r1, [r2, #9]
 800c960:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c962:	7dbb      	ldrb	r3, [r7, #22]
 800c964:	3330      	adds	r3, #48	; 0x30
 800c966:	b2da      	uxtb	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	3301      	adds	r3, #1
 800c970:	223a      	movs	r2, #58	; 0x3a
 800c972:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	3302      	adds	r3, #2
 800c978:	222f      	movs	r2, #47	; 0x2f
 800c97a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	3303      	adds	r3, #3
 800c980:	2200      	movs	r2, #0
 800c982:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c988:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	371c      	adds	r7, #28
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	20005004 	.word	0x20005004

0800c99c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff ffaa 	bl	800c904 <FATFS_LinkDriverEx>
 800c9b0:	4603      	mov	r3, r0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c9c4:	88fb      	ldrh	r3, [r7, #6]
 800c9c6:	021b      	lsls	r3, r3, #8
 800c9c8:	b21a      	sxth	r2, r3
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	0a1b      	lsrs	r3, r3, #8
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	b21b      	sxth	r3, r3
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	b21b      	sxth	r3, r3
 800c9d6:	b29b      	uxth	r3, r3
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	061a      	lsls	r2, r3, #24
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9f8:	431a      	orrs	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	0a1b      	lsrs	r3, r3, #8
 800c9fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca02:	431a      	orrs	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	0e1b      	lsrs	r3, r3, #24
 800ca08:	4313      	orrs	r3, r2
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ca20:	f000 f8d4 	bl	800cbcc <mem_init>
  memp_init();
 800ca24:	f000 fbda 	bl	800d1dc <memp_init>
  pbuf_init();
  netif_init();
 800ca28:	f000 fcd8 	bl	800d3dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ca2c:	f007 feba 	bl	80147a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ca30:	f001 fdae 	bl	800e590 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ca34:	f007 fe2c 	bl	8014690 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ca38:	bf00      	nop
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ca4a:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <ptr_to_mem+0x20>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	88fb      	ldrh	r3, [r7, #6]
 800ca50:	4413      	add	r3, r2
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	2000567c 	.word	0x2000567c

0800ca64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca6c:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <mem_to_ptr+0x20>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	b29b      	uxth	r3, r3
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	2000567c 	.word	0x2000567c

0800ca88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca88:	b590      	push	{r4, r7, lr}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca90:	4b45      	ldr	r3, [pc, #276]	; (800cba8 <plug_holes+0x120>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d206      	bcs.n	800caa8 <plug_holes+0x20>
 800ca9a:	4b44      	ldr	r3, [pc, #272]	; (800cbac <plug_holes+0x124>)
 800ca9c:	f240 12df 	movw	r2, #479	; 0x1df
 800caa0:	4943      	ldr	r1, [pc, #268]	; (800cbb0 <plug_holes+0x128>)
 800caa2:	4844      	ldr	r0, [pc, #272]	; (800cbb4 <plug_holes+0x12c>)
 800caa4:	f00b fb92 	bl	80181cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800caa8:	4b43      	ldr	r3, [pc, #268]	; (800cbb8 <plug_holes+0x130>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d306      	bcc.n	800cac0 <plug_holes+0x38>
 800cab2:	4b3e      	ldr	r3, [pc, #248]	; (800cbac <plug_holes+0x124>)
 800cab4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cab8:	4940      	ldr	r1, [pc, #256]	; (800cbbc <plug_holes+0x134>)
 800caba:	483e      	ldr	r0, [pc, #248]	; (800cbb4 <plug_holes+0x12c>)
 800cabc:	f00b fb86 	bl	80181cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	791b      	ldrb	r3, [r3, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d006      	beq.n	800cad6 <plug_holes+0x4e>
 800cac8:	4b38      	ldr	r3, [pc, #224]	; (800cbac <plug_holes+0x124>)
 800caca:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cace:	493c      	ldr	r1, [pc, #240]	; (800cbc0 <plug_holes+0x138>)
 800cad0:	4838      	ldr	r0, [pc, #224]	; (800cbb4 <plug_holes+0x12c>)
 800cad2:	f00b fb7b 	bl	80181cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cade:	d906      	bls.n	800caee <plug_holes+0x66>
 800cae0:	4b32      	ldr	r3, [pc, #200]	; (800cbac <plug_holes+0x124>)
 800cae2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cae6:	4937      	ldr	r1, [pc, #220]	; (800cbc4 <plug_holes+0x13c>)
 800cae8:	4832      	ldr	r0, [pc, #200]	; (800cbb4 <plug_holes+0x12c>)
 800caea:	f00b fb6f 	bl	80181cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff ffa4 	bl	800ca40 <ptr_to_mem>
 800caf8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d024      	beq.n	800cb4c <plug_holes+0xc4>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	791b      	ldrb	r3, [r3, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d120      	bne.n	800cb4c <plug_holes+0xc4>
 800cb0a:	4b2b      	ldr	r3, [pc, #172]	; (800cbb8 <plug_holes+0x130>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d01b      	beq.n	800cb4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cb14:	4b2c      	ldr	r3, [pc, #176]	; (800cbc8 <plug_holes+0x140>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d102      	bne.n	800cb24 <plug_holes+0x9c>
      lfree = mem;
 800cb1e:	4a2a      	ldr	r2, [pc, #168]	; (800cbc8 <plug_holes+0x140>)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	881a      	ldrh	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb34:	d00a      	beq.n	800cb4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff ff80 	bl	800ca40 <ptr_to_mem>
 800cb40:	4604      	mov	r4, r0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff ff8e 	bl	800ca64 <mem_to_ptr>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	885b      	ldrh	r3, [r3, #2]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff ff75 	bl	800ca40 <ptr_to_mem>
 800cb56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d01f      	beq.n	800cba0 <plug_holes+0x118>
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	791b      	ldrb	r3, [r3, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11b      	bne.n	800cba0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb68:	4b17      	ldr	r3, [pc, #92]	; (800cbc8 <plug_holes+0x140>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d102      	bne.n	800cb78 <plug_holes+0xf0>
      lfree = pmem;
 800cb72:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <plug_holes+0x140>)
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	881a      	ldrh	r2, [r3, #0]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb88:	d00a      	beq.n	800cba0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff ff56 	bl	800ca40 <ptr_to_mem>
 800cb94:	4604      	mov	r4, r0
 800cb96:	68b8      	ldr	r0, [r7, #8]
 800cb98:	f7ff ff64 	bl	800ca64 <mem_to_ptr>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cba0:	bf00      	nop
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd90      	pop	{r4, r7, pc}
 800cba8:	2000567c 	.word	0x2000567c
 800cbac:	080190c4 	.word	0x080190c4
 800cbb0:	080190f4 	.word	0x080190f4
 800cbb4:	0801910c 	.word	0x0801910c
 800cbb8:	20005680 	.word	0x20005680
 800cbbc:	08019134 	.word	0x08019134
 800cbc0:	08019150 	.word	0x08019150
 800cbc4:	0801916c 	.word	0x0801916c
 800cbc8:	20005684 	.word	0x20005684

0800cbcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cbd2:	4b18      	ldr	r3, [pc, #96]	; (800cc34 <mem_init+0x68>)
 800cbd4:	3303      	adds	r3, #3
 800cbd6:	f023 0303 	bic.w	r3, r3, #3
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4b16      	ldr	r3, [pc, #88]	; (800cc38 <mem_init+0x6c>)
 800cbde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cbe0:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <mem_init+0x6c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbfa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cbfe:	f7ff ff1f 	bl	800ca40 <ptr_to_mem>
 800cc02:	4603      	mov	r3, r0
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <mem_init+0x70>)
 800cc06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <mem_init+0x70>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <mem_init+0x70>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cc18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cc1a:	4b08      	ldr	r3, [pc, #32]	; (800cc3c <mem_init+0x70>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cc22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cc24:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <mem_init+0x6c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a05      	ldr	r2, [pc, #20]	; (800cc40 <mem_init+0x74>)
 800cc2a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20005028 	.word	0x20005028
 800cc38:	2000567c 	.word	0x2000567c
 800cc3c:	20005680 	.word	0x20005680
 800cc40:	20005684 	.word	0x20005684

0800cc44 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff ff09 	bl	800ca64 <mem_to_ptr>
 800cc52:	4603      	mov	r3, r0
 800cc54:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fef0 	bl	800ca40 <ptr_to_mem>
 800cc60:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	885b      	ldrh	r3, [r3, #2]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff feea 	bl	800ca40 <ptr_to_mem>
 800cc6c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc76:	d818      	bhi.n	800ccaa <mem_link_valid+0x66>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	885b      	ldrh	r3, [r3, #2]
 800cc7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc80:	d813      	bhi.n	800ccaa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc86:	8afa      	ldrh	r2, [r7, #22]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d004      	beq.n	800cc96 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	881b      	ldrh	r3, [r3, #0]
 800cc90:	8afa      	ldrh	r2, [r7, #22]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d109      	bne.n	800ccaa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc96:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <mem_link_valid+0x74>)
 800cc98:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d006      	beq.n	800ccae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	885b      	ldrh	r3, [r3, #2]
 800cca4:	8afa      	ldrh	r2, [r7, #22]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d001      	beq.n	800ccae <mem_link_valid+0x6a>
    return 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e000      	b.n	800ccb0 <mem_link_valid+0x6c>
  }
  return 1;
 800ccae:	2301      	movs	r3, #1
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20005680 	.word	0x20005680

0800ccbc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d04c      	beq.n	800cd64 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d007      	beq.n	800cce4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ccd4:	4b25      	ldr	r3, [pc, #148]	; (800cd6c <mem_free+0xb0>)
 800ccd6:	f240 2273 	movw	r2, #627	; 0x273
 800ccda:	4925      	ldr	r1, [pc, #148]	; (800cd70 <mem_free+0xb4>)
 800ccdc:	4825      	ldr	r0, [pc, #148]	; (800cd74 <mem_free+0xb8>)
 800ccde:	f00b fa75 	bl	80181cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cce2:	e040      	b.n	800cd66 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3b08      	subs	r3, #8
 800cce8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ccea:	4b23      	ldr	r3, [pc, #140]	; (800cd78 <mem_free+0xbc>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d306      	bcc.n	800cd02 <mem_free+0x46>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f103 020c 	add.w	r2, r3, #12
 800ccfa:	4b20      	ldr	r3, [pc, #128]	; (800cd7c <mem_free+0xc0>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d907      	bls.n	800cd12 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cd02:	4b1a      	ldr	r3, [pc, #104]	; (800cd6c <mem_free+0xb0>)
 800cd04:	f240 227f 	movw	r2, #639	; 0x27f
 800cd08:	491d      	ldr	r1, [pc, #116]	; (800cd80 <mem_free+0xc4>)
 800cd0a:	481a      	ldr	r0, [pc, #104]	; (800cd74 <mem_free+0xb8>)
 800cd0c:	f00b fa5e 	bl	80181cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cd10:	e029      	b.n	800cd66 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	791b      	ldrb	r3, [r3, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d107      	bne.n	800cd2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cd1a:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <mem_free+0xb0>)
 800cd1c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cd20:	4918      	ldr	r1, [pc, #96]	; (800cd84 <mem_free+0xc8>)
 800cd22:	4814      	ldr	r0, [pc, #80]	; (800cd74 <mem_free+0xb8>)
 800cd24:	f00b fa52 	bl	80181cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cd28:	e01d      	b.n	800cd66 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7ff ff8a 	bl	800cc44 <mem_link_valid>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d107      	bne.n	800cd46 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cd36:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <mem_free+0xb0>)
 800cd38:	f240 2295 	movw	r2, #661	; 0x295
 800cd3c:	4912      	ldr	r1, [pc, #72]	; (800cd88 <mem_free+0xcc>)
 800cd3e:	480d      	ldr	r0, [pc, #52]	; (800cd74 <mem_free+0xb8>)
 800cd40:	f00b fa44 	bl	80181cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cd44:	e00f      	b.n	800cd66 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd4c:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <mem_free+0xd0>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d202      	bcs.n	800cd5c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd56:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <mem_free+0xd0>)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7ff fe93 	bl	800ca88 <plug_holes>
 800cd62:	e000      	b.n	800cd66 <mem_free+0xaa>
    return;
 800cd64:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	080190c4 	.word	0x080190c4
 800cd70:	08019198 	.word	0x08019198
 800cd74:	0801910c 	.word	0x0801910c
 800cd78:	2000567c 	.word	0x2000567c
 800cd7c:	20005680 	.word	0x20005680
 800cd80:	080191bc 	.word	0x080191bc
 800cd84:	080191d8 	.word	0x080191d8
 800cd88:	08019200 	.word	0x08019200
 800cd8c:	20005684 	.word	0x20005684

0800cd90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cd9c:	887b      	ldrh	r3, [r7, #2]
 800cd9e:	3303      	adds	r3, #3
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cda8:	8bfb      	ldrh	r3, [r7, #30]
 800cdaa:	2b0b      	cmp	r3, #11
 800cdac:	d801      	bhi.n	800cdb2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cdae:	230c      	movs	r3, #12
 800cdb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cdb2:	8bfb      	ldrh	r3, [r7, #30]
 800cdb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdb8:	d803      	bhi.n	800cdc2 <mem_trim+0x32>
 800cdba:	8bfa      	ldrh	r2, [r7, #30]
 800cdbc:	887b      	ldrh	r3, [r7, #2]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d201      	bcs.n	800cdc6 <mem_trim+0x36>
    return NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e0cc      	b.n	800cf60 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cdc6:	4b68      	ldr	r3, [pc, #416]	; (800cf68 <mem_trim+0x1d8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d304      	bcc.n	800cdda <mem_trim+0x4a>
 800cdd0:	4b66      	ldr	r3, [pc, #408]	; (800cf6c <mem_trim+0x1dc>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d306      	bcc.n	800cde8 <mem_trim+0x58>
 800cdda:	4b65      	ldr	r3, [pc, #404]	; (800cf70 <mem_trim+0x1e0>)
 800cddc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cde0:	4964      	ldr	r1, [pc, #400]	; (800cf74 <mem_trim+0x1e4>)
 800cde2:	4865      	ldr	r0, [pc, #404]	; (800cf78 <mem_trim+0x1e8>)
 800cde4:	f00b f9f2 	bl	80181cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cde8:	4b5f      	ldr	r3, [pc, #380]	; (800cf68 <mem_trim+0x1d8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d304      	bcc.n	800cdfc <mem_trim+0x6c>
 800cdf2:	4b5e      	ldr	r3, [pc, #376]	; (800cf6c <mem_trim+0x1dc>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d301      	bcc.n	800ce00 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	e0af      	b.n	800cf60 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3b08      	subs	r3, #8
 800ce04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ce06:	69b8      	ldr	r0, [r7, #24]
 800ce08:	f7ff fe2c 	bl	800ca64 <mem_to_ptr>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	881a      	ldrh	r2, [r3, #0]
 800ce14:	8afb      	ldrh	r3, [r7, #22]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b08      	subs	r3, #8
 800ce1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ce1e:	8bfa      	ldrh	r2, [r7, #30]
 800ce20:	8abb      	ldrh	r3, [r7, #20]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d906      	bls.n	800ce34 <mem_trim+0xa4>
 800ce26:	4b52      	ldr	r3, [pc, #328]	; (800cf70 <mem_trim+0x1e0>)
 800ce28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ce2c:	4953      	ldr	r1, [pc, #332]	; (800cf7c <mem_trim+0x1ec>)
 800ce2e:	4852      	ldr	r0, [pc, #328]	; (800cf78 <mem_trim+0x1e8>)
 800ce30:	f00b f9cc 	bl	80181cc <iprintf>
  if (newsize > size) {
 800ce34:	8bfa      	ldrh	r2, [r7, #30]
 800ce36:	8abb      	ldrh	r3, [r7, #20]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d901      	bls.n	800ce40 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e08f      	b.n	800cf60 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ce40:	8bfa      	ldrh	r2, [r7, #30]
 800ce42:	8abb      	ldrh	r3, [r7, #20]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d101      	bne.n	800ce4c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	e089      	b.n	800cf60 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fdf5 	bl	800ca40 <ptr_to_mem>
 800ce56:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	791b      	ldrb	r3, [r3, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d13f      	bne.n	800cee0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce68:	d106      	bne.n	800ce78 <mem_trim+0xe8>
 800ce6a:	4b41      	ldr	r3, [pc, #260]	; (800cf70 <mem_trim+0x1e0>)
 800ce6c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ce70:	4943      	ldr	r1, [pc, #268]	; (800cf80 <mem_trim+0x1f0>)
 800ce72:	4841      	ldr	r0, [pc, #260]	; (800cf78 <mem_trim+0x1e8>)
 800ce74:	f00b f9aa 	bl	80181cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce7e:	8afa      	ldrh	r2, [r7, #22]
 800ce80:	8bfb      	ldrh	r3, [r7, #30]
 800ce82:	4413      	add	r3, r2
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	3308      	adds	r3, #8
 800ce88:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ce8a:	4b3e      	ldr	r3, [pc, #248]	; (800cf84 <mem_trim+0x1f4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d106      	bne.n	800cea2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ce94:	89fb      	ldrh	r3, [r7, #14]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fdd2 	bl	800ca40 <ptr_to_mem>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4a39      	ldr	r2, [pc, #228]	; (800cf84 <mem_trim+0x1f4>)
 800cea0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cea2:	89fb      	ldrh	r3, [r7, #14]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7ff fdcb 	bl	800ca40 <ptr_to_mem>
 800ceaa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	89ba      	ldrh	r2, [r7, #12]
 800ceb6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	8afa      	ldrh	r2, [r7, #22]
 800cebc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	89fa      	ldrh	r2, [r7, #14]
 800cec2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cecc:	d047      	beq.n	800cf5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff fdb4 	bl	800ca40 <ptr_to_mem>
 800ced8:	4602      	mov	r2, r0
 800ceda:	89fb      	ldrh	r3, [r7, #14]
 800cedc:	8053      	strh	r3, [r2, #2]
 800cede:	e03e      	b.n	800cf5e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cee0:	8bfb      	ldrh	r3, [r7, #30]
 800cee2:	f103 0214 	add.w	r2, r3, #20
 800cee6:	8abb      	ldrh	r3, [r7, #20]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d838      	bhi.n	800cf5e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ceec:	8afa      	ldrh	r2, [r7, #22]
 800ceee:	8bfb      	ldrh	r3, [r7, #30]
 800cef0:	4413      	add	r3, r2
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3308      	adds	r3, #8
 800cef6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf00:	d106      	bne.n	800cf10 <mem_trim+0x180>
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <mem_trim+0x1e0>)
 800cf04:	f240 3216 	movw	r2, #790	; 0x316
 800cf08:	491d      	ldr	r1, [pc, #116]	; (800cf80 <mem_trim+0x1f0>)
 800cf0a:	481b      	ldr	r0, [pc, #108]	; (800cf78 <mem_trim+0x1e8>)
 800cf0c:	f00b f95e 	bl	80181cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cf10:	89fb      	ldrh	r3, [r7, #14]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fd94 	bl	800ca40 <ptr_to_mem>
 800cf18:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cf1a:	4b1a      	ldr	r3, [pc, #104]	; (800cf84 <mem_trim+0x1f4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d202      	bcs.n	800cf2a <mem_trim+0x19a>
      lfree = mem2;
 800cf24:	4a17      	ldr	r2, [pc, #92]	; (800cf84 <mem_trim+0x1f4>)
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	881a      	ldrh	r2, [r3, #0]
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	8afa      	ldrh	r2, [r7, #22]
 800cf3c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	89fa      	ldrh	r2, [r7, #14]
 800cf42:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf4c:	d007      	beq.n	800cf5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fd74 	bl	800ca40 <ptr_to_mem>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	89fb      	ldrh	r3, [r7, #14]
 800cf5c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cf5e:	687b      	ldr	r3, [r7, #4]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	2000567c 	.word	0x2000567c
 800cf6c:	20005680 	.word	0x20005680
 800cf70:	080190c4 	.word	0x080190c4
 800cf74:	08019234 	.word	0x08019234
 800cf78:	0801910c 	.word	0x0801910c
 800cf7c:	0801924c 	.word	0x0801924c
 800cf80:	0801926c 	.word	0x0801926c
 800cf84:	20005684 	.word	0x20005684

0800cf88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b088      	sub	sp, #32
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cf92:	88fb      	ldrh	r3, [r7, #6]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d101      	bne.n	800cf9c <mem_malloc+0x14>
    return NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e0d9      	b.n	800d150 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cf9c:	88fb      	ldrh	r3, [r7, #6]
 800cf9e:	3303      	adds	r3, #3
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	f023 0303 	bic.w	r3, r3, #3
 800cfa6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cfa8:	8bbb      	ldrh	r3, [r7, #28]
 800cfaa:	2b0b      	cmp	r3, #11
 800cfac:	d801      	bhi.n	800cfb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cfae:	230c      	movs	r3, #12
 800cfb0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cfb2:	8bbb      	ldrh	r3, [r7, #28]
 800cfb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfb8:	d803      	bhi.n	800cfc2 <mem_malloc+0x3a>
 800cfba:	8bba      	ldrh	r2, [r7, #28]
 800cfbc:	88fb      	ldrh	r3, [r7, #6]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d201      	bcs.n	800cfc6 <mem_malloc+0x3e>
    return NULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e0c4      	b.n	800d150 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cfc6:	4b64      	ldr	r3, [pc, #400]	; (800d158 <mem_malloc+0x1d0>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fd4a 	bl	800ca64 <mem_to_ptr>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	83fb      	strh	r3, [r7, #30]
 800cfd4:	e0b4      	b.n	800d140 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cfd6:	8bfb      	ldrh	r3, [r7, #30]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff fd31 	bl	800ca40 <ptr_to_mem>
 800cfde:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	791b      	ldrb	r3, [r3, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f040 80a4 	bne.w	800d132 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	8bfb      	ldrh	r3, [r7, #30]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	f1a3 0208 	sub.w	r2, r3, #8
 800cff8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cffa:	429a      	cmp	r2, r3
 800cffc:	f0c0 8099 	bcc.w	800d132 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	461a      	mov	r2, r3
 800d006:	8bfb      	ldrh	r3, [r7, #30]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	f1a3 0208 	sub.w	r2, r3, #8
 800d00e:	8bbb      	ldrh	r3, [r7, #28]
 800d010:	3314      	adds	r3, #20
 800d012:	429a      	cmp	r2, r3
 800d014:	d333      	bcc.n	800d07e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d016:	8bfa      	ldrh	r2, [r7, #30]
 800d018:	8bbb      	ldrh	r3, [r7, #28]
 800d01a:	4413      	add	r3, r2
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	3308      	adds	r3, #8
 800d020:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d022:	8a7b      	ldrh	r3, [r7, #18]
 800d024:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d028:	d106      	bne.n	800d038 <mem_malloc+0xb0>
 800d02a:	4b4c      	ldr	r3, [pc, #304]	; (800d15c <mem_malloc+0x1d4>)
 800d02c:	f240 3287 	movw	r2, #903	; 0x387
 800d030:	494b      	ldr	r1, [pc, #300]	; (800d160 <mem_malloc+0x1d8>)
 800d032:	484c      	ldr	r0, [pc, #304]	; (800d164 <mem_malloc+0x1dc>)
 800d034:	f00b f8ca 	bl	80181cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d038:	8a7b      	ldrh	r3, [r7, #18]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff fd00 	bl	800ca40 <ptr_to_mem>
 800d040:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	881a      	ldrh	r2, [r3, #0]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8bfa      	ldrh	r2, [r7, #30]
 800d054:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	8a7a      	ldrh	r2, [r7, #18]
 800d05a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2201      	movs	r2, #1
 800d060:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d06a:	d00b      	beq.n	800d084 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	4618      	mov	r0, r3
 800d072:	f7ff fce5 	bl	800ca40 <ptr_to_mem>
 800d076:	4602      	mov	r2, r0
 800d078:	8a7b      	ldrh	r3, [r7, #18]
 800d07a:	8053      	strh	r3, [r2, #2]
 800d07c:	e002      	b.n	800d084 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2201      	movs	r2, #1
 800d082:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d084:	4b34      	ldr	r3, [pc, #208]	; (800d158 <mem_malloc+0x1d0>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d127      	bne.n	800d0de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d08e:	4b32      	ldr	r3, [pc, #200]	; (800d158 <mem_malloc+0x1d0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d094:	e005      	b.n	800d0a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff fcd0 	bl	800ca40 <ptr_to_mem>
 800d0a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	791b      	ldrb	r3, [r3, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d004      	beq.n	800d0b4 <mem_malloc+0x12c>
 800d0aa:	4b2f      	ldr	r3, [pc, #188]	; (800d168 <mem_malloc+0x1e0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d1f0      	bne.n	800d096 <mem_malloc+0x10e>
          }
          lfree = cur;
 800d0b4:	4a28      	ldr	r2, [pc, #160]	; (800d158 <mem_malloc+0x1d0>)
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d0ba:	4b27      	ldr	r3, [pc, #156]	; (800d158 <mem_malloc+0x1d0>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	4b2a      	ldr	r3, [pc, #168]	; (800d168 <mem_malloc+0x1e0>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d00b      	beq.n	800d0de <mem_malloc+0x156>
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <mem_malloc+0x1d0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	791b      	ldrb	r3, [r3, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <mem_malloc+0x156>
 800d0d0:	4b22      	ldr	r3, [pc, #136]	; (800d15c <mem_malloc+0x1d4>)
 800d0d2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d0d6:	4925      	ldr	r1, [pc, #148]	; (800d16c <mem_malloc+0x1e4>)
 800d0d8:	4822      	ldr	r0, [pc, #136]	; (800d164 <mem_malloc+0x1dc>)
 800d0da:	f00b f877 	bl	80181cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d0de:	8bba      	ldrh	r2, [r7, #28]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	4a20      	ldr	r2, [pc, #128]	; (800d168 <mem_malloc+0x1e0>)
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d906      	bls.n	800d0fc <mem_malloc+0x174>
 800d0ee:	4b1b      	ldr	r3, [pc, #108]	; (800d15c <mem_malloc+0x1d4>)
 800d0f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d0f4:	491e      	ldr	r1, [pc, #120]	; (800d170 <mem_malloc+0x1e8>)
 800d0f6:	481b      	ldr	r0, [pc, #108]	; (800d164 <mem_malloc+0x1dc>)
 800d0f8:	f00b f868 	bl	80181cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	f003 0303 	and.w	r3, r3, #3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d006      	beq.n	800d114 <mem_malloc+0x18c>
 800d106:	4b15      	ldr	r3, [pc, #84]	; (800d15c <mem_malloc+0x1d4>)
 800d108:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d10c:	4919      	ldr	r1, [pc, #100]	; (800d174 <mem_malloc+0x1ec>)
 800d10e:	4815      	ldr	r0, [pc, #84]	; (800d164 <mem_malloc+0x1dc>)
 800d110:	f00b f85c 	bl	80181cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d006      	beq.n	800d12c <mem_malloc+0x1a4>
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <mem_malloc+0x1d4>)
 800d120:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d124:	4914      	ldr	r1, [pc, #80]	; (800d178 <mem_malloc+0x1f0>)
 800d126:	480f      	ldr	r0, [pc, #60]	; (800d164 <mem_malloc+0x1dc>)
 800d128:	f00b f850 	bl	80181cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	3308      	adds	r3, #8
 800d130:	e00e      	b.n	800d150 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d132:	8bfb      	ldrh	r3, [r7, #30]
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fc83 	bl	800ca40 <ptr_to_mem>
 800d13a:	4603      	mov	r3, r0
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d140:	8bfa      	ldrh	r2, [r7, #30]
 800d142:	8bbb      	ldrh	r3, [r7, #28]
 800d144:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d148:	429a      	cmp	r2, r3
 800d14a:	f4ff af44 	bcc.w	800cfd6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20005684 	.word	0x20005684
 800d15c:	080190c4 	.word	0x080190c4
 800d160:	0801926c 	.word	0x0801926c
 800d164:	0801910c 	.word	0x0801910c
 800d168:	20005680 	.word	0x20005680
 800d16c:	08019280 	.word	0x08019280
 800d170:	0801929c 	.word	0x0801929c
 800d174:	080192cc 	.word	0x080192cc
 800d178:	080192fc 	.word	0x080192fc

0800d17c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	3303      	adds	r3, #3
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d198:	2300      	movs	r3, #0
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	e011      	b.n	800d1c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	885b      	ldrh	r3, [r3, #2]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	dbe7      	blt.n	800d19e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d1ce:	bf00      	nop
 800d1d0:	bf00      	nop
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	80fb      	strh	r3, [r7, #6]
 800d1e6:	e009      	b.n	800d1fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d1e8:	88fb      	ldrh	r3, [r7, #6]
 800d1ea:	4a08      	ldr	r2, [pc, #32]	; (800d20c <memp_init+0x30>)
 800d1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff ffc3 	bl	800d17c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d1f6:	88fb      	ldrh	r3, [r7, #6]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	80fb      	strh	r3, [r7, #6]
 800d1fc:	88fb      	ldrh	r3, [r7, #6]
 800d1fe:	2b08      	cmp	r3, #8
 800d200:	d9f2      	bls.n	800d1e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	0801bb60 	.word	0x0801bb60

0800d210 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d012      	beq.n	800d24c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f003 0303 	and.w	r3, r3, #3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d006      	beq.n	800d248 <do_memp_malloc_pool+0x38>
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <do_memp_malloc_pool+0x48>)
 800d23c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d240:	4906      	ldr	r1, [pc, #24]	; (800d25c <do_memp_malloc_pool+0x4c>)
 800d242:	4807      	ldr	r0, [pc, #28]	; (800d260 <do_memp_malloc_pool+0x50>)
 800d244:	f00a ffc2 	bl	80181cc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	e000      	b.n	800d24e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	08019320 	.word	0x08019320
 800d25c:	08019350 	.word	0x08019350
 800d260:	08019374 	.word	0x08019374

0800d264 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <memp_malloc_pool+0x1c>
 800d272:	4b0a      	ldr	r3, [pc, #40]	; (800d29c <memp_malloc_pool+0x38>)
 800d274:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d278:	4909      	ldr	r1, [pc, #36]	; (800d2a0 <memp_malloc_pool+0x3c>)
 800d27a:	480a      	ldr	r0, [pc, #40]	; (800d2a4 <memp_malloc_pool+0x40>)
 800d27c:	f00a ffa6 	bl	80181cc <iprintf>
  if (desc == NULL) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <memp_malloc_pool+0x26>
    return NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	e003      	b.n	800d292 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff ffc0 	bl	800d210 <do_memp_malloc_pool>
 800d290:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d292:	4618      	mov	r0, r3
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	08019320 	.word	0x08019320
 800d2a0:	0801939c 	.word	0x0801939c
 800d2a4:	08019374 	.word	0x08019374

0800d2a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d2b2:	79fb      	ldrb	r3, [r7, #7]
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	d908      	bls.n	800d2ca <memp_malloc+0x22>
 800d2b8:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <memp_malloc+0x3c>)
 800d2ba:	f240 1257 	movw	r2, #343	; 0x157
 800d2be:	490a      	ldr	r1, [pc, #40]	; (800d2e8 <memp_malloc+0x40>)
 800d2c0:	480a      	ldr	r0, [pc, #40]	; (800d2ec <memp_malloc+0x44>)
 800d2c2:	f00a ff83 	bl	80181cc <iprintf>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e008      	b.n	800d2dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d2ca:	79fb      	ldrb	r3, [r7, #7]
 800d2cc:	4a08      	ldr	r2, [pc, #32]	; (800d2f0 <memp_malloc+0x48>)
 800d2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff ff9c 	bl	800d210 <do_memp_malloc_pool>
 800d2d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d2da:	68fb      	ldr	r3, [r7, #12]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08019320 	.word	0x08019320
 800d2e8:	080193b0 	.word	0x080193b0
 800d2ec:	08019374 	.word	0x08019374
 800d2f0:	0801bb60 	.word	0x0801bb60

0800d2f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d006      	beq.n	800d316 <do_memp_free_pool+0x22>
 800d308:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <do_memp_free_pool+0x40>)
 800d30a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d30e:	490a      	ldr	r1, [pc, #40]	; (800d338 <do_memp_free_pool+0x44>)
 800d310:	480a      	ldr	r0, [pc, #40]	; (800d33c <do_memp_free_pool+0x48>)
 800d312:	f00a ff5b 	bl	80181cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d32c:	bf00      	nop
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	08019320 	.word	0x08019320
 800d338:	080193d0 	.word	0x080193d0
 800d33c:	08019374 	.word	0x08019374

0800d340 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <memp_free_pool+0x1e>
 800d350:	4b0a      	ldr	r3, [pc, #40]	; (800d37c <memp_free_pool+0x3c>)
 800d352:	f240 1295 	movw	r2, #405	; 0x195
 800d356:	490a      	ldr	r1, [pc, #40]	; (800d380 <memp_free_pool+0x40>)
 800d358:	480a      	ldr	r0, [pc, #40]	; (800d384 <memp_free_pool+0x44>)
 800d35a:	f00a ff37 	bl	80181cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d007      	beq.n	800d374 <memp_free_pool+0x34>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d004      	beq.n	800d374 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ffc1 	bl	800d2f4 <do_memp_free_pool>
 800d372:	e000      	b.n	800d376 <memp_free_pool+0x36>
    return;
 800d374:	bf00      	nop
}
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	08019320 	.word	0x08019320
 800d380:	0801939c 	.word	0x0801939c
 800d384:	08019374 	.word	0x08019374

0800d388 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	6039      	str	r1, [r7, #0]
 800d392:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	2b08      	cmp	r3, #8
 800d398:	d907      	bls.n	800d3aa <memp_free+0x22>
 800d39a:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <memp_free+0x44>)
 800d39c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d3a0:	490b      	ldr	r1, [pc, #44]	; (800d3d0 <memp_free+0x48>)
 800d3a2:	480c      	ldr	r0, [pc, #48]	; (800d3d4 <memp_free+0x4c>)
 800d3a4:	f00a ff12 	bl	80181cc <iprintf>
 800d3a8:	e00c      	b.n	800d3c4 <memp_free+0x3c>

  if (mem == NULL) {
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d008      	beq.n	800d3c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d3b0:	79fb      	ldrb	r3, [r7, #7]
 800d3b2:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <memp_free+0x50>)
 800d3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff ff9a 	bl	800d2f4 <do_memp_free_pool>
 800d3c0:	e000      	b.n	800d3c4 <memp_free+0x3c>
    return;
 800d3c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	08019320 	.word	0x08019320
 800d3d0:	080193f0 	.word	0x080193f0
 800d3d4:	08019374 	.word	0x08019374
 800d3d8:	0801bb60 	.word	0x0801bb60

0800d3dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d3e0:	bf00      	nop
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
	...

0800d3ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d108      	bne.n	800d412 <netif_add+0x26>
 800d400:	4b57      	ldr	r3, [pc, #348]	; (800d560 <netif_add+0x174>)
 800d402:	f240 1227 	movw	r2, #295	; 0x127
 800d406:	4957      	ldr	r1, [pc, #348]	; (800d564 <netif_add+0x178>)
 800d408:	4857      	ldr	r0, [pc, #348]	; (800d568 <netif_add+0x17c>)
 800d40a:	f00a fedf 	bl	80181cc <iprintf>
 800d40e:	2300      	movs	r3, #0
 800d410:	e0a2      	b.n	800d558 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	2b00      	cmp	r3, #0
 800d416:	d108      	bne.n	800d42a <netif_add+0x3e>
 800d418:	4b51      	ldr	r3, [pc, #324]	; (800d560 <netif_add+0x174>)
 800d41a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d41e:	4953      	ldr	r1, [pc, #332]	; (800d56c <netif_add+0x180>)
 800d420:	4851      	ldr	r0, [pc, #324]	; (800d568 <netif_add+0x17c>)
 800d422:	f00a fed3 	bl	80181cc <iprintf>
 800d426:	2300      	movs	r3, #0
 800d428:	e096      	b.n	800d558 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d430:	4b4f      	ldr	r3, [pc, #316]	; (800d570 <netif_add+0x184>)
 800d432:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d43a:	4b4d      	ldr	r3, [pc, #308]	; (800d570 <netif_add+0x184>)
 800d43c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d444:	4b4a      	ldr	r3, [pc, #296]	; (800d570 <netif_add+0x184>)
 800d446:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4a45      	ldr	r2, [pc, #276]	; (800d574 <netif_add+0x188>)
 800d45e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2200      	movs	r2, #0
 800d464:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6a3a      	ldr	r2, [r7, #32]
 800d478:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d47a:	4b3f      	ldr	r3, [pc, #252]	; (800d578 <netif_add+0x18c>)
 800d47c:	781a      	ldrb	r2, [r3, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d488:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 f913 	bl	800d6bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	4798      	blx	r3
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <netif_add+0xba>
    return NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e058      	b.n	800d558 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4ac:	2bff      	cmp	r3, #255	; 0xff
 800d4ae:	d103      	bne.n	800d4b8 <netif_add+0xcc>
        netif->num = 0;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4bc:	4b2f      	ldr	r3, [pc, #188]	; (800d57c <netif_add+0x190>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e02b      	b.n	800d51c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d106      	bne.n	800d4da <netif_add+0xee>
 800d4cc:	4b24      	ldr	r3, [pc, #144]	; (800d560 <netif_add+0x174>)
 800d4ce:	f240 128b 	movw	r2, #395	; 0x18b
 800d4d2:	492b      	ldr	r1, [pc, #172]	; (800d580 <netif_add+0x194>)
 800d4d4:	4824      	ldr	r0, [pc, #144]	; (800d568 <netif_add+0x17c>)
 800d4d6:	f00a fe79 	bl	80181cc <iprintf>
        num_netifs++;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2bff      	cmp	r3, #255	; 0xff
 800d4e4:	dd06      	ble.n	800d4f4 <netif_add+0x108>
 800d4e6:	4b1e      	ldr	r3, [pc, #120]	; (800d560 <netif_add+0x174>)
 800d4e8:	f240 128d 	movw	r2, #397	; 0x18d
 800d4ec:	4925      	ldr	r1, [pc, #148]	; (800d584 <netif_add+0x198>)
 800d4ee:	481e      	ldr	r0, [pc, #120]	; (800d568 <netif_add+0x17c>)
 800d4f0:	f00a fe6c 	bl	80181cc <iprintf>
        if (netif2->num == netif->num) {
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d500:	429a      	cmp	r2, r3
 800d502:	d108      	bne.n	800d516 <netif_add+0x12a>
          netif->num++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d50a:	3301      	adds	r3, #1
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d514:	e005      	b.n	800d522 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	617b      	str	r3, [r7, #20]
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1d0      	bne.n	800d4c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1be      	bne.n	800d4a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d52e:	2bfe      	cmp	r3, #254	; 0xfe
 800d530:	d103      	bne.n	800d53a <netif_add+0x14e>
    netif_num = 0;
 800d532:	4b11      	ldr	r3, [pc, #68]	; (800d578 <netif_add+0x18c>)
 800d534:	2200      	movs	r2, #0
 800d536:	701a      	strb	r2, [r3, #0]
 800d538:	e006      	b.n	800d548 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d540:	3301      	adds	r3, #1
 800d542:	b2da      	uxtb	r2, r3
 800d544:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <netif_add+0x18c>)
 800d546:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d548:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <netif_add+0x190>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d550:	4a0a      	ldr	r2, [pc, #40]	; (800d57c <netif_add+0x190>)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d556:	68fb      	ldr	r3, [r7, #12]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801940c 	.word	0x0801940c
 800d564:	080194a0 	.word	0x080194a0
 800d568:	0801945c 	.word	0x0801945c
 800d56c:	080194bc 	.word	0x080194bc
 800d570:	0801bbc4 	.word	0x0801bbc4
 800d574:	0800d997 	.word	0x0800d997
 800d578:	2000813c 	.word	0x2000813c
 800d57c:	20008134 	.word	0x20008134
 800d580:	080194e0 	.word	0x080194e0
 800d584:	080194f4 	.word	0x080194f4

0800d588 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f002 fd51 	bl	801003c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f007 fa8b 	bl	8014ab8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <netif_do_set_ipaddr+0x20>
 800d5be:	4b1d      	ldr	r3, [pc, #116]	; (800d634 <netif_do_set_ipaddr+0x88>)
 800d5c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d5c4:	491c      	ldr	r1, [pc, #112]	; (800d638 <netif_do_set_ipaddr+0x8c>)
 800d5c6:	481d      	ldr	r0, [pc, #116]	; (800d63c <netif_do_set_ipaddr+0x90>)
 800d5c8:	f00a fe00 	bl	80181cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <netif_do_set_ipaddr+0x34>
 800d5d2:	4b18      	ldr	r3, [pc, #96]	; (800d634 <netif_do_set_ipaddr+0x88>)
 800d5d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d5d8:	4917      	ldr	r1, [pc, #92]	; (800d638 <netif_do_set_ipaddr+0x8c>)
 800d5da:	4818      	ldr	r0, [pc, #96]	; (800d63c <netif_do_set_ipaddr+0x90>)
 800d5dc:	f00a fdf6 	bl	80181cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d01c      	beq.n	800d628 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d5fe:	f107 0314 	add.w	r3, r7, #20
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ffbf 	bl	800d588 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <netif_do_set_ipaddr+0x6a>
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	e000      	b.n	800d618 <netif_do_set_ipaddr+0x6c>
 800d616:	2300      	movs	r3, #0
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d61c:	2101      	movs	r1, #1
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 f8d2 	bl	800d7c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d624:	2301      	movs	r3, #1
 800d626:	e000      	b.n	800d62a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3718      	adds	r7, #24
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	0801940c 	.word	0x0801940c
 800d638:	08019524 	.word	0x08019524
 800d63c:	0801945c 	.word	0x0801945c

0800d640 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	3308      	adds	r3, #8
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d00a      	beq.n	800d670 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <netif_do_set_netmask+0x26>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	e000      	b.n	800d668 <netif_do_set_netmask+0x28>
 800d666:	2300      	movs	r3, #0
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d66c:	2301      	movs	r3, #1
 800d66e:	e000      	b.n	800d672 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	330c      	adds	r3, #12
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	429a      	cmp	r2, r3
 800d696:	d00a      	beq.n	800d6ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <netif_do_set_gw+0x26>
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	e000      	b.n	800d6a6 <netif_do_set_gw+0x28>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d6d8:	4b1c      	ldr	r3, [pc, #112]	; (800d74c <netif_set_addr+0x90>)
 800d6da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d6e2:	4b1a      	ldr	r3, [pc, #104]	; (800d74c <netif_set_addr+0x90>)
 800d6e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d6ec:	4b17      	ldr	r3, [pc, #92]	; (800d74c <netif_set_addr+0x90>)
 800d6ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <netif_set_addr+0x42>
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <netif_set_addr+0x46>
 800d6fe:	2301      	movs	r3, #1
 800d700:	e000      	b.n	800d704 <netif_set_addr+0x48>
 800d702:	2300      	movs	r3, #0
 800d704:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d70c:	f107 0310 	add.w	r3, r7, #16
 800d710:	461a      	mov	r2, r3
 800d712:	68b9      	ldr	r1, [r7, #8]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f7ff ff49 	bl	800d5ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d71a:	69fa      	ldr	r2, [r7, #28]
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff ff8e 	bl	800d640 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d724:	69ba      	ldr	r2, [r7, #24]
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff ffa8 	bl	800d67e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d106      	bne.n	800d742 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d734:	f107 0310 	add.w	r3, r7, #16
 800d738:	461a      	mov	r2, r3
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff ff35 	bl	800d5ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d742:	bf00      	nop
 800d744:	3720      	adds	r7, #32
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0801bbc4 	.word	0x0801bbc4

0800d750 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d758:	4a04      	ldr	r2, [pc, #16]	; (800d76c <netif_set_default+0x1c>)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d75e:	bf00      	nop
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	20008138 	.word	0x20008138

0800d770 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d107      	bne.n	800d78e <netif_set_up+0x1e>
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <netif_set_up+0x4c>)
 800d780:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d784:	490e      	ldr	r1, [pc, #56]	; (800d7c0 <netif_set_up+0x50>)
 800d786:	480f      	ldr	r0, [pc, #60]	; (800d7c4 <netif_set_up+0x54>)
 800d788:	f00a fd20 	bl	80181cc <iprintf>
 800d78c:	e013      	b.n	800d7b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10c      	bne.n	800d7b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7a2:	f043 0301 	orr.w	r3, r3, #1
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d7ae:	2103      	movs	r1, #3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 f809 	bl	800d7c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	0801940c 	.word	0x0801940c
 800d7c0:	08019594 	.word	0x08019594
 800d7c4:	0801945c 	.word	0x0801945c

0800d7c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d106      	bne.n	800d7e8 <netif_issue_reports+0x20>
 800d7da:	4b18      	ldr	r3, [pc, #96]	; (800d83c <netif_issue_reports+0x74>)
 800d7dc:	f240 326d 	movw	r2, #877	; 0x36d
 800d7e0:	4917      	ldr	r1, [pc, #92]	; (800d840 <netif_issue_reports+0x78>)
 800d7e2:	4818      	ldr	r0, [pc, #96]	; (800d844 <netif_issue_reports+0x7c>)
 800d7e4:	f00a fcf2 	bl	80181cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7ee:	f003 0304 	and.w	r3, r3, #4
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d01e      	beq.n	800d834 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d800:	2b00      	cmp	r3, #0
 800d802:	d017      	beq.n	800d834 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d013      	beq.n	800d836 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3304      	adds	r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00e      	beq.n	800d836 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d81e:	f003 0308 	and.w	r3, r3, #8
 800d822:	2b00      	cmp	r3, #0
 800d824:	d007      	beq.n	800d836 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3304      	adds	r3, #4
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f008 f8ad 	bl	801598c <etharp_request>
 800d832:	e000      	b.n	800d836 <netif_issue_reports+0x6e>
    return;
 800d834:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	0801940c 	.word	0x0801940c
 800d840:	080195b0 	.word	0x080195b0
 800d844:	0801945c 	.word	0x0801945c

0800d848 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d107      	bne.n	800d866 <netif_set_down+0x1e>
 800d856:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <netif_set_down+0x58>)
 800d858:	f240 329b 	movw	r2, #923	; 0x39b
 800d85c:	4911      	ldr	r1, [pc, #68]	; (800d8a4 <netif_set_down+0x5c>)
 800d85e:	4812      	ldr	r0, [pc, #72]	; (800d8a8 <netif_set_down+0x60>)
 800d860:	f00a fcb4 	bl	80181cc <iprintf>
 800d864:	e019      	b.n	800d89a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b00      	cmp	r3, #0
 800d872:	d012      	beq.n	800d89a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d87a:	f023 0301 	bic.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d88c:	f003 0308 	and.w	r3, r3, #8
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f007 fc37 	bl	8015108 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	0801940c 	.word	0x0801940c
 800d8a4:	080195d4 	.word	0x080195d4
 800d8a8:	0801945c 	.word	0x0801945c

0800d8ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d107      	bne.n	800d8ca <netif_set_link_up+0x1e>
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <netif_set_link_up+0x5c>)
 800d8bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d8c0:	4912      	ldr	r1, [pc, #72]	; (800d90c <netif_set_link_up+0x60>)
 800d8c2:	4813      	ldr	r0, [pc, #76]	; (800d910 <netif_set_link_up+0x64>)
 800d8c4:	f00a fc82 	bl	80181cc <iprintf>
 800d8c8:	e01b      	b.n	800d902 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8d0:	f003 0304 	and.w	r3, r3, #4
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d114      	bne.n	800d902 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8de:	f043 0304 	orr.w	r3, r3, #4
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d8ea:	2103      	movs	r1, #3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ff6b 	bl	800d7c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <netif_set_link_up+0x56>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	0801940c 	.word	0x0801940c
 800d90c:	080195f4 	.word	0x080195f4
 800d910:	0801945c 	.word	0x0801945c

0800d914 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d107      	bne.n	800d932 <netif_set_link_down+0x1e>
 800d922:	4b11      	ldr	r3, [pc, #68]	; (800d968 <netif_set_link_down+0x54>)
 800d924:	f240 4206 	movw	r2, #1030	; 0x406
 800d928:	4910      	ldr	r1, [pc, #64]	; (800d96c <netif_set_link_down+0x58>)
 800d92a:	4811      	ldr	r0, [pc, #68]	; (800d970 <netif_set_link_down+0x5c>)
 800d92c:	f00a fc4e 	bl	80181cc <iprintf>
 800d930:	e017      	b.n	800d962 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d010      	beq.n	800d962 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d946:	f023 0304 	bic.w	r3, r3, #4
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <netif_set_link_down+0x4e>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	69db      	ldr	r3, [r3, #28]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	0801940c 	.word	0x0801940c
 800d96c:	08019618 	.word	0x08019618
 800d970:	0801945c 	.word	0x0801945c

0800d974 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	61da      	str	r2, [r3, #28]
  }
}
 800d98a:	bf00      	nop
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d996:	b480      	push	{r7}
 800d998:	b085      	sub	sp, #20
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d9a2:	f06f 030b 	mvn.w	r3, #11
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
	...

0800d9b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d013      	beq.n	800d9ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d9c4:	4b0d      	ldr	r3, [pc, #52]	; (800d9fc <netif_get_by_index+0x48>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e00c      	b.n	800d9e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	79fa      	ldrb	r2, [r7, #7]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d101      	bne.n	800d9e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	e006      	b.n	800d9ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	60fb      	str	r3, [r7, #12]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1ef      	bne.n	800d9cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3714      	adds	r7, #20
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	20008134 	.word	0x20008134

0800da00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800da06:	4b0c      	ldr	r3, [pc, #48]	; (800da38 <pbuf_free_ooseq+0x38>)
 800da08:	2200      	movs	r2, #0
 800da0a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da0c:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <pbuf_free_ooseq+0x3c>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	607b      	str	r3, [r7, #4]
 800da12:	e00a      	b.n	800da2a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f002 fb4b 	bl	80100b8 <tcp_free_ooseq>
      return;
 800da22:	e005      	b.n	800da30 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1f1      	bne.n	800da14 <pbuf_free_ooseq+0x14>
    }
  }
}
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	2000813d 	.word	0x2000813d
 800da3c:	2000814c 	.word	0x2000814c

0800da40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800da44:	4b03      	ldr	r3, [pc, #12]	; (800da54 <pbuf_pool_is_empty+0x14>)
 800da46:	2201      	movs	r2, #1
 800da48:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800da4a:	bf00      	nop
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	2000813d 	.word	0x2000813d

0800da58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4611      	mov	r1, r2
 800da64:	461a      	mov	r2, r3
 800da66:	460b      	mov	r3, r1
 800da68:	80fb      	strh	r3, [r7, #6]
 800da6a:	4613      	mov	r3, r2
 800da6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	88fa      	ldrh	r2, [r7, #6]
 800da7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	88ba      	ldrh	r2, [r7, #4]
 800da84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800da86:	8b3b      	ldrh	r3, [r7, #24]
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	7f3a      	ldrb	r2, [r7, #28]
 800da92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2201      	movs	r2, #1
 800da98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	73da      	strb	r2, [r3, #15]
}
 800daa0:	bf00      	nop
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08c      	sub	sp, #48	; 0x30
 800dab0:	af02      	add	r7, sp, #8
 800dab2:	4603      	mov	r3, r0
 800dab4:	71fb      	strb	r3, [r7, #7]
 800dab6:	460b      	mov	r3, r1
 800dab8:	80bb      	strh	r3, [r7, #4]
 800daba:	4613      	mov	r3, r2
 800dabc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dac2:	887b      	ldrh	r3, [r7, #2]
 800dac4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dac8:	d07f      	beq.n	800dbca <pbuf_alloc+0x11e>
 800daca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dace:	f300 80c8 	bgt.w	800dc62 <pbuf_alloc+0x1b6>
 800dad2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dad6:	d010      	beq.n	800dafa <pbuf_alloc+0x4e>
 800dad8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dadc:	f300 80c1 	bgt.w	800dc62 <pbuf_alloc+0x1b6>
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d002      	beq.n	800daea <pbuf_alloc+0x3e>
 800dae4:	2b41      	cmp	r3, #65	; 0x41
 800dae6:	f040 80bc 	bne.w	800dc62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800daea:	887a      	ldrh	r2, [r7, #2]
 800daec:	88bb      	ldrh	r3, [r7, #4]
 800daee:	4619      	mov	r1, r3
 800daf0:	2000      	movs	r0, #0
 800daf2:	f000 f8d1 	bl	800dc98 <pbuf_alloc_reference>
 800daf6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800daf8:	e0bd      	b.n	800dc76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dafa:	2300      	movs	r3, #0
 800dafc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dafe:	2300      	movs	r3, #0
 800db00:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800db02:	88bb      	ldrh	r3, [r7, #4]
 800db04:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800db06:	2008      	movs	r0, #8
 800db08:	f7ff fbce 	bl	800d2a8 <memp_malloc>
 800db0c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d109      	bne.n	800db28 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800db14:	f7ff ff94 	bl	800da40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <pbuf_alloc+0x78>
            pbuf_free(p);
 800db1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db20:	f000 faa8 	bl	800e074 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	e0a7      	b.n	800dc78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800db28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db2a:	3303      	adds	r3, #3
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	f023 0303 	bic.w	r3, r3, #3
 800db32:	b29b      	uxth	r3, r3
 800db34:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800db38:	b29b      	uxth	r3, r3
 800db3a:	8b7a      	ldrh	r2, [r7, #26]
 800db3c:	4293      	cmp	r3, r2
 800db3e:	bf28      	it	cs
 800db40:	4613      	movcs	r3, r2
 800db42:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800db44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db46:	3310      	adds	r3, #16
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4413      	add	r3, r2
 800db4c:	3303      	adds	r3, #3
 800db4e:	f023 0303 	bic.w	r3, r3, #3
 800db52:	4618      	mov	r0, r3
 800db54:	89f9      	ldrh	r1, [r7, #14]
 800db56:	8b7a      	ldrh	r2, [r7, #26]
 800db58:	2300      	movs	r3, #0
 800db5a:	9301      	str	r3, [sp, #4]
 800db5c:	887b      	ldrh	r3, [r7, #2]
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	460b      	mov	r3, r1
 800db62:	4601      	mov	r1, r0
 800db64:	6938      	ldr	r0, [r7, #16]
 800db66:	f7ff ff77 	bl	800da58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d006      	beq.n	800db84 <pbuf_alloc+0xd8>
 800db76:	4b42      	ldr	r3, [pc, #264]	; (800dc80 <pbuf_alloc+0x1d4>)
 800db78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db7c:	4941      	ldr	r1, [pc, #260]	; (800dc84 <pbuf_alloc+0x1d8>)
 800db7e:	4842      	ldr	r0, [pc, #264]	; (800dc88 <pbuf_alloc+0x1dc>)
 800db80:	f00a fb24 	bl	80181cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800db84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db86:	3303      	adds	r3, #3
 800db88:	f023 0303 	bic.w	r3, r3, #3
 800db8c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800db90:	d106      	bne.n	800dba0 <pbuf_alloc+0xf4>
 800db92:	4b3b      	ldr	r3, [pc, #236]	; (800dc80 <pbuf_alloc+0x1d4>)
 800db94:	f44f 7281 	mov.w	r2, #258	; 0x102
 800db98:	493c      	ldr	r1, [pc, #240]	; (800dc8c <pbuf_alloc+0x1e0>)
 800db9a:	483b      	ldr	r0, [pc, #236]	; (800dc88 <pbuf_alloc+0x1dc>)
 800db9c:	f00a fb16 	bl	80181cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d102      	bne.n	800dbac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbaa:	e002      	b.n	800dbb2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dbb6:	8b7a      	ldrh	r2, [r7, #26]
 800dbb8:	89fb      	ldrh	r3, [r7, #14]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dbc2:	8b7b      	ldrh	r3, [r7, #26]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d19e      	bne.n	800db06 <pbuf_alloc+0x5a>
      break;
 800dbc8:	e055      	b.n	800dc76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dbca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbcc:	3303      	adds	r3, #3
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	f023 0303 	bic.w	r3, r3, #3
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	88bb      	ldrh	r3, [r7, #4]
 800dbd8:	3303      	adds	r3, #3
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	f023 0303 	bic.w	r3, r3, #3
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dbe6:	8b3b      	ldrh	r3, [r7, #24]
 800dbe8:	3310      	adds	r3, #16
 800dbea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dbec:	8b3a      	ldrh	r2, [r7, #24]
 800dbee:	88bb      	ldrh	r3, [r7, #4]
 800dbf0:	3303      	adds	r3, #3
 800dbf2:	f023 0303 	bic.w	r3, r3, #3
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d306      	bcc.n	800dc08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dbfa:	8afa      	ldrh	r2, [r7, #22]
 800dbfc:	88bb      	ldrh	r3, [r7, #4]
 800dbfe:	3303      	adds	r3, #3
 800dc00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d201      	bcs.n	800dc0c <pbuf_alloc+0x160>
        return NULL;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	e035      	b.n	800dc78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dc0c:	8afb      	ldrh	r3, [r7, #22]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff f9ba 	bl	800cf88 <mem_malloc>
 800dc14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <pbuf_alloc+0x174>
        return NULL;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e02b      	b.n	800dc78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dc20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc22:	3310      	adds	r3, #16
 800dc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc26:	4413      	add	r3, r2
 800dc28:	3303      	adds	r3, #3
 800dc2a:	f023 0303 	bic.w	r3, r3, #3
 800dc2e:	4618      	mov	r0, r3
 800dc30:	88b9      	ldrh	r1, [r7, #4]
 800dc32:	88ba      	ldrh	r2, [r7, #4]
 800dc34:	2300      	movs	r3, #0
 800dc36:	9301      	str	r3, [sp, #4]
 800dc38:	887b      	ldrh	r3, [r7, #2]
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4601      	mov	r1, r0
 800dc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc42:	f7ff ff09 	bl	800da58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d010      	beq.n	800dc74 <pbuf_alloc+0x1c8>
 800dc52:	4b0b      	ldr	r3, [pc, #44]	; (800dc80 <pbuf_alloc+0x1d4>)
 800dc54:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dc58:	490d      	ldr	r1, [pc, #52]	; (800dc90 <pbuf_alloc+0x1e4>)
 800dc5a:	480b      	ldr	r0, [pc, #44]	; (800dc88 <pbuf_alloc+0x1dc>)
 800dc5c:	f00a fab6 	bl	80181cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dc60:	e008      	b.n	800dc74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dc62:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <pbuf_alloc+0x1d4>)
 800dc64:	f240 1227 	movw	r2, #295	; 0x127
 800dc68:	490a      	ldr	r1, [pc, #40]	; (800dc94 <pbuf_alloc+0x1e8>)
 800dc6a:	4807      	ldr	r0, [pc, #28]	; (800dc88 <pbuf_alloc+0x1dc>)
 800dc6c:	f00a faae 	bl	80181cc <iprintf>
      return NULL;
 800dc70:	2300      	movs	r3, #0
 800dc72:	e001      	b.n	800dc78 <pbuf_alloc+0x1cc>
      break;
 800dc74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3728      	adds	r7, #40	; 0x28
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0801963c 	.word	0x0801963c
 800dc84:	0801966c 	.word	0x0801966c
 800dc88:	0801969c 	.word	0x0801969c
 800dc8c:	080196c4 	.word	0x080196c4
 800dc90:	080196f8 	.word	0x080196f8
 800dc94:	08019724 	.word	0x08019724

0800dc98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af02      	add	r7, sp, #8
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	807b      	strh	r3, [r7, #2]
 800dca4:	4613      	mov	r3, r2
 800dca6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dca8:	883b      	ldrh	r3, [r7, #0]
 800dcaa:	2b41      	cmp	r3, #65	; 0x41
 800dcac:	d009      	beq.n	800dcc2 <pbuf_alloc_reference+0x2a>
 800dcae:	883b      	ldrh	r3, [r7, #0]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d006      	beq.n	800dcc2 <pbuf_alloc_reference+0x2a>
 800dcb4:	4b0f      	ldr	r3, [pc, #60]	; (800dcf4 <pbuf_alloc_reference+0x5c>)
 800dcb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dcba:	490f      	ldr	r1, [pc, #60]	; (800dcf8 <pbuf_alloc_reference+0x60>)
 800dcbc:	480f      	ldr	r0, [pc, #60]	; (800dcfc <pbuf_alloc_reference+0x64>)
 800dcbe:	f00a fa85 	bl	80181cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dcc2:	2007      	movs	r0, #7
 800dcc4:	f7ff faf0 	bl	800d2a8 <memp_malloc>
 800dcc8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e00b      	b.n	800dcec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dcd4:	8879      	ldrh	r1, [r7, #2]
 800dcd6:	887a      	ldrh	r2, [r7, #2]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	883b      	ldrh	r3, [r7, #0]
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	460b      	mov	r3, r1
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff feb7 	bl	800da58 <pbuf_init_alloced_pbuf>
  return p;
 800dcea:	68fb      	ldr	r3, [r7, #12]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	0801963c 	.word	0x0801963c
 800dcf8:	08019740 	.word	0x08019740
 800dcfc:	0801969c 	.word	0x0801969c

0800dd00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	607b      	str	r3, [r7, #4]
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73fb      	strb	r3, [r7, #15]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	81bb      	strh	r3, [r7, #12]
 800dd10:	4613      	mov	r3, r2
 800dd12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dd18:	8a7b      	ldrh	r3, [r7, #18]
 800dd1a:	3303      	adds	r3, #3
 800dd1c:	f023 0203 	bic.w	r2, r3, #3
 800dd20:	89bb      	ldrh	r3, [r7, #12]
 800dd22:	441a      	add	r2, r3
 800dd24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d901      	bls.n	800dd2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e018      	b.n	800dd60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dd2e:	6a3b      	ldr	r3, [r7, #32]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dd34:	8a7b      	ldrh	r3, [r7, #18]
 800dd36:	3303      	adds	r3, #3
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	6a3a      	ldr	r2, [r7, #32]
 800dd3e:	4413      	add	r3, r2
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	e001      	b.n	800dd48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dd44:	2300      	movs	r3, #0
 800dd46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	89b9      	ldrh	r1, [r7, #12]
 800dd4c:	89ba      	ldrh	r2, [r7, #12]
 800dd4e:	2302      	movs	r3, #2
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	897b      	ldrh	r3, [r7, #10]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	460b      	mov	r3, r1
 800dd58:	6979      	ldr	r1, [r7, #20]
 800dd5a:	f7ff fe7d 	bl	800da58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dd5e:	687b      	ldr	r3, [r7, #4]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <pbuf_realloc+0x20>
 800dd7a:	4b3a      	ldr	r3, [pc, #232]	; (800de64 <pbuf_realloc+0xfc>)
 800dd7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dd80:	4939      	ldr	r1, [pc, #228]	; (800de68 <pbuf_realloc+0x100>)
 800dd82:	483a      	ldr	r0, [pc, #232]	; (800de6c <pbuf_realloc+0x104>)
 800dd84:	f00a fa22 	bl	80181cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	891b      	ldrh	r3, [r3, #8]
 800dd8c:	887a      	ldrh	r2, [r7, #2]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d263      	bcs.n	800de5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	891a      	ldrh	r2, [r3, #8]
 800dd96:	887b      	ldrh	r3, [r7, #2]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dd9c:	887b      	ldrh	r3, [r7, #2]
 800dd9e:	817b      	strh	r3, [r7, #10]
  q = p;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dda4:	e018      	b.n	800ddd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	895b      	ldrh	r3, [r3, #10]
 800ddaa:	897a      	ldrh	r2, [r7, #10]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	891a      	ldrh	r2, [r3, #8]
 800ddb4:	893b      	ldrh	r3, [r7, #8]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d106      	bne.n	800ddd8 <pbuf_realloc+0x70>
 800ddca:	4b26      	ldr	r3, [pc, #152]	; (800de64 <pbuf_realloc+0xfc>)
 800ddcc:	f240 12af 	movw	r2, #431	; 0x1af
 800ddd0:	4927      	ldr	r1, [pc, #156]	; (800de70 <pbuf_realloc+0x108>)
 800ddd2:	4826      	ldr	r0, [pc, #152]	; (800de6c <pbuf_realloc+0x104>)
 800ddd4:	f00a f9fa 	bl	80181cc <iprintf>
  while (rem_len > q->len) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	897a      	ldrh	r2, [r7, #10]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d8e1      	bhi.n	800dda6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	7b1b      	ldrb	r3, [r3, #12]
 800dde6:	f003 030f 	and.w	r3, r3, #15
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d121      	bne.n	800de32 <pbuf_realloc+0xca>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	895b      	ldrh	r3, [r3, #10]
 800ddf2:	897a      	ldrh	r2, [r7, #10]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d01c      	beq.n	800de32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	7b5b      	ldrb	r3, [r3, #13]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d116      	bne.n	800de32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	897b      	ldrh	r3, [r7, #10]
 800de10:	4413      	add	r3, r2
 800de12:	b29b      	uxth	r3, r3
 800de14:	4619      	mov	r1, r3
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7fe ffba 	bl	800cd90 <mem_trim>
 800de1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d106      	bne.n	800de32 <pbuf_realloc+0xca>
 800de24:	4b0f      	ldr	r3, [pc, #60]	; (800de64 <pbuf_realloc+0xfc>)
 800de26:	f240 12bd 	movw	r2, #445	; 0x1bd
 800de2a:	4912      	ldr	r1, [pc, #72]	; (800de74 <pbuf_realloc+0x10c>)
 800de2c:	480f      	ldr	r0, [pc, #60]	; (800de6c <pbuf_realloc+0x104>)
 800de2e:	f00a f9cd 	bl	80181cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	897a      	ldrh	r2, [r7, #10]
 800de36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	895a      	ldrh	r2, [r3, #10]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f911 	bl	800e074 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	e000      	b.n	800de5c <pbuf_realloc+0xf4>
    return;
 800de5a:	bf00      	nop

}
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	0801963c 	.word	0x0801963c
 800de68:	08019754 	.word	0x08019754
 800de6c:	0801969c 	.word	0x0801969c
 800de70:	0801976c 	.word	0x0801976c
 800de74:	08019784 	.word	0x08019784

0800de78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	4613      	mov	r3, r2
 800de84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d106      	bne.n	800de9a <pbuf_add_header_impl+0x22>
 800de8c:	4b2b      	ldr	r3, [pc, #172]	; (800df3c <pbuf_add_header_impl+0xc4>)
 800de8e:	f240 12df 	movw	r2, #479	; 0x1df
 800de92:	492b      	ldr	r1, [pc, #172]	; (800df40 <pbuf_add_header_impl+0xc8>)
 800de94:	482b      	ldr	r0, [pc, #172]	; (800df44 <pbuf_add_header_impl+0xcc>)
 800de96:	f00a f999 	bl	80181cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <pbuf_add_header_impl+0x30>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea6:	d301      	bcc.n	800deac <pbuf_add_header_impl+0x34>
    return 1;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e043      	b.n	800df34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <pbuf_add_header_impl+0x3e>
    return 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e03e      	b.n	800df34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	891a      	ldrh	r2, [r3, #8]
 800debe:	8a7b      	ldrh	r3, [r7, #18]
 800dec0:	4413      	add	r3, r2
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	8a7a      	ldrh	r2, [r7, #18]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d901      	bls.n	800dece <pbuf_add_header_impl+0x56>
    return 1;
 800deca:	2301      	movs	r3, #1
 800decc:	e032      	b.n	800df34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	7b1b      	ldrb	r3, [r3, #12]
 800ded2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ded4:	8a3b      	ldrh	r3, [r7, #16]
 800ded6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00c      	beq.n	800def8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	425b      	negs	r3, r3
 800dee6:	4413      	add	r3, r2
 800dee8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3310      	adds	r3, #16
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	429a      	cmp	r2, r3
 800def2:	d20d      	bcs.n	800df10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800def4:	2301      	movs	r3, #1
 800def6:	e01d      	b.n	800df34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	425b      	negs	r3, r3
 800df06:	4413      	add	r3, r2
 800df08:	617b      	str	r3, [r7, #20]
 800df0a:	e001      	b.n	800df10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800df0c:	2301      	movs	r3, #1
 800df0e:	e011      	b.n	800df34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	895a      	ldrh	r2, [r3, #10]
 800df1a:	8a7b      	ldrh	r3, [r7, #18]
 800df1c:	4413      	add	r3, r2
 800df1e:	b29a      	uxth	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	891a      	ldrh	r2, [r3, #8]
 800df28:	8a7b      	ldrh	r3, [r7, #18]
 800df2a:	4413      	add	r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	811a      	strh	r2, [r3, #8]


  return 0;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	0801963c 	.word	0x0801963c
 800df40:	080197a0 	.word	0x080197a0
 800df44:	0801969c 	.word	0x0801969c

0800df48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800df52:	2200      	movs	r2, #0
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7ff ff8e 	bl	800de78 <pbuf_add_header_impl>
 800df5c:	4603      	mov	r3, r0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d106      	bne.n	800df86 <pbuf_remove_header+0x1e>
 800df78:	4b20      	ldr	r3, [pc, #128]	; (800dffc <pbuf_remove_header+0x94>)
 800df7a:	f240 224b 	movw	r2, #587	; 0x24b
 800df7e:	4920      	ldr	r1, [pc, #128]	; (800e000 <pbuf_remove_header+0x98>)
 800df80:	4820      	ldr	r0, [pc, #128]	; (800e004 <pbuf_remove_header+0x9c>)
 800df82:	f00a f923 	bl	80181cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d003      	beq.n	800df94 <pbuf_remove_header+0x2c>
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df92:	d301      	bcc.n	800df98 <pbuf_remove_header+0x30>
    return 1;
 800df94:	2301      	movs	r3, #1
 800df96:	e02c      	b.n	800dff2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <pbuf_remove_header+0x3a>
    return 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e027      	b.n	800dff2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	895b      	ldrh	r3, [r3, #10]
 800dfaa:	89fa      	ldrh	r2, [r7, #14]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d908      	bls.n	800dfc2 <pbuf_remove_header+0x5a>
 800dfb0:	4b12      	ldr	r3, [pc, #72]	; (800dffc <pbuf_remove_header+0x94>)
 800dfb2:	f240 2255 	movw	r2, #597	; 0x255
 800dfb6:	4914      	ldr	r1, [pc, #80]	; (800e008 <pbuf_remove_header+0xa0>)
 800dfb8:	4812      	ldr	r0, [pc, #72]	; (800e004 <pbuf_remove_header+0x9c>)
 800dfba:	f00a f907 	bl	80181cc <iprintf>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e017      	b.n	800dff2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	441a      	add	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	895a      	ldrh	r2, [r3, #10]
 800dfd8:	89fb      	ldrh	r3, [r7, #14]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	891a      	ldrh	r2, [r3, #8]
 800dfe6:	89fb      	ldrh	r3, [r7, #14]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	0801963c 	.word	0x0801963c
 800e000:	080197a0 	.word	0x080197a0
 800e004:	0801969c 	.word	0x0801969c
 800e008:	080197ac 	.word	0x080197ac

0800e00c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	807b      	strh	r3, [r7, #2]
 800e018:	4613      	mov	r3, r2
 800e01a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e01c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e020:	2b00      	cmp	r3, #0
 800e022:	da08      	bge.n	800e036 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e028:	425b      	negs	r3, r3
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff ff9b 	bl	800df68 <pbuf_remove_header>
 800e032:	4603      	mov	r3, r0
 800e034:	e007      	b.n	800e046 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e03a:	787a      	ldrb	r2, [r7, #1]
 800e03c:	4619      	mov	r1, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff ff1a 	bl	800de78 <pbuf_add_header_impl>
 800e044:	4603      	mov	r3, r0
  }
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
 800e056:	460b      	mov	r3, r1
 800e058:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e05a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e05e:	2201      	movs	r2, #1
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff ffd2 	bl	800e00c <pbuf_header_impl>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10b      	bne.n	800e09a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d106      	bne.n	800e096 <pbuf_free+0x22>
 800e088:	4b38      	ldr	r3, [pc, #224]	; (800e16c <pbuf_free+0xf8>)
 800e08a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e08e:	4938      	ldr	r1, [pc, #224]	; (800e170 <pbuf_free+0xfc>)
 800e090:	4838      	ldr	r0, [pc, #224]	; (800e174 <pbuf_free+0x100>)
 800e092:	f00a f89b 	bl	80181cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e096:	2300      	movs	r3, #0
 800e098:	e063      	b.n	800e162 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e09e:	e05c      	b.n	800e15a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	7b9b      	ldrb	r3, [r3, #14]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d106      	bne.n	800e0b6 <pbuf_free+0x42>
 800e0a8:	4b30      	ldr	r3, [pc, #192]	; (800e16c <pbuf_free+0xf8>)
 800e0aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e0ae:	4932      	ldr	r1, [pc, #200]	; (800e178 <pbuf_free+0x104>)
 800e0b0:	4830      	ldr	r0, [pc, #192]	; (800e174 <pbuf_free+0x100>)
 800e0b2:	f00a f88b 	bl	80181cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7b9b      	ldrb	r3, [r3, #14]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	739a      	strb	r2, [r3, #14]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7b9b      	ldrb	r3, [r3, #14]
 800e0c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e0c8:	7dbb      	ldrb	r3, [r7, #22]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d143      	bne.n	800e156 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7b1b      	ldrb	r3, [r3, #12]
 800e0d8:	f003 030f 	and.w	r3, r3, #15
 800e0dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	7b5b      	ldrb	r3, [r3, #13]
 800e0e2:	f003 0302 	and.w	r3, r3, #2
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d011      	beq.n	800e10e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <pbuf_free+0x90>
 800e0f6:	4b1d      	ldr	r3, [pc, #116]	; (800e16c <pbuf_free+0xf8>)
 800e0f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e0fc:	491f      	ldr	r1, [pc, #124]	; (800e17c <pbuf_free+0x108>)
 800e0fe:	481d      	ldr	r0, [pc, #116]	; (800e174 <pbuf_free+0x100>)
 800e100:	f00a f864 	bl	80181cc <iprintf>
        pc->custom_free_function(p);
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	4798      	blx	r3
 800e10c:	e01d      	b.n	800e14a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	2b02      	cmp	r3, #2
 800e112:	d104      	bne.n	800e11e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e114:	6879      	ldr	r1, [r7, #4]
 800e116:	2008      	movs	r0, #8
 800e118:	f7ff f936 	bl	800d388 <memp_free>
 800e11c:	e015      	b.n	800e14a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d104      	bne.n	800e12e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	2007      	movs	r0, #7
 800e128:	f7ff f92e 	bl	800d388 <memp_free>
 800e12c:	e00d      	b.n	800e14a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d103      	bne.n	800e13c <pbuf_free+0xc8>
          mem_free(p);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7fe fdc1 	bl	800ccbc <mem_free>
 800e13a:	e006      	b.n	800e14a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e13c:	4b0b      	ldr	r3, [pc, #44]	; (800e16c <pbuf_free+0xf8>)
 800e13e:	f240 320f 	movw	r2, #783	; 0x30f
 800e142:	490f      	ldr	r1, [pc, #60]	; (800e180 <pbuf_free+0x10c>)
 800e144:	480b      	ldr	r0, [pc, #44]	; (800e174 <pbuf_free+0x100>)
 800e146:	f00a f841 	bl	80181cc <iprintf>
        }
      }
      count++;
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	3301      	adds	r3, #1
 800e14e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	607b      	str	r3, [r7, #4]
 800e154:	e001      	b.n	800e15a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d19f      	bne.n	800e0a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e160:	7dfb      	ldrb	r3, [r7, #23]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	0801963c 	.word	0x0801963c
 800e170:	080197a0 	.word	0x080197a0
 800e174:	0801969c 	.word	0x0801969c
 800e178:	080197cc 	.word	0x080197cc
 800e17c:	080197e4 	.word	0x080197e4
 800e180:	08019808 	.word	0x08019808

0800e184 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e190:	e005      	b.n	800e19e <pbuf_clen+0x1a>
    ++len;
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	3301      	adds	r3, #1
 800e196:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1f6      	bne.n	800e192 <pbuf_clen+0xe>
  }
  return len;
 800e1a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d010      	beq.n	800e1e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	7b9b      	ldrb	r3, [r3, #14]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7b9b      	ldrb	r3, [r3, #14]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <pbuf_ref+0x30>
 800e1d6:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <pbuf_ref+0x38>)
 800e1d8:	f240 3242 	movw	r2, #834	; 0x342
 800e1dc:	4904      	ldr	r1, [pc, #16]	; (800e1f0 <pbuf_ref+0x3c>)
 800e1de:	4805      	ldr	r0, [pc, #20]	; (800e1f4 <pbuf_ref+0x40>)
 800e1e0:	f009 fff4 	bl	80181cc <iprintf>
  }
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	0801963c 	.word	0x0801963c
 800e1f0:	0801981c 	.word	0x0801981c
 800e1f4:	0801969c 	.word	0x0801969c

0800e1f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <pbuf_cat+0x16>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d107      	bne.n	800e21e <pbuf_cat+0x26>
 800e20e:	4b20      	ldr	r3, [pc, #128]	; (800e290 <pbuf_cat+0x98>)
 800e210:	f240 3259 	movw	r2, #857	; 0x359
 800e214:	491f      	ldr	r1, [pc, #124]	; (800e294 <pbuf_cat+0x9c>)
 800e216:	4820      	ldr	r0, [pc, #128]	; (800e298 <pbuf_cat+0xa0>)
 800e218:	f009 ffd8 	bl	80181cc <iprintf>
 800e21c:	e034      	b.n	800e288 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	e00a      	b.n	800e23a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	891a      	ldrh	r2, [r3, #8]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	891b      	ldrh	r3, [r3, #8]
 800e22c:	4413      	add	r3, r2
 800e22e:	b29a      	uxth	r2, r3
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60fb      	str	r3, [r7, #12]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1f0      	bne.n	800e224 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	891a      	ldrh	r2, [r3, #8]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d006      	beq.n	800e25c <pbuf_cat+0x64>
 800e24e:	4b10      	ldr	r3, [pc, #64]	; (800e290 <pbuf_cat+0x98>)
 800e250:	f240 3262 	movw	r2, #866	; 0x362
 800e254:	4911      	ldr	r1, [pc, #68]	; (800e29c <pbuf_cat+0xa4>)
 800e256:	4810      	ldr	r0, [pc, #64]	; (800e298 <pbuf_cat+0xa0>)
 800e258:	f009 ffb8 	bl	80181cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <pbuf_cat+0x7a>
 800e264:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <pbuf_cat+0x98>)
 800e266:	f240 3263 	movw	r2, #867	; 0x363
 800e26a:	490d      	ldr	r1, [pc, #52]	; (800e2a0 <pbuf_cat+0xa8>)
 800e26c:	480a      	ldr	r0, [pc, #40]	; (800e298 <pbuf_cat+0xa0>)
 800e26e:	f009 ffad 	bl	80181cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	891a      	ldrh	r2, [r3, #8]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	4413      	add	r3, r2
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	0801963c 	.word	0x0801963c
 800e294:	08019830 	.word	0x08019830
 800e298:	0801969c 	.word	0x0801969c
 800e29c:	08019868 	.word	0x08019868
 800e2a0:	08019898 	.word	0x08019898

0800e2a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	617b      	str	r3, [r7, #20]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d008      	beq.n	800e2ce <pbuf_copy+0x2a>
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <pbuf_copy+0x2a>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	891a      	ldrh	r2, [r3, #8]
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	891b      	ldrh	r3, [r3, #8]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d209      	bcs.n	800e2e2 <pbuf_copy+0x3e>
 800e2ce:	4b57      	ldr	r3, [pc, #348]	; (800e42c <pbuf_copy+0x188>)
 800e2d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e2d4:	4956      	ldr	r1, [pc, #344]	; (800e430 <pbuf_copy+0x18c>)
 800e2d6:	4857      	ldr	r0, [pc, #348]	; (800e434 <pbuf_copy+0x190>)
 800e2d8:	f009 ff78 	bl	80181cc <iprintf>
 800e2dc:	f06f 030f 	mvn.w	r3, #15
 800e2e0:	e09f      	b.n	800e422 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	895b      	ldrh	r3, [r3, #10]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	1ad2      	subs	r2, r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	895b      	ldrh	r3, [r3, #10]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	1acb      	subs	r3, r1, r3
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d306      	bcc.n	800e308 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	895b      	ldrh	r3, [r3, #10]
 800e2fe:	461a      	mov	r2, r3
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	e005      	b.n	800e314 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	895b      	ldrh	r3, [r3, #10]
 800e30c:	461a      	mov	r2, r3
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	18d0      	adds	r0, r2, r3
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	4413      	add	r3, r2
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	4619      	mov	r1, r3
 800e328:	f00a f843 	bl	80183b2 <memcpy>
    offset_to += len;
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	4413      	add	r3, r2
 800e332:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	4413      	add	r3, r2
 800e33a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	895b      	ldrh	r3, [r3, #10]
 800e340:	461a      	mov	r2, r3
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	4293      	cmp	r3, r2
 800e346:	d906      	bls.n	800e356 <pbuf_copy+0xb2>
 800e348:	4b38      	ldr	r3, [pc, #224]	; (800e42c <pbuf_copy+0x188>)
 800e34a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e34e:	493a      	ldr	r1, [pc, #232]	; (800e438 <pbuf_copy+0x194>)
 800e350:	4838      	ldr	r0, [pc, #224]	; (800e434 <pbuf_copy+0x190>)
 800e352:	f009 ff3b 	bl	80181cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	895b      	ldrh	r3, [r3, #10]
 800e35a:	461a      	mov	r2, r3
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	4293      	cmp	r3, r2
 800e360:	d906      	bls.n	800e370 <pbuf_copy+0xcc>
 800e362:	4b32      	ldr	r3, [pc, #200]	; (800e42c <pbuf_copy+0x188>)
 800e364:	f240 32da 	movw	r2, #986	; 0x3da
 800e368:	4934      	ldr	r1, [pc, #208]	; (800e43c <pbuf_copy+0x198>)
 800e36a:	4832      	ldr	r0, [pc, #200]	; (800e434 <pbuf_copy+0x190>)
 800e36c:	f009 ff2e 	bl	80181cc <iprintf>
    if (offset_from >= p_from->len) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	895b      	ldrh	r3, [r3, #10]
 800e374:	461a      	mov	r2, r3
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	4293      	cmp	r3, r2
 800e37a:	d304      	bcc.n	800e386 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	895b      	ldrh	r3, [r3, #10]
 800e38a:	461a      	mov	r2, r3
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	4293      	cmp	r3, r2
 800e390:	d114      	bne.n	800e3bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10c      	bne.n	800e3bc <pbuf_copy+0x118>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d009      	beq.n	800e3bc <pbuf_copy+0x118>
 800e3a8:	4b20      	ldr	r3, [pc, #128]	; (800e42c <pbuf_copy+0x188>)
 800e3aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e3ae:	4924      	ldr	r1, [pc, #144]	; (800e440 <pbuf_copy+0x19c>)
 800e3b0:	4820      	ldr	r0, [pc, #128]	; (800e434 <pbuf_copy+0x190>)
 800e3b2:	f009 ff0b 	bl	80181cc <iprintf>
 800e3b6:	f06f 030f 	mvn.w	r3, #15
 800e3ba:	e032      	b.n	800e422 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d013      	beq.n	800e3ea <pbuf_copy+0x146>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	895a      	ldrh	r2, [r3, #10]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	891b      	ldrh	r3, [r3, #8]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d10d      	bne.n	800e3ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d009      	beq.n	800e3ea <pbuf_copy+0x146>
 800e3d6:	4b15      	ldr	r3, [pc, #84]	; (800e42c <pbuf_copy+0x188>)
 800e3d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e3dc:	4919      	ldr	r1, [pc, #100]	; (800e444 <pbuf_copy+0x1a0>)
 800e3de:	4815      	ldr	r0, [pc, #84]	; (800e434 <pbuf_copy+0x190>)
 800e3e0:	f009 fef4 	bl	80181cc <iprintf>
 800e3e4:	f06f 0305 	mvn.w	r3, #5
 800e3e8:	e01b      	b.n	800e422 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d013      	beq.n	800e418 <pbuf_copy+0x174>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	895a      	ldrh	r2, [r3, #10]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	891b      	ldrh	r3, [r3, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d10d      	bne.n	800e418 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d009      	beq.n	800e418 <pbuf_copy+0x174>
 800e404:	4b09      	ldr	r3, [pc, #36]	; (800e42c <pbuf_copy+0x188>)
 800e406:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e40a:	490e      	ldr	r1, [pc, #56]	; (800e444 <pbuf_copy+0x1a0>)
 800e40c:	4809      	ldr	r0, [pc, #36]	; (800e434 <pbuf_copy+0x190>)
 800e40e:	f009 fedd 	bl	80181cc <iprintf>
 800e412:	f06f 0305 	mvn.w	r3, #5
 800e416:	e004      	b.n	800e422 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f47f af61 	bne.w	800e2e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	0801963c 	.word	0x0801963c
 800e430:	080198e4 	.word	0x080198e4
 800e434:	0801969c 	.word	0x0801969c
 800e438:	08019914 	.word	0x08019914
 800e43c:	0801992c 	.word	0x0801992c
 800e440:	08019948 	.word	0x08019948
 800e444:	08019958 	.word	0x08019958

0800e448 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	4611      	mov	r1, r2
 800e454:	461a      	mov	r2, r3
 800e456:	460b      	mov	r3, r1
 800e458:	80fb      	strh	r3, [r7, #6]
 800e45a:	4613      	mov	r3, r2
 800e45c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d108      	bne.n	800e47e <pbuf_copy_partial+0x36>
 800e46c:	4b2b      	ldr	r3, [pc, #172]	; (800e51c <pbuf_copy_partial+0xd4>)
 800e46e:	f240 420a 	movw	r2, #1034	; 0x40a
 800e472:	492b      	ldr	r1, [pc, #172]	; (800e520 <pbuf_copy_partial+0xd8>)
 800e474:	482b      	ldr	r0, [pc, #172]	; (800e524 <pbuf_copy_partial+0xdc>)
 800e476:	f009 fea9 	bl	80181cc <iprintf>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e04a      	b.n	800e514 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d108      	bne.n	800e496 <pbuf_copy_partial+0x4e>
 800e484:	4b25      	ldr	r3, [pc, #148]	; (800e51c <pbuf_copy_partial+0xd4>)
 800e486:	f240 420b 	movw	r2, #1035	; 0x40b
 800e48a:	4927      	ldr	r1, [pc, #156]	; (800e528 <pbuf_copy_partial+0xe0>)
 800e48c:	4825      	ldr	r0, [pc, #148]	; (800e524 <pbuf_copy_partial+0xdc>)
 800e48e:	f009 fe9d 	bl	80181cc <iprintf>
 800e492:	2300      	movs	r3, #0
 800e494:	e03e      	b.n	800e514 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	e034      	b.n	800e506 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e49c:	88bb      	ldrh	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <pbuf_copy_partial+0x70>
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	895b      	ldrh	r3, [r3, #10]
 800e4a6:	88ba      	ldrh	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d305      	bcc.n	800e4b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	88ba      	ldrh	r2, [r7, #4]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	80bb      	strh	r3, [r7, #4]
 800e4b6:	e023      	b.n	800e500 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	895a      	ldrh	r2, [r3, #10]
 800e4bc:	88bb      	ldrh	r3, [r7, #4]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e4c2:	8b3a      	ldrh	r2, [r7, #24]
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d901      	bls.n	800e4ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e4ce:	8b7b      	ldrh	r3, [r7, #26]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	18d0      	adds	r0, r2, r3
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	88bb      	ldrh	r3, [r7, #4]
 800e4da:	4413      	add	r3, r2
 800e4dc:	8b3a      	ldrh	r2, [r7, #24]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	f009 ff67 	bl	80183b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e4e4:	8afa      	ldrh	r2, [r7, #22]
 800e4e6:	8b3b      	ldrh	r3, [r7, #24]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e4ec:	8b7a      	ldrh	r2, [r7, #26]
 800e4ee:	8b3b      	ldrh	r3, [r7, #24]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	8b3b      	ldrh	r3, [r7, #24]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	61fb      	str	r3, [r7, #28]
 800e506:	88fb      	ldrh	r3, [r7, #6]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <pbuf_copy_partial+0xca>
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1c4      	bne.n	800e49c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e512:	8afb      	ldrh	r3, [r7, #22]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	0801963c 	.word	0x0801963c
 800e520:	08019984 	.word	0x08019984
 800e524:	0801969c 	.word	0x0801969c
 800e528:	080199a4 	.word	0x080199a4

0800e52c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	4603      	mov	r3, r0
 800e534:	603a      	str	r2, [r7, #0]
 800e536:	71fb      	strb	r3, [r7, #7]
 800e538:	460b      	mov	r3, r1
 800e53a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	8919      	ldrh	r1, [r3, #8]
 800e540:	88ba      	ldrh	r2, [r7, #4]
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff fab1 	bl	800daac <pbuf_alloc>
 800e54a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <pbuf_clone+0x2a>
    return NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	e011      	b.n	800e57a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7ff fea3 	bl	800e2a4 <pbuf_copy>
 800e55e:	4603      	mov	r3, r0
 800e560:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e562:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d006      	beq.n	800e578 <pbuf_clone+0x4c>
 800e56a:	4b06      	ldr	r3, [pc, #24]	; (800e584 <pbuf_clone+0x58>)
 800e56c:	f240 5224 	movw	r2, #1316	; 0x524
 800e570:	4905      	ldr	r1, [pc, #20]	; (800e588 <pbuf_clone+0x5c>)
 800e572:	4806      	ldr	r0, [pc, #24]	; (800e58c <pbuf_clone+0x60>)
 800e574:	f009 fe2a 	bl	80181cc <iprintf>
  return q;
 800e578:	68fb      	ldr	r3, [r7, #12]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	0801963c 	.word	0x0801963c
 800e588:	08019ab0 	.word	0x08019ab0
 800e58c:	0801969c 	.word	0x0801969c

0800e590 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e594:	f009 fc8e 	bl	8017eb4 <rand>
 800e598:	4603      	mov	r3, r0
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	4b01      	ldr	r3, [pc, #4]	; (800e5b0 <tcp_init+0x20>)
 800e5aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20000140 	.word	0x20000140

0800e5b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d105      	bne.n	800e5d0 <tcp_free+0x1c>
 800e5c4:	4b06      	ldr	r3, [pc, #24]	; (800e5e0 <tcp_free+0x2c>)
 800e5c6:	22d4      	movs	r2, #212	; 0xd4
 800e5c8:	4906      	ldr	r1, [pc, #24]	; (800e5e4 <tcp_free+0x30>)
 800e5ca:	4807      	ldr	r0, [pc, #28]	; (800e5e8 <tcp_free+0x34>)
 800e5cc:	f009 fdfe 	bl	80181cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	f7fe fed8 	bl	800d388 <memp_free>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	08019b3c 	.word	0x08019b3c
 800e5e4:	08019b6c 	.word	0x08019b6c
 800e5e8:	08019b80 	.word	0x08019b80

0800e5ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7d1b      	ldrb	r3, [r3, #20]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d105      	bne.n	800e608 <tcp_free_listen+0x1c>
 800e5fc:	4b06      	ldr	r3, [pc, #24]	; (800e618 <tcp_free_listen+0x2c>)
 800e5fe:	22df      	movs	r2, #223	; 0xdf
 800e600:	4906      	ldr	r1, [pc, #24]	; (800e61c <tcp_free_listen+0x30>)
 800e602:	4807      	ldr	r0, [pc, #28]	; (800e620 <tcp_free_listen+0x34>)
 800e604:	f009 fde2 	bl	80181cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	2002      	movs	r0, #2
 800e60c:	f7fe febc 	bl	800d388 <memp_free>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	08019b3c 	.word	0x08019b3c
 800e61c:	08019ba8 	.word	0x08019ba8
 800e620:	08019b80 	.word	0x08019b80

0800e624 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e628:	f001 f800 	bl	800f62c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e62c:	4b07      	ldr	r3, [pc, #28]	; (800e64c <tcp_tmr+0x28>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	3301      	adds	r3, #1
 800e632:	b2da      	uxtb	r2, r3
 800e634:	4b05      	ldr	r3, [pc, #20]	; (800e64c <tcp_tmr+0x28>)
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	4b04      	ldr	r3, [pc, #16]	; (800e64c <tcp_tmr+0x28>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 0301 	and.w	r3, r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e644:	f000 fcb2 	bl	800efac <tcp_slowtmr>
  }
}
 800e648:	bf00      	nop
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20008155 	.word	0x20008155

0800e650 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <tcp_remove_listener+0x1c>
 800e660:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <tcp_remove_listener+0x48>)
 800e662:	22ff      	movs	r2, #255	; 0xff
 800e664:	490d      	ldr	r1, [pc, #52]	; (800e69c <tcp_remove_listener+0x4c>)
 800e666:	480e      	ldr	r0, [pc, #56]	; (800e6a0 <tcp_remove_listener+0x50>)
 800e668:	f009 fdb0 	bl	80181cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	e00a      	b.n	800e688 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d102      	bne.n	800e682 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1f1      	bne.n	800e672 <tcp_remove_listener+0x22>
    }
  }
}
 800e68e:	bf00      	nop
 800e690:	bf00      	nop
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	08019b3c 	.word	0x08019b3c
 800e69c:	08019bc4 	.word	0x08019bc4
 800e6a0:	08019b80 	.word	0x08019b80

0800e6a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <tcp_listen_closed+0x1c>
 800e6b2:	4b14      	ldr	r3, [pc, #80]	; (800e704 <tcp_listen_closed+0x60>)
 800e6b4:	f240 1211 	movw	r2, #273	; 0x111
 800e6b8:	4913      	ldr	r1, [pc, #76]	; (800e708 <tcp_listen_closed+0x64>)
 800e6ba:	4814      	ldr	r0, [pc, #80]	; (800e70c <tcp_listen_closed+0x68>)
 800e6bc:	f009 fd86 	bl	80181cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7d1b      	ldrb	r3, [r3, #20]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d006      	beq.n	800e6d6 <tcp_listen_closed+0x32>
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <tcp_listen_closed+0x60>)
 800e6ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e6ce:	4910      	ldr	r1, [pc, #64]	; (800e710 <tcp_listen_closed+0x6c>)
 800e6d0:	480e      	ldr	r0, [pc, #56]	; (800e70c <tcp_listen_closed+0x68>)
 800e6d2:	f009 fd7b 	bl	80181cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e00b      	b.n	800e6f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e6dc:	4a0d      	ldr	r2, [pc, #52]	; (800e714 <tcp_listen_closed+0x70>)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ffb1 	bl	800e650 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d9f0      	bls.n	800e6dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	08019b3c 	.word	0x08019b3c
 800e708:	08019bec 	.word	0x08019bec
 800e70c:	08019b80 	.word	0x08019b80
 800e710:	08019bf8 	.word	0x08019bf8
 800e714:	0801bb9c 	.word	0x0801bb9c

0800e718 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e718:	b5b0      	push	{r4, r5, r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af04      	add	r7, sp, #16
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_close_shutdown+0x20>
 800e72a:	4b63      	ldr	r3, [pc, #396]	; (800e8b8 <tcp_close_shutdown+0x1a0>)
 800e72c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e730:	4962      	ldr	r1, [pc, #392]	; (800e8bc <tcp_close_shutdown+0x1a4>)
 800e732:	4863      	ldr	r0, [pc, #396]	; (800e8c0 <tcp_close_shutdown+0x1a8>)
 800e734:	f009 fd4a 	bl	80181cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e738:	78fb      	ldrb	r3, [r7, #3]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d066      	beq.n	800e80c <tcp_close_shutdown+0xf4>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	7d1b      	ldrb	r3, [r3, #20]
 800e742:	2b04      	cmp	r3, #4
 800e744:	d003      	beq.n	800e74e <tcp_close_shutdown+0x36>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7d1b      	ldrb	r3, [r3, #20]
 800e74a:	2b07      	cmp	r3, #7
 800e74c:	d15e      	bne.n	800e80c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e752:	2b00      	cmp	r3, #0
 800e754:	d104      	bne.n	800e760 <tcp_close_shutdown+0x48>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e75e:	d055      	beq.n	800e80c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <tcp_close_shutdown+0x62>
 800e76c:	4b52      	ldr	r3, [pc, #328]	; (800e8b8 <tcp_close_shutdown+0x1a0>)
 800e76e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e772:	4954      	ldr	r1, [pc, #336]	; (800e8c4 <tcp_close_shutdown+0x1ac>)
 800e774:	4852      	ldr	r0, [pc, #328]	; (800e8c0 <tcp_close_shutdown+0x1a8>)
 800e776:	f009 fd29 	bl	80181cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e782:	687d      	ldr	r5, [r7, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3304      	adds	r3, #4
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	8ad2      	ldrh	r2, [r2, #22]
 800e78c:	6879      	ldr	r1, [r7, #4]
 800e78e:	8b09      	ldrh	r1, [r1, #24]
 800e790:	9102      	str	r1, [sp, #8]
 800e792:	9201      	str	r2, [sp, #4]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	462b      	mov	r3, r5
 800e798:	4622      	mov	r2, r4
 800e79a:	4601      	mov	r1, r0
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f005 fcf7 	bl	8014190 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f001 fad4 	bl	800fd50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e7a8:	4b47      	ldr	r3, [pc, #284]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d105      	bne.n	800e7be <tcp_close_shutdown+0xa6>
 800e7b2:	4b45      	ldr	r3, [pc, #276]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	4a43      	ldr	r2, [pc, #268]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	e013      	b.n	800e7e6 <tcp_close_shutdown+0xce>
 800e7be:	4b42      	ldr	r3, [pc, #264]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e00c      	b.n	800e7e0 <tcp_close_shutdown+0xc8>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d104      	bne.n	800e7da <tcp_close_shutdown+0xc2>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	60da      	str	r2, [r3, #12]
 800e7d8:	e005      	b.n	800e7e6 <tcp_close_shutdown+0xce>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1ef      	bne.n	800e7c6 <tcp_close_shutdown+0xae>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	60da      	str	r2, [r3, #12]
 800e7ec:	4b37      	ldr	r3, [pc, #220]	; (800e8cc <tcp_close_shutdown+0x1b4>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e7f2:	4b37      	ldr	r3, [pc, #220]	; (800e8d0 <tcp_close_shutdown+0x1b8>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d102      	bne.n	800e802 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e7fc:	f003 ff6c 	bl	80126d8 <tcp_trigger_input_pcb_close>
 800e800:	e002      	b.n	800e808 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fed6 	bl	800e5b4 <tcp_free>
      }
      return ERR_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	e050      	b.n	800e8ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b02      	cmp	r3, #2
 800e812:	d03b      	beq.n	800e88c <tcp_close_shutdown+0x174>
 800e814:	2b02      	cmp	r3, #2
 800e816:	dc44      	bgt.n	800e8a2 <tcp_close_shutdown+0x18a>
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <tcp_close_shutdown+0x10a>
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d02a      	beq.n	800e876 <tcp_close_shutdown+0x15e>
 800e820:	e03f      	b.n	800e8a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	8adb      	ldrh	r3, [r3, #22]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d021      	beq.n	800e86e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e82a:	4b2a      	ldr	r3, [pc, #168]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	429a      	cmp	r2, r3
 800e832:	d105      	bne.n	800e840 <tcp_close_shutdown+0x128>
 800e834:	4b27      	ldr	r3, [pc, #156]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	4a26      	ldr	r2, [pc, #152]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	e013      	b.n	800e868 <tcp_close_shutdown+0x150>
 800e840:	4b24      	ldr	r3, [pc, #144]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	60bb      	str	r3, [r7, #8]
 800e846:	e00c      	b.n	800e862 <tcp_close_shutdown+0x14a>
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d104      	bne.n	800e85c <tcp_close_shutdown+0x144>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	60da      	str	r2, [r3, #12]
 800e85a:	e005      	b.n	800e868 <tcp_close_shutdown+0x150>
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	60bb      	str	r3, [r7, #8]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1ef      	bne.n	800e848 <tcp_close_shutdown+0x130>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fea0 	bl	800e5b4 <tcp_free>
      break;
 800e874:	e01a      	b.n	800e8ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff14 	bl	800e6a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4816      	ldr	r0, [pc, #88]	; (800e8d8 <tcp_close_shutdown+0x1c0>)
 800e880:	f001 fab6 	bl	800fdf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff feb1 	bl	800e5ec <tcp_free_listen>
      break;
 800e88a:	e00f      	b.n	800e8ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e88c:	6879      	ldr	r1, [r7, #4]
 800e88e:	480e      	ldr	r0, [pc, #56]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e890:	f001 faae 	bl	800fdf0 <tcp_pcb_remove>
 800e894:	4b0d      	ldr	r3, [pc, #52]	; (800e8cc <tcp_close_shutdown+0x1b4>)
 800e896:	2201      	movs	r2, #1
 800e898:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff fe8a 	bl	800e5b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e8a0:	e004      	b.n	800e8ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f81a 	bl	800e8dc <tcp_close_shutdown_fin>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	e000      	b.n	800e8ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	08019b3c 	.word	0x08019b3c
 800e8bc:	08019c10 	.word	0x08019c10
 800e8c0:	08019b80 	.word	0x08019b80
 800e8c4:	08019c30 	.word	0x08019c30
 800e8c8:	2000814c 	.word	0x2000814c
 800e8cc:	20008154 	.word	0x20008154
 800e8d0:	2000818c 	.word	0x2000818c
 800e8d4:	20008144 	.word	0x20008144
 800e8d8:	20008148 	.word	0x20008148

0800e8dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <tcp_close_shutdown_fin+0x1c>
 800e8ea:	4b2e      	ldr	r3, [pc, #184]	; (800e9a4 <tcp_close_shutdown_fin+0xc8>)
 800e8ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e8f0:	492d      	ldr	r1, [pc, #180]	; (800e9a8 <tcp_close_shutdown_fin+0xcc>)
 800e8f2:	482e      	ldr	r0, [pc, #184]	; (800e9ac <tcp_close_shutdown_fin+0xd0>)
 800e8f4:	f009 fc6a 	bl	80181cc <iprintf>

  switch (pcb->state) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	7d1b      	ldrb	r3, [r3, #20]
 800e8fc:	2b07      	cmp	r3, #7
 800e8fe:	d020      	beq.n	800e942 <tcp_close_shutdown_fin+0x66>
 800e900:	2b07      	cmp	r3, #7
 800e902:	dc2b      	bgt.n	800e95c <tcp_close_shutdown_fin+0x80>
 800e904:	2b03      	cmp	r3, #3
 800e906:	d002      	beq.n	800e90e <tcp_close_shutdown_fin+0x32>
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d00d      	beq.n	800e928 <tcp_close_shutdown_fin+0x4c>
 800e90c:	e026      	b.n	800e95c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f004 fd4c 	bl	80133ac <tcp_send_fin>
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d11f      	bne.n	800e960 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2205      	movs	r2, #5
 800e924:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e926:	e01b      	b.n	800e960 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f004 fd3f 	bl	80133ac <tcp_send_fin>
 800e92e:	4603      	mov	r3, r0
 800e930:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d114      	bne.n	800e964 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2205      	movs	r2, #5
 800e93e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e940:	e010      	b.n	800e964 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f004 fd32 	bl	80133ac <tcp_send_fin>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d109      	bne.n	800e968 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2209      	movs	r2, #9
 800e958:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e95a:	e005      	b.n	800e968 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	e01c      	b.n	800e99a <tcp_close_shutdown_fin+0xbe>
      break;
 800e960:	bf00      	nop
 800e962:	e002      	b.n	800e96a <tcp_close_shutdown_fin+0x8e>
      break;
 800e964:	bf00      	nop
 800e966:	e000      	b.n	800e96a <tcp_close_shutdown_fin+0x8e>
      break;
 800e968:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d103      	bne.n	800e97a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f004 fe58 	bl	8013628 <tcp_output>
 800e978:	e00d      	b.n	800e996 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e982:	d108      	bne.n	800e996 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	8b5b      	ldrh	r3, [r3, #26]
 800e988:	f043 0308 	orr.w	r3, r3, #8
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	e001      	b.n	800e99a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08019b3c 	.word	0x08019b3c
 800e9a8:	08019bec 	.word	0x08019bec
 800e9ac:	08019b80 	.word	0x08019b80

0800e9b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d109      	bne.n	800e9d2 <tcp_close+0x22>
 800e9be:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <tcp_close+0x4c>)
 800e9c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e9c4:	490e      	ldr	r1, [pc, #56]	; (800ea00 <tcp_close+0x50>)
 800e9c6:	480f      	ldr	r0, [pc, #60]	; (800ea04 <tcp_close+0x54>)
 800e9c8:	f009 fc00 	bl	80181cc <iprintf>
 800e9cc:	f06f 030f 	mvn.w	r3, #15
 800e9d0:	e00f      	b.n	800e9f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7d1b      	ldrb	r3, [r3, #20]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d006      	beq.n	800e9e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	8b5b      	ldrh	r3, [r3, #26]
 800e9de:	f043 0310 	orr.w	r3, r3, #16
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff fe94 	bl	800e718 <tcp_close_shutdown>
 800e9f0:	4603      	mov	r3, r0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	08019b3c 	.word	0x08019b3c
 800ea00:	08019c4c 	.word	0x08019c4c
 800ea04:	08019b80 	.word	0x08019b80

0800ea08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08e      	sub	sp, #56	; 0x38
 800ea0c:	af04      	add	r7, sp, #16
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d107      	bne.n	800ea28 <tcp_abandon+0x20>
 800ea18:	4b52      	ldr	r3, [pc, #328]	; (800eb64 <tcp_abandon+0x15c>)
 800ea1a:	f240 223d 	movw	r2, #573	; 0x23d
 800ea1e:	4952      	ldr	r1, [pc, #328]	; (800eb68 <tcp_abandon+0x160>)
 800ea20:	4852      	ldr	r0, [pc, #328]	; (800eb6c <tcp_abandon+0x164>)
 800ea22:	f009 fbd3 	bl	80181cc <iprintf>
 800ea26:	e099      	b.n	800eb5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d106      	bne.n	800ea3e <tcp_abandon+0x36>
 800ea30:	4b4c      	ldr	r3, [pc, #304]	; (800eb64 <tcp_abandon+0x15c>)
 800ea32:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ea36:	494e      	ldr	r1, [pc, #312]	; (800eb70 <tcp_abandon+0x168>)
 800ea38:	484c      	ldr	r0, [pc, #304]	; (800eb6c <tcp_abandon+0x164>)
 800ea3a:	f009 fbc7 	bl	80181cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	7d1b      	ldrb	r3, [r3, #20]
 800ea42:	2b0a      	cmp	r3, #10
 800ea44:	d107      	bne.n	800ea56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	484a      	ldr	r0, [pc, #296]	; (800eb74 <tcp_abandon+0x16c>)
 800ea4a:	f001 f9d1 	bl	800fdf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7ff fdb0 	bl	800e5b4 <tcp_free>
 800ea54:	e082      	b.n	800eb5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d126      	bne.n	800eace <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	8adb      	ldrh	r3, [r3, #22]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d02e      	beq.n	800eae6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ea88:	4b3b      	ldr	r3, [pc, #236]	; (800eb78 <tcp_abandon+0x170>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d105      	bne.n	800ea9e <tcp_abandon+0x96>
 800ea92:	4b39      	ldr	r3, [pc, #228]	; (800eb78 <tcp_abandon+0x170>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	4a37      	ldr	r2, [pc, #220]	; (800eb78 <tcp_abandon+0x170>)
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	e013      	b.n	800eac6 <tcp_abandon+0xbe>
 800ea9e:	4b36      	ldr	r3, [pc, #216]	; (800eb78 <tcp_abandon+0x170>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	61fb      	str	r3, [r7, #28]
 800eaa4:	e00c      	b.n	800eac0 <tcp_abandon+0xb8>
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d104      	bne.n	800eaba <tcp_abandon+0xb2>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68da      	ldr	r2, [r3, #12]
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	60da      	str	r2, [r3, #12]
 800eab8:	e005      	b.n	800eac6 <tcp_abandon+0xbe>
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	61fb      	str	r3, [r7, #28]
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1ef      	bne.n	800eaa6 <tcp_abandon+0x9e>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	60da      	str	r2, [r3, #12]
 800eacc:	e00b      	b.n	800eae6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8adb      	ldrh	r3, [r3, #22]
 800ead6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	4828      	ldr	r0, [pc, #160]	; (800eb7c <tcp_abandon+0x174>)
 800eadc:	f001 f988 	bl	800fdf0 <tcp_pcb_remove>
 800eae0:	4b27      	ldr	r3, [pc, #156]	; (800eb80 <tcp_abandon+0x178>)
 800eae2:	2201      	movs	r2, #1
 800eae4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d004      	beq.n	800eaf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fe7a 	bl	800f7ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d004      	beq.n	800eb0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fe71 	bl	800f7ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d004      	beq.n	800eb1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 fe68 	bl	800f7ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00e      	beq.n	800eb40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800eb22:	6879      	ldr	r1, [r7, #4]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	8b12      	ldrh	r2, [r2, #24]
 800eb2c:	9202      	str	r2, [sp, #8]
 800eb2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eb30:	9201      	str	r2, [sp, #4]
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	460b      	mov	r3, r1
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	69b9      	ldr	r1, [r7, #24]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f005 fb28 	bl	8014190 <tcp_rst>
    }
    last_state = pcb->state;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7d1b      	ldrb	r3, [r3, #20]
 800eb44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff fd34 	bl	800e5b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <tcp_abandon+0x154>
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	f06f 010c 	mvn.w	r1, #12
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	4798      	blx	r3
  }
}
 800eb5c:	3728      	adds	r7, #40	; 0x28
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	08019b3c 	.word	0x08019b3c
 800eb68:	08019c80 	.word	0x08019c80
 800eb6c:	08019b80 	.word	0x08019b80
 800eb70:	08019c9c 	.word	0x08019c9c
 800eb74:	20008150 	.word	0x20008150
 800eb78:	20008144 	.word	0x20008144
 800eb7c:	2000814c 	.word	0x2000814c
 800eb80:	20008154 	.word	0x20008154

0800eb84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7ff ff3a 	bl	800ea08 <tcp_abandon>
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <tcp_update_rcv_ann_wnd+0x1c>
 800ebaa:	4b25      	ldr	r3, [pc, #148]	; (800ec40 <tcp_update_rcv_ann_wnd+0xa4>)
 800ebac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ebb0:	4924      	ldr	r1, [pc, #144]	; (800ec44 <tcp_update_rcv_ann_wnd+0xa8>)
 800ebb2:	4825      	ldr	r0, [pc, #148]	; (800ec48 <tcp_update_rcv_ann_wnd+0xac>)
 800ebb4:	f009 fb0a 	bl	80181cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ebc0:	4413      	add	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ebcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ebd0:	bf28      	it	cs
 800ebd2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800ebd6:	b292      	uxth	r2, r2
 800ebd8:	4413      	add	r3, r2
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db08      	blt.n	800ebf4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	e020      	b.n	800ec36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dd03      	ble.n	800ec0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec08:	e014      	b.n	800ec34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1c:	d306      	bcc.n	800ec2c <tcp_update_rcv_ann_wnd+0x90>
 800ec1e:	4b08      	ldr	r3, [pc, #32]	; (800ec40 <tcp_update_rcv_ann_wnd+0xa4>)
 800ec20:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ec24:	4909      	ldr	r1, [pc, #36]	; (800ec4c <tcp_update_rcv_ann_wnd+0xb0>)
 800ec26:	4808      	ldr	r0, [pc, #32]	; (800ec48 <tcp_update_rcv_ann_wnd+0xac>)
 800ec28:	f009 fad0 	bl	80181cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ec34:	2300      	movs	r3, #0
  }
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	08019b3c 	.word	0x08019b3c
 800ec44:	08019d98 	.word	0x08019d98
 800ec48:	08019b80 	.word	0x08019b80
 800ec4c:	08019dbc 	.word	0x08019dbc

0800ec50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d107      	bne.n	800ec72 <tcp_recved+0x22>
 800ec62:	4b1f      	ldr	r3, [pc, #124]	; (800ece0 <tcp_recved+0x90>)
 800ec64:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ec68:	491e      	ldr	r1, [pc, #120]	; (800ece4 <tcp_recved+0x94>)
 800ec6a:	481f      	ldr	r0, [pc, #124]	; (800ece8 <tcp_recved+0x98>)
 800ec6c:	f009 faae 	bl	80181cc <iprintf>
 800ec70:	e032      	b.n	800ecd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	7d1b      	ldrb	r3, [r3, #20]
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d106      	bne.n	800ec88 <tcp_recved+0x38>
 800ec7a:	4b19      	ldr	r3, [pc, #100]	; (800ece0 <tcp_recved+0x90>)
 800ec7c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ec80:	491a      	ldr	r1, [pc, #104]	; (800ecec <tcp_recved+0x9c>)
 800ec82:	4819      	ldr	r0, [pc, #100]	; (800ece8 <tcp_recved+0x98>)
 800ec84:	f009 faa2 	bl	80181cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec8c:	887b      	ldrh	r3, [r7, #2]
 800ec8e:	4413      	add	r3, r2
 800ec90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec92:	89fb      	ldrh	r3, [r7, #14]
 800ec94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec98:	d804      	bhi.n	800eca4 <tcp_recved+0x54>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec9e:	89fa      	ldrh	r2, [r7, #14]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d204      	bcs.n	800ecae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecaa:	851a      	strh	r2, [r3, #40]	; 0x28
 800ecac:	e002      	b.n	800ecb4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	89fa      	ldrh	r2, [r7, #14]
 800ecb2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7ff ff71 	bl	800eb9c <tcp_update_rcv_ann_wnd>
 800ecba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc2:	d309      	bcc.n	800ecd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	8b5b      	ldrh	r3, [r3, #26]
 800ecc8:	f043 0302 	orr.w	r3, r3, #2
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f004 fca8 	bl	8013628 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	08019b3c 	.word	0x08019b3c
 800ece4:	08019dd8 	.word	0x08019dd8
 800ece8:	08019b80 	.word	0x08019b80
 800ecec:	08019df0 	.word	0x08019df0

0800ecf0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ecfa:	4b1e      	ldr	r3, [pc, #120]	; (800ed74 <tcp_new_port+0x84>)
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	4b1c      	ldr	r3, [pc, #112]	; (800ed74 <tcp_new_port+0x84>)
 800ed04:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ed06:	4b1b      	ldr	r3, [pc, #108]	; (800ed74 <tcp_new_port+0x84>)
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d103      	bne.n	800ed1a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ed12:	4b18      	ldr	r3, [pc, #96]	; (800ed74 <tcp_new_port+0x84>)
 800ed14:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ed18:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	71fb      	strb	r3, [r7, #7]
 800ed1e:	e01e      	b.n	800ed5e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	4a15      	ldr	r2, [pc, #84]	; (800ed78 <tcp_new_port+0x88>)
 800ed24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	e011      	b.n	800ed52 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	8ada      	ldrh	r2, [r3, #22]
 800ed32:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <tcp_new_port+0x84>)
 800ed34:	881b      	ldrh	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d108      	bne.n	800ed4c <tcp_new_port+0x5c>
        n++;
 800ed3a:	88bb      	ldrh	r3, [r7, #4]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ed40:	88bb      	ldrh	r3, [r7, #4]
 800ed42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed46:	d3d8      	bcc.n	800ecfa <tcp_new_port+0xa>
          return 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	e00d      	b.n	800ed68 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	603b      	str	r3, [r7, #0]
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1ea      	bne.n	800ed2e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	71fb      	strb	r3, [r7, #7]
 800ed5e:	79fb      	ldrb	r3, [r7, #7]
 800ed60:	2b03      	cmp	r3, #3
 800ed62:	d9dd      	bls.n	800ed20 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ed64:	4b03      	ldr	r3, [pc, #12]	; (800ed74 <tcp_new_port+0x84>)
 800ed66:	881b      	ldrh	r3, [r3, #0]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	20000140 	.word	0x20000140
 800ed78:	0801bb9c 	.word	0x0801bb9c

0800ed7c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d109      	bne.n	800edaa <tcp_connect+0x2e>
 800ed96:	4b7d      	ldr	r3, [pc, #500]	; (800ef8c <tcp_connect+0x210>)
 800ed98:	f240 4235 	movw	r2, #1077	; 0x435
 800ed9c:	497c      	ldr	r1, [pc, #496]	; (800ef90 <tcp_connect+0x214>)
 800ed9e:	487d      	ldr	r0, [pc, #500]	; (800ef94 <tcp_connect+0x218>)
 800eda0:	f009 fa14 	bl	80181cc <iprintf>
 800eda4:	f06f 030f 	mvn.w	r3, #15
 800eda8:	e0ec      	b.n	800ef84 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d109      	bne.n	800edc4 <tcp_connect+0x48>
 800edb0:	4b76      	ldr	r3, [pc, #472]	; (800ef8c <tcp_connect+0x210>)
 800edb2:	f240 4236 	movw	r2, #1078	; 0x436
 800edb6:	4978      	ldr	r1, [pc, #480]	; (800ef98 <tcp_connect+0x21c>)
 800edb8:	4876      	ldr	r0, [pc, #472]	; (800ef94 <tcp_connect+0x218>)
 800edba:	f009 fa07 	bl	80181cc <iprintf>
 800edbe:	f06f 030f 	mvn.w	r3, #15
 800edc2:	e0df      	b.n	800ef84 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	7d1b      	ldrb	r3, [r3, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d009      	beq.n	800ede0 <tcp_connect+0x64>
 800edcc:	4b6f      	ldr	r3, [pc, #444]	; (800ef8c <tcp_connect+0x210>)
 800edce:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800edd2:	4972      	ldr	r1, [pc, #456]	; (800ef9c <tcp_connect+0x220>)
 800edd4:	486f      	ldr	r0, [pc, #444]	; (800ef94 <tcp_connect+0x218>)
 800edd6:	f009 f9f9 	bl	80181cc <iprintf>
 800edda:	f06f 0309 	mvn.w	r3, #9
 800edde:	e0d1      	b.n	800ef84 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <tcp_connect+0x70>
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	e000      	b.n	800edee <tcp_connect+0x72>
 800edec:	2300      	movs	r3, #0
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	88fa      	ldrh	r2, [r7, #6]
 800edf6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	7a1b      	ldrb	r3, [r3, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d006      	beq.n	800ee0e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	7a1b      	ldrb	r3, [r3, #8]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fdd5 	bl	800d9b4 <netif_get_by_index>
 800ee0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ee0c:	e005      	b.n	800ee1a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	3304      	adds	r3, #4
 800ee12:	4618      	mov	r0, r3
 800ee14:	f006 ff5a 	bl	8015ccc <ip4_route>
 800ee18:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d102      	bne.n	800ee26 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ee20:	f06f 0303 	mvn.w	r3, #3
 800ee24:	e0ae      	b.n	800ef84 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d003      	beq.n	800ee34 <tcp_connect+0xb8>
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d111      	bne.n	800ee58 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d002      	beq.n	800ee40 <tcp_connect+0xc4>
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	e000      	b.n	800ee42 <tcp_connect+0xc6>
 800ee40:	2300      	movs	r3, #0
 800ee42:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <tcp_connect+0xd4>
      return ERR_RTE;
 800ee4a:	f06f 0303 	mvn.w	r3, #3
 800ee4e:	e099      	b.n	800ef84 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	8adb      	ldrh	r3, [r3, #22]
 800ee5c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	8adb      	ldrh	r3, [r3, #22]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10c      	bne.n	800ee80 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ee66:	f7ff ff43 	bl	800ecf0 <tcp_new_port>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	8adb      	ldrh	r3, [r3, #22]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <tcp_connect+0x104>
      return ERR_BUF;
 800ee7a:	f06f 0301 	mvn.w	r3, #1
 800ee7e:	e081      	b.n	800ef84 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f001 f849 	bl	800ff18 <tcp_next_iss>
 800ee86:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	1e5a      	subs	r2, r3, #1
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	1e5a      	subs	r2, r3, #1
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	1e5a      	subs	r2, r3, #1
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800eed4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3304      	adds	r3, #4
 800eede:	461a      	mov	r2, r3
 800eee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eee2:	f001 f83f 	bl	800ff64 <tcp_eff_send_mss_netif>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800eefe:	2102      	movs	r1, #2
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f004 faa3 	bl	801344c <tcp_enqueue_flags>
 800ef06:	4603      	mov	r3, r0
 800ef08:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ef0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d136      	bne.n	800ef80 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2202      	movs	r2, #2
 800ef16:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ef18:	8b7b      	ldrh	r3, [r7, #26]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d021      	beq.n	800ef62 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef1e:	4b20      	ldr	r3, [pc, #128]	; (800efa0 <tcp_connect+0x224>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d105      	bne.n	800ef34 <tcp_connect+0x1b8>
 800ef28:	4b1d      	ldr	r3, [pc, #116]	; (800efa0 <tcp_connect+0x224>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	4a1c      	ldr	r2, [pc, #112]	; (800efa0 <tcp_connect+0x224>)
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	e013      	b.n	800ef5c <tcp_connect+0x1e0>
 800ef34:	4b1a      	ldr	r3, [pc, #104]	; (800efa0 <tcp_connect+0x224>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	623b      	str	r3, [r7, #32]
 800ef3a:	e00c      	b.n	800ef56 <tcp_connect+0x1da>
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d104      	bne.n	800ef50 <tcp_connect+0x1d4>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	68da      	ldr	r2, [r3, #12]
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	60da      	str	r2, [r3, #12]
 800ef4e:	e005      	b.n	800ef5c <tcp_connect+0x1e0>
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	623b      	str	r3, [r7, #32]
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1ef      	bne.n	800ef3c <tcp_connect+0x1c0>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ef62:	4b10      	ldr	r3, [pc, #64]	; (800efa4 <tcp_connect+0x228>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	60da      	str	r2, [r3, #12]
 800ef6a:	4a0e      	ldr	r2, [pc, #56]	; (800efa4 <tcp_connect+0x228>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6013      	str	r3, [r2, #0]
 800ef70:	f005 face 	bl	8014510 <tcp_timer_needed>
 800ef74:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <tcp_connect+0x22c>)
 800ef76:	2201      	movs	r2, #1
 800ef78:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f004 fb54 	bl	8013628 <tcp_output>
  }
  return ret;
 800ef80:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3728      	adds	r7, #40	; 0x28
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	08019b3c 	.word	0x08019b3c
 800ef90:	08019e18 	.word	0x08019e18
 800ef94:	08019b80 	.word	0x08019b80
 800ef98:	08019e34 	.word	0x08019e34
 800ef9c:	08019e50 	.word	0x08019e50
 800efa0:	20008144 	.word	0x20008144
 800efa4:	2000814c 	.word	0x2000814c
 800efa8:	20008154 	.word	0x20008154

0800efac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800efac:	b5b0      	push	{r4, r5, r7, lr}
 800efae:	b090      	sub	sp, #64	; 0x40
 800efb0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800efb8:	4b94      	ldr	r3, [pc, #592]	; (800f20c <tcp_slowtmr+0x260>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	3301      	adds	r3, #1
 800efbe:	4a93      	ldr	r2, [pc, #588]	; (800f20c <tcp_slowtmr+0x260>)
 800efc0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800efc2:	4b93      	ldr	r3, [pc, #588]	; (800f210 <tcp_slowtmr+0x264>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	3301      	adds	r3, #1
 800efc8:	b2da      	uxtb	r2, r3
 800efca:	4b91      	ldr	r3, [pc, #580]	; (800f210 <tcp_slowtmr+0x264>)
 800efcc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800efd2:	4b90      	ldr	r3, [pc, #576]	; (800f214 <tcp_slowtmr+0x268>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800efd8:	e29f      	b.n	800f51a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	7d1b      	ldrb	r3, [r3, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d106      	bne.n	800eff0 <tcp_slowtmr+0x44>
 800efe2:	4b8d      	ldr	r3, [pc, #564]	; (800f218 <tcp_slowtmr+0x26c>)
 800efe4:	f240 42be 	movw	r2, #1214	; 0x4be
 800efe8:	498c      	ldr	r1, [pc, #560]	; (800f21c <tcp_slowtmr+0x270>)
 800efea:	488d      	ldr	r0, [pc, #564]	; (800f220 <tcp_slowtmr+0x274>)
 800efec:	f009 f8ee 	bl	80181cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	7d1b      	ldrb	r3, [r3, #20]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d106      	bne.n	800f006 <tcp_slowtmr+0x5a>
 800eff8:	4b87      	ldr	r3, [pc, #540]	; (800f218 <tcp_slowtmr+0x26c>)
 800effa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800effe:	4989      	ldr	r1, [pc, #548]	; (800f224 <tcp_slowtmr+0x278>)
 800f000:	4887      	ldr	r0, [pc, #540]	; (800f220 <tcp_slowtmr+0x274>)
 800f002:	f009 f8e3 	bl	80181cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	7d1b      	ldrb	r3, [r3, #20]
 800f00a:	2b0a      	cmp	r3, #10
 800f00c:	d106      	bne.n	800f01c <tcp_slowtmr+0x70>
 800f00e:	4b82      	ldr	r3, [pc, #520]	; (800f218 <tcp_slowtmr+0x26c>)
 800f010:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f014:	4984      	ldr	r1, [pc, #528]	; (800f228 <tcp_slowtmr+0x27c>)
 800f016:	4882      	ldr	r0, [pc, #520]	; (800f220 <tcp_slowtmr+0x274>)
 800f018:	f009 f8d8 	bl	80181cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01e:	7f9a      	ldrb	r2, [r3, #30]
 800f020:	4b7b      	ldr	r3, [pc, #492]	; (800f210 <tcp_slowtmr+0x264>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	429a      	cmp	r2, r3
 800f026:	d105      	bne.n	800f034 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f032:	e272      	b.n	800f51a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f034:	4b76      	ldr	r3, [pc, #472]	; (800f210 <tcp_slowtmr+0x264>)
 800f036:	781a      	ldrb	r2, [r3, #0]
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f042:	2300      	movs	r3, #0
 800f044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d10a      	bne.n	800f066 <tcp_slowtmr+0xba>
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f056:	2b05      	cmp	r3, #5
 800f058:	d905      	bls.n	800f066 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f05e:	3301      	adds	r3, #1
 800f060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f064:	e11e      	b.n	800f2a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f06c:	2b0b      	cmp	r3, #11
 800f06e:	d905      	bls.n	800f07c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f074:	3301      	adds	r3, #1
 800f076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f07a:	e113      	b.n	800f2a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f082:	2b00      	cmp	r3, #0
 800f084:	d075      	beq.n	800f172 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d006      	beq.n	800f09c <tcp_slowtmr+0xf0>
 800f08e:	4b62      	ldr	r3, [pc, #392]	; (800f218 <tcp_slowtmr+0x26c>)
 800f090:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f094:	4965      	ldr	r1, [pc, #404]	; (800f22c <tcp_slowtmr+0x280>)
 800f096:	4862      	ldr	r0, [pc, #392]	; (800f220 <tcp_slowtmr+0x274>)
 800f098:	f009 f898 	bl	80181cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d106      	bne.n	800f0b2 <tcp_slowtmr+0x106>
 800f0a4:	4b5c      	ldr	r3, [pc, #368]	; (800f218 <tcp_slowtmr+0x26c>)
 800f0a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f0aa:	4961      	ldr	r1, [pc, #388]	; (800f230 <tcp_slowtmr+0x284>)
 800f0ac:	485c      	ldr	r0, [pc, #368]	; (800f220 <tcp_slowtmr+0x274>)
 800f0ae:	f009 f88d 	bl	80181cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f0b8:	2b0b      	cmp	r3, #11
 800f0ba:	d905      	bls.n	800f0c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0c6:	e0ed      	b.n	800f2a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	4a58      	ldr	r2, [pc, #352]	; (800f234 <tcp_slowtmr+0x288>)
 800f0d2:	5cd3      	ldrb	r3, [r2, r3]
 800f0d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0dc:	7c7a      	ldrb	r2, [r7, #17]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d907      	bls.n	800f0f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0f8:	7c7a      	ldrb	r2, [r7, #17]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	f200 80d2 	bhi.w	800f2a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f100:	2301      	movs	r3, #1
 800f102:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d108      	bne.n	800f120 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f110:	f005 f930 	bl	8014374 <tcp_zero_window_probe>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d014      	beq.n	800f144 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f11a:	2300      	movs	r3, #0
 800f11c:	623b      	str	r3, [r7, #32]
 800f11e:	e011      	b.n	800f144 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f126:	4619      	mov	r1, r3
 800f128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f12a:	f003 fff7 	bl	801311c <tcp_split_unsent_seg>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d107      	bne.n	800f144 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f136:	f004 fa77 	bl	8013628 <tcp_output>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f140:	2300      	movs	r3, #0
 800f142:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f144:	6a3b      	ldr	r3, [r7, #32]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 80ac 	beq.w	800f2a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f156:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	f200 80a2 	bhi.w	800f2a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f166:	3301      	adds	r3, #1
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f170:	e098      	b.n	800f2a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f174:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f178:	2b00      	cmp	r3, #0
 800f17a:	db0f      	blt.n	800f19c <tcp_slowtmr+0x1f0>
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f186:	4293      	cmp	r3, r2
 800f188:	d008      	beq.n	800f19c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f190:	b29b      	uxth	r3, r3
 800f192:	3301      	adds	r3, #1
 800f194:	b29b      	uxth	r3, r3
 800f196:	b21a      	sxth	r2, r3
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	db7b      	blt.n	800f2a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f1ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ae:	f004 fd2f 	bl	8013c10 <tcp_rexmit_rto_prepare>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <tcp_slowtmr+0x21c>
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d171      	bne.n	800f2a4 <tcp_slowtmr+0x2f8>
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d06d      	beq.n	800f2a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d03a      	beq.n	800f246 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1d6:	2b0c      	cmp	r3, #12
 800f1d8:	bf28      	it	cs
 800f1da:	230c      	movcs	r3, #12
 800f1dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1e4:	10db      	asrs	r3, r3, #3
 800f1e6:	b21b      	sxth	r3, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1f0:	4413      	add	r3, r2
 800f1f2:	7efa      	ldrb	r2, [r7, #27]
 800f1f4:	4910      	ldr	r1, [pc, #64]	; (800f238 <tcp_slowtmr+0x28c>)
 800f1f6:	5c8a      	ldrb	r2, [r1, r2]
 800f1f8:	4093      	lsls	r3, r2
 800f1fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f202:	4293      	cmp	r3, r2
 800f204:	dc1a      	bgt.n	800f23c <tcp_slowtmr+0x290>
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	b21a      	sxth	r2, r3
 800f20a:	e019      	b.n	800f240 <tcp_slowtmr+0x294>
 800f20c:	20008140 	.word	0x20008140
 800f210:	20008156 	.word	0x20008156
 800f214:	2000814c 	.word	0x2000814c
 800f218:	08019b3c 	.word	0x08019b3c
 800f21c:	08019e80 	.word	0x08019e80
 800f220:	08019b80 	.word	0x08019b80
 800f224:	08019eac 	.word	0x08019eac
 800f228:	08019ed8 	.word	0x08019ed8
 800f22c:	08019f08 	.word	0x08019f08
 800f230:	08019f3c 	.word	0x08019f3c
 800f234:	0801bb94 	.word	0x0801bb94
 800f238:	0801bb84 	.word	0x0801bb84
 800f23c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	2200      	movs	r2, #0
 800f24a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f258:	4293      	cmp	r3, r2
 800f25a:	bf28      	it	cs
 800f25c:	4613      	movcs	r3, r2
 800f25e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f260:	8a7b      	ldrh	r3, [r7, #18]
 800f262:	085b      	lsrs	r3, r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	b29b      	uxth	r3, r3
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d206      	bcs.n	800f28c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	b29a      	uxth	r2, r3
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	2200      	movs	r2, #0
 800f29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2a0:	f004 fd26 	bl	8013cf0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b06      	cmp	r3, #6
 800f2aa:	d111      	bne.n	800f2d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ae:	8b5b      	ldrh	r3, [r3, #26]
 800f2b0:	f003 0310 	and.w	r3, r3, #16
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00b      	beq.n	800f2d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2b8:	4b9d      	ldr	r3, [pc, #628]	; (800f530 <tcp_slowtmr+0x584>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2be:	6a1b      	ldr	r3, [r3, #32]
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	2b28      	cmp	r3, #40	; 0x28
 800f2c4:	d904      	bls.n	800f2d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d2:	7a5b      	ldrb	r3, [r3, #9]
 800f2d4:	f003 0308 	and.w	r3, r3, #8
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d04c      	beq.n	800f376 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f2e0:	2b04      	cmp	r3, #4
 800f2e2:	d003      	beq.n	800f2ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f2e8:	2b07      	cmp	r3, #7
 800f2ea:	d144      	bne.n	800f376 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2ec:	4b90      	ldr	r3, [pc, #576]	; (800f530 <tcp_slowtmr+0x584>)
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f2fc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f300:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f304:	498b      	ldr	r1, [pc, #556]	; (800f534 <tcp_slowtmr+0x588>)
 800f306:	fba1 1303 	umull	r1, r3, r1, r3
 800f30a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d90a      	bls.n	800f326 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f314:	3301      	adds	r3, #1
 800f316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f31a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f31e:	3301      	adds	r3, #1
 800f320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f324:	e027      	b.n	800f376 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f326:	4b82      	ldr	r3, [pc, #520]	; (800f530 <tcp_slowtmr+0x584>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	6a1b      	ldr	r3, [r3, #32]
 800f32e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f33c:	4618      	mov	r0, r3
 800f33e:	4b7e      	ldr	r3, [pc, #504]	; (800f538 <tcp_slowtmr+0x58c>)
 800f340:	fb00 f303 	mul.w	r3, r0, r3
 800f344:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f346:	497b      	ldr	r1, [pc, #492]	; (800f534 <tcp_slowtmr+0x588>)
 800f348:	fba1 1303 	umull	r1, r3, r1, r3
 800f34c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f34e:	429a      	cmp	r2, r3
 800f350:	d911      	bls.n	800f376 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f354:	f004 ffce 	bl	80142f4 <tcp_keepalive>
 800f358:	4603      	mov	r3, r0
 800f35a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f35e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f362:	2b00      	cmp	r3, #0
 800f364:	d107      	bne.n	800f376 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f368:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f36c:	3301      	adds	r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d011      	beq.n	800f3a2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f37e:	4b6c      	ldr	r3, [pc, #432]	; (800f530 <tcp_slowtmr+0x584>)
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	1ad2      	subs	r2, r2, r3
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f38e:	4619      	mov	r1, r3
 800f390:	460b      	mov	r3, r1
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	440b      	add	r3, r1
 800f396:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f398:	429a      	cmp	r2, r3
 800f39a:	d302      	bcc.n	800f3a2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f39e:	f000 fe8b 	bl	80100b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	7d1b      	ldrb	r3, [r3, #20]
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d10b      	bne.n	800f3c2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3aa:	4b61      	ldr	r3, [pc, #388]	; (800f530 <tcp_slowtmr+0x584>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	2b28      	cmp	r3, #40	; 0x28
 800f3b6:	d904      	bls.n	800f3c2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3bc:	3301      	adds	r3, #1
 800f3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
 800f3c6:	2b09      	cmp	r3, #9
 800f3c8:	d10b      	bne.n	800f3e2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f3ca:	4b59      	ldr	r3, [pc, #356]	; (800f530 <tcp_slowtmr+0x584>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2bf0      	cmp	r3, #240	; 0xf0
 800f3d6:	d904      	bls.n	800f3e2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3dc:	3301      	adds	r3, #1
 800f3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d060      	beq.n	800f4ac <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3f4:	f000 fcac 	bl	800fd50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d010      	beq.n	800f420 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f3fe:	4b4f      	ldr	r3, [pc, #316]	; (800f53c <tcp_slowtmr+0x590>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f404:	429a      	cmp	r2, r3
 800f406:	d106      	bne.n	800f416 <tcp_slowtmr+0x46a>
 800f408:	4b4d      	ldr	r3, [pc, #308]	; (800f540 <tcp_slowtmr+0x594>)
 800f40a:	f240 526d 	movw	r2, #1389	; 0x56d
 800f40e:	494d      	ldr	r1, [pc, #308]	; (800f544 <tcp_slowtmr+0x598>)
 800f410:	484d      	ldr	r0, [pc, #308]	; (800f548 <tcp_slowtmr+0x59c>)
 800f412:	f008 fedb 	bl	80181cc <iprintf>
        prev->next = pcb->next;
 800f416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	60da      	str	r2, [r3, #12]
 800f41e:	e00f      	b.n	800f440 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f420:	4b46      	ldr	r3, [pc, #280]	; (800f53c <tcp_slowtmr+0x590>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f426:	429a      	cmp	r2, r3
 800f428:	d006      	beq.n	800f438 <tcp_slowtmr+0x48c>
 800f42a:	4b45      	ldr	r3, [pc, #276]	; (800f540 <tcp_slowtmr+0x594>)
 800f42c:	f240 5271 	movw	r2, #1393	; 0x571
 800f430:	4946      	ldr	r1, [pc, #280]	; (800f54c <tcp_slowtmr+0x5a0>)
 800f432:	4845      	ldr	r0, [pc, #276]	; (800f548 <tcp_slowtmr+0x59c>)
 800f434:	f008 feca 	bl	80181cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	4a3f      	ldr	r2, [pc, #252]	; (800f53c <tcp_slowtmr+0x590>)
 800f43e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f444:	2b00      	cmp	r3, #0
 800f446:	d013      	beq.n	800f470 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f450:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	3304      	adds	r3, #4
 800f456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f458:	8ad2      	ldrh	r2, [r2, #22]
 800f45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f45c:	8b09      	ldrh	r1, [r1, #24]
 800f45e:	9102      	str	r1, [sp, #8]
 800f460:	9201      	str	r2, [sp, #4]
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	462b      	mov	r3, r5
 800f466:	4622      	mov	r2, r4
 800f468:	4601      	mov	r1, r0
 800f46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f46c:	f004 fe90 	bl	8014190 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	7d1b      	ldrb	r3, [r3, #20]
 800f47a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f486:	6838      	ldr	r0, [r7, #0]
 800f488:	f7ff f894 	bl	800e5b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f48c:	4b30      	ldr	r3, [pc, #192]	; (800f550 <tcp_slowtmr+0x5a4>)
 800f48e:	2200      	movs	r2, #0
 800f490:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d004      	beq.n	800f4a2 <tcp_slowtmr+0x4f6>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f06f 010c 	mvn.w	r1, #12
 800f49e:	68b8      	ldr	r0, [r7, #8]
 800f4a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f4a2:	4b2b      	ldr	r3, [pc, #172]	; (800f550 <tcp_slowtmr+0x5a4>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d037      	beq.n	800f51a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f4aa:	e590      	b.n	800efce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b8:	7f1b      	ldrb	r3, [r3, #28]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	7f1a      	ldrb	r2, [r3, #28]
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	7f5b      	ldrb	r3, [r3, #29]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d325      	bcc.n	800f51a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f4d4:	4b1e      	ldr	r3, [pc, #120]	; (800f550 <tcp_slowtmr+0x5a4>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00b      	beq.n	800f4fc <tcp_slowtmr+0x550>
 800f4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4ec:	6912      	ldr	r2, [r2, #16]
 800f4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	4798      	blx	r3
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f4fa:	e002      	b.n	800f502 <tcp_slowtmr+0x556>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f502:	4b13      	ldr	r3, [pc, #76]	; (800f550 <tcp_slowtmr+0x5a4>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d000      	beq.n	800f50c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f50a:	e560      	b.n	800efce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f50c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f516:	f004 f887 	bl	8013628 <tcp_output>
  while (pcb != NULL) {
 800f51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f47f ad5c 	bne.w	800efda <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f522:	2300      	movs	r3, #0
 800f524:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f526:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <tcp_slowtmr+0x5a8>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f52c:	e067      	b.n	800f5fe <tcp_slowtmr+0x652>
 800f52e:	bf00      	nop
 800f530:	20008140 	.word	0x20008140
 800f534:	10624dd3 	.word	0x10624dd3
 800f538:	000124f8 	.word	0x000124f8
 800f53c:	2000814c 	.word	0x2000814c
 800f540:	08019b3c 	.word	0x08019b3c
 800f544:	08019f74 	.word	0x08019f74
 800f548:	08019b80 	.word	0x08019b80
 800f54c:	08019fa0 	.word	0x08019fa0
 800f550:	20008154 	.word	0x20008154
 800f554:	20008150 	.word	0x20008150
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	7d1b      	ldrb	r3, [r3, #20]
 800f55c:	2b0a      	cmp	r3, #10
 800f55e:	d006      	beq.n	800f56e <tcp_slowtmr+0x5c2>
 800f560:	4b2b      	ldr	r3, [pc, #172]	; (800f610 <tcp_slowtmr+0x664>)
 800f562:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f566:	492b      	ldr	r1, [pc, #172]	; (800f614 <tcp_slowtmr+0x668>)
 800f568:	482b      	ldr	r0, [pc, #172]	; (800f618 <tcp_slowtmr+0x66c>)
 800f56a:	f008 fe2f 	bl	80181cc <iprintf>
    pcb_remove = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f574:	4b29      	ldr	r3, [pc, #164]	; (800f61c <tcp_slowtmr+0x670>)
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	6a1b      	ldr	r3, [r3, #32]
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	2bf0      	cmp	r3, #240	; 0xf0
 800f580:	d904      	bls.n	800f58c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f586:	3301      	adds	r3, #1
 800f588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f590:	2b00      	cmp	r3, #0
 800f592:	d02f      	beq.n	800f5f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f596:	f000 fbdb 	bl	800fd50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d010      	beq.n	800f5c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f5a0:	4b1f      	ldr	r3, [pc, #124]	; (800f620 <tcp_slowtmr+0x674>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d106      	bne.n	800f5b8 <tcp_slowtmr+0x60c>
 800f5aa:	4b19      	ldr	r3, [pc, #100]	; (800f610 <tcp_slowtmr+0x664>)
 800f5ac:	f240 52af 	movw	r2, #1455	; 0x5af
 800f5b0:	491c      	ldr	r1, [pc, #112]	; (800f624 <tcp_slowtmr+0x678>)
 800f5b2:	4819      	ldr	r0, [pc, #100]	; (800f618 <tcp_slowtmr+0x66c>)
 800f5b4:	f008 fe0a 	bl	80181cc <iprintf>
        prev->next = pcb->next;
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	68da      	ldr	r2, [r3, #12]
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	60da      	str	r2, [r3, #12]
 800f5c0:	e00f      	b.n	800f5e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f5c2:	4b17      	ldr	r3, [pc, #92]	; (800f620 <tcp_slowtmr+0x674>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d006      	beq.n	800f5da <tcp_slowtmr+0x62e>
 800f5cc:	4b10      	ldr	r3, [pc, #64]	; (800f610 <tcp_slowtmr+0x664>)
 800f5ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f5d2:	4915      	ldr	r1, [pc, #84]	; (800f628 <tcp_slowtmr+0x67c>)
 800f5d4:	4810      	ldr	r0, [pc, #64]	; (800f618 <tcp_slowtmr+0x66c>)
 800f5d6:	f008 fdf9 	bl	80181cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	4a10      	ldr	r2, [pc, #64]	; (800f620 <tcp_slowtmr+0x674>)
 800f5e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f5ec:	69f8      	ldr	r0, [r7, #28]
 800f5ee:	f7fe ffe1 	bl	800e5b4 <tcp_free>
 800f5f2:	e004      	b.n	800f5fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1a9      	bne.n	800f558 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	3730      	adds	r7, #48	; 0x30
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bdb0      	pop	{r4, r5, r7, pc}
 800f60e:	bf00      	nop
 800f610:	08019b3c 	.word	0x08019b3c
 800f614:	08019fcc 	.word	0x08019fcc
 800f618:	08019b80 	.word	0x08019b80
 800f61c:	20008140 	.word	0x20008140
 800f620:	20008150 	.word	0x20008150
 800f624:	08019ffc 	.word	0x08019ffc
 800f628:	0801a024 	.word	0x0801a024

0800f62c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f632:	4b2d      	ldr	r3, [pc, #180]	; (800f6e8 <tcp_fasttmr+0xbc>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	3301      	adds	r3, #1
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	4b2b      	ldr	r3, [pc, #172]	; (800f6e8 <tcp_fasttmr+0xbc>)
 800f63c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f63e:	4b2b      	ldr	r3, [pc, #172]	; (800f6ec <tcp_fasttmr+0xc0>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f644:	e048      	b.n	800f6d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	7f9a      	ldrb	r2, [r3, #30]
 800f64a:	4b27      	ldr	r3, [pc, #156]	; (800f6e8 <tcp_fasttmr+0xbc>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d03f      	beq.n	800f6d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f652:	4b25      	ldr	r3, [pc, #148]	; (800f6e8 <tcp_fasttmr+0xbc>)
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	8b5b      	ldrh	r3, [r3, #26]
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d010      	beq.n	800f688 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	8b5b      	ldrh	r3, [r3, #26]
 800f66a:	f043 0302 	orr.w	r3, r3, #2
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f003 ffd7 	bl	8013628 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8b5b      	ldrh	r3, [r3, #26]
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	b29a      	uxth	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	8b5b      	ldrh	r3, [r3, #26]
 800f68c:	f003 0308 	and.w	r3, r3, #8
 800f690:	2b00      	cmp	r3, #0
 800f692:	d009      	beq.n	800f6a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	8b5b      	ldrh	r3, [r3, #26]
 800f698:	f023 0308 	bic.w	r3, r3, #8
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7ff f91a 	bl	800e8dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d00a      	beq.n	800f6cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f6b6:	4b0e      	ldr	r3, [pc, #56]	; (800f6f0 <tcp_fasttmr+0xc4>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f819 	bl	800f6f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f6c2:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <tcp_fasttmr+0xc4>)
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d000      	beq.n	800f6cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f6ca:	e7b8      	b.n	800f63e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	607b      	str	r3, [r7, #4]
 800f6d0:	e002      	b.n	800f6d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1b3      	bne.n	800f646 <tcp_fasttmr+0x1a>
    }
  }
}
 800f6de:	bf00      	nop
 800f6e0:	bf00      	nop
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	20008156 	.word	0x20008156
 800f6ec:	2000814c 	.word	0x2000814c
 800f6f0:	20008154 	.word	0x20008154

0800f6f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f6f4:	b590      	push	{r4, r7, lr}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d109      	bne.n	800f716 <tcp_process_refused_data+0x22>
 800f702:	4b37      	ldr	r3, [pc, #220]	; (800f7e0 <tcp_process_refused_data+0xec>)
 800f704:	f240 6209 	movw	r2, #1545	; 0x609
 800f708:	4936      	ldr	r1, [pc, #216]	; (800f7e4 <tcp_process_refused_data+0xf0>)
 800f70a:	4837      	ldr	r0, [pc, #220]	; (800f7e8 <tcp_process_refused_data+0xf4>)
 800f70c:	f008 fd5e 	bl	80181cc <iprintf>
 800f710:	f06f 030f 	mvn.w	r3, #15
 800f714:	e060      	b.n	800f7d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f71a:	7b5b      	ldrb	r3, [r3, #13]
 800f71c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f722:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <tcp_process_refused_data+0x58>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6918      	ldr	r0, [r3, #16]
 800f73e:	2300      	movs	r3, #0
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	6879      	ldr	r1, [r7, #4]
 800f744:	47a0      	blx	r4
 800f746:	4603      	mov	r3, r0
 800f748:	73fb      	strb	r3, [r7, #15]
 800f74a:	e007      	b.n	800f75c <tcp_process_refused_data+0x68>
 800f74c:	2300      	movs	r3, #0
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	6879      	ldr	r1, [r7, #4]
 800f752:	2000      	movs	r0, #0
 800f754:	f000 f8a4 	bl	800f8a0 <tcp_recv_null>
 800f758:	4603      	mov	r3, r0
 800f75a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d12a      	bne.n	800f7ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f764:	7bbb      	ldrb	r3, [r7, #14]
 800f766:	f003 0320 	and.w	r3, r3, #32
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d033      	beq.n	800f7d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f776:	d005      	beq.n	800f784 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f77c:	3301      	adds	r3, #1
 800f77e:	b29a      	uxth	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00b      	beq.n	800f7a6 <tcp_process_refused_data+0xb2>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6918      	ldr	r0, [r3, #16]
 800f798:	2300      	movs	r3, #0
 800f79a:	2200      	movs	r2, #0
 800f79c:	6879      	ldr	r1, [r7, #4]
 800f79e:	47a0      	blx	r4
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73fb      	strb	r3, [r7, #15]
 800f7a4:	e001      	b.n	800f7aa <tcp_process_refused_data+0xb6>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7ae:	f113 0f0d 	cmn.w	r3, #13
 800f7b2:	d110      	bne.n	800f7d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f7b4:	f06f 030c 	mvn.w	r3, #12
 800f7b8:	e00e      	b.n	800f7d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7be:	f113 0f0d 	cmn.w	r3, #13
 800f7c2:	d102      	bne.n	800f7ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f7c4:	f06f 030c 	mvn.w	r3, #12
 800f7c8:	e006      	b.n	800f7d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68ba      	ldr	r2, [r7, #8]
 800f7ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f7d0:	f06f 0304 	mvn.w	r3, #4
 800f7d4:	e000      	b.n	800f7d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3714      	adds	r7, #20
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd90      	pop	{r4, r7, pc}
 800f7e0:	08019b3c 	.word	0x08019b3c
 800f7e4:	0801a04c 	.word	0x0801a04c
 800f7e8:	08019b80 	.word	0x08019b80

0800f7ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f7f4:	e007      	b.n	800f806 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 f80a 	bl	800f816 <tcp_seg_free>
    seg = next;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1f4      	bne.n	800f7f6 <tcp_segs_free+0xa>
  }
}
 800f80c:	bf00      	nop
 800f80e:	bf00      	nop
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b082      	sub	sp, #8
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00c      	beq.n	800f83e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d004      	beq.n	800f836 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe fc1f 	bl	800e074 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f836:	6879      	ldr	r1, [r7, #4]
 800f838:	2003      	movs	r0, #3
 800f83a:	f7fd fda5 	bl	800d388 <memp_free>
  }
}
 800f83e:	bf00      	nop
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
	...

0800f848 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <tcp_seg_copy+0x1c>
 800f856:	4b0f      	ldr	r3, [pc, #60]	; (800f894 <tcp_seg_copy+0x4c>)
 800f858:	f240 6282 	movw	r2, #1666	; 0x682
 800f85c:	490e      	ldr	r1, [pc, #56]	; (800f898 <tcp_seg_copy+0x50>)
 800f85e:	480f      	ldr	r0, [pc, #60]	; (800f89c <tcp_seg_copy+0x54>)
 800f860:	f008 fcb4 	bl	80181cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f864:	2003      	movs	r0, #3
 800f866:	f7fd fd1f 	bl	800d2a8 <memp_malloc>
 800f86a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <tcp_seg_copy+0x2e>
    return NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	e00a      	b.n	800f88c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f876:	2210      	movs	r2, #16
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f008 fd99 	bl	80183b2 <memcpy>
  pbuf_ref(cseg->p);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	4618      	mov	r0, r3
 800f886:	f7fe fc95 	bl	800e1b4 <pbuf_ref>
  return cseg;
 800f88a:	68fb      	ldr	r3, [r7, #12]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	08019b3c 	.word	0x08019b3c
 800f898:	0801a090 	.word	0x0801a090
 800f89c:	08019b80 	.word	0x08019b80

0800f8a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]
 800f8ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d109      	bne.n	800f8c8 <tcp_recv_null+0x28>
 800f8b4:	4b12      	ldr	r3, [pc, #72]	; (800f900 <tcp_recv_null+0x60>)
 800f8b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f8ba:	4912      	ldr	r1, [pc, #72]	; (800f904 <tcp_recv_null+0x64>)
 800f8bc:	4812      	ldr	r0, [pc, #72]	; (800f908 <tcp_recv_null+0x68>)
 800f8be:	f008 fc85 	bl	80181cc <iprintf>
 800f8c2:	f06f 030f 	mvn.w	r3, #15
 800f8c6:	e016      	b.n	800f8f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d009      	beq.n	800f8e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	891b      	ldrh	r3, [r3, #8]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	68b8      	ldr	r0, [r7, #8]
 800f8d6:	f7ff f9bb 	bl	800ec50 <tcp_recved>
    pbuf_free(p);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7fe fbca 	bl	800e074 <pbuf_free>
 800f8e0:	e008      	b.n	800f8f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f8e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d104      	bne.n	800f8f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f8ea:	68b8      	ldr	r0, [r7, #8]
 800f8ec:	f7ff f860 	bl	800e9b0 <tcp_close>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	e000      	b.n	800f8f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	08019b3c 	.word	0x08019b3c
 800f904:	0801a0ac 	.word	0x0801a0ac
 800f908:	08019b80 	.word	0x08019b80

0800f90c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	db01      	blt.n	800f922 <tcp_kill_prio+0x16>
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	e000      	b.n	800f924 <tcp_kill_prio+0x18>
 800f922:	237f      	movs	r3, #127	; 0x7f
 800f924:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f926:	7afb      	ldrb	r3, [r7, #11]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d034      	beq.n	800f996 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f92c:	7afb      	ldrb	r3, [r7, #11]
 800f92e:	3b01      	subs	r3, #1
 800f930:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f93a:	4b19      	ldr	r3, [pc, #100]	; (800f9a0 <tcp_kill_prio+0x94>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	617b      	str	r3, [r7, #20]
 800f940:	e01f      	b.n	800f982 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	7d5b      	ldrb	r3, [r3, #21]
 800f946:	7afa      	ldrb	r2, [r7, #11]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d80c      	bhi.n	800f966 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f950:	7afa      	ldrb	r2, [r7, #11]
 800f952:	429a      	cmp	r2, r3
 800f954:	d112      	bne.n	800f97c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f956:	4b13      	ldr	r3, [pc, #76]	; (800f9a4 <tcp_kill_prio+0x98>)
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	6a1b      	ldr	r3, [r3, #32]
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	429a      	cmp	r2, r3
 800f964:	d80a      	bhi.n	800f97c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f966:	4b0f      	ldr	r3, [pc, #60]	; (800f9a4 <tcp_kill_prio+0x98>)
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	7d5b      	ldrb	r3, [r3, #21]
 800f97a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1dc      	bne.n	800f942 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d004      	beq.n	800f998 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f98e:	6938      	ldr	r0, [r7, #16]
 800f990:	f7ff f8f8 	bl	800eb84 <tcp_abort>
 800f994:	e000      	b.n	800f998 <tcp_kill_prio+0x8c>
    return;
 800f996:	bf00      	nop
  }
}
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	2000814c 	.word	0x2000814c
 800f9a4:	20008140 	.word	0x20008140

0800f9a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f9b2:	79fb      	ldrb	r3, [r7, #7]
 800f9b4:	2b08      	cmp	r3, #8
 800f9b6:	d009      	beq.n	800f9cc <tcp_kill_state+0x24>
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	2b09      	cmp	r3, #9
 800f9bc:	d006      	beq.n	800f9cc <tcp_kill_state+0x24>
 800f9be:	4b1a      	ldr	r3, [pc, #104]	; (800fa28 <tcp_kill_state+0x80>)
 800f9c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f9c4:	4919      	ldr	r1, [pc, #100]	; (800fa2c <tcp_kill_state+0x84>)
 800f9c6:	481a      	ldr	r0, [pc, #104]	; (800fa30 <tcp_kill_state+0x88>)
 800f9c8:	f008 fc00 	bl	80181cc <iprintf>

  inactivity = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9d4:	4b17      	ldr	r3, [pc, #92]	; (800fa34 <tcp_kill_state+0x8c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	617b      	str	r3, [r7, #20]
 800f9da:	e017      	b.n	800fa0c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	7d1b      	ldrb	r3, [r3, #20]
 800f9e0:	79fa      	ldrb	r2, [r7, #7]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d10f      	bne.n	800fa06 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <tcp_kill_state+0x90>)
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	6a1b      	ldr	r3, [r3, #32]
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d807      	bhi.n	800fa06 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <tcp_kill_state+0x90>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	1ad3      	subs	r3, r2, r3
 800fa00:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	617b      	str	r3, [r7, #20]
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e4      	bne.n	800f9dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d003      	beq.n	800fa20 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fa18:	2100      	movs	r1, #0
 800fa1a:	6938      	ldr	r0, [r7, #16]
 800fa1c:	f7fe fff4 	bl	800ea08 <tcp_abandon>
  }
}
 800fa20:	bf00      	nop
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	08019b3c 	.word	0x08019b3c
 800fa2c:	0801a0c8 	.word	0x0801a0c8
 800fa30:	08019b80 	.word	0x08019b80
 800fa34:	2000814c 	.word	0x2000814c
 800fa38:	20008140 	.word	0x20008140

0800fa3c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa4a:	4b12      	ldr	r3, [pc, #72]	; (800fa94 <tcp_kill_timewait+0x58>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	60fb      	str	r3, [r7, #12]
 800fa50:	e012      	b.n	800fa78 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa52:	4b11      	ldr	r3, [pc, #68]	; (800fa98 <tcp_kill_timewait+0x5c>)
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d807      	bhi.n	800fa72 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fa62:	4b0d      	ldr	r3, [pc, #52]	; (800fa98 <tcp_kill_timewait+0x5c>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1e9      	bne.n	800fa52 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa84:	68b8      	ldr	r0, [r7, #8]
 800fa86:	f7ff f87d 	bl	800eb84 <tcp_abort>
  }
}
 800fa8a:	bf00      	nop
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	20008150 	.word	0x20008150
 800fa98:	20008140 	.word	0x20008140

0800fa9c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800faa2:	4b10      	ldr	r3, [pc, #64]	; (800fae4 <tcp_handle_closepend+0x48>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800faa8:	e014      	b.n	800fad4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	8b5b      	ldrh	r3, [r3, #26]
 800fab4:	f003 0308 	and.w	r3, r3, #8
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d009      	beq.n	800fad0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	8b5b      	ldrh	r3, [r3, #26]
 800fac0:	f023 0308 	bic.w	r3, r3, #8
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fe ff06 	bl	800e8dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1e7      	bne.n	800faaa <tcp_handle_closepend+0xe>
  }
}
 800fada:	bf00      	nop
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	2000814c 	.word	0x2000814c

0800fae8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800faf2:	2001      	movs	r0, #1
 800faf4:	f7fd fbd8 	bl	800d2a8 <memp_malloc>
 800faf8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d126      	bne.n	800fb4e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fb00:	f7ff ffcc 	bl	800fa9c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fb04:	f7ff ff9a 	bl	800fa3c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb08:	2001      	movs	r0, #1
 800fb0a:	f7fd fbcd 	bl	800d2a8 <memp_malloc>
 800fb0e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d11b      	bne.n	800fb4e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fb16:	2009      	movs	r0, #9
 800fb18:	f7ff ff46 	bl	800f9a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	f7fd fbc3 	bl	800d2a8 <memp_malloc>
 800fb22:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d111      	bne.n	800fb4e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fb2a:	2008      	movs	r0, #8
 800fb2c:	f7ff ff3c 	bl	800f9a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb30:	2001      	movs	r0, #1
 800fb32:	f7fd fbb9 	bl	800d2a8 <memp_malloc>
 800fb36:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d107      	bne.n	800fb4e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff fee3 	bl	800f90c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb46:	2001      	movs	r0, #1
 800fb48:	f7fd fbae 	bl	800d2a8 <memp_malloc>
 800fb4c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d03f      	beq.n	800fbd4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fb54:	229c      	movs	r2, #156	; 0x9c
 800fb56:	2100      	movs	r1, #0
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f008 fb9c 	bl	8018296 <memset>
    pcb->prio = prio;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	79fa      	ldrb	r2, [r7, #7]
 800fb62:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800fb6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	22ff      	movs	r2, #255	; 0xff
 800fb82:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fb8a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2206      	movs	r2, #6
 800fb90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2206      	movs	r2, #6
 800fb98:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fba0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	; (800fbe0 <tcp_alloc+0xf8>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fbb2:	4b0c      	ldr	r3, [pc, #48]	; (800fbe4 <tcp_alloc+0xfc>)
 800fbb4:	781a      	ldrb	r2, [r3, #0]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800fbc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	4a08      	ldr	r2, [pc, #32]	; (800fbe8 <tcp_alloc+0x100>)
 800fbc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4a07      	ldr	r2, [pc, #28]	; (800fbec <tcp_alloc+0x104>)
 800fbd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	20008140 	.word	0x20008140
 800fbe4:	20008156 	.word	0x20008156
 800fbe8:	0800f8a1 	.word	0x0800f8a1
 800fbec:	006ddd00 	.word	0x006ddd00

0800fbf0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800fbf4:	2040      	movs	r0, #64	; 0x40
 800fbf6:	f7ff ff77 	bl	800fae8 <tcp_alloc>
 800fbfa:	4603      	mov	r3, r0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d002      	beq.n	800fc16 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	611a      	str	r2, [r3, #16]
  }
}
 800fc16:	bf00      	nop
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
	...

0800fc24 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00e      	beq.n	800fc52 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	7d1b      	ldrb	r3, [r3, #20]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d106      	bne.n	800fc4a <tcp_recv+0x26>
 800fc3c:	4b07      	ldr	r3, [pc, #28]	; (800fc5c <tcp_recv+0x38>)
 800fc3e:	f240 72df 	movw	r2, #2015	; 0x7df
 800fc42:	4907      	ldr	r1, [pc, #28]	; (800fc60 <tcp_recv+0x3c>)
 800fc44:	4807      	ldr	r0, [pc, #28]	; (800fc64 <tcp_recv+0x40>)
 800fc46:	f008 fac1 	bl	80181cc <iprintf>
    pcb->recv = recv;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	08019b3c 	.word	0x08019b3c
 800fc60:	0801a0d8 	.word	0x0801a0d8
 800fc64:	08019b80 	.word	0x08019b80

0800fc68 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00e      	beq.n	800fc96 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	7d1b      	ldrb	r3, [r3, #20]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d106      	bne.n	800fc8e <tcp_sent+0x26>
 800fc80:	4b07      	ldr	r3, [pc, #28]	; (800fca0 <tcp_sent+0x38>)
 800fc82:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fc86:	4907      	ldr	r1, [pc, #28]	; (800fca4 <tcp_sent+0x3c>)
 800fc88:	4807      	ldr	r0, [pc, #28]	; (800fca8 <tcp_sent+0x40>)
 800fc8a:	f008 fa9f 	bl	80181cc <iprintf>
    pcb->sent = sent;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	683a      	ldr	r2, [r7, #0]
 800fc92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08019b3c 	.word	0x08019b3c
 800fca4:	0801a100 	.word	0x0801a100
 800fca8:	08019b80 	.word	0x08019b80

0800fcac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00e      	beq.n	800fcda <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	7d1b      	ldrb	r3, [r3, #20]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d106      	bne.n	800fcd2 <tcp_err+0x26>
 800fcc4:	4b07      	ldr	r3, [pc, #28]	; (800fce4 <tcp_err+0x38>)
 800fcc6:	f640 020d 	movw	r2, #2061	; 0x80d
 800fcca:	4907      	ldr	r1, [pc, #28]	; (800fce8 <tcp_err+0x3c>)
 800fccc:	4807      	ldr	r0, [pc, #28]	; (800fcec <tcp_err+0x40>)
 800fcce:	f008 fa7d 	bl	80181cc <iprintf>
    pcb->errf = err;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fcda:	bf00      	nop
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	08019b3c 	.word	0x08019b3c
 800fce8:	0801a128 	.word	0x0801a128
 800fcec:	08019b80 	.word	0x08019b80

0800fcf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d107      	bne.n	800fd14 <tcp_poll+0x24>
 800fd04:	4b0e      	ldr	r3, [pc, #56]	; (800fd40 <tcp_poll+0x50>)
 800fd06:	f640 023d 	movw	r2, #2109	; 0x83d
 800fd0a:	490e      	ldr	r1, [pc, #56]	; (800fd44 <tcp_poll+0x54>)
 800fd0c:	480e      	ldr	r0, [pc, #56]	; (800fd48 <tcp_poll+0x58>)
 800fd0e:	f008 fa5d 	bl	80181cc <iprintf>
 800fd12:	e011      	b.n	800fd38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	7d1b      	ldrb	r3, [r3, #20]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d106      	bne.n	800fd2a <tcp_poll+0x3a>
 800fd1c:	4b08      	ldr	r3, [pc, #32]	; (800fd40 <tcp_poll+0x50>)
 800fd1e:	f640 023e 	movw	r2, #2110	; 0x83e
 800fd22:	490a      	ldr	r1, [pc, #40]	; (800fd4c <tcp_poll+0x5c>)
 800fd24:	4808      	ldr	r0, [pc, #32]	; (800fd48 <tcp_poll+0x58>)
 800fd26:	f008 fa51 	bl	80181cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	79fa      	ldrb	r2, [r7, #7]
 800fd36:	775a      	strb	r2, [r3, #29]
}
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	08019b3c 	.word	0x08019b3c
 800fd44:	0801a150 	.word	0x0801a150
 800fd48:	08019b80 	.word	0x08019b80
 800fd4c:	0801a168 	.word	0x0801a168

0800fd50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d107      	bne.n	800fd6e <tcp_pcb_purge+0x1e>
 800fd5e:	4b21      	ldr	r3, [pc, #132]	; (800fde4 <tcp_pcb_purge+0x94>)
 800fd60:	f640 0251 	movw	r2, #2129	; 0x851
 800fd64:	4920      	ldr	r1, [pc, #128]	; (800fde8 <tcp_pcb_purge+0x98>)
 800fd66:	4821      	ldr	r0, [pc, #132]	; (800fdec <tcp_pcb_purge+0x9c>)
 800fd68:	f008 fa30 	bl	80181cc <iprintf>
 800fd6c:	e037      	b.n	800fdde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	7d1b      	ldrb	r3, [r3, #20]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d033      	beq.n	800fdde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fd7a:	2b0a      	cmp	r3, #10
 800fd7c:	d02f      	beq.n	800fdde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d02b      	beq.n	800fdde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d007      	beq.n	800fd9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe f96e 	bl	800e074 <pbuf_free>
      pcb->refused_data = NULL;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d002      	beq.n	800fdac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 f986 	bl	80100b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fd17 	bl	800f7ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff fd12 	bl	800f7ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	66da      	str	r2, [r3, #108]	; 0x6c
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	08019b3c 	.word	0x08019b3c
 800fde8:	0801a188 	.word	0x0801a188
 800fdec:	08019b80 	.word	0x08019b80

0800fdf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d106      	bne.n	800fe0e <tcp_pcb_remove+0x1e>
 800fe00:	4b3e      	ldr	r3, [pc, #248]	; (800fefc <tcp_pcb_remove+0x10c>)
 800fe02:	f640 0283 	movw	r2, #2179	; 0x883
 800fe06:	493e      	ldr	r1, [pc, #248]	; (800ff00 <tcp_pcb_remove+0x110>)
 800fe08:	483e      	ldr	r0, [pc, #248]	; (800ff04 <tcp_pcb_remove+0x114>)
 800fe0a:	f008 f9df 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d106      	bne.n	800fe22 <tcp_pcb_remove+0x32>
 800fe14:	4b39      	ldr	r3, [pc, #228]	; (800fefc <tcp_pcb_remove+0x10c>)
 800fe16:	f640 0284 	movw	r2, #2180	; 0x884
 800fe1a:	493b      	ldr	r1, [pc, #236]	; (800ff08 <tcp_pcb_remove+0x118>)
 800fe1c:	4839      	ldr	r0, [pc, #228]	; (800ff04 <tcp_pcb_remove+0x114>)
 800fe1e:	f008 f9d5 	bl	80181cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	683a      	ldr	r2, [r7, #0]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d105      	bne.n	800fe38 <tcp_pcb_remove+0x48>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68da      	ldr	r2, [r3, #12]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	e013      	b.n	800fe60 <tcp_pcb_remove+0x70>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	60fb      	str	r3, [r7, #12]
 800fe3e:	e00c      	b.n	800fe5a <tcp_pcb_remove+0x6a>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d104      	bne.n	800fe54 <tcp_pcb_remove+0x64>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68da      	ldr	r2, [r3, #12]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	60da      	str	r2, [r3, #12]
 800fe52:	e005      	b.n	800fe60 <tcp_pcb_remove+0x70>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1ef      	bne.n	800fe40 <tcp_pcb_remove+0x50>
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	2200      	movs	r2, #0
 800fe64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fe66:	6838      	ldr	r0, [r7, #0]
 800fe68:	f7ff ff72 	bl	800fd50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	7d1b      	ldrb	r3, [r3, #20]
 800fe70:	2b0a      	cmp	r3, #10
 800fe72:	d013      	beq.n	800fe9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d00f      	beq.n	800fe9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	8b5b      	ldrh	r3, [r3, #26]
 800fe80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d009      	beq.n	800fe9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	8b5b      	ldrh	r3, [r3, #26]
 800fe8c:	f043 0302 	orr.w	r3, r3, #2
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe96:	6838      	ldr	r0, [r7, #0]
 800fe98:	f003 fbc6 	bl	8013628 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	7d1b      	ldrb	r3, [r3, #20]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d020      	beq.n	800fee6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d006      	beq.n	800feba <tcp_pcb_remove+0xca>
 800feac:	4b13      	ldr	r3, [pc, #76]	; (800fefc <tcp_pcb_remove+0x10c>)
 800feae:	f640 0293 	movw	r2, #2195	; 0x893
 800feb2:	4916      	ldr	r1, [pc, #88]	; (800ff0c <tcp_pcb_remove+0x11c>)
 800feb4:	4813      	ldr	r0, [pc, #76]	; (800ff04 <tcp_pcb_remove+0x114>)
 800feb6:	f008 f989 	bl	80181cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d006      	beq.n	800fed0 <tcp_pcb_remove+0xe0>
 800fec2:	4b0e      	ldr	r3, [pc, #56]	; (800fefc <tcp_pcb_remove+0x10c>)
 800fec4:	f640 0294 	movw	r2, #2196	; 0x894
 800fec8:	4911      	ldr	r1, [pc, #68]	; (800ff10 <tcp_pcb_remove+0x120>)
 800feca:	480e      	ldr	r0, [pc, #56]	; (800ff04 <tcp_pcb_remove+0x114>)
 800fecc:	f008 f97e 	bl	80181cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d006      	beq.n	800fee6 <tcp_pcb_remove+0xf6>
 800fed8:	4b08      	ldr	r3, [pc, #32]	; (800fefc <tcp_pcb_remove+0x10c>)
 800feda:	f640 0296 	movw	r2, #2198	; 0x896
 800fede:	490d      	ldr	r1, [pc, #52]	; (800ff14 <tcp_pcb_remove+0x124>)
 800fee0:	4808      	ldr	r0, [pc, #32]	; (800ff04 <tcp_pcb_remove+0x114>)
 800fee2:	f008 f973 	bl	80181cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2200      	movs	r2, #0
 800feea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2200      	movs	r2, #0
 800fef0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fef2:	bf00      	nop
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	08019b3c 	.word	0x08019b3c
 800ff00:	0801a1a4 	.word	0x0801a1a4
 800ff04:	08019b80 	.word	0x08019b80
 800ff08:	0801a1c0 	.word	0x0801a1c0
 800ff0c:	0801a1e0 	.word	0x0801a1e0
 800ff10:	0801a1f8 	.word	0x0801a1f8
 800ff14:	0801a214 	.word	0x0801a214

0800ff18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d106      	bne.n	800ff34 <tcp_next_iss+0x1c>
 800ff26:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <tcp_next_iss+0x38>)
 800ff28:	f640 02af 	movw	r2, #2223	; 0x8af
 800ff2c:	4909      	ldr	r1, [pc, #36]	; (800ff54 <tcp_next_iss+0x3c>)
 800ff2e:	480a      	ldr	r0, [pc, #40]	; (800ff58 <tcp_next_iss+0x40>)
 800ff30:	f008 f94c 	bl	80181cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ff34:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <tcp_next_iss+0x44>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <tcp_next_iss+0x48>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	4a07      	ldr	r2, [pc, #28]	; (800ff5c <tcp_next_iss+0x44>)
 800ff40:	6013      	str	r3, [r2, #0]
  return iss;
 800ff42:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <tcp_next_iss+0x44>)
 800ff44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	08019b3c 	.word	0x08019b3c
 800ff54:	0801a22c 	.word	0x0801a22c
 800ff58:	08019b80 	.word	0x08019b80
 800ff5c:	20000144 	.word	0x20000144
 800ff60:	20008140 	.word	0x20008140

0800ff64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d106      	bne.n	800ff86 <tcp_eff_send_mss_netif+0x22>
 800ff78:	4b14      	ldr	r3, [pc, #80]	; (800ffcc <tcp_eff_send_mss_netif+0x68>)
 800ff7a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ff7e:	4914      	ldr	r1, [pc, #80]	; (800ffd0 <tcp_eff_send_mss_netif+0x6c>)
 800ff80:	4814      	ldr	r0, [pc, #80]	; (800ffd4 <tcp_eff_send_mss_netif+0x70>)
 800ff82:	f008 f923 	bl	80181cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	e019      	b.n	800ffc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ff96:	8afb      	ldrh	r3, [r7, #22]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d012      	beq.n	800ffc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ff9c:	2328      	movs	r3, #40	; 0x28
 800ff9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ffa0:	8afa      	ldrh	r2, [r7, #22]
 800ffa2:	8abb      	ldrh	r3, [r7, #20]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d904      	bls.n	800ffb2 <tcp_eff_send_mss_netif+0x4e>
 800ffa8:	8afa      	ldrh	r2, [r7, #22]
 800ffaa:	8abb      	ldrh	r3, [r7, #20]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	e000      	b.n	800ffb4 <tcp_eff_send_mss_netif+0x50>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ffb6:	8a7a      	ldrh	r2, [r7, #18]
 800ffb8:	89fb      	ldrh	r3, [r7, #14]
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	bf28      	it	cs
 800ffbe:	4613      	movcs	r3, r2
 800ffc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ffc2:	89fb      	ldrh	r3, [r7, #14]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3718      	adds	r7, #24
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	08019b3c 	.word	0x08019b3c
 800ffd0:	0801a248 	.word	0x0801a248
 800ffd4:	08019b80 	.word	0x08019b80

0800ffd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d119      	bne.n	8010020 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ffec:	4b10      	ldr	r3, [pc, #64]	; (8010030 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ffee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fff2:	4910      	ldr	r1, [pc, #64]	; (8010034 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fff4:	4810      	ldr	r0, [pc, #64]	; (8010038 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fff6:	f008 f8e9 	bl	80181cc <iprintf>

  while (pcb != NULL) {
 800fffa:	e011      	b.n	8010020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d108      	bne.n	801001a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7fe fdb8 	bl	800eb84 <tcp_abort>
      pcb = next;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	e002      	b.n	8010020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d1ea      	bne.n	800fffc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010026:	bf00      	nop
 8010028:	bf00      	nop
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	08019b3c 	.word	0x08019b3c
 8010034:	0801a270 	.word	0x0801a270
 8010038:	08019b80 	.word	0x08019b80

0801003c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d02a      	beq.n	80100a2 <tcp_netif_ip_addr_changed+0x66>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d026      	beq.n	80100a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010054:	4b15      	ldr	r3, [pc, #84]	; (80100ac <tcp_netif_ip_addr_changed+0x70>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4619      	mov	r1, r3
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff ffbc 	bl	800ffd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010060:	4b13      	ldr	r3, [pc, #76]	; (80100b0 <tcp_netif_ip_addr_changed+0x74>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4619      	mov	r1, r3
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff ffb6 	bl	800ffd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d017      	beq.n	80100a2 <tcp_netif_ip_addr_changed+0x66>
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d013      	beq.n	80100a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801007a:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <tcp_netif_ip_addr_changed+0x78>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	e00c      	b.n	801009c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d103      	bne.n	8010096 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1ef      	bne.n	8010082 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80100a2:	bf00      	nop
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	2000814c 	.word	0x2000814c
 80100b0:	20008144 	.word	0x20008144
 80100b4:	20008148 	.word	0x20008148

080100b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d007      	beq.n	80100d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fb8d 	bl	800f7ec <tcp_segs_free>
    pcb->ooseq = NULL;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80100d8:	bf00      	nop
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80100e0:	b590      	push	{r4, r7, lr}
 80100e2:	b08d      	sub	sp, #52	; 0x34
 80100e4:	af04      	add	r7, sp, #16
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d105      	bne.n	80100fc <tcp_input+0x1c>
 80100f0:	4b9b      	ldr	r3, [pc, #620]	; (8010360 <tcp_input+0x280>)
 80100f2:	2283      	movs	r2, #131	; 0x83
 80100f4:	499b      	ldr	r1, [pc, #620]	; (8010364 <tcp_input+0x284>)
 80100f6:	489c      	ldr	r0, [pc, #624]	; (8010368 <tcp_input+0x288>)
 80100f8:	f008 f868 	bl	80181cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	4a9a      	ldr	r2, [pc, #616]	; (801036c <tcp_input+0x28c>)
 8010102:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	895b      	ldrh	r3, [r3, #10]
 8010108:	2b13      	cmp	r3, #19
 801010a:	f240 83d1 	bls.w	80108b0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801010e:	4b98      	ldr	r3, [pc, #608]	; (8010370 <tcp_input+0x290>)
 8010110:	695b      	ldr	r3, [r3, #20]
 8010112:	4a97      	ldr	r2, [pc, #604]	; (8010370 <tcp_input+0x290>)
 8010114:	6812      	ldr	r2, [r2, #0]
 8010116:	4611      	mov	r1, r2
 8010118:	4618      	mov	r0, r3
 801011a:	f006 f86d 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	f040 83c7 	bne.w	80108b4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010126:	4b92      	ldr	r3, [pc, #584]	; (8010370 <tcp_input+0x290>)
 8010128:	695b      	ldr	r3, [r3, #20]
 801012a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801012e:	2be0      	cmp	r3, #224	; 0xe0
 8010130:	f000 83c0 	beq.w	80108b4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010134:	4b8d      	ldr	r3, [pc, #564]	; (801036c <tcp_input+0x28c>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	899b      	ldrh	r3, [r3, #12]
 801013a:	b29b      	uxth	r3, r3
 801013c:	4618      	mov	r0, r3
 801013e:	f7fc fc3c 	bl	800c9ba <lwip_htons>
 8010142:	4603      	mov	r3, r0
 8010144:	0b1b      	lsrs	r3, r3, #12
 8010146:	b29b      	uxth	r3, r3
 8010148:	b2db      	uxtb	r3, r3
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801014e:	7cbb      	ldrb	r3, [r7, #18]
 8010150:	2b13      	cmp	r3, #19
 8010152:	f240 83b1 	bls.w	80108b8 <tcp_input+0x7d8>
 8010156:	7cbb      	ldrb	r3, [r7, #18]
 8010158:	b29a      	uxth	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	891b      	ldrh	r3, [r3, #8]
 801015e:	429a      	cmp	r2, r3
 8010160:	f200 83aa 	bhi.w	80108b8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010164:	7cbb      	ldrb	r3, [r7, #18]
 8010166:	b29b      	uxth	r3, r3
 8010168:	3b14      	subs	r3, #20
 801016a:	b29a      	uxth	r2, r3
 801016c:	4b81      	ldr	r3, [pc, #516]	; (8010374 <tcp_input+0x294>)
 801016e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010170:	4b81      	ldr	r3, [pc, #516]	; (8010378 <tcp_input+0x298>)
 8010172:	2200      	movs	r2, #0
 8010174:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	895a      	ldrh	r2, [r3, #10]
 801017a:	7cbb      	ldrb	r3, [r7, #18]
 801017c:	b29b      	uxth	r3, r3
 801017e:	429a      	cmp	r2, r3
 8010180:	d309      	bcc.n	8010196 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010182:	4b7c      	ldr	r3, [pc, #496]	; (8010374 <tcp_input+0x294>)
 8010184:	881a      	ldrh	r2, [r3, #0]
 8010186:	4b7d      	ldr	r3, [pc, #500]	; (801037c <tcp_input+0x29c>)
 8010188:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801018a:	7cbb      	ldrb	r3, [r7, #18]
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7fd feea 	bl	800df68 <pbuf_remove_header>
 8010194:	e04e      	b.n	8010234 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d105      	bne.n	80101aa <tcp_input+0xca>
 801019e:	4b70      	ldr	r3, [pc, #448]	; (8010360 <tcp_input+0x280>)
 80101a0:	22c2      	movs	r2, #194	; 0xc2
 80101a2:	4977      	ldr	r1, [pc, #476]	; (8010380 <tcp_input+0x2a0>)
 80101a4:	4870      	ldr	r0, [pc, #448]	; (8010368 <tcp_input+0x288>)
 80101a6:	f008 f811 	bl	80181cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80101aa:	2114      	movs	r1, #20
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7fd fedb 	bl	800df68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	895a      	ldrh	r2, [r3, #10]
 80101b6:	4b71      	ldr	r3, [pc, #452]	; (801037c <tcp_input+0x29c>)
 80101b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80101ba:	4b6e      	ldr	r3, [pc, #440]	; (8010374 <tcp_input+0x294>)
 80101bc:	881a      	ldrh	r2, [r3, #0]
 80101be:	4b6f      	ldr	r3, [pc, #444]	; (801037c <tcp_input+0x29c>)
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80101c6:	4b6d      	ldr	r3, [pc, #436]	; (801037c <tcp_input+0x29c>)
 80101c8:	881b      	ldrh	r3, [r3, #0]
 80101ca:	4619      	mov	r1, r3
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f7fd fecb 	bl	800df68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	895b      	ldrh	r3, [r3, #10]
 80101d8:	8a3a      	ldrh	r2, [r7, #16]
 80101da:	429a      	cmp	r2, r3
 80101dc:	f200 836e 	bhi.w	80108bc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	4a64      	ldr	r2, [pc, #400]	; (8010378 <tcp_input+0x298>)
 80101e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	8a3a      	ldrh	r2, [r7, #16]
 80101f0:	4611      	mov	r1, r2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fd feb8 	bl	800df68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	891a      	ldrh	r2, [r3, #8]
 80101fc:	8a3b      	ldrh	r3, [r7, #16]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	b29a      	uxth	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	895b      	ldrh	r3, [r3, #10]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <tcp_input+0x13a>
 801020e:	4b54      	ldr	r3, [pc, #336]	; (8010360 <tcp_input+0x280>)
 8010210:	22df      	movs	r2, #223	; 0xdf
 8010212:	495c      	ldr	r1, [pc, #368]	; (8010384 <tcp_input+0x2a4>)
 8010214:	4854      	ldr	r0, [pc, #336]	; (8010368 <tcp_input+0x288>)
 8010216:	f007 ffd9 	bl	80181cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	891a      	ldrh	r2, [r3, #8]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	429a      	cmp	r2, r3
 8010226:	d005      	beq.n	8010234 <tcp_input+0x154>
 8010228:	4b4d      	ldr	r3, [pc, #308]	; (8010360 <tcp_input+0x280>)
 801022a:	22e0      	movs	r2, #224	; 0xe0
 801022c:	4956      	ldr	r1, [pc, #344]	; (8010388 <tcp_input+0x2a8>)
 801022e:	484e      	ldr	r0, [pc, #312]	; (8010368 <tcp_input+0x288>)
 8010230:	f007 ffcc 	bl	80181cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010234:	4b4d      	ldr	r3, [pc, #308]	; (801036c <tcp_input+0x28c>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	b29b      	uxth	r3, r3
 801023c:	4a4b      	ldr	r2, [pc, #300]	; (801036c <tcp_input+0x28c>)
 801023e:	6814      	ldr	r4, [r2, #0]
 8010240:	4618      	mov	r0, r3
 8010242:	f7fc fbba 	bl	800c9ba <lwip_htons>
 8010246:	4603      	mov	r3, r0
 8010248:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801024a:	4b48      	ldr	r3, [pc, #288]	; (801036c <tcp_input+0x28c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	885b      	ldrh	r3, [r3, #2]
 8010250:	b29b      	uxth	r3, r3
 8010252:	4a46      	ldr	r2, [pc, #280]	; (801036c <tcp_input+0x28c>)
 8010254:	6814      	ldr	r4, [r2, #0]
 8010256:	4618      	mov	r0, r3
 8010258:	f7fc fbaf 	bl	800c9ba <lwip_htons>
 801025c:	4603      	mov	r3, r0
 801025e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010260:	4b42      	ldr	r3, [pc, #264]	; (801036c <tcp_input+0x28c>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	4a41      	ldr	r2, [pc, #260]	; (801036c <tcp_input+0x28c>)
 8010268:	6814      	ldr	r4, [r2, #0]
 801026a:	4618      	mov	r0, r3
 801026c:	f7fc fbba 	bl	800c9e4 <lwip_htonl>
 8010270:	4603      	mov	r3, r0
 8010272:	6063      	str	r3, [r4, #4]
 8010274:	6863      	ldr	r3, [r4, #4]
 8010276:	4a45      	ldr	r2, [pc, #276]	; (801038c <tcp_input+0x2ac>)
 8010278:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801027a:	4b3c      	ldr	r3, [pc, #240]	; (801036c <tcp_input+0x28c>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	4a3a      	ldr	r2, [pc, #232]	; (801036c <tcp_input+0x28c>)
 8010282:	6814      	ldr	r4, [r2, #0]
 8010284:	4618      	mov	r0, r3
 8010286:	f7fc fbad 	bl	800c9e4 <lwip_htonl>
 801028a:	4603      	mov	r3, r0
 801028c:	60a3      	str	r3, [r4, #8]
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	4a3f      	ldr	r2, [pc, #252]	; (8010390 <tcp_input+0x2b0>)
 8010292:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010294:	4b35      	ldr	r3, [pc, #212]	; (801036c <tcp_input+0x28c>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	89db      	ldrh	r3, [r3, #14]
 801029a:	b29b      	uxth	r3, r3
 801029c:	4a33      	ldr	r2, [pc, #204]	; (801036c <tcp_input+0x28c>)
 801029e:	6814      	ldr	r4, [r2, #0]
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fc fb8a 	bl	800c9ba <lwip_htons>
 80102a6:	4603      	mov	r3, r0
 80102a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80102aa:	4b30      	ldr	r3, [pc, #192]	; (801036c <tcp_input+0x28c>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	899b      	ldrh	r3, [r3, #12]
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fc fb81 	bl	800c9ba <lwip_htons>
 80102b8:	4603      	mov	r3, r0
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	4b34      	ldr	r3, [pc, #208]	; (8010394 <tcp_input+0x2b4>)
 80102c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	891a      	ldrh	r2, [r3, #8]
 80102ca:	4b33      	ldr	r3, [pc, #204]	; (8010398 <tcp_input+0x2b8>)
 80102cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80102ce:	4b31      	ldr	r3, [pc, #196]	; (8010394 <tcp_input+0x2b4>)
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	f003 0303 	and.w	r3, r3, #3
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00c      	beq.n	80102f4 <tcp_input+0x214>
    tcplen++;
 80102da:	4b2f      	ldr	r3, [pc, #188]	; (8010398 <tcp_input+0x2b8>)
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	3301      	adds	r3, #1
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	4b2d      	ldr	r3, [pc, #180]	; (8010398 <tcp_input+0x2b8>)
 80102e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	891a      	ldrh	r2, [r3, #8]
 80102ea:	4b2b      	ldr	r3, [pc, #172]	; (8010398 <tcp_input+0x2b8>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	f200 82e6 	bhi.w	80108c0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80102f4:	2300      	movs	r3, #0
 80102f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102f8:	4b28      	ldr	r3, [pc, #160]	; (801039c <tcp_input+0x2bc>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	61fb      	str	r3, [r7, #28]
 80102fe:	e09d      	b.n	801043c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	7d1b      	ldrb	r3, [r3, #20]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d105      	bne.n	8010314 <tcp_input+0x234>
 8010308:	4b15      	ldr	r3, [pc, #84]	; (8010360 <tcp_input+0x280>)
 801030a:	22fb      	movs	r2, #251	; 0xfb
 801030c:	4924      	ldr	r1, [pc, #144]	; (80103a0 <tcp_input+0x2c0>)
 801030e:	4816      	ldr	r0, [pc, #88]	; (8010368 <tcp_input+0x288>)
 8010310:	f007 ff5c 	bl	80181cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	7d1b      	ldrb	r3, [r3, #20]
 8010318:	2b0a      	cmp	r3, #10
 801031a:	d105      	bne.n	8010328 <tcp_input+0x248>
 801031c:	4b10      	ldr	r3, [pc, #64]	; (8010360 <tcp_input+0x280>)
 801031e:	22fc      	movs	r2, #252	; 0xfc
 8010320:	4920      	ldr	r1, [pc, #128]	; (80103a4 <tcp_input+0x2c4>)
 8010322:	4811      	ldr	r0, [pc, #68]	; (8010368 <tcp_input+0x288>)
 8010324:	f007 ff52 	bl	80181cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d105      	bne.n	801033c <tcp_input+0x25c>
 8010330:	4b0b      	ldr	r3, [pc, #44]	; (8010360 <tcp_input+0x280>)
 8010332:	22fd      	movs	r2, #253	; 0xfd
 8010334:	491c      	ldr	r1, [pc, #112]	; (80103a8 <tcp_input+0x2c8>)
 8010336:	480c      	ldr	r0, [pc, #48]	; (8010368 <tcp_input+0x288>)
 8010338:	f007 ff48 	bl	80181cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	7a1b      	ldrb	r3, [r3, #8]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d033      	beq.n	80103ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	7a1a      	ldrb	r2, [r3, #8]
 8010348:	4b09      	ldr	r3, [pc, #36]	; (8010370 <tcp_input+0x290>)
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010350:	3301      	adds	r3, #1
 8010352:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010354:	429a      	cmp	r2, r3
 8010356:	d029      	beq.n	80103ac <tcp_input+0x2cc>
      prev = pcb;
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	61bb      	str	r3, [r7, #24]
      continue;
 801035c:	e06b      	b.n	8010436 <tcp_input+0x356>
 801035e:	bf00      	nop
 8010360:	0801a2a4 	.word	0x0801a2a4
 8010364:	0801a2d8 	.word	0x0801a2d8
 8010368:	0801a2f0 	.word	0x0801a2f0
 801036c:	20008168 	.word	0x20008168
 8010370:	20005010 	.word	0x20005010
 8010374:	2000816c 	.word	0x2000816c
 8010378:	20008170 	.word	0x20008170
 801037c:	2000816e 	.word	0x2000816e
 8010380:	0801a318 	.word	0x0801a318
 8010384:	0801a328 	.word	0x0801a328
 8010388:	0801a334 	.word	0x0801a334
 801038c:	20008178 	.word	0x20008178
 8010390:	2000817c 	.word	0x2000817c
 8010394:	20008184 	.word	0x20008184
 8010398:	20008182 	.word	0x20008182
 801039c:	2000814c 	.word	0x2000814c
 80103a0:	0801a354 	.word	0x0801a354
 80103a4:	0801a37c 	.word	0x0801a37c
 80103a8:	0801a3a8 	.word	0x0801a3a8
    }

    if (pcb->remote_port == tcphdr->src &&
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	8b1a      	ldrh	r2, [r3, #24]
 80103b0:	4b72      	ldr	r3, [pc, #456]	; (801057c <tcp_input+0x49c>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d13a      	bne.n	8010432 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	8ada      	ldrh	r2, [r3, #22]
 80103c0:	4b6e      	ldr	r3, [pc, #440]	; (801057c <tcp_input+0x49c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	885b      	ldrh	r3, [r3, #2]
 80103c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d132      	bne.n	8010432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	685a      	ldr	r2, [r3, #4]
 80103d0:	4b6b      	ldr	r3, [pc, #428]	; (8010580 <tcp_input+0x4a0>)
 80103d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d12c      	bne.n	8010432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	4b68      	ldr	r3, [pc, #416]	; (8010580 <tcp_input+0x4a0>)
 80103de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d126      	bne.n	8010432 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	69fa      	ldr	r2, [r7, #28]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d106      	bne.n	80103fc <tcp_input+0x31c>
 80103ee:	4b65      	ldr	r3, [pc, #404]	; (8010584 <tcp_input+0x4a4>)
 80103f0:	f240 120d 	movw	r2, #269	; 0x10d
 80103f4:	4964      	ldr	r1, [pc, #400]	; (8010588 <tcp_input+0x4a8>)
 80103f6:	4865      	ldr	r0, [pc, #404]	; (801058c <tcp_input+0x4ac>)
 80103f8:	f007 fee8 	bl	80181cc <iprintf>
      if (prev != NULL) {
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00a      	beq.n	8010418 <tcp_input+0x338>
        prev->next = pcb->next;
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	68da      	ldr	r2, [r3, #12]
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801040a:	4b61      	ldr	r3, [pc, #388]	; (8010590 <tcp_input+0x4b0>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010412:	4a5f      	ldr	r2, [pc, #380]	; (8010590 <tcp_input+0x4b0>)
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	69fa      	ldr	r2, [r7, #28]
 801041e:	429a      	cmp	r2, r3
 8010420:	d111      	bne.n	8010446 <tcp_input+0x366>
 8010422:	4b58      	ldr	r3, [pc, #352]	; (8010584 <tcp_input+0x4a4>)
 8010424:	f240 1215 	movw	r2, #277	; 0x115
 8010428:	495a      	ldr	r1, [pc, #360]	; (8010594 <tcp_input+0x4b4>)
 801042a:	4858      	ldr	r0, [pc, #352]	; (801058c <tcp_input+0x4ac>)
 801042c:	f007 fece 	bl	80181cc <iprintf>
      break;
 8010430:	e009      	b.n	8010446 <tcp_input+0x366>
    }
    prev = pcb;
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	61fb      	str	r3, [r7, #28]
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	2b00      	cmp	r3, #0
 8010440:	f47f af5e 	bne.w	8010300 <tcp_input+0x220>
 8010444:	e000      	b.n	8010448 <tcp_input+0x368>
      break;
 8010446:	bf00      	nop
  }

  if (pcb == NULL) {
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f040 80aa 	bne.w	80105a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010450:	4b51      	ldr	r3, [pc, #324]	; (8010598 <tcp_input+0x4b8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	61fb      	str	r3, [r7, #28]
 8010456:	e03f      	b.n	80104d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	7d1b      	ldrb	r3, [r3, #20]
 801045c:	2b0a      	cmp	r3, #10
 801045e:	d006      	beq.n	801046e <tcp_input+0x38e>
 8010460:	4b48      	ldr	r3, [pc, #288]	; (8010584 <tcp_input+0x4a4>)
 8010462:	f240 121f 	movw	r2, #287	; 0x11f
 8010466:	494d      	ldr	r1, [pc, #308]	; (801059c <tcp_input+0x4bc>)
 8010468:	4848      	ldr	r0, [pc, #288]	; (801058c <tcp_input+0x4ac>)
 801046a:	f007 feaf 	bl	80181cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	7a1b      	ldrb	r3, [r3, #8]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d009      	beq.n	801048a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	7a1a      	ldrb	r2, [r3, #8]
 801047a:	4b41      	ldr	r3, [pc, #260]	; (8010580 <tcp_input+0x4a0>)
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010482:	3301      	adds	r3, #1
 8010484:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010486:	429a      	cmp	r2, r3
 8010488:	d122      	bne.n	80104d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	8b1a      	ldrh	r2, [r3, #24]
 801048e:	4b3b      	ldr	r3, [pc, #236]	; (801057c <tcp_input+0x49c>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	b29b      	uxth	r3, r3
 8010496:	429a      	cmp	r2, r3
 8010498:	d11b      	bne.n	80104d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	8ada      	ldrh	r2, [r3, #22]
 801049e:	4b37      	ldr	r3, [pc, #220]	; (801057c <tcp_input+0x49c>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	885b      	ldrh	r3, [r3, #2]
 80104a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d113      	bne.n	80104d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	4b34      	ldr	r3, [pc, #208]	; (8010580 <tcp_input+0x4a0>)
 80104b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d10d      	bne.n	80104d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	4b31      	ldr	r3, [pc, #196]	; (8010580 <tcp_input+0x4a0>)
 80104bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104be:	429a      	cmp	r2, r3
 80104c0:	d107      	bne.n	80104d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80104c2:	69f8      	ldr	r0, [r7, #28]
 80104c4:	f000 fb56 	bl	8010b74 <tcp_timewait_input>
        }
        pbuf_free(p);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7fd fdd3 	bl	800e074 <pbuf_free>
        return;
 80104ce:	e1fd      	b.n	80108cc <tcp_input+0x7ec>
        continue;
 80104d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	61fb      	str	r3, [r7, #28]
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d1bc      	bne.n	8010458 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80104e2:	4b2f      	ldr	r3, [pc, #188]	; (80105a0 <tcp_input+0x4c0>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	617b      	str	r3, [r7, #20]
 80104e8:	e02a      	b.n	8010540 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	7a1b      	ldrb	r3, [r3, #8]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00c      	beq.n	801050c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	7a1a      	ldrb	r2, [r3, #8]
 80104f6:	4b22      	ldr	r3, [pc, #136]	; (8010580 <tcp_input+0x4a0>)
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104fe:	3301      	adds	r3, #1
 8010500:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010502:	429a      	cmp	r2, r3
 8010504:	d002      	beq.n	801050c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	61bb      	str	r3, [r7, #24]
        continue;
 801050a:	e016      	b.n	801053a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	8ada      	ldrh	r2, [r3, #22]
 8010510:	4b1a      	ldr	r3, [pc, #104]	; (801057c <tcp_input+0x49c>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	885b      	ldrh	r3, [r3, #2]
 8010516:	b29b      	uxth	r3, r3
 8010518:	429a      	cmp	r2, r3
 801051a:	d10c      	bne.n	8010536 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	4b17      	ldr	r3, [pc, #92]	; (8010580 <tcp_input+0x4a0>)
 8010522:	695b      	ldr	r3, [r3, #20]
 8010524:	429a      	cmp	r2, r3
 8010526:	d00f      	beq.n	8010548 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00d      	beq.n	801054a <tcp_input+0x46a>
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d009      	beq.n	801054a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	617b      	str	r3, [r7, #20]
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1d1      	bne.n	80104ea <tcp_input+0x40a>
 8010546:	e000      	b.n	801054a <tcp_input+0x46a>
            break;
 8010548:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d029      	beq.n	80105a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00a      	beq.n	801056c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	68da      	ldr	r2, [r3, #12]
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801055e:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <tcp_input+0x4c0>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010566:	4a0e      	ldr	r2, [pc, #56]	; (80105a0 <tcp_input+0x4c0>)
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801056c:	6978      	ldr	r0, [r7, #20]
 801056e:	f000 fa03 	bl	8010978 <tcp_listen_input>
      }
      pbuf_free(p);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fd fd7e 	bl	800e074 <pbuf_free>
      return;
 8010578:	e1a8      	b.n	80108cc <tcp_input+0x7ec>
 801057a:	bf00      	nop
 801057c:	20008168 	.word	0x20008168
 8010580:	20005010 	.word	0x20005010
 8010584:	0801a2a4 	.word	0x0801a2a4
 8010588:	0801a3d0 	.word	0x0801a3d0
 801058c:	0801a2f0 	.word	0x0801a2f0
 8010590:	2000814c 	.word	0x2000814c
 8010594:	0801a3fc 	.word	0x0801a3fc
 8010598:	20008150 	.word	0x20008150
 801059c:	0801a428 	.word	0x0801a428
 80105a0:	20008148 	.word	0x20008148
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f000 8158 	beq.w	801085c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80105ac:	4b95      	ldr	r3, [pc, #596]	; (8010804 <tcp_input+0x724>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	891a      	ldrh	r2, [r3, #8]
 80105b6:	4b93      	ldr	r3, [pc, #588]	; (8010804 <tcp_input+0x724>)
 80105b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80105ba:	4a92      	ldr	r2, [pc, #584]	; (8010804 <tcp_input+0x724>)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80105c0:	4b91      	ldr	r3, [pc, #580]	; (8010808 <tcp_input+0x728>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4a8f      	ldr	r2, [pc, #572]	; (8010804 <tcp_input+0x724>)
 80105c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80105c8:	4b90      	ldr	r3, [pc, #576]	; (801080c <tcp_input+0x72c>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80105ce:	4b90      	ldr	r3, [pc, #576]	; (8010810 <tcp_input+0x730>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80105d4:	4b8f      	ldr	r3, [pc, #572]	; (8010814 <tcp_input+0x734>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80105da:	4b8f      	ldr	r3, [pc, #572]	; (8010818 <tcp_input+0x738>)
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	f003 0308 	and.w	r3, r3, #8
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d006      	beq.n	80105f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	7b5b      	ldrb	r3, [r3, #13]
 80105ea:	f043 0301 	orr.w	r3, r3, #1
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d017      	beq.n	801062c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80105fc:	69f8      	ldr	r0, [r7, #28]
 80105fe:	f7ff f879 	bl	800f6f4 <tcp_process_refused_data>
 8010602:	4603      	mov	r3, r0
 8010604:	f113 0f0d 	cmn.w	r3, #13
 8010608:	d007      	beq.n	801061a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00c      	beq.n	801062c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010612:	4b82      	ldr	r3, [pc, #520]	; (801081c <tcp_input+0x73c>)
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d008      	beq.n	801062c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801061e:	2b00      	cmp	r3, #0
 8010620:	f040 80e3 	bne.w	80107ea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010624:	69f8      	ldr	r0, [r7, #28]
 8010626:	f003 fe03 	bl	8014230 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801062a:	e0de      	b.n	80107ea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801062c:	4a7c      	ldr	r2, [pc, #496]	; (8010820 <tcp_input+0x740>)
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010632:	69f8      	ldr	r0, [r7, #28]
 8010634:	f000 fb18 	bl	8010c68 <tcp_process>
 8010638:	4603      	mov	r3, r0
 801063a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801063c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010640:	f113 0f0d 	cmn.w	r3, #13
 8010644:	f000 80d3 	beq.w	80107ee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010648:	4b71      	ldr	r3, [pc, #452]	; (8010810 <tcp_input+0x730>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 0308 	and.w	r3, r3, #8
 8010650:	2b00      	cmp	r3, #0
 8010652:	d015      	beq.n	8010680 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801065a:	2b00      	cmp	r3, #0
 801065c:	d008      	beq.n	8010670 <tcp_input+0x590>
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010664:	69fa      	ldr	r2, [r7, #28]
 8010666:	6912      	ldr	r2, [r2, #16]
 8010668:	f06f 010d 	mvn.w	r1, #13
 801066c:	4610      	mov	r0, r2
 801066e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010670:	69f9      	ldr	r1, [r7, #28]
 8010672:	486c      	ldr	r0, [pc, #432]	; (8010824 <tcp_input+0x744>)
 8010674:	f7ff fbbc 	bl	800fdf0 <tcp_pcb_remove>
        tcp_free(pcb);
 8010678:	69f8      	ldr	r0, [r7, #28]
 801067a:	f7fd ff9b 	bl	800e5b4 <tcp_free>
 801067e:	e0da      	b.n	8010836 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010684:	4b63      	ldr	r3, [pc, #396]	; (8010814 <tcp_input+0x734>)
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01d      	beq.n	80106c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801068c:	4b61      	ldr	r3, [pc, #388]	; (8010814 <tcp_input+0x734>)
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00a      	beq.n	80106b2 <tcp_input+0x5d2>
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	6910      	ldr	r0, [r2, #16]
 80106a6:	89fa      	ldrh	r2, [r7, #14]
 80106a8:	69f9      	ldr	r1, [r7, #28]
 80106aa:	4798      	blx	r3
 80106ac:	4603      	mov	r3, r0
 80106ae:	74fb      	strb	r3, [r7, #19]
 80106b0:	e001      	b.n	80106b6 <tcp_input+0x5d6>
 80106b2:	2300      	movs	r3, #0
 80106b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106ba:	f113 0f0d 	cmn.w	r3, #13
 80106be:	f000 8098 	beq.w	80107f2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80106c2:	4b54      	ldr	r3, [pc, #336]	; (8010814 <tcp_input+0x734>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80106c8:	69f8      	ldr	r0, [r7, #28]
 80106ca:	f000 f915 	bl	80108f8 <tcp_input_delayed_close>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f040 8090 	bne.w	80107f6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80106d6:	4b4d      	ldr	r3, [pc, #308]	; (801080c <tcp_input+0x72c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d041      	beq.n	8010762 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d006      	beq.n	80106f4 <tcp_input+0x614>
 80106e6:	4b50      	ldr	r3, [pc, #320]	; (8010828 <tcp_input+0x748>)
 80106e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80106ec:	494f      	ldr	r1, [pc, #316]	; (801082c <tcp_input+0x74c>)
 80106ee:	4850      	ldr	r0, [pc, #320]	; (8010830 <tcp_input+0x750>)
 80106f0:	f007 fd6c 	bl	80181cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	8b5b      	ldrh	r3, [r3, #26]
 80106f8:	f003 0310 	and.w	r3, r3, #16
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d008      	beq.n	8010712 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010700:	4b42      	ldr	r3, [pc, #264]	; (801080c <tcp_input+0x72c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd fcb5 	bl	800e074 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801070a:	69f8      	ldr	r0, [r7, #28]
 801070c:	f7fe fa3a 	bl	800eb84 <tcp_abort>
            goto aborted;
 8010710:	e091      	b.n	8010836 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00c      	beq.n	8010736 <tcp_input+0x656>
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	6918      	ldr	r0, [r3, #16]
 8010726:	4b39      	ldr	r3, [pc, #228]	; (801080c <tcp_input+0x72c>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	2300      	movs	r3, #0
 801072c:	69f9      	ldr	r1, [r7, #28]
 801072e:	47a0      	blx	r4
 8010730:	4603      	mov	r3, r0
 8010732:	74fb      	strb	r3, [r7, #19]
 8010734:	e008      	b.n	8010748 <tcp_input+0x668>
 8010736:	4b35      	ldr	r3, [pc, #212]	; (801080c <tcp_input+0x72c>)
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	2300      	movs	r3, #0
 801073c:	69f9      	ldr	r1, [r7, #28]
 801073e:	2000      	movs	r0, #0
 8010740:	f7ff f8ae 	bl	800f8a0 <tcp_recv_null>
 8010744:	4603      	mov	r3, r0
 8010746:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010748:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801074c:	f113 0f0d 	cmn.w	r3, #13
 8010750:	d053      	beq.n	80107fa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010752:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d003      	beq.n	8010762 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801075a:	4b2c      	ldr	r3, [pc, #176]	; (801080c <tcp_input+0x72c>)
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010762:	4b2b      	ldr	r3, [pc, #172]	; (8010810 <tcp_input+0x730>)
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	f003 0320 	and.w	r3, r3, #32
 801076a:	2b00      	cmp	r3, #0
 801076c:	d030      	beq.n	80107d0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010772:	2b00      	cmp	r3, #0
 8010774:	d009      	beq.n	801078a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801077a:	7b5a      	ldrb	r2, [r3, #13]
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010780:	f042 0220 	orr.w	r2, r2, #32
 8010784:	b2d2      	uxtb	r2, r2
 8010786:	735a      	strb	r2, [r3, #13]
 8010788:	e022      	b.n	80107d0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801078e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010792:	d005      	beq.n	80107a0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010798:	3301      	adds	r3, #1
 801079a:	b29a      	uxth	r2, r3
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00b      	beq.n	80107c2 <tcp_input+0x6e2>
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	6918      	ldr	r0, [r3, #16]
 80107b4:	2300      	movs	r3, #0
 80107b6:	2200      	movs	r2, #0
 80107b8:	69f9      	ldr	r1, [r7, #28]
 80107ba:	47a0      	blx	r4
 80107bc:	4603      	mov	r3, r0
 80107be:	74fb      	strb	r3, [r7, #19]
 80107c0:	e001      	b.n	80107c6 <tcp_input+0x6e6>
 80107c2:	2300      	movs	r3, #0
 80107c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80107c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107ca:	f113 0f0d 	cmn.w	r3, #13
 80107ce:	d016      	beq.n	80107fe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80107d0:	4b13      	ldr	r3, [pc, #76]	; (8010820 <tcp_input+0x740>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80107d6:	69f8      	ldr	r0, [r7, #28]
 80107d8:	f000 f88e 	bl	80108f8 <tcp_input_delayed_close>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d128      	bne.n	8010834 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80107e2:	69f8      	ldr	r0, [r7, #28]
 80107e4:	f002 ff20 	bl	8013628 <tcp_output>
 80107e8:	e025      	b.n	8010836 <tcp_input+0x756>
        goto aborted;
 80107ea:	bf00      	nop
 80107ec:	e023      	b.n	8010836 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80107ee:	bf00      	nop
 80107f0:	e021      	b.n	8010836 <tcp_input+0x756>
              goto aborted;
 80107f2:	bf00      	nop
 80107f4:	e01f      	b.n	8010836 <tcp_input+0x756>
          goto aborted;
 80107f6:	bf00      	nop
 80107f8:	e01d      	b.n	8010836 <tcp_input+0x756>
            goto aborted;
 80107fa:	bf00      	nop
 80107fc:	e01b      	b.n	8010836 <tcp_input+0x756>
              goto aborted;
 80107fe:	bf00      	nop
 8010800:	e019      	b.n	8010836 <tcp_input+0x756>
 8010802:	bf00      	nop
 8010804:	20008158 	.word	0x20008158
 8010808:	20008168 	.word	0x20008168
 801080c:	20008188 	.word	0x20008188
 8010810:	20008185 	.word	0x20008185
 8010814:	20008180 	.word	0x20008180
 8010818:	20008184 	.word	0x20008184
 801081c:	20008182 	.word	0x20008182
 8010820:	2000818c 	.word	0x2000818c
 8010824:	2000814c 	.word	0x2000814c
 8010828:	0801a2a4 	.word	0x0801a2a4
 801082c:	0801a458 	.word	0x0801a458
 8010830:	0801a2f0 	.word	0x0801a2f0
          goto aborted;
 8010834:	bf00      	nop
    tcp_input_pcb = NULL;
 8010836:	4b27      	ldr	r3, [pc, #156]	; (80108d4 <tcp_input+0x7f4>)
 8010838:	2200      	movs	r2, #0
 801083a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801083c:	4b26      	ldr	r3, [pc, #152]	; (80108d8 <tcp_input+0x7f8>)
 801083e:	2200      	movs	r2, #0
 8010840:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010842:	4b26      	ldr	r3, [pc, #152]	; (80108dc <tcp_input+0x7fc>)
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d03f      	beq.n	80108ca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801084a:	4b24      	ldr	r3, [pc, #144]	; (80108dc <tcp_input+0x7fc>)
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	4618      	mov	r0, r3
 8010850:	f7fd fc10 	bl	800e074 <pbuf_free>
      inseg.p = NULL;
 8010854:	4b21      	ldr	r3, [pc, #132]	; (80108dc <tcp_input+0x7fc>)
 8010856:	2200      	movs	r2, #0
 8010858:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801085a:	e036      	b.n	80108ca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801085c:	4b20      	ldr	r3, [pc, #128]	; (80108e0 <tcp_input+0x800>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	899b      	ldrh	r3, [r3, #12]
 8010862:	b29b      	uxth	r3, r3
 8010864:	4618      	mov	r0, r3
 8010866:	f7fc f8a8 	bl	800c9ba <lwip_htons>
 801086a:	4603      	mov	r3, r0
 801086c:	b2db      	uxtb	r3, r3
 801086e:	f003 0304 	and.w	r3, r3, #4
 8010872:	2b00      	cmp	r3, #0
 8010874:	d118      	bne.n	80108a8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010876:	4b1b      	ldr	r3, [pc, #108]	; (80108e4 <tcp_input+0x804>)
 8010878:	6819      	ldr	r1, [r3, #0]
 801087a:	4b1b      	ldr	r3, [pc, #108]	; (80108e8 <tcp_input+0x808>)
 801087c:	881b      	ldrh	r3, [r3, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	4b1a      	ldr	r3, [pc, #104]	; (80108ec <tcp_input+0x80c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010886:	4b16      	ldr	r3, [pc, #88]	; (80108e0 <tcp_input+0x800>)
 8010888:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801088a:	885b      	ldrh	r3, [r3, #2]
 801088c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801088e:	4a14      	ldr	r2, [pc, #80]	; (80108e0 <tcp_input+0x800>)
 8010890:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010892:	8812      	ldrh	r2, [r2, #0]
 8010894:	b292      	uxth	r2, r2
 8010896:	9202      	str	r2, [sp, #8]
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	4b15      	ldr	r3, [pc, #84]	; (80108f0 <tcp_input+0x810>)
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	4b15      	ldr	r3, [pc, #84]	; (80108f4 <tcp_input+0x814>)
 80108a0:	4602      	mov	r2, r0
 80108a2:	2000      	movs	r0, #0
 80108a4:	f003 fc74 	bl	8014190 <tcp_rst>
    pbuf_free(p);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7fd fbe3 	bl	800e074 <pbuf_free>
  return;
 80108ae:	e00c      	b.n	80108ca <tcp_input+0x7ea>
    goto dropped;
 80108b0:	bf00      	nop
 80108b2:	e006      	b.n	80108c2 <tcp_input+0x7e2>
    goto dropped;
 80108b4:	bf00      	nop
 80108b6:	e004      	b.n	80108c2 <tcp_input+0x7e2>
    goto dropped;
 80108b8:	bf00      	nop
 80108ba:	e002      	b.n	80108c2 <tcp_input+0x7e2>
      goto dropped;
 80108bc:	bf00      	nop
 80108be:	e000      	b.n	80108c2 <tcp_input+0x7e2>
      goto dropped;
 80108c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f7fd fbd6 	bl	800e074 <pbuf_free>
 80108c8:	e000      	b.n	80108cc <tcp_input+0x7ec>
  return;
 80108ca:	bf00      	nop
}
 80108cc:	3724      	adds	r7, #36	; 0x24
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd90      	pop	{r4, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	2000818c 	.word	0x2000818c
 80108d8:	20008188 	.word	0x20008188
 80108dc:	20008158 	.word	0x20008158
 80108e0:	20008168 	.word	0x20008168
 80108e4:	2000817c 	.word	0x2000817c
 80108e8:	20008182 	.word	0x20008182
 80108ec:	20008178 	.word	0x20008178
 80108f0:	20005020 	.word	0x20005020
 80108f4:	20005024 	.word	0x20005024

080108f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d106      	bne.n	8010914 <tcp_input_delayed_close+0x1c>
 8010906:	4b17      	ldr	r3, [pc, #92]	; (8010964 <tcp_input_delayed_close+0x6c>)
 8010908:	f240 225a 	movw	r2, #602	; 0x25a
 801090c:	4916      	ldr	r1, [pc, #88]	; (8010968 <tcp_input_delayed_close+0x70>)
 801090e:	4817      	ldr	r0, [pc, #92]	; (801096c <tcp_input_delayed_close+0x74>)
 8010910:	f007 fc5c 	bl	80181cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010914:	4b16      	ldr	r3, [pc, #88]	; (8010970 <tcp_input_delayed_close+0x78>)
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 0310 	and.w	r3, r3, #16
 801091c:	2b00      	cmp	r3, #0
 801091e:	d01c      	beq.n	801095a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	8b5b      	ldrh	r3, [r3, #26]
 8010924:	f003 0310 	and.w	r3, r3, #16
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10d      	bne.n	8010948 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010932:	2b00      	cmp	r3, #0
 8010934:	d008      	beq.n	8010948 <tcp_input_delayed_close+0x50>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	6912      	ldr	r2, [r2, #16]
 8010940:	f06f 010e 	mvn.w	r1, #14
 8010944:	4610      	mov	r0, r2
 8010946:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	480a      	ldr	r0, [pc, #40]	; (8010974 <tcp_input_delayed_close+0x7c>)
 801094c:	f7ff fa50 	bl	800fdf0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fd fe2f 	bl	800e5b4 <tcp_free>
    return 1;
 8010956:	2301      	movs	r3, #1
 8010958:	e000      	b.n	801095c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801095a:	2300      	movs	r3, #0
}
 801095c:	4618      	mov	r0, r3
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}
 8010964:	0801a2a4 	.word	0x0801a2a4
 8010968:	0801a474 	.word	0x0801a474
 801096c:	0801a2f0 	.word	0x0801a2f0
 8010970:	20008185 	.word	0x20008185
 8010974:	2000814c 	.word	0x2000814c

08010978 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010978:	b590      	push	{r4, r7, lr}
 801097a:	b08b      	sub	sp, #44	; 0x2c
 801097c:	af04      	add	r7, sp, #16
 801097e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010980:	4b6f      	ldr	r3, [pc, #444]	; (8010b40 <tcp_listen_input+0x1c8>)
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	f003 0304 	and.w	r3, r3, #4
 8010988:	2b00      	cmp	r3, #0
 801098a:	f040 80d2 	bne.w	8010b32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d106      	bne.n	80109a2 <tcp_listen_input+0x2a>
 8010994:	4b6b      	ldr	r3, [pc, #428]	; (8010b44 <tcp_listen_input+0x1cc>)
 8010996:	f240 2281 	movw	r2, #641	; 0x281
 801099a:	496b      	ldr	r1, [pc, #428]	; (8010b48 <tcp_listen_input+0x1d0>)
 801099c:	486b      	ldr	r0, [pc, #428]	; (8010b4c <tcp_listen_input+0x1d4>)
 801099e:	f007 fc15 	bl	80181cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80109a2:	4b67      	ldr	r3, [pc, #412]	; (8010b40 <tcp_listen_input+0x1c8>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	f003 0310 	and.w	r3, r3, #16
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d019      	beq.n	80109e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ae:	4b68      	ldr	r3, [pc, #416]	; (8010b50 <tcp_listen_input+0x1d8>)
 80109b0:	6819      	ldr	r1, [r3, #0]
 80109b2:	4b68      	ldr	r3, [pc, #416]	; (8010b54 <tcp_listen_input+0x1dc>)
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	461a      	mov	r2, r3
 80109b8:	4b67      	ldr	r3, [pc, #412]	; (8010b58 <tcp_listen_input+0x1e0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109be:	4b67      	ldr	r3, [pc, #412]	; (8010b5c <tcp_listen_input+0x1e4>)
 80109c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109c2:	885b      	ldrh	r3, [r3, #2]
 80109c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109c6:	4a65      	ldr	r2, [pc, #404]	; (8010b5c <tcp_listen_input+0x1e4>)
 80109c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ca:	8812      	ldrh	r2, [r2, #0]
 80109cc:	b292      	uxth	r2, r2
 80109ce:	9202      	str	r2, [sp, #8]
 80109d0:	9301      	str	r3, [sp, #4]
 80109d2:	4b63      	ldr	r3, [pc, #396]	; (8010b60 <tcp_listen_input+0x1e8>)
 80109d4:	9300      	str	r3, [sp, #0]
 80109d6:	4b63      	ldr	r3, [pc, #396]	; (8010b64 <tcp_listen_input+0x1ec>)
 80109d8:	4602      	mov	r2, r0
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f003 fbd8 	bl	8014190 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80109e0:	e0a9      	b.n	8010b36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80109e2:	4b57      	ldr	r3, [pc, #348]	; (8010b40 <tcp_listen_input+0x1c8>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	f003 0302 	and.w	r3, r3, #2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f000 80a3 	beq.w	8010b36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	7d5b      	ldrb	r3, [r3, #21]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff f877 	bl	800fae8 <tcp_alloc>
 80109fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d111      	bne.n	8010a26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00a      	beq.n	8010a20 <tcp_listen_input+0xa8>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	6910      	ldr	r0, [r2, #16]
 8010a12:	f04f 32ff 	mov.w	r2, #4294967295
 8010a16:	2100      	movs	r1, #0
 8010a18:	4798      	blx	r3
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	73bb      	strb	r3, [r7, #14]
      return;
 8010a1e:	e08b      	b.n	8010b38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a20:	23f0      	movs	r3, #240	; 0xf0
 8010a22:	73bb      	strb	r3, [r7, #14]
      return;
 8010a24:	e088      	b.n	8010b38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010a26:	4b50      	ldr	r3, [pc, #320]	; (8010b68 <tcp_listen_input+0x1f0>)
 8010a28:	695a      	ldr	r2, [r3, #20]
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010a2e:	4b4e      	ldr	r3, [pc, #312]	; (8010b68 <tcp_listen_input+0x1f0>)
 8010a30:	691a      	ldr	r2, [r3, #16]
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	8ada      	ldrh	r2, [r3, #22]
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010a3e:	4b47      	ldr	r3, [pc, #284]	; (8010b5c <tcp_listen_input+0x1e4>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	2203      	movs	r2, #3
 8010a4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010a50:	4b41      	ldr	r3, [pc, #260]	; (8010b58 <tcp_listen_input+0x1e0>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010a62:	6978      	ldr	r0, [r7, #20]
 8010a64:	f7ff fa58 	bl	800ff18 <tcp_next_iss>
 8010a68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	693a      	ldr	r2, [r7, #16]
 8010a74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	693a      	ldr	r2, [r7, #16]
 8010a7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	693a      	ldr	r2, [r7, #16]
 8010a80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010a82:	4b35      	ldr	r3, [pc, #212]	; (8010b58 <tcp_listen_input+0x1e0>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	1e5a      	subs	r2, r3, #1
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	691a      	ldr	r2, [r3, #16]
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	7a5b      	ldrb	r3, [r3, #9]
 8010a9e:	f003 030c 	and.w	r3, r3, #12
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7a1a      	ldrb	r2, [r3, #8]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010ab0:	4b2e      	ldr	r3, [pc, #184]	; (8010b6c <tcp_listen_input+0x1f4>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	60da      	str	r2, [r3, #12]
 8010ab8:	4a2c      	ldr	r2, [pc, #176]	; (8010b6c <tcp_listen_input+0x1f4>)
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	6013      	str	r3, [r2, #0]
 8010abe:	f003 fd27 	bl	8014510 <tcp_timer_needed>
 8010ac2:	4b2b      	ldr	r3, [pc, #172]	; (8010b70 <tcp_listen_input+0x1f8>)
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010ac8:	6978      	ldr	r0, [r7, #20]
 8010aca:	f001 fd8f 	bl	80125ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010ace:	4b23      	ldr	r3, [pc, #140]	; (8010b5c <tcp_listen_input+0x1e4>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	89db      	ldrh	r3, [r3, #14]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	3304      	adds	r3, #4
 8010af0:	4618      	mov	r0, r3
 8010af2:	f005 f8eb 	bl	8015ccc <ip4_route>
 8010af6:	4601      	mov	r1, r0
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	3304      	adds	r3, #4
 8010afc:	461a      	mov	r2, r3
 8010afe:	4620      	mov	r0, r4
 8010b00:	f7ff fa30 	bl	800ff64 <tcp_eff_send_mss_netif>
 8010b04:	4603      	mov	r3, r0
 8010b06:	461a      	mov	r2, r3
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010b0c:	2112      	movs	r1, #18
 8010b0e:	6978      	ldr	r0, [r7, #20]
 8010b10:	f002 fc9c 	bl	801344c <tcp_enqueue_flags>
 8010b14:	4603      	mov	r3, r0
 8010b16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d004      	beq.n	8010b2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010b20:	2100      	movs	r1, #0
 8010b22:	6978      	ldr	r0, [r7, #20]
 8010b24:	f7fd ff70 	bl	800ea08 <tcp_abandon>
      return;
 8010b28:	e006      	b.n	8010b38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010b2a:	6978      	ldr	r0, [r7, #20]
 8010b2c:	f002 fd7c 	bl	8013628 <tcp_output>
  return;
 8010b30:	e001      	b.n	8010b36 <tcp_listen_input+0x1be>
    return;
 8010b32:	bf00      	nop
 8010b34:	e000      	b.n	8010b38 <tcp_listen_input+0x1c0>
  return;
 8010b36:	bf00      	nop
}
 8010b38:	371c      	adds	r7, #28
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd90      	pop	{r4, r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	20008184 	.word	0x20008184
 8010b44:	0801a2a4 	.word	0x0801a2a4
 8010b48:	0801a49c 	.word	0x0801a49c
 8010b4c:	0801a2f0 	.word	0x0801a2f0
 8010b50:	2000817c 	.word	0x2000817c
 8010b54:	20008182 	.word	0x20008182
 8010b58:	20008178 	.word	0x20008178
 8010b5c:	20008168 	.word	0x20008168
 8010b60:	20005020 	.word	0x20005020
 8010b64:	20005024 	.word	0x20005024
 8010b68:	20005010 	.word	0x20005010
 8010b6c:	2000814c 	.word	0x2000814c
 8010b70:	20008154 	.word	0x20008154

08010b74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af04      	add	r7, sp, #16
 8010b7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010b7c:	4b2f      	ldr	r3, [pc, #188]	; (8010c3c <tcp_timewait_input+0xc8>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	f003 0304 	and.w	r3, r3, #4
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d153      	bne.n	8010c30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d106      	bne.n	8010b9c <tcp_timewait_input+0x28>
 8010b8e:	4b2c      	ldr	r3, [pc, #176]	; (8010c40 <tcp_timewait_input+0xcc>)
 8010b90:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010b94:	492b      	ldr	r1, [pc, #172]	; (8010c44 <tcp_timewait_input+0xd0>)
 8010b96:	482c      	ldr	r0, [pc, #176]	; (8010c48 <tcp_timewait_input+0xd4>)
 8010b98:	f007 fb18 	bl	80181cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010b9c:	4b27      	ldr	r3, [pc, #156]	; (8010c3c <tcp_timewait_input+0xc8>)
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	f003 0302 	and.w	r3, r3, #2
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d02a      	beq.n	8010bfe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010ba8:	4b28      	ldr	r3, [pc, #160]	; (8010c4c <tcp_timewait_input+0xd8>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	db2d      	blt.n	8010c12 <tcp_timewait_input+0x9e>
 8010bb6:	4b25      	ldr	r3, [pc, #148]	; (8010c4c <tcp_timewait_input+0xd8>)
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bc2:	440b      	add	r3, r1
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	dc23      	bgt.n	8010c12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bca:	4b21      	ldr	r3, [pc, #132]	; (8010c50 <tcp_timewait_input+0xdc>)
 8010bcc:	6819      	ldr	r1, [r3, #0]
 8010bce:	4b21      	ldr	r3, [pc, #132]	; (8010c54 <tcp_timewait_input+0xe0>)
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	4b1d      	ldr	r3, [pc, #116]	; (8010c4c <tcp_timewait_input+0xd8>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bda:	4b1f      	ldr	r3, [pc, #124]	; (8010c58 <tcp_timewait_input+0xe4>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bde:	885b      	ldrh	r3, [r3, #2]
 8010be0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010be2:	4a1d      	ldr	r2, [pc, #116]	; (8010c58 <tcp_timewait_input+0xe4>)
 8010be4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010be6:	8812      	ldrh	r2, [r2, #0]
 8010be8:	b292      	uxth	r2, r2
 8010bea:	9202      	str	r2, [sp, #8]
 8010bec:	9301      	str	r3, [sp, #4]
 8010bee:	4b1b      	ldr	r3, [pc, #108]	; (8010c5c <tcp_timewait_input+0xe8>)
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	4b1b      	ldr	r3, [pc, #108]	; (8010c60 <tcp_timewait_input+0xec>)
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f003 faca 	bl	8014190 <tcp_rst>
      return;
 8010bfc:	e01b      	b.n	8010c36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010bfe:	4b0f      	ldr	r3, [pc, #60]	; (8010c3c <tcp_timewait_input+0xc8>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d003      	beq.n	8010c12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010c0a:	4b16      	ldr	r3, [pc, #88]	; (8010c64 <tcp_timewait_input+0xf0>)
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010c12:	4b10      	ldr	r3, [pc, #64]	; (8010c54 <tcp_timewait_input+0xe0>)
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00c      	beq.n	8010c34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f043 0302 	orr.w	r3, r3, #2
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f002 fcfd 	bl	8013628 <tcp_output>
  }
  return;
 8010c2e:	e001      	b.n	8010c34 <tcp_timewait_input+0xc0>
    return;
 8010c30:	bf00      	nop
 8010c32:	e000      	b.n	8010c36 <tcp_timewait_input+0xc2>
  return;
 8010c34:	bf00      	nop
}
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	20008184 	.word	0x20008184
 8010c40:	0801a2a4 	.word	0x0801a2a4
 8010c44:	0801a4bc 	.word	0x0801a4bc
 8010c48:	0801a2f0 	.word	0x0801a2f0
 8010c4c:	20008178 	.word	0x20008178
 8010c50:	2000817c 	.word	0x2000817c
 8010c54:	20008182 	.word	0x20008182
 8010c58:	20008168 	.word	0x20008168
 8010c5c:	20005020 	.word	0x20005020
 8010c60:	20005024 	.word	0x20005024
 8010c64:	20008140 	.word	0x20008140

08010c68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b08d      	sub	sp, #52	; 0x34
 8010c6c:	af04      	add	r7, sp, #16
 8010c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_process+0x24>
 8010c7e:	4b9d      	ldr	r3, [pc, #628]	; (8010ef4 <tcp_process+0x28c>)
 8010c80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010c84:	499c      	ldr	r1, [pc, #624]	; (8010ef8 <tcp_process+0x290>)
 8010c86:	489d      	ldr	r0, [pc, #628]	; (8010efc <tcp_process+0x294>)
 8010c88:	f007 faa0 	bl	80181cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010c8c:	4b9c      	ldr	r3, [pc, #624]	; (8010f00 <tcp_process+0x298>)
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	f003 0304 	and.w	r3, r3, #4
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d04e      	beq.n	8010d36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d108      	bne.n	8010cb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ca4:	4b97      	ldr	r3, [pc, #604]	; (8010f04 <tcp_process+0x29c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d123      	bne.n	8010cf4 <tcp_process+0x8c>
        acceptable = 1;
 8010cac:	2301      	movs	r3, #1
 8010cae:	76fb      	strb	r3, [r7, #27]
 8010cb0:	e020      	b.n	8010cf4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cb6:	4b94      	ldr	r3, [pc, #592]	; (8010f08 <tcp_process+0x2a0>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d102      	bne.n	8010cc4 <tcp_process+0x5c>
        acceptable = 1;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	76fb      	strb	r3, [r7, #27]
 8010cc2:	e017      	b.n	8010cf4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010cc4:	4b90      	ldr	r3, [pc, #576]	; (8010f08 <tcp_process+0x2a0>)
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	db10      	blt.n	8010cf4 <tcp_process+0x8c>
 8010cd2:	4b8d      	ldr	r3, [pc, #564]	; (8010f08 <tcp_process+0x2a0>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cda:	6879      	ldr	r1, [r7, #4]
 8010cdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cde:	440b      	add	r3, r1
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	dc06      	bgt.n	8010cf4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8b5b      	ldrh	r3, [r3, #26]
 8010cea:	f043 0302 	orr.w	r3, r3, #2
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010cf4:	7efb      	ldrb	r3, [r7, #27]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01b      	beq.n	8010d32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	7d1b      	ldrb	r3, [r3, #20]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <tcp_process+0xa8>
 8010d02:	4b7c      	ldr	r3, [pc, #496]	; (8010ef4 <tcp_process+0x28c>)
 8010d04:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010d08:	4980      	ldr	r1, [pc, #512]	; (8010f0c <tcp_process+0x2a4>)
 8010d0a:	487c      	ldr	r0, [pc, #496]	; (8010efc <tcp_process+0x294>)
 8010d0c:	f007 fa5e 	bl	80181cc <iprintf>
      recv_flags |= TF_RESET;
 8010d10:	4b7f      	ldr	r3, [pc, #508]	; (8010f10 <tcp_process+0x2a8>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f043 0308 	orr.w	r3, r3, #8
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	4b7d      	ldr	r3, [pc, #500]	; (8010f10 <tcp_process+0x2a8>)
 8010d1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f023 0301 	bic.w	r3, r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010d2c:	f06f 030d 	mvn.w	r3, #13
 8010d30:	e37a      	b.n	8011428 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e378      	b.n	8011428 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010d36:	4b72      	ldr	r3, [pc, #456]	; (8010f00 <tcp_process+0x298>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	f003 0302 	and.w	r3, r3, #2
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d010      	beq.n	8010d64 <tcp_process+0xfc>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	7d1b      	ldrb	r3, [r3, #20]
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d00c      	beq.n	8010d64 <tcp_process+0xfc>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7d1b      	ldrb	r3, [r3, #20]
 8010d4e:	2b03      	cmp	r3, #3
 8010d50:	d008      	beq.n	8010d64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8b5b      	ldrh	r3, [r3, #26]
 8010d56:	f043 0302 	orr.w	r3, r3, #2
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010d60:	2300      	movs	r3, #0
 8010d62:	e361      	b.n	8011428 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	8b5b      	ldrh	r3, [r3, #26]
 8010d68:	f003 0310 	and.w	r3, r3, #16
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d103      	bne.n	8010d78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010d70:	4b68      	ldr	r3, [pc, #416]	; (8010f14 <tcp_process+0x2ac>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f001 fc2f 	bl	80125ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	7d1b      	ldrb	r3, [r3, #20]
 8010d92:	3b02      	subs	r3, #2
 8010d94:	2b07      	cmp	r3, #7
 8010d96:	f200 8337 	bhi.w	8011408 <tcp_process+0x7a0>
 8010d9a:	a201      	add	r2, pc, #4	; (adr r2, 8010da0 <tcp_process+0x138>)
 8010d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da0:	08010dc1 	.word	0x08010dc1
 8010da4:	08010ff1 	.word	0x08010ff1
 8010da8:	08011169 	.word	0x08011169
 8010dac:	08011193 	.word	0x08011193
 8010db0:	080112b7 	.word	0x080112b7
 8010db4:	08011169 	.word	0x08011169
 8010db8:	08011343 	.word	0x08011343
 8010dbc:	080113d3 	.word	0x080113d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010dc0:	4b4f      	ldr	r3, [pc, #316]	; (8010f00 <tcp_process+0x298>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	f003 0310 	and.w	r3, r3, #16
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 80e4 	beq.w	8010f96 <tcp_process+0x32e>
 8010dce:	4b4c      	ldr	r3, [pc, #304]	; (8010f00 <tcp_process+0x298>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	f003 0302 	and.w	r3, r3, #2
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f000 80dd 	beq.w	8010f96 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010de0:	1c5a      	adds	r2, r3, #1
 8010de2:	4b48      	ldr	r3, [pc, #288]	; (8010f04 <tcp_process+0x29c>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	f040 80d5 	bne.w	8010f96 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010dec:	4b46      	ldr	r3, [pc, #280]	; (8010f08 <tcp_process+0x2a0>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	1c5a      	adds	r2, r3, #1
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010dfe:	4b41      	ldr	r3, [pc, #260]	; (8010f04 <tcp_process+0x29c>)
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010e06:	4b44      	ldr	r3, [pc, #272]	; (8010f18 <tcp_process+0x2b0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	89db      	ldrh	r3, [r3, #14]
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010e20:	4b39      	ldr	r3, [pc, #228]	; (8010f08 <tcp_process+0x2a0>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	1e5a      	subs	r2, r3, #1
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2204      	movs	r2, #4
 8010e2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3304      	adds	r3, #4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f004 ff47 	bl	8015ccc <ip4_route>
 8010e3e:	4601      	mov	r1, r0
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	3304      	adds	r3, #4
 8010e44:	461a      	mov	r2, r3
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7ff f88c 	bl	800ff64 <tcp_eff_send_mss_netif>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e58:	009a      	lsls	r2, r3, #2
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e5e:	005b      	lsls	r3, r3, #1
 8010e60:	f241 111c 	movw	r1, #4380	; 0x111c
 8010e64:	428b      	cmp	r3, r1
 8010e66:	bf38      	it	cc
 8010e68:	460b      	movcc	r3, r1
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d204      	bcs.n	8010e78 <tcp_process+0x210>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	e00d      	b.n	8010e94 <tcp_process+0x22c>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d904      	bls.n	8010e90 <tcp_process+0x228>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e8a:	005b      	lsls	r3, r3, #1
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	e001      	b.n	8010e94 <tcp_process+0x22c>
 8010e90:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d106      	bne.n	8010eb2 <tcp_process+0x24a>
 8010ea4:	4b13      	ldr	r3, [pc, #76]	; (8010ef4 <tcp_process+0x28c>)
 8010ea6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010eaa:	491c      	ldr	r1, [pc, #112]	; (8010f1c <tcp_process+0x2b4>)
 8010eac:	4813      	ldr	r0, [pc, #76]	; (8010efc <tcp_process+0x294>)
 8010eae:	f007 f98d 	bl	80181cc <iprintf>
        --pcb->snd_queuelen;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ec6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d12a      	bne.n	8010f24 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ed2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <tcp_process+0x280>
 8010eda:	4b06      	ldr	r3, [pc, #24]	; (8010ef4 <tcp_process+0x28c>)
 8010edc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010ee0:	490f      	ldr	r1, [pc, #60]	; (8010f20 <tcp_process+0x2b8>)
 8010ee2:	4806      	ldr	r0, [pc, #24]	; (8010efc <tcp_process+0x294>)
 8010ee4:	f007 f972 	bl	80181cc <iprintf>
          pcb->unsent = rseg->next;
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ef0:	e01c      	b.n	8010f2c <tcp_process+0x2c4>
 8010ef2:	bf00      	nop
 8010ef4:	0801a2a4 	.word	0x0801a2a4
 8010ef8:	0801a4dc 	.word	0x0801a4dc
 8010efc:	0801a2f0 	.word	0x0801a2f0
 8010f00:	20008184 	.word	0x20008184
 8010f04:	2000817c 	.word	0x2000817c
 8010f08:	20008178 	.word	0x20008178
 8010f0c:	0801a4f8 	.word	0x0801a4f8
 8010f10:	20008185 	.word	0x20008185
 8010f14:	20008140 	.word	0x20008140
 8010f18:	20008168 	.word	0x20008168
 8010f1c:	0801a518 	.word	0x0801a518
 8010f20:	0801a530 	.word	0x0801a530
        } else {
          pcb->unacked = rseg->next;
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010f2c:	69f8      	ldr	r0, [r7, #28]
 8010f2e:	f7fe fc72 	bl	800f816 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d104      	bne.n	8010f44 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f40:	861a      	strh	r2, [r3, #48]	; 0x30
 8010f42:	e006      	b.n	8010f52 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00a      	beq.n	8010f72 <tcp_process+0x30a>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	6910      	ldr	r0, [r2, #16]
 8010f66:	2200      	movs	r2, #0
 8010f68:	6879      	ldr	r1, [r7, #4]
 8010f6a:	4798      	blx	r3
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	76bb      	strb	r3, [r7, #26]
 8010f70:	e001      	b.n	8010f76 <tcp_process+0x30e>
 8010f72:	2300      	movs	r3, #0
 8010f74:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010f76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f7a:	f113 0f0d 	cmn.w	r3, #13
 8010f7e:	d102      	bne.n	8010f86 <tcp_process+0x31e>
          return ERR_ABRT;
 8010f80:	f06f 030c 	mvn.w	r3, #12
 8010f84:	e250      	b.n	8011428 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	8b5b      	ldrh	r3, [r3, #26]
 8010f8a:	f043 0302 	orr.w	r3, r3, #2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010f94:	e23a      	b.n	801140c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010f96:	4b98      	ldr	r3, [pc, #608]	; (80111f8 <tcp_process+0x590>)
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	f003 0310 	and.w	r3, r3, #16
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 8234 	beq.w	801140c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fa4:	4b95      	ldr	r3, [pc, #596]	; (80111fc <tcp_process+0x594>)
 8010fa6:	6819      	ldr	r1, [r3, #0]
 8010fa8:	4b95      	ldr	r3, [pc, #596]	; (8011200 <tcp_process+0x598>)
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	461a      	mov	r2, r3
 8010fae:	4b95      	ldr	r3, [pc, #596]	; (8011204 <tcp_process+0x59c>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fb4:	4b94      	ldr	r3, [pc, #592]	; (8011208 <tcp_process+0x5a0>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fb8:	885b      	ldrh	r3, [r3, #2]
 8010fba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fbc:	4a92      	ldr	r2, [pc, #584]	; (8011208 <tcp_process+0x5a0>)
 8010fbe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fc0:	8812      	ldrh	r2, [r2, #0]
 8010fc2:	b292      	uxth	r2, r2
 8010fc4:	9202      	str	r2, [sp, #8]
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	4b90      	ldr	r3, [pc, #576]	; (801120c <tcp_process+0x5a4>)
 8010fca:	9300      	str	r3, [sp, #0]
 8010fcc:	4b90      	ldr	r3, [pc, #576]	; (8011210 <tcp_process+0x5a8>)
 8010fce:	4602      	mov	r2, r0
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f003 f8dd 	bl	8014190 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fdc:	2b05      	cmp	r3, #5
 8010fde:	f200 8215 	bhi.w	801140c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f002 fea9 	bl	8013d40 <tcp_rexmit_rto>
      break;
 8010fee:	e20d      	b.n	801140c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010ff0:	4b81      	ldr	r3, [pc, #516]	; (80111f8 <tcp_process+0x590>)
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	f003 0310 	and.w	r3, r3, #16
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f000 80a1 	beq.w	8011140 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ffe:	4b7f      	ldr	r3, [pc, #508]	; (80111fc <tcp_process+0x594>)
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	3b01      	subs	r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	db7e      	blt.n	801110c <tcp_process+0x4a4>
 801100e:	4b7b      	ldr	r3, [pc, #492]	; (80111fc <tcp_process+0x594>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	dc77      	bgt.n	801110c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2204      	movs	r2, #4
 8011020:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011026:	2b00      	cmp	r3, #0
 8011028:	d102      	bne.n	8011030 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801102a:	23fa      	movs	r3, #250	; 0xfa
 801102c:	76bb      	strb	r3, [r7, #26]
 801102e:	e01d      	b.n	801106c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_process+0x3e0>
 801103a:	4b76      	ldr	r3, [pc, #472]	; (8011214 <tcp_process+0x5ac>)
 801103c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011040:	4975      	ldr	r1, [pc, #468]	; (8011218 <tcp_process+0x5b0>)
 8011042:	4876      	ldr	r0, [pc, #472]	; (801121c <tcp_process+0x5b4>)
 8011044:	f007 f8c2 	bl	80181cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801104c:	699b      	ldr	r3, [r3, #24]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00a      	beq.n	8011068 <tcp_process+0x400>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	6910      	ldr	r0, [r2, #16]
 801105c:	2200      	movs	r2, #0
 801105e:	6879      	ldr	r1, [r7, #4]
 8011060:	4798      	blx	r3
 8011062:	4603      	mov	r3, r0
 8011064:	76bb      	strb	r3, [r7, #26]
 8011066:	e001      	b.n	801106c <tcp_process+0x404>
 8011068:	23f0      	movs	r3, #240	; 0xf0
 801106a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801106c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00a      	beq.n	801108a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011074:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011078:	f113 0f0d 	cmn.w	r3, #13
 801107c:	d002      	beq.n	8011084 <tcp_process+0x41c>
              tcp_abort(pcb);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7fd fd80 	bl	800eb84 <tcp_abort>
            }
            return ERR_ABRT;
 8011084:	f06f 030c 	mvn.w	r3, #12
 8011088:	e1ce      	b.n	8011428 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fae0 	bl	8011650 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011090:	4b63      	ldr	r3, [pc, #396]	; (8011220 <tcp_process+0x5b8>)
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d005      	beq.n	80110a4 <tcp_process+0x43c>
            recv_acked--;
 8011098:	4b61      	ldr	r3, [pc, #388]	; (8011220 <tcp_process+0x5b8>)
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	3b01      	subs	r3, #1
 801109e:	b29a      	uxth	r2, r3
 80110a0:	4b5f      	ldr	r3, [pc, #380]	; (8011220 <tcp_process+0x5b8>)
 80110a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110a8:	009a      	lsls	r2, r3, #2
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80110b4:	428b      	cmp	r3, r1
 80110b6:	bf38      	it	cc
 80110b8:	460b      	movcc	r3, r1
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d204      	bcs.n	80110c8 <tcp_process+0x460>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	e00d      	b.n	80110e4 <tcp_process+0x47c>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d904      	bls.n	80110e0 <tcp_process+0x478>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	b29b      	uxth	r3, r3
 80110de:	e001      	b.n	80110e4 <tcp_process+0x47c>
 80110e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80110ea:	4b4e      	ldr	r3, [pc, #312]	; (8011224 <tcp_process+0x5bc>)
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	f003 0320 	and.w	r3, r3, #32
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d037      	beq.n	8011166 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	8b5b      	ldrh	r3, [r3, #26]
 80110fa:	f043 0302 	orr.w	r3, r3, #2
 80110fe:	b29a      	uxth	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2207      	movs	r2, #7
 8011108:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801110a:	e02c      	b.n	8011166 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801110c:	4b3b      	ldr	r3, [pc, #236]	; (80111fc <tcp_process+0x594>)
 801110e:	6819      	ldr	r1, [r3, #0]
 8011110:	4b3b      	ldr	r3, [pc, #236]	; (8011200 <tcp_process+0x598>)
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	461a      	mov	r2, r3
 8011116:	4b3b      	ldr	r3, [pc, #236]	; (8011204 <tcp_process+0x59c>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801111c:	4b3a      	ldr	r3, [pc, #232]	; (8011208 <tcp_process+0x5a0>)
 801111e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011120:	885b      	ldrh	r3, [r3, #2]
 8011122:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011124:	4a38      	ldr	r2, [pc, #224]	; (8011208 <tcp_process+0x5a0>)
 8011126:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011128:	8812      	ldrh	r2, [r2, #0]
 801112a:	b292      	uxth	r2, r2
 801112c:	9202      	str	r2, [sp, #8]
 801112e:	9301      	str	r3, [sp, #4]
 8011130:	4b36      	ldr	r3, [pc, #216]	; (801120c <tcp_process+0x5a4>)
 8011132:	9300      	str	r3, [sp, #0]
 8011134:	4b36      	ldr	r3, [pc, #216]	; (8011210 <tcp_process+0x5a8>)
 8011136:	4602      	mov	r2, r0
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f003 f829 	bl	8014190 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801113e:	e167      	b.n	8011410 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011140:	4b2d      	ldr	r3, [pc, #180]	; (80111f8 <tcp_process+0x590>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	f003 0302 	and.w	r3, r3, #2
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 8161 	beq.w	8011410 <tcp_process+0x7a8>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011152:	1e5a      	subs	r2, r3, #1
 8011154:	4b2b      	ldr	r3, [pc, #172]	; (8011204 <tcp_process+0x59c>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	429a      	cmp	r2, r3
 801115a:	f040 8159 	bne.w	8011410 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f002 fe10 	bl	8013d84 <tcp_rexmit>
      break;
 8011164:	e154      	b.n	8011410 <tcp_process+0x7a8>
 8011166:	e153      	b.n	8011410 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 fa71 	bl	8011650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801116e:	4b2d      	ldr	r3, [pc, #180]	; (8011224 <tcp_process+0x5bc>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	f003 0320 	and.w	r3, r3, #32
 8011176:	2b00      	cmp	r3, #0
 8011178:	f000 814c 	beq.w	8011414 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	8b5b      	ldrh	r3, [r3, #26]
 8011180:	f043 0302 	orr.w	r3, r3, #2
 8011184:	b29a      	uxth	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2207      	movs	r2, #7
 801118e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011190:	e140      	b.n	8011414 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 fa5c 	bl	8011650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011198:	4b22      	ldr	r3, [pc, #136]	; (8011224 <tcp_process+0x5bc>)
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	f003 0320 	and.w	r3, r3, #32
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d071      	beq.n	8011288 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111a4:	4b14      	ldr	r3, [pc, #80]	; (80111f8 <tcp_process+0x590>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	f003 0310 	and.w	r3, r3, #16
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d060      	beq.n	8011272 <tcp_process+0x60a>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b4:	4b11      	ldr	r3, [pc, #68]	; (80111fc <tcp_process+0x594>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d15a      	bne.n	8011272 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d156      	bne.n	8011272 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	8b5b      	ldrh	r3, [r3, #26]
 80111c8:	f043 0302 	orr.w	r3, r3, #2
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f7fe fdbc 	bl	800fd50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80111d8:	4b13      	ldr	r3, [pc, #76]	; (8011228 <tcp_process+0x5c0>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d105      	bne.n	80111ee <tcp_process+0x586>
 80111e2:	4b11      	ldr	r3, [pc, #68]	; (8011228 <tcp_process+0x5c0>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	4a0f      	ldr	r2, [pc, #60]	; (8011228 <tcp_process+0x5c0>)
 80111ea:	6013      	str	r3, [r2, #0]
 80111ec:	e02e      	b.n	801124c <tcp_process+0x5e4>
 80111ee:	4b0e      	ldr	r3, [pc, #56]	; (8011228 <tcp_process+0x5c0>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	617b      	str	r3, [r7, #20]
 80111f4:	e027      	b.n	8011246 <tcp_process+0x5de>
 80111f6:	bf00      	nop
 80111f8:	20008184 	.word	0x20008184
 80111fc:	2000817c 	.word	0x2000817c
 8011200:	20008182 	.word	0x20008182
 8011204:	20008178 	.word	0x20008178
 8011208:	20008168 	.word	0x20008168
 801120c:	20005020 	.word	0x20005020
 8011210:	20005024 	.word	0x20005024
 8011214:	0801a2a4 	.word	0x0801a2a4
 8011218:	0801a544 	.word	0x0801a544
 801121c:	0801a2f0 	.word	0x0801a2f0
 8011220:	20008180 	.word	0x20008180
 8011224:	20008185 	.word	0x20008185
 8011228:	2000814c 	.word	0x2000814c
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	429a      	cmp	r2, r3
 8011234:	d104      	bne.n	8011240 <tcp_process+0x5d8>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	68da      	ldr	r2, [r3, #12]
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	60da      	str	r2, [r3, #12]
 801123e:	e005      	b.n	801124c <tcp_process+0x5e4>
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	617b      	str	r3, [r7, #20]
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1ef      	bne.n	801122c <tcp_process+0x5c4>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	60da      	str	r2, [r3, #12]
 8011252:	4b77      	ldr	r3, [pc, #476]	; (8011430 <tcp_process+0x7c8>)
 8011254:	2201      	movs	r2, #1
 8011256:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	220a      	movs	r2, #10
 801125c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801125e:	4b75      	ldr	r3, [pc, #468]	; (8011434 <tcp_process+0x7cc>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	60da      	str	r2, [r3, #12]
 8011266:	4a73      	ldr	r2, [pc, #460]	; (8011434 <tcp_process+0x7cc>)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6013      	str	r3, [r2, #0]
 801126c:	f003 f950 	bl	8014510 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011270:	e0d2      	b.n	8011418 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	8b5b      	ldrh	r3, [r3, #26]
 8011276:	f043 0302 	orr.w	r3, r3, #2
 801127a:	b29a      	uxth	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2208      	movs	r2, #8
 8011284:	751a      	strb	r2, [r3, #20]
      break;
 8011286:	e0c7      	b.n	8011418 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011288:	4b6b      	ldr	r3, [pc, #428]	; (8011438 <tcp_process+0x7d0>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	f003 0310 	and.w	r3, r3, #16
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 80c1 	beq.w	8011418 <tcp_process+0x7b0>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801129a:	4b68      	ldr	r3, [pc, #416]	; (801143c <tcp_process+0x7d4>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	429a      	cmp	r2, r3
 80112a0:	f040 80ba 	bne.w	8011418 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f040 80b5 	bne.w	8011418 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2206      	movs	r2, #6
 80112b2:	751a      	strb	r2, [r3, #20]
      break;
 80112b4:	e0b0      	b.n	8011418 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 f9ca 	bl	8011650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80112bc:	4b60      	ldr	r3, [pc, #384]	; (8011440 <tcp_process+0x7d8>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	f003 0320 	and.w	r3, r3, #32
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	f000 80a9 	beq.w	801141c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8b5b      	ldrh	r3, [r3, #26]
 80112ce:	f043 0302 	orr.w	r3, r3, #2
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7fe fd39 	bl	800fd50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80112de:	4b59      	ldr	r3, [pc, #356]	; (8011444 <tcp_process+0x7dc>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d105      	bne.n	80112f4 <tcp_process+0x68c>
 80112e8:	4b56      	ldr	r3, [pc, #344]	; (8011444 <tcp_process+0x7dc>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	4a55      	ldr	r2, [pc, #340]	; (8011444 <tcp_process+0x7dc>)
 80112f0:	6013      	str	r3, [r2, #0]
 80112f2:	e013      	b.n	801131c <tcp_process+0x6b4>
 80112f4:	4b53      	ldr	r3, [pc, #332]	; (8011444 <tcp_process+0x7dc>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	613b      	str	r3, [r7, #16]
 80112fa:	e00c      	b.n	8011316 <tcp_process+0x6ae>
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	429a      	cmp	r2, r3
 8011304:	d104      	bne.n	8011310 <tcp_process+0x6a8>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	68da      	ldr	r2, [r3, #12]
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	60da      	str	r2, [r3, #12]
 801130e:	e005      	b.n	801131c <tcp_process+0x6b4>
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	613b      	str	r3, [r7, #16]
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d1ef      	bne.n	80112fc <tcp_process+0x694>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	60da      	str	r2, [r3, #12]
 8011322:	4b43      	ldr	r3, [pc, #268]	; (8011430 <tcp_process+0x7c8>)
 8011324:	2201      	movs	r2, #1
 8011326:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	220a      	movs	r2, #10
 801132c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801132e:	4b41      	ldr	r3, [pc, #260]	; (8011434 <tcp_process+0x7cc>)
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	60da      	str	r2, [r3, #12]
 8011336:	4a3f      	ldr	r2, [pc, #252]	; (8011434 <tcp_process+0x7cc>)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6013      	str	r3, [r2, #0]
 801133c:	f003 f8e8 	bl	8014510 <tcp_timer_needed>
      }
      break;
 8011340:	e06c      	b.n	801141c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 f984 	bl	8011650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011348:	4b3b      	ldr	r3, [pc, #236]	; (8011438 <tcp_process+0x7d0>)
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	f003 0310 	and.w	r3, r3, #16
 8011350:	2b00      	cmp	r3, #0
 8011352:	d065      	beq.n	8011420 <tcp_process+0x7b8>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011358:	4b38      	ldr	r3, [pc, #224]	; (801143c <tcp_process+0x7d4>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	429a      	cmp	r2, r3
 801135e:	d15f      	bne.n	8011420 <tcp_process+0x7b8>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011364:	2b00      	cmp	r3, #0
 8011366:	d15b      	bne.n	8011420 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7fe fcf1 	bl	800fd50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801136e:	4b35      	ldr	r3, [pc, #212]	; (8011444 <tcp_process+0x7dc>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	429a      	cmp	r2, r3
 8011376:	d105      	bne.n	8011384 <tcp_process+0x71c>
 8011378:	4b32      	ldr	r3, [pc, #200]	; (8011444 <tcp_process+0x7dc>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	4a31      	ldr	r2, [pc, #196]	; (8011444 <tcp_process+0x7dc>)
 8011380:	6013      	str	r3, [r2, #0]
 8011382:	e013      	b.n	80113ac <tcp_process+0x744>
 8011384:	4b2f      	ldr	r3, [pc, #188]	; (8011444 <tcp_process+0x7dc>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	60fb      	str	r3, [r7, #12]
 801138a:	e00c      	b.n	80113a6 <tcp_process+0x73e>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d104      	bne.n	80113a0 <tcp_process+0x738>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68da      	ldr	r2, [r3, #12]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	60da      	str	r2, [r3, #12]
 801139e:	e005      	b.n	80113ac <tcp_process+0x744>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1ef      	bne.n	801138c <tcp_process+0x724>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	60da      	str	r2, [r3, #12]
 80113b2:	4b1f      	ldr	r3, [pc, #124]	; (8011430 <tcp_process+0x7c8>)
 80113b4:	2201      	movs	r2, #1
 80113b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	220a      	movs	r2, #10
 80113bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80113be:	4b1d      	ldr	r3, [pc, #116]	; (8011434 <tcp_process+0x7cc>)
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	60da      	str	r2, [r3, #12]
 80113c6:	4a1b      	ldr	r2, [pc, #108]	; (8011434 <tcp_process+0x7cc>)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6013      	str	r3, [r2, #0]
 80113cc:	f003 f8a0 	bl	8014510 <tcp_timer_needed>
      }
      break;
 80113d0:	e026      	b.n	8011420 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f93c 	bl	8011650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80113d8:	4b17      	ldr	r3, [pc, #92]	; (8011438 <tcp_process+0x7d0>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	f003 0310 	and.w	r3, r3, #16
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d01f      	beq.n	8011424 <tcp_process+0x7bc>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113e8:	4b14      	ldr	r3, [pc, #80]	; (801143c <tcp_process+0x7d4>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d119      	bne.n	8011424 <tcp_process+0x7bc>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d115      	bne.n	8011424 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80113f8:	4b11      	ldr	r3, [pc, #68]	; (8011440 <tcp_process+0x7d8>)
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f043 0310 	orr.w	r3, r3, #16
 8011400:	b2da      	uxtb	r2, r3
 8011402:	4b0f      	ldr	r3, [pc, #60]	; (8011440 <tcp_process+0x7d8>)
 8011404:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011406:	e00d      	b.n	8011424 <tcp_process+0x7bc>
    default:
      break;
 8011408:	bf00      	nop
 801140a:	e00c      	b.n	8011426 <tcp_process+0x7be>
      break;
 801140c:	bf00      	nop
 801140e:	e00a      	b.n	8011426 <tcp_process+0x7be>
      break;
 8011410:	bf00      	nop
 8011412:	e008      	b.n	8011426 <tcp_process+0x7be>
      break;
 8011414:	bf00      	nop
 8011416:	e006      	b.n	8011426 <tcp_process+0x7be>
      break;
 8011418:	bf00      	nop
 801141a:	e004      	b.n	8011426 <tcp_process+0x7be>
      break;
 801141c:	bf00      	nop
 801141e:	e002      	b.n	8011426 <tcp_process+0x7be>
      break;
 8011420:	bf00      	nop
 8011422:	e000      	b.n	8011426 <tcp_process+0x7be>
      break;
 8011424:	bf00      	nop
  }
  return ERR_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3724      	adds	r7, #36	; 0x24
 801142c:	46bd      	mov	sp, r7
 801142e:	bd90      	pop	{r4, r7, pc}
 8011430:	20008154 	.word	0x20008154
 8011434:	20008150 	.word	0x20008150
 8011438:	20008184 	.word	0x20008184
 801143c:	2000817c 	.word	0x2000817c
 8011440:	20008185 	.word	0x20008185
 8011444:	2000814c 	.word	0x2000814c

08011448 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011448:	b590      	push	{r4, r7, lr}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d106      	bne.n	8011466 <tcp_oos_insert_segment+0x1e>
 8011458:	4b3b      	ldr	r3, [pc, #236]	; (8011548 <tcp_oos_insert_segment+0x100>)
 801145a:	f240 421f 	movw	r2, #1055	; 0x41f
 801145e:	493b      	ldr	r1, [pc, #236]	; (801154c <tcp_oos_insert_segment+0x104>)
 8011460:	483b      	ldr	r0, [pc, #236]	; (8011550 <tcp_oos_insert_segment+0x108>)
 8011462:	f006 feb3 	bl	80181cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	899b      	ldrh	r3, [r3, #12]
 801146c:	b29b      	uxth	r3, r3
 801146e:	4618      	mov	r0, r3
 8011470:	f7fb faa3 	bl	800c9ba <lwip_htons>
 8011474:	4603      	mov	r3, r0
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	d028      	beq.n	80114d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011480:	6838      	ldr	r0, [r7, #0]
 8011482:	f7fe f9b3 	bl	800f7ec <tcp_segs_free>
    next = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	603b      	str	r3, [r7, #0]
 801148a:	e056      	b.n	801153a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	899b      	ldrh	r3, [r3, #12]
 8011492:	b29b      	uxth	r3, r3
 8011494:	4618      	mov	r0, r3
 8011496:	f7fb fa90 	bl	800c9ba <lwip_htons>
 801149a:	4603      	mov	r3, r0
 801149c:	b2db      	uxtb	r3, r3
 801149e:	f003 0301 	and.w	r3, r3, #1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00d      	beq.n	80114c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	899b      	ldrh	r3, [r3, #12]
 80114ac:	b29c      	uxth	r4, r3
 80114ae:	2001      	movs	r0, #1
 80114b0:	f7fb fa83 	bl	800c9ba <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	461a      	mov	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	4322      	orrs	r2, r4
 80114be:	b292      	uxth	r2, r2
 80114c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	f7fe f9a2 	bl	800f816 <tcp_seg_free>
    while (next &&
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00e      	beq.n	80114f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	891b      	ldrh	r3, [r3, #8]
 80114dc:	461a      	mov	r2, r3
 80114de:	4b1d      	ldr	r3, [pc, #116]	; (8011554 <tcp_oos_insert_segment+0x10c>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	441a      	add	r2, r3
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	8909      	ldrh	r1, [r1, #8]
 80114ee:	440b      	add	r3, r1
 80114f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	daca      	bge.n	801148c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d01e      	beq.n	801153a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	891b      	ldrh	r3, [r3, #8]
 8011500:	461a      	mov	r2, r3
 8011502:	4b14      	ldr	r3, [pc, #80]	; (8011554 <tcp_oos_insert_segment+0x10c>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	441a      	add	r2, r3
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011510:	2b00      	cmp	r3, #0
 8011512:	dd12      	ble.n	801153a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	b29a      	uxth	r2, r3
 801151c:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <tcp_oos_insert_segment+0x10c>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	b29b      	uxth	r3, r3
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	b29a      	uxth	r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	685a      	ldr	r2, [r3, #4]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	891b      	ldrh	r3, [r3, #8]
 8011532:	4619      	mov	r1, r3
 8011534:	4610      	mov	r0, r2
 8011536:	f7fc fc17 	bl	800dd68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	683a      	ldr	r2, [r7, #0]
 801153e:	601a      	str	r2, [r3, #0]
}
 8011540:	bf00      	nop
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	bd90      	pop	{r4, r7, pc}
 8011548:	0801a2a4 	.word	0x0801a2a4
 801154c:	0801a564 	.word	0x0801a564
 8011550:	0801a2f0 	.word	0x0801a2f0
 8011554:	20008178 	.word	0x20008178

08011558 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011558:	b5b0      	push	{r4, r5, r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	60f8      	str	r0, [r7, #12]
 8011560:	60b9      	str	r1, [r7, #8]
 8011562:	607a      	str	r2, [r7, #4]
 8011564:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011566:	e03e      	b.n	80115e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	4618      	mov	r0, r3
 8011578:	f7fc fe04 	bl	800e184 <pbuf_clen>
 801157c:	4603      	mov	r3, r0
 801157e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011586:	8a7a      	ldrh	r2, [r7, #18]
 8011588:	429a      	cmp	r2, r3
 801158a:	d906      	bls.n	801159a <tcp_free_acked_segments+0x42>
 801158c:	4b2a      	ldr	r3, [pc, #168]	; (8011638 <tcp_free_acked_segments+0xe0>)
 801158e:	f240 4257 	movw	r2, #1111	; 0x457
 8011592:	492a      	ldr	r1, [pc, #168]	; (801163c <tcp_free_acked_segments+0xe4>)
 8011594:	482a      	ldr	r0, [pc, #168]	; (8011640 <tcp_free_acked_segments+0xe8>)
 8011596:	f006 fe19 	bl	80181cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80115a0:	8a7b      	ldrh	r3, [r7, #18]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	891a      	ldrh	r2, [r3, #8]
 80115b0:	4b24      	ldr	r3, [pc, #144]	; (8011644 <tcp_free_acked_segments+0xec>)
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	4413      	add	r3, r2
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	4b22      	ldr	r3, [pc, #136]	; (8011644 <tcp_free_acked_segments+0xec>)
 80115ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80115bc:	6978      	ldr	r0, [r7, #20]
 80115be:	f7fe f92a 	bl	800f816 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00c      	beq.n	80115e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d109      	bne.n	80115e6 <tcp_free_acked_segments+0x8e>
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <tcp_free_acked_segments+0x8e>
 80115d8:	4b17      	ldr	r3, [pc, #92]	; (8011638 <tcp_free_acked_segments+0xe0>)
 80115da:	f240 4261 	movw	r2, #1121	; 0x461
 80115de:	491a      	ldr	r1, [pc, #104]	; (8011648 <tcp_free_acked_segments+0xf0>)
 80115e0:	4817      	ldr	r0, [pc, #92]	; (8011640 <tcp_free_acked_segments+0xe8>)
 80115e2:	f006 fdf3 	bl	80181cc <iprintf>
  while (seg_list != NULL &&
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d020      	beq.n	801162e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fb f9f6 	bl	800c9e4 <lwip_htonl>
 80115f8:	4604      	mov	r4, r0
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	891b      	ldrh	r3, [r3, #8]
 80115fe:	461d      	mov	r5, r3
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	899b      	ldrh	r3, [r3, #12]
 8011606:	b29b      	uxth	r3, r3
 8011608:	4618      	mov	r0, r3
 801160a:	f7fb f9d6 	bl	800c9ba <lwip_htons>
 801160e:	4603      	mov	r3, r0
 8011610:	b2db      	uxtb	r3, r3
 8011612:	f003 0303 	and.w	r3, r3, #3
 8011616:	2b00      	cmp	r3, #0
 8011618:	d001      	beq.n	801161e <tcp_free_acked_segments+0xc6>
 801161a:	2301      	movs	r3, #1
 801161c:	e000      	b.n	8011620 <tcp_free_acked_segments+0xc8>
 801161e:	2300      	movs	r3, #0
 8011620:	442b      	add	r3, r5
 8011622:	18e2      	adds	r2, r4, r3
 8011624:	4b09      	ldr	r3, [pc, #36]	; (801164c <tcp_free_acked_segments+0xf4>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801162a:	2b00      	cmp	r3, #0
 801162c:	dd9c      	ble.n	8011568 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801162e:	68bb      	ldr	r3, [r7, #8]
}
 8011630:	4618      	mov	r0, r3
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bdb0      	pop	{r4, r5, r7, pc}
 8011638:	0801a2a4 	.word	0x0801a2a4
 801163c:	0801a58c 	.word	0x0801a58c
 8011640:	0801a2f0 	.word	0x0801a2f0
 8011644:	20008180 	.word	0x20008180
 8011648:	0801a5b4 	.word	0x0801a5b4
 801164c:	2000817c 	.word	0x2000817c

08011650 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011650:	b5b0      	push	{r4, r5, r7, lr}
 8011652:	b094      	sub	sp, #80	; 0x50
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011658:	2300      	movs	r3, #0
 801165a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d106      	bne.n	8011670 <tcp_receive+0x20>
 8011662:	4b91      	ldr	r3, [pc, #580]	; (80118a8 <tcp_receive+0x258>)
 8011664:	f240 427b 	movw	r2, #1147	; 0x47b
 8011668:	4990      	ldr	r1, [pc, #576]	; (80118ac <tcp_receive+0x25c>)
 801166a:	4891      	ldr	r0, [pc, #580]	; (80118b0 <tcp_receive+0x260>)
 801166c:	f006 fdae 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	7d1b      	ldrb	r3, [r3, #20]
 8011674:	2b03      	cmp	r3, #3
 8011676:	d806      	bhi.n	8011686 <tcp_receive+0x36>
 8011678:	4b8b      	ldr	r3, [pc, #556]	; (80118a8 <tcp_receive+0x258>)
 801167a:	f240 427c 	movw	r2, #1148	; 0x47c
 801167e:	498d      	ldr	r1, [pc, #564]	; (80118b4 <tcp_receive+0x264>)
 8011680:	488b      	ldr	r0, [pc, #556]	; (80118b0 <tcp_receive+0x260>)
 8011682:	f006 fda3 	bl	80181cc <iprintf>

  if (flags & TCP_ACK) {
 8011686:	4b8c      	ldr	r3, [pc, #560]	; (80118b8 <tcp_receive+0x268>)
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	f003 0310 	and.w	r3, r3, #16
 801168e:	2b00      	cmp	r3, #0
 8011690:	f000 8264 	beq.w	8011b5c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801169a:	461a      	mov	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116a0:	4413      	add	r3, r2
 80116a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80116a8:	4b84      	ldr	r3, [pc, #528]	; (80118bc <tcp_receive+0x26c>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	1ad3      	subs	r3, r2, r3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	db1b      	blt.n	80116ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80116b6:	4b81      	ldr	r3, [pc, #516]	; (80118bc <tcp_receive+0x26c>)
 80116b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d106      	bne.n	80116cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80116c2:	4b7f      	ldr	r3, [pc, #508]	; (80118c0 <tcp_receive+0x270>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	db0e      	blt.n	80116ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80116d0:	4b7b      	ldr	r3, [pc, #492]	; (80118c0 <tcp_receive+0x270>)
 80116d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d125      	bne.n	8011724 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80116d8:	4b7a      	ldr	r3, [pc, #488]	; (80118c4 <tcp_receive+0x274>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	89db      	ldrh	r3, [r3, #14]
 80116de:	b29a      	uxth	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d91c      	bls.n	8011724 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80116ea:	4b76      	ldr	r3, [pc, #472]	; (80118c4 <tcp_receive+0x274>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	89db      	ldrh	r3, [r3, #14]
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011704:	429a      	cmp	r2, r3
 8011706:	d205      	bcs.n	8011714 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011714:	4b69      	ldr	r3, [pc, #420]	; (80118bc <tcp_receive+0x26c>)
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801171c:	4b68      	ldr	r3, [pc, #416]	; (80118c0 <tcp_receive+0x270>)
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011724:	4b66      	ldr	r3, [pc, #408]	; (80118c0 <tcp_receive+0x270>)
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	dc58      	bgt.n	80117e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011732:	4b65      	ldr	r3, [pc, #404]	; (80118c8 <tcp_receive+0x278>)
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d14b      	bne.n	80117d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011744:	4413      	add	r3, r2
 8011746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011748:	429a      	cmp	r2, r3
 801174a:	d142      	bne.n	80117d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011752:	2b00      	cmp	r3, #0
 8011754:	db3d      	blt.n	80117d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801175a:	4b59      	ldr	r3, [pc, #356]	; (80118c0 <tcp_receive+0x270>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	429a      	cmp	r2, r3
 8011760:	d137      	bne.n	80117d2 <tcp_receive+0x182>
              found_dupack = 1;
 8011762:	2301      	movs	r3, #1
 8011764:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801176c:	2bff      	cmp	r3, #255	; 0xff
 801176e:	d007      	beq.n	8011780 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011776:	3301      	adds	r3, #1
 8011778:	b2da      	uxtb	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011786:	2b03      	cmp	r3, #3
 8011788:	d91b      	bls.n	80117c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011794:	4413      	add	r3, r2
 8011796:	b29a      	uxth	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801179e:	429a      	cmp	r2, r3
 80117a0:	d30a      	bcc.n	80117b8 <tcp_receive+0x168>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ac:	4413      	add	r3, r2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117b6:	e004      	b.n	80117c2 <tcp_receive+0x172>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d902      	bls.n	80117d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f002 fb45 	bl	8013e5c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80117d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f040 8161 	bne.w	8011a9c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117e2:	e15b      	b.n	8011a9c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117e4:	4b36      	ldr	r3, [pc, #216]	; (80118c0 <tcp_receive+0x270>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	3b01      	subs	r3, #1
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f2c0 814e 	blt.w	8011a92 <tcp_receive+0x442>
 80117f6:	4b32      	ldr	r3, [pc, #200]	; (80118c0 <tcp_receive+0x270>)
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	f300 8146 	bgt.w	8011a92 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	8b5b      	ldrh	r3, [r3, #26]
 801180a:	f003 0304 	and.w	r3, r3, #4
 801180e:	2b00      	cmp	r3, #0
 8011810:	d010      	beq.n	8011834 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	8b5b      	ldrh	r3, [r3, #26]
 8011816:	f023 0304 	bic.w	r3, r3, #4
 801181a:	b29a      	uxth	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011842:	10db      	asrs	r3, r3, #3
 8011844:	b21b      	sxth	r3, r3
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801184e:	b29b      	uxth	r3, r3
 8011850:	4413      	add	r3, r2
 8011852:	b29b      	uxth	r3, r3
 8011854:	b21a      	sxth	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801185c:	4b18      	ldr	r3, [pc, #96]	; (80118c0 <tcp_receive+0x270>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	b29a      	uxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011866:	b29b      	uxth	r3, r3
 8011868:	1ad3      	subs	r3, r2, r3
 801186a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011874:	4b12      	ldr	r3, [pc, #72]	; (80118c0 <tcp_receive+0x270>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	2b03      	cmp	r3, #3
 8011882:	f240 8097 	bls.w	80119b4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011892:	429a      	cmp	r2, r3
 8011894:	d245      	bcs.n	8011922 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8b5b      	ldrh	r3, [r3, #26]
 801189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d014      	beq.n	80118cc <tcp_receive+0x27c>
 80118a2:	2301      	movs	r3, #1
 80118a4:	e013      	b.n	80118ce <tcp_receive+0x27e>
 80118a6:	bf00      	nop
 80118a8:	0801a2a4 	.word	0x0801a2a4
 80118ac:	0801a5d4 	.word	0x0801a5d4
 80118b0:	0801a2f0 	.word	0x0801a2f0
 80118b4:	0801a5f0 	.word	0x0801a5f0
 80118b8:	20008184 	.word	0x20008184
 80118bc:	20008178 	.word	0x20008178
 80118c0:	2000817c 	.word	0x2000817c
 80118c4:	20008168 	.word	0x20008168
 80118c8:	20008182 	.word	0x20008182
 80118cc:	2302      	movs	r3, #2
 80118ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80118d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118dc:	fb12 f303 	smulbb	r3, r2, r3
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80118e4:	4293      	cmp	r3, r2
 80118e6:	bf28      	it	cs
 80118e8:	4613      	movcs	r3, r2
 80118ea:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118f4:	4413      	add	r3, r2
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118fe:	429a      	cmp	r2, r3
 8011900:	d309      	bcc.n	8011916 <tcp_receive+0x2c6>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011908:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801190a:	4413      	add	r3, r2
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011914:	e04e      	b.n	80119b4 <tcp_receive+0x364>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801191c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011920:	e048      	b.n	80119b4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801192a:	4413      	add	r3, r2
 801192c:	b29a      	uxth	r2, r3
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011934:	429a      	cmp	r2, r3
 8011936:	d309      	bcc.n	801194c <tcp_receive+0x2fc>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801193e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011940:	4413      	add	r3, r2
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801194a:	e004      	b.n	8011956 <tcp_receive+0x306>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011962:	429a      	cmp	r2, r3
 8011964:	d326      	bcc.n	80119b4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	b29a      	uxth	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011986:	4413      	add	r3, r2
 8011988:	b29a      	uxth	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011990:	429a      	cmp	r2, r3
 8011992:	d30a      	bcc.n	80119aa <tcp_receive+0x35a>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801199e:	4413      	add	r3, r2
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80119a8:	e004      	b.n	80119b4 <tcp_receive+0x364>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119bc:	4a98      	ldr	r2, [pc, #608]	; (8011c20 <tcp_receive+0x5d0>)
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff fdca 	bl	8011558 <tcp_free_acked_segments>
 80119c4:	4602      	mov	r2, r0
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d2:	4a94      	ldr	r2, [pc, #592]	; (8011c24 <tcp_receive+0x5d4>)
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff fdbf 	bl	8011558 <tcp_free_acked_segments>
 80119da:	4602      	mov	r2, r0
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d104      	bne.n	80119f2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80119f0:	e002      	b.n	80119f8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2200      	movs	r2, #0
 80119fc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d103      	bne.n	8011a0e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011a14:	4b84      	ldr	r3, [pc, #528]	; (8011c28 <tcp_receive+0x5d8>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	4413      	add	r3, r2
 8011a1a:	b29a      	uxth	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	8b5b      	ldrh	r3, [r3, #26]
 8011a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d035      	beq.n	8011a9a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d118      	bne.n	8011a68 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00c      	beq.n	8011a58 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fa ffca 	bl	800c9e4 <lwip_htonl>
 8011a50:	4603      	mov	r3, r0
 8011a52:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	dc20      	bgt.n	8011a9a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8b5b      	ldrh	r3, [r3, #26]
 8011a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a66:	e018      	b.n	8011a9a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fa ffb5 	bl	800c9e4 <lwip_htonl>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	1ae3      	subs	r3, r4, r3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	dc0b      	bgt.n	8011a9a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	8b5b      	ldrh	r3, [r3, #26]
 8011a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a90:	e003      	b.n	8011a9a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f002 fbcc 	bl	8014230 <tcp_send_empty_ack>
 8011a98:	e000      	b.n	8011a9c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a9a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d05b      	beq.n	8011b5c <tcp_receive+0x50c>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011aa8:	4b60      	ldr	r3, [pc, #384]	; (8011c2c <tcp_receive+0x5dc>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	da54      	bge.n	8011b5c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011ab2:	4b5f      	ldr	r3, [pc, #380]	; (8011c30 <tcp_receive+0x5e0>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011ac6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ad0:	10db      	asrs	r3, r3, #3
 8011ad2:	b21b      	sxth	r3, r3
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011aea:	4413      	add	r3, r2
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	b21a      	sxth	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011af4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	da05      	bge.n	8011b08 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b00:	425b      	negs	r3, r3
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011b08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b12:	109b      	asrs	r3, r3, #2
 8011b14:	b21b      	sxth	r3, r3
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011b2c:	4413      	add	r3, r2
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	b21a      	sxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011b3c:	10db      	asrs	r3, r3, #3
 8011b3e:	b21b      	sxth	r3, r3
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	4413      	add	r3, r2
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	b21a      	sxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011b5c:	4b35      	ldr	r3, [pc, #212]	; (8011c34 <tcp_receive+0x5e4>)
 8011b5e:	881b      	ldrh	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f000 84e2 	beq.w	801252a <tcp_receive+0xeda>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	7d1b      	ldrb	r3, [r3, #20]
 8011b6a:	2b06      	cmp	r3, #6
 8011b6c:	f200 84dd 	bhi.w	801252a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b74:	4b30      	ldr	r3, [pc, #192]	; (8011c38 <tcp_receive+0x5e8>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f2c0 808f 	blt.w	8011ca0 <tcp_receive+0x650>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b86:	4b2b      	ldr	r3, [pc, #172]	; (8011c34 <tcp_receive+0x5e4>)
 8011b88:	881b      	ldrh	r3, [r3, #0]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4b2a      	ldr	r3, [pc, #168]	; (8011c38 <tcp_receive+0x5e8>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	440b      	add	r3, r1
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	3301      	adds	r3, #1
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f300 8082 	bgt.w	8011ca0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011b9c:	4b27      	ldr	r3, [pc, #156]	; (8011c3c <tcp_receive+0x5ec>)
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ba6:	4b24      	ldr	r3, [pc, #144]	; (8011c38 <tcp_receive+0x5e8>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011bae:	4b23      	ldr	r3, [pc, #140]	; (8011c3c <tcp_receive+0x5ec>)
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d106      	bne.n	8011bc4 <tcp_receive+0x574>
 8011bb6:	4b22      	ldr	r3, [pc, #136]	; (8011c40 <tcp_receive+0x5f0>)
 8011bb8:	f240 5294 	movw	r2, #1428	; 0x594
 8011bbc:	4921      	ldr	r1, [pc, #132]	; (8011c44 <tcp_receive+0x5f4>)
 8011bbe:	4822      	ldr	r0, [pc, #136]	; (8011c48 <tcp_receive+0x5f8>)
 8011bc0:	f006 fb04 	bl	80181cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d906      	bls.n	8011bdc <tcp_receive+0x58c>
 8011bce:	4b1c      	ldr	r3, [pc, #112]	; (8011c40 <tcp_receive+0x5f0>)
 8011bd0:	f240 5295 	movw	r2, #1429	; 0x595
 8011bd4:	491d      	ldr	r1, [pc, #116]	; (8011c4c <tcp_receive+0x5fc>)
 8011bd6:	481c      	ldr	r0, [pc, #112]	; (8011c48 <tcp_receive+0x5f8>)
 8011bd8:	f006 faf8 	bl	80181cc <iprintf>
      off = (u16_t)off32;
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011be2:	4b16      	ldr	r3, [pc, #88]	; (8011c3c <tcp_receive+0x5ec>)
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	891b      	ldrh	r3, [r3, #8]
 8011be8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d906      	bls.n	8011bfe <tcp_receive+0x5ae>
 8011bf0:	4b13      	ldr	r3, [pc, #76]	; (8011c40 <tcp_receive+0x5f0>)
 8011bf2:	f240 5297 	movw	r2, #1431	; 0x597
 8011bf6:	4916      	ldr	r1, [pc, #88]	; (8011c50 <tcp_receive+0x600>)
 8011bf8:	4813      	ldr	r0, [pc, #76]	; (8011c48 <tcp_receive+0x5f8>)
 8011bfa:	f006 fae7 	bl	80181cc <iprintf>
      inseg.len -= off;
 8011bfe:	4b0f      	ldr	r3, [pc, #60]	; (8011c3c <tcp_receive+0x5ec>)
 8011c00:	891a      	ldrh	r2, [r3, #8]
 8011c02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c06:	1ad3      	subs	r3, r2, r3
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	4b0c      	ldr	r3, [pc, #48]	; (8011c3c <tcp_receive+0x5ec>)
 8011c0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011c0e:	4b0b      	ldr	r3, [pc, #44]	; (8011c3c <tcp_receive+0x5ec>)
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	891a      	ldrh	r2, [r3, #8]
 8011c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011c1c:	e02a      	b.n	8011c74 <tcp_receive+0x624>
 8011c1e:	bf00      	nop
 8011c20:	0801a60c 	.word	0x0801a60c
 8011c24:	0801a614 	.word	0x0801a614
 8011c28:	20008180 	.word	0x20008180
 8011c2c:	2000817c 	.word	0x2000817c
 8011c30:	20008140 	.word	0x20008140
 8011c34:	20008182 	.word	0x20008182
 8011c38:	20008178 	.word	0x20008178
 8011c3c:	20008158 	.word	0x20008158
 8011c40:	0801a2a4 	.word	0x0801a2a4
 8011c44:	0801a61c 	.word	0x0801a61c
 8011c48:	0801a2f0 	.word	0x0801a2f0
 8011c4c:	0801a62c 	.word	0x0801a62c
 8011c50:	0801a63c 	.word	0x0801a63c
        off -= p->len;
 8011c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c56:	895b      	ldrh	r3, [r3, #10]
 8011c58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011c66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c76:	895b      	ldrh	r3, [r3, #10]
 8011c78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d8e9      	bhi.n	8011c54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c84:	4619      	mov	r1, r3
 8011c86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c88:	f7fc f96e 	bl	800df68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c90:	4a91      	ldr	r2, [pc, #580]	; (8011ed8 <tcp_receive+0x888>)
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	4b91      	ldr	r3, [pc, #580]	; (8011edc <tcp_receive+0x88c>)
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	4a8f      	ldr	r2, [pc, #572]	; (8011ed8 <tcp_receive+0x888>)
 8011c9a:	6812      	ldr	r2, [r2, #0]
 8011c9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c9e:	e00d      	b.n	8011cbc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011ca0:	4b8d      	ldr	r3, [pc, #564]	; (8011ed8 <tcp_receive+0x888>)
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	da06      	bge.n	8011cbc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	8b5b      	ldrh	r3, [r3, #26]
 8011cb2:	f043 0302 	orr.w	r3, r3, #2
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011cbc:	4b86      	ldr	r3, [pc, #536]	; (8011ed8 <tcp_receive+0x888>)
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc4:	1ad3      	subs	r3, r2, r3
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f2c0 842a 	blt.w	8012520 <tcp_receive+0xed0>
 8011ccc:	4b82      	ldr	r3, [pc, #520]	; (8011ed8 <tcp_receive+0x888>)
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd4:	6879      	ldr	r1, [r7, #4]
 8011cd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cd8:	440b      	add	r3, r1
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	3301      	adds	r3, #1
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f300 841e 	bgt.w	8012520 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ce8:	4b7b      	ldr	r3, [pc, #492]	; (8011ed8 <tcp_receive+0x888>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	f040 829a 	bne.w	8012226 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011cf2:	4b7a      	ldr	r3, [pc, #488]	; (8011edc <tcp_receive+0x88c>)
 8011cf4:	891c      	ldrh	r4, [r3, #8]
 8011cf6:	4b79      	ldr	r3, [pc, #484]	; (8011edc <tcp_receive+0x88c>)
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	899b      	ldrh	r3, [r3, #12]
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fa fe5b 	bl	800c9ba <lwip_htons>
 8011d04:	4603      	mov	r3, r0
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	f003 0303 	and.w	r3, r3, #3
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <tcp_receive+0x6c4>
 8011d10:	2301      	movs	r3, #1
 8011d12:	e000      	b.n	8011d16 <tcp_receive+0x6c6>
 8011d14:	2300      	movs	r3, #0
 8011d16:	4423      	add	r3, r4
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	4b71      	ldr	r3, [pc, #452]	; (8011ee0 <tcp_receive+0x890>)
 8011d1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d22:	4b6f      	ldr	r3, [pc, #444]	; (8011ee0 <tcp_receive+0x890>)
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d275      	bcs.n	8011e16 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d2a:	4b6c      	ldr	r3, [pc, #432]	; (8011edc <tcp_receive+0x88c>)
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	899b      	ldrh	r3, [r3, #12]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fa fe41 	bl	800c9ba <lwip_htons>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	f003 0301 	and.w	r3, r3, #1
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d01f      	beq.n	8011d84 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011d44:	4b65      	ldr	r3, [pc, #404]	; (8011edc <tcp_receive+0x88c>)
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	b21b      	sxth	r3, r3
 8011d4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d52:	b21c      	sxth	r4, r3
 8011d54:	4b61      	ldr	r3, [pc, #388]	; (8011edc <tcp_receive+0x88c>)
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	899b      	ldrh	r3, [r3, #12]
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fa fe2c 	bl	800c9ba <lwip_htons>
 8011d62:	4603      	mov	r3, r0
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fa fe23 	bl	800c9ba <lwip_htons>
 8011d74:	4603      	mov	r3, r0
 8011d76:	b21b      	sxth	r3, r3
 8011d78:	4323      	orrs	r3, r4
 8011d7a:	b21a      	sxth	r2, r3
 8011d7c:	4b57      	ldr	r3, [pc, #348]	; (8011edc <tcp_receive+0x88c>)
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	b292      	uxth	r2, r2
 8011d82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d88:	4b54      	ldr	r3, [pc, #336]	; (8011edc <tcp_receive+0x88c>)
 8011d8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011d8c:	4b53      	ldr	r3, [pc, #332]	; (8011edc <tcp_receive+0x88c>)
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	899b      	ldrh	r3, [r3, #12]
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fa fe10 	bl	800c9ba <lwip_htons>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	f003 0302 	and.w	r3, r3, #2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <tcp_receive+0x762>
            inseg.len -= 1;
 8011da6:	4b4d      	ldr	r3, [pc, #308]	; (8011edc <tcp_receive+0x88c>)
 8011da8:	891b      	ldrh	r3, [r3, #8]
 8011daa:	3b01      	subs	r3, #1
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	4b4b      	ldr	r3, [pc, #300]	; (8011edc <tcp_receive+0x88c>)
 8011db0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011db2:	4b4a      	ldr	r3, [pc, #296]	; (8011edc <tcp_receive+0x88c>)
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	4a49      	ldr	r2, [pc, #292]	; (8011edc <tcp_receive+0x88c>)
 8011db8:	8912      	ldrh	r2, [r2, #8]
 8011dba:	4611      	mov	r1, r2
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fb ffd3 	bl	800dd68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011dc2:	4b46      	ldr	r3, [pc, #280]	; (8011edc <tcp_receive+0x88c>)
 8011dc4:	891c      	ldrh	r4, [r3, #8]
 8011dc6:	4b45      	ldr	r3, [pc, #276]	; (8011edc <tcp_receive+0x88c>)
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	899b      	ldrh	r3, [r3, #12]
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fa fdf3 	bl	800c9ba <lwip_htons>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	f003 0303 	and.w	r3, r3, #3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d001      	beq.n	8011de4 <tcp_receive+0x794>
 8011de0:	2301      	movs	r3, #1
 8011de2:	e000      	b.n	8011de6 <tcp_receive+0x796>
 8011de4:	2300      	movs	r3, #0
 8011de6:	4423      	add	r3, r4
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	4b3d      	ldr	r3, [pc, #244]	; (8011ee0 <tcp_receive+0x890>)
 8011dec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011dee:	4b3c      	ldr	r3, [pc, #240]	; (8011ee0 <tcp_receive+0x890>)
 8011df0:	881b      	ldrh	r3, [r3, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	4b38      	ldr	r3, [pc, #224]	; (8011ed8 <tcp_receive+0x888>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	441a      	add	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dfe:	6879      	ldr	r1, [r7, #4]
 8011e00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e02:	440b      	add	r3, r1
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d006      	beq.n	8011e16 <tcp_receive+0x7c6>
 8011e08:	4b36      	ldr	r3, [pc, #216]	; (8011ee4 <tcp_receive+0x894>)
 8011e0a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011e0e:	4936      	ldr	r1, [pc, #216]	; (8011ee8 <tcp_receive+0x898>)
 8011e10:	4836      	ldr	r0, [pc, #216]	; (8011eec <tcp_receive+0x89c>)
 8011e12:	f006 f9db 	bl	80181cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 80e7 	beq.w	8011fee <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e20:	4b2e      	ldr	r3, [pc, #184]	; (8011edc <tcp_receive+0x88c>)
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7fa fdc6 	bl	800c9ba <lwip_htons>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d010      	beq.n	8011e5c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011e3a:	e00a      	b.n	8011e52 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e40:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f7fd fce2 	bl	800f816 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1f0      	bne.n	8011e3c <tcp_receive+0x7ec>
 8011e5a:	e0c8      	b.n	8011fee <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e60:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011e62:	e052      	b.n	8011f0a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	899b      	ldrh	r3, [r3, #12]
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fa fda4 	bl	800c9ba <lwip_htons>
 8011e72:	4603      	mov	r3, r0
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d03d      	beq.n	8011efa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011e7e:	4b17      	ldr	r3, [pc, #92]	; (8011edc <tcp_receive+0x88c>)
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	899b      	ldrh	r3, [r3, #12]
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fa fd97 	bl	800c9ba <lwip_htons>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d130      	bne.n	8011efa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011e98:	4b10      	ldr	r3, [pc, #64]	; (8011edc <tcp_receive+0x88c>)
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	899b      	ldrh	r3, [r3, #12]
 8011e9e:	b29c      	uxth	r4, r3
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	f7fa fd8a 	bl	800c9ba <lwip_htons>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	4b0c      	ldr	r3, [pc, #48]	; (8011edc <tcp_receive+0x88c>)
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	4322      	orrs	r2, r4
 8011eb0:	b292      	uxth	r2, r2
 8011eb2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011eb4:	4b09      	ldr	r3, [pc, #36]	; (8011edc <tcp_receive+0x88c>)
 8011eb6:	891c      	ldrh	r4, [r3, #8]
 8011eb8:	4b08      	ldr	r3, [pc, #32]	; (8011edc <tcp_receive+0x88c>)
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	899b      	ldrh	r3, [r3, #12]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fa fd7a 	bl	800c9ba <lwip_htons>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	f003 0303 	and.w	r3, r3, #3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00e      	beq.n	8011ef0 <tcp_receive+0x8a0>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e00d      	b.n	8011ef2 <tcp_receive+0x8a2>
 8011ed6:	bf00      	nop
 8011ed8:	20008178 	.word	0x20008178
 8011edc:	20008158 	.word	0x20008158
 8011ee0:	20008182 	.word	0x20008182
 8011ee4:	0801a2a4 	.word	0x0801a2a4
 8011ee8:	0801a64c 	.word	0x0801a64c
 8011eec:	0801a2f0 	.word	0x0801a2f0
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	4423      	add	r3, r4
 8011ef4:	b29a      	uxth	r2, r3
 8011ef6:	4b98      	ldr	r3, [pc, #608]	; (8012158 <tcp_receive+0xb08>)
 8011ef8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011efc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011f04:	6938      	ldr	r0, [r7, #16]
 8011f06:	f7fd fc86 	bl	800f816 <tcp_seg_free>
            while (next &&
 8011f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00e      	beq.n	8011f2e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011f10:	4b91      	ldr	r3, [pc, #580]	; (8012158 <tcp_receive+0xb08>)
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	461a      	mov	r2, r3
 8011f16:	4b91      	ldr	r3, [pc, #580]	; (801215c <tcp_receive+0xb0c>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	441a      	add	r2, r3
 8011f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f24:	8909      	ldrh	r1, [r1, #8]
 8011f26:	440b      	add	r3, r1
 8011f28:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	da9a      	bge.n	8011e64 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d059      	beq.n	8011fe8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011f34:	4b88      	ldr	r3, [pc, #544]	; (8012158 <tcp_receive+0xb08>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	4b88      	ldr	r3, [pc, #544]	; (801215c <tcp_receive+0xb0c>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	441a      	add	r2, r3
 8011f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	dd4d      	ble.n	8011fe8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	4b81      	ldr	r3, [pc, #516]	; (801215c <tcp_receive+0xb0c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	1ad3      	subs	r3, r2, r3
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	4b80      	ldr	r3, [pc, #512]	; (8012160 <tcp_receive+0xb10>)
 8011f60:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f62:	4b7f      	ldr	r3, [pc, #508]	; (8012160 <tcp_receive+0xb10>)
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	899b      	ldrh	r3, [r3, #12]
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fa fd25 	bl	800c9ba <lwip_htons>
 8011f70:	4603      	mov	r3, r0
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	f003 0302 	and.w	r3, r3, #2
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d005      	beq.n	8011f88 <tcp_receive+0x938>
                inseg.len -= 1;
 8011f7c:	4b78      	ldr	r3, [pc, #480]	; (8012160 <tcp_receive+0xb10>)
 8011f7e:	891b      	ldrh	r3, [r3, #8]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	4b76      	ldr	r3, [pc, #472]	; (8012160 <tcp_receive+0xb10>)
 8011f86:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011f88:	4b75      	ldr	r3, [pc, #468]	; (8012160 <tcp_receive+0xb10>)
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	4a74      	ldr	r2, [pc, #464]	; (8012160 <tcp_receive+0xb10>)
 8011f8e:	8912      	ldrh	r2, [r2, #8]
 8011f90:	4611      	mov	r1, r2
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fb fee8 	bl	800dd68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011f98:	4b71      	ldr	r3, [pc, #452]	; (8012160 <tcp_receive+0xb10>)
 8011f9a:	891c      	ldrh	r4, [r3, #8]
 8011f9c:	4b70      	ldr	r3, [pc, #448]	; (8012160 <tcp_receive+0xb10>)
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	899b      	ldrh	r3, [r3, #12]
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fa fd08 	bl	800c9ba <lwip_htons>
 8011faa:	4603      	mov	r3, r0
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	f003 0303 	and.w	r3, r3, #3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <tcp_receive+0x96a>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e000      	b.n	8011fbc <tcp_receive+0x96c>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	4423      	add	r3, r4
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	4b65      	ldr	r3, [pc, #404]	; (8012158 <tcp_receive+0xb08>)
 8011fc2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011fc4:	4b64      	ldr	r3, [pc, #400]	; (8012158 <tcp_receive+0xb08>)
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	461a      	mov	r2, r3
 8011fca:	4b64      	ldr	r3, [pc, #400]	; (801215c <tcp_receive+0xb0c>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	441a      	add	r2, r3
 8011fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d006      	beq.n	8011fe8 <tcp_receive+0x998>
 8011fda:	4b62      	ldr	r3, [pc, #392]	; (8012164 <tcp_receive+0xb14>)
 8011fdc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011fe0:	4961      	ldr	r1, [pc, #388]	; (8012168 <tcp_receive+0xb18>)
 8011fe2:	4862      	ldr	r0, [pc, #392]	; (801216c <tcp_receive+0xb1c>)
 8011fe4:	f006 f8f2 	bl	80181cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011fee:	4b5a      	ldr	r3, [pc, #360]	; (8012158 <tcp_receive+0xb08>)
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	4b59      	ldr	r3, [pc, #356]	; (801215c <tcp_receive+0xb0c>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	441a      	add	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012002:	4b55      	ldr	r3, [pc, #340]	; (8012158 <tcp_receive+0xb08>)
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	429a      	cmp	r2, r3
 8012008:	d206      	bcs.n	8012018 <tcp_receive+0x9c8>
 801200a:	4b56      	ldr	r3, [pc, #344]	; (8012164 <tcp_receive+0xb14>)
 801200c:	f240 6207 	movw	r2, #1543	; 0x607
 8012010:	4957      	ldr	r1, [pc, #348]	; (8012170 <tcp_receive+0xb20>)
 8012012:	4856      	ldr	r0, [pc, #344]	; (801216c <tcp_receive+0xb1c>)
 8012014:	f006 f8da 	bl	80181cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801201c:	4b4e      	ldr	r3, [pc, #312]	; (8012158 <tcp_receive+0xb08>)
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	b29a      	uxth	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fc fdb7 	bl	800eb9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801202e:	4b4c      	ldr	r3, [pc, #304]	; (8012160 <tcp_receive+0xb10>)
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	891b      	ldrh	r3, [r3, #8]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d006      	beq.n	8012046 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012038:	4b49      	ldr	r3, [pc, #292]	; (8012160 <tcp_receive+0xb10>)
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	4a4d      	ldr	r2, [pc, #308]	; (8012174 <tcp_receive+0xb24>)
 801203e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012040:	4b47      	ldr	r3, [pc, #284]	; (8012160 <tcp_receive+0xb10>)
 8012042:	2200      	movs	r2, #0
 8012044:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012046:	4b46      	ldr	r3, [pc, #280]	; (8012160 <tcp_receive+0xb10>)
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	899b      	ldrh	r3, [r3, #12]
 801204c:	b29b      	uxth	r3, r3
 801204e:	4618      	mov	r0, r3
 8012050:	f7fa fcb3 	bl	800c9ba <lwip_htons>
 8012054:	4603      	mov	r3, r0
 8012056:	b2db      	uxtb	r3, r3
 8012058:	f003 0301 	and.w	r3, r3, #1
 801205c:	2b00      	cmp	r3, #0
 801205e:	f000 80b8 	beq.w	80121d2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012062:	4b45      	ldr	r3, [pc, #276]	; (8012178 <tcp_receive+0xb28>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	f043 0320 	orr.w	r3, r3, #32
 801206a:	b2da      	uxtb	r2, r3
 801206c:	4b42      	ldr	r3, [pc, #264]	; (8012178 <tcp_receive+0xb28>)
 801206e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012070:	e0af      	b.n	80121d2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012076:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	4a36      	ldr	r2, [pc, #216]	; (801215c <tcp_receive+0xb0c>)
 8012082:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	891b      	ldrh	r3, [r3, #8]
 8012088:	461c      	mov	r4, r3
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	b29b      	uxth	r3, r3
 8012092:	4618      	mov	r0, r3
 8012094:	f7fa fc91 	bl	800c9ba <lwip_htons>
 8012098:	4603      	mov	r3, r0
 801209a:	b2db      	uxtb	r3, r3
 801209c:	f003 0303 	and.w	r3, r3, #3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <tcp_receive+0xa58>
 80120a4:	2301      	movs	r3, #1
 80120a6:	e000      	b.n	80120aa <tcp_receive+0xa5a>
 80120a8:	2300      	movs	r3, #0
 80120aa:	191a      	adds	r2, r3, r4
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b0:	441a      	add	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120ba:	461c      	mov	r4, r3
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	891b      	ldrh	r3, [r3, #8]
 80120c0:	461d      	mov	r5, r3
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	899b      	ldrh	r3, [r3, #12]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fa fc75 	bl	800c9ba <lwip_htons>
 80120d0:	4603      	mov	r3, r0
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	f003 0303 	and.w	r3, r3, #3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d001      	beq.n	80120e0 <tcp_receive+0xa90>
 80120dc:	2301      	movs	r3, #1
 80120de:	e000      	b.n	80120e2 <tcp_receive+0xa92>
 80120e0:	2300      	movs	r3, #0
 80120e2:	442b      	add	r3, r5
 80120e4:	429c      	cmp	r4, r3
 80120e6:	d206      	bcs.n	80120f6 <tcp_receive+0xaa6>
 80120e8:	4b1e      	ldr	r3, [pc, #120]	; (8012164 <tcp_receive+0xb14>)
 80120ea:	f240 622b 	movw	r2, #1579	; 0x62b
 80120ee:	4923      	ldr	r1, [pc, #140]	; (801217c <tcp_receive+0xb2c>)
 80120f0:	481e      	ldr	r0, [pc, #120]	; (801216c <tcp_receive+0xb1c>)
 80120f2:	f006 f86b 	bl	80181cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	891b      	ldrh	r3, [r3, #8]
 80120fa:	461c      	mov	r4, r3
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	899b      	ldrh	r3, [r3, #12]
 8012102:	b29b      	uxth	r3, r3
 8012104:	4618      	mov	r0, r3
 8012106:	f7fa fc58 	bl	800c9ba <lwip_htons>
 801210a:	4603      	mov	r3, r0
 801210c:	b2db      	uxtb	r3, r3
 801210e:	f003 0303 	and.w	r3, r3, #3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d001      	beq.n	801211a <tcp_receive+0xaca>
 8012116:	2301      	movs	r3, #1
 8012118:	e000      	b.n	801211c <tcp_receive+0xacc>
 801211a:	2300      	movs	r3, #0
 801211c:	1919      	adds	r1, r3, r4
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012122:	b28b      	uxth	r3, r1
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	b29a      	uxth	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7fc fd35 	bl	800eb9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	891b      	ldrh	r3, [r3, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d028      	beq.n	801218e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801213c:	4b0d      	ldr	r3, [pc, #52]	; (8012174 <tcp_receive+0xb24>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d01d      	beq.n	8012180 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012144:	4b0b      	ldr	r3, [pc, #44]	; (8012174 <tcp_receive+0xb24>)
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	4619      	mov	r1, r3
 801214e:	4610      	mov	r0, r2
 8012150:	f7fc f852 	bl	800e1f8 <pbuf_cat>
 8012154:	e018      	b.n	8012188 <tcp_receive+0xb38>
 8012156:	bf00      	nop
 8012158:	20008182 	.word	0x20008182
 801215c:	20008178 	.word	0x20008178
 8012160:	20008158 	.word	0x20008158
 8012164:	0801a2a4 	.word	0x0801a2a4
 8012168:	0801a684 	.word	0x0801a684
 801216c:	0801a2f0 	.word	0x0801a2f0
 8012170:	0801a6c0 	.word	0x0801a6c0
 8012174:	20008188 	.word	0x20008188
 8012178:	20008185 	.word	0x20008185
 801217c:	0801a6e0 	.word	0x0801a6e0
            } else {
              recv_data = cseg->p;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	4a70      	ldr	r2, [pc, #448]	; (8012348 <tcp_receive+0xcf8>)
 8012186:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	2200      	movs	r2, #0
 801218c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	899b      	ldrh	r3, [r3, #12]
 8012194:	b29b      	uxth	r3, r3
 8012196:	4618      	mov	r0, r3
 8012198:	f7fa fc0f 	bl	800c9ba <lwip_htons>
 801219c:	4603      	mov	r3, r0
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	f003 0301 	and.w	r3, r3, #1
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00d      	beq.n	80121c4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80121a8:	4b68      	ldr	r3, [pc, #416]	; (801234c <tcp_receive+0xcfc>)
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	f043 0320 	orr.w	r3, r3, #32
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	4b66      	ldr	r3, [pc, #408]	; (801234c <tcp_receive+0xcfc>)
 80121b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	7d1b      	ldrb	r3, [r3, #20]
 80121ba:	2b04      	cmp	r3, #4
 80121bc:	d102      	bne.n	80121c4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2207      	movs	r2, #7
 80121c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80121cc:	68b8      	ldr	r0, [r7, #8]
 80121ce:	f7fd fb22 	bl	800f816 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d008      	beq.n	80121ec <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	685a      	ldr	r2, [r3, #4]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80121e6:	429a      	cmp	r2, r3
 80121e8:	f43f af43 	beq.w	8012072 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	8b5b      	ldrh	r3, [r3, #26]
 80121f0:	f003 0301 	and.w	r3, r3, #1
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00e      	beq.n	8012216 <tcp_receive+0xbc6>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	8b5b      	ldrh	r3, [r3, #26]
 80121fc:	f023 0301 	bic.w	r3, r3, #1
 8012200:	b29a      	uxth	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	835a      	strh	r2, [r3, #26]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8b5b      	ldrh	r3, [r3, #26]
 801220a:	f043 0302 	orr.w	r3, r3, #2
 801220e:	b29a      	uxth	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012214:	e188      	b.n	8012528 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	8b5b      	ldrh	r3, [r3, #26]
 801221a:	f043 0301 	orr.w	r3, r3, #1
 801221e:	b29a      	uxth	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012224:	e180      	b.n	8012528 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801222a:	2b00      	cmp	r3, #0
 801222c:	d106      	bne.n	801223c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801222e:	4848      	ldr	r0, [pc, #288]	; (8012350 <tcp_receive+0xd00>)
 8012230:	f7fd fb0a 	bl	800f848 <tcp_seg_copy>
 8012234:	4602      	mov	r2, r0
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	675a      	str	r2, [r3, #116]	; 0x74
 801223a:	e16d      	b.n	8012518 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801223c:	2300      	movs	r3, #0
 801223e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012244:	63bb      	str	r3, [r7, #56]	; 0x38
 8012246:	e157      	b.n	80124f8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	4b41      	ldr	r3, [pc, #260]	; (8012354 <tcp_receive+0xd04>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	429a      	cmp	r2, r3
 8012254:	d11d      	bne.n	8012292 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012256:	4b3e      	ldr	r3, [pc, #248]	; (8012350 <tcp_receive+0xd00>)
 8012258:	891a      	ldrh	r2, [r3, #8]
 801225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225c:	891b      	ldrh	r3, [r3, #8]
 801225e:	429a      	cmp	r2, r3
 8012260:	f240 814f 	bls.w	8012502 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012264:	483a      	ldr	r0, [pc, #232]	; (8012350 <tcp_receive+0xd00>)
 8012266:	f7fd faef 	bl	800f848 <tcp_seg_copy>
 801226a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2b00      	cmp	r3, #0
 8012270:	f000 8149 	beq.w	8012506 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012276:	2b00      	cmp	r3, #0
 8012278:	d003      	beq.n	8012282 <tcp_receive+0xc32>
                    prev->next = cseg;
 801227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227c:	697a      	ldr	r2, [r7, #20]
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	e002      	b.n	8012288 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	697a      	ldr	r2, [r7, #20]
 8012286:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801228a:	6978      	ldr	r0, [r7, #20]
 801228c:	f7ff f8dc 	bl	8011448 <tcp_oos_insert_segment>
                }
                break;
 8012290:	e139      	b.n	8012506 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012294:	2b00      	cmp	r3, #0
 8012296:	d117      	bne.n	80122c8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012298:	4b2e      	ldr	r3, [pc, #184]	; (8012354 <tcp_receive+0xd04>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	da57      	bge.n	8012358 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122a8:	4829      	ldr	r0, [pc, #164]	; (8012350 <tcp_receive+0xd00>)
 80122aa:	f7fd facd 	bl	800f848 <tcp_seg_copy>
 80122ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 8129 	beq.w	801250a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	69ba      	ldr	r2, [r7, #24]
 80122bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80122be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122c0:	69b8      	ldr	r0, [r7, #24]
 80122c2:	f7ff f8c1 	bl	8011448 <tcp_oos_insert_segment>
                  }
                  break;
 80122c6:	e120      	b.n	801250a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80122c8:	4b22      	ldr	r3, [pc, #136]	; (8012354 <tcp_receive+0xd04>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	3b01      	subs	r3, #1
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	db3e      	blt.n	8012358 <tcp_receive+0xd08>
 80122da:	4b1e      	ldr	r3, [pc, #120]	; (8012354 <tcp_receive+0xd04>)
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	3301      	adds	r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	dc35      	bgt.n	8012358 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122ec:	4818      	ldr	r0, [pc, #96]	; (8012350 <tcp_receive+0xd00>)
 80122ee:	f7fd faab 	bl	800f848 <tcp_seg_copy>
 80122f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 8109 	beq.w	801250e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80122fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012304:	8912      	ldrh	r2, [r2, #8]
 8012306:	441a      	add	r2, r3
 8012308:	4b12      	ldr	r3, [pc, #72]	; (8012354 <tcp_receive+0xd04>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	dd12      	ble.n	8012338 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012312:	4b10      	ldr	r3, [pc, #64]	; (8012354 <tcp_receive+0xd04>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	b29a      	uxth	r2, r3
 8012318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	b29b      	uxth	r3, r3
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	b29a      	uxth	r2, r3
 8012324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012326:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801232a:	685a      	ldr	r2, [r3, #4]
 801232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801232e:	891b      	ldrh	r3, [r3, #8]
 8012330:	4619      	mov	r1, r3
 8012332:	4610      	mov	r0, r2
 8012334:	f7fb fd18 	bl	800dd68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801233a:	69fa      	ldr	r2, [r7, #28]
 801233c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801233e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012340:	69f8      	ldr	r0, [r7, #28]
 8012342:	f7ff f881 	bl	8011448 <tcp_oos_insert_segment>
                  }
                  break;
 8012346:	e0e2      	b.n	801250e <tcp_receive+0xebe>
 8012348:	20008188 	.word	0x20008188
 801234c:	20008185 	.word	0x20008185
 8012350:	20008158 	.word	0x20008158
 8012354:	20008178 	.word	0x20008178
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	f040 80c6 	bne.w	80124f2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012366:	4b80      	ldr	r3, [pc, #512]	; (8012568 <tcp_receive+0xf18>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012372:	2b00      	cmp	r3, #0
 8012374:	f340 80bd 	ble.w	80124f2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	899b      	ldrh	r3, [r3, #12]
 801237e:	b29b      	uxth	r3, r3
 8012380:	4618      	mov	r0, r3
 8012382:	f7fa fb1a 	bl	800c9ba <lwip_htons>
 8012386:	4603      	mov	r3, r0
 8012388:	b2db      	uxtb	r3, r3
 801238a:	f003 0301 	and.w	r3, r3, #1
 801238e:	2b00      	cmp	r3, #0
 8012390:	f040 80bf 	bne.w	8012512 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012394:	4875      	ldr	r0, [pc, #468]	; (801256c <tcp_receive+0xf1c>)
 8012396:	f7fd fa57 	bl	800f848 <tcp_seg_copy>
 801239a:	4602      	mov	r2, r0
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f000 80b6 	beq.w	8012516 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123b2:	8912      	ldrh	r2, [r2, #8]
 80123b4:	441a      	add	r2, r3
 80123b6:	4b6c      	ldr	r3, [pc, #432]	; (8012568 <tcp_receive+0xf18>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	dd12      	ble.n	80123e6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80123c0:	4b69      	ldr	r3, [pc, #420]	; (8012568 <tcp_receive+0xf18>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80123d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	891b      	ldrh	r3, [r3, #8]
 80123de:	4619      	mov	r1, r3
 80123e0:	4610      	mov	r0, r2
 80123e2:	f7fb fcc1 	bl	800dd68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80123e6:	4b62      	ldr	r3, [pc, #392]	; (8012570 <tcp_receive+0xf20>)
 80123e8:	881b      	ldrh	r3, [r3, #0]
 80123ea:	461a      	mov	r2, r3
 80123ec:	4b5e      	ldr	r3, [pc, #376]	; (8012568 <tcp_receive+0xf18>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	441a      	add	r2, r3
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f6:	6879      	ldr	r1, [r7, #4]
 80123f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123fa:	440b      	add	r3, r1
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f340 8089 	ble.w	8012516 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	899b      	ldrh	r3, [r3, #12]
 801240c:	b29b      	uxth	r3, r3
 801240e:	4618      	mov	r0, r3
 8012410:	f7fa fad3 	bl	800c9ba <lwip_htons>
 8012414:	4603      	mov	r3, r0
 8012416:	b2db      	uxtb	r3, r3
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	2b00      	cmp	r3, #0
 801241e:	d022      	beq.n	8012466 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	899b      	ldrh	r3, [r3, #12]
 8012428:	b29b      	uxth	r3, r3
 801242a:	b21b      	sxth	r3, r3
 801242c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012430:	b21c      	sxth	r4, r3
 8012432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	899b      	ldrh	r3, [r3, #12]
 801243a:	b29b      	uxth	r3, r3
 801243c:	4618      	mov	r0, r3
 801243e:	f7fa fabc 	bl	800c9ba <lwip_htons>
 8012442:	4603      	mov	r3, r0
 8012444:	b2db      	uxtb	r3, r3
 8012446:	b29b      	uxth	r3, r3
 8012448:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801244c:	b29b      	uxth	r3, r3
 801244e:	4618      	mov	r0, r3
 8012450:	f7fa fab3 	bl	800c9ba <lwip_htons>
 8012454:	4603      	mov	r3, r0
 8012456:	b21b      	sxth	r3, r3
 8012458:	4323      	orrs	r3, r4
 801245a:	b21a      	sxth	r2, r3
 801245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	b292      	uxth	r2, r2
 8012464:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246a:	b29a      	uxth	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012470:	4413      	add	r3, r2
 8012472:	b299      	uxth	r1, r3
 8012474:	4b3c      	ldr	r3, [pc, #240]	; (8012568 <tcp_receive+0xf18>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	b29a      	uxth	r2, r3
 801247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	1a8a      	subs	r2, r1, r2
 8012480:	b292      	uxth	r2, r2
 8012482:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	685a      	ldr	r2, [r3, #4]
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	891b      	ldrh	r3, [r3, #8]
 8012490:	4619      	mov	r1, r3
 8012492:	4610      	mov	r0, r2
 8012494:	f7fb fc68 	bl	800dd68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	891c      	ldrh	r4, [r3, #8]
 801249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	899b      	ldrh	r3, [r3, #12]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fa fa86 	bl	800c9ba <lwip_htons>
 80124ae:	4603      	mov	r3, r0
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	f003 0303 	and.w	r3, r3, #3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d001      	beq.n	80124be <tcp_receive+0xe6e>
 80124ba:	2301      	movs	r3, #1
 80124bc:	e000      	b.n	80124c0 <tcp_receive+0xe70>
 80124be:	2300      	movs	r3, #0
 80124c0:	4423      	add	r3, r4
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	4b2a      	ldr	r3, [pc, #168]	; (8012570 <tcp_receive+0xf20>)
 80124c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80124c8:	4b29      	ldr	r3, [pc, #164]	; (8012570 <tcp_receive+0xf20>)
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	461a      	mov	r2, r3
 80124ce:	4b26      	ldr	r3, [pc, #152]	; (8012568 <tcp_receive+0xf18>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	441a      	add	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d8:	6879      	ldr	r1, [r7, #4]
 80124da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124dc:	440b      	add	r3, r1
 80124de:	429a      	cmp	r2, r3
 80124e0:	d019      	beq.n	8012516 <tcp_receive+0xec6>
 80124e2:	4b24      	ldr	r3, [pc, #144]	; (8012574 <tcp_receive+0xf24>)
 80124e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80124e8:	4923      	ldr	r1, [pc, #140]	; (8012578 <tcp_receive+0xf28>)
 80124ea:	4824      	ldr	r0, [pc, #144]	; (801257c <tcp_receive+0xf2c>)
 80124ec:	f005 fe6e 	bl	80181cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80124f0:	e011      	b.n	8012516 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80124f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f47f aea4 	bne.w	8012248 <tcp_receive+0xbf8>
 8012500:	e00a      	b.n	8012518 <tcp_receive+0xec8>
                break;
 8012502:	bf00      	nop
 8012504:	e008      	b.n	8012518 <tcp_receive+0xec8>
                break;
 8012506:	bf00      	nop
 8012508:	e006      	b.n	8012518 <tcp_receive+0xec8>
                  break;
 801250a:	bf00      	nop
 801250c:	e004      	b.n	8012518 <tcp_receive+0xec8>
                  break;
 801250e:	bf00      	nop
 8012510:	e002      	b.n	8012518 <tcp_receive+0xec8>
                  break;
 8012512:	bf00      	nop
 8012514:	e000      	b.n	8012518 <tcp_receive+0xec8>
                break;
 8012516:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f001 fe89 	bl	8014230 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801251e:	e003      	b.n	8012528 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f001 fe85 	bl	8014230 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012526:	e01a      	b.n	801255e <tcp_receive+0xf0e>
 8012528:	e019      	b.n	801255e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801252a:	4b0f      	ldr	r3, [pc, #60]	; (8012568 <tcp_receive+0xf18>)
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	2b00      	cmp	r3, #0
 8012536:	db0a      	blt.n	801254e <tcp_receive+0xefe>
 8012538:	4b0b      	ldr	r3, [pc, #44]	; (8012568 <tcp_receive+0xf18>)
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012544:	440b      	add	r3, r1
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	3301      	adds	r3, #1
 801254a:	2b00      	cmp	r3, #0
 801254c:	dd07      	ble.n	801255e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	8b5b      	ldrh	r3, [r3, #26]
 8012552:	f043 0302 	orr.w	r3, r3, #2
 8012556:	b29a      	uxth	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801255c:	e7ff      	b.n	801255e <tcp_receive+0xf0e>
 801255e:	bf00      	nop
 8012560:	3750      	adds	r7, #80	; 0x50
 8012562:	46bd      	mov	sp, r7
 8012564:	bdb0      	pop	{r4, r5, r7, pc}
 8012566:	bf00      	nop
 8012568:	20008178 	.word	0x20008178
 801256c:	20008158 	.word	0x20008158
 8012570:	20008182 	.word	0x20008182
 8012574:	0801a2a4 	.word	0x0801a2a4
 8012578:	0801a64c 	.word	0x0801a64c
 801257c:	0801a2f0 	.word	0x0801a2f0

08012580 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012586:	4b15      	ldr	r3, [pc, #84]	; (80125dc <tcp_get_next_optbyte+0x5c>)
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	1c5a      	adds	r2, r3, #1
 801258c:	b291      	uxth	r1, r2
 801258e:	4a13      	ldr	r2, [pc, #76]	; (80125dc <tcp_get_next_optbyte+0x5c>)
 8012590:	8011      	strh	r1, [r2, #0]
 8012592:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012594:	4b12      	ldr	r3, [pc, #72]	; (80125e0 <tcp_get_next_optbyte+0x60>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d004      	beq.n	80125a6 <tcp_get_next_optbyte+0x26>
 801259c:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <tcp_get_next_optbyte+0x64>)
 801259e:	881b      	ldrh	r3, [r3, #0]
 80125a0:	88fa      	ldrh	r2, [r7, #6]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d208      	bcs.n	80125b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80125a6:	4b10      	ldr	r3, [pc, #64]	; (80125e8 <tcp_get_next_optbyte+0x68>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	3314      	adds	r3, #20
 80125ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80125ae:	88fb      	ldrh	r3, [r7, #6]
 80125b0:	683a      	ldr	r2, [r7, #0]
 80125b2:	4413      	add	r3, r2
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	e00b      	b.n	80125d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80125b8:	88fb      	ldrh	r3, [r7, #6]
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	4b09      	ldr	r3, [pc, #36]	; (80125e4 <tcp_get_next_optbyte+0x64>)
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80125c6:	4b06      	ldr	r3, [pc, #24]	; (80125e0 <tcp_get_next_optbyte+0x60>)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	797b      	ldrb	r3, [r7, #5]
 80125cc:	4413      	add	r3, r2
 80125ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	370c      	adds	r7, #12
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	20008174 	.word	0x20008174
 80125e0:	20008170 	.word	0x20008170
 80125e4:	2000816e 	.word	0x2000816e
 80125e8:	20008168 	.word	0x20008168

080125ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <tcp_parseopt+0x1c>
 80125fa:	4b32      	ldr	r3, [pc, #200]	; (80126c4 <tcp_parseopt+0xd8>)
 80125fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8012600:	4931      	ldr	r1, [pc, #196]	; (80126c8 <tcp_parseopt+0xdc>)
 8012602:	4832      	ldr	r0, [pc, #200]	; (80126cc <tcp_parseopt+0xe0>)
 8012604:	f005 fde2 	bl	80181cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012608:	4b31      	ldr	r3, [pc, #196]	; (80126d0 <tcp_parseopt+0xe4>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d055      	beq.n	80126bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012610:	4b30      	ldr	r3, [pc, #192]	; (80126d4 <tcp_parseopt+0xe8>)
 8012612:	2200      	movs	r2, #0
 8012614:	801a      	strh	r2, [r3, #0]
 8012616:	e045      	b.n	80126a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012618:	f7ff ffb2 	bl	8012580 <tcp_get_next_optbyte>
 801261c:	4603      	mov	r3, r0
 801261e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012620:	7bfb      	ldrb	r3, [r7, #15]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d006      	beq.n	8012634 <tcp_parseopt+0x48>
 8012626:	2b02      	cmp	r3, #2
 8012628:	dc2b      	bgt.n	8012682 <tcp_parseopt+0x96>
 801262a:	2b00      	cmp	r3, #0
 801262c:	d041      	beq.n	80126b2 <tcp_parseopt+0xc6>
 801262e:	2b01      	cmp	r3, #1
 8012630:	d127      	bne.n	8012682 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012632:	e037      	b.n	80126a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012634:	f7ff ffa4 	bl	8012580 <tcp_get_next_optbyte>
 8012638:	4603      	mov	r3, r0
 801263a:	2b04      	cmp	r3, #4
 801263c:	d13b      	bne.n	80126b6 <tcp_parseopt+0xca>
 801263e:	4b25      	ldr	r3, [pc, #148]	; (80126d4 <tcp_parseopt+0xe8>)
 8012640:	881b      	ldrh	r3, [r3, #0]
 8012642:	3301      	adds	r3, #1
 8012644:	4a22      	ldr	r2, [pc, #136]	; (80126d0 <tcp_parseopt+0xe4>)
 8012646:	8812      	ldrh	r2, [r2, #0]
 8012648:	4293      	cmp	r3, r2
 801264a:	da34      	bge.n	80126b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801264c:	f7ff ff98 	bl	8012580 <tcp_get_next_optbyte>
 8012650:	4603      	mov	r3, r0
 8012652:	b29b      	uxth	r3, r3
 8012654:	021b      	lsls	r3, r3, #8
 8012656:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012658:	f7ff ff92 	bl	8012580 <tcp_get_next_optbyte>
 801265c:	4603      	mov	r3, r0
 801265e:	b29a      	uxth	r2, r3
 8012660:	89bb      	ldrh	r3, [r7, #12]
 8012662:	4313      	orrs	r3, r2
 8012664:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012666:	89bb      	ldrh	r3, [r7, #12]
 8012668:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 801266c:	d804      	bhi.n	8012678 <tcp_parseopt+0x8c>
 801266e:	89bb      	ldrh	r3, [r7, #12]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d001      	beq.n	8012678 <tcp_parseopt+0x8c>
 8012674:	89ba      	ldrh	r2, [r7, #12]
 8012676:	e001      	b.n	801267c <tcp_parseopt+0x90>
 8012678:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012680:	e010      	b.n	80126a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012682:	f7ff ff7d 	bl	8012580 <tcp_get_next_optbyte>
 8012686:	4603      	mov	r3, r0
 8012688:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801268a:	7afb      	ldrb	r3, [r7, #11]
 801268c:	2b01      	cmp	r3, #1
 801268e:	d914      	bls.n	80126ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012690:	7afb      	ldrb	r3, [r7, #11]
 8012692:	b29a      	uxth	r2, r3
 8012694:	4b0f      	ldr	r3, [pc, #60]	; (80126d4 <tcp_parseopt+0xe8>)
 8012696:	881b      	ldrh	r3, [r3, #0]
 8012698:	4413      	add	r3, r2
 801269a:	b29b      	uxth	r3, r3
 801269c:	3b02      	subs	r3, #2
 801269e:	b29a      	uxth	r2, r3
 80126a0:	4b0c      	ldr	r3, [pc, #48]	; (80126d4 <tcp_parseopt+0xe8>)
 80126a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80126a4:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <tcp_parseopt+0xe8>)
 80126a6:	881a      	ldrh	r2, [r3, #0]
 80126a8:	4b09      	ldr	r3, [pc, #36]	; (80126d0 <tcp_parseopt+0xe4>)
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d3b3      	bcc.n	8012618 <tcp_parseopt+0x2c>
 80126b0:	e004      	b.n	80126bc <tcp_parseopt+0xd0>
          return;
 80126b2:	bf00      	nop
 80126b4:	e002      	b.n	80126bc <tcp_parseopt+0xd0>
            return;
 80126b6:	bf00      	nop
 80126b8:	e000      	b.n	80126bc <tcp_parseopt+0xd0>
            return;
 80126ba:	bf00      	nop
      }
    }
  }
}
 80126bc:	3710      	adds	r7, #16
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	0801a2a4 	.word	0x0801a2a4
 80126c8:	0801a708 	.word	0x0801a708
 80126cc:	0801a2f0 	.word	0x0801a2f0
 80126d0:	2000816c 	.word	0x2000816c
 80126d4:	20008174 	.word	0x20008174

080126d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80126d8:	b480      	push	{r7}
 80126da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80126dc:	4b05      	ldr	r3, [pc, #20]	; (80126f4 <tcp_trigger_input_pcb_close+0x1c>)
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	f043 0310 	orr.w	r3, r3, #16
 80126e4:	b2da      	uxtb	r2, r3
 80126e6:	4b03      	ldr	r3, [pc, #12]	; (80126f4 <tcp_trigger_input_pcb_close+0x1c>)
 80126e8:	701a      	strb	r2, [r3, #0]
}
 80126ea:	bf00      	nop
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr
 80126f4:	20008185 	.word	0x20008185

080126f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00a      	beq.n	8012720 <tcp_route+0x28>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	7a1b      	ldrb	r3, [r3, #8]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d006      	beq.n	8012720 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	7a1b      	ldrb	r3, [r3, #8]
 8012716:	4618      	mov	r0, r3
 8012718:	f7fb f94c 	bl	800d9b4 <netif_get_by_index>
 801271c:	4603      	mov	r3, r0
 801271e:	e003      	b.n	8012728 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f003 fad3 	bl	8015ccc <ip4_route>
 8012726:	4603      	mov	r3, r0
  }
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012730:	b590      	push	{r4, r7, lr}
 8012732:	b087      	sub	sp, #28
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	603b      	str	r3, [r7, #0]
 801273c:	4613      	mov	r3, r2
 801273e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d105      	bne.n	8012752 <tcp_create_segment+0x22>
 8012746:	4b44      	ldr	r3, [pc, #272]	; (8012858 <tcp_create_segment+0x128>)
 8012748:	22a3      	movs	r2, #163	; 0xa3
 801274a:	4944      	ldr	r1, [pc, #272]	; (801285c <tcp_create_segment+0x12c>)
 801274c:	4844      	ldr	r0, [pc, #272]	; (8012860 <tcp_create_segment+0x130>)
 801274e:	f005 fd3d 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d105      	bne.n	8012764 <tcp_create_segment+0x34>
 8012758:	4b3f      	ldr	r3, [pc, #252]	; (8012858 <tcp_create_segment+0x128>)
 801275a:	22a4      	movs	r2, #164	; 0xa4
 801275c:	4941      	ldr	r1, [pc, #260]	; (8012864 <tcp_create_segment+0x134>)
 801275e:	4840      	ldr	r0, [pc, #256]	; (8012860 <tcp_create_segment+0x130>)
 8012760:	f005 fd34 	bl	80181cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012764:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	b2db      	uxtb	r3, r3
 801276c:	f003 0304 	and.w	r3, r3, #4
 8012770:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012772:	2003      	movs	r0, #3
 8012774:	f7fa fd98 	bl	800d2a8 <memp_malloc>
 8012778:	6138      	str	r0, [r7, #16]
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d104      	bne.n	801278a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012780:	68b8      	ldr	r0, [r7, #8]
 8012782:	f7fb fc77 	bl	800e074 <pbuf_free>
    return NULL;
 8012786:	2300      	movs	r3, #0
 8012788:	e061      	b.n	801284e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012790:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	891a      	ldrh	r2, [r3, #8]
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d205      	bcs.n	80127b6 <tcp_create_segment+0x86>
 80127aa:	4b2b      	ldr	r3, [pc, #172]	; (8012858 <tcp_create_segment+0x128>)
 80127ac:	22b0      	movs	r2, #176	; 0xb0
 80127ae:	492e      	ldr	r1, [pc, #184]	; (8012868 <tcp_create_segment+0x138>)
 80127b0:	482b      	ldr	r0, [pc, #172]	; (8012860 <tcp_create_segment+0x130>)
 80127b2:	f005 fd0b 	bl	80181cc <iprintf>
  seg->len = p->tot_len - optlen;
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	891a      	ldrh	r2, [r3, #8]
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80127c6:	2114      	movs	r1, #20
 80127c8:	68b8      	ldr	r0, [r7, #8]
 80127ca:	f7fb fbbd 	bl	800df48 <pbuf_add_header>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d004      	beq.n	80127de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80127d4:	6938      	ldr	r0, [r7, #16]
 80127d6:	f7fd f81e 	bl	800f816 <tcp_seg_free>
    return NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	e037      	b.n	801284e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	685a      	ldr	r2, [r3, #4]
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	8ada      	ldrh	r2, [r3, #22]
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	68dc      	ldr	r4, [r3, #12]
 80127f0:	4610      	mov	r0, r2
 80127f2:	f7fa f8e2 	bl	800c9ba <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	8b1a      	ldrh	r2, [r3, #24]
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	68dc      	ldr	r4, [r3, #12]
 8012802:	4610      	mov	r0, r2
 8012804:	f7fa f8d9 	bl	800c9ba <lwip_htons>
 8012808:	4603      	mov	r3, r0
 801280a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	68dc      	ldr	r4, [r3, #12]
 8012810:	6838      	ldr	r0, [r7, #0]
 8012812:	f7fa f8e7 	bl	800c9e4 <lwip_htonl>
 8012816:	4603      	mov	r3, r0
 8012818:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801281a:	7dfb      	ldrb	r3, [r7, #23]
 801281c:	089b      	lsrs	r3, r3, #2
 801281e:	b2db      	uxtb	r3, r3
 8012820:	b29b      	uxth	r3, r3
 8012822:	3305      	adds	r3, #5
 8012824:	b29b      	uxth	r3, r3
 8012826:	031b      	lsls	r3, r3, #12
 8012828:	b29a      	uxth	r2, r3
 801282a:	79fb      	ldrb	r3, [r7, #7]
 801282c:	b29b      	uxth	r3, r3
 801282e:	4313      	orrs	r3, r2
 8012830:	b29a      	uxth	r2, r3
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	68dc      	ldr	r4, [r3, #12]
 8012836:	4610      	mov	r0, r2
 8012838:	f7fa f8bf 	bl	800c9ba <lwip_htons>
 801283c:	4603      	mov	r3, r0
 801283e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	749a      	strb	r2, [r3, #18]
 8012848:	2200      	movs	r2, #0
 801284a:	74da      	strb	r2, [r3, #19]
  return seg;
 801284c:	693b      	ldr	r3, [r7, #16]
}
 801284e:	4618      	mov	r0, r3
 8012850:	371c      	adds	r7, #28
 8012852:	46bd      	mov	sp, r7
 8012854:	bd90      	pop	{r4, r7, pc}
 8012856:	bf00      	nop
 8012858:	0801a724 	.word	0x0801a724
 801285c:	0801a758 	.word	0x0801a758
 8012860:	0801a778 	.word	0x0801a778
 8012864:	0801a7a0 	.word	0x0801a7a0
 8012868:	0801a7c4 	.word	0x0801a7c4

0801286c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
 8012872:	607b      	str	r3, [r7, #4]
 8012874:	4603      	mov	r3, r0
 8012876:	73fb      	strb	r3, [r7, #15]
 8012878:	460b      	mov	r3, r1
 801287a:	81bb      	strh	r3, [r7, #12]
 801287c:	4613      	mov	r3, r2
 801287e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012880:	89bb      	ldrh	r3, [r7, #12]
 8012882:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d105      	bne.n	8012896 <tcp_pbuf_prealloc+0x2a>
 801288a:	4b30      	ldr	r3, [pc, #192]	; (801294c <tcp_pbuf_prealloc+0xe0>)
 801288c:	22e8      	movs	r2, #232	; 0xe8
 801288e:	4930      	ldr	r1, [pc, #192]	; (8012950 <tcp_pbuf_prealloc+0xe4>)
 8012890:	4830      	ldr	r0, [pc, #192]	; (8012954 <tcp_pbuf_prealloc+0xe8>)
 8012892:	f005 fc9b 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d105      	bne.n	80128a8 <tcp_pbuf_prealloc+0x3c>
 801289c:	4b2b      	ldr	r3, [pc, #172]	; (801294c <tcp_pbuf_prealloc+0xe0>)
 801289e:	22e9      	movs	r2, #233	; 0xe9
 80128a0:	492d      	ldr	r1, [pc, #180]	; (8012958 <tcp_pbuf_prealloc+0xec>)
 80128a2:	482c      	ldr	r0, [pc, #176]	; (8012954 <tcp_pbuf_prealloc+0xe8>)
 80128a4:	f005 fc92 	bl	80181cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80128a8:	89ba      	ldrh	r2, [r7, #12]
 80128aa:	897b      	ldrh	r3, [r7, #10]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d221      	bcs.n	80128f4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80128b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80128b4:	f003 0302 	and.w	r3, r3, #2
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d111      	bne.n	80128e0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80128bc:	6a3b      	ldr	r3, [r7, #32]
 80128be:	8b5b      	ldrh	r3, [r3, #26]
 80128c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d115      	bne.n	80128f4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80128c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d007      	beq.n	80128e0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d103      	bne.n	80128e0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80128d8:	6a3b      	ldr	r3, [r7, #32]
 80128da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d009      	beq.n	80128f4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80128e0:	89bb      	ldrh	r3, [r7, #12]
 80128e2:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80128e6:	f023 0203 	bic.w	r2, r3, #3
 80128ea:	897b      	ldrh	r3, [r7, #10]
 80128ec:	4293      	cmp	r3, r2
 80128ee:	bf28      	it	cs
 80128f0:	4613      	movcs	r3, r2
 80128f2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80128f4:	8af9      	ldrh	r1, [r7, #22]
 80128f6:	7bfb      	ldrb	r3, [r7, #15]
 80128f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fb f8d5 	bl	800daac <pbuf_alloc>
 8012902:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801290a:	2300      	movs	r3, #0
 801290c:	e019      	b.n	8012942 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d006      	beq.n	8012924 <tcp_pbuf_prealloc+0xb8>
 8012916:	4b0d      	ldr	r3, [pc, #52]	; (801294c <tcp_pbuf_prealloc+0xe0>)
 8012918:	f240 120b 	movw	r2, #267	; 0x10b
 801291c:	490f      	ldr	r1, [pc, #60]	; (801295c <tcp_pbuf_prealloc+0xf0>)
 801291e:	480d      	ldr	r0, [pc, #52]	; (8012954 <tcp_pbuf_prealloc+0xe8>)
 8012920:	f005 fc54 	bl	80181cc <iprintf>
  *oversize = p->len - length;
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	895a      	ldrh	r2, [r3, #10]
 8012928:	89bb      	ldrh	r3, [r7, #12]
 801292a:	1ad3      	subs	r3, r2, r3
 801292c:	b29a      	uxth	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	89ba      	ldrh	r2, [r7, #12]
 8012936:	811a      	strh	r2, [r3, #8]
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	891a      	ldrh	r2, [r3, #8]
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	815a      	strh	r2, [r3, #10]
  return p;
 8012940:	693b      	ldr	r3, [r7, #16]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3718      	adds	r7, #24
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	0801a724 	.word	0x0801a724
 8012950:	0801a7dc 	.word	0x0801a7dc
 8012954:	0801a778 	.word	0x0801a778
 8012958:	0801a800 	.word	0x0801a800
 801295c:	0801a820 	.word	0x0801a820

08012960 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <tcp_write_checks+0x20>
 8012972:	4b33      	ldr	r3, [pc, #204]	; (8012a40 <tcp_write_checks+0xe0>)
 8012974:	f240 1233 	movw	r2, #307	; 0x133
 8012978:	4932      	ldr	r1, [pc, #200]	; (8012a44 <tcp_write_checks+0xe4>)
 801297a:	4833      	ldr	r0, [pc, #204]	; (8012a48 <tcp_write_checks+0xe8>)
 801297c:	f005 fc26 	bl	80181cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7d1b      	ldrb	r3, [r3, #20]
 8012984:	2b04      	cmp	r3, #4
 8012986:	d00e      	beq.n	80129a6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801298c:	2b07      	cmp	r3, #7
 801298e:	d00a      	beq.n	80129a6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012994:	2b02      	cmp	r3, #2
 8012996:	d006      	beq.n	80129a6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801299c:	2b03      	cmp	r3, #3
 801299e:	d002      	beq.n	80129a6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80129a0:	f06f 030a 	mvn.w	r3, #10
 80129a4:	e048      	b.n	8012a38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80129a6:	887b      	ldrh	r3, [r7, #2]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d101      	bne.n	80129b0 <tcp_write_checks+0x50>
    return ERR_OK;
 80129ac:	2300      	movs	r3, #0
 80129ae:	e043      	b.n	8012a38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129b6:	887a      	ldrh	r2, [r7, #2]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d909      	bls.n	80129d0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	8b5b      	ldrh	r3, [r3, #26]
 80129c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80129ca:	f04f 33ff 	mov.w	r3, #4294967295
 80129ce:	e033      	b.n	8012a38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d6:	2b0f      	cmp	r3, #15
 80129d8:	d909      	bls.n	80129ee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	8b5b      	ldrh	r3, [r3, #26]
 80129de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80129e8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ec:	e024      	b.n	8012a38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00f      	beq.n	8012a18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d11a      	bne.n	8012a36 <tcp_write_checks+0xd6>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d116      	bne.n	8012a36 <tcp_write_checks+0xd6>
 8012a08:	4b0d      	ldr	r3, [pc, #52]	; (8012a40 <tcp_write_checks+0xe0>)
 8012a0a:	f240 1255 	movw	r2, #341	; 0x155
 8012a0e:	490f      	ldr	r1, [pc, #60]	; (8012a4c <tcp_write_checks+0xec>)
 8012a10:	480d      	ldr	r0, [pc, #52]	; (8012a48 <tcp_write_checks+0xe8>)
 8012a12:	f005 fbdb 	bl	80181cc <iprintf>
 8012a16:	e00e      	b.n	8012a36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d103      	bne.n	8012a28 <tcp_write_checks+0xc8>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d006      	beq.n	8012a36 <tcp_write_checks+0xd6>
 8012a28:	4b05      	ldr	r3, [pc, #20]	; (8012a40 <tcp_write_checks+0xe0>)
 8012a2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012a2e:	4908      	ldr	r1, [pc, #32]	; (8012a50 <tcp_write_checks+0xf0>)
 8012a30:	4805      	ldr	r0, [pc, #20]	; (8012a48 <tcp_write_checks+0xe8>)
 8012a32:	f005 fbcb 	bl	80181cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	0801a724 	.word	0x0801a724
 8012a44:	0801a834 	.word	0x0801a834
 8012a48:	0801a778 	.word	0x0801a778
 8012a4c:	0801a854 	.word	0x0801a854
 8012a50:	0801a890 	.word	0x0801a890

08012a54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012a54:	b590      	push	{r4, r7, lr}
 8012a56:	b09b      	sub	sp, #108	; 0x6c
 8012a58:	af04      	add	r7, sp, #16
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	4611      	mov	r1, r2
 8012a60:	461a      	mov	r2, r3
 8012a62:	460b      	mov	r3, r1
 8012a64:	80fb      	strh	r3, [r7, #6]
 8012a66:	4613      	mov	r3, r2
 8012a68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	653b      	str	r3, [r7, #80]	; 0x50
 8012a72:	2300      	movs	r3, #0
 8012a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a76:	2300      	movs	r3, #0
 8012a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012a84:	2300      	movs	r3, #0
 8012a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d109      	bne.n	8012ab0 <tcp_write+0x5c>
 8012a9c:	4ba4      	ldr	r3, [pc, #656]	; (8012d30 <tcp_write+0x2dc>)
 8012a9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012aa2:	49a4      	ldr	r1, [pc, #656]	; (8012d34 <tcp_write+0x2e0>)
 8012aa4:	48a4      	ldr	r0, [pc, #656]	; (8012d38 <tcp_write+0x2e4>)
 8012aa6:	f005 fb91 	bl	80181cc <iprintf>
 8012aaa:	f06f 030f 	mvn.w	r3, #15
 8012aae:	e32a      	b.n	8013106 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012ab6:	085b      	lsrs	r3, r3, #1
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	bf28      	it	cs
 8012ac2:	4613      	movcs	r3, r2
 8012ac4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d102      	bne.n	8012ad2 <tcp_write+0x7e>
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ad0:	e000      	b.n	8012ad4 <tcp_write+0x80>
 8012ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d109      	bne.n	8012af0 <tcp_write+0x9c>
 8012adc:	4b94      	ldr	r3, [pc, #592]	; (8012d30 <tcp_write+0x2dc>)
 8012ade:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012ae2:	4996      	ldr	r1, [pc, #600]	; (8012d3c <tcp_write+0x2e8>)
 8012ae4:	4894      	ldr	r0, [pc, #592]	; (8012d38 <tcp_write+0x2e4>)
 8012ae6:	f005 fb71 	bl	80181cc <iprintf>
 8012aea:	f06f 030f 	mvn.w	r3, #15
 8012aee:	e30a      	b.n	8013106 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012af0:	88fb      	ldrh	r3, [r7, #6]
 8012af2:	4619      	mov	r1, r3
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f7ff ff33 	bl	8012960 <tcp_write_checks>
 8012afa:	4603      	mov	r3, r0
 8012afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012b00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d002      	beq.n	8012b0e <tcp_write+0xba>
    return err;
 8012b08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012b0c:	e2fb      	b.n	8013106 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 80f6 	beq.w	8012d14 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8012b2e:	e002      	b.n	8012b36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d1f8      	bne.n	8012b30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b40:	7a9b      	ldrb	r3, [r3, #10]
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	f003 0304 	and.w	r3, r3, #4
 8012b4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012b4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b50:	891b      	ldrh	r3, [r3, #8]
 8012b52:	4619      	mov	r1, r3
 8012b54:	8c3b      	ldrh	r3, [r7, #32]
 8012b56:	440b      	add	r3, r1
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	da06      	bge.n	8012b6a <tcp_write+0x116>
 8012b5c:	4b74      	ldr	r3, [pc, #464]	; (8012d30 <tcp_write+0x2dc>)
 8012b5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012b62:	4977      	ldr	r1, [pc, #476]	; (8012d40 <tcp_write+0x2ec>)
 8012b64:	4874      	ldr	r0, [pc, #464]	; (8012d38 <tcp_write+0x2e4>)
 8012b66:	f005 fb31 	bl	80181cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b6c:	891a      	ldrh	r2, [r3, #8]
 8012b6e:	8c3b      	ldrh	r3, [r7, #32]
 8012b70:	4413      	add	r3, r2
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012b82:	8a7b      	ldrh	r3, [r7, #18]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d026      	beq.n	8012bd6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012b88:	8a7b      	ldrh	r3, [r7, #18]
 8012b8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d206      	bcs.n	8012b9e <tcp_write+0x14a>
 8012b90:	4b67      	ldr	r3, [pc, #412]	; (8012d30 <tcp_write+0x2dc>)
 8012b92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012b96:	496b      	ldr	r1, [pc, #428]	; (8012d44 <tcp_write+0x2f0>)
 8012b98:	4867      	ldr	r0, [pc, #412]	; (8012d38 <tcp_write+0x2e4>)
 8012b9a:	f005 fb17 	bl	80181cc <iprintf>
      seg = last_unsent;
 8012b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012ba2:	8a7b      	ldrh	r3, [r7, #18]
 8012ba4:	88fa      	ldrh	r2, [r7, #6]
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	bf28      	it	cs
 8012baa:	4613      	movcs	r3, r2
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	bf28      	it	cs
 8012bb4:	4613      	movcs	r3, r2
 8012bb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012bbe:	4413      	add	r3, r2
 8012bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012bc4:	8a7a      	ldrh	r2, [r7, #18]
 8012bc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012bc8:	1ad3      	subs	r3, r2, r3
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012bce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012bd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012bd2:	1ad3      	subs	r3, r2, r3
 8012bd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012bd6:	8a7b      	ldrh	r3, [r7, #18]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d00b      	beq.n	8012bf4 <tcp_write+0x1a0>
 8012bdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012be0:	88fb      	ldrh	r3, [r7, #6]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d006      	beq.n	8012bf4 <tcp_write+0x1a0>
 8012be6:	4b52      	ldr	r3, [pc, #328]	; (8012d30 <tcp_write+0x2dc>)
 8012be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bec:	4956      	ldr	r1, [pc, #344]	; (8012d48 <tcp_write+0x2f4>)
 8012bee:	4852      	ldr	r0, [pc, #328]	; (8012d38 <tcp_write+0x2e4>)
 8012bf0:	f005 faec 	bl	80181cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012bf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bf8:	88fb      	ldrh	r3, [r7, #6]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	f080 8167 	bcs.w	8012ece <tcp_write+0x47a>
 8012c00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 8163 	beq.w	8012ece <tcp_write+0x47a>
 8012c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c0a:	891b      	ldrh	r3, [r3, #8]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 815e 	beq.w	8012ece <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012c12:	88fa      	ldrh	r2, [r7, #6]
 8012c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c18:	1ad2      	subs	r2, r2, r3
 8012c1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	bfa8      	it	ge
 8012c20:	4613      	movge	r3, r2
 8012c22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c28:	797b      	ldrb	r3, [r7, #5]
 8012c2a:	f003 0301 	and.w	r3, r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d027      	beq.n	8012c82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012c32:	f107 0012 	add.w	r0, r7, #18
 8012c36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c38:	8bf9      	ldrh	r1, [r7, #30]
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	9302      	str	r3, [sp, #8]
 8012c3e:	797b      	ldrb	r3, [r7, #5]
 8012c40:	9301      	str	r3, [sp, #4]
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	4603      	mov	r3, r0
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f7ff fe0f 	bl	801286c <tcp_pbuf_prealloc>
 8012c4e:	6578      	str	r0, [r7, #84]	; 0x54
 8012c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 8225 	beq.w	80130a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c5a:	6858      	ldr	r0, [r3, #4]
 8012c5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	4413      	add	r3, r2
 8012c64:	8bfa      	ldrh	r2, [r7, #30]
 8012c66:	4619      	mov	r1, r3
 8012c68:	f005 fba3 	bl	80183b2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012c6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c6e:	f7fb fa89 	bl	800e184 <pbuf_clen>
 8012c72:	4603      	mov	r3, r0
 8012c74:	461a      	mov	r2, r3
 8012c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012c80:	e041      	b.n	8012d06 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	637b      	str	r3, [r7, #52]	; 0x34
 8012c88:	e002      	b.n	8012c90 <tcp_write+0x23c>
 8012c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8012c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1f8      	bne.n	8012c8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9a:	7b1b      	ldrb	r3, [r3, #12]
 8012c9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d115      	bne.n	8012cd0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012caa:	8952      	ldrh	r2, [r2, #10]
 8012cac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012cae:	68ba      	ldr	r2, [r7, #8]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d10d      	bne.n	8012cd0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012cb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d006      	beq.n	8012cca <tcp_write+0x276>
 8012cbc:	4b1c      	ldr	r3, [pc, #112]	; (8012d30 <tcp_write+0x2dc>)
 8012cbe:	f240 2231 	movw	r2, #561	; 0x231
 8012cc2:	4922      	ldr	r1, [pc, #136]	; (8012d4c <tcp_write+0x2f8>)
 8012cc4:	481c      	ldr	r0, [pc, #112]	; (8012d38 <tcp_write+0x2e4>)
 8012cc6:	f005 fa81 	bl	80181cc <iprintf>
          extendlen = seglen;
 8012cca:	8bfb      	ldrh	r3, [r7, #30]
 8012ccc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012cce:	e01a      	b.n	8012d06 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012cd0:	8bfb      	ldrh	r3, [r7, #30]
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f7fa fee8 	bl	800daac <pbuf_alloc>
 8012cdc:	6578      	str	r0, [r7, #84]	; 0x54
 8012cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 81e0 	beq.w	80130a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	441a      	add	r2, r3
 8012cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012cf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012cf4:	f7fb fa46 	bl	800e184 <pbuf_clen>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d00:	4413      	add	r3, r2
 8012d02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012d06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d0a:	8bfb      	ldrh	r3, [r7, #30]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012d12:	e0dc      	b.n	8012ece <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f000 80d7 	beq.w	8012ece <tcp_write+0x47a>
 8012d20:	4b03      	ldr	r3, [pc, #12]	; (8012d30 <tcp_write+0x2dc>)
 8012d22:	f240 224a 	movw	r2, #586	; 0x24a
 8012d26:	490a      	ldr	r1, [pc, #40]	; (8012d50 <tcp_write+0x2fc>)
 8012d28:	4803      	ldr	r0, [pc, #12]	; (8012d38 <tcp_write+0x2e4>)
 8012d2a:	f005 fa4f 	bl	80181cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012d2e:	e0ce      	b.n	8012ece <tcp_write+0x47a>
 8012d30:	0801a724 	.word	0x0801a724
 8012d34:	0801a8c4 	.word	0x0801a8c4
 8012d38:	0801a778 	.word	0x0801a778
 8012d3c:	0801a8dc 	.word	0x0801a8dc
 8012d40:	0801a910 	.word	0x0801a910
 8012d44:	0801a928 	.word	0x0801a928
 8012d48:	0801a948 	.word	0x0801a948
 8012d4c:	0801a968 	.word	0x0801a968
 8012d50:	0801a994 	.word	0x0801a994
    struct pbuf *p;
    u16_t left = len - pos;
 8012d54:	88fa      	ldrh	r2, [r7, #6]
 8012d56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d5a:	1ad3      	subs	r3, r2, r3
 8012d5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012d5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012d6a:	8b7a      	ldrh	r2, [r7, #26]
 8012d6c:	8bbb      	ldrh	r3, [r7, #28]
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	bf28      	it	cs
 8012d72:	4613      	movcs	r3, r2
 8012d74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012d76:	797b      	ldrb	r3, [r7, #5]
 8012d78:	f003 0301 	and.w	r3, r3, #1
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d036      	beq.n	8012dee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	8b3b      	ldrh	r3, [r7, #24]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b299      	uxth	r1, r3
 8012d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	bf0c      	ite	eq
 8012d92:	2301      	moveq	r3, #1
 8012d94:	2300      	movne	r3, #0
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	f107 0012 	add.w	r0, r7, #18
 8012d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d9e:	9302      	str	r3, [sp, #8]
 8012da0:	797b      	ldrb	r3, [r7, #5]
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	4603      	mov	r3, r0
 8012daa:	2036      	movs	r0, #54	; 0x36
 8012dac:	f7ff fd5e 	bl	801286c <tcp_pbuf_prealloc>
 8012db0:	6338      	str	r0, [r7, #48]	; 0x30
 8012db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	f000 8178 	beq.w	80130aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	895b      	ldrh	r3, [r3, #10]
 8012dbe:	8b3a      	ldrh	r2, [r7, #24]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d906      	bls.n	8012dd2 <tcp_write+0x37e>
 8012dc4:	4b8c      	ldr	r3, [pc, #560]	; (8012ff8 <tcp_write+0x5a4>)
 8012dc6:	f240 2266 	movw	r2, #614	; 0x266
 8012dca:	498c      	ldr	r1, [pc, #560]	; (8012ffc <tcp_write+0x5a8>)
 8012dcc:	488c      	ldr	r0, [pc, #560]	; (8013000 <tcp_write+0x5ac>)
 8012dce:	f005 f9fd 	bl	80181cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	685a      	ldr	r2, [r3, #4]
 8012dd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012dda:	18d0      	adds	r0, r2, r3
 8012ddc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	4413      	add	r3, r2
 8012de4:	8b3a      	ldrh	r2, [r7, #24]
 8012de6:	4619      	mov	r1, r3
 8012de8:	f005 fae3 	bl	80183b2 <memcpy>
 8012dec:	e02f      	b.n	8012e4e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012dee:	8a7b      	ldrh	r3, [r7, #18]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d006      	beq.n	8012e02 <tcp_write+0x3ae>
 8012df4:	4b80      	ldr	r3, [pc, #512]	; (8012ff8 <tcp_write+0x5a4>)
 8012df6:	f240 2271 	movw	r2, #625	; 0x271
 8012dfa:	4982      	ldr	r1, [pc, #520]	; (8013004 <tcp_write+0x5b0>)
 8012dfc:	4880      	ldr	r0, [pc, #512]	; (8013000 <tcp_write+0x5ac>)
 8012dfe:	f005 f9e5 	bl	80181cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012e02:	8b3b      	ldrh	r3, [r7, #24]
 8012e04:	2201      	movs	r2, #1
 8012e06:	4619      	mov	r1, r3
 8012e08:	2036      	movs	r0, #54	; 0x36
 8012e0a:	f7fa fe4f 	bl	800daac <pbuf_alloc>
 8012e0e:	6178      	str	r0, [r7, #20]
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f000 814b 	beq.w	80130ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012e18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	441a      	add	r2, r3
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012e24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e2e:	4619      	mov	r1, r3
 8012e30:	2036      	movs	r0, #54	; 0x36
 8012e32:	f7fa fe3b 	bl	800daac <pbuf_alloc>
 8012e36:	6338      	str	r0, [r7, #48]	; 0x30
 8012e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d103      	bne.n	8012e46 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012e3e:	6978      	ldr	r0, [r7, #20]
 8012e40:	f7fb f918 	bl	800e074 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012e44:	e136      	b.n	80130b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012e46:	6979      	ldr	r1, [r7, #20]
 8012e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e4a:	f7fb f9d5 	bl	800e1f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e50:	f7fb f998 	bl	800e184 <pbuf_clen>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461a      	mov	r2, r3
 8012e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012e62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e66:	2b10      	cmp	r3, #16
 8012e68:	d903      	bls.n	8012e72 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e6c:	f7fb f902 	bl	800e074 <pbuf_free>
      goto memerr;
 8012e70:	e120      	b.n	80130b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e7a:	441a      	add	r2, r3
 8012e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e80:	9300      	str	r3, [sp, #0]
 8012e82:	4613      	mov	r3, r2
 8012e84:	2200      	movs	r2, #0
 8012e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f7ff fc51 	bl	8012730 <tcp_create_segment>
 8012e8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f000 810d 	beq.w	80130b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d102      	bne.n	8012ea4 <tcp_write+0x450>
      queue = seg;
 8012e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8012ea2:	e00c      	b.n	8012ebe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d106      	bne.n	8012eb8 <tcp_write+0x464>
 8012eaa:	4b53      	ldr	r3, [pc, #332]	; (8012ff8 <tcp_write+0x5a4>)
 8012eac:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012eb0:	4955      	ldr	r1, [pc, #340]	; (8013008 <tcp_write+0x5b4>)
 8012eb2:	4853      	ldr	r0, [pc, #332]	; (8013000 <tcp_write+0x5ac>)
 8012eb4:	f005 f98a 	bl	80181cc <iprintf>
      prev_seg->next = seg;
 8012eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ebc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ec0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012ec2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ec6:	8b3b      	ldrh	r3, [r7, #24]
 8012ec8:	4413      	add	r3, r2
 8012eca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012ece:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ed2:	88fb      	ldrh	r3, [r7, #6]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	f4ff af3d 	bcc.w	8012d54 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012eda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d02c      	beq.n	8012f3a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ee6:	e01e      	b.n	8012f26 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eea:	891a      	ldrh	r2, [r3, #8]
 8012eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012eee:	4413      	add	r3, r2
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d110      	bne.n	8012f20 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f04:	8952      	ldrh	r2, [r2, #10]
 8012f06:	4413      	add	r3, r2
 8012f08:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f0a:	68b9      	ldr	r1, [r7, #8]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f005 fa50 	bl	80183b2 <memcpy>
        p->len += oversize_used;
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	895a      	ldrh	r2, [r3, #10]
 8012f16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f18:	4413      	add	r3, r2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d1dd      	bne.n	8012ee8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2e:	891a      	ldrh	r2, [r3, #8]
 8012f30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f32:	4413      	add	r3, r2
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f38:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012f3a:	8a7a      	ldrh	r2, [r7, #18]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d018      	beq.n	8012f7a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_write+0x508>
 8012f4e:	4b2a      	ldr	r3, [pc, #168]	; (8012ff8 <tcp_write+0x5a4>)
 8012f50:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012f54:	492d      	ldr	r1, [pc, #180]	; (801300c <tcp_write+0x5b8>)
 8012f56:	482a      	ldr	r0, [pc, #168]	; (8013000 <tcp_write+0x5ac>)
 8012f58:	f005 f938 	bl	80181cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fb f948 	bl	800e1f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f6a:	891a      	ldrh	r2, [r3, #8]
 8012f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f6e:	891b      	ldrh	r3, [r3, #8]
 8012f70:	4413      	add	r3, r2
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f76:	811a      	strh	r2, [r3, #8]
 8012f78:	e037      	b.n	8012fea <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012f7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d034      	beq.n	8012fea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d003      	beq.n	8012f8e <tcp_write+0x53a>
 8012f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d106      	bne.n	8012f9c <tcp_write+0x548>
 8012f8e:	4b1a      	ldr	r3, [pc, #104]	; (8012ff8 <tcp_write+0x5a4>)
 8012f90:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012f94:	491e      	ldr	r1, [pc, #120]	; (8013010 <tcp_write+0x5bc>)
 8012f96:	481a      	ldr	r0, [pc, #104]	; (8013000 <tcp_write+0x5ac>)
 8012f98:	f005 f918 	bl	80181cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fa2:	e009      	b.n	8012fb8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa6:	891a      	ldrh	r2, [r3, #8]
 8012fa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012faa:	4413      	add	r3, r2
 8012fac:	b29a      	uxth	r2, r3
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d1f1      	bne.n	8012fa4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc2:	891a      	ldrh	r2, [r3, #8]
 8012fc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fc6:	4413      	add	r3, r2
 8012fc8:	b29a      	uxth	r2, r3
 8012fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fcc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd0:	895a      	ldrh	r2, [r3, #10]
 8012fd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fd4:	4413      	add	r3, r2
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fda:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fde:	891a      	ldrh	r2, [r3, #8]
 8012fe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fe2:	4413      	add	r3, r2
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fe8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d111      	bne.n	8013014 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ff4:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ff6:	e010      	b.n	801301a <tcp_write+0x5c6>
 8012ff8:	0801a724 	.word	0x0801a724
 8012ffc:	0801a9c4 	.word	0x0801a9c4
 8013000:	0801a778 	.word	0x0801a778
 8013004:	0801aa04 	.word	0x0801aa04
 8013008:	0801aa14 	.word	0x0801aa14
 801300c:	0801aa28 	.word	0x0801aa28
 8013010:	0801aa60 	.word	0x0801aa60
  } else {
    last_unsent->next = queue;
 8013014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013018:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801301e:	88fb      	ldrh	r3, [r7, #6]
 8013020:	441a      	add	r2, r3
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801302c:	88fb      	ldrh	r3, [r7, #6]
 801302e:	1ad3      	subs	r3, r2, r3
 8013030:	b29a      	uxth	r2, r3
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801303e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00e      	beq.n	801306a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013050:	2b00      	cmp	r3, #0
 8013052:	d10a      	bne.n	801306a <tcp_write+0x616>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013058:	2b00      	cmp	r3, #0
 801305a:	d106      	bne.n	801306a <tcp_write+0x616>
 801305c:	4b2c      	ldr	r3, [pc, #176]	; (8013110 <tcp_write+0x6bc>)
 801305e:	f240 3212 	movw	r2, #786	; 0x312
 8013062:	492c      	ldr	r1, [pc, #176]	; (8013114 <tcp_write+0x6c0>)
 8013064:	482c      	ldr	r0, [pc, #176]	; (8013118 <tcp_write+0x6c4>)
 8013066:	f005 f8b1 	bl	80181cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801306c:	2b00      	cmp	r3, #0
 801306e:	d016      	beq.n	801309e <tcp_write+0x64a>
 8013070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d012      	beq.n	801309e <tcp_write+0x64a>
 8013078:	797b      	ldrb	r3, [r7, #5]
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d10d      	bne.n	801309e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	899b      	ldrh	r3, [r3, #12]
 8013088:	b29c      	uxth	r4, r3
 801308a:	2008      	movs	r0, #8
 801308c:	f7f9 fc95 	bl	800c9ba <lwip_htons>
 8013090:	4603      	mov	r3, r0
 8013092:	461a      	mov	r2, r3
 8013094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	4322      	orrs	r2, r4
 801309a:	b292      	uxth	r2, r2
 801309c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801309e:	2300      	movs	r3, #0
 80130a0:	e031      	b.n	8013106 <tcp_write+0x6b2>
          goto memerr;
 80130a2:	bf00      	nop
 80130a4:	e006      	b.n	80130b4 <tcp_write+0x660>
            goto memerr;
 80130a6:	bf00      	nop
 80130a8:	e004      	b.n	80130b4 <tcp_write+0x660>
        goto memerr;
 80130aa:	bf00      	nop
 80130ac:	e002      	b.n	80130b4 <tcp_write+0x660>
        goto memerr;
 80130ae:	bf00      	nop
 80130b0:	e000      	b.n	80130b4 <tcp_write+0x660>
      goto memerr;
 80130b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	8b5b      	ldrh	r3, [r3, #26]
 80130b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130bc:	b29a      	uxth	r2, r3
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80130c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d002      	beq.n	80130ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 80130c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80130ca:	f7fa ffd3 	bl	800e074 <pbuf_free>
  }
  if (queue != NULL) {
 80130ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <tcp_write+0x686>
    tcp_segs_free(queue);
 80130d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80130d6:	f7fc fb89 	bl	800f7ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00e      	beq.n	8013102 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d10a      	bne.n	8013102 <tcp_write+0x6ae>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d106      	bne.n	8013102 <tcp_write+0x6ae>
 80130f4:	4b06      	ldr	r3, [pc, #24]	; (8013110 <tcp_write+0x6bc>)
 80130f6:	f240 3227 	movw	r2, #807	; 0x327
 80130fa:	4906      	ldr	r1, [pc, #24]	; (8013114 <tcp_write+0x6c0>)
 80130fc:	4806      	ldr	r0, [pc, #24]	; (8013118 <tcp_write+0x6c4>)
 80130fe:	f005 f865 	bl	80181cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013106:	4618      	mov	r0, r3
 8013108:	375c      	adds	r7, #92	; 0x5c
 801310a:	46bd      	mov	sp, r7
 801310c:	bd90      	pop	{r4, r7, pc}
 801310e:	bf00      	nop
 8013110:	0801a724 	.word	0x0801a724
 8013114:	0801aa98 	.word	0x0801aa98
 8013118:	0801a778 	.word	0x0801a778

0801311c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801311c:	b590      	push	{r4, r7, lr}
 801311e:	b08b      	sub	sp, #44	; 0x2c
 8013120:	af02      	add	r7, sp, #8
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013128:	2300      	movs	r3, #0
 801312a:	61fb      	str	r3, [r7, #28]
 801312c:	2300      	movs	r3, #0
 801312e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013130:	2300      	movs	r3, #0
 8013132:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d106      	bne.n	8013148 <tcp_split_unsent_seg+0x2c>
 801313a:	4b95      	ldr	r3, [pc, #596]	; (8013390 <tcp_split_unsent_seg+0x274>)
 801313c:	f240 324b 	movw	r2, #843	; 0x34b
 8013140:	4994      	ldr	r1, [pc, #592]	; (8013394 <tcp_split_unsent_seg+0x278>)
 8013142:	4895      	ldr	r0, [pc, #596]	; (8013398 <tcp_split_unsent_seg+0x27c>)
 8013144:	f005 f842 	bl	80181cc <iprintf>

  useg = pcb->unsent;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801314c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d102      	bne.n	801315a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013154:	f04f 33ff 	mov.w	r3, #4294967295
 8013158:	e116      	b.n	8013388 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801315a:	887b      	ldrh	r3, [r7, #2]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d109      	bne.n	8013174 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013160:	4b8b      	ldr	r3, [pc, #556]	; (8013390 <tcp_split_unsent_seg+0x274>)
 8013162:	f240 3253 	movw	r2, #851	; 0x353
 8013166:	498d      	ldr	r1, [pc, #564]	; (801339c <tcp_split_unsent_seg+0x280>)
 8013168:	488b      	ldr	r0, [pc, #556]	; (8013398 <tcp_split_unsent_seg+0x27c>)
 801316a:	f005 f82f 	bl	80181cc <iprintf>
    return ERR_VAL;
 801316e:	f06f 0305 	mvn.w	r3, #5
 8013172:	e109      	b.n	8013388 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	891b      	ldrh	r3, [r3, #8]
 8013178:	887a      	ldrh	r2, [r7, #2]
 801317a:	429a      	cmp	r2, r3
 801317c:	d301      	bcc.n	8013182 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	e102      	b.n	8013388 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013186:	887a      	ldrh	r2, [r7, #2]
 8013188:	429a      	cmp	r2, r3
 801318a:	d906      	bls.n	801319a <tcp_split_unsent_seg+0x7e>
 801318c:	4b80      	ldr	r3, [pc, #512]	; (8013390 <tcp_split_unsent_seg+0x274>)
 801318e:	f240 325b 	movw	r2, #859	; 0x35b
 8013192:	4983      	ldr	r1, [pc, #524]	; (80133a0 <tcp_split_unsent_seg+0x284>)
 8013194:	4880      	ldr	r0, [pc, #512]	; (8013398 <tcp_split_unsent_seg+0x27c>)
 8013196:	f005 f819 	bl	80181cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	891b      	ldrh	r3, [r3, #8]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d106      	bne.n	80131b0 <tcp_split_unsent_seg+0x94>
 80131a2:	4b7b      	ldr	r3, [pc, #492]	; (8013390 <tcp_split_unsent_seg+0x274>)
 80131a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80131a8:	497e      	ldr	r1, [pc, #504]	; (80133a4 <tcp_split_unsent_seg+0x288>)
 80131aa:	487b      	ldr	r0, [pc, #492]	; (8013398 <tcp_split_unsent_seg+0x27c>)
 80131ac:	f005 f80e 	bl	80181cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	7a9b      	ldrb	r3, [r3, #10]
 80131b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	f003 0304 	and.w	r3, r3, #4
 80131c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	891a      	ldrh	r2, [r3, #8]
 80131c6:	887b      	ldrh	r3, [r7, #2]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80131cc:	7bbb      	ldrb	r3, [r7, #14]
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	89bb      	ldrh	r3, [r7, #12]
 80131d2:	4413      	add	r3, r2
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131da:	4619      	mov	r1, r3
 80131dc:	2036      	movs	r0, #54	; 0x36
 80131de:	f7fa fc65 	bl	800daac <pbuf_alloc>
 80131e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f000 80b7 	beq.w	801335a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	891a      	ldrh	r2, [r3, #8]
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	891b      	ldrh	r3, [r3, #8]
 80131f6:	1ad3      	subs	r3, r2, r3
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	887b      	ldrh	r3, [r7, #2]
 80131fc:	4413      	add	r3, r2
 80131fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	6858      	ldr	r0, [r3, #4]
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	685a      	ldr	r2, [r3, #4]
 8013208:	7bbb      	ldrb	r3, [r7, #14]
 801320a:	18d1      	adds	r1, r2, r3
 801320c:	897b      	ldrh	r3, [r7, #10]
 801320e:	89ba      	ldrh	r2, [r7, #12]
 8013210:	f7fb f91a 	bl	800e448 <pbuf_copy_partial>
 8013214:	4603      	mov	r3, r0
 8013216:	461a      	mov	r2, r3
 8013218:	89bb      	ldrh	r3, [r7, #12]
 801321a:	4293      	cmp	r3, r2
 801321c:	f040 809f 	bne.w	801335e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	899b      	ldrh	r3, [r3, #12]
 8013226:	b29b      	uxth	r3, r3
 8013228:	4618      	mov	r0, r3
 801322a:	f7f9 fbc6 	bl	800c9ba <lwip_htons>
 801322e:	4603      	mov	r3, r0
 8013230:	b2db      	uxtb	r3, r3
 8013232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013236:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013238:	2300      	movs	r3, #0
 801323a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801323c:	7efb      	ldrb	r3, [r7, #27]
 801323e:	f003 0308 	and.w	r3, r3, #8
 8013242:	2b00      	cmp	r3, #0
 8013244:	d007      	beq.n	8013256 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013246:	7efb      	ldrb	r3, [r7, #27]
 8013248:	f023 0308 	bic.w	r3, r3, #8
 801324c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801324e:	7ebb      	ldrb	r3, [r7, #26]
 8013250:	f043 0308 	orr.w	r3, r3, #8
 8013254:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013256:	7efb      	ldrb	r3, [r7, #27]
 8013258:	f003 0301 	and.w	r3, r3, #1
 801325c:	2b00      	cmp	r3, #0
 801325e:	d007      	beq.n	8013270 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013260:	7efb      	ldrb	r3, [r7, #27]
 8013262:	f023 0301 	bic.w	r3, r3, #1
 8013266:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013268:	7ebb      	ldrb	r3, [r7, #26]
 801326a:	f043 0301 	orr.w	r3, r3, #1
 801326e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	f7f9 fbb4 	bl	800c9e4 <lwip_htonl>
 801327c:	4602      	mov	r2, r0
 801327e:	887b      	ldrh	r3, [r7, #2]
 8013280:	18d1      	adds	r1, r2, r3
 8013282:	7eba      	ldrb	r2, [r7, #26]
 8013284:	7bfb      	ldrb	r3, [r7, #15]
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	460b      	mov	r3, r1
 801328a:	6939      	ldr	r1, [r7, #16]
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7ff fa4f 	bl	8012730 <tcp_create_segment>
 8013292:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d063      	beq.n	8013362 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fa ff70 	bl	800e184 <pbuf_clen>
 80132a4:	4603      	mov	r3, r0
 80132a6:	461a      	mov	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132ae:	1a9b      	subs	r3, r3, r2
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	6858      	ldr	r0, [r3, #4]
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	891a      	ldrh	r2, [r3, #8]
 80132c2:	89bb      	ldrh	r3, [r7, #12]
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	4619      	mov	r1, r3
 80132ca:	f7fa fd4d 	bl	800dd68 <pbuf_realloc>
  useg->len -= remainder;
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	891a      	ldrh	r2, [r3, #8]
 80132d2:	89bb      	ldrh	r3, [r7, #12]
 80132d4:	1ad3      	subs	r3, r2, r3
 80132d6:	b29a      	uxth	r2, r3
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	899b      	ldrh	r3, [r3, #12]
 80132e2:	b29c      	uxth	r4, r3
 80132e4:	7efb      	ldrb	r3, [r7, #27]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f9 fb66 	bl	800c9ba <lwip_htons>
 80132ee:	4603      	mov	r3, r0
 80132f0:	461a      	mov	r2, r3
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	4322      	orrs	r2, r4
 80132f8:	b292      	uxth	r2, r2
 80132fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	f7fa ff3f 	bl	800e184 <pbuf_clen>
 8013306:	4603      	mov	r3, r0
 8013308:	461a      	mov	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013310:	4413      	add	r3, r2
 8013312:	b29a      	uxth	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	685b      	ldr	r3, [r3, #4]
 801331e:	4618      	mov	r0, r3
 8013320:	f7fa ff30 	bl	800e184 <pbuf_clen>
 8013324:	4603      	mov	r3, r0
 8013326:	461a      	mov	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801332e:	4413      	add	r3, r2
 8013330:	b29a      	uxth	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	69fa      	ldr	r2, [r7, #28]
 8013344:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d103      	bne.n	8013356 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2200      	movs	r2, #0
 8013352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	e016      	b.n	8013388 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801335a:	bf00      	nop
 801335c:	e002      	b.n	8013364 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801335e:	bf00      	nop
 8013360:	e000      	b.n	8013364 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013362:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d006      	beq.n	8013378 <tcp_split_unsent_seg+0x25c>
 801336a:	4b09      	ldr	r3, [pc, #36]	; (8013390 <tcp_split_unsent_seg+0x274>)
 801336c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013370:	490d      	ldr	r1, [pc, #52]	; (80133a8 <tcp_split_unsent_seg+0x28c>)
 8013372:	4809      	ldr	r0, [pc, #36]	; (8013398 <tcp_split_unsent_seg+0x27c>)
 8013374:	f004 ff2a 	bl	80181cc <iprintf>
  if (p != NULL) {
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d002      	beq.n	8013384 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801337e:	6938      	ldr	r0, [r7, #16]
 8013380:	f7fa fe78 	bl	800e074 <pbuf_free>
  }

  return ERR_MEM;
 8013384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013388:	4618      	mov	r0, r3
 801338a:	3724      	adds	r7, #36	; 0x24
 801338c:	46bd      	mov	sp, r7
 801338e:	bd90      	pop	{r4, r7, pc}
 8013390:	0801a724 	.word	0x0801a724
 8013394:	0801aab8 	.word	0x0801aab8
 8013398:	0801a778 	.word	0x0801a778
 801339c:	0801aadc 	.word	0x0801aadc
 80133a0:	0801ab00 	.word	0x0801ab00
 80133a4:	0801ab10 	.word	0x0801ab10
 80133a8:	0801ab20 	.word	0x0801ab20

080133ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80133ac:	b590      	push	{r4, r7, lr}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d106      	bne.n	80133c8 <tcp_send_fin+0x1c>
 80133ba:	4b21      	ldr	r3, [pc, #132]	; (8013440 <tcp_send_fin+0x94>)
 80133bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80133c0:	4920      	ldr	r1, [pc, #128]	; (8013444 <tcp_send_fin+0x98>)
 80133c2:	4821      	ldr	r0, [pc, #132]	; (8013448 <tcp_send_fin+0x9c>)
 80133c4:	f004 ff02 	bl	80181cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d02e      	beq.n	801342e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	e002      	b.n	80133de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1f8      	bne.n	80133d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	899b      	ldrh	r3, [r3, #12]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7f9 fae3 	bl	800c9ba <lwip_htons>
 80133f4:	4603      	mov	r3, r0
 80133f6:	b2db      	uxtb	r3, r3
 80133f8:	f003 0307 	and.w	r3, r3, #7
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d116      	bne.n	801342e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	899b      	ldrh	r3, [r3, #12]
 8013406:	b29c      	uxth	r4, r3
 8013408:	2001      	movs	r0, #1
 801340a:	f7f9 fad6 	bl	800c9ba <lwip_htons>
 801340e:	4603      	mov	r3, r0
 8013410:	461a      	mov	r2, r3
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	4322      	orrs	r2, r4
 8013418:	b292      	uxth	r2, r2
 801341a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	8b5b      	ldrh	r3, [r3, #26]
 8013420:	f043 0320 	orr.w	r3, r3, #32
 8013424:	b29a      	uxth	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801342a:	2300      	movs	r3, #0
 801342c:	e004      	b.n	8013438 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801342e:	2101      	movs	r1, #1
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f000 f80b 	bl	801344c <tcp_enqueue_flags>
 8013436:	4603      	mov	r3, r0
}
 8013438:	4618      	mov	r0, r3
 801343a:	3714      	adds	r7, #20
 801343c:	46bd      	mov	sp, r7
 801343e:	bd90      	pop	{r4, r7, pc}
 8013440:	0801a724 	.word	0x0801a724
 8013444:	0801ab2c 	.word	0x0801ab2c
 8013448:	0801a778 	.word	0x0801a778

0801344c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08a      	sub	sp, #40	; 0x28
 8013450:	af02      	add	r7, sp, #8
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	460b      	mov	r3, r1
 8013456:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013458:	2300      	movs	r3, #0
 801345a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013460:	78fb      	ldrb	r3, [r7, #3]
 8013462:	f003 0303 	and.w	r3, r3, #3
 8013466:	2b00      	cmp	r3, #0
 8013468:	d106      	bne.n	8013478 <tcp_enqueue_flags+0x2c>
 801346a:	4b67      	ldr	r3, [pc, #412]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 801346c:	f240 4211 	movw	r2, #1041	; 0x411
 8013470:	4966      	ldr	r1, [pc, #408]	; (801360c <tcp_enqueue_flags+0x1c0>)
 8013472:	4867      	ldr	r0, [pc, #412]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 8013474:	f004 feaa 	bl	80181cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d106      	bne.n	801348c <tcp_enqueue_flags+0x40>
 801347e:	4b62      	ldr	r3, [pc, #392]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 8013480:	f240 4213 	movw	r2, #1043	; 0x413
 8013484:	4963      	ldr	r1, [pc, #396]	; (8013614 <tcp_enqueue_flags+0x1c8>)
 8013486:	4862      	ldr	r0, [pc, #392]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 8013488:	f004 fea0 	bl	80181cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801348c:	78fb      	ldrb	r3, [r7, #3]
 801348e:	f003 0302 	and.w	r3, r3, #2
 8013492:	2b00      	cmp	r3, #0
 8013494:	d001      	beq.n	801349a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013496:	2301      	movs	r3, #1
 8013498:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801349a:	7ffb      	ldrb	r3, [r7, #31]
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	f003 0304 	and.w	r3, r3, #4
 80134a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80134a6:	7dfb      	ldrb	r3, [r7, #23]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134ae:	4619      	mov	r1, r3
 80134b0:	2036      	movs	r0, #54	; 0x36
 80134b2:	f7fa fafb 	bl	800daac <pbuf_alloc>
 80134b6:	6138      	str	r0, [r7, #16]
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d109      	bne.n	80134d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	8b5b      	ldrh	r3, [r3, #26]
 80134c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80134cc:	f04f 33ff 	mov.w	r3, #4294967295
 80134d0:	e095      	b.n	80135fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	895a      	ldrh	r2, [r3, #10]
 80134d6:	7dfb      	ldrb	r3, [r7, #23]
 80134d8:	b29b      	uxth	r3, r3
 80134da:	429a      	cmp	r2, r3
 80134dc:	d206      	bcs.n	80134ec <tcp_enqueue_flags+0xa0>
 80134de:	4b4a      	ldr	r3, [pc, #296]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 80134e0:	f240 4239 	movw	r2, #1081	; 0x439
 80134e4:	494c      	ldr	r1, [pc, #304]	; (8013618 <tcp_enqueue_flags+0x1cc>)
 80134e6:	484a      	ldr	r0, [pc, #296]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 80134e8:	f004 fe70 	bl	80181cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80134f0:	78fa      	ldrb	r2, [r7, #3]
 80134f2:	7ffb      	ldrb	r3, [r7, #31]
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	460b      	mov	r3, r1
 80134f8:	6939      	ldr	r1, [r7, #16]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7ff f918 	bl	8012730 <tcp_create_segment>
 8013500:	60f8      	str	r0, [r7, #12]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d109      	bne.n	801351c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	8b5b      	ldrh	r3, [r3, #26]
 801350c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013510:	b29a      	uxth	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013516:	f04f 33ff 	mov.w	r3, #4294967295
 801351a:	e070      	b.n	80135fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	68db      	ldr	r3, [r3, #12]
 8013520:	f003 0303 	and.w	r3, r3, #3
 8013524:	2b00      	cmp	r3, #0
 8013526:	d006      	beq.n	8013536 <tcp_enqueue_flags+0xea>
 8013528:	4b37      	ldr	r3, [pc, #220]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 801352a:	f240 4242 	movw	r2, #1090	; 0x442
 801352e:	493b      	ldr	r1, [pc, #236]	; (801361c <tcp_enqueue_flags+0x1d0>)
 8013530:	4837      	ldr	r0, [pc, #220]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 8013532:	f004 fe4b 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	891b      	ldrh	r3, [r3, #8]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d006      	beq.n	801354c <tcp_enqueue_flags+0x100>
 801353e:	4b32      	ldr	r3, [pc, #200]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 8013540:	f240 4243 	movw	r2, #1091	; 0x443
 8013544:	4936      	ldr	r1, [pc, #216]	; (8013620 <tcp_enqueue_flags+0x1d4>)
 8013546:	4832      	ldr	r0, [pc, #200]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 8013548:	f004 fe40 	bl	80181cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013550:	2b00      	cmp	r3, #0
 8013552:	d103      	bne.n	801355c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	66da      	str	r2, [r3, #108]	; 0x6c
 801355a:	e00d      	b.n	8013578 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013560:	61bb      	str	r3, [r7, #24]
 8013562:	e002      	b.n	801356a <tcp_enqueue_flags+0x11e>
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	61bb      	str	r3, [r7, #24]
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1f8      	bne.n	8013564 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2200      	movs	r2, #0
 801357c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013580:	78fb      	ldrb	r3, [r7, #3]
 8013582:	f003 0302 	and.w	r3, r3, #2
 8013586:	2b00      	cmp	r3, #0
 8013588:	d104      	bne.n	8013594 <tcp_enqueue_flags+0x148>
 801358a:	78fb      	ldrb	r3, [r7, #3]
 801358c:	f003 0301 	and.w	r3, r3, #1
 8013590:	2b00      	cmp	r3, #0
 8013592:	d004      	beq.n	801359e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013598:	1c5a      	adds	r2, r3, #1
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801359e:	78fb      	ldrb	r3, [r7, #3]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d006      	beq.n	80135b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	8b5b      	ldrh	r3, [r3, #26]
 80135ac:	f043 0320 	orr.w	r3, r3, #32
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7fa fde2 	bl	800e184 <pbuf_clen>
 80135c0:	4603      	mov	r3, r0
 80135c2:	461a      	mov	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135ca:	4413      	add	r3, r2
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d00e      	beq.n	80135fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d10a      	bne.n	80135fc <tcp_enqueue_flags+0x1b0>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d106      	bne.n	80135fc <tcp_enqueue_flags+0x1b0>
 80135ee:	4b06      	ldr	r3, [pc, #24]	; (8013608 <tcp_enqueue_flags+0x1bc>)
 80135f0:	f240 4265 	movw	r2, #1125	; 0x465
 80135f4:	490b      	ldr	r1, [pc, #44]	; (8013624 <tcp_enqueue_flags+0x1d8>)
 80135f6:	4806      	ldr	r0, [pc, #24]	; (8013610 <tcp_enqueue_flags+0x1c4>)
 80135f8:	f004 fde8 	bl	80181cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3720      	adds	r7, #32
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	0801a724 	.word	0x0801a724
 801360c:	0801ab48 	.word	0x0801ab48
 8013610:	0801a778 	.word	0x0801a778
 8013614:	0801aba0 	.word	0x0801aba0
 8013618:	0801abc0 	.word	0x0801abc0
 801361c:	0801abfc 	.word	0x0801abfc
 8013620:	0801ac14 	.word	0x0801ac14
 8013624:	0801ac40 	.word	0x0801ac40

08013628 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013628:	b5b0      	push	{r4, r5, r7, lr}
 801362a:	b08a      	sub	sp, #40	; 0x28
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <tcp_output+0x1c>
 8013636:	4b8a      	ldr	r3, [pc, #552]	; (8013860 <tcp_output+0x238>)
 8013638:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801363c:	4989      	ldr	r1, [pc, #548]	; (8013864 <tcp_output+0x23c>)
 801363e:	488a      	ldr	r0, [pc, #552]	; (8013868 <tcp_output+0x240>)
 8013640:	f004 fdc4 	bl	80181cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	7d1b      	ldrb	r3, [r3, #20]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d106      	bne.n	801365a <tcp_output+0x32>
 801364c:	4b84      	ldr	r3, [pc, #528]	; (8013860 <tcp_output+0x238>)
 801364e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013652:	4986      	ldr	r1, [pc, #536]	; (801386c <tcp_output+0x244>)
 8013654:	4884      	ldr	r0, [pc, #528]	; (8013868 <tcp_output+0x240>)
 8013656:	f004 fdb9 	bl	80181cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801365a:	4b85      	ldr	r3, [pc, #532]	; (8013870 <tcp_output+0x248>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	429a      	cmp	r2, r3
 8013662:	d101      	bne.n	8013668 <tcp_output+0x40>
    return ERR_OK;
 8013664:	2300      	movs	r3, #0
 8013666:	e1ce      	b.n	8013a06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013674:	4293      	cmp	r3, r2
 8013676:	bf28      	it	cs
 8013678:	4613      	movcs	r3, r2
 801367a:	b29b      	uxth	r3, r3
 801367c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013682:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	2b00      	cmp	r3, #0
 8013688:	d10b      	bne.n	80136a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	8b5b      	ldrh	r3, [r3, #26]
 801368e:	f003 0302 	and.w	r3, r3, #2
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 81aa 	beq.w	80139ec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f000 fdc9 	bl	8014230 <tcp_send_empty_ack>
 801369e:	4603      	mov	r3, r0
 80136a0:	e1b1      	b.n	8013a06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	3304      	adds	r3, #4
 80136a8:	461a      	mov	r2, r3
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ff f824 	bl	80126f8 <tcp_route>
 80136b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d102      	bne.n	80136be <tcp_output+0x96>
    return ERR_RTE;
 80136b8:	f06f 0303 	mvn.w	r3, #3
 80136bc:	e1a3      	b.n	8013a06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d003      	beq.n	80136cc <tcp_output+0xa4>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d111      	bne.n	80136f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <tcp_output+0xb0>
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	3304      	adds	r3, #4
 80136d6:	e000      	b.n	80136da <tcp_output+0xb2>
 80136d8:	2300      	movs	r3, #0
 80136da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d102      	bne.n	80136e8 <tcp_output+0xc0>
      return ERR_RTE;
 80136e2:	f06f 0303 	mvn.w	r3, #3
 80136e6:	e18e      	b.n	8013a06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80136f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f9 f974 	bl	800c9e4 <lwip_htonl>
 80136fc:	4602      	mov	r2, r0
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013706:	8912      	ldrh	r2, [r2, #8]
 8013708:	4413      	add	r3, r2
 801370a:	69ba      	ldr	r2, [r7, #24]
 801370c:	429a      	cmp	r2, r3
 801370e:	d227      	bcs.n	8013760 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013716:	461a      	mov	r2, r3
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	4293      	cmp	r3, r2
 801371c:	d114      	bne.n	8013748 <tcp_output+0x120>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013722:	2b00      	cmp	r3, #0
 8013724:	d110      	bne.n	8013748 <tcp_output+0x120>
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10b      	bne.n	8013748 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2201      	movs	r2, #1
 801373c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2200      	movs	r2, #0
 8013744:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	8b5b      	ldrh	r3, [r3, #26]
 801374c:	f003 0302 	and.w	r3, r3, #2
 8013750:	2b00      	cmp	r3, #0
 8013752:	f000 814d 	beq.w	80139f0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 fd6a 	bl	8014230 <tcp_send_empty_ack>
 801375c:	4603      	mov	r3, r0
 801375e:	e152      	b.n	8013a06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801376c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801376e:	6a3b      	ldr	r3, [r7, #32]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 811c 	beq.w	80139ae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013776:	e002      	b.n	801377e <tcp_output+0x156>
 8013778:	6a3b      	ldr	r3, [r7, #32]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	623b      	str	r3, [r7, #32]
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d1f8      	bne.n	8013778 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013786:	e112      	b.n	80139ae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	b29b      	uxth	r3, r3
 8013790:	4618      	mov	r0, r3
 8013792:	f7f9 f912 	bl	800c9ba <lwip_htons>
 8013796:	4603      	mov	r3, r0
 8013798:	b2db      	uxtb	r3, r3
 801379a:	f003 0304 	and.w	r3, r3, #4
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <tcp_output+0x188>
 80137a2:	4b2f      	ldr	r3, [pc, #188]	; (8013860 <tcp_output+0x238>)
 80137a4:	f240 5236 	movw	r2, #1334	; 0x536
 80137a8:	4932      	ldr	r1, [pc, #200]	; (8013874 <tcp_output+0x24c>)
 80137aa:	482f      	ldr	r0, [pc, #188]	; (8013868 <tcp_output+0x240>)
 80137ac:	f004 fd0e 	bl	80181cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d01f      	beq.n	80137f8 <tcp_output+0x1d0>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	8b5b      	ldrh	r3, [r3, #26]
 80137bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d119      	bne.n	80137f8 <tcp_output+0x1d0>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00b      	beq.n	80137e4 <tcp_output+0x1bc>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d110      	bne.n	80137f8 <tcp_output+0x1d0>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137da:	891a      	ldrh	r2, [r3, #8]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d209      	bcs.n	80137f8 <tcp_output+0x1d0>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d004      	beq.n	80137f8 <tcp_output+0x1d0>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137f4:	2b0f      	cmp	r3, #15
 80137f6:	d901      	bls.n	80137fc <tcp_output+0x1d4>
 80137f8:	2301      	movs	r3, #1
 80137fa:	e000      	b.n	80137fe <tcp_output+0x1d6>
 80137fc:	2300      	movs	r3, #0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d106      	bne.n	8013810 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	8b5b      	ldrh	r3, [r3, #26]
 8013806:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801380a:	2b00      	cmp	r3, #0
 801380c:	f000 80e4 	beq.w	80139d8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	7d1b      	ldrb	r3, [r3, #20]
 8013814:	2b02      	cmp	r3, #2
 8013816:	d00d      	beq.n	8013834 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	899b      	ldrh	r3, [r3, #12]
 801381e:	b29c      	uxth	r4, r3
 8013820:	2010      	movs	r0, #16
 8013822:	f7f9 f8ca 	bl	800c9ba <lwip_htons>
 8013826:	4603      	mov	r3, r0
 8013828:	461a      	mov	r2, r3
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	4322      	orrs	r2, r4
 8013830:	b292      	uxth	r2, r2
 8013832:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013834:	697a      	ldr	r2, [r7, #20]
 8013836:	6879      	ldr	r1, [r7, #4]
 8013838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801383a:	f000 f909 	bl	8013a50 <tcp_output_segment>
 801383e:	4603      	mov	r3, r0
 8013840:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d016      	beq.n	8013878 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	8b5b      	ldrh	r3, [r3, #26]
 801384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013852:	b29a      	uxth	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	835a      	strh	r2, [r3, #26]
      return err;
 8013858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801385c:	e0d3      	b.n	8013a06 <tcp_output+0x3de>
 801385e:	bf00      	nop
 8013860:	0801a724 	.word	0x0801a724
 8013864:	0801ac68 	.word	0x0801ac68
 8013868:	0801a778 	.word	0x0801a778
 801386c:	0801ac80 	.word	0x0801ac80
 8013870:	2000818c 	.word	0x2000818c
 8013874:	0801aca8 	.word	0x0801aca8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7d1b      	ldrb	r3, [r3, #20]
 8013884:	2b02      	cmp	r3, #2
 8013886:	d006      	beq.n	8013896 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	8b5b      	ldrh	r3, [r3, #26]
 801388c:	f023 0303 	bic.w	r3, r3, #3
 8013890:	b29a      	uxth	r2, r3
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	4618      	mov	r0, r3
 801389e:	f7f9 f8a1 	bl	800c9e4 <lwip_htonl>
 80138a2:	4604      	mov	r4, r0
 80138a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a6:	891b      	ldrh	r3, [r3, #8]
 80138a8:	461d      	mov	r5, r3
 80138aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	899b      	ldrh	r3, [r3, #12]
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7f9 f881 	bl	800c9ba <lwip_htons>
 80138b8:	4603      	mov	r3, r0
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	f003 0303 	and.w	r3, r3, #3
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d001      	beq.n	80138c8 <tcp_output+0x2a0>
 80138c4:	2301      	movs	r3, #1
 80138c6:	e000      	b.n	80138ca <tcp_output+0x2a2>
 80138c8:	2300      	movs	r3, #0
 80138ca:	442b      	add	r3, r5
 80138cc:	4423      	add	r3, r4
 80138ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	1ad3      	subs	r3, r2, r3
 80138d8:	2b00      	cmp	r3, #0
 80138da:	da02      	bge.n	80138e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80138e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e4:	891b      	ldrh	r3, [r3, #8]
 80138e6:	461c      	mov	r4, r3
 80138e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	899b      	ldrh	r3, [r3, #12]
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7f9 f862 	bl	800c9ba <lwip_htons>
 80138f6:	4603      	mov	r3, r0
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	f003 0303 	and.w	r3, r3, #3
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d001      	beq.n	8013906 <tcp_output+0x2de>
 8013902:	2301      	movs	r3, #1
 8013904:	e000      	b.n	8013908 <tcp_output+0x2e0>
 8013906:	2300      	movs	r3, #0
 8013908:	4423      	add	r3, r4
 801390a:	2b00      	cmp	r3, #0
 801390c:	d049      	beq.n	80139a2 <tcp_output+0x37a>
      seg->next = NULL;
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	2200      	movs	r2, #0
 8013912:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013918:	2b00      	cmp	r3, #0
 801391a:	d105      	bne.n	8013928 <tcp_output+0x300>
        pcb->unacked = seg;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013920:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013924:	623b      	str	r3, [r7, #32]
 8013926:	e03f      	b.n	80139a8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	4618      	mov	r0, r3
 8013930:	f7f9 f858 	bl	800c9e4 <lwip_htonl>
 8013934:	4604      	mov	r4, r0
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	4618      	mov	r0, r3
 801393e:	f7f9 f851 	bl	800c9e4 <lwip_htonl>
 8013942:	4603      	mov	r3, r0
 8013944:	1ae3      	subs	r3, r4, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	da24      	bge.n	8013994 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	3370      	adds	r3, #112	; 0x70
 801394e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013950:	e002      	b.n	8013958 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d011      	beq.n	8013984 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	4618      	mov	r0, r3
 801396a:	f7f9 f83b 	bl	800c9e4 <lwip_htonl>
 801396e:	4604      	mov	r4, r0
 8013970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	4618      	mov	r0, r3
 8013978:	f7f9 f834 	bl	800c9e4 <lwip_htonl>
 801397c:	4603      	mov	r3, r0
 801397e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013980:	2b00      	cmp	r3, #0
 8013982:	dbe6      	blt.n	8013952 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013990:	601a      	str	r2, [r3, #0]
 8013992:	e009      	b.n	80139a8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013994:	6a3b      	ldr	r3, [r7, #32]
 8013996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013998:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801399a:	6a3b      	ldr	r3, [r7, #32]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	623b      	str	r3, [r7, #32]
 80139a0:	e002      	b.n	80139a8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80139a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139a4:	f7fb ff37 	bl	800f816 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d012      	beq.n	80139da <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f9 f812 	bl	800c9e4 <lwip_htonl>
 80139c0:	4602      	mov	r2, r0
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139c6:	1ad3      	subs	r3, r2, r3
 80139c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139ca:	8912      	ldrh	r2, [r2, #8]
 80139cc:	4413      	add	r3, r2
  while (seg != NULL &&
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	f4bf aed9 	bcs.w	8013788 <tcp_output+0x160>
 80139d6:	e000      	b.n	80139da <tcp_output+0x3b2>
      break;
 80139d8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d108      	bne.n	80139f4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80139ea:	e004      	b.n	80139f6 <tcp_output+0x3ce>
    goto output_done;
 80139ec:	bf00      	nop
 80139ee:	e002      	b.n	80139f6 <tcp_output+0x3ce>
    goto output_done;
 80139f0:	bf00      	nop
 80139f2:	e000      	b.n	80139f6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80139f4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	8b5b      	ldrh	r3, [r3, #26]
 80139fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013a04:	2300      	movs	r3, #0
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3728      	adds	r7, #40	; 0x28
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a0e:	bf00      	nop

08013a10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d106      	bne.n	8013a2c <tcp_output_segment_busy+0x1c>
 8013a1e:	4b09      	ldr	r3, [pc, #36]	; (8013a44 <tcp_output_segment_busy+0x34>)
 8013a20:	f240 529a 	movw	r2, #1434	; 0x59a
 8013a24:	4908      	ldr	r1, [pc, #32]	; (8013a48 <tcp_output_segment_busy+0x38>)
 8013a26:	4809      	ldr	r0, [pc, #36]	; (8013a4c <tcp_output_segment_busy+0x3c>)
 8013a28:	f004 fbd0 	bl	80181cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	7b9b      	ldrb	r3, [r3, #14]
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d001      	beq.n	8013a3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013a36:	2301      	movs	r3, #1
 8013a38:	e000      	b.n	8013a3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013a3a:	2300      	movs	r3, #0
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	0801a724 	.word	0x0801a724
 8013a48:	0801acc0 	.word	0x0801acc0
 8013a4c:	0801a778 	.word	0x0801a778

08013a50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013a50:	b5b0      	push	{r4, r5, r7, lr}
 8013a52:	b08c      	sub	sp, #48	; 0x30
 8013a54:	af04      	add	r7, sp, #16
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <tcp_output_segment+0x20>
 8013a62:	4b64      	ldr	r3, [pc, #400]	; (8013bf4 <tcp_output_segment+0x1a4>)
 8013a64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013a68:	4963      	ldr	r1, [pc, #396]	; (8013bf8 <tcp_output_segment+0x1a8>)
 8013a6a:	4864      	ldr	r0, [pc, #400]	; (8013bfc <tcp_output_segment+0x1ac>)
 8013a6c:	f004 fbae 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d106      	bne.n	8013a84 <tcp_output_segment+0x34>
 8013a76:	4b5f      	ldr	r3, [pc, #380]	; (8013bf4 <tcp_output_segment+0x1a4>)
 8013a78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013a7c:	4960      	ldr	r1, [pc, #384]	; (8013c00 <tcp_output_segment+0x1b0>)
 8013a7e:	485f      	ldr	r0, [pc, #380]	; (8013bfc <tcp_output_segment+0x1ac>)
 8013a80:	f004 fba4 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d106      	bne.n	8013a98 <tcp_output_segment+0x48>
 8013a8a:	4b5a      	ldr	r3, [pc, #360]	; (8013bf4 <tcp_output_segment+0x1a4>)
 8013a8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013a90:	495c      	ldr	r1, [pc, #368]	; (8013c04 <tcp_output_segment+0x1b4>)
 8013a92:	485a      	ldr	r0, [pc, #360]	; (8013bfc <tcp_output_segment+0x1ac>)
 8013a94:	f004 fb9a 	bl	80181cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	f7ff ffb9 	bl	8013a10 <tcp_output_segment_busy>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d001      	beq.n	8013aa8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	e0a1      	b.n	8013bec <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	68dc      	ldr	r4, [r3, #12]
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	f7f8 ff97 	bl	800c9e4 <lwip_htonl>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	68dc      	ldr	r4, [r3, #12]
 8013ac2:	4610      	mov	r0, r2
 8013ac4:	f7f8 ff79 	bl	800c9ba <lwip_htons>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013ad4:	441a      	add	r2, r3
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	3314      	adds	r3, #20
 8013ae0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	7a9b      	ldrb	r3, [r3, #10]
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d015      	beq.n	8013b1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	3304      	adds	r3, #4
 8013af2:	461a      	mov	r2, r3
 8013af4:	6879      	ldr	r1, [r7, #4]
 8013af6:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8013afa:	f7fc fa33 	bl	800ff64 <tcp_eff_send_mss_netif>
 8013afe:	4603      	mov	r3, r0
 8013b00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013b02:	8b7b      	ldrh	r3, [r7, #26]
 8013b04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7f8 ff6b 	bl	800c9e4 <lwip_htonl>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	3304      	adds	r3, #4
 8013b18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	da02      	bge.n	8013b2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	2200      	movs	r2, #0
 8013b28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d10c      	bne.n	8013b4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013b32:	4b35      	ldr	r3, [pc, #212]	; (8013c08 <tcp_output_segment+0x1b8>)
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7f8 ff4f 	bl	800c9e4 <lwip_htonl>
 8013b46:	4602      	mov	r2, r0
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	68da      	ldr	r2, [r3, #12]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	1ad3      	subs	r3, r2, r3
 8013b58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	8959      	ldrh	r1, [r3, #10]
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	8b3a      	ldrh	r2, [r7, #24]
 8013b66:	1a8a      	subs	r2, r1, r2
 8013b68:	b292      	uxth	r2, r2
 8013b6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	8919      	ldrh	r1, [r3, #8]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	8b3a      	ldrh	r2, [r7, #24]
 8013b78:	1a8a      	subs	r2, r1, r2
 8013b7a:	b292      	uxth	r2, r2
 8013b7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	68fa      	ldr	r2, [r7, #12]
 8013b84:	68d2      	ldr	r2, [r2, #12]
 8013b86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	741a      	strb	r2, [r3, #16]
 8013b90:	2200      	movs	r2, #0
 8013b92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	68da      	ldr	r2, [r3, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	7a9b      	ldrb	r3, [r3, #10]
 8013b9c:	f003 0301 	and.w	r3, r3, #1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d001      	beq.n	8013ba8 <tcp_output_segment+0x158>
 8013ba4:	2318      	movs	r3, #24
 8013ba6:	e000      	b.n	8013baa <tcp_output_segment+0x15a>
 8013ba8:	2314      	movs	r3, #20
 8013baa:	4413      	add	r3, r2
 8013bac:	69fa      	ldr	r2, [r7, #28]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d006      	beq.n	8013bc0 <tcp_output_segment+0x170>
 8013bb2:	4b10      	ldr	r3, [pc, #64]	; (8013bf4 <tcp_output_segment+0x1a4>)
 8013bb4:	f240 621c 	movw	r2, #1564	; 0x61c
 8013bb8:	4914      	ldr	r1, [pc, #80]	; (8013c0c <tcp_output_segment+0x1bc>)
 8013bba:	4810      	ldr	r0, [pc, #64]	; (8013bfc <tcp_output_segment+0x1ac>)
 8013bbc:	f004 fb06 	bl	80181cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	6858      	ldr	r0, [r3, #4]
 8013bc4:	68b9      	ldr	r1, [r7, #8]
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	1d1c      	adds	r4, r3, #4
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	7add      	ldrb	r5, [r3, #11]
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	7a9b      	ldrb	r3, [r3, #10]
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	9202      	str	r2, [sp, #8]
 8013bd6:	2206      	movs	r2, #6
 8013bd8:	9201      	str	r2, [sp, #4]
 8013bda:	9300      	str	r3, [sp, #0]
 8013bdc:	462b      	mov	r3, r5
 8013bde:	4622      	mov	r2, r4
 8013be0:	f002 fa32 	bl	8016048 <ip4_output_if>
 8013be4:	4603      	mov	r3, r0
 8013be6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3720      	adds	r7, #32
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8013bf4:	0801a724 	.word	0x0801a724
 8013bf8:	0801ace8 	.word	0x0801ace8
 8013bfc:	0801a778 	.word	0x0801a778
 8013c00:	0801ad08 	.word	0x0801ad08
 8013c04:	0801ad28 	.word	0x0801ad28
 8013c08:	20008140 	.word	0x20008140
 8013c0c:	0801ad4c 	.word	0x0801ad4c

08013c10 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013c10:	b5b0      	push	{r4, r5, r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <tcp_rexmit_rto_prepare+0x1c>
 8013c1e:	4b31      	ldr	r3, [pc, #196]	; (8013ce4 <tcp_rexmit_rto_prepare+0xd4>)
 8013c20:	f240 6263 	movw	r2, #1635	; 0x663
 8013c24:	4930      	ldr	r1, [pc, #192]	; (8013ce8 <tcp_rexmit_rto_prepare+0xd8>)
 8013c26:	4831      	ldr	r0, [pc, #196]	; (8013cec <tcp_rexmit_rto_prepare+0xdc>)
 8013c28:	f004 fad0 	bl	80181cc <iprintf>

  if (pcb->unacked == NULL) {
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d102      	bne.n	8013c3a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013c34:	f06f 0305 	mvn.w	r3, #5
 8013c38:	e050      	b.n	8013cdc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c3e:	60fb      	str	r3, [r7, #12]
 8013c40:	e00b      	b.n	8013c5a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	f7ff fee4 	bl	8013a10 <tcp_output_segment_busy>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d002      	beq.n	8013c54 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013c4e:	f06f 0305 	mvn.w	r3, #5
 8013c52:	e043      	b.n	8013cdc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1ef      	bne.n	8013c42 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013c62:	68f8      	ldr	r0, [r7, #12]
 8013c64:	f7ff fed4 	bl	8013a10 <tcp_output_segment_busy>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d002      	beq.n	8013c74 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013c6e:	f06f 0305 	mvn.w	r3, #5
 8013c72:	e033      	b.n	8013cdc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2200      	movs	r2, #0
 8013c88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	8b5b      	ldrh	r3, [r3, #26]
 8013c8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f8 fea0 	bl	800c9e4 <lwip_htonl>
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	891b      	ldrh	r3, [r3, #8]
 8013caa:	461d      	mov	r5, r3
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	899b      	ldrh	r3, [r3, #12]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f8 fe80 	bl	800c9ba <lwip_htons>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	f003 0303 	and.w	r3, r3, #3
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d001      	beq.n	8013cca <tcp_rexmit_rto_prepare+0xba>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e000      	b.n	8013ccc <tcp_rexmit_rto_prepare+0xbc>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	442b      	add	r3, r5
 8013cce:	18e2      	adds	r2, r4, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce4:	0801a724 	.word	0x0801a724
 8013ce8:	0801ad60 	.word	0x0801ad60
 8013cec:	0801a778 	.word	0x0801a778

08013cf0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d106      	bne.n	8013d0c <tcp_rexmit_rto_commit+0x1c>
 8013cfe:	4b0d      	ldr	r3, [pc, #52]	; (8013d34 <tcp_rexmit_rto_commit+0x44>)
 8013d00:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013d04:	490c      	ldr	r1, [pc, #48]	; (8013d38 <tcp_rexmit_rto_commit+0x48>)
 8013d06:	480d      	ldr	r0, [pc, #52]	; (8013d3c <tcp_rexmit_rto_commit+0x4c>)
 8013d08:	f004 fa60 	bl	80181cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d12:	2bff      	cmp	r3, #255	; 0xff
 8013d14:	d007      	beq.n	8013d26 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7ff fc7e 	bl	8013628 <tcp_output>
}
 8013d2c:	bf00      	nop
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	0801a724 	.word	0x0801a724
 8013d38:	0801ad84 	.word	0x0801ad84
 8013d3c:	0801a778 	.word	0x0801a778

08013d40 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d106      	bne.n	8013d5c <tcp_rexmit_rto+0x1c>
 8013d4e:	4b0a      	ldr	r3, [pc, #40]	; (8013d78 <tcp_rexmit_rto+0x38>)
 8013d50:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013d54:	4909      	ldr	r1, [pc, #36]	; (8013d7c <tcp_rexmit_rto+0x3c>)
 8013d56:	480a      	ldr	r0, [pc, #40]	; (8013d80 <tcp_rexmit_rto+0x40>)
 8013d58:	f004 fa38 	bl	80181cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7ff ff57 	bl	8013c10 <tcp_rexmit_rto_prepare>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d102      	bne.n	8013d6e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff ffc1 	bl	8013cf0 <tcp_rexmit_rto_commit>
  }
}
 8013d6e:	bf00      	nop
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	0801a724 	.word	0x0801a724
 8013d7c:	0801ada8 	.word	0x0801ada8
 8013d80:	0801a778 	.word	0x0801a778

08013d84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013d84:	b590      	push	{r4, r7, lr}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <tcp_rexmit+0x1c>
 8013d92:	4b2f      	ldr	r3, [pc, #188]	; (8013e50 <tcp_rexmit+0xcc>)
 8013d94:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013d98:	492e      	ldr	r1, [pc, #184]	; (8013e54 <tcp_rexmit+0xd0>)
 8013d9a:	482f      	ldr	r0, [pc, #188]	; (8013e58 <tcp_rexmit+0xd4>)
 8013d9c:	f004 fa16 	bl	80181cc <iprintf>

  if (pcb->unacked == NULL) {
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013da8:	f06f 0305 	mvn.w	r3, #5
 8013dac:	e04c      	b.n	8013e48 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013db2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013db4:	68b8      	ldr	r0, [r7, #8]
 8013db6:	f7ff fe2b 	bl	8013a10 <tcp_output_segment_busy>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d002      	beq.n	8013dc6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013dc0:	f06f 0305 	mvn.w	r3, #5
 8013dc4:	e040      	b.n	8013e48 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	336c      	adds	r3, #108	; 0x6c
 8013dd2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013dd4:	e002      	b.n	8013ddc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d011      	beq.n	8013e08 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f8 fdf9 	bl	800c9e4 <lwip_htonl>
 8013df2:	4604      	mov	r4, r0
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7f8 fdf2 	bl	800c9e4 <lwip_htonl>
 8013e00:	4603      	mov	r3, r0
 8013e02:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dbe6      	blt.n	8013dd6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d103      	bne.n	8013e26 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e2c:	2bff      	cmp	r3, #255	; 0xff
 8013e2e:	d007      	beq.n	8013e40 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e36:	3301      	adds	r3, #1
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013e46:	2300      	movs	r3, #0
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3714      	adds	r7, #20
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd90      	pop	{r4, r7, pc}
 8013e50:	0801a724 	.word	0x0801a724
 8013e54:	0801adc4 	.word	0x0801adc4
 8013e58:	0801a778 	.word	0x0801a778

08013e5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d106      	bne.n	8013e78 <tcp_rexmit_fast+0x1c>
 8013e6a:	4b2a      	ldr	r3, [pc, #168]	; (8013f14 <tcp_rexmit_fast+0xb8>)
 8013e6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013e70:	4929      	ldr	r1, [pc, #164]	; (8013f18 <tcp_rexmit_fast+0xbc>)
 8013e72:	482a      	ldr	r0, [pc, #168]	; (8013f1c <tcp_rexmit_fast+0xc0>)
 8013e74:	f004 f9aa 	bl	80181cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d044      	beq.n	8013f0a <tcp_rexmit_fast+0xae>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	8b5b      	ldrh	r3, [r3, #26]
 8013e84:	f003 0304 	and.w	r3, r3, #4
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d13e      	bne.n	8013f0a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7ff ff79 	bl	8013d84 <tcp_rexmit>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d138      	bne.n	8013f0a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	bf28      	it	cs
 8013ea8:	4613      	movcs	r3, r2
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	0fda      	lsrs	r2, r3, #31
 8013eae:	4413      	add	r3, r2
 8013eb0:	105b      	asrs	r3, r3, #1
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ec6:	005b      	lsls	r3, r3, #1
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d206      	bcs.n	8013eda <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ed0:	005b      	lsls	r3, r3, #1
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	0049      	lsls	r1, r1, #1
 8013ee8:	440b      	add	r3, r1
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	4413      	add	r3, r2
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	8b5b      	ldrh	r3, [r3, #26]
 8013efa:	f043 0304 	orr.w	r3, r3, #4
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013f0a:	bf00      	nop
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	0801a724 	.word	0x0801a724
 8013f18:	0801addc 	.word	0x0801addc
 8013f1c:	0801a778 	.word	0x0801a778

08013f20 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	607b      	str	r3, [r7, #4]
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	817b      	strh	r3, [r7, #10]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013f32:	897a      	ldrh	r2, [r7, #10]
 8013f34:	893b      	ldrh	r3, [r7, #8]
 8013f36:	4413      	add	r3, r2
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	3314      	adds	r3, #20
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f42:	4619      	mov	r1, r3
 8013f44:	2022      	movs	r0, #34	; 0x22
 8013f46:	f7f9 fdb1 	bl	800daac <pbuf_alloc>
 8013f4a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d04d      	beq.n	8013fee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013f52:	897b      	ldrh	r3, [r7, #10]
 8013f54:	3313      	adds	r3, #19
 8013f56:	697a      	ldr	r2, [r7, #20]
 8013f58:	8952      	ldrh	r2, [r2, #10]
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	db06      	blt.n	8013f6c <tcp_output_alloc_header_common+0x4c>
 8013f5e:	4b26      	ldr	r3, [pc, #152]	; (8013ff8 <tcp_output_alloc_header_common+0xd8>)
 8013f60:	f240 7223 	movw	r2, #1827	; 0x723
 8013f64:	4925      	ldr	r1, [pc, #148]	; (8013ffc <tcp_output_alloc_header_common+0xdc>)
 8013f66:	4826      	ldr	r0, [pc, #152]	; (8014000 <tcp_output_alloc_header_common+0xe0>)
 8013f68:	f004 f930 	bl	80181cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013f72:	8c3b      	ldrh	r3, [r7, #32]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f8 fd20 	bl	800c9ba <lwip_htons>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f8 fd18 	bl	800c9ba <lwip_htons>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f7f8 fd23 	bl	800c9e4 <lwip_htonl>
 8013f9e:	4602      	mov	r2, r0
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013fa4:	897b      	ldrh	r3, [r7, #10]
 8013fa6:	089b      	lsrs	r3, r3, #2
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	3305      	adds	r3, #5
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	031b      	lsls	r3, r3, #12
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	4313      	orrs	r3, r2
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f8 fcfc 	bl	800c9ba <lwip_htons>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013fca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7f8 fcf4 	bl	800c9ba <lwip_htons>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	741a      	strb	r2, [r3, #16]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	749a      	strb	r2, [r3, #18]
 8013fea:	2200      	movs	r2, #0
 8013fec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013fee:	697b      	ldr	r3, [r7, #20]
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3718      	adds	r7, #24
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	0801a724 	.word	0x0801a724
 8013ffc:	0801adfc 	.word	0x0801adfc
 8014000:	0801a778 	.word	0x0801a778

08014004 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014004:	b5b0      	push	{r4, r5, r7, lr}
 8014006:	b08a      	sub	sp, #40	; 0x28
 8014008:	af04      	add	r7, sp, #16
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	607b      	str	r3, [r7, #4]
 801400e:	460b      	mov	r3, r1
 8014010:	817b      	strh	r3, [r7, #10]
 8014012:	4613      	mov	r3, r2
 8014014:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d106      	bne.n	801402a <tcp_output_alloc_header+0x26>
 801401c:	4b15      	ldr	r3, [pc, #84]	; (8014074 <tcp_output_alloc_header+0x70>)
 801401e:	f240 7242 	movw	r2, #1858	; 0x742
 8014022:	4915      	ldr	r1, [pc, #84]	; (8014078 <tcp_output_alloc_header+0x74>)
 8014024:	4815      	ldr	r0, [pc, #84]	; (801407c <tcp_output_alloc_header+0x78>)
 8014026:	f004 f8d1 	bl	80181cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	8adb      	ldrh	r3, [r3, #22]
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	8b12      	ldrh	r2, [r2, #24]
 8014036:	68f9      	ldr	r1, [r7, #12]
 8014038:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801403a:	893d      	ldrh	r5, [r7, #8]
 801403c:	897c      	ldrh	r4, [r7, #10]
 801403e:	9103      	str	r1, [sp, #12]
 8014040:	2110      	movs	r1, #16
 8014042:	9102      	str	r1, [sp, #8]
 8014044:	9201      	str	r2, [sp, #4]
 8014046:	9300      	str	r3, [sp, #0]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	462a      	mov	r2, r5
 801404c:	4621      	mov	r1, r4
 801404e:	f7ff ff67 	bl	8013f20 <tcp_output_alloc_header_common>
 8014052:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d006      	beq.n	8014068 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014062:	441a      	add	r2, r3
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014068:	697b      	ldr	r3, [r7, #20]
}
 801406a:	4618      	mov	r0, r3
 801406c:	3718      	adds	r7, #24
 801406e:	46bd      	mov	sp, r7
 8014070:	bdb0      	pop	{r4, r5, r7, pc}
 8014072:	bf00      	nop
 8014074:	0801a724 	.word	0x0801a724
 8014078:	0801ae2c 	.word	0x0801ae2c
 801407c:	0801a778 	.word	0x0801a778

08014080 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b088      	sub	sp, #32
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	4611      	mov	r1, r2
 801408c:	461a      	mov	r2, r3
 801408e:	460b      	mov	r3, r1
 8014090:	71fb      	strb	r3, [r7, #7]
 8014092:	4613      	mov	r3, r2
 8014094:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d106      	bne.n	80140ae <tcp_output_fill_options+0x2e>
 80140a0:	4b12      	ldr	r3, [pc, #72]	; (80140ec <tcp_output_fill_options+0x6c>)
 80140a2:	f240 7256 	movw	r2, #1878	; 0x756
 80140a6:	4912      	ldr	r1, [pc, #72]	; (80140f0 <tcp_output_fill_options+0x70>)
 80140a8:	4812      	ldr	r0, [pc, #72]	; (80140f4 <tcp_output_fill_options+0x74>)
 80140aa:	f004 f88f 	bl	80181cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	3314      	adds	r3, #20
 80140b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80140ba:	8bfb      	ldrh	r3, [r7, #30]
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	461a      	mov	r2, r3
 80140c0:	79fb      	ldrb	r3, [r7, #7]
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	f003 0304 	and.w	r3, r3, #4
 80140c8:	4413      	add	r3, r2
 80140ca:	3314      	adds	r3, #20
 80140cc:	69ba      	ldr	r2, [r7, #24]
 80140ce:	4413      	add	r3, r2
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d006      	beq.n	80140e4 <tcp_output_fill_options+0x64>
 80140d6:	4b05      	ldr	r3, [pc, #20]	; (80140ec <tcp_output_fill_options+0x6c>)
 80140d8:	f240 7275 	movw	r2, #1909	; 0x775
 80140dc:	4906      	ldr	r1, [pc, #24]	; (80140f8 <tcp_output_fill_options+0x78>)
 80140de:	4805      	ldr	r0, [pc, #20]	; (80140f4 <tcp_output_fill_options+0x74>)
 80140e0:	f004 f874 	bl	80181cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80140e4:	bf00      	nop
 80140e6:	3720      	adds	r7, #32
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	0801a724 	.word	0x0801a724
 80140f0:	0801ae54 	.word	0x0801ae54
 80140f4:	0801a778 	.word	0x0801a778
 80140f8:	0801ad4c 	.word	0x0801ad4c

080140fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b08a      	sub	sp, #40	; 0x28
 8014100:	af04      	add	r7, sp, #16
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d106      	bne.n	801411e <tcp_output_control_segment+0x22>
 8014110:	4b1c      	ldr	r3, [pc, #112]	; (8014184 <tcp_output_control_segment+0x88>)
 8014112:	f240 7287 	movw	r2, #1927	; 0x787
 8014116:	491c      	ldr	r1, [pc, #112]	; (8014188 <tcp_output_control_segment+0x8c>)
 8014118:	481c      	ldr	r0, [pc, #112]	; (801418c <tcp_output_control_segment+0x90>)
 801411a:	f004 f857 	bl	80181cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801411e:	683a      	ldr	r2, [r7, #0]
 8014120:	6879      	ldr	r1, [r7, #4]
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7fe fae8 	bl	80126f8 <tcp_route>
 8014128:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d102      	bne.n	8014136 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014130:	23fc      	movs	r3, #252	; 0xfc
 8014132:	75fb      	strb	r3, [r7, #23]
 8014134:	e01c      	b.n	8014170 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d006      	beq.n	801414a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	7adb      	ldrb	r3, [r3, #11]
 8014140:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	7a9b      	ldrb	r3, [r3, #10]
 8014146:	757b      	strb	r3, [r7, #21]
 8014148:	e003      	b.n	8014152 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801414a:	23ff      	movs	r3, #255	; 0xff
 801414c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801414e:	2300      	movs	r3, #0
 8014150:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014152:	7dba      	ldrb	r2, [r7, #22]
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	9302      	str	r3, [sp, #8]
 8014158:	2306      	movs	r3, #6
 801415a:	9301      	str	r3, [sp, #4]
 801415c:	7d7b      	ldrb	r3, [r7, #21]
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	4613      	mov	r3, r2
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	6879      	ldr	r1, [r7, #4]
 8014166:	68b8      	ldr	r0, [r7, #8]
 8014168:	f001 ff6e 	bl	8016048 <ip4_output_if>
 801416c:	4603      	mov	r3, r0
 801416e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014170:	68b8      	ldr	r0, [r7, #8]
 8014172:	f7f9 ff7f 	bl	800e074 <pbuf_free>
  return err;
 8014176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801417a:	4618      	mov	r0, r3
 801417c:	3718      	adds	r7, #24
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	0801a724 	.word	0x0801a724
 8014188:	0801ae7c 	.word	0x0801ae7c
 801418c:	0801a778 	.word	0x0801a778

08014190 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b08b      	sub	sp, #44	; 0x2c
 8014194:	af04      	add	r7, sp, #16
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
 801419c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d106      	bne.n	80141b2 <tcp_rst+0x22>
 80141a4:	4b1e      	ldr	r3, [pc, #120]	; (8014220 <tcp_rst+0x90>)
 80141a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80141aa:	491e      	ldr	r1, [pc, #120]	; (8014224 <tcp_rst+0x94>)
 80141ac:	481e      	ldr	r0, [pc, #120]	; (8014228 <tcp_rst+0x98>)
 80141ae:	f004 f80d 	bl	80181cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80141b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d106      	bne.n	80141c6 <tcp_rst+0x36>
 80141b8:	4b19      	ldr	r3, [pc, #100]	; (8014220 <tcp_rst+0x90>)
 80141ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80141be:	491b      	ldr	r1, [pc, #108]	; (801422c <tcp_rst+0x9c>)
 80141c0:	4819      	ldr	r0, [pc, #100]	; (8014228 <tcp_rst+0x98>)
 80141c2:	f004 f803 	bl	80181cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141c6:	2300      	movs	r3, #0
 80141c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80141ca:	2308      	movs	r3, #8
 80141cc:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80141ce:	7dfb      	ldrb	r3, [r7, #23]
 80141d0:	b29c      	uxth	r4, r3
 80141d2:	68b8      	ldr	r0, [r7, #8]
 80141d4:	f7f8 fc06 	bl	800c9e4 <lwip_htonl>
 80141d8:	4602      	mov	r2, r0
 80141da:	8abb      	ldrh	r3, [r7, #20]
 80141dc:	9303      	str	r3, [sp, #12]
 80141de:	2314      	movs	r3, #20
 80141e0:	9302      	str	r3, [sp, #8]
 80141e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80141e4:	9301      	str	r3, [sp, #4]
 80141e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	4613      	mov	r3, r2
 80141ec:	2200      	movs	r2, #0
 80141ee:	4621      	mov	r1, r4
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f7ff fe95 	bl	8013f20 <tcp_output_alloc_header_common>
 80141f6:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00c      	beq.n	8014218 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141fe:	7dfb      	ldrb	r3, [r7, #23]
 8014200:	2200      	movs	r2, #0
 8014202:	6939      	ldr	r1, [r7, #16]
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff ff3b 	bl	8014080 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420c:	683a      	ldr	r2, [r7, #0]
 801420e:	6939      	ldr	r1, [r7, #16]
 8014210:	68f8      	ldr	r0, [r7, #12]
 8014212:	f7ff ff73 	bl	80140fc <tcp_output_control_segment>
 8014216:	e000      	b.n	801421a <tcp_rst+0x8a>
    return;
 8014218:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801421a:	371c      	adds	r7, #28
 801421c:	46bd      	mov	sp, r7
 801421e:	bd90      	pop	{r4, r7, pc}
 8014220:	0801a724 	.word	0x0801a724
 8014224:	0801aea8 	.word	0x0801aea8
 8014228:	0801a778 	.word	0x0801a778
 801422c:	0801aec4 	.word	0x0801aec4

08014230 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b087      	sub	sp, #28
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014238:	2300      	movs	r3, #0
 801423a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d106      	bne.n	8014254 <tcp_send_empty_ack+0x24>
 8014246:	4b28      	ldr	r3, [pc, #160]	; (80142e8 <tcp_send_empty_ack+0xb8>)
 8014248:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801424c:	4927      	ldr	r1, [pc, #156]	; (80142ec <tcp_send_empty_ack+0xbc>)
 801424e:	4828      	ldr	r0, [pc, #160]	; (80142f0 <tcp_send_empty_ack+0xc0>)
 8014250:	f003 ffbc 	bl	80181cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014254:	7dfb      	ldrb	r3, [r7, #23]
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	b2db      	uxtb	r3, r3
 801425a:	f003 0304 	and.w	r3, r3, #4
 801425e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014260:	7d7b      	ldrb	r3, [r7, #21]
 8014262:	b29c      	uxth	r4, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014268:	4618      	mov	r0, r3
 801426a:	f7f8 fbbb 	bl	800c9e4 <lwip_htonl>
 801426e:	4603      	mov	r3, r0
 8014270:	2200      	movs	r2, #0
 8014272:	4621      	mov	r1, r4
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7ff fec5 	bl	8014004 <tcp_output_alloc_header>
 801427a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d109      	bne.n	8014296 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	8b5b      	ldrh	r3, [r3, #26]
 8014286:	f043 0303 	orr.w	r3, r3, #3
 801428a:	b29a      	uxth	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014290:	f06f 0301 	mvn.w	r3, #1
 8014294:	e023      	b.n	80142de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014296:	7dbb      	ldrb	r3, [r7, #22]
 8014298:	7dfa      	ldrb	r2, [r7, #23]
 801429a:	6939      	ldr	r1, [r7, #16]
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7ff feef 	bl	8014080 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	3304      	adds	r3, #4
 80142a8:	6939      	ldr	r1, [r7, #16]
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f7ff ff26 	bl	80140fc <tcp_output_control_segment>
 80142b0:	4603      	mov	r3, r0
 80142b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80142b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d007      	beq.n	80142cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	8b5b      	ldrh	r3, [r3, #26]
 80142c0:	f043 0303 	orr.w	r3, r3, #3
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	835a      	strh	r2, [r3, #26]
 80142ca:	e006      	b.n	80142da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8b5b      	ldrh	r3, [r3, #26]
 80142d0:	f023 0303 	bic.w	r3, r3, #3
 80142d4:	b29a      	uxth	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80142da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142de:	4618      	mov	r0, r3
 80142e0:	371c      	adds	r7, #28
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd90      	pop	{r4, r7, pc}
 80142e6:	bf00      	nop
 80142e8:	0801a724 	.word	0x0801a724
 80142ec:	0801aee0 	.word	0x0801aee0
 80142f0:	0801a778 	.word	0x0801a778

080142f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80142f4:	b590      	push	{r4, r7, lr}
 80142f6:	b087      	sub	sp, #28
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142fc:	2300      	movs	r3, #0
 80142fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d106      	bne.n	8014314 <tcp_keepalive+0x20>
 8014306:	4b18      	ldr	r3, [pc, #96]	; (8014368 <tcp_keepalive+0x74>)
 8014308:	f640 0224 	movw	r2, #2084	; 0x824
 801430c:	4917      	ldr	r1, [pc, #92]	; (801436c <tcp_keepalive+0x78>)
 801430e:	4818      	ldr	r0, [pc, #96]	; (8014370 <tcp_keepalive+0x7c>)
 8014310:	f003 ff5c 	bl	80181cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014314:	7dfb      	ldrb	r3, [r7, #23]
 8014316:	b29c      	uxth	r4, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801431c:	3b01      	subs	r3, #1
 801431e:	4618      	mov	r0, r3
 8014320:	f7f8 fb60 	bl	800c9e4 <lwip_htonl>
 8014324:	4603      	mov	r3, r0
 8014326:	2200      	movs	r2, #0
 8014328:	4621      	mov	r1, r4
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff fe6a 	bl	8014004 <tcp_output_alloc_header>
 8014330:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d102      	bne.n	801433e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014338:	f04f 33ff 	mov.w	r3, #4294967295
 801433c:	e010      	b.n	8014360 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801433e:	7dfb      	ldrb	r3, [r7, #23]
 8014340:	2200      	movs	r2, #0
 8014342:	6939      	ldr	r1, [r7, #16]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff fe9b 	bl	8014080 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	3304      	adds	r3, #4
 8014350:	6939      	ldr	r1, [r7, #16]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff fed2 	bl	80140fc <tcp_output_control_segment>
 8014358:	4603      	mov	r3, r0
 801435a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801435c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014360:	4618      	mov	r0, r3
 8014362:	371c      	adds	r7, #28
 8014364:	46bd      	mov	sp, r7
 8014366:	bd90      	pop	{r4, r7, pc}
 8014368:	0801a724 	.word	0x0801a724
 801436c:	0801af00 	.word	0x0801af00
 8014370:	0801a778 	.word	0x0801a778

08014374 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014374:	b590      	push	{r4, r7, lr}
 8014376:	b08b      	sub	sp, #44	; 0x2c
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801437c:	2300      	movs	r3, #0
 801437e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d106      	bne.n	8014396 <tcp_zero_window_probe+0x22>
 8014388:	4b4c      	ldr	r3, [pc, #304]	; (80144bc <tcp_zero_window_probe+0x148>)
 801438a:	f640 024f 	movw	r2, #2127	; 0x84f
 801438e:	494c      	ldr	r1, [pc, #304]	; (80144c0 <tcp_zero_window_probe+0x14c>)
 8014390:	484c      	ldr	r0, [pc, #304]	; (80144c4 <tcp_zero_window_probe+0x150>)
 8014392:	f003 ff1b 	bl	80181cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801439a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80143a2:	2300      	movs	r3, #0
 80143a4:	e086      	b.n	80144b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80143ac:	2bff      	cmp	r3, #255	; 0xff
 80143ae:	d007      	beq.n	80143c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80143b6:	3301      	adds	r3, #1
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80143c0:	6a3b      	ldr	r3, [r7, #32]
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	899b      	ldrh	r3, [r3, #12]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f8 faf6 	bl	800c9ba <lwip_htons>
 80143ce:	4603      	mov	r3, r0
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	f003 0301 	and.w	r3, r3, #1
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d005      	beq.n	80143e6 <tcp_zero_window_probe+0x72>
 80143da:	6a3b      	ldr	r3, [r7, #32]
 80143dc:	891b      	ldrh	r3, [r3, #8]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d101      	bne.n	80143e6 <tcp_zero_window_probe+0x72>
 80143e2:	2301      	movs	r3, #1
 80143e4:	e000      	b.n	80143e8 <tcp_zero_window_probe+0x74>
 80143e6:	2300      	movs	r3, #0
 80143e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80143ea:	7ffb      	ldrb	r3, [r7, #31]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	bf0c      	ite	eq
 80143f0:	2301      	moveq	r3, #1
 80143f2:	2300      	movne	r3, #0
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80143f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143fc:	b299      	uxth	r1, r3
 80143fe:	6a3b      	ldr	r3, [r7, #32]
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	8bba      	ldrh	r2, [r7, #28]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ff fdfc 	bl	8014004 <tcp_output_alloc_header>
 801440c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d102      	bne.n	801441a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014414:	f04f 33ff 	mov.w	r3, #4294967295
 8014418:	e04c      	b.n	80144b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014420:	7ffb      	ldrb	r3, [r7, #31]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d011      	beq.n	801444a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	899b      	ldrh	r3, [r3, #12]
 801442a:	b29b      	uxth	r3, r3
 801442c:	b21b      	sxth	r3, r3
 801442e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014432:	b21c      	sxth	r4, r3
 8014434:	2011      	movs	r0, #17
 8014436:	f7f8 fac0 	bl	800c9ba <lwip_htons>
 801443a:	4603      	mov	r3, r0
 801443c:	b21b      	sxth	r3, r3
 801443e:	4323      	orrs	r3, r4
 8014440:	b21b      	sxth	r3, r3
 8014442:	b29a      	uxth	r2, r3
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	819a      	strh	r2, [r3, #12]
 8014448:	e010      	b.n	801446c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	3314      	adds	r3, #20
 8014450:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014452:	6a3b      	ldr	r3, [r7, #32]
 8014454:	6858      	ldr	r0, [r3, #4]
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	891a      	ldrh	r2, [r3, #8]
 801445c:	6a3b      	ldr	r3, [r7, #32]
 801445e:	891b      	ldrh	r3, [r3, #8]
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	b29b      	uxth	r3, r3
 8014464:	2201      	movs	r2, #1
 8014466:	6939      	ldr	r1, [r7, #16]
 8014468:	f7f9 ffee 	bl	800e448 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801446c:	6a3b      	ldr	r3, [r7, #32]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	4618      	mov	r0, r3
 8014474:	f7f8 fab6 	bl	800c9e4 <lwip_htonl>
 8014478:	4603      	mov	r3, r0
 801447a:	3301      	adds	r3, #1
 801447c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	da02      	bge.n	8014490 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014494:	2200      	movs	r2, #0
 8014496:	69b9      	ldr	r1, [r7, #24]
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7ff fdf1 	bl	8014080 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	3304      	adds	r3, #4
 80144a4:	69b9      	ldr	r1, [r7, #24]
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f7ff fe28 	bl	80140fc <tcp_output_control_segment>
 80144ac:	4603      	mov	r3, r0
 80144ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80144b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	372c      	adds	r7, #44	; 0x2c
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd90      	pop	{r4, r7, pc}
 80144bc:	0801a724 	.word	0x0801a724
 80144c0:	0801af1c 	.word	0x0801af1c
 80144c4:	0801a778 	.word	0x0801a778

080144c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80144d0:	f7fa f8a8 	bl	800e624 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80144d4:	4b0a      	ldr	r3, [pc, #40]	; (8014500 <tcpip_tcp_timer+0x38>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d103      	bne.n	80144e4 <tcpip_tcp_timer+0x1c>
 80144dc:	4b09      	ldr	r3, [pc, #36]	; (8014504 <tcpip_tcp_timer+0x3c>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d005      	beq.n	80144f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80144e4:	2200      	movs	r2, #0
 80144e6:	4908      	ldr	r1, [pc, #32]	; (8014508 <tcpip_tcp_timer+0x40>)
 80144e8:	20fa      	movs	r0, #250	; 0xfa
 80144ea:	f000 f8f3 	bl	80146d4 <sys_timeout>
 80144ee:	e003      	b.n	80144f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80144f0:	4b06      	ldr	r3, [pc, #24]	; (801450c <tcpip_tcp_timer+0x44>)
 80144f2:	2200      	movs	r2, #0
 80144f4:	601a      	str	r2, [r3, #0]
  }
}
 80144f6:	bf00      	nop
 80144f8:	bf00      	nop
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	2000814c 	.word	0x2000814c
 8014504:	20008150 	.word	0x20008150
 8014508:	080144c9 	.word	0x080144c9
 801450c:	20008198 	.word	0x20008198

08014510 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014514:	4b0a      	ldr	r3, [pc, #40]	; (8014540 <tcp_timer_needed+0x30>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d10f      	bne.n	801453c <tcp_timer_needed+0x2c>
 801451c:	4b09      	ldr	r3, [pc, #36]	; (8014544 <tcp_timer_needed+0x34>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d103      	bne.n	801452c <tcp_timer_needed+0x1c>
 8014524:	4b08      	ldr	r3, [pc, #32]	; (8014548 <tcp_timer_needed+0x38>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d007      	beq.n	801453c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801452c:	4b04      	ldr	r3, [pc, #16]	; (8014540 <tcp_timer_needed+0x30>)
 801452e:	2201      	movs	r2, #1
 8014530:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014532:	2200      	movs	r2, #0
 8014534:	4905      	ldr	r1, [pc, #20]	; (801454c <tcp_timer_needed+0x3c>)
 8014536:	20fa      	movs	r0, #250	; 0xfa
 8014538:	f000 f8cc 	bl	80146d4 <sys_timeout>
  }
}
 801453c:	bf00      	nop
 801453e:	bd80      	pop	{r7, pc}
 8014540:	20008198 	.word	0x20008198
 8014544:	2000814c 	.word	0x2000814c
 8014548:	20008150 	.word	0x20008150
 801454c:	080144c9 	.word	0x080144c9

08014550 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b086      	sub	sp, #24
 8014554:	af00      	add	r7, sp, #0
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	60b9      	str	r1, [r7, #8]
 801455a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801455c:	2006      	movs	r0, #6
 801455e:	f7f8 fea3 	bl	800d2a8 <memp_malloc>
 8014562:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d109      	bne.n	801457e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d151      	bne.n	8014614 <sys_timeout_abs+0xc4>
 8014570:	4b2a      	ldr	r3, [pc, #168]	; (801461c <sys_timeout_abs+0xcc>)
 8014572:	22be      	movs	r2, #190	; 0xbe
 8014574:	492a      	ldr	r1, [pc, #168]	; (8014620 <sys_timeout_abs+0xd0>)
 8014576:	482b      	ldr	r0, [pc, #172]	; (8014624 <sys_timeout_abs+0xd4>)
 8014578:	f003 fe28 	bl	80181cc <iprintf>
    return;
 801457c:	e04a      	b.n	8014614 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	2200      	movs	r2, #0
 8014582:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	68fa      	ldr	r2, [r7, #12]
 8014594:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014596:	4b24      	ldr	r3, [pc, #144]	; (8014628 <sys_timeout_abs+0xd8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d103      	bne.n	80145a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801459e:	4a22      	ldr	r2, [pc, #136]	; (8014628 <sys_timeout_abs+0xd8>)
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	6013      	str	r3, [r2, #0]
    return;
 80145a4:	e037      	b.n	8014616 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	685a      	ldr	r2, [r3, #4]
 80145aa:	4b1f      	ldr	r3, [pc, #124]	; (8014628 <sys_timeout_abs+0xd8>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	1ad3      	subs	r3, r2, r3
 80145b2:	0fdb      	lsrs	r3, r3, #31
 80145b4:	f003 0301 	and.w	r3, r3, #1
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d007      	beq.n	80145ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80145be:	4b1a      	ldr	r3, [pc, #104]	; (8014628 <sys_timeout_abs+0xd8>)
 80145c0:	681a      	ldr	r2, [r3, #0]
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80145c6:	4a18      	ldr	r2, [pc, #96]	; (8014628 <sys_timeout_abs+0xd8>)
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	6013      	str	r3, [r2, #0]
 80145cc:	e023      	b.n	8014616 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80145ce:	4b16      	ldr	r3, [pc, #88]	; (8014628 <sys_timeout_abs+0xd8>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	617b      	str	r3, [r7, #20]
 80145d4:	e01a      	b.n	801460c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d00b      	beq.n	80145f6 <sys_timeout_abs+0xa6>
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	685a      	ldr	r2, [r3, #4]
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	1ad3      	subs	r3, r2, r3
 80145ea:	0fdb      	lsrs	r3, r3, #31
 80145ec:	f003 0301 	and.w	r3, r3, #1
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d007      	beq.n	8014606 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	693a      	ldr	r2, [r7, #16]
 8014602:	601a      	str	r2, [r3, #0]
        break;
 8014604:	e007      	b.n	8014616 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	617b      	str	r3, [r7, #20]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d1e1      	bne.n	80145d6 <sys_timeout_abs+0x86>
 8014612:	e000      	b.n	8014616 <sys_timeout_abs+0xc6>
    return;
 8014614:	bf00      	nop
      }
    }
  }
}
 8014616:	3718      	adds	r7, #24
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	0801af40 	.word	0x0801af40
 8014620:	0801af74 	.word	0x0801af74
 8014624:	0801afb4 	.word	0x0801afb4
 8014628:	20008190 	.word	0x20008190

0801462c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b086      	sub	sp, #24
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	4798      	blx	r3

  now = sys_now();
 801463e:	f7f3 ffbd 	bl	80085bc <sys_now>
 8014642:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	4b0f      	ldr	r3, [pc, #60]	; (8014688 <lwip_cyclic_timer+0x5c>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4413      	add	r3, r2
 801464e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	0fdb      	lsrs	r3, r3, #31
 8014658:	f003 0301 	and.w	r3, r3, #1
 801465c:	b2db      	uxtb	r3, r3
 801465e:	2b00      	cmp	r3, #0
 8014660:	d009      	beq.n	8014676 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	4413      	add	r3, r2
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	4907      	ldr	r1, [pc, #28]	; (801468c <lwip_cyclic_timer+0x60>)
 801466e:	4618      	mov	r0, r3
 8014670:	f7ff ff6e 	bl	8014550 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014674:	e004      	b.n	8014680 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	4904      	ldr	r1, [pc, #16]	; (801468c <lwip_cyclic_timer+0x60>)
 801467a:	68f8      	ldr	r0, [r7, #12]
 801467c:	f7ff ff68 	bl	8014550 <sys_timeout_abs>
}
 8014680:	bf00      	nop
 8014682:	3718      	adds	r7, #24
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	20008194 	.word	0x20008194
 801468c:	0801462d 	.word	0x0801462d

08014690 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014696:	2301      	movs	r3, #1
 8014698:	607b      	str	r3, [r7, #4]
 801469a:	e00e      	b.n	80146ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801469c:	4a0b      	ldr	r2, [pc, #44]	; (80146cc <sys_timeouts_init+0x3c>)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	4a08      	ldr	r2, [pc, #32]	; (80146cc <sys_timeouts_init+0x3c>)
 80146aa:	4413      	add	r3, r2
 80146ac:	461a      	mov	r2, r3
 80146ae:	4908      	ldr	r1, [pc, #32]	; (80146d0 <sys_timeouts_init+0x40>)
 80146b0:	f000 f810 	bl	80146d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	3301      	adds	r3, #1
 80146b8:	607b      	str	r3, [r7, #4]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2b02      	cmp	r3, #2
 80146be:	d9ed      	bls.n	801469c <sys_timeouts_init+0xc>
  }
}
 80146c0:	bf00      	nop
 80146c2:	bf00      	nop
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	0801bbac 	.word	0x0801bbac
 80146d0:	0801462d 	.word	0x0801462d

080146d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80146e6:	d306      	bcc.n	80146f6 <sys_timeout+0x22>
 80146e8:	4b0a      	ldr	r3, [pc, #40]	; (8014714 <sys_timeout+0x40>)
 80146ea:	f240 1229 	movw	r2, #297	; 0x129
 80146ee:	490a      	ldr	r1, [pc, #40]	; (8014718 <sys_timeout+0x44>)
 80146f0:	480a      	ldr	r0, [pc, #40]	; (801471c <sys_timeout+0x48>)
 80146f2:	f003 fd6b 	bl	80181cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80146f6:	f7f3 ff61 	bl	80085bc <sys_now>
 80146fa:	4602      	mov	r2, r0
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	4413      	add	r3, r2
 8014700:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	68b9      	ldr	r1, [r7, #8]
 8014706:	6978      	ldr	r0, [r7, #20]
 8014708:	f7ff ff22 	bl	8014550 <sys_timeout_abs>
#endif
}
 801470c:	bf00      	nop
 801470e:	3718      	adds	r7, #24
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	0801af40 	.word	0x0801af40
 8014718:	0801afdc 	.word	0x0801afdc
 801471c:	0801afb4 	.word	0x0801afb4

08014720 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014726:	f7f3 ff49 	bl	80085bc <sys_now>
 801472a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801472c:	4b1a      	ldr	r3, [pc, #104]	; (8014798 <sys_check_timeouts+0x78>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	b2db      	uxtb	r3, r3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <sys_check_timeouts+0x1a>
 8014736:	f7f9 f963 	bl	800da00 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801473a:	4b18      	ldr	r3, [pc, #96]	; (801479c <sys_check_timeouts+0x7c>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d022      	beq.n	801478c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	0fdb      	lsrs	r3, r3, #31
 8014750:	f003 0301 	and.w	r3, r3, #1
 8014754:	b2db      	uxtb	r3, r3
 8014756:	2b00      	cmp	r3, #0
 8014758:	d11a      	bne.n	8014790 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4a0f      	ldr	r2, [pc, #60]	; (801479c <sys_check_timeouts+0x7c>)
 8014760:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	689b      	ldr	r3, [r3, #8]
 8014766:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	4a0b      	ldr	r2, [pc, #44]	; (80147a0 <sys_check_timeouts+0x80>)
 8014774:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014776:	68b9      	ldr	r1, [r7, #8]
 8014778:	2006      	movs	r0, #6
 801477a:	f7f8 fe05 	bl	800d388 <memp_free>
    if (handler != NULL) {
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d0d3      	beq.n	801472c <sys_check_timeouts+0xc>
      handler(arg);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6838      	ldr	r0, [r7, #0]
 8014788:	4798      	blx	r3
  do {
 801478a:	e7cf      	b.n	801472c <sys_check_timeouts+0xc>
      return;
 801478c:	bf00      	nop
 801478e:	e000      	b.n	8014792 <sys_check_timeouts+0x72>
      return;
 8014790:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014792:	3710      	adds	r7, #16
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	2000813d 	.word	0x2000813d
 801479c:	20008190 	.word	0x20008190
 80147a0:	20008194 	.word	0x20008194

080147a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80147a8:	f003 fb84 	bl	8017eb4 <rand>
 80147ac:	4603      	mov	r3, r0
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	4b01      	ldr	r3, [pc, #4]	; (80147c4 <udp_init+0x20>)
 80147be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80147c0:	bf00      	nop
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	20000148 	.word	0x20000148

080147c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	4613      	mov	r3, r2
 80147d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d105      	bne.n	80147e8 <udp_input_local_match+0x20>
 80147dc:	4b27      	ldr	r3, [pc, #156]	; (801487c <udp_input_local_match+0xb4>)
 80147de:	2287      	movs	r2, #135	; 0x87
 80147e0:	4927      	ldr	r1, [pc, #156]	; (8014880 <udp_input_local_match+0xb8>)
 80147e2:	4828      	ldr	r0, [pc, #160]	; (8014884 <udp_input_local_match+0xbc>)
 80147e4:	f003 fcf2 	bl	80181cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d105      	bne.n	80147fa <udp_input_local_match+0x32>
 80147ee:	4b23      	ldr	r3, [pc, #140]	; (801487c <udp_input_local_match+0xb4>)
 80147f0:	2288      	movs	r2, #136	; 0x88
 80147f2:	4925      	ldr	r1, [pc, #148]	; (8014888 <udp_input_local_match+0xc0>)
 80147f4:	4823      	ldr	r0, [pc, #140]	; (8014884 <udp_input_local_match+0xbc>)
 80147f6:	f003 fce9 	bl	80181cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	7a1b      	ldrb	r3, [r3, #8]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d00b      	beq.n	801481a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	7a1a      	ldrb	r2, [r3, #8]
 8014806:	4b21      	ldr	r3, [pc, #132]	; (801488c <udp_input_local_match+0xc4>)
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801480e:	3301      	adds	r3, #1
 8014810:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014812:	429a      	cmp	r2, r3
 8014814:	d001      	beq.n	801481a <udp_input_local_match+0x52>
    return 0;
 8014816:	2300      	movs	r3, #0
 8014818:	e02b      	b.n	8014872 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801481a:	79fb      	ldrb	r3, [r7, #7]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d018      	beq.n	8014852 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d013      	beq.n	801484e <udp_input_local_match+0x86>
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d00f      	beq.n	801484e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801482e:	4b17      	ldr	r3, [pc, #92]	; (801488c <udp_input_local_match+0xc4>)
 8014830:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014836:	d00a      	beq.n	801484e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	4b13      	ldr	r3, [pc, #76]	; (801488c <udp_input_local_match+0xc4>)
 801483e:	695b      	ldr	r3, [r3, #20]
 8014840:	405a      	eors	r2, r3
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	3308      	adds	r3, #8
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801484a:	2b00      	cmp	r3, #0
 801484c:	d110      	bne.n	8014870 <udp_input_local_match+0xa8>
          return 1;
 801484e:	2301      	movs	r3, #1
 8014850:	e00f      	b.n	8014872 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d009      	beq.n	801486c <udp_input_local_match+0xa4>
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d005      	beq.n	801486c <udp_input_local_match+0xa4>
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	4b09      	ldr	r3, [pc, #36]	; (801488c <udp_input_local_match+0xc4>)
 8014866:	695b      	ldr	r3, [r3, #20]
 8014868:	429a      	cmp	r2, r3
 801486a:	d101      	bne.n	8014870 <udp_input_local_match+0xa8>
        return 1;
 801486c:	2301      	movs	r3, #1
 801486e:	e000      	b.n	8014872 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014870:	2300      	movs	r3, #0
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	0801b028 	.word	0x0801b028
 8014880:	0801b058 	.word	0x0801b058
 8014884:	0801b07c 	.word	0x0801b07c
 8014888:	0801b0a4 	.word	0x0801b0a4
 801488c:	20005010 	.word	0x20005010

08014890 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014890:	b590      	push	{r4, r7, lr}
 8014892:	b08d      	sub	sp, #52	; 0x34
 8014894:	af02      	add	r7, sp, #8
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801489a:	2300      	movs	r3, #0
 801489c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d105      	bne.n	80148b0 <udp_input+0x20>
 80148a4:	4b7c      	ldr	r3, [pc, #496]	; (8014a98 <udp_input+0x208>)
 80148a6:	22cf      	movs	r2, #207	; 0xcf
 80148a8:	497c      	ldr	r1, [pc, #496]	; (8014a9c <udp_input+0x20c>)
 80148aa:	487d      	ldr	r0, [pc, #500]	; (8014aa0 <udp_input+0x210>)
 80148ac:	f003 fc8e 	bl	80181cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d105      	bne.n	80148c2 <udp_input+0x32>
 80148b6:	4b78      	ldr	r3, [pc, #480]	; (8014a98 <udp_input+0x208>)
 80148b8:	22d0      	movs	r2, #208	; 0xd0
 80148ba:	497a      	ldr	r1, [pc, #488]	; (8014aa4 <udp_input+0x214>)
 80148bc:	4878      	ldr	r0, [pc, #480]	; (8014aa0 <udp_input+0x210>)
 80148be:	f003 fc85 	bl	80181cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	895b      	ldrh	r3, [r3, #10]
 80148c6:	2b07      	cmp	r3, #7
 80148c8:	d803      	bhi.n	80148d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7f9 fbd2 	bl	800e074 <pbuf_free>
    goto end;
 80148d0:	e0de      	b.n	8014a90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80148d8:	4b73      	ldr	r3, [pc, #460]	; (8014aa8 <udp_input+0x218>)
 80148da:	695b      	ldr	r3, [r3, #20]
 80148dc:	4a72      	ldr	r2, [pc, #456]	; (8014aa8 <udp_input+0x218>)
 80148de:	6812      	ldr	r2, [r2, #0]
 80148e0:	4611      	mov	r1, r2
 80148e2:	4618      	mov	r0, r3
 80148e4:	f001 fc88 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 80148e8:	4603      	mov	r3, r0
 80148ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	881b      	ldrh	r3, [r3, #0]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7f8 f861 	bl	800c9ba <lwip_htons>
 80148f8:	4603      	mov	r3, r0
 80148fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	885b      	ldrh	r3, [r3, #2]
 8014900:	b29b      	uxth	r3, r3
 8014902:	4618      	mov	r0, r3
 8014904:	f7f8 f859 	bl	800c9ba <lwip_htons>
 8014908:	4603      	mov	r3, r0
 801490a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801490c:	2300      	movs	r3, #0
 801490e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014910:	2300      	movs	r3, #0
 8014912:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014914:	2300      	movs	r3, #0
 8014916:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014918:	4b64      	ldr	r3, [pc, #400]	; (8014aac <udp_input+0x21c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	627b      	str	r3, [r7, #36]	; 0x24
 801491e:	e054      	b.n	80149ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014922:	8a5b      	ldrh	r3, [r3, #18]
 8014924:	89fa      	ldrh	r2, [r7, #14]
 8014926:	429a      	cmp	r2, r3
 8014928:	d14a      	bne.n	80149c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801492a:	7cfb      	ldrb	r3, [r7, #19]
 801492c:	461a      	mov	r2, r3
 801492e:	6839      	ldr	r1, [r7, #0]
 8014930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014932:	f7ff ff49 	bl	80147c8 <udp_input_local_match>
 8014936:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014938:	2b00      	cmp	r3, #0
 801493a:	d041      	beq.n	80149c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493e:	7c1b      	ldrb	r3, [r3, #16]
 8014940:	f003 0304 	and.w	r3, r3, #4
 8014944:	2b00      	cmp	r3, #0
 8014946:	d11d      	bne.n	8014984 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d102      	bne.n	8014954 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014950:	61fb      	str	r3, [r7, #28]
 8014952:	e017      	b.n	8014984 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014954:	7cfb      	ldrb	r3, [r7, #19]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d014      	beq.n	8014984 <udp_input+0xf4>
 801495a:	4b53      	ldr	r3, [pc, #332]	; (8014aa8 <udp_input+0x218>)
 801495c:	695b      	ldr	r3, [r3, #20]
 801495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014962:	d10f      	bne.n	8014984 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	3304      	adds	r3, #4
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	429a      	cmp	r2, r3
 8014970:	d008      	beq.n	8014984 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014974:	681a      	ldr	r2, [r3, #0]
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	3304      	adds	r3, #4
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	429a      	cmp	r2, r3
 801497e:	d101      	bne.n	8014984 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014982:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014986:	8a9b      	ldrh	r3, [r3, #20]
 8014988:	8a3a      	ldrh	r2, [r7, #16]
 801498a:	429a      	cmp	r2, r3
 801498c:	d118      	bne.n	80149c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014990:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014992:	2b00      	cmp	r3, #0
 8014994:	d005      	beq.n	80149a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014998:	685a      	ldr	r2, [r3, #4]
 801499a:	4b43      	ldr	r3, [pc, #268]	; (8014aa8 <udp_input+0x218>)
 801499c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801499e:	429a      	cmp	r2, r3
 80149a0:	d10e      	bne.n	80149c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d014      	beq.n	80149d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80149a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149aa:	68da      	ldr	r2, [r3, #12]
 80149ac:	6a3b      	ldr	r3, [r7, #32]
 80149ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80149b0:	4b3e      	ldr	r3, [pc, #248]	; (8014aac <udp_input+0x21c>)
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149b8:	4a3c      	ldr	r2, [pc, #240]	; (8014aac <udp_input+0x21c>)
 80149ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149be:	e008      	b.n	80149d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80149c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	627b      	str	r3, [r7, #36]	; 0x24
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1a7      	bne.n	8014920 <udp_input+0x90>
 80149d0:	e000      	b.n	80149d4 <udp_input+0x144>
        break;
 80149d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d101      	bne.n	80149de <udp_input+0x14e>
    pcb = uncon_pcb;
 80149da:	69fb      	ldr	r3, [r7, #28]
 80149dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <udp_input+0x15a>
    for_us = 1;
 80149e4:	2301      	movs	r3, #1
 80149e6:	76fb      	strb	r3, [r7, #27]
 80149e8:	e00a      	b.n	8014a00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	3304      	adds	r3, #4
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	4b2d      	ldr	r3, [pc, #180]	; (8014aa8 <udp_input+0x218>)
 80149f2:	695b      	ldr	r3, [r3, #20]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	bf0c      	ite	eq
 80149f8:	2301      	moveq	r3, #1
 80149fa:	2300      	movne	r3, #0
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014a00:	7efb      	ldrb	r3, [r7, #27]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d041      	beq.n	8014a8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014a06:	2108      	movs	r1, #8
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7f9 faad 	bl	800df68 <pbuf_remove_header>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d00a      	beq.n	8014a2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a14:	4b20      	ldr	r3, [pc, #128]	; (8014a98 <udp_input+0x208>)
 8014a16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a1a:	4925      	ldr	r1, [pc, #148]	; (8014ab0 <udp_input+0x220>)
 8014a1c:	4820      	ldr	r0, [pc, #128]	; (8014aa0 <udp_input+0x210>)
 8014a1e:	f003 fbd5 	bl	80181cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f7f9 fb26 	bl	800e074 <pbuf_free>
      goto end;
 8014a28:	e032      	b.n	8014a90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d012      	beq.n	8014a56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a32:	699b      	ldr	r3, [r3, #24]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00a      	beq.n	8014a4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3a:	699c      	ldr	r4, [r3, #24]
 8014a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3e:	69d8      	ldr	r0, [r3, #28]
 8014a40:	8a3b      	ldrh	r3, [r7, #16]
 8014a42:	9300      	str	r3, [sp, #0]
 8014a44:	4b1b      	ldr	r3, [pc, #108]	; (8014ab4 <udp_input+0x224>)
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a4c:	e021      	b.n	8014a92 <udp_input+0x202>
        pbuf_free(p);
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f7f9 fb10 	bl	800e074 <pbuf_free>
        goto end;
 8014a54:	e01c      	b.n	8014a90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a56:	7cfb      	ldrb	r3, [r7, #19]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d112      	bne.n	8014a82 <udp_input+0x1f2>
 8014a5c:	4b12      	ldr	r3, [pc, #72]	; (8014aa8 <udp_input+0x218>)
 8014a5e:	695b      	ldr	r3, [r3, #20]
 8014a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a64:	2be0      	cmp	r3, #224	; 0xe0
 8014a66:	d00c      	beq.n	8014a82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a68:	4b0f      	ldr	r3, [pc, #60]	; (8014aa8 <udp_input+0x218>)
 8014a6a:	899b      	ldrh	r3, [r3, #12]
 8014a6c:	3308      	adds	r3, #8
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	b21b      	sxth	r3, r3
 8014a72:	4619      	mov	r1, r3
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7f9 faea 	bl	800e04e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a7a:	2103      	movs	r1, #3
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f001 f89b 	bl	8015bb8 <icmp_dest_unreach>
      pbuf_free(p);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7f9 faf6 	bl	800e074 <pbuf_free>
  return;
 8014a88:	e003      	b.n	8014a92 <udp_input+0x202>
    pbuf_free(p);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f7f9 faf2 	bl	800e074 <pbuf_free>
  return;
 8014a90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a92:	372c      	adds	r7, #44	; 0x2c
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd90      	pop	{r4, r7, pc}
 8014a98:	0801b028 	.word	0x0801b028
 8014a9c:	0801b0cc 	.word	0x0801b0cc
 8014aa0:	0801b07c 	.word	0x0801b07c
 8014aa4:	0801b0e4 	.word	0x0801b0e4
 8014aa8:	20005010 	.word	0x20005010
 8014aac:	2000819c 	.word	0x2000819c
 8014ab0:	0801b100 	.word	0x0801b100
 8014ab4:	20005020 	.word	0x20005020

08014ab8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d01e      	beq.n	8014b06 <udp_netif_ip_addr_changed+0x4e>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d01a      	beq.n	8014b06 <udp_netif_ip_addr_changed+0x4e>
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d017      	beq.n	8014b06 <udp_netif_ip_addr_changed+0x4e>
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d013      	beq.n	8014b06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014ade:	4b0d      	ldr	r3, [pc, #52]	; (8014b14 <udp_netif_ip_addr_changed+0x5c>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	60fb      	str	r3, [r7, #12]
 8014ae4:	e00c      	b.n	8014b00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d103      	bne.n	8014afa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	60fb      	str	r3, [r7, #12]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d1ef      	bne.n	8014ae6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014b06:	bf00      	nop
 8014b08:	3714      	adds	r7, #20
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b10:	4770      	bx	lr
 8014b12:	bf00      	nop
 8014b14:	2000819c 	.word	0x2000819c

08014b18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014b20:	4915      	ldr	r1, [pc, #84]	; (8014b78 <etharp_free_entry+0x60>)
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	4613      	mov	r3, r2
 8014b26:	005b      	lsls	r3, r3, #1
 8014b28:	4413      	add	r3, r2
 8014b2a:	00db      	lsls	r3, r3, #3
 8014b2c:	440b      	add	r3, r1
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d013      	beq.n	8014b5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014b34:	4910      	ldr	r1, [pc, #64]	; (8014b78 <etharp_free_entry+0x60>)
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	005b      	lsls	r3, r3, #1
 8014b3c:	4413      	add	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	440b      	add	r3, r1
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7f9 fa95 	bl	800e074 <pbuf_free>
    arp_table[i].q = NULL;
 8014b4a:	490b      	ldr	r1, [pc, #44]	; (8014b78 <etharp_free_entry+0x60>)
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	4613      	mov	r3, r2
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	4413      	add	r3, r2
 8014b54:	00db      	lsls	r3, r3, #3
 8014b56:	440b      	add	r3, r1
 8014b58:	2200      	movs	r2, #0
 8014b5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014b5c:	4906      	ldr	r1, [pc, #24]	; (8014b78 <etharp_free_entry+0x60>)
 8014b5e:	687a      	ldr	r2, [r7, #4]
 8014b60:	4613      	mov	r3, r2
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	00db      	lsls	r3, r3, #3
 8014b68:	440b      	add	r3, r1
 8014b6a:	3314      	adds	r3, #20
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	200081a0 	.word	0x200081a0

08014b7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b82:	2300      	movs	r3, #0
 8014b84:	607b      	str	r3, [r7, #4]
 8014b86:	e096      	b.n	8014cb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014b88:	494f      	ldr	r1, [pc, #316]	; (8014cc8 <etharp_tmr+0x14c>)
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	440b      	add	r3, r1
 8014b96:	3314      	adds	r3, #20
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014b9c:	78fb      	ldrb	r3, [r7, #3]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 8086 	beq.w	8014cb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014ba4:	4948      	ldr	r1, [pc, #288]	; (8014cc8 <etharp_tmr+0x14c>)
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	005b      	lsls	r3, r3, #1
 8014bac:	4413      	add	r3, r2
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	440b      	add	r3, r1
 8014bb2:	3312      	adds	r3, #18
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	b298      	uxth	r0, r3
 8014bba:	4943      	ldr	r1, [pc, #268]	; (8014cc8 <etharp_tmr+0x14c>)
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4413      	add	r3, r2
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	440b      	add	r3, r1
 8014bc8:	3312      	adds	r3, #18
 8014bca:	4602      	mov	r2, r0
 8014bcc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014bce:	493e      	ldr	r1, [pc, #248]	; (8014cc8 <etharp_tmr+0x14c>)
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	440b      	add	r3, r1
 8014bdc:	3312      	adds	r3, #18
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014be4:	d215      	bcs.n	8014c12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014be6:	4938      	ldr	r1, [pc, #224]	; (8014cc8 <etharp_tmr+0x14c>)
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3314      	adds	r3, #20
 8014bf6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d10e      	bne.n	8014c1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014bfc:	4932      	ldr	r1, [pc, #200]	; (8014cc8 <etharp_tmr+0x14c>)
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	4613      	mov	r3, r2
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4413      	add	r3, r2
 8014c06:	00db      	lsls	r3, r3, #3
 8014c08:	440b      	add	r3, r1
 8014c0a:	3312      	adds	r3, #18
 8014c0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014c0e:	2b04      	cmp	r3, #4
 8014c10:	d903      	bls.n	8014c1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f7ff ff80 	bl	8014b18 <etharp_free_entry>
 8014c18:	e04a      	b.n	8014cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014c1a:	492b      	ldr	r1, [pc, #172]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	4613      	mov	r3, r2
 8014c20:	005b      	lsls	r3, r3, #1
 8014c22:	4413      	add	r3, r2
 8014c24:	00db      	lsls	r3, r3, #3
 8014c26:	440b      	add	r3, r1
 8014c28:	3314      	adds	r3, #20
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	2b03      	cmp	r3, #3
 8014c2e:	d10a      	bne.n	8014c46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014c30:	4925      	ldr	r1, [pc, #148]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	4613      	mov	r3, r2
 8014c36:	005b      	lsls	r3, r3, #1
 8014c38:	4413      	add	r3, r2
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	440b      	add	r3, r1
 8014c3e:	3314      	adds	r3, #20
 8014c40:	2204      	movs	r2, #4
 8014c42:	701a      	strb	r2, [r3, #0]
 8014c44:	e034      	b.n	8014cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014c46:	4920      	ldr	r1, [pc, #128]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	005b      	lsls	r3, r3, #1
 8014c4e:	4413      	add	r3, r2
 8014c50:	00db      	lsls	r3, r3, #3
 8014c52:	440b      	add	r3, r1
 8014c54:	3314      	adds	r3, #20
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	2b04      	cmp	r3, #4
 8014c5a:	d10a      	bne.n	8014c72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c5c:	491a      	ldr	r1, [pc, #104]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	4613      	mov	r3, r2
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	4413      	add	r3, r2
 8014c66:	00db      	lsls	r3, r3, #3
 8014c68:	440b      	add	r3, r1
 8014c6a:	3314      	adds	r3, #20
 8014c6c:	2202      	movs	r2, #2
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	e01e      	b.n	8014cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c72:	4915      	ldr	r1, [pc, #84]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	4613      	mov	r3, r2
 8014c78:	005b      	lsls	r3, r3, #1
 8014c7a:	4413      	add	r3, r2
 8014c7c:	00db      	lsls	r3, r3, #3
 8014c7e:	440b      	add	r3, r1
 8014c80:	3314      	adds	r3, #20
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d113      	bne.n	8014cb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c88:	490f      	ldr	r1, [pc, #60]	; (8014cc8 <etharp_tmr+0x14c>)
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	005b      	lsls	r3, r3, #1
 8014c90:	4413      	add	r3, r2
 8014c92:	00db      	lsls	r3, r3, #3
 8014c94:	440b      	add	r3, r1
 8014c96:	3308      	adds	r3, #8
 8014c98:	6818      	ldr	r0, [r3, #0]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	005b      	lsls	r3, r3, #1
 8014ca0:	4413      	add	r3, r2
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	4a08      	ldr	r2, [pc, #32]	; (8014cc8 <etharp_tmr+0x14c>)
 8014ca6:	4413      	add	r3, r2
 8014ca8:	3304      	adds	r3, #4
 8014caa:	4619      	mov	r1, r3
 8014cac:	f000 fe6e 	bl	801598c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	607b      	str	r3, [r7, #4]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2b09      	cmp	r3, #9
 8014cba:	f77f af65 	ble.w	8014b88 <etharp_tmr+0xc>
      }
    }
  }
}
 8014cbe:	bf00      	nop
 8014cc0:	bf00      	nop
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	200081a0 	.word	0x200081a0

08014ccc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08a      	sub	sp, #40	; 0x28
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	607a      	str	r2, [r7, #4]
 8014cd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014cda:	230a      	movs	r3, #10
 8014cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014cde:	230a      	movs	r3, #10
 8014ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014ce2:	230a      	movs	r3, #10
 8014ce4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014cea:	230a      	movs	r3, #10
 8014cec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	83bb      	strh	r3, [r7, #28]
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	837b      	strh	r3, [r7, #26]
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	843b      	strh	r3, [r7, #32]
 8014cfe:	e0ae      	b.n	8014e5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d04:	49a6      	ldr	r1, [pc, #664]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014d06:	4613      	mov	r3, r2
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	4413      	add	r3, r2
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	440b      	add	r3, r1
 8014d10:	3314      	adds	r3, #20
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014d16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014d1a:	2b0a      	cmp	r3, #10
 8014d1c:	d105      	bne.n	8014d2a <etharp_find_entry+0x5e>
 8014d1e:	7dfb      	ldrb	r3, [r7, #23]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d102      	bne.n	8014d2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014d24:	8c3b      	ldrh	r3, [r7, #32]
 8014d26:	847b      	strh	r3, [r7, #34]	; 0x22
 8014d28:	e095      	b.n	8014e56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014d2a:	7dfb      	ldrb	r3, [r7, #23]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f000 8092 	beq.w	8014e56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014d32:	7dfb      	ldrb	r3, [r7, #23]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d009      	beq.n	8014d4c <etharp_find_entry+0x80>
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	2b01      	cmp	r3, #1
 8014d3c:	d806      	bhi.n	8014d4c <etharp_find_entry+0x80>
 8014d3e:	4b99      	ldr	r3, [pc, #612]	; (8014fa4 <etharp_find_entry+0x2d8>)
 8014d40:	f240 1223 	movw	r2, #291	; 0x123
 8014d44:	4998      	ldr	r1, [pc, #608]	; (8014fa8 <etharp_find_entry+0x2dc>)
 8014d46:	4899      	ldr	r0, [pc, #612]	; (8014fac <etharp_find_entry+0x2e0>)
 8014d48:	f003 fa40 	bl	80181cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d020      	beq.n	8014d94 <etharp_find_entry+0xc8>
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6819      	ldr	r1, [r3, #0]
 8014d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d5a:	4891      	ldr	r0, [pc, #580]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	005b      	lsls	r3, r3, #1
 8014d60:	4413      	add	r3, r2
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	4403      	add	r3, r0
 8014d66:	3304      	adds	r3, #4
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	4299      	cmp	r1, r3
 8014d6c:	d112      	bne.n	8014d94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d00c      	beq.n	8014d8e <etharp_find_entry+0xc2>
 8014d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d78:	4989      	ldr	r1, [pc, #548]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	005b      	lsls	r3, r3, #1
 8014d7e:	4413      	add	r3, r2
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	440b      	add	r3, r1
 8014d84:	3308      	adds	r3, #8
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d102      	bne.n	8014d94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014d8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d92:	e100      	b.n	8014f96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014d94:	7dfb      	ldrb	r3, [r7, #23]
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	d140      	bne.n	8014e1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d9e:	4980      	ldr	r1, [pc, #512]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	00db      	lsls	r3, r3, #3
 8014da8:	440b      	add	r3, r1
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d01a      	beq.n	8014de6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014db0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db4:	497a      	ldr	r1, [pc, #488]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014db6:	4613      	mov	r3, r2
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	4413      	add	r3, r2
 8014dbc:	00db      	lsls	r3, r3, #3
 8014dbe:	440b      	add	r3, r1
 8014dc0:	3312      	adds	r3, #18
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	8bba      	ldrh	r2, [r7, #28]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d845      	bhi.n	8014e56 <etharp_find_entry+0x18a>
            old_queue = i;
 8014dca:	8c3b      	ldrh	r3, [r7, #32]
 8014dcc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014dce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dd2:	4973      	ldr	r1, [pc, #460]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	005b      	lsls	r3, r3, #1
 8014dd8:	4413      	add	r3, r2
 8014dda:	00db      	lsls	r3, r3, #3
 8014ddc:	440b      	add	r3, r1
 8014dde:	3312      	adds	r3, #18
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	83bb      	strh	r3, [r7, #28]
 8014de4:	e037      	b.n	8014e56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014de6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dea:	496d      	ldr	r1, [pc, #436]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014dec:	4613      	mov	r3, r2
 8014dee:	005b      	lsls	r3, r3, #1
 8014df0:	4413      	add	r3, r2
 8014df2:	00db      	lsls	r3, r3, #3
 8014df4:	440b      	add	r3, r1
 8014df6:	3312      	adds	r3, #18
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	8b7a      	ldrh	r2, [r7, #26]
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d82a      	bhi.n	8014e56 <etharp_find_entry+0x18a>
            old_pending = i;
 8014e00:	8c3b      	ldrh	r3, [r7, #32]
 8014e02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014e04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e08:	4965      	ldr	r1, [pc, #404]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	3312      	adds	r3, #18
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	837b      	strh	r3, [r7, #26]
 8014e1a:	e01c      	b.n	8014e56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014e1c:	7dfb      	ldrb	r3, [r7, #23]
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	d919      	bls.n	8014e56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e26:	495e      	ldr	r1, [pc, #376]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014e28:	4613      	mov	r3, r2
 8014e2a:	005b      	lsls	r3, r3, #1
 8014e2c:	4413      	add	r3, r2
 8014e2e:	00db      	lsls	r3, r3, #3
 8014e30:	440b      	add	r3, r1
 8014e32:	3312      	adds	r3, #18
 8014e34:	881b      	ldrh	r3, [r3, #0]
 8014e36:	8b3a      	ldrh	r2, [r7, #24]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d80c      	bhi.n	8014e56 <etharp_find_entry+0x18a>
            old_stable = i;
 8014e3c:	8c3b      	ldrh	r3, [r7, #32]
 8014e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014e40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e44:	4956      	ldr	r1, [pc, #344]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014e46:	4613      	mov	r3, r2
 8014e48:	005b      	lsls	r3, r3, #1
 8014e4a:	4413      	add	r3, r2
 8014e4c:	00db      	lsls	r3, r3, #3
 8014e4e:	440b      	add	r3, r1
 8014e50:	3312      	adds	r3, #18
 8014e52:	881b      	ldrh	r3, [r3, #0]
 8014e54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e56:	8c3b      	ldrh	r3, [r7, #32]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	843b      	strh	r3, [r7, #32]
 8014e5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e62:	2b09      	cmp	r3, #9
 8014e64:	f77f af4c 	ble.w	8014d00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014e68:	7afb      	ldrb	r3, [r7, #11]
 8014e6a:	f003 0302 	and.w	r3, r3, #2
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d108      	bne.n	8014e84 <etharp_find_entry+0x1b8>
 8014e72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e76:	2b0a      	cmp	r3, #10
 8014e78:	d107      	bne.n	8014e8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014e7a:	7afb      	ldrb	r3, [r7, #11]
 8014e7c:	f003 0301 	and.w	r3, r3, #1
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014e84:	f04f 33ff 	mov.w	r3, #4294967295
 8014e88:	e085      	b.n	8014f96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014e8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e8e:	2b09      	cmp	r3, #9
 8014e90:	dc02      	bgt.n	8014e98 <etharp_find_entry+0x1cc>
    i = empty;
 8014e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e94:	843b      	strh	r3, [r7, #32]
 8014e96:	e039      	b.n	8014f0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e9c:	2b09      	cmp	r3, #9
 8014e9e:	dc14      	bgt.n	8014eca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ea2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014ea4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ea8:	493d      	ldr	r1, [pc, #244]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014eaa:	4613      	mov	r3, r2
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	4413      	add	r3, r2
 8014eb0:	00db      	lsls	r3, r3, #3
 8014eb2:	440b      	add	r3, r1
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d018      	beq.n	8014eec <etharp_find_entry+0x220>
 8014eba:	4b3a      	ldr	r3, [pc, #232]	; (8014fa4 <etharp_find_entry+0x2d8>)
 8014ebc:	f240 126d 	movw	r2, #365	; 0x16d
 8014ec0:	493b      	ldr	r1, [pc, #236]	; (8014fb0 <etharp_find_entry+0x2e4>)
 8014ec2:	483a      	ldr	r0, [pc, #232]	; (8014fac <etharp_find_entry+0x2e0>)
 8014ec4:	f003 f982 	bl	80181cc <iprintf>
 8014ec8:	e010      	b.n	8014eec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014eca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014ece:	2b09      	cmp	r3, #9
 8014ed0:	dc02      	bgt.n	8014ed8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014ed4:	843b      	strh	r3, [r7, #32]
 8014ed6:	e009      	b.n	8014eec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014ed8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014edc:	2b09      	cmp	r3, #9
 8014ede:	dc02      	bgt.n	8014ee6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014ee0:	8bfb      	ldrh	r3, [r7, #30]
 8014ee2:	843b      	strh	r3, [r7, #32]
 8014ee4:	e002      	b.n	8014eec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8014eea:	e054      	b.n	8014f96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014eec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ef0:	2b09      	cmp	r3, #9
 8014ef2:	dd06      	ble.n	8014f02 <etharp_find_entry+0x236>
 8014ef4:	4b2b      	ldr	r3, [pc, #172]	; (8014fa4 <etharp_find_entry+0x2d8>)
 8014ef6:	f240 127f 	movw	r2, #383	; 0x17f
 8014efa:	492e      	ldr	r1, [pc, #184]	; (8014fb4 <etharp_find_entry+0x2e8>)
 8014efc:	482b      	ldr	r0, [pc, #172]	; (8014fac <etharp_find_entry+0x2e0>)
 8014efe:	f003 f965 	bl	80181cc <iprintf>
    etharp_free_entry(i);
 8014f02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f7ff fe06 	bl	8014b18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014f0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f10:	2b09      	cmp	r3, #9
 8014f12:	dd06      	ble.n	8014f22 <etharp_find_entry+0x256>
 8014f14:	4b23      	ldr	r3, [pc, #140]	; (8014fa4 <etharp_find_entry+0x2d8>)
 8014f16:	f240 1283 	movw	r2, #387	; 0x183
 8014f1a:	4926      	ldr	r1, [pc, #152]	; (8014fb4 <etharp_find_entry+0x2e8>)
 8014f1c:	4823      	ldr	r0, [pc, #140]	; (8014fac <etharp_find_entry+0x2e0>)
 8014f1e:	f003 f955 	bl	80181cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014f22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f26:	491e      	ldr	r1, [pc, #120]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014f28:	4613      	mov	r3, r2
 8014f2a:	005b      	lsls	r3, r3, #1
 8014f2c:	4413      	add	r3, r2
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	440b      	add	r3, r1
 8014f32:	3314      	adds	r3, #20
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d006      	beq.n	8014f48 <etharp_find_entry+0x27c>
 8014f3a:	4b1a      	ldr	r3, [pc, #104]	; (8014fa4 <etharp_find_entry+0x2d8>)
 8014f3c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014f40:	491d      	ldr	r1, [pc, #116]	; (8014fb8 <etharp_find_entry+0x2ec>)
 8014f42:	481a      	ldr	r0, [pc, #104]	; (8014fac <etharp_find_entry+0x2e0>)
 8014f44:	f003 f942 	bl	80181cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d00b      	beq.n	8014f66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	6819      	ldr	r1, [r3, #0]
 8014f56:	4812      	ldr	r0, [pc, #72]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014f58:	4613      	mov	r3, r2
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	4413      	add	r3, r2
 8014f5e:	00db      	lsls	r3, r3, #3
 8014f60:	4403      	add	r3, r0
 8014f62:	3304      	adds	r3, #4
 8014f64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014f66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f6a:	490d      	ldr	r1, [pc, #52]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	005b      	lsls	r3, r3, #1
 8014f70:	4413      	add	r3, r2
 8014f72:	00db      	lsls	r3, r3, #3
 8014f74:	440b      	add	r3, r1
 8014f76:	3312      	adds	r3, #18
 8014f78:	2200      	movs	r2, #0
 8014f7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f80:	4907      	ldr	r1, [pc, #28]	; (8014fa0 <etharp_find_entry+0x2d4>)
 8014f82:	4613      	mov	r3, r2
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4413      	add	r3, r2
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	440b      	add	r3, r1
 8014f8c:	3308      	adds	r3, #8
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014f92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3728      	adds	r7, #40	; 0x28
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	200081a0 	.word	0x200081a0
 8014fa4:	0801b38c 	.word	0x0801b38c
 8014fa8:	0801b3c4 	.word	0x0801b3c4
 8014fac:	0801b404 	.word	0x0801b404
 8014fb0:	0801b42c 	.word	0x0801b42c
 8014fb4:	0801b444 	.word	0x0801b444
 8014fb8:	0801b458 	.word	0x0801b458

08014fbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b088      	sub	sp, #32
 8014fc0:	af02      	add	r7, sp, #8
 8014fc2:	60f8      	str	r0, [r7, #12]
 8014fc4:	60b9      	str	r1, [r7, #8]
 8014fc6:	607a      	str	r2, [r7, #4]
 8014fc8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014fd0:	2b06      	cmp	r3, #6
 8014fd2:	d006      	beq.n	8014fe2 <etharp_update_arp_entry+0x26>
 8014fd4:	4b48      	ldr	r3, [pc, #288]	; (80150f8 <etharp_update_arp_entry+0x13c>)
 8014fd6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014fda:	4948      	ldr	r1, [pc, #288]	; (80150fc <etharp_update_arp_entry+0x140>)
 8014fdc:	4848      	ldr	r0, [pc, #288]	; (8015100 <etharp_update_arp_entry+0x144>)
 8014fde:	f003 f8f5 	bl	80181cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d012      	beq.n	801500e <etharp_update_arp_entry+0x52>
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00e      	beq.n	801500e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	68f9      	ldr	r1, [r7, #12]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f001 f8fe 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8014ffc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d105      	bne.n	801500e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801500a:	2be0      	cmp	r3, #224	; 0xe0
 801500c:	d102      	bne.n	8015014 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801500e:	f06f 030f 	mvn.w	r3, #15
 8015012:	e06c      	b.n	80150ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015014:	78fb      	ldrb	r3, [r7, #3]
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	4619      	mov	r1, r3
 801501a:	68b8      	ldr	r0, [r7, #8]
 801501c:	f7ff fe56 	bl	8014ccc <etharp_find_entry>
 8015020:	4603      	mov	r3, r0
 8015022:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015024:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015028:	2b00      	cmp	r3, #0
 801502a:	da02      	bge.n	8015032 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801502c:	8afb      	ldrh	r3, [r7, #22]
 801502e:	b25b      	sxtb	r3, r3
 8015030:	e05d      	b.n	80150ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015032:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015036:	4933      	ldr	r1, [pc, #204]	; (8015104 <etharp_update_arp_entry+0x148>)
 8015038:	4613      	mov	r3, r2
 801503a:	005b      	lsls	r3, r3, #1
 801503c:	4413      	add	r3, r2
 801503e:	00db      	lsls	r3, r3, #3
 8015040:	440b      	add	r3, r1
 8015042:	3314      	adds	r3, #20
 8015044:	2202      	movs	r2, #2
 8015046:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801504c:	492d      	ldr	r1, [pc, #180]	; (8015104 <etharp_update_arp_entry+0x148>)
 801504e:	4613      	mov	r3, r2
 8015050:	005b      	lsls	r3, r3, #1
 8015052:	4413      	add	r3, r2
 8015054:	00db      	lsls	r3, r3, #3
 8015056:	440b      	add	r3, r1
 8015058:	3308      	adds	r3, #8
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801505e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015062:	4613      	mov	r3, r2
 8015064:	005b      	lsls	r3, r3, #1
 8015066:	4413      	add	r3, r2
 8015068:	00db      	lsls	r3, r3, #3
 801506a:	3308      	adds	r3, #8
 801506c:	4a25      	ldr	r2, [pc, #148]	; (8015104 <etharp_update_arp_entry+0x148>)
 801506e:	4413      	add	r3, r2
 8015070:	3304      	adds	r3, #4
 8015072:	2206      	movs	r2, #6
 8015074:	6879      	ldr	r1, [r7, #4]
 8015076:	4618      	mov	r0, r3
 8015078:	f003 f99b 	bl	80183b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801507c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015080:	4920      	ldr	r1, [pc, #128]	; (8015104 <etharp_update_arp_entry+0x148>)
 8015082:	4613      	mov	r3, r2
 8015084:	005b      	lsls	r3, r3, #1
 8015086:	4413      	add	r3, r2
 8015088:	00db      	lsls	r3, r3, #3
 801508a:	440b      	add	r3, r1
 801508c:	3312      	adds	r3, #18
 801508e:	2200      	movs	r2, #0
 8015090:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015092:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015096:	491b      	ldr	r1, [pc, #108]	; (8015104 <etharp_update_arp_entry+0x148>)
 8015098:	4613      	mov	r3, r2
 801509a:	005b      	lsls	r3, r3, #1
 801509c:	4413      	add	r3, r2
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	440b      	add	r3, r1
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d021      	beq.n	80150ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80150a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150ac:	4915      	ldr	r1, [pc, #84]	; (8015104 <etharp_update_arp_entry+0x148>)
 80150ae:	4613      	mov	r3, r2
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	00db      	lsls	r3, r3, #3
 80150b6:	440b      	add	r3, r1
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80150bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150c0:	4910      	ldr	r1, [pc, #64]	; (8015104 <etharp_update_arp_entry+0x148>)
 80150c2:	4613      	mov	r3, r2
 80150c4:	005b      	lsls	r3, r3, #1
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	440b      	add	r3, r1
 80150cc:	2200      	movs	r2, #0
 80150ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80150d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6939      	ldr	r1, [r7, #16]
 80150e0:	68f8      	ldr	r0, [r7, #12]
 80150e2:	f001 ff97 	bl	8017014 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80150e6:	6938      	ldr	r0, [r7, #16]
 80150e8:	f7f8 ffc4 	bl	800e074 <pbuf_free>
  }
  return ERR_OK;
 80150ec:	2300      	movs	r3, #0
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3718      	adds	r7, #24
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	0801b38c 	.word	0x0801b38c
 80150fc:	0801b484 	.word	0x0801b484
 8015100:	0801b404 	.word	0x0801b404
 8015104:	200081a0 	.word	0x200081a0

08015108 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015110:	2300      	movs	r3, #0
 8015112:	60fb      	str	r3, [r7, #12]
 8015114:	e01e      	b.n	8015154 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015116:	4913      	ldr	r1, [pc, #76]	; (8015164 <etharp_cleanup_netif+0x5c>)
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	4613      	mov	r3, r2
 801511c:	005b      	lsls	r3, r3, #1
 801511e:	4413      	add	r3, r2
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	440b      	add	r3, r1
 8015124:	3314      	adds	r3, #20
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801512a:	7afb      	ldrb	r3, [r7, #11]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d00e      	beq.n	801514e <etharp_cleanup_netif+0x46>
 8015130:	490c      	ldr	r1, [pc, #48]	; (8015164 <etharp_cleanup_netif+0x5c>)
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	4613      	mov	r3, r2
 8015136:	005b      	lsls	r3, r3, #1
 8015138:	4413      	add	r3, r2
 801513a:	00db      	lsls	r3, r3, #3
 801513c:	440b      	add	r3, r1
 801513e:	3308      	adds	r3, #8
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	687a      	ldr	r2, [r7, #4]
 8015144:	429a      	cmp	r2, r3
 8015146:	d102      	bne.n	801514e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f7ff fce5 	bl	8014b18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	3301      	adds	r3, #1
 8015152:	60fb      	str	r3, [r7, #12]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2b09      	cmp	r3, #9
 8015158:	dddd      	ble.n	8015116 <etharp_cleanup_netif+0xe>
    }
  }
}
 801515a:	bf00      	nop
 801515c:	bf00      	nop
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	200081a0 	.word	0x200081a0

08015168 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015168:	b5b0      	push	{r4, r5, r7, lr}
 801516a:	b08a      	sub	sp, #40	; 0x28
 801516c:	af04      	add	r7, sp, #16
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d107      	bne.n	8015188 <etharp_input+0x20>
 8015178:	4b3d      	ldr	r3, [pc, #244]	; (8015270 <etharp_input+0x108>)
 801517a:	f240 228a 	movw	r2, #650	; 0x28a
 801517e:	493d      	ldr	r1, [pc, #244]	; (8015274 <etharp_input+0x10c>)
 8015180:	483d      	ldr	r0, [pc, #244]	; (8015278 <etharp_input+0x110>)
 8015182:	f003 f823 	bl	80181cc <iprintf>
 8015186:	e06f      	b.n	8015268 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	b29b      	uxth	r3, r3
 8015194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015198:	d10c      	bne.n	80151b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801519e:	2b06      	cmp	r3, #6
 80151a0:	d108      	bne.n	80151b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80151a6:	2b04      	cmp	r3, #4
 80151a8:	d104      	bne.n	80151b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	885b      	ldrh	r3, [r3, #2]
 80151ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80151b0:	2b08      	cmp	r3, #8
 80151b2:	d003      	beq.n	80151bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f7f8 ff5d 	bl	800e074 <pbuf_free>
    return;
 80151ba:	e055      	b.n	8015268 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	330e      	adds	r3, #14
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	3318      	adds	r3, #24
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	3304      	adds	r3, #4
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d102      	bne.n	80151dc <etharp_input+0x74>
    for_us = 0;
 80151d6:	2300      	movs	r3, #0
 80151d8:	75fb      	strb	r3, [r7, #23]
 80151da:	e009      	b.n	80151f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	3304      	adds	r3, #4
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	bf0c      	ite	eq
 80151e8:	2301      	moveq	r3, #1
 80151ea:	2300      	movne	r3, #0
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	f103 0208 	add.w	r2, r3, #8
 80151f6:	7dfb      	ldrb	r3, [r7, #23]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d001      	beq.n	8015200 <etharp_input+0x98>
 80151fc:	2301      	movs	r3, #1
 80151fe:	e000      	b.n	8015202 <etharp_input+0x9a>
 8015200:	2302      	movs	r3, #2
 8015202:	f107 010c 	add.w	r1, r7, #12
 8015206:	6838      	ldr	r0, [r7, #0]
 8015208:	f7ff fed8 	bl	8014fbc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	88db      	ldrh	r3, [r3, #6]
 8015210:	b29b      	uxth	r3, r3
 8015212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015216:	d003      	beq.n	8015220 <etharp_input+0xb8>
 8015218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801521c:	d01e      	beq.n	801525c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801521e:	e020      	b.n	8015262 <etharp_input+0xfa>
      if (for_us) {
 8015220:	7dfb      	ldrb	r3, [r7, #23]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d01c      	beq.n	8015260 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801523c:	693a      	ldr	r2, [r7, #16]
 801523e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015240:	2102      	movs	r1, #2
 8015242:	9103      	str	r1, [sp, #12]
 8015244:	f107 010c 	add.w	r1, r7, #12
 8015248:	9102      	str	r1, [sp, #8]
 801524a:	9201      	str	r2, [sp, #4]
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	462b      	mov	r3, r5
 8015250:	4622      	mov	r2, r4
 8015252:	4601      	mov	r1, r0
 8015254:	6838      	ldr	r0, [r7, #0]
 8015256:	f000 faeb 	bl	8015830 <etharp_raw>
      break;
 801525a:	e001      	b.n	8015260 <etharp_input+0xf8>
      break;
 801525c:	bf00      	nop
 801525e:	e000      	b.n	8015262 <etharp_input+0xfa>
      break;
 8015260:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f7f8 ff06 	bl	800e074 <pbuf_free>
}
 8015268:	3718      	adds	r7, #24
 801526a:	46bd      	mov	sp, r7
 801526c:	bdb0      	pop	{r4, r5, r7, pc}
 801526e:	bf00      	nop
 8015270:	0801b38c 	.word	0x0801b38c
 8015274:	0801b4dc 	.word	0x0801b4dc
 8015278:	0801b404 	.word	0x0801b404

0801527c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af02      	add	r7, sp, #8
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	4613      	mov	r3, r2
 8015288:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801528a:	79fa      	ldrb	r2, [r7, #7]
 801528c:	4944      	ldr	r1, [pc, #272]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 801528e:	4613      	mov	r3, r2
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	4413      	add	r3, r2
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	440b      	add	r3, r1
 8015298:	3314      	adds	r3, #20
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b01      	cmp	r3, #1
 801529e:	d806      	bhi.n	80152ae <etharp_output_to_arp_index+0x32>
 80152a0:	4b40      	ldr	r3, [pc, #256]	; (80153a4 <etharp_output_to_arp_index+0x128>)
 80152a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80152a6:	4940      	ldr	r1, [pc, #256]	; (80153a8 <etharp_output_to_arp_index+0x12c>)
 80152a8:	4840      	ldr	r0, [pc, #256]	; (80153ac <etharp_output_to_arp_index+0x130>)
 80152aa:	f002 ff8f 	bl	80181cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80152ae:	79fa      	ldrb	r2, [r7, #7]
 80152b0:	493b      	ldr	r1, [pc, #236]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	440b      	add	r3, r1
 80152bc:	3314      	adds	r3, #20
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	2b02      	cmp	r3, #2
 80152c2:	d153      	bne.n	801536c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4936      	ldr	r1, [pc, #216]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	440b      	add	r3, r1
 80152d2:	3312      	adds	r3, #18
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80152da:	d919      	bls.n	8015310 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80152dc:	79fa      	ldrb	r2, [r7, #7]
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	4a2e      	ldr	r2, [pc, #184]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 80152e8:	4413      	add	r3, r2
 80152ea:	3304      	adds	r3, #4
 80152ec:	4619      	mov	r1, r3
 80152ee:	68f8      	ldr	r0, [r7, #12]
 80152f0:	f000 fb4c 	bl	801598c <etharp_request>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d138      	bne.n	801536c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152fa:	79fa      	ldrb	r2, [r7, #7]
 80152fc:	4928      	ldr	r1, [pc, #160]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	440b      	add	r3, r1
 8015308:	3314      	adds	r3, #20
 801530a:	2203      	movs	r2, #3
 801530c:	701a      	strb	r2, [r3, #0]
 801530e:	e02d      	b.n	801536c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015310:	79fa      	ldrb	r2, [r7, #7]
 8015312:	4923      	ldr	r1, [pc, #140]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	00db      	lsls	r3, r3, #3
 801531c:	440b      	add	r3, r1
 801531e:	3312      	adds	r3, #18
 8015320:	881b      	ldrh	r3, [r3, #0]
 8015322:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015326:	d321      	bcc.n	801536c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015328:	79fa      	ldrb	r2, [r7, #7]
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	4a1b      	ldr	r2, [pc, #108]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 8015334:	4413      	add	r3, r2
 8015336:	1d19      	adds	r1, r3, #4
 8015338:	79fa      	ldrb	r2, [r7, #7]
 801533a:	4613      	mov	r3, r2
 801533c:	005b      	lsls	r3, r3, #1
 801533e:	4413      	add	r3, r2
 8015340:	00db      	lsls	r3, r3, #3
 8015342:	3308      	adds	r3, #8
 8015344:	4a16      	ldr	r2, [pc, #88]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 8015346:	4413      	add	r3, r2
 8015348:	3304      	adds	r3, #4
 801534a:	461a      	mov	r2, r3
 801534c:	68f8      	ldr	r0, [r7, #12]
 801534e:	f000 fafb 	bl	8015948 <etharp_request_dst>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d109      	bne.n	801536c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015358:	79fa      	ldrb	r2, [r7, #7]
 801535a:	4911      	ldr	r1, [pc, #68]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3314      	adds	r3, #20
 8015368:	2203      	movs	r2, #3
 801536a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015372:	79fa      	ldrb	r2, [r7, #7]
 8015374:	4613      	mov	r3, r2
 8015376:	005b      	lsls	r3, r3, #1
 8015378:	4413      	add	r3, r2
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	3308      	adds	r3, #8
 801537e:	4a08      	ldr	r2, [pc, #32]	; (80153a0 <etharp_output_to_arp_index+0x124>)
 8015380:	4413      	add	r3, r2
 8015382:	3304      	adds	r3, #4
 8015384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015388:	9200      	str	r2, [sp, #0]
 801538a:	460a      	mov	r2, r1
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f001 fe40 	bl	8017014 <ethernet_output>
 8015394:	4603      	mov	r3, r0
}
 8015396:	4618      	mov	r0, r3
 8015398:	3710      	adds	r7, #16
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	200081a0 	.word	0x200081a0
 80153a4:	0801b38c 	.word	0x0801b38c
 80153a8:	0801b4fc 	.word	0x0801b4fc
 80153ac:	0801b404 	.word	0x0801b404

080153b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b08a      	sub	sp, #40	; 0x28
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d106      	bne.n	80153d4 <etharp_output+0x24>
 80153c6:	4b73      	ldr	r3, [pc, #460]	; (8015594 <etharp_output+0x1e4>)
 80153c8:	f240 321e 	movw	r2, #798	; 0x31e
 80153cc:	4972      	ldr	r1, [pc, #456]	; (8015598 <etharp_output+0x1e8>)
 80153ce:	4873      	ldr	r0, [pc, #460]	; (801559c <etharp_output+0x1ec>)
 80153d0:	f002 fefc 	bl	80181cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d106      	bne.n	80153e8 <etharp_output+0x38>
 80153da:	4b6e      	ldr	r3, [pc, #440]	; (8015594 <etharp_output+0x1e4>)
 80153dc:	f240 321f 	movw	r2, #799	; 0x31f
 80153e0:	496f      	ldr	r1, [pc, #444]	; (80155a0 <etharp_output+0x1f0>)
 80153e2:	486e      	ldr	r0, [pc, #440]	; (801559c <etharp_output+0x1ec>)
 80153e4:	f002 fef2 	bl	80181cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d106      	bne.n	80153fc <etharp_output+0x4c>
 80153ee:	4b69      	ldr	r3, [pc, #420]	; (8015594 <etharp_output+0x1e4>)
 80153f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80153f4:	496b      	ldr	r1, [pc, #428]	; (80155a4 <etharp_output+0x1f4>)
 80153f6:	4869      	ldr	r0, [pc, #420]	; (801559c <etharp_output+0x1ec>)
 80153f8:	f002 fee8 	bl	80181cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	68f9      	ldr	r1, [r7, #12]
 8015402:	4618      	mov	r0, r3
 8015404:	f000 fef8 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	d002      	beq.n	8015414 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801540e:	4b66      	ldr	r3, [pc, #408]	; (80155a8 <etharp_output+0x1f8>)
 8015410:	61fb      	str	r3, [r7, #28]
 8015412:	e0af      	b.n	8015574 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801541c:	2be0      	cmp	r3, #224	; 0xe0
 801541e:	d118      	bne.n	8015452 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015420:	2301      	movs	r3, #1
 8015422:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015424:	2300      	movs	r3, #0
 8015426:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015428:	235e      	movs	r3, #94	; 0x5e
 801542a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	3301      	adds	r3, #1
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015436:	b2db      	uxtb	r3, r3
 8015438:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	3302      	adds	r3, #2
 801543e:	781b      	ldrb	r3, [r3, #0]
 8015440:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	3303      	adds	r3, #3
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801544a:	f107 0310 	add.w	r3, r7, #16
 801544e:	61fb      	str	r3, [r7, #28]
 8015450:	e090      	b.n	8015574 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	3304      	adds	r3, #4
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	405a      	eors	r2, r3
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	3308      	adds	r3, #8
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	4013      	ands	r3, r2
 8015466:	2b00      	cmp	r3, #0
 8015468:	d012      	beq.n	8015490 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015470:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015474:	4293      	cmp	r3, r2
 8015476:	d00b      	beq.n	8015490 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	330c      	adds	r3, #12
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d003      	beq.n	801548a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	330c      	adds	r3, #12
 8015486:	61bb      	str	r3, [r7, #24]
 8015488:	e002      	b.n	8015490 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801548a:	f06f 0303 	mvn.w	r3, #3
 801548e:	e07d      	b.n	801558c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015490:	4b46      	ldr	r3, [pc, #280]	; (80155ac <etharp_output+0x1fc>)
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	4619      	mov	r1, r3
 8015496:	4a46      	ldr	r2, [pc, #280]	; (80155b0 <etharp_output+0x200>)
 8015498:	460b      	mov	r3, r1
 801549a:	005b      	lsls	r3, r3, #1
 801549c:	440b      	add	r3, r1
 801549e:	00db      	lsls	r3, r3, #3
 80154a0:	4413      	add	r3, r2
 80154a2:	3314      	adds	r3, #20
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	2b01      	cmp	r3, #1
 80154a8:	d925      	bls.n	80154f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80154aa:	4b40      	ldr	r3, [pc, #256]	; (80155ac <etharp_output+0x1fc>)
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	4619      	mov	r1, r3
 80154b0:	4a3f      	ldr	r2, [pc, #252]	; (80155b0 <etharp_output+0x200>)
 80154b2:	460b      	mov	r3, r1
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	440b      	add	r3, r1
 80154b8:	00db      	lsls	r3, r3, #3
 80154ba:	4413      	add	r3, r2
 80154bc:	3308      	adds	r3, #8
 80154be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80154c0:	68fa      	ldr	r2, [r7, #12]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d117      	bne.n	80154f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	4b38      	ldr	r3, [pc, #224]	; (80155ac <etharp_output+0x1fc>)
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	4618      	mov	r0, r3
 80154d0:	4937      	ldr	r1, [pc, #220]	; (80155b0 <etharp_output+0x200>)
 80154d2:	4603      	mov	r3, r0
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4403      	add	r3, r0
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3304      	adds	r3, #4
 80154de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d108      	bne.n	80154f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80154e4:	4b31      	ldr	r3, [pc, #196]	; (80155ac <etharp_output+0x1fc>)
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	461a      	mov	r2, r3
 80154ea:	68b9      	ldr	r1, [r7, #8]
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f7ff fec5 	bl	801527c <etharp_output_to_arp_index>
 80154f2:	4603      	mov	r3, r0
 80154f4:	e04a      	b.n	801558c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154f6:	2300      	movs	r3, #0
 80154f8:	75fb      	strb	r3, [r7, #23]
 80154fa:	e031      	b.n	8015560 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80154fc:	7dfa      	ldrb	r2, [r7, #23]
 80154fe:	492c      	ldr	r1, [pc, #176]	; (80155b0 <etharp_output+0x200>)
 8015500:	4613      	mov	r3, r2
 8015502:	005b      	lsls	r3, r3, #1
 8015504:	4413      	add	r3, r2
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	440b      	add	r3, r1
 801550a:	3314      	adds	r3, #20
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	2b01      	cmp	r3, #1
 8015510:	d923      	bls.n	801555a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015512:	7dfa      	ldrb	r2, [r7, #23]
 8015514:	4926      	ldr	r1, [pc, #152]	; (80155b0 <etharp_output+0x200>)
 8015516:	4613      	mov	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4413      	add	r3, r2
 801551c:	00db      	lsls	r3, r3, #3
 801551e:	440b      	add	r3, r1
 8015520:	3308      	adds	r3, #8
 8015522:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	429a      	cmp	r2, r3
 8015528:	d117      	bne.n	801555a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	6819      	ldr	r1, [r3, #0]
 801552e:	7dfa      	ldrb	r2, [r7, #23]
 8015530:	481f      	ldr	r0, [pc, #124]	; (80155b0 <etharp_output+0x200>)
 8015532:	4613      	mov	r3, r2
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	4413      	add	r3, r2
 8015538:	00db      	lsls	r3, r3, #3
 801553a:	4403      	add	r3, r0
 801553c:	3304      	adds	r3, #4
 801553e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015540:	4299      	cmp	r1, r3
 8015542:	d10a      	bne.n	801555a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015544:	4a19      	ldr	r2, [pc, #100]	; (80155ac <etharp_output+0x1fc>)
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801554a:	7dfb      	ldrb	r3, [r7, #23]
 801554c:	461a      	mov	r2, r3
 801554e:	68b9      	ldr	r1, [r7, #8]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ff fe93 	bl	801527c <etharp_output_to_arp_index>
 8015556:	4603      	mov	r3, r0
 8015558:	e018      	b.n	801558c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801555a:	7dfb      	ldrb	r3, [r7, #23]
 801555c:	3301      	adds	r3, #1
 801555e:	75fb      	strb	r3, [r7, #23]
 8015560:	7dfb      	ldrb	r3, [r7, #23]
 8015562:	2b09      	cmp	r3, #9
 8015564:	d9ca      	bls.n	80154fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015566:	68ba      	ldr	r2, [r7, #8]
 8015568:	69b9      	ldr	r1, [r7, #24]
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f000 f822 	bl	80155b4 <etharp_query>
 8015570:	4603      	mov	r3, r0
 8015572:	e00b      	b.n	801558c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801557a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	68b9      	ldr	r1, [r7, #8]
 8015584:	68f8      	ldr	r0, [r7, #12]
 8015586:	f001 fd45 	bl	8017014 <ethernet_output>
 801558a:	4603      	mov	r3, r0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3720      	adds	r7, #32
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801b38c 	.word	0x0801b38c
 8015598:	0801b4dc 	.word	0x0801b4dc
 801559c:	0801b404 	.word	0x0801b404
 80155a0:	0801b52c 	.word	0x0801b52c
 80155a4:	0801b4cc 	.word	0x0801b4cc
 80155a8:	0801bbc8 	.word	0x0801bbc8
 80155ac:	20008290 	.word	0x20008290
 80155b0:	200081a0 	.word	0x200081a0

080155b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b08c      	sub	sp, #48	; 0x30
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	3326      	adds	r3, #38	; 0x26
 80155c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80155c6:	23ff      	movs	r3, #255	; 0xff
 80155c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80155cc:	2300      	movs	r3, #0
 80155ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	68f9      	ldr	r1, [r7, #12]
 80155d6:	4618      	mov	r0, r3
 80155d8:	f000 fe0e 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10c      	bne.n	80155fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80155ea:	2be0      	cmp	r3, #224	; 0xe0
 80155ec:	d006      	beq.n	80155fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d003      	beq.n	80155fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d102      	bne.n	8015602 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80155fc:	f06f 030f 	mvn.w	r3, #15
 8015600:	e101      	b.n	8015806 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015602:	68fa      	ldr	r2, [r7, #12]
 8015604:	2101      	movs	r1, #1
 8015606:	68b8      	ldr	r0, [r7, #8]
 8015608:	f7ff fb60 	bl	8014ccc <etharp_find_entry>
 801560c:	4603      	mov	r3, r0
 801560e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015614:	2b00      	cmp	r3, #0
 8015616:	da02      	bge.n	801561e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015618:	8a7b      	ldrh	r3, [r7, #18]
 801561a:	b25b      	sxtb	r3, r3
 801561c:	e0f3      	b.n	8015806 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801561e:	8a7b      	ldrh	r3, [r7, #18]
 8015620:	2b7e      	cmp	r3, #126	; 0x7e
 8015622:	d906      	bls.n	8015632 <etharp_query+0x7e>
 8015624:	4b7a      	ldr	r3, [pc, #488]	; (8015810 <etharp_query+0x25c>)
 8015626:	f240 32c1 	movw	r2, #961	; 0x3c1
 801562a:	497a      	ldr	r1, [pc, #488]	; (8015814 <etharp_query+0x260>)
 801562c:	487a      	ldr	r0, [pc, #488]	; (8015818 <etharp_query+0x264>)
 801562e:	f002 fdcd 	bl	80181cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015632:	8a7b      	ldrh	r3, [r7, #18]
 8015634:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015636:	7c7a      	ldrb	r2, [r7, #17]
 8015638:	4978      	ldr	r1, [pc, #480]	; (801581c <etharp_query+0x268>)
 801563a:	4613      	mov	r3, r2
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	4413      	add	r3, r2
 8015640:	00db      	lsls	r3, r3, #3
 8015642:	440b      	add	r3, r1
 8015644:	3314      	adds	r3, #20
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d115      	bne.n	8015678 <etharp_query+0xc4>
    is_new_entry = 1;
 801564c:	2301      	movs	r3, #1
 801564e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015650:	7c7a      	ldrb	r2, [r7, #17]
 8015652:	4972      	ldr	r1, [pc, #456]	; (801581c <etharp_query+0x268>)
 8015654:	4613      	mov	r3, r2
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	4413      	add	r3, r2
 801565a:	00db      	lsls	r3, r3, #3
 801565c:	440b      	add	r3, r1
 801565e:	3314      	adds	r3, #20
 8015660:	2201      	movs	r2, #1
 8015662:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015664:	7c7a      	ldrb	r2, [r7, #17]
 8015666:	496d      	ldr	r1, [pc, #436]	; (801581c <etharp_query+0x268>)
 8015668:	4613      	mov	r3, r2
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	4413      	add	r3, r2
 801566e:	00db      	lsls	r3, r3, #3
 8015670:	440b      	add	r3, r1
 8015672:	3308      	adds	r3, #8
 8015674:	68fa      	ldr	r2, [r7, #12]
 8015676:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015678:	7c7a      	ldrb	r2, [r7, #17]
 801567a:	4968      	ldr	r1, [pc, #416]	; (801581c <etharp_query+0x268>)
 801567c:	4613      	mov	r3, r2
 801567e:	005b      	lsls	r3, r3, #1
 8015680:	4413      	add	r3, r2
 8015682:	00db      	lsls	r3, r3, #3
 8015684:	440b      	add	r3, r1
 8015686:	3314      	adds	r3, #20
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b01      	cmp	r3, #1
 801568c:	d011      	beq.n	80156b2 <etharp_query+0xfe>
 801568e:	7c7a      	ldrb	r2, [r7, #17]
 8015690:	4962      	ldr	r1, [pc, #392]	; (801581c <etharp_query+0x268>)
 8015692:	4613      	mov	r3, r2
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4413      	add	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	3314      	adds	r3, #20
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d806      	bhi.n	80156b2 <etharp_query+0xfe>
 80156a4:	4b5a      	ldr	r3, [pc, #360]	; (8015810 <etharp_query+0x25c>)
 80156a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80156aa:	495d      	ldr	r1, [pc, #372]	; (8015820 <etharp_query+0x26c>)
 80156ac:	485a      	ldr	r0, [pc, #360]	; (8015818 <etharp_query+0x264>)
 80156ae:	f002 fd8d 	bl	80181cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80156b2:	6a3b      	ldr	r3, [r7, #32]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d102      	bne.n	80156be <etharp_query+0x10a>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d10c      	bne.n	80156d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80156be:	68b9      	ldr	r1, [r7, #8]
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	f000 f963 	bl	801598c <etharp_request>
 80156c6:	4603      	mov	r3, r0
 80156c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d102      	bne.n	80156d8 <etharp_query+0x124>
      return result;
 80156d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80156d6:	e096      	b.n	8015806 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d106      	bne.n	80156ec <etharp_query+0x138>
 80156de:	4b4c      	ldr	r3, [pc, #304]	; (8015810 <etharp_query+0x25c>)
 80156e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80156e4:	494f      	ldr	r1, [pc, #316]	; (8015824 <etharp_query+0x270>)
 80156e6:	484c      	ldr	r0, [pc, #304]	; (8015818 <etharp_query+0x264>)
 80156e8:	f002 fd70 	bl	80181cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80156ec:	7c7a      	ldrb	r2, [r7, #17]
 80156ee:	494b      	ldr	r1, [pc, #300]	; (801581c <etharp_query+0x268>)
 80156f0:	4613      	mov	r3, r2
 80156f2:	005b      	lsls	r3, r3, #1
 80156f4:	4413      	add	r3, r2
 80156f6:	00db      	lsls	r3, r3, #3
 80156f8:	440b      	add	r3, r1
 80156fa:	3314      	adds	r3, #20
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d917      	bls.n	8015732 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015702:	4a49      	ldr	r2, [pc, #292]	; (8015828 <etharp_query+0x274>)
 8015704:	7c7b      	ldrb	r3, [r7, #17]
 8015706:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015708:	7c7a      	ldrb	r2, [r7, #17]
 801570a:	4613      	mov	r3, r2
 801570c:	005b      	lsls	r3, r3, #1
 801570e:	4413      	add	r3, r2
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	3308      	adds	r3, #8
 8015714:	4a41      	ldr	r2, [pc, #260]	; (801581c <etharp_query+0x268>)
 8015716:	4413      	add	r3, r2
 8015718:	3304      	adds	r3, #4
 801571a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801571e:	9200      	str	r2, [sp, #0]
 8015720:	697a      	ldr	r2, [r7, #20]
 8015722:	6879      	ldr	r1, [r7, #4]
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f001 fc75 	bl	8017014 <ethernet_output>
 801572a:	4603      	mov	r3, r0
 801572c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015730:	e067      	b.n	8015802 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015732:	7c7a      	ldrb	r2, [r7, #17]
 8015734:	4939      	ldr	r1, [pc, #228]	; (801581c <etharp_query+0x268>)
 8015736:	4613      	mov	r3, r2
 8015738:	005b      	lsls	r3, r3, #1
 801573a:	4413      	add	r3, r2
 801573c:	00db      	lsls	r3, r3, #3
 801573e:	440b      	add	r3, r1
 8015740:	3314      	adds	r3, #20
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d15c      	bne.n	8015802 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015750:	e01c      	b.n	801578c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	895a      	ldrh	r2, [r3, #10]
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	891b      	ldrh	r3, [r3, #8]
 801575a:	429a      	cmp	r2, r3
 801575c:	d10a      	bne.n	8015774 <etharp_query+0x1c0>
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d006      	beq.n	8015774 <etharp_query+0x1c0>
 8015766:	4b2a      	ldr	r3, [pc, #168]	; (8015810 <etharp_query+0x25c>)
 8015768:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801576c:	492f      	ldr	r1, [pc, #188]	; (801582c <etharp_query+0x278>)
 801576e:	482a      	ldr	r0, [pc, #168]	; (8015818 <etharp_query+0x264>)
 8015770:	f002 fd2c 	bl	80181cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	7b1b      	ldrb	r3, [r3, #12]
 8015778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801577c:	2b00      	cmp	r3, #0
 801577e:	d002      	beq.n	8015786 <etharp_query+0x1d2>
        copy_needed = 1;
 8015780:	2301      	movs	r3, #1
 8015782:	61bb      	str	r3, [r7, #24]
        break;
 8015784:	e005      	b.n	8015792 <etharp_query+0x1de>
      }
      p = p->next;
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d1df      	bne.n	8015752 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d007      	beq.n	80157a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015798:	687a      	ldr	r2, [r7, #4]
 801579a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801579e:	200e      	movs	r0, #14
 80157a0:	f7f8 fec4 	bl	800e52c <pbuf_clone>
 80157a4:	61f8      	str	r0, [r7, #28]
 80157a6:	e004      	b.n	80157b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80157ac:	69f8      	ldr	r0, [r7, #28]
 80157ae:	f7f8 fd01 	bl	800e1b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80157b2:	69fb      	ldr	r3, [r7, #28]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d021      	beq.n	80157fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80157b8:	7c7a      	ldrb	r2, [r7, #17]
 80157ba:	4918      	ldr	r1, [pc, #96]	; (801581c <etharp_query+0x268>)
 80157bc:	4613      	mov	r3, r2
 80157be:	005b      	lsls	r3, r3, #1
 80157c0:	4413      	add	r3, r2
 80157c2:	00db      	lsls	r3, r3, #3
 80157c4:	440b      	add	r3, r1
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00a      	beq.n	80157e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80157cc:	7c7a      	ldrb	r2, [r7, #17]
 80157ce:	4913      	ldr	r1, [pc, #76]	; (801581c <etharp_query+0x268>)
 80157d0:	4613      	mov	r3, r2
 80157d2:	005b      	lsls	r3, r3, #1
 80157d4:	4413      	add	r3, r2
 80157d6:	00db      	lsls	r3, r3, #3
 80157d8:	440b      	add	r3, r1
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f8 fc49 	bl	800e074 <pbuf_free>
      }
      arp_table[i].q = p;
 80157e2:	7c7a      	ldrb	r2, [r7, #17]
 80157e4:	490d      	ldr	r1, [pc, #52]	; (801581c <etharp_query+0x268>)
 80157e6:	4613      	mov	r3, r2
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	4413      	add	r3, r2
 80157ec:	00db      	lsls	r3, r3, #3
 80157ee:	440b      	add	r3, r1
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157fa:	e002      	b.n	8015802 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80157fc:	23ff      	movs	r3, #255	; 0xff
 80157fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015802:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015806:	4618      	mov	r0, r3
 8015808:	3728      	adds	r7, #40	; 0x28
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	0801b38c 	.word	0x0801b38c
 8015814:	0801b538 	.word	0x0801b538
 8015818:	0801b404 	.word	0x0801b404
 801581c:	200081a0 	.word	0x200081a0
 8015820:	0801b548 	.word	0x0801b548
 8015824:	0801b52c 	.word	0x0801b52c
 8015828:	20008290 	.word	0x20008290
 801582c:	0801b570 	.word	0x0801b570

08015830 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08a      	sub	sp, #40	; 0x28
 8015834:	af02      	add	r7, sp, #8
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d106      	bne.n	8015856 <etharp_raw+0x26>
 8015848:	4b3a      	ldr	r3, [pc, #232]	; (8015934 <etharp_raw+0x104>)
 801584a:	f240 4257 	movw	r2, #1111	; 0x457
 801584e:	493a      	ldr	r1, [pc, #232]	; (8015938 <etharp_raw+0x108>)
 8015850:	483a      	ldr	r0, [pc, #232]	; (801593c <etharp_raw+0x10c>)
 8015852:	f002 fcbb 	bl	80181cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015856:	f44f 7220 	mov.w	r2, #640	; 0x280
 801585a:	211c      	movs	r1, #28
 801585c:	200e      	movs	r0, #14
 801585e:	f7f8 f925 	bl	800daac <pbuf_alloc>
 8015862:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d102      	bne.n	8015870 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801586a:	f04f 33ff 	mov.w	r3, #4294967295
 801586e:	e05d      	b.n	801592c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	895b      	ldrh	r3, [r3, #10]
 8015874:	2b1b      	cmp	r3, #27
 8015876:	d806      	bhi.n	8015886 <etharp_raw+0x56>
 8015878:	4b2e      	ldr	r3, [pc, #184]	; (8015934 <etharp_raw+0x104>)
 801587a:	f240 4262 	movw	r2, #1122	; 0x462
 801587e:	4930      	ldr	r1, [pc, #192]	; (8015940 <etharp_raw+0x110>)
 8015880:	482e      	ldr	r0, [pc, #184]	; (801593c <etharp_raw+0x10c>)
 8015882:	f002 fca3 	bl	80181cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015886:	69bb      	ldr	r3, [r7, #24]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801588c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801588e:	4618      	mov	r0, r3
 8015890:	f7f7 f893 	bl	800c9ba <lwip_htons>
 8015894:	4603      	mov	r3, r0
 8015896:	461a      	mov	r2, r3
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80158a2:	2b06      	cmp	r3, #6
 80158a4:	d006      	beq.n	80158b4 <etharp_raw+0x84>
 80158a6:	4b23      	ldr	r3, [pc, #140]	; (8015934 <etharp_raw+0x104>)
 80158a8:	f240 4269 	movw	r2, #1129	; 0x469
 80158ac:	4925      	ldr	r1, [pc, #148]	; (8015944 <etharp_raw+0x114>)
 80158ae:	4823      	ldr	r0, [pc, #140]	; (801593c <etharp_raw+0x10c>)
 80158b0:	f002 fc8c 	bl	80181cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	3308      	adds	r3, #8
 80158b8:	2206      	movs	r2, #6
 80158ba:	6839      	ldr	r1, [r7, #0]
 80158bc:	4618      	mov	r0, r3
 80158be:	f002 fd78 	bl	80183b2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	3312      	adds	r3, #18
 80158c6:	2206      	movs	r2, #6
 80158c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158ca:	4618      	mov	r0, r3
 80158cc:	f002 fd71 	bl	80183b2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	330e      	adds	r3, #14
 80158d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158d6:	6812      	ldr	r2, [r2, #0]
 80158d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	3318      	adds	r3, #24
 80158de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158e0:	6812      	ldr	r2, [r2, #0]
 80158e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	2200      	movs	r2, #0
 80158e8:	701a      	strb	r2, [r3, #0]
 80158ea:	2200      	movs	r2, #0
 80158ec:	f042 0201 	orr.w	r2, r2, #1
 80158f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	2200      	movs	r2, #0
 80158f6:	f042 0208 	orr.w	r2, r2, #8
 80158fa:	709a      	strb	r2, [r3, #2]
 80158fc:	2200      	movs	r2, #0
 80158fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	2206      	movs	r2, #6
 8015904:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	2204      	movs	r2, #4
 801590a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801590c:	f640 0306 	movw	r3, #2054	; 0x806
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	69b9      	ldr	r1, [r7, #24]
 8015918:	68f8      	ldr	r0, [r7, #12]
 801591a:	f001 fb7b 	bl	8017014 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801591e:	69b8      	ldr	r0, [r7, #24]
 8015920:	f7f8 fba8 	bl	800e074 <pbuf_free>
  p = NULL;
 8015924:	2300      	movs	r3, #0
 8015926:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015928:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3720      	adds	r7, #32
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	0801b38c 	.word	0x0801b38c
 8015938:	0801b4dc 	.word	0x0801b4dc
 801593c:	0801b404 	.word	0x0801b404
 8015940:	0801b58c 	.word	0x0801b58c
 8015944:	0801b5c0 	.word	0x0801b5c0

08015948 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b088      	sub	sp, #32
 801594c:	af04      	add	r7, sp, #16
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015964:	2201      	movs	r2, #1
 8015966:	9203      	str	r2, [sp, #12]
 8015968:	68ba      	ldr	r2, [r7, #8]
 801596a:	9202      	str	r2, [sp, #8]
 801596c:	4a06      	ldr	r2, [pc, #24]	; (8015988 <etharp_request_dst+0x40>)
 801596e:	9201      	str	r2, [sp, #4]
 8015970:	9300      	str	r3, [sp, #0]
 8015972:	4603      	mov	r3, r0
 8015974:	687a      	ldr	r2, [r7, #4]
 8015976:	68f8      	ldr	r0, [r7, #12]
 8015978:	f7ff ff5a 	bl	8015830 <etharp_raw>
 801597c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801597e:	4618      	mov	r0, r3
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	0801bbd0 	.word	0x0801bbd0

0801598c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015996:	4a05      	ldr	r2, [pc, #20]	; (80159ac <etharp_request+0x20>)
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f7ff ffd4 	bl	8015948 <etharp_request_dst>
 80159a0:	4603      	mov	r3, r0
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3708      	adds	r7, #8
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	0801bbc8 	.word	0x0801bbc8

080159b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b08e      	sub	sp, #56	; 0x38
 80159b4:	af04      	add	r7, sp, #16
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80159ba:	4b79      	ldr	r3, [pc, #484]	; (8015ba0 <icmp_input+0x1f0>)
 80159bc:	689b      	ldr	r3, [r3, #8]
 80159be:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80159c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	f003 030f 	and.w	r3, r3, #15
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80159d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159d2:	2b13      	cmp	r3, #19
 80159d4:	f240 80cd 	bls.w	8015b72 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	895b      	ldrh	r3, [r3, #10]
 80159dc:	2b03      	cmp	r3, #3
 80159de:	f240 80ca 	bls.w	8015b76 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80159ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	f000 80b7 	beq.w	8015b64 <icmp_input+0x1b4>
 80159f6:	2b08      	cmp	r3, #8
 80159f8:	f040 80b7 	bne.w	8015b6a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80159fc:	4b69      	ldr	r3, [pc, #420]	; (8015ba4 <icmp_input+0x1f4>)
 80159fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a00:	4b67      	ldr	r3, [pc, #412]	; (8015ba0 <icmp_input+0x1f0>)
 8015a02:	695b      	ldr	r3, [r3, #20]
 8015a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a08:	2be0      	cmp	r3, #224	; 0xe0
 8015a0a:	f000 80bb 	beq.w	8015b84 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015a0e:	4b64      	ldr	r3, [pc, #400]	; (8015ba0 <icmp_input+0x1f0>)
 8015a10:	695b      	ldr	r3, [r3, #20]
 8015a12:	4a63      	ldr	r2, [pc, #396]	; (8015ba0 <icmp_input+0x1f0>)
 8015a14:	6812      	ldr	r2, [r2, #0]
 8015a16:	4611      	mov	r1, r2
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f000 fbed 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	f040 80b1 	bne.w	8015b88 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	891b      	ldrh	r3, [r3, #8]
 8015a2a:	2b07      	cmp	r3, #7
 8015a2c:	f240 80a5 	bls.w	8015b7a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a32:	330e      	adds	r3, #14
 8015a34:	4619      	mov	r1, r3
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7f8 fa86 	bl	800df48 <pbuf_add_header>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d04b      	beq.n	8015ada <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	891a      	ldrh	r2, [r3, #8]
 8015a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a48:	4413      	add	r3, r2
 8015a4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	891b      	ldrh	r3, [r3, #8]
 8015a50:	8b7a      	ldrh	r2, [r7, #26]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	f0c0 809a 	bcc.w	8015b8c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015a58:	8b7b      	ldrh	r3, [r7, #26]
 8015a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a5e:	4619      	mov	r1, r3
 8015a60:	200e      	movs	r0, #14
 8015a62:	f7f8 f823 	bl	800daac <pbuf_alloc>
 8015a66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	f000 8090 	beq.w	8015b90 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	895b      	ldrh	r3, [r3, #10]
 8015a74:	461a      	mov	r2, r3
 8015a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a78:	3308      	adds	r3, #8
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d203      	bcs.n	8015a86 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015a7e:	6978      	ldr	r0, [r7, #20]
 8015a80:	f7f8 faf8 	bl	800e074 <pbuf_free>
          goto icmperr;
 8015a84:	e085      	b.n	8015b92 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f002 fc8f 	bl	80183b2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a96:	4619      	mov	r1, r3
 8015a98:	6978      	ldr	r0, [r7, #20]
 8015a9a:	f7f8 fa65 	bl	800df68 <pbuf_remove_header>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d009      	beq.n	8015ab8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015aa4:	4b40      	ldr	r3, [pc, #256]	; (8015ba8 <icmp_input+0x1f8>)
 8015aa6:	22b6      	movs	r2, #182	; 0xb6
 8015aa8:	4940      	ldr	r1, [pc, #256]	; (8015bac <icmp_input+0x1fc>)
 8015aaa:	4841      	ldr	r0, [pc, #260]	; (8015bb0 <icmp_input+0x200>)
 8015aac:	f002 fb8e 	bl	80181cc <iprintf>
          pbuf_free(r);
 8015ab0:	6978      	ldr	r0, [r7, #20]
 8015ab2:	f7f8 fadf 	bl	800e074 <pbuf_free>
          goto icmperr;
 8015ab6:	e06c      	b.n	8015b92 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015ab8:	6879      	ldr	r1, [r7, #4]
 8015aba:	6978      	ldr	r0, [r7, #20]
 8015abc:	f7f8 fbf2 	bl	800e2a4 <pbuf_copy>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d003      	beq.n	8015ace <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015ac6:	6978      	ldr	r0, [r7, #20]
 8015ac8:	f7f8 fad4 	bl	800e074 <pbuf_free>
          goto icmperr;
 8015acc:	e061      	b.n	8015b92 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f7f8 fad0 	bl	800e074 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	607b      	str	r3, [r7, #4]
 8015ad8:	e00f      	b.n	8015afa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015adc:	330e      	adds	r3, #14
 8015ade:	4619      	mov	r1, r3
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7f8 fa41 	bl	800df68 <pbuf_remove_header>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d006      	beq.n	8015afa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015aec:	4b2e      	ldr	r3, [pc, #184]	; (8015ba8 <icmp_input+0x1f8>)
 8015aee:	22c7      	movs	r2, #199	; 0xc7
 8015af0:	4930      	ldr	r1, [pc, #192]	; (8015bb4 <icmp_input+0x204>)
 8015af2:	482f      	ldr	r0, [pc, #188]	; (8015bb0 <icmp_input+0x200>)
 8015af4:	f002 fb6a 	bl	80181cc <iprintf>
          goto icmperr;
 8015af8:	e04b      	b.n	8015b92 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b02:	4619      	mov	r1, r3
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7f8 fa1f 	bl	800df48 <pbuf_add_header>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d12b      	bne.n	8015b68 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015b1e:	4b20      	ldr	r3, [pc, #128]	; (8015ba0 <icmp_input+0x1f0>)
 8015b20:	691a      	ldr	r2, [r3, #16]
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	709a      	strb	r2, [r3, #2]
 8015b32:	2200      	movs	r2, #0
 8015b34:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	22ff      	movs	r2, #255	; 0xff
 8015b3a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	729a      	strb	r2, [r3, #10]
 8015b42:	2200      	movs	r2, #0
 8015b44:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	9302      	str	r3, [sp, #8]
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	23ff      	movs	r3, #255	; 0xff
 8015b54:	2200      	movs	r2, #0
 8015b56:	69f9      	ldr	r1, [r7, #28]
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f000 fa75 	bl	8016048 <ip4_output_if>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015b62:	e001      	b.n	8015b68 <icmp_input+0x1b8>
      break;
 8015b64:	bf00      	nop
 8015b66:	e000      	b.n	8015b6a <icmp_input+0x1ba>
      break;
 8015b68:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f7f8 fa82 	bl	800e074 <pbuf_free>
  return;
 8015b70:	e013      	b.n	8015b9a <icmp_input+0x1ea>
    goto lenerr;
 8015b72:	bf00      	nop
 8015b74:	e002      	b.n	8015b7c <icmp_input+0x1cc>
    goto lenerr;
 8015b76:	bf00      	nop
 8015b78:	e000      	b.n	8015b7c <icmp_input+0x1cc>
        goto lenerr;
 8015b7a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7f8 fa79 	bl	800e074 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b82:	e00a      	b.n	8015b9a <icmp_input+0x1ea>
        goto icmperr;
 8015b84:	bf00      	nop
 8015b86:	e004      	b.n	8015b92 <icmp_input+0x1e2>
        goto icmperr;
 8015b88:	bf00      	nop
 8015b8a:	e002      	b.n	8015b92 <icmp_input+0x1e2>
          goto icmperr;
 8015b8c:	bf00      	nop
 8015b8e:	e000      	b.n	8015b92 <icmp_input+0x1e2>
          goto icmperr;
 8015b90:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7f8 fa6e 	bl	800e074 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b98:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b9a:	3728      	adds	r7, #40	; 0x28
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	20005010 	.word	0x20005010
 8015ba4:	20005024 	.word	0x20005024
 8015ba8:	0801b604 	.word	0x0801b604
 8015bac:	0801b63c 	.word	0x0801b63c
 8015bb0:	0801b674 	.word	0x0801b674
 8015bb4:	0801b69c 	.word	0x0801b69c

08015bb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015bc4:	78fb      	ldrb	r3, [r7, #3]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	2103      	movs	r1, #3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 f814 	bl	8015bf8 <icmp_send_response>
}
 8015bd0:	bf00      	nop
 8015bd2:	3708      	adds	r7, #8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	460b      	mov	r3, r1
 8015be2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015be4:	78fb      	ldrb	r3, [r7, #3]
 8015be6:	461a      	mov	r2, r3
 8015be8:	210b      	movs	r1, #11
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f000 f804 	bl	8015bf8 <icmp_send_response>
}
 8015bf0:	bf00      	nop
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b08c      	sub	sp, #48	; 0x30
 8015bfc:	af04      	add	r7, sp, #16
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	460b      	mov	r3, r1
 8015c02:	70fb      	strb	r3, [r7, #3]
 8015c04:	4613      	mov	r3, r2
 8015c06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015c08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c0c:	2124      	movs	r1, #36	; 0x24
 8015c0e:	2022      	movs	r0, #34	; 0x22
 8015c10:	f7f7 ff4c 	bl	800daac <pbuf_alloc>
 8015c14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015c16:	69fb      	ldr	r3, [r7, #28]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d04c      	beq.n	8015cb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	895b      	ldrh	r3, [r3, #10]
 8015c20:	2b23      	cmp	r3, #35	; 0x23
 8015c22:	d806      	bhi.n	8015c32 <icmp_send_response+0x3a>
 8015c24:	4b26      	ldr	r3, [pc, #152]	; (8015cc0 <icmp_send_response+0xc8>)
 8015c26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015c2a:	4926      	ldr	r1, [pc, #152]	; (8015cc4 <icmp_send_response+0xcc>)
 8015c2c:	4826      	ldr	r0, [pc, #152]	; (8015cc8 <icmp_send_response+0xd0>)
 8015c2e:	f002 facd 	bl	80181cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	78fa      	ldrb	r2, [r7, #3]
 8015c42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	78ba      	ldrb	r2, [r7, #2]
 8015c48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	711a      	strb	r2, [r3, #4]
 8015c50:	2200      	movs	r2, #0
 8015c52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2200      	movs	r2, #0
 8015c58:	719a      	strb	r2, [r3, #6]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015c5e:	69fb      	ldr	r3, [r7, #28]
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	f103 0008 	add.w	r0, r3, #8
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	221c      	movs	r2, #28
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	f002 fba0 	bl	80183b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015c78:	f107 030c 	add.w	r3, r7, #12
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 f825 	bl	8015ccc <ip4_route>
 8015c82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d011      	beq.n	8015cae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	709a      	strb	r2, [r3, #2]
 8015c90:	2200      	movs	r2, #0
 8015c92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015c94:	f107 020c 	add.w	r2, r7, #12
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	9302      	str	r3, [sp, #8]
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	9301      	str	r3, [sp, #4]
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	9300      	str	r3, [sp, #0]
 8015ca4:	23ff      	movs	r3, #255	; 0xff
 8015ca6:	2100      	movs	r1, #0
 8015ca8:	69f8      	ldr	r0, [r7, #28]
 8015caa:	f000 f9cd 	bl	8016048 <ip4_output_if>
  }
  pbuf_free(q);
 8015cae:	69f8      	ldr	r0, [r7, #28]
 8015cb0:	f7f8 f9e0 	bl	800e074 <pbuf_free>
 8015cb4:	e000      	b.n	8015cb8 <icmp_send_response+0xc0>
    return;
 8015cb6:	bf00      	nop
}
 8015cb8:	3720      	adds	r7, #32
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}
 8015cbe:	bf00      	nop
 8015cc0:	0801b604 	.word	0x0801b604
 8015cc4:	0801b6d0 	.word	0x0801b6d0
 8015cc8:	0801b674 	.word	0x0801b674

08015ccc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b085      	sub	sp, #20
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015cd4:	4b33      	ldr	r3, [pc, #204]	; (8015da4 <ip4_route+0xd8>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	60fb      	str	r3, [r7, #12]
 8015cda:	e036      	b.n	8015d4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ce2:	f003 0301 	and.w	r3, r3, #1
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d02b      	beq.n	8015d44 <ip4_route+0x78>
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cf2:	089b      	lsrs	r3, r3, #2
 8015cf4:	f003 0301 	and.w	r3, r3, #1
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d022      	beq.n	8015d44 <ip4_route+0x78>
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	3304      	adds	r3, #4
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d01d      	beq.n	8015d44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	3304      	adds	r3, #4
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	405a      	eors	r2, r3
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	3308      	adds	r3, #8
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4013      	ands	r3, r2
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d101      	bne.n	8015d24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	e038      	b.n	8015d96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d2a:	f003 0302 	and.w	r3, r3, #2
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d108      	bne.n	8015d44 <ip4_route+0x78>
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	330c      	adds	r3, #12
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d101      	bne.n	8015d44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	e028      	b.n	8015d96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	60fb      	str	r3, [r7, #12]
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d1c5      	bne.n	8015cdc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d50:	4b15      	ldr	r3, [pc, #84]	; (8015da8 <ip4_route+0xdc>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d01a      	beq.n	8015d8e <ip4_route+0xc2>
 8015d58:	4b13      	ldr	r3, [pc, #76]	; (8015da8 <ip4_route+0xdc>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d60:	f003 0301 	and.w	r3, r3, #1
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d012      	beq.n	8015d8e <ip4_route+0xc2>
 8015d68:	4b0f      	ldr	r3, [pc, #60]	; (8015da8 <ip4_route+0xdc>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d70:	f003 0304 	and.w	r3, r3, #4
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d00a      	beq.n	8015d8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d78:	4b0b      	ldr	r3, [pc, #44]	; (8015da8 <ip4_route+0xdc>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d004      	beq.n	8015d8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8015d8c:	d101      	bne.n	8015d92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	e001      	b.n	8015d96 <ip4_route+0xca>
  }

  return netif_default;
 8015d92:	4b05      	ldr	r3, [pc, #20]	; (8015da8 <ip4_route+0xdc>)
 8015d94:	681b      	ldr	r3, [r3, #0]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3714      	adds	r7, #20
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop
 8015da4:	20008134 	.word	0x20008134
 8015da8:	20008138 	.word	0x20008138

08015dac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015dba:	f003 0301 	and.w	r3, r3, #1
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d016      	beq.n	8015df2 <ip4_input_accept+0x46>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	3304      	adds	r3, #4
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d011      	beq.n	8015df2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015dce:	4b0b      	ldr	r3, [pc, #44]	; (8015dfc <ip4_input_accept+0x50>)
 8015dd0:	695a      	ldr	r2, [r3, #20]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d008      	beq.n	8015dee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015ddc:	4b07      	ldr	r3, [pc, #28]	; (8015dfc <ip4_input_accept+0x50>)
 8015dde:	695b      	ldr	r3, [r3, #20]
 8015de0:	6879      	ldr	r1, [r7, #4]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f000 fa08 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8015de8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d001      	beq.n	8015df2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015dee:	2301      	movs	r3, #1
 8015df0:	e000      	b.n	8015df4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015df2:	2300      	movs	r3, #0
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3708      	adds	r7, #8
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}
 8015dfc:	20005010 	.word	0x20005010

08015e00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b086      	sub	sp, #24
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	091b      	lsrs	r3, r3, #4
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2b04      	cmp	r3, #4
 8015e1a:	d004      	beq.n	8015e26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7f8 f929 	bl	800e074 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015e22:	2300      	movs	r3, #0
 8015e24:	e107      	b.n	8016036 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	781b      	ldrb	r3, [r3, #0]
 8015e2a:	f003 030f 	and.w	r3, r3, #15
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	885b      	ldrh	r3, [r3, #2]
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7f6 fdbc 	bl	800c9ba <lwip_htons>
 8015e42:	4603      	mov	r3, r0
 8015e44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	891b      	ldrh	r3, [r3, #8]
 8015e4a:	89ba      	ldrh	r2, [r7, #12]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d204      	bcs.n	8015e5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015e50:	89bb      	ldrh	r3, [r7, #12]
 8015e52:	4619      	mov	r1, r3
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f7f7 ff87 	bl	800dd68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	895b      	ldrh	r3, [r3, #10]
 8015e5e:	89fa      	ldrh	r2, [r7, #14]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d807      	bhi.n	8015e74 <ip4_input+0x74>
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	891b      	ldrh	r3, [r3, #8]
 8015e68:	89ba      	ldrh	r2, [r7, #12]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d802      	bhi.n	8015e74 <ip4_input+0x74>
 8015e6e:	89fb      	ldrh	r3, [r7, #14]
 8015e70:	2b13      	cmp	r3, #19
 8015e72:	d804      	bhi.n	8015e7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7f8 f8fd 	bl	800e074 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	e0db      	b.n	8016036 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015e7e:	697b      	ldr	r3, [r7, #20]
 8015e80:	691b      	ldr	r3, [r3, #16]
 8015e82:	4a6f      	ldr	r2, [pc, #444]	; (8016040 <ip4_input+0x240>)
 8015e84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	4a6d      	ldr	r2, [pc, #436]	; (8016040 <ip4_input+0x240>)
 8015e8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e8e:	4b6c      	ldr	r3, [pc, #432]	; (8016040 <ip4_input+0x240>)
 8015e90:	695b      	ldr	r3, [r3, #20]
 8015e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e96:	2be0      	cmp	r3, #224	; 0xe0
 8015e98:	d112      	bne.n	8015ec0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ea0:	f003 0301 	and.w	r3, r3, #1
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d007      	beq.n	8015eba <ip4_input+0xba>
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	3304      	adds	r3, #4
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d002      	beq.n	8015eba <ip4_input+0xba>
      netif = inp;
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	613b      	str	r3, [r7, #16]
 8015eb8:	e02a      	b.n	8015f10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	613b      	str	r3, [r7, #16]
 8015ebe:	e027      	b.n	8015f10 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015ec0:	6838      	ldr	r0, [r7, #0]
 8015ec2:	f7ff ff73 	bl	8015dac <ip4_input_accept>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d002      	beq.n	8015ed2 <ip4_input+0xd2>
      netif = inp;
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	613b      	str	r3, [r7, #16]
 8015ed0:	e01e      	b.n	8015f10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015ed6:	4b5a      	ldr	r3, [pc, #360]	; (8016040 <ip4_input+0x240>)
 8015ed8:	695b      	ldr	r3, [r3, #20]
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b7f      	cmp	r3, #127	; 0x7f
 8015ede:	d017      	beq.n	8015f10 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015ee0:	4b58      	ldr	r3, [pc, #352]	; (8016044 <ip4_input+0x244>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	613b      	str	r3, [r7, #16]
 8015ee6:	e00e      	b.n	8015f06 <ip4_input+0x106>
          if (netif == inp) {
 8015ee8:	693a      	ldr	r2, [r7, #16]
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d006      	beq.n	8015efe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015ef0:	6938      	ldr	r0, [r7, #16]
 8015ef2:	f7ff ff5b 	bl	8015dac <ip4_input_accept>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d108      	bne.n	8015f0e <ip4_input+0x10e>
 8015efc:	e000      	b.n	8015f00 <ip4_input+0x100>
            continue;
 8015efe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	613b      	str	r3, [r7, #16]
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d1ed      	bne.n	8015ee8 <ip4_input+0xe8>
 8015f0c:	e000      	b.n	8015f10 <ip4_input+0x110>
            break;
 8015f0e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015f10:	4b4b      	ldr	r3, [pc, #300]	; (8016040 <ip4_input+0x240>)
 8015f12:	691b      	ldr	r3, [r3, #16]
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	4618      	mov	r0, r3
 8015f18:	f000 f96e 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d105      	bne.n	8015f2e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015f22:	4b47      	ldr	r3, [pc, #284]	; (8016040 <ip4_input+0x240>)
 8015f24:	691b      	ldr	r3, [r3, #16]
 8015f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015f2a:	2be0      	cmp	r3, #224	; 0xe0
 8015f2c:	d104      	bne.n	8015f38 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7f8 f8a0 	bl	800e074 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015f34:	2300      	movs	r3, #0
 8015f36:	e07e      	b.n	8016036 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d104      	bne.n	8015f48 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f7f8 f898 	bl	800e074 <pbuf_free>
    return ERR_OK;
 8015f44:	2300      	movs	r3, #0
 8015f46:	e076      	b.n	8016036 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	88db      	ldrh	r3, [r3, #6]
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	461a      	mov	r2, r3
 8015f50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015f54:	4013      	ands	r3, r2
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00b      	beq.n	8015f72 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 fc92 	bl	8016884 <ip4_reass>
 8015f60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d101      	bne.n	8015f6c <ip4_input+0x16c>
      return ERR_OK;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	e064      	b.n	8016036 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015f72:	4a33      	ldr	r2, [pc, #204]	; (8016040 <ip4_input+0x240>)
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015f78:	4a31      	ldr	r2, [pc, #196]	; (8016040 <ip4_input+0x240>)
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015f7e:	4a30      	ldr	r2, [pc, #192]	; (8016040 <ip4_input+0x240>)
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	f003 030f 	and.w	r3, r3, #15
 8015f8c:	b2db      	uxtb	r3, r3
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	4b2a      	ldr	r3, [pc, #168]	; (8016040 <ip4_input+0x240>)
 8015f96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015f98:	89fb      	ldrh	r3, [r7, #14]
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f7f7 ffe3 	bl	800df68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	7a5b      	ldrb	r3, [r3, #9]
 8015fa6:	2b11      	cmp	r3, #17
 8015fa8:	d006      	beq.n	8015fb8 <ip4_input+0x1b8>
 8015faa:	2b11      	cmp	r3, #17
 8015fac:	dc13      	bgt.n	8015fd6 <ip4_input+0x1d6>
 8015fae:	2b01      	cmp	r3, #1
 8015fb0:	d00c      	beq.n	8015fcc <ip4_input+0x1cc>
 8015fb2:	2b06      	cmp	r3, #6
 8015fb4:	d005      	beq.n	8015fc2 <ip4_input+0x1c2>
 8015fb6:	e00e      	b.n	8015fd6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f7fe fc68 	bl	8014890 <udp_input>
        break;
 8015fc0:	e026      	b.n	8016010 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015fc2:	6839      	ldr	r1, [r7, #0]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7fa f88b 	bl	80100e0 <tcp_input>
        break;
 8015fca:	e021      	b.n	8016010 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015fcc:	6839      	ldr	r1, [r7, #0]
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f7ff fcee 	bl	80159b0 <icmp_input>
        break;
 8015fd4:	e01c      	b.n	8016010 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015fd6:	4b1a      	ldr	r3, [pc, #104]	; (8016040 <ip4_input+0x240>)
 8015fd8:	695b      	ldr	r3, [r3, #20]
 8015fda:	6939      	ldr	r1, [r7, #16]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f000 f90b 	bl	80161f8 <ip4_addr_isbroadcast_u32>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d10f      	bne.n	8016008 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015fe8:	4b15      	ldr	r3, [pc, #84]	; (8016040 <ip4_input+0x240>)
 8015fea:	695b      	ldr	r3, [r3, #20]
 8015fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ff0:	2be0      	cmp	r3, #224	; 0xe0
 8015ff2:	d009      	beq.n	8016008 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7f8 f827 	bl	800e04e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016000:	2102      	movs	r1, #2
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f7ff fdd8 	bl	8015bb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7f8 f833 	bl	800e074 <pbuf_free>
        break;
 801600e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016010:	4b0b      	ldr	r3, [pc, #44]	; (8016040 <ip4_input+0x240>)
 8016012:	2200      	movs	r2, #0
 8016014:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016016:	4b0a      	ldr	r3, [pc, #40]	; (8016040 <ip4_input+0x240>)
 8016018:	2200      	movs	r2, #0
 801601a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801601c:	4b08      	ldr	r3, [pc, #32]	; (8016040 <ip4_input+0x240>)
 801601e:	2200      	movs	r2, #0
 8016020:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016022:	4b07      	ldr	r3, [pc, #28]	; (8016040 <ip4_input+0x240>)
 8016024:	2200      	movs	r2, #0
 8016026:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016028:	4b05      	ldr	r3, [pc, #20]	; (8016040 <ip4_input+0x240>)
 801602a:	2200      	movs	r2, #0
 801602c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801602e:	4b04      	ldr	r3, [pc, #16]	; (8016040 <ip4_input+0x240>)
 8016030:	2200      	movs	r2, #0
 8016032:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	3718      	adds	r7, #24
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	20005010 	.word	0x20005010
 8016044:	20008134 	.word	0x20008134

08016048 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b08a      	sub	sp, #40	; 0x28
 801604c:	af04      	add	r7, sp, #16
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d009      	beq.n	8016074 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d003      	beq.n	801606e <ip4_output_if+0x26>
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d102      	bne.n	8016074 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016070:	3304      	adds	r3, #4
 8016072:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016074:	78fa      	ldrb	r2, [r7, #3]
 8016076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016078:	9302      	str	r3, [sp, #8]
 801607a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801607e:	9301      	str	r3, [sp, #4]
 8016080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	4613      	mov	r3, r2
 8016088:	687a      	ldr	r2, [r7, #4]
 801608a:	6979      	ldr	r1, [r7, #20]
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f000 f805 	bl	801609c <ip4_output_if_src>
 8016092:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016094:	4618      	mov	r0, r3
 8016096:	3718      	adds	r7, #24
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}

0801609c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b088      	sub	sp, #32
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	60f8      	str	r0, [r7, #12]
 80160a4:	60b9      	str	r1, [r7, #8]
 80160a6:	607a      	str	r2, [r7, #4]
 80160a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	7b9b      	ldrb	r3, [r3, #14]
 80160ae:	2b01      	cmp	r3, #1
 80160b0:	d006      	beq.n	80160c0 <ip4_output_if_src+0x24>
 80160b2:	4b4b      	ldr	r3, [pc, #300]	; (80161e0 <ip4_output_if_src+0x144>)
 80160b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80160b8:	494a      	ldr	r1, [pc, #296]	; (80161e4 <ip4_output_if_src+0x148>)
 80160ba:	484b      	ldr	r0, [pc, #300]	; (80161e8 <ip4_output_if_src+0x14c>)
 80160bc:	f002 f886 	bl	80181cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d060      	beq.n	8016188 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80160c6:	2314      	movs	r3, #20
 80160c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80160ca:	2114      	movs	r1, #20
 80160cc:	68f8      	ldr	r0, [r7, #12]
 80160ce:	f7f7 ff3b 	bl	800df48 <pbuf_add_header>
 80160d2:	4603      	mov	r3, r0
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d002      	beq.n	80160de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80160d8:	f06f 0301 	mvn.w	r3, #1
 80160dc:	e07c      	b.n	80161d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	895b      	ldrh	r3, [r3, #10]
 80160e8:	2b13      	cmp	r3, #19
 80160ea:	d806      	bhi.n	80160fa <ip4_output_if_src+0x5e>
 80160ec:	4b3c      	ldr	r3, [pc, #240]	; (80161e0 <ip4_output_if_src+0x144>)
 80160ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80160f2:	493e      	ldr	r1, [pc, #248]	; (80161ec <ip4_output_if_src+0x150>)
 80160f4:	483c      	ldr	r0, [pc, #240]	; (80161e8 <ip4_output_if_src+0x14c>)
 80160f6:	f002 f869 	bl	80181cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	78fa      	ldrb	r2, [r7, #3]
 80160fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016106:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016110:	8b7b      	ldrh	r3, [r7, #26]
 8016112:	089b      	lsrs	r3, r3, #2
 8016114:	b29b      	uxth	r3, r3
 8016116:	b2db      	uxtb	r3, r3
 8016118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801611c:	b2da      	uxtb	r2, r3
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016128:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	891b      	ldrh	r3, [r3, #8]
 801612e:	4618      	mov	r0, r3
 8016130:	f7f6 fc43 	bl	800c9ba <lwip_htons>
 8016134:	4603      	mov	r3, r0
 8016136:	461a      	mov	r2, r3
 8016138:	69fb      	ldr	r3, [r7, #28]
 801613a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	2200      	movs	r2, #0
 8016140:	719a      	strb	r2, [r3, #6]
 8016142:	2200      	movs	r2, #0
 8016144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016146:	4b2a      	ldr	r3, [pc, #168]	; (80161f0 <ip4_output_if_src+0x154>)
 8016148:	881b      	ldrh	r3, [r3, #0]
 801614a:	4618      	mov	r0, r3
 801614c:	f7f6 fc35 	bl	800c9ba <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	461a      	mov	r2, r3
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016158:	4b25      	ldr	r3, [pc, #148]	; (80161f0 <ip4_output_if_src+0x154>)
 801615a:	881b      	ldrh	r3, [r3, #0]
 801615c:	3301      	adds	r3, #1
 801615e:	b29a      	uxth	r2, r3
 8016160:	4b23      	ldr	r3, [pc, #140]	; (80161f0 <ip4_output_if_src+0x154>)
 8016162:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d104      	bne.n	8016174 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801616a:	4b22      	ldr	r3, [pc, #136]	; (80161f4 <ip4_output_if_src+0x158>)
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	69fb      	ldr	r3, [r7, #28]
 8016170:	60da      	str	r2, [r3, #12]
 8016172:	e003      	b.n	801617c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	69fb      	ldr	r3, [r7, #28]
 801617a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801617c:	69fb      	ldr	r3, [r7, #28]
 801617e:	2200      	movs	r2, #0
 8016180:	729a      	strb	r2, [r3, #10]
 8016182:	2200      	movs	r2, #0
 8016184:	72da      	strb	r2, [r3, #11]
 8016186:	e00f      	b.n	80161a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	895b      	ldrh	r3, [r3, #10]
 801618c:	2b13      	cmp	r3, #19
 801618e:	d802      	bhi.n	8016196 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016190:	f06f 0301 	mvn.w	r3, #1
 8016194:	e020      	b.n	80161d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	685b      	ldr	r3, [r3, #4]
 801619a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	691b      	ldr	r3, [r3, #16]
 80161a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80161a2:	f107 0314 	add.w	r3, r7, #20
 80161a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80161a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d00c      	beq.n	80161ca <ip4_output_if_src+0x12e>
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	891a      	ldrh	r2, [r3, #8]
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d906      	bls.n	80161ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161c0:	68f8      	ldr	r0, [r7, #12]
 80161c2:	f000 fd53 	bl	8016c6c <ip4_frag>
 80161c6:	4603      	mov	r3, r0
 80161c8:	e006      	b.n	80161d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80161ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161cc:	695b      	ldr	r3, [r3, #20]
 80161ce:	687a      	ldr	r2, [r7, #4]
 80161d0:	68f9      	ldr	r1, [r7, #12]
 80161d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161d4:	4798      	blx	r3
 80161d6:	4603      	mov	r3, r0
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3720      	adds	r7, #32
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	0801b6fc 	.word	0x0801b6fc
 80161e4:	0801b730 	.word	0x0801b730
 80161e8:	0801b73c 	.word	0x0801b73c
 80161ec:	0801b764 	.word	0x0801b764
 80161f0:	20008292 	.word	0x20008292
 80161f4:	0801bbc4 	.word	0x0801bbc4

080161f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801620c:	d002      	beq.n	8016214 <ip4_addr_isbroadcast_u32+0x1c>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d101      	bne.n	8016218 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016214:	2301      	movs	r3, #1
 8016216:	e02a      	b.n	801626e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801621e:	f003 0302 	and.w	r3, r3, #2
 8016222:	2b00      	cmp	r3, #0
 8016224:	d101      	bne.n	801622a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016226:	2300      	movs	r3, #0
 8016228:	e021      	b.n	801626e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	3304      	adds	r3, #4
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	687a      	ldr	r2, [r7, #4]
 8016232:	429a      	cmp	r2, r3
 8016234:	d101      	bne.n	801623a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016236:	2300      	movs	r3, #0
 8016238:	e019      	b.n	801626e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801623a:	68fa      	ldr	r2, [r7, #12]
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	3304      	adds	r3, #4
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	405a      	eors	r2, r3
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	3308      	adds	r3, #8
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	4013      	ands	r3, r2
 801624c:	2b00      	cmp	r3, #0
 801624e:	d10d      	bne.n	801626c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	3308      	adds	r3, #8
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	43da      	mvns	r2, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	3308      	adds	r3, #8
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016264:	429a      	cmp	r2, r3
 8016266:	d101      	bne.n	801626c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016268:	2301      	movs	r3, #1
 801626a:	e000      	b.n	801626e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801626c:	2300      	movs	r3, #0
  }
}
 801626e:	4618      	mov	r0, r3
 8016270:	3714      	adds	r7, #20
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr
	...

0801627c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016282:	2300      	movs	r3, #0
 8016284:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016286:	4b12      	ldr	r3, [pc, #72]	; (80162d0 <ip_reass_tmr+0x54>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801628c:	e018      	b.n	80162c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	7fdb      	ldrb	r3, [r3, #31]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d00b      	beq.n	80162ae <ip_reass_tmr+0x32>
      r->timer--;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	7fdb      	ldrb	r3, [r3, #31]
 801629a:	3b01      	subs	r3, #1
 801629c:	b2da      	uxtb	r2, r3
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	60fb      	str	r3, [r7, #12]
 80162ac:	e008      	b.n	80162c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80162b8:	68b9      	ldr	r1, [r7, #8]
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f000 f80a 	bl	80162d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d1e3      	bne.n	801628e <ip_reass_tmr+0x12>
    }
  }
}
 80162c6:	bf00      	nop
 80162c8:	bf00      	nop
 80162ca:	3710      	adds	r7, #16
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}
 80162d0:	20008294 	.word	0x20008294

080162d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b088      	sub	sp, #32
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80162de:	2300      	movs	r3, #0
 80162e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d105      	bne.n	80162f6 <ip_reass_free_complete_datagram+0x22>
 80162ea:	4b45      	ldr	r3, [pc, #276]	; (8016400 <ip_reass_free_complete_datagram+0x12c>)
 80162ec:	22ab      	movs	r2, #171	; 0xab
 80162ee:	4945      	ldr	r1, [pc, #276]	; (8016404 <ip_reass_free_complete_datagram+0x130>)
 80162f0:	4845      	ldr	r0, [pc, #276]	; (8016408 <ip_reass_free_complete_datagram+0x134>)
 80162f2:	f001 ff6b 	bl	80181cc <iprintf>
  if (prev != NULL) {
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d00a      	beq.n	8016312 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	429a      	cmp	r2, r3
 8016304:	d005      	beq.n	8016312 <ip_reass_free_complete_datagram+0x3e>
 8016306:	4b3e      	ldr	r3, [pc, #248]	; (8016400 <ip_reass_free_complete_datagram+0x12c>)
 8016308:	22ad      	movs	r2, #173	; 0xad
 801630a:	4940      	ldr	r1, [pc, #256]	; (801640c <ip_reass_free_complete_datagram+0x138>)
 801630c:	483e      	ldr	r0, [pc, #248]	; (8016408 <ip_reass_free_complete_datagram+0x134>)
 801630e:	f001 ff5d 	bl	80181cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	889b      	ldrh	r3, [r3, #4]
 801631e:	b29b      	uxth	r3, r3
 8016320:	2b00      	cmp	r3, #0
 8016322:	d12a      	bne.n	801637a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	685b      	ldr	r3, [r3, #4]
 8016328:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016332:	69bb      	ldr	r3, [r7, #24]
 8016334:	6858      	ldr	r0, [r3, #4]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	3308      	adds	r3, #8
 801633a:	2214      	movs	r2, #20
 801633c:	4619      	mov	r1, r3
 801633e:	f002 f838 	bl	80183b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016342:	2101      	movs	r1, #1
 8016344:	69b8      	ldr	r0, [r7, #24]
 8016346:	f7ff fc47 	bl	8015bd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801634a:	69b8      	ldr	r0, [r7, #24]
 801634c:	f7f7 ff1a 	bl	800e184 <pbuf_clen>
 8016350:	4603      	mov	r3, r0
 8016352:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016354:	8bfa      	ldrh	r2, [r7, #30]
 8016356:	8a7b      	ldrh	r3, [r7, #18]
 8016358:	4413      	add	r3, r2
 801635a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801635e:	db05      	blt.n	801636c <ip_reass_free_complete_datagram+0x98>
 8016360:	4b27      	ldr	r3, [pc, #156]	; (8016400 <ip_reass_free_complete_datagram+0x12c>)
 8016362:	22bc      	movs	r2, #188	; 0xbc
 8016364:	492a      	ldr	r1, [pc, #168]	; (8016410 <ip_reass_free_complete_datagram+0x13c>)
 8016366:	4828      	ldr	r0, [pc, #160]	; (8016408 <ip_reass_free_complete_datagram+0x134>)
 8016368:	f001 ff30 	bl	80181cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801636c:	8bfa      	ldrh	r2, [r7, #30]
 801636e:	8a7b      	ldrh	r3, [r7, #18]
 8016370:	4413      	add	r3, r2
 8016372:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016374:	69b8      	ldr	r0, [r7, #24]
 8016376:	f7f7 fe7d 	bl	800e074 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016380:	e01f      	b.n	80163c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016382:	69bb      	ldr	r3, [r7, #24]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	f7f7 fef6 	bl	800e184 <pbuf_clen>
 8016398:	4603      	mov	r3, r0
 801639a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801639c:	8bfa      	ldrh	r2, [r7, #30]
 801639e:	8a7b      	ldrh	r3, [r7, #18]
 80163a0:	4413      	add	r3, r2
 80163a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163a6:	db05      	blt.n	80163b4 <ip_reass_free_complete_datagram+0xe0>
 80163a8:	4b15      	ldr	r3, [pc, #84]	; (8016400 <ip_reass_free_complete_datagram+0x12c>)
 80163aa:	22cc      	movs	r2, #204	; 0xcc
 80163ac:	4918      	ldr	r1, [pc, #96]	; (8016410 <ip_reass_free_complete_datagram+0x13c>)
 80163ae:	4816      	ldr	r0, [pc, #88]	; (8016408 <ip_reass_free_complete_datagram+0x134>)
 80163b0:	f001 ff0c 	bl	80181cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80163b4:	8bfa      	ldrh	r2, [r7, #30]
 80163b6:	8a7b      	ldrh	r3, [r7, #18]
 80163b8:	4413      	add	r3, r2
 80163ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	f7f7 fe59 	bl	800e074 <pbuf_free>
  while (p != NULL) {
 80163c2:	69bb      	ldr	r3, [r7, #24]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d1dc      	bne.n	8016382 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80163c8:	6839      	ldr	r1, [r7, #0]
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f000 f8c2 	bl	8016554 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80163d0:	4b10      	ldr	r3, [pc, #64]	; (8016414 <ip_reass_free_complete_datagram+0x140>)
 80163d2:	881b      	ldrh	r3, [r3, #0]
 80163d4:	8bfa      	ldrh	r2, [r7, #30]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d905      	bls.n	80163e6 <ip_reass_free_complete_datagram+0x112>
 80163da:	4b09      	ldr	r3, [pc, #36]	; (8016400 <ip_reass_free_complete_datagram+0x12c>)
 80163dc:	22d2      	movs	r2, #210	; 0xd2
 80163de:	490e      	ldr	r1, [pc, #56]	; (8016418 <ip_reass_free_complete_datagram+0x144>)
 80163e0:	4809      	ldr	r0, [pc, #36]	; (8016408 <ip_reass_free_complete_datagram+0x134>)
 80163e2:	f001 fef3 	bl	80181cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80163e6:	4b0b      	ldr	r3, [pc, #44]	; (8016414 <ip_reass_free_complete_datagram+0x140>)
 80163e8:	881a      	ldrh	r2, [r3, #0]
 80163ea:	8bfb      	ldrh	r3, [r7, #30]
 80163ec:	1ad3      	subs	r3, r2, r3
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	4b08      	ldr	r3, [pc, #32]	; (8016414 <ip_reass_free_complete_datagram+0x140>)
 80163f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80163f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3720      	adds	r7, #32
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	0801b794 	.word	0x0801b794
 8016404:	0801b7d0 	.word	0x0801b7d0
 8016408:	0801b7dc 	.word	0x0801b7dc
 801640c:	0801b804 	.word	0x0801b804
 8016410:	0801b818 	.word	0x0801b818
 8016414:	20008298 	.word	0x20008298
 8016418:	0801b838 	.word	0x0801b838

0801641c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b08a      	sub	sp, #40	; 0x28
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016426:	2300      	movs	r3, #0
 8016428:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801642a:	2300      	movs	r3, #0
 801642c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801642e:	2300      	movs	r3, #0
 8016430:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016432:	2300      	movs	r3, #0
 8016434:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801643a:	4b28      	ldr	r3, [pc, #160]	; (80164dc <ip_reass_remove_oldest_datagram+0xc0>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016440:	e030      	b.n	80164a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016444:	695a      	ldr	r2, [r3, #20]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	429a      	cmp	r2, r3
 801644c:	d10c      	bne.n	8016468 <ip_reass_remove_oldest_datagram+0x4c>
 801644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016450:	699a      	ldr	r2, [r3, #24]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	691b      	ldr	r3, [r3, #16]
 8016456:	429a      	cmp	r2, r3
 8016458:	d106      	bne.n	8016468 <ip_reass_remove_oldest_datagram+0x4c>
 801645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645c:	899a      	ldrh	r2, [r3, #12]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	889b      	ldrh	r3, [r3, #4]
 8016462:	b29b      	uxth	r3, r3
 8016464:	429a      	cmp	r2, r3
 8016466:	d014      	beq.n	8016492 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	3301      	adds	r3, #1
 801646c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801646e:	6a3b      	ldr	r3, [r7, #32]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d104      	bne.n	801647e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016476:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	61bb      	str	r3, [r7, #24]
 801647c:	e009      	b.n	8016492 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	7fda      	ldrb	r2, [r3, #31]
 8016482:	6a3b      	ldr	r3, [r7, #32]
 8016484:	7fdb      	ldrb	r3, [r3, #31]
 8016486:	429a      	cmp	r2, r3
 8016488:	d803      	bhi.n	8016492 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801648e:	69fb      	ldr	r3, [r7, #28]
 8016490:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d001      	beq.n	801649e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80164a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d1cb      	bne.n	8016442 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80164aa:	6a3b      	ldr	r3, [r7, #32]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d008      	beq.n	80164c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80164b0:	69b9      	ldr	r1, [r7, #24]
 80164b2:	6a38      	ldr	r0, [r7, #32]
 80164b4:	f7ff ff0e 	bl	80162d4 <ip_reass_free_complete_datagram>
 80164b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80164ba:	697a      	ldr	r2, [r7, #20]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	4413      	add	r3, r2
 80164c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80164c2:	697a      	ldr	r2, [r7, #20]
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	da02      	bge.n	80164d0 <ip_reass_remove_oldest_datagram+0xb4>
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	dcac      	bgt.n	801642a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80164d0:	697b      	ldr	r3, [r7, #20]
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3728      	adds	r7, #40	; 0x28
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	20008294 	.word	0x20008294

080164e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b084      	sub	sp, #16
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80164ea:	2004      	movs	r0, #4
 80164ec:	f7f6 fedc 	bl	800d2a8 <memp_malloc>
 80164f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d110      	bne.n	801651a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80164f8:	6839      	ldr	r1, [r7, #0]
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f7ff ff8e 	bl	801641c <ip_reass_remove_oldest_datagram>
 8016500:	4602      	mov	r2, r0
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	4293      	cmp	r3, r2
 8016506:	dc03      	bgt.n	8016510 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016508:	2004      	movs	r0, #4
 801650a:	f7f6 fecd 	bl	800d2a8 <memp_malloc>
 801650e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d101      	bne.n	801651a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016516:	2300      	movs	r3, #0
 8016518:	e016      	b.n	8016548 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801651a:	2220      	movs	r2, #32
 801651c:	2100      	movs	r1, #0
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f001 feb9 	bl	8018296 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	220f      	movs	r2, #15
 8016528:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801652a:	4b09      	ldr	r3, [pc, #36]	; (8016550 <ip_reass_enqueue_new_datagram+0x70>)
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016532:	4a07      	ldr	r2, [pc, #28]	; (8016550 <ip_reass_enqueue_new_datagram+0x70>)
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	3308      	adds	r3, #8
 801653c:	2214      	movs	r2, #20
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	4618      	mov	r0, r3
 8016542:	f001 ff36 	bl	80183b2 <memcpy>
  return ipr;
 8016546:	68fb      	ldr	r3, [r7, #12]
}
 8016548:	4618      	mov	r0, r3
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	20008294 	.word	0x20008294

08016554 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b082      	sub	sp, #8
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
 801655c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801655e:	4b10      	ldr	r3, [pc, #64]	; (80165a0 <ip_reass_dequeue_datagram+0x4c>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	429a      	cmp	r2, r3
 8016566:	d104      	bne.n	8016572 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4a0c      	ldr	r2, [pc, #48]	; (80165a0 <ip_reass_dequeue_datagram+0x4c>)
 801656e:	6013      	str	r3, [r2, #0]
 8016570:	e00d      	b.n	801658e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d106      	bne.n	8016586 <ip_reass_dequeue_datagram+0x32>
 8016578:	4b0a      	ldr	r3, [pc, #40]	; (80165a4 <ip_reass_dequeue_datagram+0x50>)
 801657a:	f240 1245 	movw	r2, #325	; 0x145
 801657e:	490a      	ldr	r1, [pc, #40]	; (80165a8 <ip_reass_dequeue_datagram+0x54>)
 8016580:	480a      	ldr	r0, [pc, #40]	; (80165ac <ip_reass_dequeue_datagram+0x58>)
 8016582:	f001 fe23 	bl	80181cc <iprintf>
    prev->next = ipr->next;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801658e:	6879      	ldr	r1, [r7, #4]
 8016590:	2004      	movs	r0, #4
 8016592:	f7f6 fef9 	bl	800d388 <memp_free>
}
 8016596:	bf00      	nop
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	20008294 	.word	0x20008294
 80165a4:	0801b794 	.word	0x0801b794
 80165a8:	0801b85c 	.word	0x0801b85c
 80165ac:	0801b7dc 	.word	0x0801b7dc

080165b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b08c      	sub	sp, #48	; 0x30
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80165bc:	2300      	movs	r3, #0
 80165be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80165c0:	2301      	movs	r3, #1
 80165c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	885b      	ldrh	r3, [r3, #2]
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f6 f9f2 	bl	800c9ba <lwip_htons>
 80165d6:	4603      	mov	r3, r0
 80165d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	f003 030f 	and.w	r3, r3, #15
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	009b      	lsls	r3, r3, #2
 80165e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80165e8:	7e7b      	ldrb	r3, [r7, #25]
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	8b7a      	ldrh	r2, [r7, #26]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d202      	bcs.n	80165f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165f2:	f04f 33ff 	mov.w	r3, #4294967295
 80165f6:	e135      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80165f8:	7e7b      	ldrb	r3, [r7, #25]
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	8b7a      	ldrh	r2, [r7, #26]
 80165fe:	1ad3      	subs	r3, r2, r3
 8016600:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016602:	69fb      	ldr	r3, [r7, #28]
 8016604:	88db      	ldrh	r3, [r3, #6]
 8016606:	b29b      	uxth	r3, r3
 8016608:	4618      	mov	r0, r3
 801660a:	f7f6 f9d6 	bl	800c9ba <lwip_htons>
 801660e:	4603      	mov	r3, r0
 8016610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016614:	b29b      	uxth	r3, r3
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	685b      	ldr	r3, [r3, #4]
 801661e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016622:	2200      	movs	r2, #0
 8016624:	701a      	strb	r2, [r3, #0]
 8016626:	2200      	movs	r2, #0
 8016628:	705a      	strb	r2, [r3, #1]
 801662a:	2200      	movs	r2, #0
 801662c:	709a      	strb	r2, [r3, #2]
 801662e:	2200      	movs	r2, #0
 8016630:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016634:	8afa      	ldrh	r2, [r7, #22]
 8016636:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016638:	8afa      	ldrh	r2, [r7, #22]
 801663a:	8b7b      	ldrh	r3, [r7, #26]
 801663c:	4413      	add	r3, r2
 801663e:	b29a      	uxth	r2, r3
 8016640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016642:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016646:	88db      	ldrh	r3, [r3, #6]
 8016648:	b29b      	uxth	r3, r3
 801664a:	8afa      	ldrh	r2, [r7, #22]
 801664c:	429a      	cmp	r2, r3
 801664e:	d902      	bls.n	8016656 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016650:	f04f 33ff 	mov.w	r3, #4294967295
 8016654:	e106      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	627b      	str	r3, [r7, #36]	; 0x24
 801665c:	e068      	b.n	8016730 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	889b      	ldrh	r3, [r3, #4]
 8016668:	b29a      	uxth	r2, r3
 801666a:	693b      	ldr	r3, [r7, #16]
 801666c:	889b      	ldrh	r3, [r3, #4]
 801666e:	b29b      	uxth	r3, r3
 8016670:	429a      	cmp	r2, r3
 8016672:	d235      	bcs.n	80166e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016678:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	2b00      	cmp	r3, #0
 801667e:	d020      	beq.n	80166c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016682:	889b      	ldrh	r3, [r3, #4]
 8016684:	b29a      	uxth	r2, r3
 8016686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016688:	88db      	ldrh	r3, [r3, #6]
 801668a:	b29b      	uxth	r3, r3
 801668c:	429a      	cmp	r2, r3
 801668e:	d307      	bcc.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016692:	88db      	ldrh	r3, [r3, #6]
 8016694:	b29a      	uxth	r2, r3
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	889b      	ldrh	r3, [r3, #4]
 801669a:	b29b      	uxth	r3, r3
 801669c:	429a      	cmp	r2, r3
 801669e:	d902      	bls.n	80166a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166a0:	f04f 33ff 	mov.w	r3, #4294967295
 80166a4:	e0de      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80166a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a8:	68ba      	ldr	r2, [r7, #8]
 80166aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80166ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ae:	88db      	ldrh	r3, [r3, #6]
 80166b0:	b29a      	uxth	r2, r3
 80166b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b4:	889b      	ldrh	r3, [r3, #4]
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d03d      	beq.n	8016738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80166bc:	2300      	movs	r3, #0
 80166be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80166c0:	e03a      	b.n	8016738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80166c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c4:	88db      	ldrh	r3, [r3, #6]
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	889b      	ldrh	r3, [r3, #4]
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d902      	bls.n	80166d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166d2:	f04f 33ff 	mov.w	r3, #4294967295
 80166d6:	e0c5      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	68ba      	ldr	r2, [r7, #8]
 80166dc:	605a      	str	r2, [r3, #4]
      break;
 80166de:	e02b      	b.n	8016738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80166e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e2:	889b      	ldrh	r3, [r3, #4]
 80166e4:	b29a      	uxth	r2, r3
 80166e6:	693b      	ldr	r3, [r7, #16]
 80166e8:	889b      	ldrh	r3, [r3, #4]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d102      	bne.n	80166f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	e0b6      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80166f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f8:	889b      	ldrh	r3, [r3, #4]
 80166fa:	b29a      	uxth	r2, r3
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	88db      	ldrh	r3, [r3, #6]
 8016700:	b29b      	uxth	r3, r3
 8016702:	429a      	cmp	r2, r3
 8016704:	d202      	bcs.n	801670c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016706:	f04f 33ff 	mov.w	r3, #4294967295
 801670a:	e0ab      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670e:	2b00      	cmp	r3, #0
 8016710:	d009      	beq.n	8016726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016714:	88db      	ldrh	r3, [r3, #6]
 8016716:	b29a      	uxth	r2, r3
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	889b      	ldrh	r3, [r3, #4]
 801671c:	b29b      	uxth	r3, r3
 801671e:	429a      	cmp	r2, r3
 8016720:	d001      	beq.n	8016726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016722:	2300      	movs	r3, #0
 8016724:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016732:	2b00      	cmp	r3, #0
 8016734:	d193      	bne.n	801665e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016736:	e000      	b.n	801673a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016738:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673c:	2b00      	cmp	r3, #0
 801673e:	d12d      	bne.n	801679c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016742:	2b00      	cmp	r3, #0
 8016744:	d01c      	beq.n	8016780 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016748:	88db      	ldrh	r3, [r3, #6]
 801674a:	b29a      	uxth	r2, r3
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674e:	889b      	ldrh	r3, [r3, #4]
 8016750:	b29b      	uxth	r3, r3
 8016752:	429a      	cmp	r2, r3
 8016754:	d906      	bls.n	8016764 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016756:	4b45      	ldr	r3, [pc, #276]	; (801686c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016758:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801675c:	4944      	ldr	r1, [pc, #272]	; (8016870 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801675e:	4845      	ldr	r0, [pc, #276]	; (8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016760:	f001 fd34 	bl	80181cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016766:	68ba      	ldr	r2, [r7, #8]
 8016768:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801676c:	88db      	ldrh	r3, [r3, #6]
 801676e:	b29a      	uxth	r2, r3
 8016770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016772:	889b      	ldrh	r3, [r3, #4]
 8016774:	b29b      	uxth	r3, r3
 8016776:	429a      	cmp	r2, r3
 8016778:	d010      	beq.n	801679c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	623b      	str	r3, [r7, #32]
 801677e:	e00d      	b.n	801679c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	685b      	ldr	r3, [r3, #4]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d006      	beq.n	8016796 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016788:	4b38      	ldr	r3, [pc, #224]	; (801686c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801678a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801678e:	493a      	ldr	r1, [pc, #232]	; (8016878 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016790:	4838      	ldr	r0, [pc, #224]	; (8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016792:	f001 fd1b 	bl	80181cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	68ba      	ldr	r2, [r7, #8]
 801679a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d105      	bne.n	80167ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	7f9b      	ldrb	r3, [r3, #30]
 80167a6:	f003 0301 	and.w	r3, r3, #1
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d059      	beq.n	8016862 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80167ae:	6a3b      	ldr	r3, [r7, #32]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d04f      	beq.n	8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d006      	beq.n	80167ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	889b      	ldrh	r3, [r3, #4]
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d002      	beq.n	80167d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80167ca:	2300      	movs	r3, #0
 80167cc:	623b      	str	r3, [r7, #32]
 80167ce:	e041      	b.n	8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80167d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80167d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80167da:	e012      	b.n	8016802 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80167dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167de:	685b      	ldr	r3, [r3, #4]
 80167e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80167e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e4:	88db      	ldrh	r3, [r3, #6]
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ea:	889b      	ldrh	r3, [r3, #4]
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d002      	beq.n	80167f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80167f2:	2300      	movs	r3, #0
 80167f4:	623b      	str	r3, [r7, #32]
            break;
 80167f6:	e007      	b.n	8016808 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80167f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80167fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016804:	2b00      	cmp	r3, #0
 8016806:	d1e9      	bne.n	80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016808:	6a3b      	ldr	r3, [r7, #32]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d022      	beq.n	8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d106      	bne.n	8016824 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016816:	4b15      	ldr	r3, [pc, #84]	; (801686c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016818:	f240 12df 	movw	r2, #479	; 0x1df
 801681c:	4917      	ldr	r1, [pc, #92]	; (801687c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801681e:	4815      	ldr	r0, [pc, #84]	; (8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016820:	f001 fcd4 	bl	80181cc <iprintf>
          LWIP_ASSERT("sanity check",
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801682c:	429a      	cmp	r2, r3
 801682e:	d106      	bne.n	801683e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016830:	4b0e      	ldr	r3, [pc, #56]	; (801686c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016836:	4911      	ldr	r1, [pc, #68]	; (801687c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016838:	480e      	ldr	r0, [pc, #56]	; (8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801683a:	f001 fcc7 	bl	80181cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d006      	beq.n	8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016846:	4b09      	ldr	r3, [pc, #36]	; (801686c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016848:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801684c:	490c      	ldr	r1, [pc, #48]	; (8016880 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801684e:	4809      	ldr	r0, [pc, #36]	; (8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016850:	f001 fcbc 	bl	80181cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016854:	6a3b      	ldr	r3, [r7, #32]
 8016856:	2b00      	cmp	r3, #0
 8016858:	bf14      	ite	ne
 801685a:	2301      	movne	r3, #1
 801685c:	2300      	moveq	r3, #0
 801685e:	b2db      	uxtb	r3, r3
 8016860:	e000      	b.n	8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3730      	adds	r7, #48	; 0x30
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}
 801686c:	0801b794 	.word	0x0801b794
 8016870:	0801b878 	.word	0x0801b878
 8016874:	0801b7dc 	.word	0x0801b7dc
 8016878:	0801b898 	.word	0x0801b898
 801687c:	0801b8d0 	.word	0x0801b8d0
 8016880:	0801b8e0 	.word	0x0801b8e0

08016884 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b08e      	sub	sp, #56	; 0x38
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	f003 030f 	and.w	r3, r3, #15
 801689a:	b2db      	uxtb	r3, r3
 801689c:	009b      	lsls	r3, r3, #2
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	2b14      	cmp	r3, #20
 80168a2:	f040 8171 	bne.w	8016b88 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80168a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a8:	88db      	ldrh	r3, [r3, #6]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f6 f884 	bl	800c9ba <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168b8:	b29b      	uxth	r3, r3
 80168ba:	00db      	lsls	r3, r3, #3
 80168bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c0:	885b      	ldrh	r3, [r3, #2]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f6 f878 	bl	800c9ba <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80168ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	f003 030f 	and.w	r3, r3, #15
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	009b      	lsls	r3, r3, #2
 80168da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80168de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80168e6:	429a      	cmp	r2, r3
 80168e8:	f0c0 8150 	bcc.w	8016b8c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80168ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168f0:	b29b      	uxth	r3, r3
 80168f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80168f4:	1ad3      	subs	r3, r2, r3
 80168f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f7f7 fc43 	bl	800e184 <pbuf_clen>
 80168fe:	4603      	mov	r3, r0
 8016900:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016902:	4b8c      	ldr	r3, [pc, #560]	; (8016b34 <ip4_reass+0x2b0>)
 8016904:	881b      	ldrh	r3, [r3, #0]
 8016906:	461a      	mov	r2, r3
 8016908:	8c3b      	ldrh	r3, [r7, #32]
 801690a:	4413      	add	r3, r2
 801690c:	2b0a      	cmp	r3, #10
 801690e:	dd10      	ble.n	8016932 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016910:	8c3b      	ldrh	r3, [r7, #32]
 8016912:	4619      	mov	r1, r3
 8016914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016916:	f7ff fd81 	bl	801641c <ip_reass_remove_oldest_datagram>
 801691a:	4603      	mov	r3, r0
 801691c:	2b00      	cmp	r3, #0
 801691e:	f000 8137 	beq.w	8016b90 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016922:	4b84      	ldr	r3, [pc, #528]	; (8016b34 <ip4_reass+0x2b0>)
 8016924:	881b      	ldrh	r3, [r3, #0]
 8016926:	461a      	mov	r2, r3
 8016928:	8c3b      	ldrh	r3, [r7, #32]
 801692a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801692c:	2b0a      	cmp	r3, #10
 801692e:	f300 812f 	bgt.w	8016b90 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016932:	4b81      	ldr	r3, [pc, #516]	; (8016b38 <ip4_reass+0x2b4>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	633b      	str	r3, [r7, #48]	; 0x30
 8016938:	e015      	b.n	8016966 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693c:	695a      	ldr	r2, [r3, #20]
 801693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016940:	68db      	ldr	r3, [r3, #12]
 8016942:	429a      	cmp	r2, r3
 8016944:	d10c      	bne.n	8016960 <ip4_reass+0xdc>
 8016946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016948:	699a      	ldr	r2, [r3, #24]
 801694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801694c:	691b      	ldr	r3, [r3, #16]
 801694e:	429a      	cmp	r2, r3
 8016950:	d106      	bne.n	8016960 <ip4_reass+0xdc>
 8016952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016954:	899a      	ldrh	r2, [r3, #12]
 8016956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016958:	889b      	ldrh	r3, [r3, #4]
 801695a:	b29b      	uxth	r3, r3
 801695c:	429a      	cmp	r2, r3
 801695e:	d006      	beq.n	801696e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	633b      	str	r3, [r7, #48]	; 0x30
 8016966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1e6      	bne.n	801693a <ip4_reass+0xb6>
 801696c:	e000      	b.n	8016970 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801696e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016972:	2b00      	cmp	r3, #0
 8016974:	d109      	bne.n	801698a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016976:	8c3b      	ldrh	r3, [r7, #32]
 8016978:	4619      	mov	r1, r3
 801697a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801697c:	f7ff fdb0 	bl	80164e0 <ip_reass_enqueue_new_datagram>
 8016980:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016984:	2b00      	cmp	r3, #0
 8016986:	d11c      	bne.n	80169c2 <ip4_reass+0x13e>
      goto nullreturn;
 8016988:	e105      	b.n	8016b96 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698c:	88db      	ldrh	r3, [r3, #6]
 801698e:	b29b      	uxth	r3, r3
 8016990:	4618      	mov	r0, r3
 8016992:	f7f6 f812 	bl	800c9ba <lwip_htons>
 8016996:	4603      	mov	r3, r0
 8016998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801699c:	2b00      	cmp	r3, #0
 801699e:	d110      	bne.n	80169c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80169a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a2:	89db      	ldrh	r3, [r3, #14]
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7f6 f808 	bl	800c9ba <lwip_htons>
 80169aa:	4603      	mov	r3, r0
 80169ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d006      	beq.n	80169c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80169b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b6:	3308      	adds	r3, #8
 80169b8:	2214      	movs	r2, #20
 80169ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169bc:	4618      	mov	r0, r3
 80169be:	f001 fcf8 	bl	80183b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80169c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c4:	88db      	ldrh	r3, [r3, #6]
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	f003 0320 	and.w	r3, r3, #32
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	bf0c      	ite	eq
 80169d0:	2301      	moveq	r3, #1
 80169d2:	2300      	movne	r3, #0
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80169d8:	69fb      	ldr	r3, [r7, #28]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d00e      	beq.n	80169fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80169de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80169e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169e2:	4413      	add	r3, r2
 80169e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80169e6:	8b7a      	ldrh	r2, [r7, #26]
 80169e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80169ea:	429a      	cmp	r2, r3
 80169ec:	f0c0 80a0 	bcc.w	8016b30 <ip4_reass+0x2ac>
 80169f0:	8b7b      	ldrh	r3, [r7, #26]
 80169f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80169f6:	4293      	cmp	r3, r2
 80169f8:	f200 809a 	bhi.w	8016b30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80169fc:	69fa      	ldr	r2, [r7, #28]
 80169fe:	6879      	ldr	r1, [r7, #4]
 8016a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a02:	f7ff fdd5 	bl	80165b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016a06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a0e:	f000 809b 	beq.w	8016b48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016a12:	4b48      	ldr	r3, [pc, #288]	; (8016b34 <ip4_reass+0x2b0>)
 8016a14:	881a      	ldrh	r2, [r3, #0]
 8016a16:	8c3b      	ldrh	r3, [r7, #32]
 8016a18:	4413      	add	r3, r2
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	4b45      	ldr	r3, [pc, #276]	; (8016b34 <ip4_reass+0x2b0>)
 8016a1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d00d      	beq.n	8016a42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a2a:	4413      	add	r3, r2
 8016a2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a30:	8a7a      	ldrh	r2, [r7, #18]
 8016a32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a36:	7f9b      	ldrb	r3, [r3, #30]
 8016a38:	f043 0301 	orr.w	r3, r3, #1
 8016a3c:	b2da      	uxtb	r2, r3
 8016a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	d171      	bne.n	8016b2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4a:	8b9b      	ldrh	r3, [r3, #28]
 8016a4c:	3314      	adds	r3, #20
 8016a4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5c:	685b      	ldr	r3, [r3, #4]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a64:	3308      	adds	r3, #8
 8016a66:	2214      	movs	r2, #20
 8016a68:	4619      	mov	r1, r3
 8016a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a6c:	f001 fca1 	bl	80183b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016a70:	8a3b      	ldrh	r3, [r7, #16]
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7f5 ffa1 	bl	800c9ba <lwip_htons>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a82:	2200      	movs	r2, #0
 8016a84:	719a      	strb	r2, [r3, #6]
 8016a86:	2200      	movs	r2, #0
 8016a88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	729a      	strb	r2, [r3, #10]
 8016a90:	2200      	movs	r2, #0
 8016a92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a9a:	e00d      	b.n	8016ab8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016aa2:	2114      	movs	r1, #20
 8016aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016aa6:	f7f7 fa5f 	bl	800df68 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f7f7 fba3 	bl	800e1f8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d1ee      	bne.n	8016a9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016abe:	4b1e      	ldr	r3, [pc, #120]	; (8016b38 <ip4_reass+0x2b4>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d102      	bne.n	8016ace <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016acc:	e010      	b.n	8016af0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ace:	4b1a      	ldr	r3, [pc, #104]	; (8016b38 <ip4_reass+0x2b4>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ad4:	e007      	b.n	8016ae6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d006      	beq.n	8016aee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d1f4      	bne.n	8016ad6 <ip4_reass+0x252>
 8016aec:	e000      	b.n	8016af0 <ip4_reass+0x26c>
          break;
 8016aee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016af4:	f7ff fd2e 	bl	8016554 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f7f7 fb43 	bl	800e184 <pbuf_clen>
 8016afe:	4603      	mov	r3, r0
 8016b00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016b02:	4b0c      	ldr	r3, [pc, #48]	; (8016b34 <ip4_reass+0x2b0>)
 8016b04:	881b      	ldrh	r3, [r3, #0]
 8016b06:	8c3a      	ldrh	r2, [r7, #32]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d906      	bls.n	8016b1a <ip4_reass+0x296>
 8016b0c:	4b0b      	ldr	r3, [pc, #44]	; (8016b3c <ip4_reass+0x2b8>)
 8016b0e:	f240 229b 	movw	r2, #667	; 0x29b
 8016b12:	490b      	ldr	r1, [pc, #44]	; (8016b40 <ip4_reass+0x2bc>)
 8016b14:	480b      	ldr	r0, [pc, #44]	; (8016b44 <ip4_reass+0x2c0>)
 8016b16:	f001 fb59 	bl	80181cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016b1a:	4b06      	ldr	r3, [pc, #24]	; (8016b34 <ip4_reass+0x2b0>)
 8016b1c:	881a      	ldrh	r2, [r3, #0]
 8016b1e:	8c3b      	ldrh	r3, [r7, #32]
 8016b20:	1ad3      	subs	r3, r2, r3
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	4b03      	ldr	r3, [pc, #12]	; (8016b34 <ip4_reass+0x2b0>)
 8016b26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	e038      	b.n	8016b9e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	e036      	b.n	8016b9e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016b30:	bf00      	nop
 8016b32:	e00a      	b.n	8016b4a <ip4_reass+0x2c6>
 8016b34:	20008298 	.word	0x20008298
 8016b38:	20008294 	.word	0x20008294
 8016b3c:	0801b794 	.word	0x0801b794
 8016b40:	0801b904 	.word	0x0801b904
 8016b44:	0801b7dc 	.word	0x0801b7dc
    goto nullreturn_ipr;
 8016b48:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d106      	bne.n	8016b5e <ip4_reass+0x2da>
 8016b50:	4b15      	ldr	r3, [pc, #84]	; (8016ba8 <ip4_reass+0x324>)
 8016b52:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016b56:	4915      	ldr	r1, [pc, #84]	; (8016bac <ip4_reass+0x328>)
 8016b58:	4815      	ldr	r0, [pc, #84]	; (8016bb0 <ip4_reass+0x32c>)
 8016b5a:	f001 fb37 	bl	80181cc <iprintf>
  if (ipr->p == NULL) {
 8016b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d116      	bne.n	8016b94 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016b66:	4b13      	ldr	r3, [pc, #76]	; (8016bb4 <ip4_reass+0x330>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d006      	beq.n	8016b7e <ip4_reass+0x2fa>
 8016b70:	4b0d      	ldr	r3, [pc, #52]	; (8016ba8 <ip4_reass+0x324>)
 8016b72:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016b76:	4910      	ldr	r1, [pc, #64]	; (8016bb8 <ip4_reass+0x334>)
 8016b78:	480d      	ldr	r0, [pc, #52]	; (8016bb0 <ip4_reass+0x32c>)
 8016b7a:	f001 fb27 	bl	80181cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016b7e:	2100      	movs	r1, #0
 8016b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b82:	f7ff fce7 	bl	8016554 <ip_reass_dequeue_datagram>
 8016b86:	e006      	b.n	8016b96 <ip4_reass+0x312>
    goto nullreturn;
 8016b88:	bf00      	nop
 8016b8a:	e004      	b.n	8016b96 <ip4_reass+0x312>
    goto nullreturn;
 8016b8c:	bf00      	nop
 8016b8e:	e002      	b.n	8016b96 <ip4_reass+0x312>
      goto nullreturn;
 8016b90:	bf00      	nop
 8016b92:	e000      	b.n	8016b96 <ip4_reass+0x312>
  }

nullreturn:
 8016b94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7f7 fa6c 	bl	800e074 <pbuf_free>
  return NULL;
 8016b9c:	2300      	movs	r3, #0
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3738      	adds	r7, #56	; 0x38
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	0801b794 	.word	0x0801b794
 8016bac:	0801b920 	.word	0x0801b920
 8016bb0:	0801b7dc 	.word	0x0801b7dc
 8016bb4:	20008294 	.word	0x20008294
 8016bb8:	0801b92c 	.word	0x0801b92c

08016bbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016bc0:	2005      	movs	r0, #5
 8016bc2:	f7f6 fb71 	bl	800d2a8 <memp_malloc>
 8016bc6:	4603      	mov	r3, r0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d106      	bne.n	8016be8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016bda:	4b07      	ldr	r3, [pc, #28]	; (8016bf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016bdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016be0:	4906      	ldr	r1, [pc, #24]	; (8016bfc <ip_frag_free_pbuf_custom_ref+0x30>)
 8016be2:	4807      	ldr	r0, [pc, #28]	; (8016c00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016be4:	f001 faf2 	bl	80181cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016be8:	6879      	ldr	r1, [r7, #4]
 8016bea:	2005      	movs	r0, #5
 8016bec:	f7f6 fbcc 	bl	800d388 <memp_free>
}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	0801b794 	.word	0x0801b794
 8016bfc:	0801b94c 	.word	0x0801b94c
 8016c00:	0801b7dc 	.word	0x0801b7dc

08016c04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b084      	sub	sp, #16
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d106      	bne.n	8016c24 <ipfrag_free_pbuf_custom+0x20>
 8016c16:	4b11      	ldr	r3, [pc, #68]	; (8016c5c <ipfrag_free_pbuf_custom+0x58>)
 8016c18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016c1c:	4910      	ldr	r1, [pc, #64]	; (8016c60 <ipfrag_free_pbuf_custom+0x5c>)
 8016c1e:	4811      	ldr	r0, [pc, #68]	; (8016c64 <ipfrag_free_pbuf_custom+0x60>)
 8016c20:	f001 fad4 	bl	80181cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016c24:	68fa      	ldr	r2, [r7, #12]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d006      	beq.n	8016c3a <ipfrag_free_pbuf_custom+0x36>
 8016c2c:	4b0b      	ldr	r3, [pc, #44]	; (8016c5c <ipfrag_free_pbuf_custom+0x58>)
 8016c2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016c32:	490d      	ldr	r1, [pc, #52]	; (8016c68 <ipfrag_free_pbuf_custom+0x64>)
 8016c34:	480b      	ldr	r0, [pc, #44]	; (8016c64 <ipfrag_free_pbuf_custom+0x60>)
 8016c36:	f001 fac9 	bl	80181cc <iprintf>
  if (pcr->original != NULL) {
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	695b      	ldr	r3, [r3, #20]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d004      	beq.n	8016c4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	695b      	ldr	r3, [r3, #20]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7f7 fa14 	bl	800e074 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	f7ff ffbd 	bl	8016bcc <ip_frag_free_pbuf_custom_ref>
}
 8016c52:	bf00      	nop
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0801b794 	.word	0x0801b794
 8016c60:	0801b958 	.word	0x0801b958
 8016c64:	0801b7dc 	.word	0x0801b7dc
 8016c68:	0801b964 	.word	0x0801b964

08016c6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b094      	sub	sp, #80	; 0x50
 8016c70:	af02      	add	r7, sp, #8
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c82:	3b14      	subs	r3, #20
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	da00      	bge.n	8016c8a <ip4_frag+0x1e>
 8016c88:	3307      	adds	r3, #7
 8016c8a:	10db      	asrs	r3, r3, #3
 8016c8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016c8e:	2314      	movs	r3, #20
 8016c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	f003 030f 	and.w	r3, r3, #15
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	009b      	lsls	r3, r3, #2
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	2b14      	cmp	r3, #20
 8016cac:	d002      	beq.n	8016cb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016cae:	f06f 0305 	mvn.w	r3, #5
 8016cb2:	e110      	b.n	8016ed6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	895b      	ldrh	r3, [r3, #10]
 8016cb8:	2b13      	cmp	r3, #19
 8016cba:	d809      	bhi.n	8016cd0 <ip4_frag+0x64>
 8016cbc:	4b88      	ldr	r3, [pc, #544]	; (8016ee0 <ip4_frag+0x274>)
 8016cbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016cc2:	4988      	ldr	r1, [pc, #544]	; (8016ee4 <ip4_frag+0x278>)
 8016cc4:	4888      	ldr	r0, [pc, #544]	; (8016ee8 <ip4_frag+0x27c>)
 8016cc6:	f001 fa81 	bl	80181cc <iprintf>
 8016cca:	f06f 0305 	mvn.w	r3, #5
 8016cce:	e102      	b.n	8016ed6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd2:	88db      	ldrh	r3, [r3, #6]
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7f5 fe6f 	bl	800c9ba <lwip_htons>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016cea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	891b      	ldrh	r3, [r3, #8]
 8016cf6:	3b14      	subs	r3, #20
 8016cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016cfc:	e0e1      	b.n	8016ec2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	bf28      	it	cs
 8016d0c:	4613      	movcs	r3, r2
 8016d0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016d10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d14:	2114      	movs	r1, #20
 8016d16:	200e      	movs	r0, #14
 8016d18:	f7f6 fec8 	bl	800daac <pbuf_alloc>
 8016d1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f000 80d5 	beq.w	8016ed0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d28:	895b      	ldrh	r3, [r3, #10]
 8016d2a:	2b13      	cmp	r3, #19
 8016d2c:	d806      	bhi.n	8016d3c <ip4_frag+0xd0>
 8016d2e:	4b6c      	ldr	r3, [pc, #432]	; (8016ee0 <ip4_frag+0x274>)
 8016d30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016d34:	496d      	ldr	r1, [pc, #436]	; (8016eec <ip4_frag+0x280>)
 8016d36:	486c      	ldr	r0, [pc, #432]	; (8016ee8 <ip4_frag+0x27c>)
 8016d38:	f001 fa48 	bl	80181cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	2214      	movs	r2, #20
 8016d42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016d44:	4618      	mov	r0, r3
 8016d46:	f001 fb34 	bl	80183b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016d50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016d56:	e064      	b.n	8016e22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	895a      	ldrh	r2, [r3, #10]
 8016d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	895b      	ldrh	r3, [r3, #10]
 8016d66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d906      	bls.n	8016d7a <ip4_frag+0x10e>
 8016d6c:	4b5c      	ldr	r3, [pc, #368]	; (8016ee0 <ip4_frag+0x274>)
 8016d6e:	f240 322d 	movw	r2, #813	; 0x32d
 8016d72:	495f      	ldr	r1, [pc, #380]	; (8016ef0 <ip4_frag+0x284>)
 8016d74:	485c      	ldr	r0, [pc, #368]	; (8016ee8 <ip4_frag+0x27c>)
 8016d76:	f001 fa29 	bl	80181cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016d7a:	8bfa      	ldrh	r2, [r7, #30]
 8016d7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d80:	4293      	cmp	r3, r2
 8016d82:	bf28      	it	cs
 8016d84:	4613      	movcs	r3, r2
 8016d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d105      	bne.n	8016d9e <ip4_frag+0x132>
        poff = 0;
 8016d92:	2300      	movs	r3, #0
 8016d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	60fb      	str	r3, [r7, #12]
        continue;
 8016d9c:	e041      	b.n	8016e22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016d9e:	f7ff ff0d 	bl	8016bbc <ip_frag_alloc_pbuf_custom_ref>
 8016da2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016da4:	69bb      	ldr	r3, [r7, #24]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d103      	bne.n	8016db2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dac:	f7f7 f962 	bl	800e074 <pbuf_free>
        goto memerr;
 8016db0:	e08f      	b.n	8016ed2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016db2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016dba:	4413      	add	r3, r2
 8016dbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016dc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016dc4:	9201      	str	r2, [sp, #4]
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	4603      	mov	r3, r0
 8016dca:	2241      	movs	r2, #65	; 0x41
 8016dcc:	2000      	movs	r0, #0
 8016dce:	f7f6 ff97 	bl	800dd00 <pbuf_alloced_custom>
 8016dd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d106      	bne.n	8016de8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016dda:	69b8      	ldr	r0, [r7, #24]
 8016ddc:	f7ff fef6 	bl	8016bcc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016de2:	f7f7 f947 	bl	800e074 <pbuf_free>
        goto memerr;
 8016de6:	e074      	b.n	8016ed2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7f7 f9e3 	bl	800e1b4 <pbuf_ref>
      pcr->original = p;
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	68fa      	ldr	r2, [r7, #12]
 8016df2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016df4:	69bb      	ldr	r3, [r7, #24]
 8016df6:	4a3f      	ldr	r2, [pc, #252]	; (8016ef4 <ip4_frag+0x288>)
 8016df8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016dfa:	6979      	ldr	r1, [r7, #20]
 8016dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dfe:	f7f7 f9fb 	bl	800e1f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016e02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016e0a:	1ad3      	subs	r3, r2, r3
 8016e0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d004      	beq.n	8016e22 <ip4_frag+0x1b6>
        poff = 0;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d196      	bne.n	8016d58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016e2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016e30:	4413      	add	r3, r2
 8016e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016e38:	f1a3 0213 	sub.w	r2, r3, #19
 8016e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e40:	429a      	cmp	r2, r3
 8016e42:	bfcc      	ite	gt
 8016e44:	2301      	movgt	r3, #1
 8016e46:	2300      	movle	r3, #0
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016e56:	6a3b      	ldr	r3, [r7, #32]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d002      	beq.n	8016e62 <ip4_frag+0x1f6>
 8016e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d003      	beq.n	8016e6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f7f5 fda4 	bl	800c9ba <lwip_htons>
 8016e72:	4603      	mov	r3, r0
 8016e74:	461a      	mov	r2, r3
 8016e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e7c:	3314      	adds	r3, #20
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7f5 fd9a 	bl	800c9ba <lwip_htons>
 8016e86:	4603      	mov	r3, r0
 8016e88:	461a      	mov	r2, r3
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e90:	2200      	movs	r2, #0
 8016e92:	729a      	strb	r2, [r3, #10]
 8016e94:	2200      	movs	r2, #0
 8016e96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	695b      	ldr	r3, [r3, #20]
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ea0:	68b8      	ldr	r0, [r7, #8]
 8016ea2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ea6:	f7f7 f8e5 	bl	800e074 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016eb0:	1ad3      	subs	r3, r2, r3
 8016eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016eb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016eba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ebc:	4413      	add	r3, r2
 8016ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f47f af19 	bne.w	8016cfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	e002      	b.n	8016ed6 <ip4_frag+0x26a>
      goto memerr;
 8016ed0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3748      	adds	r7, #72	; 0x48
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	0801b794 	.word	0x0801b794
 8016ee4:	0801b970 	.word	0x0801b970
 8016ee8:	0801b7dc 	.word	0x0801b7dc
 8016eec:	0801b98c 	.word	0x0801b98c
 8016ef0:	0801b9ac 	.word	0x0801b9ac
 8016ef4:	08016c05 	.word	0x08016c05

08016ef8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b086      	sub	sp, #24
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016f02:	230e      	movs	r3, #14
 8016f04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	895b      	ldrh	r3, [r3, #10]
 8016f0a:	2b0e      	cmp	r3, #14
 8016f0c:	d96e      	bls.n	8016fec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	7bdb      	ldrb	r3, [r3, #15]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d106      	bne.n	8016f24 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016f1c:	3301      	adds	r3, #1
 8016f1e:	b2da      	uxtb	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	7b1a      	ldrb	r2, [r3, #12]
 8016f2e:	7b5b      	ldrb	r3, [r3, #13]
 8016f30:	021b      	lsls	r3, r3, #8
 8016f32:	4313      	orrs	r3, r2
 8016f34:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016f36:	693b      	ldr	r3, [r7, #16]
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	f003 0301 	and.w	r3, r3, #1
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d023      	beq.n	8016f8a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d10f      	bne.n	8016f6a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	785b      	ldrb	r3, [r3, #1]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d11b      	bne.n	8016f8a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016f56:	2b5e      	cmp	r3, #94	; 0x5e
 8016f58:	d117      	bne.n	8016f8a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	7b5b      	ldrb	r3, [r3, #13]
 8016f5e:	f043 0310 	orr.w	r3, r3, #16
 8016f62:	b2da      	uxtb	r2, r3
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	735a      	strb	r2, [r3, #13]
 8016f68:	e00f      	b.n	8016f8a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	2206      	movs	r2, #6
 8016f6e:	4928      	ldr	r1, [pc, #160]	; (8017010 <ethernet_input+0x118>)
 8016f70:	4618      	mov	r0, r3
 8016f72:	f001 f980 	bl	8018276 <memcmp>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d106      	bne.n	8016f8a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	7b5b      	ldrb	r3, [r3, #13]
 8016f80:	f043 0308 	orr.w	r3, r3, #8
 8016f84:	b2da      	uxtb	r2, r3
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016f8a:	89fb      	ldrh	r3, [r7, #14]
 8016f8c:	2b08      	cmp	r3, #8
 8016f8e:	d003      	beq.n	8016f98 <ethernet_input+0xa0>
 8016f90:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016f94:	d014      	beq.n	8016fc0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016f96:	e032      	b.n	8016ffe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f9e:	f003 0308 	and.w	r3, r3, #8
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d024      	beq.n	8016ff0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016fa6:	8afb      	ldrh	r3, [r7, #22]
 8016fa8:	4619      	mov	r1, r3
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f7f6 ffdc 	bl	800df68 <pbuf_remove_header>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d11e      	bne.n	8016ff4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016fb6:	6839      	ldr	r1, [r7, #0]
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f7fe ff21 	bl	8015e00 <ip4_input>
      break;
 8016fbe:	e013      	b.n	8016fe8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fc6:	f003 0308 	and.w	r3, r3, #8
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d014      	beq.n	8016ff8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016fce:	8afb      	ldrh	r3, [r7, #22]
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7f6 ffc8 	bl	800df68 <pbuf_remove_header>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d10e      	bne.n	8016ffc <ethernet_input+0x104>
        etharp_input(p, netif);
 8016fde:	6839      	ldr	r1, [r7, #0]
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7fe f8c1 	bl	8015168 <etharp_input>
      break;
 8016fe6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	e00c      	b.n	8017006 <ethernet_input+0x10e>
    goto free_and_return;
 8016fec:	bf00      	nop
 8016fee:	e006      	b.n	8016ffe <ethernet_input+0x106>
        goto free_and_return;
 8016ff0:	bf00      	nop
 8016ff2:	e004      	b.n	8016ffe <ethernet_input+0x106>
        goto free_and_return;
 8016ff4:	bf00      	nop
 8016ff6:	e002      	b.n	8016ffe <ethernet_input+0x106>
        goto free_and_return;
 8016ff8:	bf00      	nop
 8016ffa:	e000      	b.n	8016ffe <ethernet_input+0x106>
        goto free_and_return;
 8016ffc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f7f7 f838 	bl	800e074 <pbuf_free>
  return ERR_OK;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	3718      	adds	r7, #24
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	0801bbc8 	.word	0x0801bbc8

08017014 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af00      	add	r7, sp, #0
 801701a:	60f8      	str	r0, [r7, #12]
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	607a      	str	r2, [r7, #4]
 8017020:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017022:	8c3b      	ldrh	r3, [r7, #32]
 8017024:	4618      	mov	r0, r3
 8017026:	f7f5 fcc8 	bl	800c9ba <lwip_htons>
 801702a:	4603      	mov	r3, r0
 801702c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801702e:	210e      	movs	r1, #14
 8017030:	68b8      	ldr	r0, [r7, #8]
 8017032:	f7f6 ff89 	bl	800df48 <pbuf_add_header>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d125      	bne.n	8017088 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	8afa      	ldrh	r2, [r7, #22]
 8017046:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	2206      	movs	r2, #6
 801704c:	6839      	ldr	r1, [r7, #0]
 801704e:	4618      	mov	r0, r3
 8017050:	f001 f9af 	bl	80183b2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017054:	693b      	ldr	r3, [r7, #16]
 8017056:	3306      	adds	r3, #6
 8017058:	2206      	movs	r2, #6
 801705a:	6879      	ldr	r1, [r7, #4]
 801705c:	4618      	mov	r0, r3
 801705e:	f001 f9a8 	bl	80183b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017068:	2b06      	cmp	r3, #6
 801706a:	d006      	beq.n	801707a <ethernet_output+0x66>
 801706c:	4b0a      	ldr	r3, [pc, #40]	; (8017098 <ethernet_output+0x84>)
 801706e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017072:	490a      	ldr	r1, [pc, #40]	; (801709c <ethernet_output+0x88>)
 8017074:	480a      	ldr	r0, [pc, #40]	; (80170a0 <ethernet_output+0x8c>)
 8017076:	f001 f8a9 	bl	80181cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	699b      	ldr	r3, [r3, #24]
 801707e:	68b9      	ldr	r1, [r7, #8]
 8017080:	68f8      	ldr	r0, [r7, #12]
 8017082:	4798      	blx	r3
 8017084:	4603      	mov	r3, r0
 8017086:	e002      	b.n	801708e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017088:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801708a:	f06f 0301 	mvn.w	r3, #1
}
 801708e:	4618      	mov	r0, r3
 8017090:	3718      	adds	r7, #24
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}
 8017096:	bf00      	nop
 8017098:	0801b9bc 	.word	0x0801b9bc
 801709c:	0801b9f4 	.word	0x0801b9f4
 80170a0:	0801ba28 	.word	0x0801ba28

080170a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80170a8:	2201      	movs	r2, #1
 80170aa:	4924      	ldr	r1, [pc, #144]	; (801713c <MX_USB_DEVICE_Init+0x98>)
 80170ac:	4824      	ldr	r0, [pc, #144]	; (8017140 <MX_USB_DEVICE_Init+0x9c>)
 80170ae:	f7f4 f930 	bl	800b312 <USBD_Init>
 80170b2:	4603      	mov	r3, r0
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d001      	beq.n	80170bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80170b8:	f7e9 fb9e 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 80170bc:	4921      	ldr	r1, [pc, #132]	; (8017144 <MX_USB_DEVICE_Init+0xa0>)
 80170be:	4820      	ldr	r0, [pc, #128]	; (8017140 <MX_USB_DEVICE_Init+0x9c>)
 80170c0:	f7f4 f957 	bl	800b372 <USBD_RegisterClass>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80170ca:	f7e9 fb95 	bl	80007f8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 80170ce:	491e      	ldr	r1, [pc, #120]	; (8017148 <MX_USB_DEVICE_Init+0xa4>)
 80170d0:	481b      	ldr	r0, [pc, #108]	; (8017140 <MX_USB_DEVICE_Init+0x9c>)
 80170d2:	f7f2 fbd3 	bl	800987c <USBD_MSC_RegisterStorage>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d001      	beq.n	80170e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80170dc:	f7e9 fb8c 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80170e0:	4817      	ldr	r0, [pc, #92]	; (8017140 <MX_USB_DEVICE_Init+0x9c>)
 80170e2:	f7f4 f97c 	bl	800b3de <USBD_Start>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d001      	beq.n	80170f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80170ec:	f7e9 fb84 	bl	80007f8 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80170f0:	2200      	movs	r2, #0
 80170f2:	4916      	ldr	r1, [pc, #88]	; (801714c <MX_USB_DEVICE_Init+0xa8>)
 80170f4:	4816      	ldr	r0, [pc, #88]	; (8017150 <MX_USB_DEVICE_Init+0xac>)
 80170f6:	f7f4 f90c 	bl	800b312 <USBD_Init>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8017100:	f7e9 fb7a 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017104:	4913      	ldr	r1, [pc, #76]	; (8017154 <MX_USB_DEVICE_Init+0xb0>)
 8017106:	4812      	ldr	r0, [pc, #72]	; (8017150 <MX_USB_DEVICE_Init+0xac>)
 8017108:	f7f4 f933 	bl	800b372 <USBD_RegisterClass>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d001      	beq.n	8017116 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 8017112:	f7e9 fb71 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017116:	4910      	ldr	r1, [pc, #64]	; (8017158 <MX_USB_DEVICE_Init+0xb4>)
 8017118:	480d      	ldr	r0, [pc, #52]	; (8017150 <MX_USB_DEVICE_Init+0xac>)
 801711a:	f7f2 f847 	bl	80091ac <USBD_CDC_RegisterInterface>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d001      	beq.n	8017128 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 8017124:	f7e9 fb68 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017128:	4809      	ldr	r0, [pc, #36]	; (8017150 <MX_USB_DEVICE_Init+0xac>)
 801712a:	f7f4 f958 	bl	800b3de <USBD_Start>
 801712e:	4603      	mov	r3, r0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d001      	beq.n	8017138 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 8017134:	f7e9 fb60 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017138:	bf00      	nop
 801713a:	bd80      	pop	{r7, pc}
 801713c:	20000190 	.word	0x20000190
 8017140:	2000829c 	.word	0x2000829c
 8017144:	200000c0 	.word	0x200000c0
 8017148:	200001e0 	.word	0x200001e0
 801714c:	20000160 	.word	0x20000160
 8017150:	20008578 	.word	0x20008578
 8017154:	20000040 	.word	0x20000040
 8017158:	2000014c 	.word	0x2000014c

0801715c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017160:	2200      	movs	r2, #0
 8017162:	4905      	ldr	r1, [pc, #20]	; (8017178 <CDC_Init_FS+0x1c>)
 8017164:	4805      	ldr	r0, [pc, #20]	; (801717c <CDC_Init_FS+0x20>)
 8017166:	f7f2 f83b 	bl	80091e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801716a:	4905      	ldr	r1, [pc, #20]	; (8017180 <CDC_Init_FS+0x24>)
 801716c:	4803      	ldr	r0, [pc, #12]	; (801717c <CDC_Init_FS+0x20>)
 801716e:	f7f2 f859 	bl	8009224 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017172:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017174:	4618      	mov	r0, r3
 8017176:	bd80      	pop	{r7, pc}
 8017178:	20009054 	.word	0x20009054
 801717c:	20008578 	.word	0x20008578
 8017180:	20008854 	.word	0x20008854

08017184 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017184:	b480      	push	{r7}
 8017186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017188:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801718a:	4618      	mov	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr

08017194 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017194:	b480      	push	{r7}
 8017196:	b083      	sub	sp, #12
 8017198:	af00      	add	r7, sp, #0
 801719a:	4603      	mov	r3, r0
 801719c:	6039      	str	r1, [r7, #0]
 801719e:	71fb      	strb	r3, [r7, #7]
 80171a0:	4613      	mov	r3, r2
 80171a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80171a4:	79fb      	ldrb	r3, [r7, #7]
 80171a6:	2b23      	cmp	r3, #35	; 0x23
 80171a8:	d84a      	bhi.n	8017240 <CDC_Control_FS+0xac>
 80171aa:	a201      	add	r2, pc, #4	; (adr r2, 80171b0 <CDC_Control_FS+0x1c>)
 80171ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171b0:	08017241 	.word	0x08017241
 80171b4:	08017241 	.word	0x08017241
 80171b8:	08017241 	.word	0x08017241
 80171bc:	08017241 	.word	0x08017241
 80171c0:	08017241 	.word	0x08017241
 80171c4:	08017241 	.word	0x08017241
 80171c8:	08017241 	.word	0x08017241
 80171cc:	08017241 	.word	0x08017241
 80171d0:	08017241 	.word	0x08017241
 80171d4:	08017241 	.word	0x08017241
 80171d8:	08017241 	.word	0x08017241
 80171dc:	08017241 	.word	0x08017241
 80171e0:	08017241 	.word	0x08017241
 80171e4:	08017241 	.word	0x08017241
 80171e8:	08017241 	.word	0x08017241
 80171ec:	08017241 	.word	0x08017241
 80171f0:	08017241 	.word	0x08017241
 80171f4:	08017241 	.word	0x08017241
 80171f8:	08017241 	.word	0x08017241
 80171fc:	08017241 	.word	0x08017241
 8017200:	08017241 	.word	0x08017241
 8017204:	08017241 	.word	0x08017241
 8017208:	08017241 	.word	0x08017241
 801720c:	08017241 	.word	0x08017241
 8017210:	08017241 	.word	0x08017241
 8017214:	08017241 	.word	0x08017241
 8017218:	08017241 	.word	0x08017241
 801721c:	08017241 	.word	0x08017241
 8017220:	08017241 	.word	0x08017241
 8017224:	08017241 	.word	0x08017241
 8017228:	08017241 	.word	0x08017241
 801722c:	08017241 	.word	0x08017241
 8017230:	08017241 	.word	0x08017241
 8017234:	08017241 	.word	0x08017241
 8017238:	08017241 	.word	0x08017241
 801723c:	08017241 	.word	0x08017241
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017240:	bf00      	nop
  }

  return (USBD_OK);
 8017242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017244:	4618      	mov	r0, r3
 8017246:	370c      	adds	r7, #12
 8017248:	46bd      	mov	sp, r7
 801724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724e:	4770      	bx	lr

08017250 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b082      	sub	sp, #8
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801725a:	6879      	ldr	r1, [r7, #4]
 801725c:	4809      	ldr	r0, [pc, #36]	; (8017284 <CDC_Receive_FS+0x34>)
 801725e:	f7f1 ffe1 	bl	8009224 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017262:	4808      	ldr	r0, [pc, #32]	; (8017284 <CDC_Receive_FS+0x34>)
 8017264:	f7f2 f83c 	bl	80092e0 <USBD_CDC_ReceivePacket>
  //memcpy(UserRxBufferFS, Buf, *Len);
#ifdef COM_PORT_USB
  wr = 1;
 8017268:	4b07      	ldr	r3, [pc, #28]	; (8017288 <CDC_Receive_FS+0x38>)
 801726a:	2201      	movs	r2, #1
 801726c:	701a      	strb	r2, [r3, #0]
  byteNum++;
 801726e:	4b07      	ldr	r3, [pc, #28]	; (801728c <CDC_Receive_FS+0x3c>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	3301      	adds	r3, #1
 8017274:	4a05      	ldr	r2, [pc, #20]	; (801728c <CDC_Receive_FS+0x3c>)
 8017276:	6013      	str	r3, [r2, #0]
#endif
  return (USBD_OK);
 8017278:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801727a:	4618      	mov	r0, r3
 801727c:	3708      	adds	r7, #8
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	20008578 	.word	0x20008578
 8017288:	200003bf 	.word	0x200003bf
 801728c:	200003a0 	.word	0x200003a0

08017290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b084      	sub	sp, #16
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	460b      	mov	r3, r1
 801729a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801729c:	2300      	movs	r3, #0
 801729e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80172a0:	4b0d      	ldr	r3, [pc, #52]	; (80172d8 <CDC_Transmit_FS+0x48>)
 80172a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80172a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80172a8:	68bb      	ldr	r3, [r7, #8]
 80172aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d001      	beq.n	80172b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80172b2:	2301      	movs	r3, #1
 80172b4:	e00b      	b.n	80172ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80172b6:	887b      	ldrh	r3, [r7, #2]
 80172b8:	461a      	mov	r2, r3
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4806      	ldr	r0, [pc, #24]	; (80172d8 <CDC_Transmit_FS+0x48>)
 80172be:	f7f1 ff8f 	bl	80091e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80172c2:	4805      	ldr	r0, [pc, #20]	; (80172d8 <CDC_Transmit_FS+0x48>)
 80172c4:	f7f1 ffcc 	bl	8009260 <USBD_CDC_TransmitPacket>
 80172c8:	4603      	mov	r3, r0
 80172ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80172cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	3710      	adds	r7, #16
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd80      	pop	{r7, pc}
 80172d6:	bf00      	nop
 80172d8:	20008578 	.word	0x20008578

080172dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80172dc:	b480      	push	{r7}
 80172de:	b087      	sub	sp, #28
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	60b9      	str	r1, [r7, #8]
 80172e6:	4613      	mov	r3, r2
 80172e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80172ea:	2300      	movs	r3, #0
 80172ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80172ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	371c      	adds	r7, #28
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr
	...

08017300 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017300:	b480      	push	{r7}
 8017302:	b083      	sub	sp, #12
 8017304:	af00      	add	r7, sp, #0
 8017306:	4603      	mov	r3, r0
 8017308:	6039      	str	r1, [r7, #0]
 801730a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	2212      	movs	r2, #18
 8017310:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017312:	4b03      	ldr	r3, [pc, #12]	; (8017320 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017314:	4618      	mov	r0, r3
 8017316:	370c      	adds	r7, #12
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr
 8017320:	200001ac 	.word	0x200001ac

08017324 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	4603      	mov	r3, r0
 801732c:	6039      	str	r1, [r7, #0]
 801732e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	2204      	movs	r2, #4
 8017334:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017336:	4b03      	ldr	r3, [pc, #12]	; (8017344 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017338:	4618      	mov	r0, r3
 801733a:	370c      	adds	r7, #12
 801733c:	46bd      	mov	sp, r7
 801733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017342:	4770      	bx	lr
 8017344:	200001c0 	.word	0x200001c0

08017348 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	4603      	mov	r3, r0
 8017350:	6039      	str	r1, [r7, #0]
 8017352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017354:	79fb      	ldrb	r3, [r7, #7]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d105      	bne.n	8017366 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801735a:	683a      	ldr	r2, [r7, #0]
 801735c:	4907      	ldr	r1, [pc, #28]	; (801737c <USBD_HS_ProductStrDescriptor+0x34>)
 801735e:	4808      	ldr	r0, [pc, #32]	; (8017380 <USBD_HS_ProductStrDescriptor+0x38>)
 8017360:	f7f5 f9f0 	bl	800c744 <USBD_GetString>
 8017364:	e004      	b.n	8017370 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017366:	683a      	ldr	r2, [r7, #0]
 8017368:	4904      	ldr	r1, [pc, #16]	; (801737c <USBD_HS_ProductStrDescriptor+0x34>)
 801736a:	4805      	ldr	r0, [pc, #20]	; (8017380 <USBD_HS_ProductStrDescriptor+0x38>)
 801736c:	f7f5 f9ea 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017370:	4b02      	ldr	r3, [pc, #8]	; (801737c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017372:	4618      	mov	r0, r3
 8017374:	3708      	adds	r7, #8
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	20009854 	.word	0x20009854
 8017380:	0801ba50 	.word	0x0801ba50

08017384 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	4603      	mov	r3, r0
 801738c:	6039      	str	r1, [r7, #0]
 801738e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017390:	683a      	ldr	r2, [r7, #0]
 8017392:	4904      	ldr	r1, [pc, #16]	; (80173a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017394:	4804      	ldr	r0, [pc, #16]	; (80173a8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017396:	f7f5 f9d5 	bl	800c744 <USBD_GetString>
  return USBD_StrDesc;
 801739a:	4b02      	ldr	r3, [pc, #8]	; (80173a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801739c:	4618      	mov	r0, r3
 801739e:	3708      	adds	r7, #8
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	20009854 	.word	0x20009854
 80173a8:	0801ba64 	.word	0x0801ba64

080173ac <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	4603      	mov	r3, r0
 80173b4:	6039      	str	r1, [r7, #0]
 80173b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	221a      	movs	r2, #26
 80173bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80173be:	f000 f8e7 	bl	8017590 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80173c2:	4b02      	ldr	r3, [pc, #8]	; (80173cc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	200001c4 	.word	0x200001c4

080173d0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	4603      	mov	r3, r0
 80173d8:	6039      	str	r1, [r7, #0]
 80173da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d105      	bne.n	80173ee <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80173e2:	683a      	ldr	r2, [r7, #0]
 80173e4:	4907      	ldr	r1, [pc, #28]	; (8017404 <USBD_HS_ConfigStrDescriptor+0x34>)
 80173e6:	4808      	ldr	r0, [pc, #32]	; (8017408 <USBD_HS_ConfigStrDescriptor+0x38>)
 80173e8:	f7f5 f9ac 	bl	800c744 <USBD_GetString>
 80173ec:	e004      	b.n	80173f8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80173ee:	683a      	ldr	r2, [r7, #0]
 80173f0:	4904      	ldr	r1, [pc, #16]	; (8017404 <USBD_HS_ConfigStrDescriptor+0x34>)
 80173f2:	4805      	ldr	r0, [pc, #20]	; (8017408 <USBD_HS_ConfigStrDescriptor+0x38>)
 80173f4:	f7f5 f9a6 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 80173f8:	4b02      	ldr	r3, [pc, #8]	; (8017404 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	20009854 	.word	0x20009854
 8017408:	0801ba78 	.word	0x0801ba78

0801740c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	4603      	mov	r3, r0
 8017414:	6039      	str	r1, [r7, #0]
 8017416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017418:	79fb      	ldrb	r3, [r7, #7]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d105      	bne.n	801742a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801741e:	683a      	ldr	r2, [r7, #0]
 8017420:	4907      	ldr	r1, [pc, #28]	; (8017440 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017422:	4808      	ldr	r0, [pc, #32]	; (8017444 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017424:	f7f5 f98e 	bl	800c744 <USBD_GetString>
 8017428:	e004      	b.n	8017434 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801742a:	683a      	ldr	r2, [r7, #0]
 801742c:	4904      	ldr	r1, [pc, #16]	; (8017440 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801742e:	4805      	ldr	r0, [pc, #20]	; (8017444 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017430:	f7f5 f988 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017434:	4b02      	ldr	r3, [pc, #8]	; (8017440 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017436:	4618      	mov	r0, r3
 8017438:	3708      	adds	r7, #8
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
 801743e:	bf00      	nop
 8017440:	20009854 	.word	0x20009854
 8017444:	0801ba84 	.word	0x0801ba84

08017448 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017448:	b480      	push	{r7}
 801744a:	b083      	sub	sp, #12
 801744c:	af00      	add	r7, sp, #0
 801744e:	4603      	mov	r3, r0
 8017450:	6039      	str	r1, [r7, #0]
 8017452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	2212      	movs	r2, #18
 8017458:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801745a:	4b03      	ldr	r3, [pc, #12]	; (8017468 <USBD_FS_DeviceDescriptor+0x20>)
}
 801745c:	4618      	mov	r0, r3
 801745e:	370c      	adds	r7, #12
 8017460:	46bd      	mov	sp, r7
 8017462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017466:	4770      	bx	lr
 8017468:	2000017c 	.word	0x2000017c

0801746c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801746c:	b480      	push	{r7}
 801746e:	b083      	sub	sp, #12
 8017470:	af00      	add	r7, sp, #0
 8017472:	4603      	mov	r3, r0
 8017474:	6039      	str	r1, [r7, #0]
 8017476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	2204      	movs	r2, #4
 801747c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801747e:	4b03      	ldr	r3, [pc, #12]	; (801748c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017480:	4618      	mov	r0, r3
 8017482:	370c      	adds	r7, #12
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr
 801748c:	200001c0 	.word	0x200001c0

08017490 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b082      	sub	sp, #8
 8017494:	af00      	add	r7, sp, #0
 8017496:	4603      	mov	r3, r0
 8017498:	6039      	str	r1, [r7, #0]
 801749a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801749c:	79fb      	ldrb	r3, [r7, #7]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d105      	bne.n	80174ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174a2:	683a      	ldr	r2, [r7, #0]
 80174a4:	4907      	ldr	r1, [pc, #28]	; (80174c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80174a6:	4808      	ldr	r0, [pc, #32]	; (80174c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80174a8:	f7f5 f94c 	bl	800c744 <USBD_GetString>
 80174ac:	e004      	b.n	80174b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174ae:	683a      	ldr	r2, [r7, #0]
 80174b0:	4904      	ldr	r1, [pc, #16]	; (80174c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80174b2:	4805      	ldr	r0, [pc, #20]	; (80174c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80174b4:	f7f5 f946 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 80174b8:	4b02      	ldr	r3, [pc, #8]	; (80174c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	20009854 	.word	0x20009854
 80174c8:	0801ba94 	.word	0x0801ba94

080174cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80174d8:	683a      	ldr	r2, [r7, #0]
 80174da:	4904      	ldr	r1, [pc, #16]	; (80174ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80174dc:	4804      	ldr	r0, [pc, #16]	; (80174f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80174de:	f7f5 f931 	bl	800c744 <USBD_GetString>
  return USBD_StrDesc;
 80174e2:	4b02      	ldr	r3, [pc, #8]	; (80174ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3708      	adds	r7, #8
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	20009854 	.word	0x20009854
 80174f0:	0801ba64 	.word	0x0801ba64

080174f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b082      	sub	sp, #8
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	4603      	mov	r3, r0
 80174fc:	6039      	str	r1, [r7, #0]
 80174fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	221a      	movs	r2, #26
 8017504:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017506:	f000 f843 	bl	8017590 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801750a:	4b02      	ldr	r3, [pc, #8]	; (8017514 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801750c:	4618      	mov	r0, r3
 801750e:	3708      	adds	r7, #8
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}
 8017514:	200001c4 	.word	0x200001c4

08017518 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
 801751e:	4603      	mov	r3, r0
 8017520:	6039      	str	r1, [r7, #0]
 8017522:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017524:	79fb      	ldrb	r3, [r7, #7]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d105      	bne.n	8017536 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801752a:	683a      	ldr	r2, [r7, #0]
 801752c:	4907      	ldr	r1, [pc, #28]	; (801754c <USBD_FS_ConfigStrDescriptor+0x34>)
 801752e:	4808      	ldr	r0, [pc, #32]	; (8017550 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017530:	f7f5 f908 	bl	800c744 <USBD_GetString>
 8017534:	e004      	b.n	8017540 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017536:	683a      	ldr	r2, [r7, #0]
 8017538:	4904      	ldr	r1, [pc, #16]	; (801754c <USBD_FS_ConfigStrDescriptor+0x34>)
 801753a:	4805      	ldr	r0, [pc, #20]	; (8017550 <USBD_FS_ConfigStrDescriptor+0x38>)
 801753c:	f7f5 f902 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017540:	4b02      	ldr	r3, [pc, #8]	; (801754c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017542:	4618      	mov	r0, r3
 8017544:	3708      	adds	r7, #8
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
 801754a:	bf00      	nop
 801754c:	20009854 	.word	0x20009854
 8017550:	0801baac 	.word	0x0801baac

08017554 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	4603      	mov	r3, r0
 801755c:	6039      	str	r1, [r7, #0]
 801755e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017560:	79fb      	ldrb	r3, [r7, #7]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d105      	bne.n	8017572 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017566:	683a      	ldr	r2, [r7, #0]
 8017568:	4907      	ldr	r1, [pc, #28]	; (8017588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801756a:	4808      	ldr	r0, [pc, #32]	; (801758c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801756c:	f7f5 f8ea 	bl	800c744 <USBD_GetString>
 8017570:	e004      	b.n	801757c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017572:	683a      	ldr	r2, [r7, #0]
 8017574:	4904      	ldr	r1, [pc, #16]	; (8017588 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017576:	4805      	ldr	r0, [pc, #20]	; (801758c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017578:	f7f5 f8e4 	bl	800c744 <USBD_GetString>
  }
  return USBD_StrDesc;
 801757c:	4b02      	ldr	r3, [pc, #8]	; (8017588 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801757e:	4618      	mov	r0, r3
 8017580:	3708      	adds	r7, #8
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}
 8017586:	bf00      	nop
 8017588:	20009854 	.word	0x20009854
 801758c:	0801bab8 	.word	0x0801bab8

08017590 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017596:	4b0f      	ldr	r3, [pc, #60]	; (80175d4 <Get_SerialNum+0x44>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801759c:	4b0e      	ldr	r3, [pc, #56]	; (80175d8 <Get_SerialNum+0x48>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80175a2:	4b0e      	ldr	r3, [pc, #56]	; (80175dc <Get_SerialNum+0x4c>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80175a8:	68fa      	ldr	r2, [r7, #12]
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	4413      	add	r3, r2
 80175ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d009      	beq.n	80175ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80175b6:	2208      	movs	r2, #8
 80175b8:	4909      	ldr	r1, [pc, #36]	; (80175e0 <Get_SerialNum+0x50>)
 80175ba:	68f8      	ldr	r0, [r7, #12]
 80175bc:	f000 f814 	bl	80175e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80175c0:	2204      	movs	r2, #4
 80175c2:	4908      	ldr	r1, [pc, #32]	; (80175e4 <Get_SerialNum+0x54>)
 80175c4:	68b8      	ldr	r0, [r7, #8]
 80175c6:	f000 f80f 	bl	80175e8 <IntToUnicode>
  }
}
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	1fff7a10 	.word	0x1fff7a10
 80175d8:	1fff7a14 	.word	0x1fff7a14
 80175dc:	1fff7a18 	.word	0x1fff7a18
 80175e0:	200001c6 	.word	0x200001c6
 80175e4:	200001d6 	.word	0x200001d6

080175e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80175e8:	b480      	push	{r7}
 80175ea:	b087      	sub	sp, #28
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	60f8      	str	r0, [r7, #12]
 80175f0:	60b9      	str	r1, [r7, #8]
 80175f2:	4613      	mov	r3, r2
 80175f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80175f6:	2300      	movs	r3, #0
 80175f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80175fa:	2300      	movs	r3, #0
 80175fc:	75fb      	strb	r3, [r7, #23]
 80175fe:	e027      	b.n	8017650 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	0f1b      	lsrs	r3, r3, #28
 8017604:	2b09      	cmp	r3, #9
 8017606:	d80b      	bhi.n	8017620 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	0f1b      	lsrs	r3, r3, #28
 801760c:	b2da      	uxtb	r2, r3
 801760e:	7dfb      	ldrb	r3, [r7, #23]
 8017610:	005b      	lsls	r3, r3, #1
 8017612:	4619      	mov	r1, r3
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	440b      	add	r3, r1
 8017618:	3230      	adds	r2, #48	; 0x30
 801761a:	b2d2      	uxtb	r2, r2
 801761c:	701a      	strb	r2, [r3, #0]
 801761e:	e00a      	b.n	8017636 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	0f1b      	lsrs	r3, r3, #28
 8017624:	b2da      	uxtb	r2, r3
 8017626:	7dfb      	ldrb	r3, [r7, #23]
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	4619      	mov	r1, r3
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	440b      	add	r3, r1
 8017630:	3237      	adds	r2, #55	; 0x37
 8017632:	b2d2      	uxtb	r2, r2
 8017634:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	011b      	lsls	r3, r3, #4
 801763a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801763c:	7dfb      	ldrb	r3, [r7, #23]
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	3301      	adds	r3, #1
 8017642:	68ba      	ldr	r2, [r7, #8]
 8017644:	4413      	add	r3, r2
 8017646:	2200      	movs	r2, #0
 8017648:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801764a:	7dfb      	ldrb	r3, [r7, #23]
 801764c:	3301      	adds	r3, #1
 801764e:	75fb      	strb	r3, [r7, #23]
 8017650:	7dfa      	ldrb	r2, [r7, #23]
 8017652:	79fb      	ldrb	r3, [r7, #7]
 8017654:	429a      	cmp	r2, r3
 8017656:	d3d3      	bcc.n	8017600 <IntToUnicode+0x18>
  }
}
 8017658:	bf00      	nop
 801765a:	bf00      	nop
 801765c:	371c      	adds	r7, #28
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr

08017666 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	4603      	mov	r3, r0
 801766e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 8017670:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017672:	4618      	mov	r0, r3
 8017674:	370c      	adds	r7, #12
 8017676:	46bd      	mov	sp, r7
 8017678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767c:	4770      	bx	lr

0801767e <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801767e:	b480      	push	{r7}
 8017680:	b085      	sub	sp, #20
 8017682:	af00      	add	r7, sp, #0
 8017684:	4603      	mov	r3, r0
 8017686:	60b9      	str	r1, [r7, #8]
 8017688:	607a      	str	r2, [r7, #4]
 801768a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017692:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f44f 7200 	mov.w	r2, #512	; 0x200
 801769a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801769c:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801769e:	4618      	mov	r0, r3
 80176a0:	3714      	adds	r7, #20
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr

080176aa <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 80176aa:	b480      	push	{r7}
 80176ac:	b083      	sub	sp, #12
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	4603      	mov	r3, r0
 80176b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 80176b4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	370c      	adds	r7, #12
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr

080176c2 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 80176c2:	b480      	push	{r7}
 80176c4:	b083      	sub	sp, #12
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	4603      	mov	r3, r0
 80176ca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 80176cc:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	370c      	adds	r7, #12
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr

080176da <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80176da:	b480      	push	{r7}
 80176dc:	b085      	sub	sp, #20
 80176de:	af00      	add	r7, sp, #0
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	461a      	mov	r2, r3
 80176e6:	4603      	mov	r3, r0
 80176e8:	73fb      	strb	r3, [r7, #15]
 80176ea:	4613      	mov	r3, r2
 80176ec:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 80176ee:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3714      	adds	r7, #20
 80176f4:	46bd      	mov	sp, r7
 80176f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fa:	4770      	bx	lr

080176fc <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80176fc:	b480      	push	{r7}
 80176fe:	b085      	sub	sp, #20
 8017700:	af00      	add	r7, sp, #0
 8017702:	60b9      	str	r1, [r7, #8]
 8017704:	607a      	str	r2, [r7, #4]
 8017706:	461a      	mov	r2, r3
 8017708:	4603      	mov	r3, r0
 801770a:	73fb      	strb	r3, [r7, #15]
 801770c:	4613      	mov	r3, r2
 801770e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8017710:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8017712:	4618      	mov	r0, r3
 8017714:	3714      	adds	r7, #20
 8017716:	46bd      	mov	sp, r7
 8017718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771c:	4770      	bx	lr

0801771e <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 801771e:	b480      	push	{r7}
 8017720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 8017722:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8017724:	4618      	mov	r0, r3
 8017726:	46bd      	mov	sp, r7
 8017728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772c:	4770      	bx	lr
	...

08017730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b08c      	sub	sp, #48	; 0x30
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017738:	f107 031c 	add.w	r3, r7, #28
 801773c:	2200      	movs	r2, #0
 801773e:	601a      	str	r2, [r3, #0]
 8017740:	605a      	str	r2, [r3, #4]
 8017742:	609a      	str	r2, [r3, #8]
 8017744:	60da      	str	r2, [r3, #12]
 8017746:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017750:	d13b      	bne.n	80177ca <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017752:	2300      	movs	r3, #0
 8017754:	61bb      	str	r3, [r7, #24]
 8017756:	4b3c      	ldr	r3, [pc, #240]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801775a:	4a3b      	ldr	r2, [pc, #236]	; (8017848 <HAL_PCD_MspInit+0x118>)
 801775c:	f043 0301 	orr.w	r3, r3, #1
 8017760:	6313      	str	r3, [r2, #48]	; 0x30
 8017762:	4b39      	ldr	r3, [pc, #228]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017766:	f003 0301 	and.w	r3, r3, #1
 801776a:	61bb      	str	r3, [r7, #24]
 801776c:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801776e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017774:	2302      	movs	r3, #2
 8017776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017778:	2300      	movs	r3, #0
 801777a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801777c:	2303      	movs	r3, #3
 801777e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017780:	230a      	movs	r3, #10
 8017782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017784:	f107 031c 	add.w	r3, r7, #28
 8017788:	4619      	mov	r1, r3
 801778a:	4830      	ldr	r0, [pc, #192]	; (801784c <HAL_PCD_MspInit+0x11c>)
 801778c:	f7eb fe02 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017790:	4b2d      	ldr	r3, [pc, #180]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017794:	4a2c      	ldr	r2, [pc, #176]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801779a:	6353      	str	r3, [r2, #52]	; 0x34
 801779c:	2300      	movs	r3, #0
 801779e:	617b      	str	r3, [r7, #20]
 80177a0:	4b29      	ldr	r3, [pc, #164]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177a4:	4a28      	ldr	r2, [pc, #160]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177aa:	6453      	str	r3, [r2, #68]	; 0x44
 80177ac:	4b26      	ldr	r3, [pc, #152]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177b4:	617b      	str	r3, [r7, #20]
 80177b6:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80177b8:	2200      	movs	r2, #0
 80177ba:	2100      	movs	r1, #0
 80177bc:	2043      	movs	r0, #67	; 0x43
 80177be:	f7ea f8ae 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80177c2:	2043      	movs	r0, #67	; 0x43
 80177c4:	f7ea f8c7 	bl	8001956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80177c8:	e039      	b.n	801783e <HAL_PCD_MspInit+0x10e>
  else if(pcdHandle->Instance==USB_OTG_HS)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	4a20      	ldr	r2, [pc, #128]	; (8017850 <HAL_PCD_MspInit+0x120>)
 80177d0:	4293      	cmp	r3, r2
 80177d2:	d134      	bne.n	801783e <HAL_PCD_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177d4:	2300      	movs	r3, #0
 80177d6:	613b      	str	r3, [r7, #16]
 80177d8:	4b1b      	ldr	r3, [pc, #108]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177dc:	4a1a      	ldr	r2, [pc, #104]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177de:	f043 0302 	orr.w	r3, r3, #2
 80177e2:	6313      	str	r3, [r2, #48]	; 0x30
 80177e4:	4b18      	ldr	r3, [pc, #96]	; (8017848 <HAL_PCD_MspInit+0x118>)
 80177e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177e8:	f003 0302 	and.w	r3, r3, #2
 80177ec:	613b      	str	r3, [r7, #16]
 80177ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80177f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80177f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177f6:	2302      	movs	r3, #2
 80177f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177fa:	2300      	movs	r3, #0
 80177fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80177fe:	2303      	movs	r3, #3
 8017800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8017802:	230c      	movs	r3, #12
 8017804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017806:	f107 031c 	add.w	r3, r7, #28
 801780a:	4619      	mov	r1, r3
 801780c:	4811      	ldr	r0, [pc, #68]	; (8017854 <HAL_PCD_MspInit+0x124>)
 801780e:	f7eb fdc1 	bl	8003394 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017812:	2300      	movs	r3, #0
 8017814:	60fb      	str	r3, [r7, #12]
 8017816:	4b0c      	ldr	r3, [pc, #48]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801781a:	4a0b      	ldr	r2, [pc, #44]	; (8017848 <HAL_PCD_MspInit+0x118>)
 801781c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017820:	6313      	str	r3, [r2, #48]	; 0x30
 8017822:	4b09      	ldr	r3, [pc, #36]	; (8017848 <HAL_PCD_MspInit+0x118>)
 8017824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801782a:	60fb      	str	r3, [r7, #12]
 801782c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801782e:	2200      	movs	r2, #0
 8017830:	2100      	movs	r1, #0
 8017832:	204d      	movs	r0, #77	; 0x4d
 8017834:	f7ea f873 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017838:	204d      	movs	r0, #77	; 0x4d
 801783a:	f7ea f88c 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 801783e:	bf00      	nop
 8017840:	3730      	adds	r7, #48	; 0x30
 8017842:	46bd      	mov	sp, r7
 8017844:	bd80      	pop	{r7, pc}
 8017846:	bf00      	nop
 8017848:	40023800 	.word	0x40023800
 801784c:	40020000 	.word	0x40020000
 8017850:	40040000 	.word	0x40040000
 8017854:	40020400 	.word	0x40020400

08017858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b082      	sub	sp, #8
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801786c:	4619      	mov	r1, r3
 801786e:	4610      	mov	r0, r2
 8017870:	f7f3 fe02 	bl	800b478 <USBD_LL_SetupStage>
}
 8017874:	bf00      	nop
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	460b      	mov	r3, r1
 8017886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801788e:	78fa      	ldrb	r2, [r7, #3]
 8017890:	6879      	ldr	r1, [r7, #4]
 8017892:	4613      	mov	r3, r2
 8017894:	00db      	lsls	r3, r3, #3
 8017896:	4413      	add	r3, r2
 8017898:	009b      	lsls	r3, r3, #2
 801789a:	440b      	add	r3, r1
 801789c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80178a0:	681a      	ldr	r2, [r3, #0]
 80178a2:	78fb      	ldrb	r3, [r7, #3]
 80178a4:	4619      	mov	r1, r3
 80178a6:	f7f3 fe3c 	bl	800b522 <USBD_LL_DataOutStage>
}
 80178aa:	bf00      	nop
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
 80178ba:	460b      	mov	r3, r1
 80178bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80178c4:	78fa      	ldrb	r2, [r7, #3]
 80178c6:	6879      	ldr	r1, [r7, #4]
 80178c8:	4613      	mov	r3, r2
 80178ca:	00db      	lsls	r3, r3, #3
 80178cc:	4413      	add	r3, r2
 80178ce:	009b      	lsls	r3, r3, #2
 80178d0:	440b      	add	r3, r1
 80178d2:	3320      	adds	r3, #32
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	78fb      	ldrb	r3, [r7, #3]
 80178d8:	4619      	mov	r1, r3
 80178da:	f7f3 fed5 	bl	800b688 <USBD_LL_DataInStage>
}
 80178de:	bf00      	nop
 80178e0:	3708      	adds	r7, #8
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}

080178e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b082      	sub	sp, #8
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80178f4:	4618      	mov	r0, r3
 80178f6:	f7f4 f80f 	bl	800b918 <USBD_LL_SOF>
}
 80178fa:	bf00      	nop
 80178fc:	3708      	adds	r7, #8
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}

08017902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017902:	b580      	push	{r7, lr}
 8017904:	b084      	sub	sp, #16
 8017906:	af00      	add	r7, sp, #0
 8017908:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801790a:	2301      	movs	r3, #1
 801790c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	79db      	ldrb	r3, [r3, #7]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d102      	bne.n	801791c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017916:	2300      	movs	r3, #0
 8017918:	73fb      	strb	r3, [r7, #15]
 801791a:	e008      	b.n	801792e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	79db      	ldrb	r3, [r3, #7]
 8017920:	2b02      	cmp	r3, #2
 8017922:	d102      	bne.n	801792a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017924:	2301      	movs	r3, #1
 8017926:	73fb      	strb	r3, [r7, #15]
 8017928:	e001      	b.n	801792e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801792a:	f7e8 ff65 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017934:	7bfa      	ldrb	r2, [r7, #15]
 8017936:	4611      	mov	r1, r2
 8017938:	4618      	mov	r0, r3
 801793a:	f7f3 ffa9 	bl	800b890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017944:	4618      	mov	r0, r3
 8017946:	f7f3 ff51 	bl	800b7ec <USBD_LL_Reset>
}
 801794a:	bf00      	nop
 801794c:	3710      	adds	r7, #16
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
	...

08017954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017962:	4618      	mov	r0, r3
 8017964:	f7f3 ffa4 	bl	800b8b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	687a      	ldr	r2, [r7, #4]
 8017974:	6812      	ldr	r2, [r2, #0]
 8017976:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801797a:	f043 0301 	orr.w	r3, r3, #1
 801797e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	7adb      	ldrb	r3, [r3, #11]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d005      	beq.n	8017994 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017988:	4b04      	ldr	r3, [pc, #16]	; (801799c <HAL_PCD_SuspendCallback+0x48>)
 801798a:	691b      	ldr	r3, [r3, #16]
 801798c:	4a03      	ldr	r2, [pc, #12]	; (801799c <HAL_PCD_SuspendCallback+0x48>)
 801798e:	f043 0306 	orr.w	r3, r3, #6
 8017992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017994:	bf00      	nop
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	e000ed00 	.word	0xe000ed00

080179a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7f3 ff9a 	bl	800b8e8 <USBD_LL_Resume>
}
 80179b4:	bf00      	nop
 80179b6:	3708      	adds	r7, #8
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b082      	sub	sp, #8
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	460b      	mov	r3, r1
 80179c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80179ce:	78fa      	ldrb	r2, [r7, #3]
 80179d0:	4611      	mov	r1, r2
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7f3 fff2 	bl	800b9bc <USBD_LL_IsoOUTIncomplete>
}
 80179d8:	bf00      	nop
 80179da:	3708      	adds	r7, #8
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b082      	sub	sp, #8
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	460b      	mov	r3, r1
 80179ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80179f2:	78fa      	ldrb	r2, [r7, #3]
 80179f4:	4611      	mov	r1, r2
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7f3 ffae 	bl	800b958 <USBD_LL_IsoINIncomplete>
}
 80179fc:	bf00      	nop
 80179fe:	3708      	adds	r7, #8
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd80      	pop	{r7, pc}

08017a04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7f4 f804 	bl	800ba20 <USBD_LL_DevConnected>
}
 8017a18:	bf00      	nop
 8017a1a:	3708      	adds	r7, #8
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}

08017a20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b082      	sub	sp, #8
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7f4 f801 	bl	800ba36 <USBD_LL_DevDisconnected>
}
 8017a34:	bf00      	nop
 8017a36:	3708      	adds	r7, #8
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	bd80      	pop	{r7, pc}

08017a3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b082      	sub	sp, #8
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d13c      	bne.n	8017ac6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017a4c:	4a43      	ldr	r2, [pc, #268]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	4a41      	ldr	r2, [pc, #260]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017a5c:	4b3f      	ldr	r3, [pc, #252]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017a62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017a64:	4b3d      	ldr	r3, [pc, #244]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a66:	2204      	movs	r2, #4
 8017a68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017a6a:	4b3c      	ldr	r3, [pc, #240]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a6c:	2202      	movs	r2, #2
 8017a6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017a70:	4b3a      	ldr	r3, [pc, #232]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a72:	2200      	movs	r2, #0
 8017a74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017a76:	4b39      	ldr	r3, [pc, #228]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a78:	2202      	movs	r2, #2
 8017a7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017a7c:	4b37      	ldr	r3, [pc, #220]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a7e:	2200      	movs	r2, #0
 8017a80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017a82:	4b36      	ldr	r3, [pc, #216]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a84:	2200      	movs	r2, #0
 8017a86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017a88:	4b34      	ldr	r3, [pc, #208]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017a8e:	4b33      	ldr	r3, [pc, #204]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a90:	2200      	movs	r2, #0
 8017a92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017a94:	4b31      	ldr	r3, [pc, #196]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017a9a:	4830      	ldr	r0, [pc, #192]	; (8017b5c <USBD_LL_Init+0x120>)
 8017a9c:	f7eb fe16 	bl	80036cc <HAL_PCD_Init>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d001      	beq.n	8017aaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017aa6:	f7e8 fea7 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017aaa:	2180      	movs	r1, #128	; 0x80
 8017aac:	482b      	ldr	r0, [pc, #172]	; (8017b5c <USBD_LL_Init+0x120>)
 8017aae:	f7ed f86e 	bl	8004b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017ab2:	2240      	movs	r2, #64	; 0x40
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	4829      	ldr	r0, [pc, #164]	; (8017b5c <USBD_LL_Init+0x120>)
 8017ab8:	f7ed f822 	bl	8004b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017abc:	2280      	movs	r2, #128	; 0x80
 8017abe:	2101      	movs	r1, #1
 8017ac0:	4826      	ldr	r0, [pc, #152]	; (8017b5c <USBD_LL_Init+0x120>)
 8017ac2:	f7ed f81d 	bl	8004b00 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	2b01      	cmp	r3, #1
 8017acc:	d140      	bne.n	8017b50 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017ace:	4a24      	ldr	r2, [pc, #144]	; (8017b60 <USBD_LL_Init+0x124>)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	4a21      	ldr	r2, [pc, #132]	; (8017b60 <USBD_LL_Init+0x124>)
 8017ada:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017ade:	4b20      	ldr	r3, [pc, #128]	; (8017b60 <USBD_LL_Init+0x124>)
 8017ae0:	4a20      	ldr	r2, [pc, #128]	; (8017b64 <USBD_LL_Init+0x128>)
 8017ae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8017ae4:	4b1e      	ldr	r3, [pc, #120]	; (8017b60 <USBD_LL_Init+0x124>)
 8017ae6:	2206      	movs	r2, #6
 8017ae8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017aea:	4b1d      	ldr	r3, [pc, #116]	; (8017b60 <USBD_LL_Init+0x124>)
 8017aec:	2202      	movs	r2, #2
 8017aee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017af0:	4b1b      	ldr	r3, [pc, #108]	; (8017b60 <USBD_LL_Init+0x124>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017af6:	4b1a      	ldr	r3, [pc, #104]	; (8017b60 <USBD_LL_Init+0x124>)
 8017af8:	2202      	movs	r2, #2
 8017afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017afc:	4b18      	ldr	r3, [pc, #96]	; (8017b60 <USBD_LL_Init+0x124>)
 8017afe:	2200      	movs	r2, #0
 8017b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017b02:	4b17      	ldr	r3, [pc, #92]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b04:	2200      	movs	r2, #0
 8017b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017b08:	4b15      	ldr	r3, [pc, #84]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017b0e:	4b14      	ldr	r3, [pc, #80]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b10:	2200      	movs	r2, #0
 8017b12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017b14:	4b12      	ldr	r3, [pc, #72]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b16:	2200      	movs	r2, #0
 8017b18:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017b1a:	4b11      	ldr	r3, [pc, #68]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017b20:	480f      	ldr	r0, [pc, #60]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b22:	f7eb fdd3 	bl	80036cc <HAL_PCD_Init>
 8017b26:	4603      	mov	r3, r0
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d001      	beq.n	8017b30 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8017b2c:	f7e8 fe64 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017b34:	480a      	ldr	r0, [pc, #40]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b36:	f7ed f82a 	bl	8004b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017b3a:	2280      	movs	r2, #128	; 0x80
 8017b3c:	2100      	movs	r1, #0
 8017b3e:	4808      	ldr	r0, [pc, #32]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b40:	f7ec ffde 	bl	8004b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017b44:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017b48:	2101      	movs	r1, #1
 8017b4a:	4805      	ldr	r0, [pc, #20]	; (8017b60 <USBD_LL_Init+0x124>)
 8017b4c:	f7ec ffd8 	bl	8004b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017b50:	2300      	movs	r3, #0
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3708      	adds	r7, #8
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	20009a54 	.word	0x20009a54
 8017b60:	20009f38 	.word	0x20009f38
 8017b64:	40040000 	.word	0x40040000

08017b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b084      	sub	sp, #16
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b70:	2300      	movs	r3, #0
 8017b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b74:	2300      	movs	r3, #0
 8017b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7eb feb3 	bl	80038ea <HAL_PCD_Start>
 8017b84:	4603      	mov	r3, r0
 8017b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b88:	7bfb      	ldrb	r3, [r7, #15]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f000 f962 	bl	8017e54 <USBD_Get_USB_Status>
 8017b90:	4603      	mov	r3, r0
 8017b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b96:	4618      	mov	r0, r3
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}

08017b9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017b9e:	b580      	push	{r7, lr}
 8017ba0:	b084      	sub	sp, #16
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
 8017ba6:	4608      	mov	r0, r1
 8017ba8:	4611      	mov	r1, r2
 8017baa:	461a      	mov	r2, r3
 8017bac:	4603      	mov	r3, r0
 8017bae:	70fb      	strb	r3, [r7, #3]
 8017bb0:	460b      	mov	r3, r1
 8017bb2:	70bb      	strb	r3, [r7, #2]
 8017bb4:	4613      	mov	r3, r2
 8017bb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017bc6:	78bb      	ldrb	r3, [r7, #2]
 8017bc8:	883a      	ldrh	r2, [r7, #0]
 8017bca:	78f9      	ldrb	r1, [r7, #3]
 8017bcc:	f7ec fb87 	bl	80042de <HAL_PCD_EP_Open>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bd4:	7bfb      	ldrb	r3, [r7, #15]
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f000 f93c 	bl	8017e54 <USBD_Get_USB_Status>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3710      	adds	r7, #16
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b084      	sub	sp, #16
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
 8017bf2:	460b      	mov	r3, r1
 8017bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c04:	78fa      	ldrb	r2, [r7, #3]
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7ec fbd0 	bl	80043ae <HAL_PCD_EP_Close>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c12:	7bfb      	ldrb	r3, [r7, #15]
 8017c14:	4618      	mov	r0, r3
 8017c16:	f000 f91d 	bl	8017e54 <USBD_Get_USB_Status>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	3710      	adds	r7, #16
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}

08017c28 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b084      	sub	sp, #16
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	460b      	mov	r3, r1
 8017c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c34:	2300      	movs	r3, #0
 8017c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c42:	78fa      	ldrb	r2, [r7, #3]
 8017c44:	4611      	mov	r1, r2
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7ec fd72 	bl	8004730 <HAL_PCD_EP_Flush>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c50:	7bfb      	ldrb	r3, [r7, #15]
 8017c52:	4618      	mov	r0, r3
 8017c54:	f000 f8fe 	bl	8017e54 <USBD_Get_USB_Status>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3710      	adds	r7, #16
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}

08017c66 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c66:	b580      	push	{r7, lr}
 8017c68:	b084      	sub	sp, #16
 8017c6a:	af00      	add	r7, sp, #0
 8017c6c:	6078      	str	r0, [r7, #4]
 8017c6e:	460b      	mov	r3, r1
 8017c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c72:	2300      	movs	r3, #0
 8017c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c76:	2300      	movs	r3, #0
 8017c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c80:	78fa      	ldrb	r2, [r7, #3]
 8017c82:	4611      	mov	r1, r2
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ec fc69 	bl	800455c <HAL_PCD_EP_SetStall>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c8e:	7bfb      	ldrb	r3, [r7, #15]
 8017c90:	4618      	mov	r0, r3
 8017c92:	f000 f8df 	bl	8017e54 <USBD_Get_USB_Status>
 8017c96:	4603      	mov	r3, r0
 8017c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b084      	sub	sp, #16
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	460b      	mov	r3, r1
 8017cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017cbe:	78fa      	ldrb	r2, [r7, #3]
 8017cc0:	4611      	mov	r1, r2
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f7ec fcad 	bl	8004622 <HAL_PCD_EP_ClrStall>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ccc:	7bfb      	ldrb	r3, [r7, #15]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f000 f8c0 	bl	8017e54 <USBD_Get_USB_Status>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}

08017ce2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ce2:	b480      	push	{r7}
 8017ce4:	b085      	sub	sp, #20
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	6078      	str	r0, [r7, #4]
 8017cea:	460b      	mov	r3, r1
 8017cec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017cf4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	da0b      	bge.n	8017d16 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017cfe:	78fb      	ldrb	r3, [r7, #3]
 8017d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d04:	68f9      	ldr	r1, [r7, #12]
 8017d06:	4613      	mov	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	4413      	add	r3, r2
 8017d0c:	009b      	lsls	r3, r3, #2
 8017d0e:	440b      	add	r3, r1
 8017d10:	3316      	adds	r3, #22
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	e00b      	b.n	8017d2e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017d16:	78fb      	ldrb	r3, [r7, #3]
 8017d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d1c:	68f9      	ldr	r1, [r7, #12]
 8017d1e:	4613      	mov	r3, r2
 8017d20:	00db      	lsls	r3, r3, #3
 8017d22:	4413      	add	r3, r2
 8017d24:	009b      	lsls	r3, r3, #2
 8017d26:	440b      	add	r3, r1
 8017d28:	f203 2356 	addw	r3, r3, #598	; 0x256
 8017d2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d2e:	4618      	mov	r0, r3
 8017d30:	3714      	adds	r7, #20
 8017d32:	46bd      	mov	sp, r7
 8017d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d38:	4770      	bx	lr

08017d3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d3a:	b580      	push	{r7, lr}
 8017d3c:	b084      	sub	sp, #16
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
 8017d42:	460b      	mov	r3, r1
 8017d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d46:	2300      	movs	r3, #0
 8017d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d54:	78fa      	ldrb	r2, [r7, #3]
 8017d56:	4611      	mov	r1, r2
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7ec fa9c 	bl	8004296 <HAL_PCD_SetAddress>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d62:	7bfb      	ldrb	r3, [r7, #15]
 8017d64:	4618      	mov	r0, r3
 8017d66:	f000 f875 	bl	8017e54 <USBD_Get_USB_Status>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	3710      	adds	r7, #16
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b086      	sub	sp, #24
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	607a      	str	r2, [r7, #4]
 8017d82:	603b      	str	r3, [r7, #0]
 8017d84:	460b      	mov	r3, r1
 8017d86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017d96:	7af9      	ldrb	r1, [r7, #11]
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	687a      	ldr	r2, [r7, #4]
 8017d9c:	f7ec fba4 	bl	80044e8 <HAL_PCD_EP_Transmit>
 8017da0:	4603      	mov	r3, r0
 8017da2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017da4:	7dfb      	ldrb	r3, [r7, #23]
 8017da6:	4618      	mov	r0, r3
 8017da8:	f000 f854 	bl	8017e54 <USBD_Get_USB_Status>
 8017dac:	4603      	mov	r3, r0
 8017dae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3718      	adds	r7, #24
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}

08017dba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b086      	sub	sp, #24
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	60f8      	str	r0, [r7, #12]
 8017dc2:	607a      	str	r2, [r7, #4]
 8017dc4:	603b      	str	r3, [r7, #0]
 8017dc6:	460b      	mov	r3, r1
 8017dc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017dd8:	7af9      	ldrb	r1, [r7, #11]
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	687a      	ldr	r2, [r7, #4]
 8017dde:	f7ec fb30 	bl	8004442 <HAL_PCD_EP_Receive>
 8017de2:	4603      	mov	r3, r0
 8017de4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017de6:	7dfb      	ldrb	r3, [r7, #23]
 8017de8:	4618      	mov	r0, r3
 8017dea:	f000 f833 	bl	8017e54 <USBD_Get_USB_Status>
 8017dee:	4603      	mov	r3, r0
 8017df0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3718      	adds	r7, #24
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}

08017dfc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b082      	sub	sp, #8
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	460b      	mov	r3, r1
 8017e06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e0e:	78fa      	ldrb	r2, [r7, #3]
 8017e10:	4611      	mov	r1, r2
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7ec fb50 	bl	80044b8 <HAL_PCD_EP_GetRxCount>
 8017e18:	4603      	mov	r3, r0
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3708      	adds	r7, #8
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
	...

08017e24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017e24:	b480      	push	{r7}
 8017e26:	b083      	sub	sp, #12
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017e2c:	4b03      	ldr	r3, [pc, #12]	; (8017e3c <USBD_static_malloc+0x18>)
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	370c      	adds	r7, #12
 8017e32:	46bd      	mov	sp, r7
 8017e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e38:	4770      	bx	lr
 8017e3a:	bf00      	nop
 8017e3c:	2000a41c 	.word	0x2000a41c

08017e40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]

}
 8017e48:	bf00      	nop
 8017e4a:	370c      	adds	r7, #12
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e52:	4770      	bx	lr

08017e54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e54:	b480      	push	{r7}
 8017e56:	b085      	sub	sp, #20
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e62:	79fb      	ldrb	r3, [r7, #7]
 8017e64:	2b03      	cmp	r3, #3
 8017e66:	d817      	bhi.n	8017e98 <USBD_Get_USB_Status+0x44>
 8017e68:	a201      	add	r2, pc, #4	; (adr r2, 8017e70 <USBD_Get_USB_Status+0x1c>)
 8017e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e6e:	bf00      	nop
 8017e70:	08017e81 	.word	0x08017e81
 8017e74:	08017e87 	.word	0x08017e87
 8017e78:	08017e8d 	.word	0x08017e8d
 8017e7c:	08017e93 	.word	0x08017e93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017e80:	2300      	movs	r3, #0
 8017e82:	73fb      	strb	r3, [r7, #15]
    break;
 8017e84:	e00b      	b.n	8017e9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e86:	2303      	movs	r3, #3
 8017e88:	73fb      	strb	r3, [r7, #15]
    break;
 8017e8a:	e008      	b.n	8017e9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e90:	e005      	b.n	8017e9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e92:	2303      	movs	r3, #3
 8017e94:	73fb      	strb	r3, [r7, #15]
    break;
 8017e96:	e002      	b.n	8017e9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017e98:	2303      	movs	r3, #3
 8017e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e9c:	bf00      	nop
  }
  return usb_status;
 8017e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	3714      	adds	r7, #20
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eaa:	4770      	bx	lr

08017eac <atoi>:
 8017eac:	220a      	movs	r2, #10
 8017eae:	2100      	movs	r1, #0
 8017eb0:	f000 b8c0 	b.w	8018034 <strtol>

08017eb4 <rand>:
 8017eb4:	4b16      	ldr	r3, [pc, #88]	; (8017f10 <rand+0x5c>)
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	681c      	ldr	r4, [r3, #0]
 8017eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ebc:	b9b3      	cbnz	r3, 8017eec <rand+0x38>
 8017ebe:	2018      	movs	r0, #24
 8017ec0:	f000 faf0 	bl	80184a4 <malloc>
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	6320      	str	r0, [r4, #48]	; 0x30
 8017ec8:	b920      	cbnz	r0, 8017ed4 <rand+0x20>
 8017eca:	4b12      	ldr	r3, [pc, #72]	; (8017f14 <rand+0x60>)
 8017ecc:	4812      	ldr	r0, [pc, #72]	; (8017f18 <rand+0x64>)
 8017ece:	2152      	movs	r1, #82	; 0x52
 8017ed0:	f000 fa7e 	bl	80183d0 <__assert_func>
 8017ed4:	4911      	ldr	r1, [pc, #68]	; (8017f1c <rand+0x68>)
 8017ed6:	4b12      	ldr	r3, [pc, #72]	; (8017f20 <rand+0x6c>)
 8017ed8:	e9c0 1300 	strd	r1, r3, [r0]
 8017edc:	4b11      	ldr	r3, [pc, #68]	; (8017f24 <rand+0x70>)
 8017ede:	6083      	str	r3, [r0, #8]
 8017ee0:	230b      	movs	r3, #11
 8017ee2:	8183      	strh	r3, [r0, #12]
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	2001      	movs	r0, #1
 8017ee8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017eec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017eee:	480e      	ldr	r0, [pc, #56]	; (8017f28 <rand+0x74>)
 8017ef0:	690b      	ldr	r3, [r1, #16]
 8017ef2:	694c      	ldr	r4, [r1, #20]
 8017ef4:	4a0d      	ldr	r2, [pc, #52]	; (8017f2c <rand+0x78>)
 8017ef6:	4358      	muls	r0, r3
 8017ef8:	fb02 0004 	mla	r0, r2, r4, r0
 8017efc:	fba3 3202 	umull	r3, r2, r3, r2
 8017f00:	3301      	adds	r3, #1
 8017f02:	eb40 0002 	adc.w	r0, r0, r2
 8017f06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017f0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017f0e:	bd10      	pop	{r4, pc}
 8017f10:	20000258 	.word	0x20000258
 8017f14:	0801bbfc 	.word	0x0801bbfc
 8017f18:	0801bc13 	.word	0x0801bc13
 8017f1c:	abcd330e 	.word	0xabcd330e
 8017f20:	e66d1234 	.word	0xe66d1234
 8017f24:	0005deec 	.word	0x0005deec
 8017f28:	5851f42d 	.word	0x5851f42d
 8017f2c:	4c957f2d 	.word	0x4c957f2d

08017f30 <_strtol_l.constprop.0>:
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f36:	d001      	beq.n	8017f3c <_strtol_l.constprop.0+0xc>
 8017f38:	2b24      	cmp	r3, #36	; 0x24
 8017f3a:	d906      	bls.n	8017f4a <_strtol_l.constprop.0+0x1a>
 8017f3c:	f000 fa0c 	bl	8018358 <__errno>
 8017f40:	2316      	movs	r3, #22
 8017f42:	6003      	str	r3, [r0, #0]
 8017f44:	2000      	movs	r0, #0
 8017f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018030 <_strtol_l.constprop.0+0x100>
 8017f4e:	460d      	mov	r5, r1
 8017f50:	462e      	mov	r6, r5
 8017f52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017f5a:	f017 0708 	ands.w	r7, r7, #8
 8017f5e:	d1f7      	bne.n	8017f50 <_strtol_l.constprop.0+0x20>
 8017f60:	2c2d      	cmp	r4, #45	; 0x2d
 8017f62:	d132      	bne.n	8017fca <_strtol_l.constprop.0+0x9a>
 8017f64:	782c      	ldrb	r4, [r5, #0]
 8017f66:	2701      	movs	r7, #1
 8017f68:	1cb5      	adds	r5, r6, #2
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d05b      	beq.n	8018026 <_strtol_l.constprop.0+0xf6>
 8017f6e:	2b10      	cmp	r3, #16
 8017f70:	d109      	bne.n	8017f86 <_strtol_l.constprop.0+0x56>
 8017f72:	2c30      	cmp	r4, #48	; 0x30
 8017f74:	d107      	bne.n	8017f86 <_strtol_l.constprop.0+0x56>
 8017f76:	782c      	ldrb	r4, [r5, #0]
 8017f78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017f7c:	2c58      	cmp	r4, #88	; 0x58
 8017f7e:	d14d      	bne.n	801801c <_strtol_l.constprop.0+0xec>
 8017f80:	786c      	ldrb	r4, [r5, #1]
 8017f82:	2310      	movs	r3, #16
 8017f84:	3502      	adds	r5, #2
 8017f86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f8e:	f04f 0e00 	mov.w	lr, #0
 8017f92:	fbb8 f9f3 	udiv	r9, r8, r3
 8017f96:	4676      	mov	r6, lr
 8017f98:	fb03 8a19 	mls	sl, r3, r9, r8
 8017f9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017fa0:	f1bc 0f09 	cmp.w	ip, #9
 8017fa4:	d816      	bhi.n	8017fd4 <_strtol_l.constprop.0+0xa4>
 8017fa6:	4664      	mov	r4, ip
 8017fa8:	42a3      	cmp	r3, r4
 8017faa:	dd24      	ble.n	8017ff6 <_strtol_l.constprop.0+0xc6>
 8017fac:	f1be 3fff 	cmp.w	lr, #4294967295
 8017fb0:	d008      	beq.n	8017fc4 <_strtol_l.constprop.0+0x94>
 8017fb2:	45b1      	cmp	r9, r6
 8017fb4:	d31c      	bcc.n	8017ff0 <_strtol_l.constprop.0+0xc0>
 8017fb6:	d101      	bne.n	8017fbc <_strtol_l.constprop.0+0x8c>
 8017fb8:	45a2      	cmp	sl, r4
 8017fba:	db19      	blt.n	8017ff0 <_strtol_l.constprop.0+0xc0>
 8017fbc:	fb06 4603 	mla	r6, r6, r3, r4
 8017fc0:	f04f 0e01 	mov.w	lr, #1
 8017fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fc8:	e7e8      	b.n	8017f9c <_strtol_l.constprop.0+0x6c>
 8017fca:	2c2b      	cmp	r4, #43	; 0x2b
 8017fcc:	bf04      	itt	eq
 8017fce:	782c      	ldrbeq	r4, [r5, #0]
 8017fd0:	1cb5      	addeq	r5, r6, #2
 8017fd2:	e7ca      	b.n	8017f6a <_strtol_l.constprop.0+0x3a>
 8017fd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017fd8:	f1bc 0f19 	cmp.w	ip, #25
 8017fdc:	d801      	bhi.n	8017fe2 <_strtol_l.constprop.0+0xb2>
 8017fde:	3c37      	subs	r4, #55	; 0x37
 8017fe0:	e7e2      	b.n	8017fa8 <_strtol_l.constprop.0+0x78>
 8017fe2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017fe6:	f1bc 0f19 	cmp.w	ip, #25
 8017fea:	d804      	bhi.n	8017ff6 <_strtol_l.constprop.0+0xc6>
 8017fec:	3c57      	subs	r4, #87	; 0x57
 8017fee:	e7db      	b.n	8017fa8 <_strtol_l.constprop.0+0x78>
 8017ff0:	f04f 3eff 	mov.w	lr, #4294967295
 8017ff4:	e7e6      	b.n	8017fc4 <_strtol_l.constprop.0+0x94>
 8017ff6:	f1be 3fff 	cmp.w	lr, #4294967295
 8017ffa:	d105      	bne.n	8018008 <_strtol_l.constprop.0+0xd8>
 8017ffc:	2322      	movs	r3, #34	; 0x22
 8017ffe:	6003      	str	r3, [r0, #0]
 8018000:	4646      	mov	r6, r8
 8018002:	b942      	cbnz	r2, 8018016 <_strtol_l.constprop.0+0xe6>
 8018004:	4630      	mov	r0, r6
 8018006:	e79e      	b.n	8017f46 <_strtol_l.constprop.0+0x16>
 8018008:	b107      	cbz	r7, 801800c <_strtol_l.constprop.0+0xdc>
 801800a:	4276      	negs	r6, r6
 801800c:	2a00      	cmp	r2, #0
 801800e:	d0f9      	beq.n	8018004 <_strtol_l.constprop.0+0xd4>
 8018010:	f1be 0f00 	cmp.w	lr, #0
 8018014:	d000      	beq.n	8018018 <_strtol_l.constprop.0+0xe8>
 8018016:	1e69      	subs	r1, r5, #1
 8018018:	6011      	str	r1, [r2, #0]
 801801a:	e7f3      	b.n	8018004 <_strtol_l.constprop.0+0xd4>
 801801c:	2430      	movs	r4, #48	; 0x30
 801801e:	2b00      	cmp	r3, #0
 8018020:	d1b1      	bne.n	8017f86 <_strtol_l.constprop.0+0x56>
 8018022:	2308      	movs	r3, #8
 8018024:	e7af      	b.n	8017f86 <_strtol_l.constprop.0+0x56>
 8018026:	2c30      	cmp	r4, #48	; 0x30
 8018028:	d0a5      	beq.n	8017f76 <_strtol_l.constprop.0+0x46>
 801802a:	230a      	movs	r3, #10
 801802c:	e7ab      	b.n	8017f86 <_strtol_l.constprop.0+0x56>
 801802e:	bf00      	nop
 8018030:	0801bc6c 	.word	0x0801bc6c

08018034 <strtol>:
 8018034:	4613      	mov	r3, r2
 8018036:	460a      	mov	r2, r1
 8018038:	4601      	mov	r1, r0
 801803a:	4802      	ldr	r0, [pc, #8]	; (8018044 <strtol+0x10>)
 801803c:	6800      	ldr	r0, [r0, #0]
 801803e:	f7ff bf77 	b.w	8017f30 <_strtol_l.constprop.0>
 8018042:	bf00      	nop
 8018044:	20000258 	.word	0x20000258

08018048 <std>:
 8018048:	2300      	movs	r3, #0
 801804a:	b510      	push	{r4, lr}
 801804c:	4604      	mov	r4, r0
 801804e:	e9c0 3300 	strd	r3, r3, [r0]
 8018052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018056:	6083      	str	r3, [r0, #8]
 8018058:	8181      	strh	r1, [r0, #12]
 801805a:	6643      	str	r3, [r0, #100]	; 0x64
 801805c:	81c2      	strh	r2, [r0, #14]
 801805e:	6183      	str	r3, [r0, #24]
 8018060:	4619      	mov	r1, r3
 8018062:	2208      	movs	r2, #8
 8018064:	305c      	adds	r0, #92	; 0x5c
 8018066:	f000 f916 	bl	8018296 <memset>
 801806a:	4b0d      	ldr	r3, [pc, #52]	; (80180a0 <std+0x58>)
 801806c:	6263      	str	r3, [r4, #36]	; 0x24
 801806e:	4b0d      	ldr	r3, [pc, #52]	; (80180a4 <std+0x5c>)
 8018070:	62a3      	str	r3, [r4, #40]	; 0x28
 8018072:	4b0d      	ldr	r3, [pc, #52]	; (80180a8 <std+0x60>)
 8018074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <std+0x64>)
 8018078:	6323      	str	r3, [r4, #48]	; 0x30
 801807a:	4b0d      	ldr	r3, [pc, #52]	; (80180b0 <std+0x68>)
 801807c:	6224      	str	r4, [r4, #32]
 801807e:	429c      	cmp	r4, r3
 8018080:	d006      	beq.n	8018090 <std+0x48>
 8018082:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018086:	4294      	cmp	r4, r2
 8018088:	d002      	beq.n	8018090 <std+0x48>
 801808a:	33d0      	adds	r3, #208	; 0xd0
 801808c:	429c      	cmp	r4, r3
 801808e:	d105      	bne.n	801809c <std+0x54>
 8018090:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018098:	f000 b988 	b.w	80183ac <__retarget_lock_init_recursive>
 801809c:	bd10      	pop	{r4, pc}
 801809e:	bf00      	nop
 80180a0:	080181f1 	.word	0x080181f1
 80180a4:	08018213 	.word	0x08018213
 80180a8:	0801824b 	.word	0x0801824b
 80180ac:	0801826f 	.word	0x0801826f
 80180b0:	2000a63c 	.word	0x2000a63c

080180b4 <stdio_exit_handler>:
 80180b4:	4a02      	ldr	r2, [pc, #8]	; (80180c0 <stdio_exit_handler+0xc>)
 80180b6:	4903      	ldr	r1, [pc, #12]	; (80180c4 <stdio_exit_handler+0x10>)
 80180b8:	4803      	ldr	r0, [pc, #12]	; (80180c8 <stdio_exit_handler+0x14>)
 80180ba:	f000 b869 	b.w	8018190 <_fwalk_sglue>
 80180be:	bf00      	nop
 80180c0:	20000200 	.word	0x20000200
 80180c4:	08018cc1 	.word	0x08018cc1
 80180c8:	2000020c 	.word	0x2000020c

080180cc <cleanup_stdio>:
 80180cc:	6841      	ldr	r1, [r0, #4]
 80180ce:	4b0c      	ldr	r3, [pc, #48]	; (8018100 <cleanup_stdio+0x34>)
 80180d0:	4299      	cmp	r1, r3
 80180d2:	b510      	push	{r4, lr}
 80180d4:	4604      	mov	r4, r0
 80180d6:	d001      	beq.n	80180dc <cleanup_stdio+0x10>
 80180d8:	f000 fdf2 	bl	8018cc0 <_fflush_r>
 80180dc:	68a1      	ldr	r1, [r4, #8]
 80180de:	4b09      	ldr	r3, [pc, #36]	; (8018104 <cleanup_stdio+0x38>)
 80180e0:	4299      	cmp	r1, r3
 80180e2:	d002      	beq.n	80180ea <cleanup_stdio+0x1e>
 80180e4:	4620      	mov	r0, r4
 80180e6:	f000 fdeb 	bl	8018cc0 <_fflush_r>
 80180ea:	68e1      	ldr	r1, [r4, #12]
 80180ec:	4b06      	ldr	r3, [pc, #24]	; (8018108 <cleanup_stdio+0x3c>)
 80180ee:	4299      	cmp	r1, r3
 80180f0:	d004      	beq.n	80180fc <cleanup_stdio+0x30>
 80180f2:	4620      	mov	r0, r4
 80180f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180f8:	f000 bde2 	b.w	8018cc0 <_fflush_r>
 80180fc:	bd10      	pop	{r4, pc}
 80180fe:	bf00      	nop
 8018100:	2000a63c 	.word	0x2000a63c
 8018104:	2000a6a4 	.word	0x2000a6a4
 8018108:	2000a70c 	.word	0x2000a70c

0801810c <global_stdio_init.part.0>:
 801810c:	b510      	push	{r4, lr}
 801810e:	4b0b      	ldr	r3, [pc, #44]	; (801813c <global_stdio_init.part.0+0x30>)
 8018110:	4c0b      	ldr	r4, [pc, #44]	; (8018140 <global_stdio_init.part.0+0x34>)
 8018112:	4a0c      	ldr	r2, [pc, #48]	; (8018144 <global_stdio_init.part.0+0x38>)
 8018114:	601a      	str	r2, [r3, #0]
 8018116:	4620      	mov	r0, r4
 8018118:	2200      	movs	r2, #0
 801811a:	2104      	movs	r1, #4
 801811c:	f7ff ff94 	bl	8018048 <std>
 8018120:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018124:	2201      	movs	r2, #1
 8018126:	2109      	movs	r1, #9
 8018128:	f7ff ff8e 	bl	8018048 <std>
 801812c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018130:	2202      	movs	r2, #2
 8018132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018136:	2112      	movs	r1, #18
 8018138:	f7ff bf86 	b.w	8018048 <std>
 801813c:	2000a774 	.word	0x2000a774
 8018140:	2000a63c 	.word	0x2000a63c
 8018144:	080180b5 	.word	0x080180b5

08018148 <__sfp_lock_acquire>:
 8018148:	4801      	ldr	r0, [pc, #4]	; (8018150 <__sfp_lock_acquire+0x8>)
 801814a:	f000 b930 	b.w	80183ae <__retarget_lock_acquire_recursive>
 801814e:	bf00      	nop
 8018150:	2000a77d 	.word	0x2000a77d

08018154 <__sfp_lock_release>:
 8018154:	4801      	ldr	r0, [pc, #4]	; (801815c <__sfp_lock_release+0x8>)
 8018156:	f000 b92b 	b.w	80183b0 <__retarget_lock_release_recursive>
 801815a:	bf00      	nop
 801815c:	2000a77d 	.word	0x2000a77d

08018160 <__sinit>:
 8018160:	b510      	push	{r4, lr}
 8018162:	4604      	mov	r4, r0
 8018164:	f7ff fff0 	bl	8018148 <__sfp_lock_acquire>
 8018168:	6a23      	ldr	r3, [r4, #32]
 801816a:	b11b      	cbz	r3, 8018174 <__sinit+0x14>
 801816c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018170:	f7ff bff0 	b.w	8018154 <__sfp_lock_release>
 8018174:	4b04      	ldr	r3, [pc, #16]	; (8018188 <__sinit+0x28>)
 8018176:	6223      	str	r3, [r4, #32]
 8018178:	4b04      	ldr	r3, [pc, #16]	; (801818c <__sinit+0x2c>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d1f5      	bne.n	801816c <__sinit+0xc>
 8018180:	f7ff ffc4 	bl	801810c <global_stdio_init.part.0>
 8018184:	e7f2      	b.n	801816c <__sinit+0xc>
 8018186:	bf00      	nop
 8018188:	080180cd 	.word	0x080180cd
 801818c:	2000a774 	.word	0x2000a774

08018190 <_fwalk_sglue>:
 8018190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018194:	4607      	mov	r7, r0
 8018196:	4688      	mov	r8, r1
 8018198:	4614      	mov	r4, r2
 801819a:	2600      	movs	r6, #0
 801819c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181a0:	f1b9 0901 	subs.w	r9, r9, #1
 80181a4:	d505      	bpl.n	80181b2 <_fwalk_sglue+0x22>
 80181a6:	6824      	ldr	r4, [r4, #0]
 80181a8:	2c00      	cmp	r4, #0
 80181aa:	d1f7      	bne.n	801819c <_fwalk_sglue+0xc>
 80181ac:	4630      	mov	r0, r6
 80181ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181b2:	89ab      	ldrh	r3, [r5, #12]
 80181b4:	2b01      	cmp	r3, #1
 80181b6:	d907      	bls.n	80181c8 <_fwalk_sglue+0x38>
 80181b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181bc:	3301      	adds	r3, #1
 80181be:	d003      	beq.n	80181c8 <_fwalk_sglue+0x38>
 80181c0:	4629      	mov	r1, r5
 80181c2:	4638      	mov	r0, r7
 80181c4:	47c0      	blx	r8
 80181c6:	4306      	orrs	r6, r0
 80181c8:	3568      	adds	r5, #104	; 0x68
 80181ca:	e7e9      	b.n	80181a0 <_fwalk_sglue+0x10>

080181cc <iprintf>:
 80181cc:	b40f      	push	{r0, r1, r2, r3}
 80181ce:	b507      	push	{r0, r1, r2, lr}
 80181d0:	4906      	ldr	r1, [pc, #24]	; (80181ec <iprintf+0x20>)
 80181d2:	ab04      	add	r3, sp, #16
 80181d4:	6808      	ldr	r0, [r1, #0]
 80181d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80181da:	6881      	ldr	r1, [r0, #8]
 80181dc:	9301      	str	r3, [sp, #4]
 80181de:	f000 fa3f 	bl	8018660 <_vfiprintf_r>
 80181e2:	b003      	add	sp, #12
 80181e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80181e8:	b004      	add	sp, #16
 80181ea:	4770      	bx	lr
 80181ec:	20000258 	.word	0x20000258

080181f0 <__sread>:
 80181f0:	b510      	push	{r4, lr}
 80181f2:	460c      	mov	r4, r1
 80181f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181f8:	f000 f88a 	bl	8018310 <_read_r>
 80181fc:	2800      	cmp	r0, #0
 80181fe:	bfab      	itete	ge
 8018200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018202:	89a3      	ldrhlt	r3, [r4, #12]
 8018204:	181b      	addge	r3, r3, r0
 8018206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801820a:	bfac      	ite	ge
 801820c:	6563      	strge	r3, [r4, #84]	; 0x54
 801820e:	81a3      	strhlt	r3, [r4, #12]
 8018210:	bd10      	pop	{r4, pc}

08018212 <__swrite>:
 8018212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018216:	461f      	mov	r7, r3
 8018218:	898b      	ldrh	r3, [r1, #12]
 801821a:	05db      	lsls	r3, r3, #23
 801821c:	4605      	mov	r5, r0
 801821e:	460c      	mov	r4, r1
 8018220:	4616      	mov	r6, r2
 8018222:	d505      	bpl.n	8018230 <__swrite+0x1e>
 8018224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018228:	2302      	movs	r3, #2
 801822a:	2200      	movs	r2, #0
 801822c:	f000 f85e 	bl	80182ec <_lseek_r>
 8018230:	89a3      	ldrh	r3, [r4, #12]
 8018232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801823a:	81a3      	strh	r3, [r4, #12]
 801823c:	4632      	mov	r2, r6
 801823e:	463b      	mov	r3, r7
 8018240:	4628      	mov	r0, r5
 8018242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018246:	f000 b875 	b.w	8018334 <_write_r>

0801824a <__sseek>:
 801824a:	b510      	push	{r4, lr}
 801824c:	460c      	mov	r4, r1
 801824e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018252:	f000 f84b 	bl	80182ec <_lseek_r>
 8018256:	1c43      	adds	r3, r0, #1
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	bf15      	itete	ne
 801825c:	6560      	strne	r0, [r4, #84]	; 0x54
 801825e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018266:	81a3      	strheq	r3, [r4, #12]
 8018268:	bf18      	it	ne
 801826a:	81a3      	strhne	r3, [r4, #12]
 801826c:	bd10      	pop	{r4, pc}

0801826e <__sclose>:
 801826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018272:	f000 b82b 	b.w	80182cc <_close_r>

08018276 <memcmp>:
 8018276:	b510      	push	{r4, lr}
 8018278:	3901      	subs	r1, #1
 801827a:	4402      	add	r2, r0
 801827c:	4290      	cmp	r0, r2
 801827e:	d101      	bne.n	8018284 <memcmp+0xe>
 8018280:	2000      	movs	r0, #0
 8018282:	e005      	b.n	8018290 <memcmp+0x1a>
 8018284:	7803      	ldrb	r3, [r0, #0]
 8018286:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801828a:	42a3      	cmp	r3, r4
 801828c:	d001      	beq.n	8018292 <memcmp+0x1c>
 801828e:	1b18      	subs	r0, r3, r4
 8018290:	bd10      	pop	{r4, pc}
 8018292:	3001      	adds	r0, #1
 8018294:	e7f2      	b.n	801827c <memcmp+0x6>

08018296 <memset>:
 8018296:	4402      	add	r2, r0
 8018298:	4603      	mov	r3, r0
 801829a:	4293      	cmp	r3, r2
 801829c:	d100      	bne.n	80182a0 <memset+0xa>
 801829e:	4770      	bx	lr
 80182a0:	f803 1b01 	strb.w	r1, [r3], #1
 80182a4:	e7f9      	b.n	801829a <memset+0x4>

080182a6 <strncpy>:
 80182a6:	b510      	push	{r4, lr}
 80182a8:	3901      	subs	r1, #1
 80182aa:	4603      	mov	r3, r0
 80182ac:	b132      	cbz	r2, 80182bc <strncpy+0x16>
 80182ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80182b2:	f803 4b01 	strb.w	r4, [r3], #1
 80182b6:	3a01      	subs	r2, #1
 80182b8:	2c00      	cmp	r4, #0
 80182ba:	d1f7      	bne.n	80182ac <strncpy+0x6>
 80182bc:	441a      	add	r2, r3
 80182be:	2100      	movs	r1, #0
 80182c0:	4293      	cmp	r3, r2
 80182c2:	d100      	bne.n	80182c6 <strncpy+0x20>
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	f803 1b01 	strb.w	r1, [r3], #1
 80182ca:	e7f9      	b.n	80182c0 <strncpy+0x1a>

080182cc <_close_r>:
 80182cc:	b538      	push	{r3, r4, r5, lr}
 80182ce:	4d06      	ldr	r5, [pc, #24]	; (80182e8 <_close_r+0x1c>)
 80182d0:	2300      	movs	r3, #0
 80182d2:	4604      	mov	r4, r0
 80182d4:	4608      	mov	r0, r1
 80182d6:	602b      	str	r3, [r5, #0]
 80182d8:	f7e8 fc2d 	bl	8000b36 <_close>
 80182dc:	1c43      	adds	r3, r0, #1
 80182de:	d102      	bne.n	80182e6 <_close_r+0x1a>
 80182e0:	682b      	ldr	r3, [r5, #0]
 80182e2:	b103      	cbz	r3, 80182e6 <_close_r+0x1a>
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	bd38      	pop	{r3, r4, r5, pc}
 80182e8:	2000a778 	.word	0x2000a778

080182ec <_lseek_r>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4d07      	ldr	r5, [pc, #28]	; (801830c <_lseek_r+0x20>)
 80182f0:	4604      	mov	r4, r0
 80182f2:	4608      	mov	r0, r1
 80182f4:	4611      	mov	r1, r2
 80182f6:	2200      	movs	r2, #0
 80182f8:	602a      	str	r2, [r5, #0]
 80182fa:	461a      	mov	r2, r3
 80182fc:	f7e8 fc42 	bl	8000b84 <_lseek>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_lseek_r+0x1e>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_lseek_r+0x1e>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	2000a778 	.word	0x2000a778

08018310 <_read_r>:
 8018310:	b538      	push	{r3, r4, r5, lr}
 8018312:	4d07      	ldr	r5, [pc, #28]	; (8018330 <_read_r+0x20>)
 8018314:	4604      	mov	r4, r0
 8018316:	4608      	mov	r0, r1
 8018318:	4611      	mov	r1, r2
 801831a:	2200      	movs	r2, #0
 801831c:	602a      	str	r2, [r5, #0]
 801831e:	461a      	mov	r2, r3
 8018320:	f7e8 fbd0 	bl	8000ac4 <_read>
 8018324:	1c43      	adds	r3, r0, #1
 8018326:	d102      	bne.n	801832e <_read_r+0x1e>
 8018328:	682b      	ldr	r3, [r5, #0]
 801832a:	b103      	cbz	r3, 801832e <_read_r+0x1e>
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	2000a778 	.word	0x2000a778

08018334 <_write_r>:
 8018334:	b538      	push	{r3, r4, r5, lr}
 8018336:	4d07      	ldr	r5, [pc, #28]	; (8018354 <_write_r+0x20>)
 8018338:	4604      	mov	r4, r0
 801833a:	4608      	mov	r0, r1
 801833c:	4611      	mov	r1, r2
 801833e:	2200      	movs	r2, #0
 8018340:	602a      	str	r2, [r5, #0]
 8018342:	461a      	mov	r2, r3
 8018344:	f7e8 fbdb 	bl	8000afe <_write>
 8018348:	1c43      	adds	r3, r0, #1
 801834a:	d102      	bne.n	8018352 <_write_r+0x1e>
 801834c:	682b      	ldr	r3, [r5, #0]
 801834e:	b103      	cbz	r3, 8018352 <_write_r+0x1e>
 8018350:	6023      	str	r3, [r4, #0]
 8018352:	bd38      	pop	{r3, r4, r5, pc}
 8018354:	2000a778 	.word	0x2000a778

08018358 <__errno>:
 8018358:	4b01      	ldr	r3, [pc, #4]	; (8018360 <__errno+0x8>)
 801835a:	6818      	ldr	r0, [r3, #0]
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop
 8018360:	20000258 	.word	0x20000258

08018364 <__libc_init_array>:
 8018364:	b570      	push	{r4, r5, r6, lr}
 8018366:	4d0d      	ldr	r5, [pc, #52]	; (801839c <__libc_init_array+0x38>)
 8018368:	4c0d      	ldr	r4, [pc, #52]	; (80183a0 <__libc_init_array+0x3c>)
 801836a:	1b64      	subs	r4, r4, r5
 801836c:	10a4      	asrs	r4, r4, #2
 801836e:	2600      	movs	r6, #0
 8018370:	42a6      	cmp	r6, r4
 8018372:	d109      	bne.n	8018388 <__libc_init_array+0x24>
 8018374:	4d0b      	ldr	r5, [pc, #44]	; (80183a4 <__libc_init_array+0x40>)
 8018376:	4c0c      	ldr	r4, [pc, #48]	; (80183a8 <__libc_init_array+0x44>)
 8018378:	f000 fe52 	bl	8019020 <_init>
 801837c:	1b64      	subs	r4, r4, r5
 801837e:	10a4      	asrs	r4, r4, #2
 8018380:	2600      	movs	r6, #0
 8018382:	42a6      	cmp	r6, r4
 8018384:	d105      	bne.n	8018392 <__libc_init_array+0x2e>
 8018386:	bd70      	pop	{r4, r5, r6, pc}
 8018388:	f855 3b04 	ldr.w	r3, [r5], #4
 801838c:	4798      	blx	r3
 801838e:	3601      	adds	r6, #1
 8018390:	e7ee      	b.n	8018370 <__libc_init_array+0xc>
 8018392:	f855 3b04 	ldr.w	r3, [r5], #4
 8018396:	4798      	blx	r3
 8018398:	3601      	adds	r6, #1
 801839a:	e7f2      	b.n	8018382 <__libc_init_array+0x1e>
 801839c:	0801bde4 	.word	0x0801bde4
 80183a0:	0801bde4 	.word	0x0801bde4
 80183a4:	0801bde4 	.word	0x0801bde4
 80183a8:	0801bde8 	.word	0x0801bde8

080183ac <__retarget_lock_init_recursive>:
 80183ac:	4770      	bx	lr

080183ae <__retarget_lock_acquire_recursive>:
 80183ae:	4770      	bx	lr

080183b0 <__retarget_lock_release_recursive>:
 80183b0:	4770      	bx	lr

080183b2 <memcpy>:
 80183b2:	440a      	add	r2, r1
 80183b4:	4291      	cmp	r1, r2
 80183b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80183ba:	d100      	bne.n	80183be <memcpy+0xc>
 80183bc:	4770      	bx	lr
 80183be:	b510      	push	{r4, lr}
 80183c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183c8:	4291      	cmp	r1, r2
 80183ca:	d1f9      	bne.n	80183c0 <memcpy+0xe>
 80183cc:	bd10      	pop	{r4, pc}
	...

080183d0 <__assert_func>:
 80183d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80183d2:	4614      	mov	r4, r2
 80183d4:	461a      	mov	r2, r3
 80183d6:	4b09      	ldr	r3, [pc, #36]	; (80183fc <__assert_func+0x2c>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	4605      	mov	r5, r0
 80183dc:	68d8      	ldr	r0, [r3, #12]
 80183de:	b14c      	cbz	r4, 80183f4 <__assert_func+0x24>
 80183e0:	4b07      	ldr	r3, [pc, #28]	; (8018400 <__assert_func+0x30>)
 80183e2:	9100      	str	r1, [sp, #0]
 80183e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80183e8:	4906      	ldr	r1, [pc, #24]	; (8018404 <__assert_func+0x34>)
 80183ea:	462b      	mov	r3, r5
 80183ec:	f000 fc90 	bl	8018d10 <fiprintf>
 80183f0:	f000 fd46 	bl	8018e80 <abort>
 80183f4:	4b04      	ldr	r3, [pc, #16]	; (8018408 <__assert_func+0x38>)
 80183f6:	461c      	mov	r4, r3
 80183f8:	e7f3      	b.n	80183e2 <__assert_func+0x12>
 80183fa:	bf00      	nop
 80183fc:	20000258 	.word	0x20000258
 8018400:	0801bd6c 	.word	0x0801bd6c
 8018404:	0801bd79 	.word	0x0801bd79
 8018408:	0801bda7 	.word	0x0801bda7

0801840c <_free_r>:
 801840c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801840e:	2900      	cmp	r1, #0
 8018410:	d044      	beq.n	801849c <_free_r+0x90>
 8018412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018416:	9001      	str	r0, [sp, #4]
 8018418:	2b00      	cmp	r3, #0
 801841a:	f1a1 0404 	sub.w	r4, r1, #4
 801841e:	bfb8      	it	lt
 8018420:	18e4      	addlt	r4, r4, r3
 8018422:	f000 f8e7 	bl	80185f4 <__malloc_lock>
 8018426:	4a1e      	ldr	r2, [pc, #120]	; (80184a0 <_free_r+0x94>)
 8018428:	9801      	ldr	r0, [sp, #4]
 801842a:	6813      	ldr	r3, [r2, #0]
 801842c:	b933      	cbnz	r3, 801843c <_free_r+0x30>
 801842e:	6063      	str	r3, [r4, #4]
 8018430:	6014      	str	r4, [r2, #0]
 8018432:	b003      	add	sp, #12
 8018434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018438:	f000 b8e2 	b.w	8018600 <__malloc_unlock>
 801843c:	42a3      	cmp	r3, r4
 801843e:	d908      	bls.n	8018452 <_free_r+0x46>
 8018440:	6825      	ldr	r5, [r4, #0]
 8018442:	1961      	adds	r1, r4, r5
 8018444:	428b      	cmp	r3, r1
 8018446:	bf01      	itttt	eq
 8018448:	6819      	ldreq	r1, [r3, #0]
 801844a:	685b      	ldreq	r3, [r3, #4]
 801844c:	1949      	addeq	r1, r1, r5
 801844e:	6021      	streq	r1, [r4, #0]
 8018450:	e7ed      	b.n	801842e <_free_r+0x22>
 8018452:	461a      	mov	r2, r3
 8018454:	685b      	ldr	r3, [r3, #4]
 8018456:	b10b      	cbz	r3, 801845c <_free_r+0x50>
 8018458:	42a3      	cmp	r3, r4
 801845a:	d9fa      	bls.n	8018452 <_free_r+0x46>
 801845c:	6811      	ldr	r1, [r2, #0]
 801845e:	1855      	adds	r5, r2, r1
 8018460:	42a5      	cmp	r5, r4
 8018462:	d10b      	bne.n	801847c <_free_r+0x70>
 8018464:	6824      	ldr	r4, [r4, #0]
 8018466:	4421      	add	r1, r4
 8018468:	1854      	adds	r4, r2, r1
 801846a:	42a3      	cmp	r3, r4
 801846c:	6011      	str	r1, [r2, #0]
 801846e:	d1e0      	bne.n	8018432 <_free_r+0x26>
 8018470:	681c      	ldr	r4, [r3, #0]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	6053      	str	r3, [r2, #4]
 8018476:	440c      	add	r4, r1
 8018478:	6014      	str	r4, [r2, #0]
 801847a:	e7da      	b.n	8018432 <_free_r+0x26>
 801847c:	d902      	bls.n	8018484 <_free_r+0x78>
 801847e:	230c      	movs	r3, #12
 8018480:	6003      	str	r3, [r0, #0]
 8018482:	e7d6      	b.n	8018432 <_free_r+0x26>
 8018484:	6825      	ldr	r5, [r4, #0]
 8018486:	1961      	adds	r1, r4, r5
 8018488:	428b      	cmp	r3, r1
 801848a:	bf04      	itt	eq
 801848c:	6819      	ldreq	r1, [r3, #0]
 801848e:	685b      	ldreq	r3, [r3, #4]
 8018490:	6063      	str	r3, [r4, #4]
 8018492:	bf04      	itt	eq
 8018494:	1949      	addeq	r1, r1, r5
 8018496:	6021      	streq	r1, [r4, #0]
 8018498:	6054      	str	r4, [r2, #4]
 801849a:	e7ca      	b.n	8018432 <_free_r+0x26>
 801849c:	b003      	add	sp, #12
 801849e:	bd30      	pop	{r4, r5, pc}
 80184a0:	2000a780 	.word	0x2000a780

080184a4 <malloc>:
 80184a4:	4b02      	ldr	r3, [pc, #8]	; (80184b0 <malloc+0xc>)
 80184a6:	4601      	mov	r1, r0
 80184a8:	6818      	ldr	r0, [r3, #0]
 80184aa:	f000 b823 	b.w	80184f4 <_malloc_r>
 80184ae:	bf00      	nop
 80184b0:	20000258 	.word	0x20000258

080184b4 <sbrk_aligned>:
 80184b4:	b570      	push	{r4, r5, r6, lr}
 80184b6:	4e0e      	ldr	r6, [pc, #56]	; (80184f0 <sbrk_aligned+0x3c>)
 80184b8:	460c      	mov	r4, r1
 80184ba:	6831      	ldr	r1, [r6, #0]
 80184bc:	4605      	mov	r5, r0
 80184be:	b911      	cbnz	r1, 80184c6 <sbrk_aligned+0x12>
 80184c0:	f000 fcce 	bl	8018e60 <_sbrk_r>
 80184c4:	6030      	str	r0, [r6, #0]
 80184c6:	4621      	mov	r1, r4
 80184c8:	4628      	mov	r0, r5
 80184ca:	f000 fcc9 	bl	8018e60 <_sbrk_r>
 80184ce:	1c43      	adds	r3, r0, #1
 80184d0:	d00a      	beq.n	80184e8 <sbrk_aligned+0x34>
 80184d2:	1cc4      	adds	r4, r0, #3
 80184d4:	f024 0403 	bic.w	r4, r4, #3
 80184d8:	42a0      	cmp	r0, r4
 80184da:	d007      	beq.n	80184ec <sbrk_aligned+0x38>
 80184dc:	1a21      	subs	r1, r4, r0
 80184de:	4628      	mov	r0, r5
 80184e0:	f000 fcbe 	bl	8018e60 <_sbrk_r>
 80184e4:	3001      	adds	r0, #1
 80184e6:	d101      	bne.n	80184ec <sbrk_aligned+0x38>
 80184e8:	f04f 34ff 	mov.w	r4, #4294967295
 80184ec:	4620      	mov	r0, r4
 80184ee:	bd70      	pop	{r4, r5, r6, pc}
 80184f0:	2000a784 	.word	0x2000a784

080184f4 <_malloc_r>:
 80184f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f8:	1ccd      	adds	r5, r1, #3
 80184fa:	f025 0503 	bic.w	r5, r5, #3
 80184fe:	3508      	adds	r5, #8
 8018500:	2d0c      	cmp	r5, #12
 8018502:	bf38      	it	cc
 8018504:	250c      	movcc	r5, #12
 8018506:	2d00      	cmp	r5, #0
 8018508:	4607      	mov	r7, r0
 801850a:	db01      	blt.n	8018510 <_malloc_r+0x1c>
 801850c:	42a9      	cmp	r1, r5
 801850e:	d905      	bls.n	801851c <_malloc_r+0x28>
 8018510:	230c      	movs	r3, #12
 8018512:	603b      	str	r3, [r7, #0]
 8018514:	2600      	movs	r6, #0
 8018516:	4630      	mov	r0, r6
 8018518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801851c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80185f0 <_malloc_r+0xfc>
 8018520:	f000 f868 	bl	80185f4 <__malloc_lock>
 8018524:	f8d8 3000 	ldr.w	r3, [r8]
 8018528:	461c      	mov	r4, r3
 801852a:	bb5c      	cbnz	r4, 8018584 <_malloc_r+0x90>
 801852c:	4629      	mov	r1, r5
 801852e:	4638      	mov	r0, r7
 8018530:	f7ff ffc0 	bl	80184b4 <sbrk_aligned>
 8018534:	1c43      	adds	r3, r0, #1
 8018536:	4604      	mov	r4, r0
 8018538:	d155      	bne.n	80185e6 <_malloc_r+0xf2>
 801853a:	f8d8 4000 	ldr.w	r4, [r8]
 801853e:	4626      	mov	r6, r4
 8018540:	2e00      	cmp	r6, #0
 8018542:	d145      	bne.n	80185d0 <_malloc_r+0xdc>
 8018544:	2c00      	cmp	r4, #0
 8018546:	d048      	beq.n	80185da <_malloc_r+0xe6>
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	4631      	mov	r1, r6
 801854c:	4638      	mov	r0, r7
 801854e:	eb04 0903 	add.w	r9, r4, r3
 8018552:	f000 fc85 	bl	8018e60 <_sbrk_r>
 8018556:	4581      	cmp	r9, r0
 8018558:	d13f      	bne.n	80185da <_malloc_r+0xe6>
 801855a:	6821      	ldr	r1, [r4, #0]
 801855c:	1a6d      	subs	r5, r5, r1
 801855e:	4629      	mov	r1, r5
 8018560:	4638      	mov	r0, r7
 8018562:	f7ff ffa7 	bl	80184b4 <sbrk_aligned>
 8018566:	3001      	adds	r0, #1
 8018568:	d037      	beq.n	80185da <_malloc_r+0xe6>
 801856a:	6823      	ldr	r3, [r4, #0]
 801856c:	442b      	add	r3, r5
 801856e:	6023      	str	r3, [r4, #0]
 8018570:	f8d8 3000 	ldr.w	r3, [r8]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d038      	beq.n	80185ea <_malloc_r+0xf6>
 8018578:	685a      	ldr	r2, [r3, #4]
 801857a:	42a2      	cmp	r2, r4
 801857c:	d12b      	bne.n	80185d6 <_malloc_r+0xe2>
 801857e:	2200      	movs	r2, #0
 8018580:	605a      	str	r2, [r3, #4]
 8018582:	e00f      	b.n	80185a4 <_malloc_r+0xb0>
 8018584:	6822      	ldr	r2, [r4, #0]
 8018586:	1b52      	subs	r2, r2, r5
 8018588:	d41f      	bmi.n	80185ca <_malloc_r+0xd6>
 801858a:	2a0b      	cmp	r2, #11
 801858c:	d917      	bls.n	80185be <_malloc_r+0xca>
 801858e:	1961      	adds	r1, r4, r5
 8018590:	42a3      	cmp	r3, r4
 8018592:	6025      	str	r5, [r4, #0]
 8018594:	bf18      	it	ne
 8018596:	6059      	strne	r1, [r3, #4]
 8018598:	6863      	ldr	r3, [r4, #4]
 801859a:	bf08      	it	eq
 801859c:	f8c8 1000 	streq.w	r1, [r8]
 80185a0:	5162      	str	r2, [r4, r5]
 80185a2:	604b      	str	r3, [r1, #4]
 80185a4:	4638      	mov	r0, r7
 80185a6:	f104 060b 	add.w	r6, r4, #11
 80185aa:	f000 f829 	bl	8018600 <__malloc_unlock>
 80185ae:	f026 0607 	bic.w	r6, r6, #7
 80185b2:	1d23      	adds	r3, r4, #4
 80185b4:	1af2      	subs	r2, r6, r3
 80185b6:	d0ae      	beq.n	8018516 <_malloc_r+0x22>
 80185b8:	1b9b      	subs	r3, r3, r6
 80185ba:	50a3      	str	r3, [r4, r2]
 80185bc:	e7ab      	b.n	8018516 <_malloc_r+0x22>
 80185be:	42a3      	cmp	r3, r4
 80185c0:	6862      	ldr	r2, [r4, #4]
 80185c2:	d1dd      	bne.n	8018580 <_malloc_r+0x8c>
 80185c4:	f8c8 2000 	str.w	r2, [r8]
 80185c8:	e7ec      	b.n	80185a4 <_malloc_r+0xb0>
 80185ca:	4623      	mov	r3, r4
 80185cc:	6864      	ldr	r4, [r4, #4]
 80185ce:	e7ac      	b.n	801852a <_malloc_r+0x36>
 80185d0:	4634      	mov	r4, r6
 80185d2:	6876      	ldr	r6, [r6, #4]
 80185d4:	e7b4      	b.n	8018540 <_malloc_r+0x4c>
 80185d6:	4613      	mov	r3, r2
 80185d8:	e7cc      	b.n	8018574 <_malloc_r+0x80>
 80185da:	230c      	movs	r3, #12
 80185dc:	603b      	str	r3, [r7, #0]
 80185de:	4638      	mov	r0, r7
 80185e0:	f000 f80e 	bl	8018600 <__malloc_unlock>
 80185e4:	e797      	b.n	8018516 <_malloc_r+0x22>
 80185e6:	6025      	str	r5, [r4, #0]
 80185e8:	e7dc      	b.n	80185a4 <_malloc_r+0xb0>
 80185ea:	605b      	str	r3, [r3, #4]
 80185ec:	deff      	udf	#255	; 0xff
 80185ee:	bf00      	nop
 80185f0:	2000a780 	.word	0x2000a780

080185f4 <__malloc_lock>:
 80185f4:	4801      	ldr	r0, [pc, #4]	; (80185fc <__malloc_lock+0x8>)
 80185f6:	f7ff beda 	b.w	80183ae <__retarget_lock_acquire_recursive>
 80185fa:	bf00      	nop
 80185fc:	2000a77c 	.word	0x2000a77c

08018600 <__malloc_unlock>:
 8018600:	4801      	ldr	r0, [pc, #4]	; (8018608 <__malloc_unlock+0x8>)
 8018602:	f7ff bed5 	b.w	80183b0 <__retarget_lock_release_recursive>
 8018606:	bf00      	nop
 8018608:	2000a77c 	.word	0x2000a77c

0801860c <__sfputc_r>:
 801860c:	6893      	ldr	r3, [r2, #8]
 801860e:	3b01      	subs	r3, #1
 8018610:	2b00      	cmp	r3, #0
 8018612:	b410      	push	{r4}
 8018614:	6093      	str	r3, [r2, #8]
 8018616:	da08      	bge.n	801862a <__sfputc_r+0x1e>
 8018618:	6994      	ldr	r4, [r2, #24]
 801861a:	42a3      	cmp	r3, r4
 801861c:	db01      	blt.n	8018622 <__sfputc_r+0x16>
 801861e:	290a      	cmp	r1, #10
 8018620:	d103      	bne.n	801862a <__sfputc_r+0x1e>
 8018622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018626:	f000 bb85 	b.w	8018d34 <__swbuf_r>
 801862a:	6813      	ldr	r3, [r2, #0]
 801862c:	1c58      	adds	r0, r3, #1
 801862e:	6010      	str	r0, [r2, #0]
 8018630:	7019      	strb	r1, [r3, #0]
 8018632:	4608      	mov	r0, r1
 8018634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018638:	4770      	bx	lr

0801863a <__sfputs_r>:
 801863a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801863c:	4606      	mov	r6, r0
 801863e:	460f      	mov	r7, r1
 8018640:	4614      	mov	r4, r2
 8018642:	18d5      	adds	r5, r2, r3
 8018644:	42ac      	cmp	r4, r5
 8018646:	d101      	bne.n	801864c <__sfputs_r+0x12>
 8018648:	2000      	movs	r0, #0
 801864a:	e007      	b.n	801865c <__sfputs_r+0x22>
 801864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018650:	463a      	mov	r2, r7
 8018652:	4630      	mov	r0, r6
 8018654:	f7ff ffda 	bl	801860c <__sfputc_r>
 8018658:	1c43      	adds	r3, r0, #1
 801865a:	d1f3      	bne.n	8018644 <__sfputs_r+0xa>
 801865c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018660 <_vfiprintf_r>:
 8018660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	460d      	mov	r5, r1
 8018666:	b09d      	sub	sp, #116	; 0x74
 8018668:	4614      	mov	r4, r2
 801866a:	4698      	mov	r8, r3
 801866c:	4606      	mov	r6, r0
 801866e:	b118      	cbz	r0, 8018678 <_vfiprintf_r+0x18>
 8018670:	6a03      	ldr	r3, [r0, #32]
 8018672:	b90b      	cbnz	r3, 8018678 <_vfiprintf_r+0x18>
 8018674:	f7ff fd74 	bl	8018160 <__sinit>
 8018678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801867a:	07d9      	lsls	r1, r3, #31
 801867c:	d405      	bmi.n	801868a <_vfiprintf_r+0x2a>
 801867e:	89ab      	ldrh	r3, [r5, #12]
 8018680:	059a      	lsls	r2, r3, #22
 8018682:	d402      	bmi.n	801868a <_vfiprintf_r+0x2a>
 8018684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018686:	f7ff fe92 	bl	80183ae <__retarget_lock_acquire_recursive>
 801868a:	89ab      	ldrh	r3, [r5, #12]
 801868c:	071b      	lsls	r3, r3, #28
 801868e:	d501      	bpl.n	8018694 <_vfiprintf_r+0x34>
 8018690:	692b      	ldr	r3, [r5, #16]
 8018692:	b99b      	cbnz	r3, 80186bc <_vfiprintf_r+0x5c>
 8018694:	4629      	mov	r1, r5
 8018696:	4630      	mov	r0, r6
 8018698:	f000 fb8a 	bl	8018db0 <__swsetup_r>
 801869c:	b170      	cbz	r0, 80186bc <_vfiprintf_r+0x5c>
 801869e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186a0:	07dc      	lsls	r4, r3, #31
 80186a2:	d504      	bpl.n	80186ae <_vfiprintf_r+0x4e>
 80186a4:	f04f 30ff 	mov.w	r0, #4294967295
 80186a8:	b01d      	add	sp, #116	; 0x74
 80186aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ae:	89ab      	ldrh	r3, [r5, #12]
 80186b0:	0598      	lsls	r0, r3, #22
 80186b2:	d4f7      	bmi.n	80186a4 <_vfiprintf_r+0x44>
 80186b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80186b6:	f7ff fe7b 	bl	80183b0 <__retarget_lock_release_recursive>
 80186ba:	e7f3      	b.n	80186a4 <_vfiprintf_r+0x44>
 80186bc:	2300      	movs	r3, #0
 80186be:	9309      	str	r3, [sp, #36]	; 0x24
 80186c0:	2320      	movs	r3, #32
 80186c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80186ca:	2330      	movs	r3, #48	; 0x30
 80186cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018880 <_vfiprintf_r+0x220>
 80186d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186d4:	f04f 0901 	mov.w	r9, #1
 80186d8:	4623      	mov	r3, r4
 80186da:	469a      	mov	sl, r3
 80186dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186e0:	b10a      	cbz	r2, 80186e6 <_vfiprintf_r+0x86>
 80186e2:	2a25      	cmp	r2, #37	; 0x25
 80186e4:	d1f9      	bne.n	80186da <_vfiprintf_r+0x7a>
 80186e6:	ebba 0b04 	subs.w	fp, sl, r4
 80186ea:	d00b      	beq.n	8018704 <_vfiprintf_r+0xa4>
 80186ec:	465b      	mov	r3, fp
 80186ee:	4622      	mov	r2, r4
 80186f0:	4629      	mov	r1, r5
 80186f2:	4630      	mov	r0, r6
 80186f4:	f7ff ffa1 	bl	801863a <__sfputs_r>
 80186f8:	3001      	adds	r0, #1
 80186fa:	f000 80a9 	beq.w	8018850 <_vfiprintf_r+0x1f0>
 80186fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018700:	445a      	add	r2, fp
 8018702:	9209      	str	r2, [sp, #36]	; 0x24
 8018704:	f89a 3000 	ldrb.w	r3, [sl]
 8018708:	2b00      	cmp	r3, #0
 801870a:	f000 80a1 	beq.w	8018850 <_vfiprintf_r+0x1f0>
 801870e:	2300      	movs	r3, #0
 8018710:	f04f 32ff 	mov.w	r2, #4294967295
 8018714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018718:	f10a 0a01 	add.w	sl, sl, #1
 801871c:	9304      	str	r3, [sp, #16]
 801871e:	9307      	str	r3, [sp, #28]
 8018720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018724:	931a      	str	r3, [sp, #104]	; 0x68
 8018726:	4654      	mov	r4, sl
 8018728:	2205      	movs	r2, #5
 801872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801872e:	4854      	ldr	r0, [pc, #336]	; (8018880 <_vfiprintf_r+0x220>)
 8018730:	f7e7 fd4e 	bl	80001d0 <memchr>
 8018734:	9a04      	ldr	r2, [sp, #16]
 8018736:	b9d8      	cbnz	r0, 8018770 <_vfiprintf_r+0x110>
 8018738:	06d1      	lsls	r1, r2, #27
 801873a:	bf44      	itt	mi
 801873c:	2320      	movmi	r3, #32
 801873e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018742:	0713      	lsls	r3, r2, #28
 8018744:	bf44      	itt	mi
 8018746:	232b      	movmi	r3, #43	; 0x2b
 8018748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801874c:	f89a 3000 	ldrb.w	r3, [sl]
 8018750:	2b2a      	cmp	r3, #42	; 0x2a
 8018752:	d015      	beq.n	8018780 <_vfiprintf_r+0x120>
 8018754:	9a07      	ldr	r2, [sp, #28]
 8018756:	4654      	mov	r4, sl
 8018758:	2000      	movs	r0, #0
 801875a:	f04f 0c0a 	mov.w	ip, #10
 801875e:	4621      	mov	r1, r4
 8018760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018764:	3b30      	subs	r3, #48	; 0x30
 8018766:	2b09      	cmp	r3, #9
 8018768:	d94d      	bls.n	8018806 <_vfiprintf_r+0x1a6>
 801876a:	b1b0      	cbz	r0, 801879a <_vfiprintf_r+0x13a>
 801876c:	9207      	str	r2, [sp, #28]
 801876e:	e014      	b.n	801879a <_vfiprintf_r+0x13a>
 8018770:	eba0 0308 	sub.w	r3, r0, r8
 8018774:	fa09 f303 	lsl.w	r3, r9, r3
 8018778:	4313      	orrs	r3, r2
 801877a:	9304      	str	r3, [sp, #16]
 801877c:	46a2      	mov	sl, r4
 801877e:	e7d2      	b.n	8018726 <_vfiprintf_r+0xc6>
 8018780:	9b03      	ldr	r3, [sp, #12]
 8018782:	1d19      	adds	r1, r3, #4
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	9103      	str	r1, [sp, #12]
 8018788:	2b00      	cmp	r3, #0
 801878a:	bfbb      	ittet	lt
 801878c:	425b      	neglt	r3, r3
 801878e:	f042 0202 	orrlt.w	r2, r2, #2
 8018792:	9307      	strge	r3, [sp, #28]
 8018794:	9307      	strlt	r3, [sp, #28]
 8018796:	bfb8      	it	lt
 8018798:	9204      	strlt	r2, [sp, #16]
 801879a:	7823      	ldrb	r3, [r4, #0]
 801879c:	2b2e      	cmp	r3, #46	; 0x2e
 801879e:	d10c      	bne.n	80187ba <_vfiprintf_r+0x15a>
 80187a0:	7863      	ldrb	r3, [r4, #1]
 80187a2:	2b2a      	cmp	r3, #42	; 0x2a
 80187a4:	d134      	bne.n	8018810 <_vfiprintf_r+0x1b0>
 80187a6:	9b03      	ldr	r3, [sp, #12]
 80187a8:	1d1a      	adds	r2, r3, #4
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	9203      	str	r2, [sp, #12]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	bfb8      	it	lt
 80187b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80187b6:	3402      	adds	r4, #2
 80187b8:	9305      	str	r3, [sp, #20]
 80187ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018890 <_vfiprintf_r+0x230>
 80187be:	7821      	ldrb	r1, [r4, #0]
 80187c0:	2203      	movs	r2, #3
 80187c2:	4650      	mov	r0, sl
 80187c4:	f7e7 fd04 	bl	80001d0 <memchr>
 80187c8:	b138      	cbz	r0, 80187da <_vfiprintf_r+0x17a>
 80187ca:	9b04      	ldr	r3, [sp, #16]
 80187cc:	eba0 000a 	sub.w	r0, r0, sl
 80187d0:	2240      	movs	r2, #64	; 0x40
 80187d2:	4082      	lsls	r2, r0
 80187d4:	4313      	orrs	r3, r2
 80187d6:	3401      	adds	r4, #1
 80187d8:	9304      	str	r3, [sp, #16]
 80187da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187de:	4829      	ldr	r0, [pc, #164]	; (8018884 <_vfiprintf_r+0x224>)
 80187e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187e4:	2206      	movs	r2, #6
 80187e6:	f7e7 fcf3 	bl	80001d0 <memchr>
 80187ea:	2800      	cmp	r0, #0
 80187ec:	d03f      	beq.n	801886e <_vfiprintf_r+0x20e>
 80187ee:	4b26      	ldr	r3, [pc, #152]	; (8018888 <_vfiprintf_r+0x228>)
 80187f0:	bb1b      	cbnz	r3, 801883a <_vfiprintf_r+0x1da>
 80187f2:	9b03      	ldr	r3, [sp, #12]
 80187f4:	3307      	adds	r3, #7
 80187f6:	f023 0307 	bic.w	r3, r3, #7
 80187fa:	3308      	adds	r3, #8
 80187fc:	9303      	str	r3, [sp, #12]
 80187fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018800:	443b      	add	r3, r7
 8018802:	9309      	str	r3, [sp, #36]	; 0x24
 8018804:	e768      	b.n	80186d8 <_vfiprintf_r+0x78>
 8018806:	fb0c 3202 	mla	r2, ip, r2, r3
 801880a:	460c      	mov	r4, r1
 801880c:	2001      	movs	r0, #1
 801880e:	e7a6      	b.n	801875e <_vfiprintf_r+0xfe>
 8018810:	2300      	movs	r3, #0
 8018812:	3401      	adds	r4, #1
 8018814:	9305      	str	r3, [sp, #20]
 8018816:	4619      	mov	r1, r3
 8018818:	f04f 0c0a 	mov.w	ip, #10
 801881c:	4620      	mov	r0, r4
 801881e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018822:	3a30      	subs	r2, #48	; 0x30
 8018824:	2a09      	cmp	r2, #9
 8018826:	d903      	bls.n	8018830 <_vfiprintf_r+0x1d0>
 8018828:	2b00      	cmp	r3, #0
 801882a:	d0c6      	beq.n	80187ba <_vfiprintf_r+0x15a>
 801882c:	9105      	str	r1, [sp, #20]
 801882e:	e7c4      	b.n	80187ba <_vfiprintf_r+0x15a>
 8018830:	fb0c 2101 	mla	r1, ip, r1, r2
 8018834:	4604      	mov	r4, r0
 8018836:	2301      	movs	r3, #1
 8018838:	e7f0      	b.n	801881c <_vfiprintf_r+0x1bc>
 801883a:	ab03      	add	r3, sp, #12
 801883c:	9300      	str	r3, [sp, #0]
 801883e:	462a      	mov	r2, r5
 8018840:	4b12      	ldr	r3, [pc, #72]	; (801888c <_vfiprintf_r+0x22c>)
 8018842:	a904      	add	r1, sp, #16
 8018844:	4630      	mov	r0, r6
 8018846:	f3af 8000 	nop.w
 801884a:	4607      	mov	r7, r0
 801884c:	1c78      	adds	r0, r7, #1
 801884e:	d1d6      	bne.n	80187fe <_vfiprintf_r+0x19e>
 8018850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018852:	07d9      	lsls	r1, r3, #31
 8018854:	d405      	bmi.n	8018862 <_vfiprintf_r+0x202>
 8018856:	89ab      	ldrh	r3, [r5, #12]
 8018858:	059a      	lsls	r2, r3, #22
 801885a:	d402      	bmi.n	8018862 <_vfiprintf_r+0x202>
 801885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801885e:	f7ff fda7 	bl	80183b0 <__retarget_lock_release_recursive>
 8018862:	89ab      	ldrh	r3, [r5, #12]
 8018864:	065b      	lsls	r3, r3, #25
 8018866:	f53f af1d 	bmi.w	80186a4 <_vfiprintf_r+0x44>
 801886a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801886c:	e71c      	b.n	80186a8 <_vfiprintf_r+0x48>
 801886e:	ab03      	add	r3, sp, #12
 8018870:	9300      	str	r3, [sp, #0]
 8018872:	462a      	mov	r2, r5
 8018874:	4b05      	ldr	r3, [pc, #20]	; (801888c <_vfiprintf_r+0x22c>)
 8018876:	a904      	add	r1, sp, #16
 8018878:	4630      	mov	r0, r6
 801887a:	f000 f879 	bl	8018970 <_printf_i>
 801887e:	e7e4      	b.n	801884a <_vfiprintf_r+0x1ea>
 8018880:	0801bda8 	.word	0x0801bda8
 8018884:	0801bdb2 	.word	0x0801bdb2
 8018888:	00000000 	.word	0x00000000
 801888c:	0801863b 	.word	0x0801863b
 8018890:	0801bdae 	.word	0x0801bdae

08018894 <_printf_common>:
 8018894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018898:	4616      	mov	r6, r2
 801889a:	4699      	mov	r9, r3
 801889c:	688a      	ldr	r2, [r1, #8]
 801889e:	690b      	ldr	r3, [r1, #16]
 80188a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80188a4:	4293      	cmp	r3, r2
 80188a6:	bfb8      	it	lt
 80188a8:	4613      	movlt	r3, r2
 80188aa:	6033      	str	r3, [r6, #0]
 80188ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80188b0:	4607      	mov	r7, r0
 80188b2:	460c      	mov	r4, r1
 80188b4:	b10a      	cbz	r2, 80188ba <_printf_common+0x26>
 80188b6:	3301      	adds	r3, #1
 80188b8:	6033      	str	r3, [r6, #0]
 80188ba:	6823      	ldr	r3, [r4, #0]
 80188bc:	0699      	lsls	r1, r3, #26
 80188be:	bf42      	ittt	mi
 80188c0:	6833      	ldrmi	r3, [r6, #0]
 80188c2:	3302      	addmi	r3, #2
 80188c4:	6033      	strmi	r3, [r6, #0]
 80188c6:	6825      	ldr	r5, [r4, #0]
 80188c8:	f015 0506 	ands.w	r5, r5, #6
 80188cc:	d106      	bne.n	80188dc <_printf_common+0x48>
 80188ce:	f104 0a19 	add.w	sl, r4, #25
 80188d2:	68e3      	ldr	r3, [r4, #12]
 80188d4:	6832      	ldr	r2, [r6, #0]
 80188d6:	1a9b      	subs	r3, r3, r2
 80188d8:	42ab      	cmp	r3, r5
 80188da:	dc26      	bgt.n	801892a <_printf_common+0x96>
 80188dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80188e0:	1e13      	subs	r3, r2, #0
 80188e2:	6822      	ldr	r2, [r4, #0]
 80188e4:	bf18      	it	ne
 80188e6:	2301      	movne	r3, #1
 80188e8:	0692      	lsls	r2, r2, #26
 80188ea:	d42b      	bmi.n	8018944 <_printf_common+0xb0>
 80188ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80188f0:	4649      	mov	r1, r9
 80188f2:	4638      	mov	r0, r7
 80188f4:	47c0      	blx	r8
 80188f6:	3001      	adds	r0, #1
 80188f8:	d01e      	beq.n	8018938 <_printf_common+0xa4>
 80188fa:	6823      	ldr	r3, [r4, #0]
 80188fc:	6922      	ldr	r2, [r4, #16]
 80188fe:	f003 0306 	and.w	r3, r3, #6
 8018902:	2b04      	cmp	r3, #4
 8018904:	bf02      	ittt	eq
 8018906:	68e5      	ldreq	r5, [r4, #12]
 8018908:	6833      	ldreq	r3, [r6, #0]
 801890a:	1aed      	subeq	r5, r5, r3
 801890c:	68a3      	ldr	r3, [r4, #8]
 801890e:	bf0c      	ite	eq
 8018910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018914:	2500      	movne	r5, #0
 8018916:	4293      	cmp	r3, r2
 8018918:	bfc4      	itt	gt
 801891a:	1a9b      	subgt	r3, r3, r2
 801891c:	18ed      	addgt	r5, r5, r3
 801891e:	2600      	movs	r6, #0
 8018920:	341a      	adds	r4, #26
 8018922:	42b5      	cmp	r5, r6
 8018924:	d11a      	bne.n	801895c <_printf_common+0xc8>
 8018926:	2000      	movs	r0, #0
 8018928:	e008      	b.n	801893c <_printf_common+0xa8>
 801892a:	2301      	movs	r3, #1
 801892c:	4652      	mov	r2, sl
 801892e:	4649      	mov	r1, r9
 8018930:	4638      	mov	r0, r7
 8018932:	47c0      	blx	r8
 8018934:	3001      	adds	r0, #1
 8018936:	d103      	bne.n	8018940 <_printf_common+0xac>
 8018938:	f04f 30ff 	mov.w	r0, #4294967295
 801893c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018940:	3501      	adds	r5, #1
 8018942:	e7c6      	b.n	80188d2 <_printf_common+0x3e>
 8018944:	18e1      	adds	r1, r4, r3
 8018946:	1c5a      	adds	r2, r3, #1
 8018948:	2030      	movs	r0, #48	; 0x30
 801894a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801894e:	4422      	add	r2, r4
 8018950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018958:	3302      	adds	r3, #2
 801895a:	e7c7      	b.n	80188ec <_printf_common+0x58>
 801895c:	2301      	movs	r3, #1
 801895e:	4622      	mov	r2, r4
 8018960:	4649      	mov	r1, r9
 8018962:	4638      	mov	r0, r7
 8018964:	47c0      	blx	r8
 8018966:	3001      	adds	r0, #1
 8018968:	d0e6      	beq.n	8018938 <_printf_common+0xa4>
 801896a:	3601      	adds	r6, #1
 801896c:	e7d9      	b.n	8018922 <_printf_common+0x8e>
	...

08018970 <_printf_i>:
 8018970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018974:	7e0f      	ldrb	r7, [r1, #24]
 8018976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018978:	2f78      	cmp	r7, #120	; 0x78
 801897a:	4691      	mov	r9, r2
 801897c:	4680      	mov	r8, r0
 801897e:	460c      	mov	r4, r1
 8018980:	469a      	mov	sl, r3
 8018982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018986:	d807      	bhi.n	8018998 <_printf_i+0x28>
 8018988:	2f62      	cmp	r7, #98	; 0x62
 801898a:	d80a      	bhi.n	80189a2 <_printf_i+0x32>
 801898c:	2f00      	cmp	r7, #0
 801898e:	f000 80d4 	beq.w	8018b3a <_printf_i+0x1ca>
 8018992:	2f58      	cmp	r7, #88	; 0x58
 8018994:	f000 80c0 	beq.w	8018b18 <_printf_i+0x1a8>
 8018998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801899c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80189a0:	e03a      	b.n	8018a18 <_printf_i+0xa8>
 80189a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80189a6:	2b15      	cmp	r3, #21
 80189a8:	d8f6      	bhi.n	8018998 <_printf_i+0x28>
 80189aa:	a101      	add	r1, pc, #4	; (adr r1, 80189b0 <_printf_i+0x40>)
 80189ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80189b0:	08018a09 	.word	0x08018a09
 80189b4:	08018a1d 	.word	0x08018a1d
 80189b8:	08018999 	.word	0x08018999
 80189bc:	08018999 	.word	0x08018999
 80189c0:	08018999 	.word	0x08018999
 80189c4:	08018999 	.word	0x08018999
 80189c8:	08018a1d 	.word	0x08018a1d
 80189cc:	08018999 	.word	0x08018999
 80189d0:	08018999 	.word	0x08018999
 80189d4:	08018999 	.word	0x08018999
 80189d8:	08018999 	.word	0x08018999
 80189dc:	08018b21 	.word	0x08018b21
 80189e0:	08018a49 	.word	0x08018a49
 80189e4:	08018adb 	.word	0x08018adb
 80189e8:	08018999 	.word	0x08018999
 80189ec:	08018999 	.word	0x08018999
 80189f0:	08018b43 	.word	0x08018b43
 80189f4:	08018999 	.word	0x08018999
 80189f8:	08018a49 	.word	0x08018a49
 80189fc:	08018999 	.word	0x08018999
 8018a00:	08018999 	.word	0x08018999
 8018a04:	08018ae3 	.word	0x08018ae3
 8018a08:	682b      	ldr	r3, [r5, #0]
 8018a0a:	1d1a      	adds	r2, r3, #4
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	602a      	str	r2, [r5, #0]
 8018a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a18:	2301      	movs	r3, #1
 8018a1a:	e09f      	b.n	8018b5c <_printf_i+0x1ec>
 8018a1c:	6820      	ldr	r0, [r4, #0]
 8018a1e:	682b      	ldr	r3, [r5, #0]
 8018a20:	0607      	lsls	r7, r0, #24
 8018a22:	f103 0104 	add.w	r1, r3, #4
 8018a26:	6029      	str	r1, [r5, #0]
 8018a28:	d501      	bpl.n	8018a2e <_printf_i+0xbe>
 8018a2a:	681e      	ldr	r6, [r3, #0]
 8018a2c:	e003      	b.n	8018a36 <_printf_i+0xc6>
 8018a2e:	0646      	lsls	r6, r0, #25
 8018a30:	d5fb      	bpl.n	8018a2a <_printf_i+0xba>
 8018a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018a36:	2e00      	cmp	r6, #0
 8018a38:	da03      	bge.n	8018a42 <_printf_i+0xd2>
 8018a3a:	232d      	movs	r3, #45	; 0x2d
 8018a3c:	4276      	negs	r6, r6
 8018a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a42:	485a      	ldr	r0, [pc, #360]	; (8018bac <_printf_i+0x23c>)
 8018a44:	230a      	movs	r3, #10
 8018a46:	e012      	b.n	8018a6e <_printf_i+0xfe>
 8018a48:	682b      	ldr	r3, [r5, #0]
 8018a4a:	6820      	ldr	r0, [r4, #0]
 8018a4c:	1d19      	adds	r1, r3, #4
 8018a4e:	6029      	str	r1, [r5, #0]
 8018a50:	0605      	lsls	r5, r0, #24
 8018a52:	d501      	bpl.n	8018a58 <_printf_i+0xe8>
 8018a54:	681e      	ldr	r6, [r3, #0]
 8018a56:	e002      	b.n	8018a5e <_printf_i+0xee>
 8018a58:	0641      	lsls	r1, r0, #25
 8018a5a:	d5fb      	bpl.n	8018a54 <_printf_i+0xe4>
 8018a5c:	881e      	ldrh	r6, [r3, #0]
 8018a5e:	4853      	ldr	r0, [pc, #332]	; (8018bac <_printf_i+0x23c>)
 8018a60:	2f6f      	cmp	r7, #111	; 0x6f
 8018a62:	bf0c      	ite	eq
 8018a64:	2308      	moveq	r3, #8
 8018a66:	230a      	movne	r3, #10
 8018a68:	2100      	movs	r1, #0
 8018a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a6e:	6865      	ldr	r5, [r4, #4]
 8018a70:	60a5      	str	r5, [r4, #8]
 8018a72:	2d00      	cmp	r5, #0
 8018a74:	bfa2      	ittt	ge
 8018a76:	6821      	ldrge	r1, [r4, #0]
 8018a78:	f021 0104 	bicge.w	r1, r1, #4
 8018a7c:	6021      	strge	r1, [r4, #0]
 8018a7e:	b90e      	cbnz	r6, 8018a84 <_printf_i+0x114>
 8018a80:	2d00      	cmp	r5, #0
 8018a82:	d04b      	beq.n	8018b1c <_printf_i+0x1ac>
 8018a84:	4615      	mov	r5, r2
 8018a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8018a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8018a8e:	5dc7      	ldrb	r7, [r0, r7]
 8018a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018a94:	4637      	mov	r7, r6
 8018a96:	42bb      	cmp	r3, r7
 8018a98:	460e      	mov	r6, r1
 8018a9a:	d9f4      	bls.n	8018a86 <_printf_i+0x116>
 8018a9c:	2b08      	cmp	r3, #8
 8018a9e:	d10b      	bne.n	8018ab8 <_printf_i+0x148>
 8018aa0:	6823      	ldr	r3, [r4, #0]
 8018aa2:	07de      	lsls	r6, r3, #31
 8018aa4:	d508      	bpl.n	8018ab8 <_printf_i+0x148>
 8018aa6:	6923      	ldr	r3, [r4, #16]
 8018aa8:	6861      	ldr	r1, [r4, #4]
 8018aaa:	4299      	cmp	r1, r3
 8018aac:	bfde      	ittt	le
 8018aae:	2330      	movle	r3, #48	; 0x30
 8018ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018ab8:	1b52      	subs	r2, r2, r5
 8018aba:	6122      	str	r2, [r4, #16]
 8018abc:	f8cd a000 	str.w	sl, [sp]
 8018ac0:	464b      	mov	r3, r9
 8018ac2:	aa03      	add	r2, sp, #12
 8018ac4:	4621      	mov	r1, r4
 8018ac6:	4640      	mov	r0, r8
 8018ac8:	f7ff fee4 	bl	8018894 <_printf_common>
 8018acc:	3001      	adds	r0, #1
 8018ace:	d14a      	bne.n	8018b66 <_printf_i+0x1f6>
 8018ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ad4:	b004      	add	sp, #16
 8018ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ada:	6823      	ldr	r3, [r4, #0]
 8018adc:	f043 0320 	orr.w	r3, r3, #32
 8018ae0:	6023      	str	r3, [r4, #0]
 8018ae2:	4833      	ldr	r0, [pc, #204]	; (8018bb0 <_printf_i+0x240>)
 8018ae4:	2778      	movs	r7, #120	; 0x78
 8018ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018aea:	6823      	ldr	r3, [r4, #0]
 8018aec:	6829      	ldr	r1, [r5, #0]
 8018aee:	061f      	lsls	r7, r3, #24
 8018af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8018af4:	d402      	bmi.n	8018afc <_printf_i+0x18c>
 8018af6:	065f      	lsls	r7, r3, #25
 8018af8:	bf48      	it	mi
 8018afa:	b2b6      	uxthmi	r6, r6
 8018afc:	07df      	lsls	r7, r3, #31
 8018afe:	bf48      	it	mi
 8018b00:	f043 0320 	orrmi.w	r3, r3, #32
 8018b04:	6029      	str	r1, [r5, #0]
 8018b06:	bf48      	it	mi
 8018b08:	6023      	strmi	r3, [r4, #0]
 8018b0a:	b91e      	cbnz	r6, 8018b14 <_printf_i+0x1a4>
 8018b0c:	6823      	ldr	r3, [r4, #0]
 8018b0e:	f023 0320 	bic.w	r3, r3, #32
 8018b12:	6023      	str	r3, [r4, #0]
 8018b14:	2310      	movs	r3, #16
 8018b16:	e7a7      	b.n	8018a68 <_printf_i+0xf8>
 8018b18:	4824      	ldr	r0, [pc, #144]	; (8018bac <_printf_i+0x23c>)
 8018b1a:	e7e4      	b.n	8018ae6 <_printf_i+0x176>
 8018b1c:	4615      	mov	r5, r2
 8018b1e:	e7bd      	b.n	8018a9c <_printf_i+0x12c>
 8018b20:	682b      	ldr	r3, [r5, #0]
 8018b22:	6826      	ldr	r6, [r4, #0]
 8018b24:	6961      	ldr	r1, [r4, #20]
 8018b26:	1d18      	adds	r0, r3, #4
 8018b28:	6028      	str	r0, [r5, #0]
 8018b2a:	0635      	lsls	r5, r6, #24
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	d501      	bpl.n	8018b34 <_printf_i+0x1c4>
 8018b30:	6019      	str	r1, [r3, #0]
 8018b32:	e002      	b.n	8018b3a <_printf_i+0x1ca>
 8018b34:	0670      	lsls	r0, r6, #25
 8018b36:	d5fb      	bpl.n	8018b30 <_printf_i+0x1c0>
 8018b38:	8019      	strh	r1, [r3, #0]
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	6123      	str	r3, [r4, #16]
 8018b3e:	4615      	mov	r5, r2
 8018b40:	e7bc      	b.n	8018abc <_printf_i+0x14c>
 8018b42:	682b      	ldr	r3, [r5, #0]
 8018b44:	1d1a      	adds	r2, r3, #4
 8018b46:	602a      	str	r2, [r5, #0]
 8018b48:	681d      	ldr	r5, [r3, #0]
 8018b4a:	6862      	ldr	r2, [r4, #4]
 8018b4c:	2100      	movs	r1, #0
 8018b4e:	4628      	mov	r0, r5
 8018b50:	f7e7 fb3e 	bl	80001d0 <memchr>
 8018b54:	b108      	cbz	r0, 8018b5a <_printf_i+0x1ea>
 8018b56:	1b40      	subs	r0, r0, r5
 8018b58:	6060      	str	r0, [r4, #4]
 8018b5a:	6863      	ldr	r3, [r4, #4]
 8018b5c:	6123      	str	r3, [r4, #16]
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b64:	e7aa      	b.n	8018abc <_printf_i+0x14c>
 8018b66:	6923      	ldr	r3, [r4, #16]
 8018b68:	462a      	mov	r2, r5
 8018b6a:	4649      	mov	r1, r9
 8018b6c:	4640      	mov	r0, r8
 8018b6e:	47d0      	blx	sl
 8018b70:	3001      	adds	r0, #1
 8018b72:	d0ad      	beq.n	8018ad0 <_printf_i+0x160>
 8018b74:	6823      	ldr	r3, [r4, #0]
 8018b76:	079b      	lsls	r3, r3, #30
 8018b78:	d413      	bmi.n	8018ba2 <_printf_i+0x232>
 8018b7a:	68e0      	ldr	r0, [r4, #12]
 8018b7c:	9b03      	ldr	r3, [sp, #12]
 8018b7e:	4298      	cmp	r0, r3
 8018b80:	bfb8      	it	lt
 8018b82:	4618      	movlt	r0, r3
 8018b84:	e7a6      	b.n	8018ad4 <_printf_i+0x164>
 8018b86:	2301      	movs	r3, #1
 8018b88:	4632      	mov	r2, r6
 8018b8a:	4649      	mov	r1, r9
 8018b8c:	4640      	mov	r0, r8
 8018b8e:	47d0      	blx	sl
 8018b90:	3001      	adds	r0, #1
 8018b92:	d09d      	beq.n	8018ad0 <_printf_i+0x160>
 8018b94:	3501      	adds	r5, #1
 8018b96:	68e3      	ldr	r3, [r4, #12]
 8018b98:	9903      	ldr	r1, [sp, #12]
 8018b9a:	1a5b      	subs	r3, r3, r1
 8018b9c:	42ab      	cmp	r3, r5
 8018b9e:	dcf2      	bgt.n	8018b86 <_printf_i+0x216>
 8018ba0:	e7eb      	b.n	8018b7a <_printf_i+0x20a>
 8018ba2:	2500      	movs	r5, #0
 8018ba4:	f104 0619 	add.w	r6, r4, #25
 8018ba8:	e7f5      	b.n	8018b96 <_printf_i+0x226>
 8018baa:	bf00      	nop
 8018bac:	0801bdb9 	.word	0x0801bdb9
 8018bb0:	0801bdca 	.word	0x0801bdca

08018bb4 <__sflush_r>:
 8018bb4:	898a      	ldrh	r2, [r1, #12]
 8018bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bba:	4605      	mov	r5, r0
 8018bbc:	0710      	lsls	r0, r2, #28
 8018bbe:	460c      	mov	r4, r1
 8018bc0:	d458      	bmi.n	8018c74 <__sflush_r+0xc0>
 8018bc2:	684b      	ldr	r3, [r1, #4]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	dc05      	bgt.n	8018bd4 <__sflush_r+0x20>
 8018bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	dc02      	bgt.n	8018bd4 <__sflush_r+0x20>
 8018bce:	2000      	movs	r0, #0
 8018bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bd6:	2e00      	cmp	r6, #0
 8018bd8:	d0f9      	beq.n	8018bce <__sflush_r+0x1a>
 8018bda:	2300      	movs	r3, #0
 8018bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018be0:	682f      	ldr	r7, [r5, #0]
 8018be2:	6a21      	ldr	r1, [r4, #32]
 8018be4:	602b      	str	r3, [r5, #0]
 8018be6:	d032      	beq.n	8018c4e <__sflush_r+0x9a>
 8018be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018bea:	89a3      	ldrh	r3, [r4, #12]
 8018bec:	075a      	lsls	r2, r3, #29
 8018bee:	d505      	bpl.n	8018bfc <__sflush_r+0x48>
 8018bf0:	6863      	ldr	r3, [r4, #4]
 8018bf2:	1ac0      	subs	r0, r0, r3
 8018bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018bf6:	b10b      	cbz	r3, 8018bfc <__sflush_r+0x48>
 8018bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018bfa:	1ac0      	subs	r0, r0, r3
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	4602      	mov	r2, r0
 8018c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c02:	6a21      	ldr	r1, [r4, #32]
 8018c04:	4628      	mov	r0, r5
 8018c06:	47b0      	blx	r6
 8018c08:	1c43      	adds	r3, r0, #1
 8018c0a:	89a3      	ldrh	r3, [r4, #12]
 8018c0c:	d106      	bne.n	8018c1c <__sflush_r+0x68>
 8018c0e:	6829      	ldr	r1, [r5, #0]
 8018c10:	291d      	cmp	r1, #29
 8018c12:	d82b      	bhi.n	8018c6c <__sflush_r+0xb8>
 8018c14:	4a29      	ldr	r2, [pc, #164]	; (8018cbc <__sflush_r+0x108>)
 8018c16:	410a      	asrs	r2, r1
 8018c18:	07d6      	lsls	r6, r2, #31
 8018c1a:	d427      	bmi.n	8018c6c <__sflush_r+0xb8>
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	6062      	str	r2, [r4, #4]
 8018c20:	04d9      	lsls	r1, r3, #19
 8018c22:	6922      	ldr	r2, [r4, #16]
 8018c24:	6022      	str	r2, [r4, #0]
 8018c26:	d504      	bpl.n	8018c32 <__sflush_r+0x7e>
 8018c28:	1c42      	adds	r2, r0, #1
 8018c2a:	d101      	bne.n	8018c30 <__sflush_r+0x7c>
 8018c2c:	682b      	ldr	r3, [r5, #0]
 8018c2e:	b903      	cbnz	r3, 8018c32 <__sflush_r+0x7e>
 8018c30:	6560      	str	r0, [r4, #84]	; 0x54
 8018c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c34:	602f      	str	r7, [r5, #0]
 8018c36:	2900      	cmp	r1, #0
 8018c38:	d0c9      	beq.n	8018bce <__sflush_r+0x1a>
 8018c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c3e:	4299      	cmp	r1, r3
 8018c40:	d002      	beq.n	8018c48 <__sflush_r+0x94>
 8018c42:	4628      	mov	r0, r5
 8018c44:	f7ff fbe2 	bl	801840c <_free_r>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8018c4c:	e7c0      	b.n	8018bd0 <__sflush_r+0x1c>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	4628      	mov	r0, r5
 8018c52:	47b0      	blx	r6
 8018c54:	1c41      	adds	r1, r0, #1
 8018c56:	d1c8      	bne.n	8018bea <__sflush_r+0x36>
 8018c58:	682b      	ldr	r3, [r5, #0]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d0c5      	beq.n	8018bea <__sflush_r+0x36>
 8018c5e:	2b1d      	cmp	r3, #29
 8018c60:	d001      	beq.n	8018c66 <__sflush_r+0xb2>
 8018c62:	2b16      	cmp	r3, #22
 8018c64:	d101      	bne.n	8018c6a <__sflush_r+0xb6>
 8018c66:	602f      	str	r7, [r5, #0]
 8018c68:	e7b1      	b.n	8018bce <__sflush_r+0x1a>
 8018c6a:	89a3      	ldrh	r3, [r4, #12]
 8018c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c70:	81a3      	strh	r3, [r4, #12]
 8018c72:	e7ad      	b.n	8018bd0 <__sflush_r+0x1c>
 8018c74:	690f      	ldr	r7, [r1, #16]
 8018c76:	2f00      	cmp	r7, #0
 8018c78:	d0a9      	beq.n	8018bce <__sflush_r+0x1a>
 8018c7a:	0793      	lsls	r3, r2, #30
 8018c7c:	680e      	ldr	r6, [r1, #0]
 8018c7e:	bf08      	it	eq
 8018c80:	694b      	ldreq	r3, [r1, #20]
 8018c82:	600f      	str	r7, [r1, #0]
 8018c84:	bf18      	it	ne
 8018c86:	2300      	movne	r3, #0
 8018c88:	eba6 0807 	sub.w	r8, r6, r7
 8018c8c:	608b      	str	r3, [r1, #8]
 8018c8e:	f1b8 0f00 	cmp.w	r8, #0
 8018c92:	dd9c      	ble.n	8018bce <__sflush_r+0x1a>
 8018c94:	6a21      	ldr	r1, [r4, #32]
 8018c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c98:	4643      	mov	r3, r8
 8018c9a:	463a      	mov	r2, r7
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	47b0      	blx	r6
 8018ca0:	2800      	cmp	r0, #0
 8018ca2:	dc06      	bgt.n	8018cb2 <__sflush_r+0xfe>
 8018ca4:	89a3      	ldrh	r3, [r4, #12]
 8018ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018caa:	81a3      	strh	r3, [r4, #12]
 8018cac:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb0:	e78e      	b.n	8018bd0 <__sflush_r+0x1c>
 8018cb2:	4407      	add	r7, r0
 8018cb4:	eba8 0800 	sub.w	r8, r8, r0
 8018cb8:	e7e9      	b.n	8018c8e <__sflush_r+0xda>
 8018cba:	bf00      	nop
 8018cbc:	dfbffffe 	.word	0xdfbffffe

08018cc0 <_fflush_r>:
 8018cc0:	b538      	push	{r3, r4, r5, lr}
 8018cc2:	690b      	ldr	r3, [r1, #16]
 8018cc4:	4605      	mov	r5, r0
 8018cc6:	460c      	mov	r4, r1
 8018cc8:	b913      	cbnz	r3, 8018cd0 <_fflush_r+0x10>
 8018cca:	2500      	movs	r5, #0
 8018ccc:	4628      	mov	r0, r5
 8018cce:	bd38      	pop	{r3, r4, r5, pc}
 8018cd0:	b118      	cbz	r0, 8018cda <_fflush_r+0x1a>
 8018cd2:	6a03      	ldr	r3, [r0, #32]
 8018cd4:	b90b      	cbnz	r3, 8018cda <_fflush_r+0x1a>
 8018cd6:	f7ff fa43 	bl	8018160 <__sinit>
 8018cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d0f3      	beq.n	8018cca <_fflush_r+0xa>
 8018ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018ce4:	07d0      	lsls	r0, r2, #31
 8018ce6:	d404      	bmi.n	8018cf2 <_fflush_r+0x32>
 8018ce8:	0599      	lsls	r1, r3, #22
 8018cea:	d402      	bmi.n	8018cf2 <_fflush_r+0x32>
 8018cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cee:	f7ff fb5e 	bl	80183ae <__retarget_lock_acquire_recursive>
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	4621      	mov	r1, r4
 8018cf6:	f7ff ff5d 	bl	8018bb4 <__sflush_r>
 8018cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018cfc:	07da      	lsls	r2, r3, #31
 8018cfe:	4605      	mov	r5, r0
 8018d00:	d4e4      	bmi.n	8018ccc <_fflush_r+0xc>
 8018d02:	89a3      	ldrh	r3, [r4, #12]
 8018d04:	059b      	lsls	r3, r3, #22
 8018d06:	d4e1      	bmi.n	8018ccc <_fflush_r+0xc>
 8018d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d0a:	f7ff fb51 	bl	80183b0 <__retarget_lock_release_recursive>
 8018d0e:	e7dd      	b.n	8018ccc <_fflush_r+0xc>

08018d10 <fiprintf>:
 8018d10:	b40e      	push	{r1, r2, r3}
 8018d12:	b503      	push	{r0, r1, lr}
 8018d14:	4601      	mov	r1, r0
 8018d16:	ab03      	add	r3, sp, #12
 8018d18:	4805      	ldr	r0, [pc, #20]	; (8018d30 <fiprintf+0x20>)
 8018d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d1e:	6800      	ldr	r0, [r0, #0]
 8018d20:	9301      	str	r3, [sp, #4]
 8018d22:	f7ff fc9d 	bl	8018660 <_vfiprintf_r>
 8018d26:	b002      	add	sp, #8
 8018d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d2c:	b003      	add	sp, #12
 8018d2e:	4770      	bx	lr
 8018d30:	20000258 	.word	0x20000258

08018d34 <__swbuf_r>:
 8018d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d36:	460e      	mov	r6, r1
 8018d38:	4614      	mov	r4, r2
 8018d3a:	4605      	mov	r5, r0
 8018d3c:	b118      	cbz	r0, 8018d46 <__swbuf_r+0x12>
 8018d3e:	6a03      	ldr	r3, [r0, #32]
 8018d40:	b90b      	cbnz	r3, 8018d46 <__swbuf_r+0x12>
 8018d42:	f7ff fa0d 	bl	8018160 <__sinit>
 8018d46:	69a3      	ldr	r3, [r4, #24]
 8018d48:	60a3      	str	r3, [r4, #8]
 8018d4a:	89a3      	ldrh	r3, [r4, #12]
 8018d4c:	071a      	lsls	r2, r3, #28
 8018d4e:	d525      	bpl.n	8018d9c <__swbuf_r+0x68>
 8018d50:	6923      	ldr	r3, [r4, #16]
 8018d52:	b31b      	cbz	r3, 8018d9c <__swbuf_r+0x68>
 8018d54:	6823      	ldr	r3, [r4, #0]
 8018d56:	6922      	ldr	r2, [r4, #16]
 8018d58:	1a98      	subs	r0, r3, r2
 8018d5a:	6963      	ldr	r3, [r4, #20]
 8018d5c:	b2f6      	uxtb	r6, r6
 8018d5e:	4283      	cmp	r3, r0
 8018d60:	4637      	mov	r7, r6
 8018d62:	dc04      	bgt.n	8018d6e <__swbuf_r+0x3a>
 8018d64:	4621      	mov	r1, r4
 8018d66:	4628      	mov	r0, r5
 8018d68:	f7ff ffaa 	bl	8018cc0 <_fflush_r>
 8018d6c:	b9e0      	cbnz	r0, 8018da8 <__swbuf_r+0x74>
 8018d6e:	68a3      	ldr	r3, [r4, #8]
 8018d70:	3b01      	subs	r3, #1
 8018d72:	60a3      	str	r3, [r4, #8]
 8018d74:	6823      	ldr	r3, [r4, #0]
 8018d76:	1c5a      	adds	r2, r3, #1
 8018d78:	6022      	str	r2, [r4, #0]
 8018d7a:	701e      	strb	r6, [r3, #0]
 8018d7c:	6962      	ldr	r2, [r4, #20]
 8018d7e:	1c43      	adds	r3, r0, #1
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d004      	beq.n	8018d8e <__swbuf_r+0x5a>
 8018d84:	89a3      	ldrh	r3, [r4, #12]
 8018d86:	07db      	lsls	r3, r3, #31
 8018d88:	d506      	bpl.n	8018d98 <__swbuf_r+0x64>
 8018d8a:	2e0a      	cmp	r6, #10
 8018d8c:	d104      	bne.n	8018d98 <__swbuf_r+0x64>
 8018d8e:	4621      	mov	r1, r4
 8018d90:	4628      	mov	r0, r5
 8018d92:	f7ff ff95 	bl	8018cc0 <_fflush_r>
 8018d96:	b938      	cbnz	r0, 8018da8 <__swbuf_r+0x74>
 8018d98:	4638      	mov	r0, r7
 8018d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d9c:	4621      	mov	r1, r4
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f000 f806 	bl	8018db0 <__swsetup_r>
 8018da4:	2800      	cmp	r0, #0
 8018da6:	d0d5      	beq.n	8018d54 <__swbuf_r+0x20>
 8018da8:	f04f 37ff 	mov.w	r7, #4294967295
 8018dac:	e7f4      	b.n	8018d98 <__swbuf_r+0x64>
	...

08018db0 <__swsetup_r>:
 8018db0:	b538      	push	{r3, r4, r5, lr}
 8018db2:	4b2a      	ldr	r3, [pc, #168]	; (8018e5c <__swsetup_r+0xac>)
 8018db4:	4605      	mov	r5, r0
 8018db6:	6818      	ldr	r0, [r3, #0]
 8018db8:	460c      	mov	r4, r1
 8018dba:	b118      	cbz	r0, 8018dc4 <__swsetup_r+0x14>
 8018dbc:	6a03      	ldr	r3, [r0, #32]
 8018dbe:	b90b      	cbnz	r3, 8018dc4 <__swsetup_r+0x14>
 8018dc0:	f7ff f9ce 	bl	8018160 <__sinit>
 8018dc4:	89a3      	ldrh	r3, [r4, #12]
 8018dc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018dca:	0718      	lsls	r0, r3, #28
 8018dcc:	d422      	bmi.n	8018e14 <__swsetup_r+0x64>
 8018dce:	06d9      	lsls	r1, r3, #27
 8018dd0:	d407      	bmi.n	8018de2 <__swsetup_r+0x32>
 8018dd2:	2309      	movs	r3, #9
 8018dd4:	602b      	str	r3, [r5, #0]
 8018dd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018dda:	81a3      	strh	r3, [r4, #12]
 8018ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8018de0:	e034      	b.n	8018e4c <__swsetup_r+0x9c>
 8018de2:	0758      	lsls	r0, r3, #29
 8018de4:	d512      	bpl.n	8018e0c <__swsetup_r+0x5c>
 8018de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018de8:	b141      	cbz	r1, 8018dfc <__swsetup_r+0x4c>
 8018dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018dee:	4299      	cmp	r1, r3
 8018df0:	d002      	beq.n	8018df8 <__swsetup_r+0x48>
 8018df2:	4628      	mov	r0, r5
 8018df4:	f7ff fb0a 	bl	801840c <_free_r>
 8018df8:	2300      	movs	r3, #0
 8018dfa:	6363      	str	r3, [r4, #52]	; 0x34
 8018dfc:	89a3      	ldrh	r3, [r4, #12]
 8018dfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e02:	81a3      	strh	r3, [r4, #12]
 8018e04:	2300      	movs	r3, #0
 8018e06:	6063      	str	r3, [r4, #4]
 8018e08:	6923      	ldr	r3, [r4, #16]
 8018e0a:	6023      	str	r3, [r4, #0]
 8018e0c:	89a3      	ldrh	r3, [r4, #12]
 8018e0e:	f043 0308 	orr.w	r3, r3, #8
 8018e12:	81a3      	strh	r3, [r4, #12]
 8018e14:	6923      	ldr	r3, [r4, #16]
 8018e16:	b94b      	cbnz	r3, 8018e2c <__swsetup_r+0x7c>
 8018e18:	89a3      	ldrh	r3, [r4, #12]
 8018e1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e22:	d003      	beq.n	8018e2c <__swsetup_r+0x7c>
 8018e24:	4621      	mov	r1, r4
 8018e26:	4628      	mov	r0, r5
 8018e28:	f000 f857 	bl	8018eda <__smakebuf_r>
 8018e2c:	89a0      	ldrh	r0, [r4, #12]
 8018e2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e32:	f010 0301 	ands.w	r3, r0, #1
 8018e36:	d00a      	beq.n	8018e4e <__swsetup_r+0x9e>
 8018e38:	2300      	movs	r3, #0
 8018e3a:	60a3      	str	r3, [r4, #8]
 8018e3c:	6963      	ldr	r3, [r4, #20]
 8018e3e:	425b      	negs	r3, r3
 8018e40:	61a3      	str	r3, [r4, #24]
 8018e42:	6923      	ldr	r3, [r4, #16]
 8018e44:	b943      	cbnz	r3, 8018e58 <__swsetup_r+0xa8>
 8018e46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018e4a:	d1c4      	bne.n	8018dd6 <__swsetup_r+0x26>
 8018e4c:	bd38      	pop	{r3, r4, r5, pc}
 8018e4e:	0781      	lsls	r1, r0, #30
 8018e50:	bf58      	it	pl
 8018e52:	6963      	ldrpl	r3, [r4, #20]
 8018e54:	60a3      	str	r3, [r4, #8]
 8018e56:	e7f4      	b.n	8018e42 <__swsetup_r+0x92>
 8018e58:	2000      	movs	r0, #0
 8018e5a:	e7f7      	b.n	8018e4c <__swsetup_r+0x9c>
 8018e5c:	20000258 	.word	0x20000258

08018e60 <_sbrk_r>:
 8018e60:	b538      	push	{r3, r4, r5, lr}
 8018e62:	4d06      	ldr	r5, [pc, #24]	; (8018e7c <_sbrk_r+0x1c>)
 8018e64:	2300      	movs	r3, #0
 8018e66:	4604      	mov	r4, r0
 8018e68:	4608      	mov	r0, r1
 8018e6a:	602b      	str	r3, [r5, #0]
 8018e6c:	f7e7 fe98 	bl	8000ba0 <_sbrk>
 8018e70:	1c43      	adds	r3, r0, #1
 8018e72:	d102      	bne.n	8018e7a <_sbrk_r+0x1a>
 8018e74:	682b      	ldr	r3, [r5, #0]
 8018e76:	b103      	cbz	r3, 8018e7a <_sbrk_r+0x1a>
 8018e78:	6023      	str	r3, [r4, #0]
 8018e7a:	bd38      	pop	{r3, r4, r5, pc}
 8018e7c:	2000a778 	.word	0x2000a778

08018e80 <abort>:
 8018e80:	b508      	push	{r3, lr}
 8018e82:	2006      	movs	r0, #6
 8018e84:	f000 f88e 	bl	8018fa4 <raise>
 8018e88:	2001      	movs	r0, #1
 8018e8a:	f7e7 fe11 	bl	8000ab0 <_exit>

08018e8e <__swhatbuf_r>:
 8018e8e:	b570      	push	{r4, r5, r6, lr}
 8018e90:	460c      	mov	r4, r1
 8018e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e96:	2900      	cmp	r1, #0
 8018e98:	b096      	sub	sp, #88	; 0x58
 8018e9a:	4615      	mov	r5, r2
 8018e9c:	461e      	mov	r6, r3
 8018e9e:	da0d      	bge.n	8018ebc <__swhatbuf_r+0x2e>
 8018ea0:	89a3      	ldrh	r3, [r4, #12]
 8018ea2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018ea6:	f04f 0100 	mov.w	r1, #0
 8018eaa:	bf0c      	ite	eq
 8018eac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018eb0:	2340      	movne	r3, #64	; 0x40
 8018eb2:	2000      	movs	r0, #0
 8018eb4:	6031      	str	r1, [r6, #0]
 8018eb6:	602b      	str	r3, [r5, #0]
 8018eb8:	b016      	add	sp, #88	; 0x58
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	466a      	mov	r2, sp
 8018ebe:	f000 f879 	bl	8018fb4 <_fstat_r>
 8018ec2:	2800      	cmp	r0, #0
 8018ec4:	dbec      	blt.n	8018ea0 <__swhatbuf_r+0x12>
 8018ec6:	9901      	ldr	r1, [sp, #4]
 8018ec8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018ecc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018ed0:	4259      	negs	r1, r3
 8018ed2:	4159      	adcs	r1, r3
 8018ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ed8:	e7eb      	b.n	8018eb2 <__swhatbuf_r+0x24>

08018eda <__smakebuf_r>:
 8018eda:	898b      	ldrh	r3, [r1, #12]
 8018edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ede:	079d      	lsls	r5, r3, #30
 8018ee0:	4606      	mov	r6, r0
 8018ee2:	460c      	mov	r4, r1
 8018ee4:	d507      	bpl.n	8018ef6 <__smakebuf_r+0x1c>
 8018ee6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018eea:	6023      	str	r3, [r4, #0]
 8018eec:	6123      	str	r3, [r4, #16]
 8018eee:	2301      	movs	r3, #1
 8018ef0:	6163      	str	r3, [r4, #20]
 8018ef2:	b002      	add	sp, #8
 8018ef4:	bd70      	pop	{r4, r5, r6, pc}
 8018ef6:	ab01      	add	r3, sp, #4
 8018ef8:	466a      	mov	r2, sp
 8018efa:	f7ff ffc8 	bl	8018e8e <__swhatbuf_r>
 8018efe:	9900      	ldr	r1, [sp, #0]
 8018f00:	4605      	mov	r5, r0
 8018f02:	4630      	mov	r0, r6
 8018f04:	f7ff faf6 	bl	80184f4 <_malloc_r>
 8018f08:	b948      	cbnz	r0, 8018f1e <__smakebuf_r+0x44>
 8018f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f0e:	059a      	lsls	r2, r3, #22
 8018f10:	d4ef      	bmi.n	8018ef2 <__smakebuf_r+0x18>
 8018f12:	f023 0303 	bic.w	r3, r3, #3
 8018f16:	f043 0302 	orr.w	r3, r3, #2
 8018f1a:	81a3      	strh	r3, [r4, #12]
 8018f1c:	e7e3      	b.n	8018ee6 <__smakebuf_r+0xc>
 8018f1e:	89a3      	ldrh	r3, [r4, #12]
 8018f20:	6020      	str	r0, [r4, #0]
 8018f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f26:	81a3      	strh	r3, [r4, #12]
 8018f28:	9b00      	ldr	r3, [sp, #0]
 8018f2a:	6163      	str	r3, [r4, #20]
 8018f2c:	9b01      	ldr	r3, [sp, #4]
 8018f2e:	6120      	str	r0, [r4, #16]
 8018f30:	b15b      	cbz	r3, 8018f4a <__smakebuf_r+0x70>
 8018f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f36:	4630      	mov	r0, r6
 8018f38:	f000 f84e 	bl	8018fd8 <_isatty_r>
 8018f3c:	b128      	cbz	r0, 8018f4a <__smakebuf_r+0x70>
 8018f3e:	89a3      	ldrh	r3, [r4, #12]
 8018f40:	f023 0303 	bic.w	r3, r3, #3
 8018f44:	f043 0301 	orr.w	r3, r3, #1
 8018f48:	81a3      	strh	r3, [r4, #12]
 8018f4a:	89a3      	ldrh	r3, [r4, #12]
 8018f4c:	431d      	orrs	r5, r3
 8018f4e:	81a5      	strh	r5, [r4, #12]
 8018f50:	e7cf      	b.n	8018ef2 <__smakebuf_r+0x18>

08018f52 <_raise_r>:
 8018f52:	291f      	cmp	r1, #31
 8018f54:	b538      	push	{r3, r4, r5, lr}
 8018f56:	4604      	mov	r4, r0
 8018f58:	460d      	mov	r5, r1
 8018f5a:	d904      	bls.n	8018f66 <_raise_r+0x14>
 8018f5c:	2316      	movs	r3, #22
 8018f5e:	6003      	str	r3, [r0, #0]
 8018f60:	f04f 30ff 	mov.w	r0, #4294967295
 8018f64:	bd38      	pop	{r3, r4, r5, pc}
 8018f66:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018f68:	b112      	cbz	r2, 8018f70 <_raise_r+0x1e>
 8018f6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f6e:	b94b      	cbnz	r3, 8018f84 <_raise_r+0x32>
 8018f70:	4620      	mov	r0, r4
 8018f72:	f000 f853 	bl	801901c <_getpid_r>
 8018f76:	462a      	mov	r2, r5
 8018f78:	4601      	mov	r1, r0
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f80:	f000 b83a 	b.w	8018ff8 <_kill_r>
 8018f84:	2b01      	cmp	r3, #1
 8018f86:	d00a      	beq.n	8018f9e <_raise_r+0x4c>
 8018f88:	1c59      	adds	r1, r3, #1
 8018f8a:	d103      	bne.n	8018f94 <_raise_r+0x42>
 8018f8c:	2316      	movs	r3, #22
 8018f8e:	6003      	str	r3, [r0, #0]
 8018f90:	2001      	movs	r0, #1
 8018f92:	e7e7      	b.n	8018f64 <_raise_r+0x12>
 8018f94:	2400      	movs	r4, #0
 8018f96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018f9a:	4628      	mov	r0, r5
 8018f9c:	4798      	blx	r3
 8018f9e:	2000      	movs	r0, #0
 8018fa0:	e7e0      	b.n	8018f64 <_raise_r+0x12>
	...

08018fa4 <raise>:
 8018fa4:	4b02      	ldr	r3, [pc, #8]	; (8018fb0 <raise+0xc>)
 8018fa6:	4601      	mov	r1, r0
 8018fa8:	6818      	ldr	r0, [r3, #0]
 8018faa:	f7ff bfd2 	b.w	8018f52 <_raise_r>
 8018fae:	bf00      	nop
 8018fb0:	20000258 	.word	0x20000258

08018fb4 <_fstat_r>:
 8018fb4:	b538      	push	{r3, r4, r5, lr}
 8018fb6:	4d07      	ldr	r5, [pc, #28]	; (8018fd4 <_fstat_r+0x20>)
 8018fb8:	2300      	movs	r3, #0
 8018fba:	4604      	mov	r4, r0
 8018fbc:	4608      	mov	r0, r1
 8018fbe:	4611      	mov	r1, r2
 8018fc0:	602b      	str	r3, [r5, #0]
 8018fc2:	f7e7 fdc4 	bl	8000b4e <_fstat>
 8018fc6:	1c43      	adds	r3, r0, #1
 8018fc8:	d102      	bne.n	8018fd0 <_fstat_r+0x1c>
 8018fca:	682b      	ldr	r3, [r5, #0]
 8018fcc:	b103      	cbz	r3, 8018fd0 <_fstat_r+0x1c>
 8018fce:	6023      	str	r3, [r4, #0]
 8018fd0:	bd38      	pop	{r3, r4, r5, pc}
 8018fd2:	bf00      	nop
 8018fd4:	2000a778 	.word	0x2000a778

08018fd8 <_isatty_r>:
 8018fd8:	b538      	push	{r3, r4, r5, lr}
 8018fda:	4d06      	ldr	r5, [pc, #24]	; (8018ff4 <_isatty_r+0x1c>)
 8018fdc:	2300      	movs	r3, #0
 8018fde:	4604      	mov	r4, r0
 8018fe0:	4608      	mov	r0, r1
 8018fe2:	602b      	str	r3, [r5, #0]
 8018fe4:	f7e7 fdc3 	bl	8000b6e <_isatty>
 8018fe8:	1c43      	adds	r3, r0, #1
 8018fea:	d102      	bne.n	8018ff2 <_isatty_r+0x1a>
 8018fec:	682b      	ldr	r3, [r5, #0]
 8018fee:	b103      	cbz	r3, 8018ff2 <_isatty_r+0x1a>
 8018ff0:	6023      	str	r3, [r4, #0]
 8018ff2:	bd38      	pop	{r3, r4, r5, pc}
 8018ff4:	2000a778 	.word	0x2000a778

08018ff8 <_kill_r>:
 8018ff8:	b538      	push	{r3, r4, r5, lr}
 8018ffa:	4d07      	ldr	r5, [pc, #28]	; (8019018 <_kill_r+0x20>)
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	4604      	mov	r4, r0
 8019000:	4608      	mov	r0, r1
 8019002:	4611      	mov	r1, r2
 8019004:	602b      	str	r3, [r5, #0]
 8019006:	f7e7 fd41 	bl	8000a8c <_kill>
 801900a:	1c43      	adds	r3, r0, #1
 801900c:	d102      	bne.n	8019014 <_kill_r+0x1c>
 801900e:	682b      	ldr	r3, [r5, #0]
 8019010:	b103      	cbz	r3, 8019014 <_kill_r+0x1c>
 8019012:	6023      	str	r3, [r4, #0]
 8019014:	bd38      	pop	{r3, r4, r5, pc}
 8019016:	bf00      	nop
 8019018:	2000a778 	.word	0x2000a778

0801901c <_getpid_r>:
 801901c:	f7e7 bd2e 	b.w	8000a7c <_getpid>

08019020 <_init>:
 8019020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019022:	bf00      	nop
 8019024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019026:	bc08      	pop	{r3}
 8019028:	469e      	mov	lr, r3
 801902a:	4770      	bx	lr

0801902c <_fini>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	bf00      	nop
 8019030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019032:	bc08      	pop	{r3}
 8019034:	469e      	mov	lr, r3
 8019036:	4770      	bx	lr
