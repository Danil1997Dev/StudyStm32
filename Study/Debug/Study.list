
Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d8c  0801c6d0  0801c6d0  0002c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f45c  0801f45c  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  0801f45c  0801f45c  0002f45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f464  0801f464  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f464  0801f464  0002f464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f468  0801f468  0002f468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801f46c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          0000aa18  20000248  20000248  00030248  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ac60  2000ac60  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 14 .debug_info   000317f6  00000000  00000000  000302bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008997  00000000  00000000  00061ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024b8  00000000  00000000  0006a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c95  00000000  00000000  0006c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034802  00000000  00000000  0006e595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003dc90  00000000  00000000  000a2d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e89b9  00000000  00000000  000e0a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009e2c  00000000  00000000  001c93e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001d320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c6b8 	.word	0x0801c6b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0801c6b8 	.word	0x0801c6b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09e      	sub	sp, #120	; 0x78
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fe3f 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f8c1 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f99d 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f973 	bl	8000868 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000582:	f000 f947 	bl	8000814 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000586:	f01a f9b3 	bl	801a8f0 <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 800058a:	f009 fadd 	bl	8009b48 <MX_LWIP_Init>
  MX_FATFS_Init();
 800058e:	f009 f92b 	bl	80097e8 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8000592:	f000 f91f 	bl	80007d4 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
  HAL_UART_Receive_DMA(&huart3, RX_buff, 15);
 8000596:	220f      	movs	r2, #15
 8000598:	494c      	ldr	r1, [pc, #304]	; (80006cc <main+0x160>)
 800059a:	484d      	ldr	r0, [pc, #308]	; (80006d0 <main+0x164>)
 800059c:	f005 fffc 	bl	8006598 <HAL_UART_Receive_DMA>
  //tcp_server_init();
  //tcp_client_init();
//  MX_LWIP_Process();
  if (FATFS_LinkDriver(&SD_Driver, "") == FR_OK)
 80005a0:	494c      	ldr	r1, [pc, #304]	; (80006d4 <main+0x168>)
 80005a2:	484d      	ldr	r0, [pc, #308]	; (80006d8 <main+0x16c>)
 80005a4:	f010 fc86 	bl	8010eb4 <FATFS_LinkDriver>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d12b      	bne.n	8000606 <main+0x9a>
  {
	  res_fs = f_mount(&fs, (const TCHAR*)"", 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	4948      	ldr	r1, [pc, #288]	; (80006d4 <main+0x168>)
 80005b2:	484a      	ldr	r0, [pc, #296]	; (80006dc <main+0x170>)
 80005b4:	f00f fd1a 	bl	800ffec <f_mount>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <main+0x174>)
 80005be:	701a      	strb	r2, [r3, #0]
	  if (res_fs == FR_OK)
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <main+0x174>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d11e      	bne.n	8000606 <main+0x9a>
	  {
		  res_fs = f_open(&file, "FIRST.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_OPEN_ALWAYS | FA_READ);
 80005c8:	221b      	movs	r2, #27
 80005ca:	4946      	ldr	r1, [pc, #280]	; (80006e4 <main+0x178>)
 80005cc:	4846      	ldr	r0, [pc, #280]	; (80006e8 <main+0x17c>)
 80005ce:	f00f fd53 	bl	8010078 <f_open>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <main+0x174>)
 80005d8:	701a      	strb	r2, [r3, #0]
		  if (res_fs == FR_OK)
 80005da:	4b41      	ldr	r3, [pc, #260]	; (80006e0 <main+0x174>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d111      	bne.n	8000606 <main+0x9a>
		  {
			  UINT cw;
			  res_fs = f_write(&file, "Hello on SD!!!", sizeof("Hello on SD!!!"), (void *)&cw);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	220f      	movs	r2, #15
 80005e8:	4940      	ldr	r1, [pc, #256]	; (80006ec <main+0x180>)
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <main+0x17c>)
 80005ec:	f010 f841 	bl	8010672 <f_write>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <main+0x174>)
 80005f6:	701a      	strb	r2, [r3, #0]
			  if (res_fs == FR_OK)
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <main+0x174>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <main+0x9a>
			  {
				  f_close(&file);
 8000600:	4839      	ldr	r0, [pc, #228]	; (80006e8 <main+0x17c>)
 8000602:	f010 fa29 	bl	8010a58 <f_close>
  //res_fs = f_readdir("", fno)

  DIR dir;
  FILINFO fio;

  if (f_opendir(&dir, "MyDir") == FR_OK)
 8000606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060a:	4939      	ldr	r1, [pc, #228]	; (80006f0 <main+0x184>)
 800060c:	4618      	mov	r0, r3
 800060e:	f010 fa4d 	bl	8010aac <f_opendir>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11f      	bne.n	8000658 <main+0xec>
  {
	 if (f_readdir(&dir, &fio) == FR_OK)
 8000618:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800061c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f010 fab5 	bl	8010b92 <f_readdir>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d12e      	bne.n	800068c <main+0x120>
	 {

		  if(f_open(&file, "MyDir/MyFile.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ | FA_OPEN_ALWAYS) == FR_OK)
 800062e:	221b      	movs	r2, #27
 8000630:	4930      	ldr	r1, [pc, #192]	; (80006f4 <main+0x188>)
 8000632:	482d      	ldr	r0, [pc, #180]	; (80006e8 <main+0x17c>)
 8000634:	f00f fd20 	bl	8010078 <f_open>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d126      	bne.n	800068c <main+0x120>
		  {
			  UINT cw;
			  if(f_write(&file, "0123456789 ", sizeof("0123456789 "), cw) == FR_OK)
 800063e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000640:	220c      	movs	r2, #12
 8000642:	492d      	ldr	r1, [pc, #180]	; (80006f8 <main+0x18c>)
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <main+0x17c>)
 8000646:	f010 f814 	bl	8010672 <f_write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11d      	bne.n	800068c <main+0x120>
			  {
				  f_close(&file);
 8000650:	4825      	ldr	r0, [pc, #148]	; (80006e8 <main+0x17c>)
 8000652:	f010 fa01 	bl	8010a58 <f_close>
 8000656:	e019      	b.n	800068c <main+0x120>

	  }
  }
  else
  {
	  if (f_mkdir("MyDir"))
 8000658:	4825      	ldr	r0, [pc, #148]	; (80006f0 <main+0x184>)
 800065a:	f010 fad7 	bl	8010c0c <f_mkdir>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <main+0x120>
	  {
		  if(f_open(&file, "MyDir/MyFile.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ | FA_OPEN_ALWAYS) == FR_OK)
 8000664:	221b      	movs	r2, #27
 8000666:	4923      	ldr	r1, [pc, #140]	; (80006f4 <main+0x188>)
 8000668:	481f      	ldr	r0, [pc, #124]	; (80006e8 <main+0x17c>)
 800066a:	f00f fd05 	bl	8010078 <f_open>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10b      	bne.n	800068c <main+0x120>
		  {
			  UINT cw;
			  if(f_write(&file, "0123456789 ", sizeof("0123456789 "), cw) == FR_OK)
 8000674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000676:	220c      	movs	r2, #12
 8000678:	491f      	ldr	r1, [pc, #124]	; (80006f8 <main+0x18c>)
 800067a:	481b      	ldr	r0, [pc, #108]	; (80006e8 <main+0x17c>)
 800067c:	f00f fff9 	bl	8010672 <f_write>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d102      	bne.n	800068c <main+0x120>
			  {
				  f_close(&file);
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <main+0x17c>)
 8000688:	f010 f9e6 	bl	8010a58 <f_close>

	  }

  }
  char readBuff[25];
  memset(readBuff, '\0', 25);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2219      	movs	r2, #25
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f01b f962 	bl	801b95e <memset>
  if (f_open(&file, "FIRST.txt", FA_READ) == FR_OK)
 800069a:	2201      	movs	r2, #1
 800069c:	4911      	ldr	r1, [pc, #68]	; (80006e4 <main+0x178>)
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x17c>)
 80006a0:	f00f fcea 	bl	8010078 <f_open>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10c      	bne.n	80006c4 <main+0x158>
  {
	  UINT cr;
	  if (f_read(&file, readBuff, 25, &cr) == FR_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	2219      	movs	r2, #25
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <main+0x17c>)
 80006b4:	f00f fe9e 	bl	80103f4 <f_read>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <main+0x158>
	  {
		  f_close(&file);
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x17c>)
 80006c0:	f010 f9ca 	bl	8010a58 <f_close>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart3, TX_buff, sizeof(TX_buff),0xFFFF);
	  //HAL_Delay(5000);
	  MX_LWIP_Process();
 80006c4:	f009 fb80 	bl	8009dc8 <MX_LWIP_Process>
 80006c8:	e7fc      	b.n	80006c4 <main+0x158>
 80006ca:	bf00      	nop
 80006cc:	200003f0 	.word	0x200003f0
 80006d0:	200002e8 	.word	0x200002e8
 80006d4:	0801c6d0 	.word	0x0801c6d0
 80006d8:	0801f1d4 	.word	0x0801f1d4
 80006dc:	20000418 	.word	0x20000418
 80006e0:	20000414 	.word	0x20000414
 80006e4:	0801c6d4 	.word	0x0801c6d4
 80006e8:	20000648 	.word	0x20000648
 80006ec:	0801c6e0 	.word	0x0801c6e0
 80006f0:	0801c6f0 	.word	0x0801c6f0
 80006f4:	0801c6f8 	.word	0x0801c6f8
 80006f8:	0801c70c 	.word	0x0801c70c

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f01b f927 	bl	801b95e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <SystemClock_Config+0xd4>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <SystemClock_Config+0xd4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800076c:	2319      	movs	r3, #25
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000778:	2303      	movs	r3, #3
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fffd 	bl	8004780 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f908 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fa5e 	bl	8004c70 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f8f1 	bl	80009a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007be:	f004 fb3d 	bl	8004e3c <HAL_RCC_EnableCSS>
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <MX_SDIO_SD_Init+0x38>)
 80007fe:	2224      	movs	r2, #36	; 0x24
 8000800:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	20000264 	.word	0x20000264
 8000810:	40012c00 	.word	0x40012c00

08000814 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART3_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800084c:	f005 fe54 	bl	80064f8 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f8a3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002e8 	.word	0x200002e8
 8000864:	40004800 	.word	0x40004800

08000868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	200c      	movs	r0, #12
 8000890:	f000 fe21 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000894:	200c      	movs	r0, #12
 8000896:	f000 fe3a 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200e      	movs	r0, #14
 80008a0:	f000 fe19 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a4:	200e      	movs	r0, #14
 80008a6:	f000 fe32 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a24      	ldr	r2, [pc, #144]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_GPIO_Init+0xa0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MX_GPIO_Init+0xa0>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_GPIO_Init+0xa0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	371c      	adds	r7, #28
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

	if (huart == &huart3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_UART_RxCpltCallback+0x34>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d10c      	bne.n	8000986 <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Receive_DMA(&huart3, RX_buff, 2);
 800096c:	2202      	movs	r2, #2
 800096e:	4909      	ldr	r1, [pc, #36]	; (8000994 <HAL_UART_RxCpltCallback+0x38>)
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <HAL_UART_RxCpltCallback+0x34>)
 8000972:	f005 fe11 	bl	8006598 <HAL_UART_Receive_DMA>
#ifndef COM_PORT
		byteNum++;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_UART_RxCpltCallback+0x3c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_UART_RxCpltCallback+0x3c>)
 800097e:	6013      	str	r3, [r2, #0]
		wr = 1;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_UART_RxCpltCallback+0x40>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
#endif
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002e8 	.word	0x200002e8
 8000994:	200003f0 	.word	0x200003f0
 8000998:	20000410 	.word	0x20000410
 800099c:	2000087c 	.word	0x2000087c

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <HAL_SD_MspInit+0xd0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d152      	bne.n	8000ac4 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_SD_MspInit+0xd4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000a72:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a84:	230c      	movs	r3, #12
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <HAL_SD_MspInit+0xd8>)
 8000a90:	f002 fa5c 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a94:	2304      	movs	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_SD_MspInit+0xdc>)
 8000ab0:	f002 fa4c 	bl	8002f4c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2031      	movs	r0, #49	; 0x31
 8000aba:	f000 fd0c 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000abe:	2031      	movs	r0, #49	; 0x31
 8000ac0:	f000 fd25 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40012c00 	.word	0x40012c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <HAL_UART_MspInit+0x160>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 809a 	bne.w	8000c34 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b4e      	ldr	r3, [pc, #312]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a4d      	ldr	r2, [pc, #308]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b4b      	ldr	r3, [pc, #300]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	483b      	ldr	r0, [pc, #236]	; (8000c44 <HAL_UART_MspInit+0x168>)
 8000b56:	f002 f9f9 	bl	8002f4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b5c:	4a3b      	ldr	r2, [pc, #236]	; (8000c4c <HAL_UART_MspInit+0x170>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b9a:	482b      	ldr	r0, [pc, #172]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000b9c:	f000 fcd2 	bl	8001544 <HAL_DMA_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ba6:	f7ff fefb 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb0:	4a25      	ldr	r2, [pc, #148]	; (8000c48 <HAL_UART_MspInit+0x16c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_UART_MspInit+0x178>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000c0a:	f000 fc9b 	bl	8001544 <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000c14:	f7ff fec4 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_UART_MspInit+0x174>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2027      	movs	r0, #39	; 0x27
 8000c2a:	f000 fc54 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c2e:	2027      	movs	r0, #39	; 0x27
 8000c30:	f000 fc6d 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40004800 	.word	0x40004800
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	20000330 	.word	0x20000330
 8000c4c:	40026028 	.word	0x40026028
 8000c50:	20000390 	.word	0x20000390
 8000c54:	40026058 	.word	0x40026058

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c5c:	f004 f9f4 	bl	8005048 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x8>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 faf6 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8000cb6:	f000 fddd 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000330 	.word	0x20000330

08000cc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <DMA1_Stream3_IRQHandler+0x10>)
 8000cca:	f000 fdd3 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000390 	.word	0x20000390

08000cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART3_IRQHandler+0x10>)
 8000cde:	f005 fc81 	bl	80065e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, RX_buff, sizeof(RX_buff));
  //HAL_UART_Transmit_IT(&huart3, TX_buff_it, sizeof(TX_buff_it));

  /* USER CODE END USART3_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002e8 	.word	0x200002e8

08000cec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <SDIO_IRQHandler+0x10>)
 8000cf2:	f004 fde9 	bl	80058c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000264 	.word	0x20000264

08000d00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <OTG_FS_IRQHandler+0x10>)
 8000d06:	f002 fc01 	bl	800350c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20009f2c 	.word	0x20009f2c

08000d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <OTG_HS_IRQHandler+0x10>)
 8000d1a:	f002 fbf7 	bl	800350c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000a410 	.word	0x2000a410

08000d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return 1;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_kill>:

int _kill(int pid, int sig)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <_kill+0x20>)
 8000d44:	2216      	movs	r2, #22
 8000d46:	601a      	str	r2, [r3, #0]
  return -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	2000ac50 	.word	0x2000ac50

08000d5c <_exit>:

void _exit (int status)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffe5 	bl	8000d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d6e:	e7fe      	b.n	8000d6e <_exit+0x12>

08000d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d82:	f3af 8000 	nop.w
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
  }

  return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <_write+0x12>
  }
  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_close>:

int _close(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_isatty>:

int _isatty(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d205      	bcs.n	8000e88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <_sbrk+0x6c>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20020000 	.word	0x20020000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000878 	.word	0x20000878
 8000eb4:	2000ac60 	.word	0x2000ac60
 8000eb8:	2000ac50 	.word	0x2000ac50

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ee4:	f7ff ffea 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f01a fd75 	bl	801b9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fb2b 	bl	800056c <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8000f24:	0801f46c 	.word	0x0801f46c
  ldr r2, =_sbss
 8000f28:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8000f2c:	2000ac60 	.word	0x2000ac60

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>

08000f32 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00b      	beq.n	8000f5a <DP83848_RegisterBusIO+0x28>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <DP83848_RegisterBusIO+0x28>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <DP83848_RegisterBusIO+0x28>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e014      	b.n	8000f8a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d17c      	bne.n	80010b0 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e01c      	b.n	800100a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f107 0208 	add.w	r2, r7, #8
 8000fd8:	2119      	movs	r1, #25
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	4798      	blx	r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da03      	bge.n	8000fec <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000fe4:	f06f 0304 	mvn.w	r3, #4
 8000fe8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000fea:	e00b      	b.n	8001004 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d105      	bne.n	8001004 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
         break;
 8001002:	e005      	b.n	8001010 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b1f      	cmp	r3, #31
 800100e:	d9df      	bls.n	8000fd0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b1f      	cmp	r3, #31
 8001016:	d902      	bls.n	800101e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001018:	f06f 0302 	mvn.w	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d145      	bne.n	80010b0 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6810      	ldr	r0, [r2, #0]
 800102c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001030:	2100      	movs	r1, #0
 8001032:	4798      	blx	r3
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	db37      	blt.n	80010aa <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	f107 0208 	add.w	r2, r7, #8
 8001046:	2100      	movs	r1, #0
 8001048:	4798      	blx	r3
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	db28      	blt.n	80010a2 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800105a:	e01c      	b.n	8001096 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800106e:	d80e      	bhi.n	800108e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	2100      	movs	r1, #0
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da07      	bge.n	8001096 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	613b      	str	r3, [r7, #16]
                 break;
 800108c:	e010      	b.n	80010b0 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800108e:	f06f 0301 	mvn.w	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
               break;
 8001094:	e00c      	b.n	80010b0 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1dd      	bne.n	800105c <DP83848_Init+0xc6>
 80010a0:	e006      	b.n	80010b0 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e002      	b.n	80010b0 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80010aa:	f06f 0303 	mvn.w	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d112      	bne.n	80010dc <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4798      	blx	r3
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80010c0:	bf00      	nop
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010d4:	d9f5      	bls.n	80010c2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	605a      	str	r2, [r3, #4]
   }

   return status;
 80010dc:	693b      	ldr	r3, [r7, #16]
 }
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6810      	ldr	r0, [r2, #0]
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	2101      	movs	r1, #1
 8001100:	4798      	blx	r3
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	da02      	bge.n	800110e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001108:	f06f 0304 	mvn.w	r3, #4
 800110c:	e06e      	b.n	80011ec <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6810      	ldr	r0, [r2, #0]
 8001116:	f107 020c 	add.w	r2, r7, #12
 800111a:	2101      	movs	r1, #1
 800111c:	4798      	blx	r3
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	da02      	bge.n	800112a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001124:	f06f 0304 	mvn.w	r3, #4
 8001128:	e060      	b.n	80011ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001134:	2301      	movs	r3, #1
 8001136:	e059      	b.n	80011ec <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6810      	ldr	r0, [r2, #0]
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	4798      	blx	r3
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	da02      	bge.n	8001154 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800114e:	f06f 0304 	mvn.w	r3, #4
 8001152:	e04b      	b.n	80011ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d11b      	bne.n	8001196 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <DP83848_GetLinkState+0x90>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001172:	2302      	movs	r3, #2
 8001174:	e03a      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001180:	2303      	movs	r3, #3
 8001182:	e033      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800118e:	2304      	movs	r3, #4
 8001190:	e02c      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001192:	2305      	movs	r3, #5
 8001194:	e02a      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6810      	ldr	r0, [r2, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	2110      	movs	r1, #16
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da02      	bge.n	80011b2 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80011ac:	f06f 0304 	mvn.w	r3, #4
 80011b0:	e01c      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80011bc:	2306      	movs	r3, #6
 80011be:	e015      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0306 	and.w	r3, r3, #6
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d101      	bne.n	80011ce <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80011ca:	2302      	movs	r3, #2
 80011cc:	e00e      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f003 0306 	and.w	r3, r3, #6
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80011d8:	2303      	movs	r3, #3
 80011da:	e007      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0306 	and.w	r3, r3, #6
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d101      	bne.n	80011ea <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80011e6:	2304      	movs	r3, #4
 80011e8:	e000      	b.n	80011ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80011ea:	2305      	movs	r3, #5
    }
  }
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fbc0 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000880 	.word	0x20000880

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000880 	.word	0x20000880

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff feb6 	bl	80012c0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e099      	b.n	8001694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001580:	e00f      	b.n	80015a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001582:	f7ff fe9d 	bl	80012c0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b05      	cmp	r3, #5
 800158e:	d908      	bls.n	80015a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e078      	b.n	8001694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_DMA_Init+0x158>)
 80015bc:	4013      	ands	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d107      	bne.n	800160c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4313      	orrs	r3, r2
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2b04      	cmp	r3, #4
 8001634:	d117      	bne.n	8001666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb01 	bl	8001c50 <DMA_CheckFifoParam>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001662:	2301      	movs	r3, #1
 8001664:	e016      	b.n	8001694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fab8 	bl	8001be4 <DMA_CalcBaseAndBitshift>
 8001674:	4603      	mov	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f010803f 	.word	0xf010803f

080016a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_DMA_Start_IT+0x26>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e040      	b.n	8001748 <HAL_DMA_Start_IT+0xa8>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12f      	bne.n	800173a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2202      	movs	r2, #2
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fa4a 	bl	8001b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0216 	orr.w	r2, r2, #22
 800170e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e005      	b.n	8001746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001746:	7dfb      	ldrb	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800175e:	f7ff fdaf 	bl	80012c0 <HAL_GetTick>
 8001762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d008      	beq.n	8001782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e052      	b.n	8001828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0216 	bic.w	r2, r2, #22
 8001790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <HAL_DMA_Abort+0x62>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0208 	bic.w	r2, r2, #8
 80017c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d2:	e013      	b.n	80017fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d4:	f7ff fd74 	bl	80012c0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d90c      	bls.n	80017fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2220      	movs	r2, #32
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e015      	b.n	8001828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e4      	bne.n	80017d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	223f      	movs	r2, #63	; 0x3f
 8001810:	409a      	lsls	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d004      	beq.n	800184e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00c      	b.n	8001868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001880:	4b8e      	ldr	r3, [pc, #568]	; (8001abc <HAL_DMA_IRQHandler+0x248>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a8e      	ldr	r2, [pc, #568]	; (8001ac0 <HAL_DMA_IRQHandler+0x24c>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0a9b      	lsrs	r3, r3, #10
 800188c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2208      	movs	r2, #8
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0204 	bic.w	r2, r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2208      	movs	r2, #8
 80018ce:	409a      	lsls	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2201      	movs	r2, #1
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2201      	movs	r2, #1
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f043 0202 	orr.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2204      	movs	r2, #4
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00b      	beq.n	800194c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2204      	movs	r2, #4
 800193a:	409a      	lsls	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	f043 0204 	orr.w	r2, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2210      	movs	r2, #16
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d043      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03c      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	2210      	movs	r2, #16
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d018      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d108      	bne.n	80019a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d024      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
 80019a2:	e01f      	b.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e016      	b.n	80019e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0208 	bic.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2220      	movs	r2, #32
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 808f 	beq.w	8001b14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8087 	beq.w	8001b14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d136      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0216 	bic.w	r2, r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x1da>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	223f      	movs	r2, #63	; 0x3f
 8001a64:	409a      	lsls	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d07e      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
        }
        return;
 8001a8a:	e079      	b.n	8001b80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01d      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d031      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e02c      	b.n	8001b14 <HAL_DMA_IRQHandler+0x2a0>
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d023      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
 8001ad4:	e01e      	b.n	8001b14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0210 	bic.w	r2, r2, #16
 8001af2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d032      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d022      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2205      	movs	r2, #5
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d307      	bcc.n	8001b5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f2      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x2cc>
 8001b5a:	e000      	b.n	8001b5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
 8001b7e:	e000      	b.n	8001b82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b80:	bf00      	nop
    }
  }
}
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d108      	bne.n	8001bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bc6:	e007      	b.n	8001bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3b10      	subs	r3, #16
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <DMA_CalcBaseAndBitshift+0x64>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <DMA_CalcBaseAndBitshift+0x68>)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d909      	bls.n	8001c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	1d1a      	adds	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
 8001c24:	e007      	b.n	8001c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	aaaaaaab 	.word	0xaaaaaaab
 8001c4c:	0801f1cc 	.word	0x0801f1cc

08001c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d11f      	bne.n	8001caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d856      	bhi.n	8001d1e <DMA_CheckFifoParam+0xce>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <DMA_CheckFifoParam+0x28>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c9b 	.word	0x08001c9b
 8001c80:	08001c89 	.word	0x08001c89
 8001c84:	08001d1f 	.word	0x08001d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d046      	beq.n	8001d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c98:	e043      	b.n	8001d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca2:	d140      	bne.n	8001d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca8:	e03d      	b.n	8001d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb2:	d121      	bne.n	8001cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d837      	bhi.n	8001d2a <DMA_CheckFifoParam+0xda>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <DMA_CheckFifoParam+0x70>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001cd1 	.word	0x08001cd1
 8001cc4:	08001cd7 	.word	0x08001cd7
 8001cc8:	08001cd1 	.word	0x08001cd1
 8001ccc:	08001ce9 	.word	0x08001ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd4:	e030      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d025      	beq.n	8001d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce6:	e022      	b.n	8001d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf0:	d11f      	bne.n	8001d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cf6:	e01c      	b.n	8001d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d903      	bls.n	8001d06 <DMA_CheckFifoParam+0xb6>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d003      	beq.n	8001d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d04:	e018      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0a:	e015      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1c:	e00b      	b.n	8001d36 <DMA_CheckFifoParam+0xe6>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e00a      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d22:	bf00      	nop
 8001d24:	e008      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e006      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e004      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e002      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
    }
  } 
  
  return status; 
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06c      	b.n	8001e34 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2223      	movs	r2, #35	; 0x23
 8001d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f008 f9e7 	bl	800a140 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_ETH_Init+0xf4>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <HAL_ETH_Init+0xf4>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_ETH_Init+0xf4>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_ETH_Init+0xf8>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_ETH_Init+0xf8>)
 8001d94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_ETH_Init+0xf8>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_ETH_Init+0xf8>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_ETH_Init+0xf8>)
 8001daa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff fa7c 	bl	80012c0 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dca:	e011      	b.n	8001df0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001dcc:	f7ff fa78 	bl	80012c0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dda:	d909      	bls.n	8001df0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	22e0      	movs	r2, #224	; 0xe0
 8001de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e021      	b.n	8001e34 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e4      	bne.n	8001dcc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fdfc 	bl	8002a00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fea3 	bl	8002b54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fef9 	bl	8002c06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fe61 	bl	8002ae4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800

08001e44 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d150      	bne.n	8001ef8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2223      	movs	r2, #35	; 0x23
 8001e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2204      	movs	r2, #4
 8001e62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f9fd 	bl	8002264 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0208 	orr.w	r2, r2, #8
 8001e78:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff fa28 	bl	80012d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0204 	orr.w	r2, r2, #4
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fa15 	bl	80012d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fc42 	bl	8002740 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2223      	movs	r2, #35	; 0x23
 8001ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e000      	b.n	8001efa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f10:	2b23      	cmp	r3, #35	; 0x23
 8001f12:	d14a      	bne.n	8001faa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2223      	movs	r2, #35	; 0x23
 8001f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f32:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f4a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff f9b7 	bl	80012d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fbe4 	bl	8002740 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff f9a1 	bl	80012d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07c      	b.n	80020d4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe0:	2b23      	cmp	r3, #35	; 0x23
 8001fe2:	d176      	bne.n	80020d2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fe79 	bl	8002ce0 <ETH_Prepare_Tx_Descriptors>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f043 0202 	orr.w	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e065      	b.n	80020d4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
}
 800200c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3206      	adds	r2, #6
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	2b03      	cmp	r3, #3
 800202c:	d904      	bls.n	8002038 <HAL_ETH_Transmit+0x84>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	1f1a      	subs	r2, r3, #4
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3106      	adds	r1, #6
 8002044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002048:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800204c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800204e:	f7ff f937 	bl	80012c0 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002054:	e037      	b.n	80020c6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d011      	beq.n	800208c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f043 0208 	orr.w	r2, r3, #8
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e023      	b.n	80020d4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d018      	beq.n	80020c6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff f914 	bl	80012c0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <HAL_ETH_Transmit+0xf6>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80020c0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e006      	b.n	80020d4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	dbc3      	blt.n	8002056 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0a8      	b.n	800225a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210e:	2b23      	cmp	r3, #35	; 0x23
 8002110:	d001      	beq.n	8002116 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0a1      	b.n	800225a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	3212      	adds	r2, #18
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212c:	f1c3 0304 	rsb	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002132:	e06a      	b.n	800220a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <HAL_ETH_ReadData+0x88>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d040      	beq.n	80021e6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0c1b      	lsrs	r3, r3, #16
 8002194:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002198:	3b04      	subs	r3, #4
 800219a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80021c0:	461a      	mov	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f008 f96b 	bl	800a4a0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	441a      	add	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d902      	bls.n	80021f8 <HAL_ETH_ReadData+0x11c>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b04      	subs	r3, #4
 80021f6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	3212      	adds	r2, #18
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800220e:	2b00      	cmp	r3, #0
 8002210:	db06      	blt.n	8002220 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d202      	bcs.n	8002220 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d089      	beq.n	8002134 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	441a      	add	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f815 	bl	8002264 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002270:	2301      	movs	r3, #1
 8002272:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002278:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	3212      	adds	r2, #18
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800228c:	e03d      	b.n	800230a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4618      	mov	r0, r3
 800229c:	f008 f8d0 	bl	800a440 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	74fb      	strb	r3, [r7, #19]
 80022aa:	e007      	b.n	80022bc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	461a      	mov	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	461a      	mov	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <ETH_UpdateDescriptor+0xfc>)
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	e003      	b.n	80022da <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80022d8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d902      	bls.n	80022f8 <ETH_UpdateDescriptor+0x94>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b04      	subs	r3, #4
 80022f6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	3212      	adds	r2, #18
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	617b      	str	r3, [r7, #20]
      desccount--;
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	3b01      	subs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <ETH_UpdateDescriptor+0xb2>
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1bb      	bne.n	800228e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d01a      	beq.n	8002356 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3301      	adds	r3, #1
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800232a:	f3bf 8f5f 	dmb	sy
}
 800232e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6919      	ldr	r1, [r3, #16]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	18ca      	adds	r2, r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	80004600 	.word	0x80004600

08002364 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 031c 	and.w	r3, r3, #28
 8002380:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	02db      	lsls	r3, r3, #11
 8002386:	b29b      	uxth	r3, r3
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f023 0302 	bic.w	r3, r3, #2
 80023a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80023b4:	f7fe ff84 	bl	80012c0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ba:	e00d      	b.n	80023d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80023bc:	f7fe ff80 	bl	80012c0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ca:	d301      	bcc.n	80023d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e010      	b.n	80023f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ec      	bne.n	80023bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 031c 	and.w	r3, r3, #28
 8002416:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	02db      	lsls	r3, r3, #11
 800241c:	b29b      	uxth	r3, r3
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7fe ff34 	bl	80012c0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800245a:	e00d      	b.n	8002478 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800245c:	f7fe ff30 	bl	80012c0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246a:	d301      	bcc.n	8002470 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ec      	bne.n	800245c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0d9      	b.n	8002654 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf14      	ite	ne
 80024f4:	2301      	movne	r3, #1
 80024f6:	2300      	moveq	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	b29a      	uxth	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e00b      	b.n	800268c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267a:	2b10      	cmp	r3, #16
 800267c:	d105      	bne.n	800268a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f883 	bl	800278c <ETH_SetMACConfig>

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 031c 	bic.w	r3, r3, #28
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026ac:	f002 fc98 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 80026b0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_ETH_SetMDIOClockRange+0x98>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d908      	bls.n	80026cc <HAL_ETH_SetMDIOClockRange+0x38>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d804      	bhi.n	80026cc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e027      	b.n	800271c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d908      	bls.n	80026e6 <HAL_ETH_SetMDIOClockRange+0x52>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d204      	bcs.n	80026e6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f043 030c 	orr.w	r3, r3, #12
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e01a      	b.n	800271c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d303      	bcc.n	80026f6 <HAL_ETH_SetMDIOClockRange+0x62>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d911      	bls.n	800271a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d908      	bls.n	8002710 <HAL_ETH_SetMDIOClockRange+0x7c>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d804      	bhi.n	8002710 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e005      	b.n	800271c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e000      	b.n	800271c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800271a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	611a      	str	r2, [r3, #16]
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	01312cff 	.word	0x01312cff
 8002730:	02160ebf 	.word	0x02160ebf
 8002734:	03938700 	.word	0x03938700
 8002738:	05f5e0ff 	.word	0x05f5e0ff
 800273c:	08f0d17f 	.word	0x08f0d17f

08002740 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002762:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe fdb1 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002780:	6193      	str	r3, [r2, #24]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <ETH_SetMACConfig+0x15c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	7c1b      	ldrb	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <ETH_SetMACConfig+0x28>
 80027ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027b2:	e000      	b.n	80027b6 <ETH_SetMACConfig+0x2a>
 80027b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7c5b      	ldrb	r3, [r3, #17]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <ETH_SetMACConfig+0x38>
 80027be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c2:	e000      	b.n	80027c6 <ETH_SetMACConfig+0x3a>
 80027c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	7fdb      	ldrb	r3, [r3, #31]
 80027d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	7f92      	ldrb	r2, [r2, #30]
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d102      	bne.n	80027ea <ETH_SetMACConfig+0x5e>
 80027e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e8:	e000      	b.n	80027ec <ETH_SetMACConfig+0x60>
 80027ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80027ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7f1b      	ldrb	r3, [r3, #28]
 80027f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	791b      	ldrb	r3, [r3, #4]
 8002800:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	f892 2020 	ldrb.w	r2, [r2, #32]
 800280a:	2a00      	cmp	r2, #0
 800280c:	d102      	bne.n	8002814 <ETH_SetMACConfig+0x88>
 800280e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002812:	e000      	b.n	8002816 <ETH_SetMACConfig+0x8a>
 8002814:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002816:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7bdb      	ldrb	r3, [r3, #15]
 800281c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800281e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002824:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800282c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800282e:	4313      	orrs	r3, r2
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002846:	2001      	movs	r0, #1
 8002848:	f7fe fd46 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002872:	2a00      	cmp	r2, #0
 8002874:	d101      	bne.n	800287a <ETH_SetMACConfig+0xee>
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	e000      	b.n	800287c <ETH_SetMACConfig+0xf0>
 800287a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800287c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002882:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800288a:	2a01      	cmp	r2, #1
 800288c:	d101      	bne.n	8002892 <ETH_SetMACConfig+0x106>
 800288e:	2208      	movs	r2, #8
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0x108>
 8002892:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002894:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800289c:	2a01      	cmp	r2, #1
 800289e:	d101      	bne.n	80028a4 <ETH_SetMACConfig+0x118>
 80028a0:	2204      	movs	r2, #4
 80028a2:	e000      	b.n	80028a6 <ETH_SetMACConfig+0x11a>
 80028a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028ae:	2a01      	cmp	r2, #1
 80028b0:	d101      	bne.n	80028b6 <ETH_SetMACConfig+0x12a>
 80028b2:	2202      	movs	r2, #2
 80028b4:	e000      	b.n	80028b8 <ETH_SetMACConfig+0x12c>
 80028b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028b8:	4313      	orrs	r3, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fe fd01 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	ff20810f 	.word	0xff20810f

080028ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <ETH_SetDMAConfig+0x110>)
 8002906:	4013      	ands	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	7b1b      	ldrb	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <ETH_SetDMAConfig+0x2c>
 8002912:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002916:	e000      	b.n	800291a <ETH_SetDMAConfig+0x2e>
 8002918:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	7b5b      	ldrb	r3, [r3, #13]
 800291e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002920:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	7f52      	ldrb	r2, [r2, #29]
 8002926:	2a00      	cmp	r2, #0
 8002928:	d102      	bne.n	8002930 <ETH_SetDMAConfig+0x44>
 800292a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800292e:	e000      	b.n	8002932 <ETH_SetDMAConfig+0x46>
 8002930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002932:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	7b9b      	ldrb	r3, [r3, #14]
 8002938:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800293a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002940:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7f1b      	ldrb	r3, [r3, #28]
 8002946:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002948:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7f9b      	ldrb	r3, [r3, #30]
 800294e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002950:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002956:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800295e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002960:	4313      	orrs	r3, r2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002970:	461a      	mov	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002982:	2001      	movs	r0, #1
 8002984:	f7fe fca8 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002990:	461a      	mov	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe fc79 	bl	80012d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	f8de3f23 	.word	0xf8de3f23

08002a00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0a6      	sub	sp, #152	; 0x98
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fe86 	bl	800278c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff08 	bl	80028ec <ETH_SetDMAConfig>
}
 8002adc:	bf00      	nop
 8002ade:	3798      	adds	r7, #152	; 0x98
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3305      	adds	r3, #5
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	3204      	adds	r2, #4
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <ETH_MACAddressConfig+0x68>)
 8002b06:	4413      	add	r3, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3303      	adds	r3, #3
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	061a      	lsls	r2, r3, #24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3302      	adds	r3, #2
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <ETH_MACAddressConfig+0x6c>)
 8002b36:	4413      	add	r3, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6013      	str	r3, [r2, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40028040 	.word	0x40028040
 8002b50:	40028044 	.word	0x40028044

08002b54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e03e      	b.n	8002be0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	3206      	adds	r2, #6
 8002b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d80c      	bhi.n	8002bc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	e004      	b.n	8002bce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d9bd      	bls.n	8002b62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf8:	611a      	str	r2, [r3, #16]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e046      	b.n	8002ca2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002c58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	3212      	adds	r2, #18
 8002c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d80c      	bhi.n	8002c92 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e004      	b.n	8002c9c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d9b5      	bls.n	8002c14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd2:	60da      	str	r2, [r3, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b08d      	sub	sp, #52	; 0x34
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3318      	adds	r3, #24
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d22:	d007      	beq.n	8002d34 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	3304      	adds	r3, #4
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e103      	b.n	8002f40 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d50:	f023 031f 	bic.w	r3, r3, #31
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dbe:	f3bf 8f5f 	dmb	sy
}
 8002dc2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002dd0:	e084      	b.n	8002edc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e005      	b.n	8002dfe <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	3301      	adds	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d902      	bls.n	8002e10 <ETH_Prepare_Tx_Descriptors+0x130>
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	3b04      	subs	r3, #4
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e32:	d007      	beq.n	8002e44 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	3304      	adds	r3, #4
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d029      	beq.n	8002e98 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e56:	e019      	b.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e58:	f3bf 8f5f 	dmb	sy
}
 8002e5c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d902      	bls.n	8002e7c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	3301      	adds	r3, #1
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3e1      	bcc.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	e053      	b.n	8002f40 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002eb6:	f023 031f 	bic.w	r3, r3, #31
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	6852      	ldr	r2, [r2, #4]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002eca:	f3bf 8f5f 	dmb	sy
}
 8002ece:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f af76 	bne.w	8002dd2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e005      	b.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3a:	b662      	cpsie	i
}
 8002f3c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3734      	adds	r7, #52	; 0x34
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e16b      	b.n	8003240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 815a 	bne.w	800323a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d005      	beq.n	8002f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d130      	bne.n	8003000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0201 	and.w	r2, r3, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d017      	beq.n	800303c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d123      	bne.n	8003090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80b4 	beq.w	800323a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b60      	ldr	r3, [pc, #384]	; (8003258 <HAL_GPIO_Init+0x30c>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a5f      	ldr	r2, [pc, #380]	; (8003258 <HAL_GPIO_Init+0x30c>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_GPIO_Init+0x30c>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ee:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_GPIO_Init+0x310>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_GPIO_Init+0x314>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02b      	beq.n	8003172 <HAL_GPIO_Init+0x226>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a51      	ldr	r2, [pc, #324]	; (8003264 <HAL_GPIO_Init+0x318>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d025      	beq.n	800316e <HAL_GPIO_Init+0x222>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a50      	ldr	r2, [pc, #320]	; (8003268 <HAL_GPIO_Init+0x31c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01f      	beq.n	800316a <HAL_GPIO_Init+0x21e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4f      	ldr	r2, [pc, #316]	; (800326c <HAL_GPIO_Init+0x320>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d019      	beq.n	8003166 <HAL_GPIO_Init+0x21a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_GPIO_Init+0x324>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0x216>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <HAL_GPIO_Init+0x328>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00d      	beq.n	800315e <HAL_GPIO_Init+0x212>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_GPIO_Init+0x32c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <HAL_GPIO_Init+0x20e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_GPIO_Init+0x330>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_GPIO_Init+0x20a>
 8003152:	2307      	movs	r3, #7
 8003154:	e00e      	b.n	8003174 <HAL_GPIO_Init+0x228>
 8003156:	2308      	movs	r3, #8
 8003158:	e00c      	b.n	8003174 <HAL_GPIO_Init+0x228>
 800315a:	2306      	movs	r3, #6
 800315c:	e00a      	b.n	8003174 <HAL_GPIO_Init+0x228>
 800315e:	2305      	movs	r3, #5
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x228>
 8003162:	2304      	movs	r3, #4
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x228>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x228>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x228>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x228>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	; (800325c <HAL_GPIO_Init+0x310>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_GPIO_Init+0x334>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x334>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_GPIO_Init+0x334>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_GPIO_Init+0x334>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_GPIO_Init+0x334>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x334>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_GPIO_Init+0x334>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_GPIO_Init+0x334>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f ae90 	bls.w	8002f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40021400 	.word	0x40021400
 8003278:	40021800 	.word	0x40021800
 800327c:	40021c00 	.word	0x40021c00
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e101      	b.n	800349a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f017 fe31 	bl	801af18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c4:	d102      	bne.n	80032cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f005 f85e 	bl	8008392 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7c1a      	ldrb	r2, [r3, #16]
 80032de:	f88d 2000 	strb.w	r2, [sp]
 80032e2:	3304      	adds	r3, #4
 80032e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e6:	f004 ff3d 	bl	8008164 <USB_CoreInit>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0ce      	b.n	800349a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f005 f856 	bl	80083b4 <USB_SetCurrentMode>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0bf      	b.n	800349a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e04a      	b.n	80033b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3315      	adds	r3, #21
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3314      	adds	r3, #20
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	b298      	uxth	r0, r3
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	332e      	adds	r3, #46	; 0x2e
 800335c:	4602      	mov	r2, r0
 800335e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3318      	adds	r3, #24
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331c      	adds	r3, #28
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3320      	adds	r3, #32
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3324      	adds	r3, #36	; 0x24
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	3301      	adds	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	791b      	ldrb	r3, [r3, #4]
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3af      	bcc.n	8003320 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e044      	b.n	8003450 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	3301      	adds	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	791b      	ldrb	r3, [r3, #4]
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	429a      	cmp	r2, r3
 8003458:	d3b5      	bcc.n	80033c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7c1a      	ldrb	r2, [r3, #16]
 8003462:	f88d 2000 	strb.w	r2, [sp]
 8003466:	3304      	adds	r3, #4
 8003468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346a:	f004 ffef 	bl	800844c <USB_DevInit>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e00c      	b.n	800349a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f006 f833 	bl	80094fe <USB_DevDisconnect>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_Start+0x1c>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e022      	b.n	8003504 <HAL_PCD_Start+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f004 ff40 	bl	8008370 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f005 ffe1 	bl	80094bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b08d      	sub	sp, #52	; 0x34
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f006 f89f 	bl	8009666 <USB_GetMode>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 848c 	bne.w	8003e48 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f006 f803 	bl	8009540 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8482 	beq.w	8003e46 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f005 fff0 	bl	8009540 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 0202 	and.w	r2, r2, #2
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f005 ffde 	bl	8009540 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b10      	cmp	r3, #16
 800358c:	d161      	bne.n	8003652 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0210 	bic.w	r2, r2, #16
 800359c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	0c5b      	lsrs	r3, r3, #17
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d124      	bne.n	8003614 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d035      	beq.n	8003642 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	6a38      	ldr	r0, [r7, #32]
 80035ea:	f005 fe15 	bl	8009218 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fa:	441a      	add	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360c:	441a      	add	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	615a      	str	r2, [r3, #20]
 8003612:	e016      	b.n	8003642 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	0c5b      	lsrs	r3, r3, #17
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2b06      	cmp	r3, #6
 800361e:	d110      	bne.n	8003642 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003626:	2208      	movs	r2, #8
 8003628:	4619      	mov	r1, r3
 800362a:	6a38      	ldr	r0, [r7, #32]
 800362c:	f005 fdf4 	bl	8009218 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800363c:	441a      	add	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0210 	orr.w	r2, r2, #16
 8003650:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f005 ff72 	bl	8009540 <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003662:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003666:	f040 80a7 	bne.w	80037b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f005 ff77 	bl	8009566 <USB_ReadDevAllOutEpInterrupt>
 8003678:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800367a:	e099      	b.n	80037b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 808e 	beq.w	80037a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f005 ff9b 	bl	80095ce <USB_ReadDevOutEPInterrupt>
 8003698:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b0:	461a      	mov	r2, r3
 80036b2:	2301      	movs	r3, #1
 80036b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fecf 	bl	800445c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00c      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d4:	461a      	mov	r2, r3
 80036d6:	2308      	movs	r3, #8
 80036d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 ffa5 	bl	800462c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2310      	movs	r3, #16
 80036fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d030      	beq.n	800376a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d109      	bne.n	8003728 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003726:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	3304      	adds	r3, #4
 800373c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	78db      	ldrb	r3, [r3, #3]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f017 fd26 	bl	801b1a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	2302      	movs	r3, #2
 8003768:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	2320      	movs	r3, #32
 8003784:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	3301      	adds	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f47f af62 	bne.w	800367c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f005 febf 	bl	8009540 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037cc:	f040 80db 	bne.w	8003986 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 fee0 	bl	800959a <USB_ReadDevAllInEpInterrupt>
 80037da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037e0:	e0cd      	b.n	800397e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80c2 	beq.w	8003972 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f005 ff06 	bl	800960a <USB_ReadDevInEPInterrupt>
 80037fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d057      	beq.n	80038ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	2201      	movs	r2, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43db      	mvns	r3, r3
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800382a:	4013      	ands	r3, r2
 800382c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	461a      	mov	r2, r3
 800383c:	2301      	movs	r3, #1
 800383e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	799b      	ldrb	r3, [r3, #6]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d132      	bne.n	80038ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3320      	adds	r3, #32
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	331c      	adds	r3, #28
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4419      	add	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4403      	add	r3, r0
 800387c:	3320      	adds	r3, #32
 800387e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <HAL_PCD_IRQHandler+0x3a2>
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3324      	adds	r3, #36	; 0x24
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80038a6:	461a      	mov	r2, r3
 80038a8:	2101      	movs	r1, #1
 80038aa:	f005 ff0d 	bl	80096c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f017 fbf0 	bl	801b09a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	461a      	mov	r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	461a      	mov	r2, r3
 80038ee:	2310      	movs	r3, #16
 80038f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	461a      	mov	r2, r3
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391a:	6a38      	ldr	r0, [r7, #32]
 800391c:	f004 fefa 	bl	8008714 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	3310      	adds	r3, #16
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d108      	bne.n	800394e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	b2db      	uxtb	r3, r3
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f017 fc3d 	bl	801b1c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395a:	461a      	mov	r2, r3
 800395c:	2302      	movs	r3, #2
 800395e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800396a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fce8 	bl	8004342 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	3301      	adds	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	f47f af2e 	bne.w	80037e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f005 fdd8 	bl	8009540 <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399a:	d122      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d108      	bne.n	80039cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fecf 	bl	8004768 <HAL_PCDEx_LPM_Callback>
 80039ca:	e002      	b.n	80039d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f017 fbdb 	bl	801b188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f005 fdaa 	bl	8009540 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f6:	d112      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f017 fb97 	bl	801b13c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a1c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f005 fd8c 	bl	8009540 <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	f040 80b7 	bne.w	8003ba4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2110      	movs	r1, #16
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fe5f 	bl	8008714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5a:	e046      	b.n	8003aea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aa2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab4:	0151      	lsls	r1, r2, #5
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	440a      	add	r2, r1
 8003aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ac2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ae2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	461a      	mov	r2, r3
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d3b2      	bcc.n	8003a5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7bdb      	ldrb	r3, [r3, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b22:	f043 030b 	orr.w	r3, r3, #11
 8003b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f043 030b 	orr.w	r3, r3, #11
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	e015      	b.n	8003b6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b66:	f043 030b 	orr.w	r3, r3, #11
 8003b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f005 fd9a 	bl	80096c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f005 fcc9 	bl	8009540 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d123      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 fd5f 	bl	8009682 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 fe1c 	bl	8008806 <USB_GetDevSpeed>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681c      	ldr	r4, [r3, #0]
 8003bda:	f001 fa01 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8003bde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003be4:	461a      	mov	r2, r3
 8003be6:	4620      	mov	r0, r4
 8003be8:	f004 fb20 	bl	800822c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f017 fa7c 	bl	801b0ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 fc9a 	bl	8009540 <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d10a      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f017 fa59 	bl	801b0ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f002 0208 	and.w	r2, r2, #8
 8003c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f005 fc85 	bl	8009540 <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d123      	bne.n	8003c88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e014      	b.n	8003c7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d105      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fb08 	bl	8004286 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	3301      	adds	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	791b      	ldrb	r3, [r3, #4]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d3e4      	bcc.n	8003c52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f005 fc57 	bl	8009540 <USB_ReadInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9c:	d13c      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e02b      	b.n	8003cfc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d115      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da12      	bge.n	8003cf6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3317      	adds	r3, #23
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fac8 	bl	8004286 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	791b      	ldrb	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d3cd      	bcc.n	8003ca4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f005 fc0f 	bl	8009540 <USB_ReadInterrupts>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d156      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d2e:	2301      	movs	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e045      	b.n	8003dc0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d12e      	bne.n	8003dba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da2b      	bge.n	8003dba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003d6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d121      	bne.n	8003dba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db6:	6053      	str	r3, [r2, #4]
            break;
 8003db8:	e008      	b.n	8003dcc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	791b      	ldrb	r3, [r3, #4]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d3b3      	bcc.n	8003d34 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f005 fbad 	bl	8009540 <USB_ReadInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d10a      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f017 f9fa 	bl	801b1ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f005 fb97 	bl	8009540 <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d115      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f017 f9ea 	bl	801b208 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	e000      	b.n	8003e48 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003e46:	bf00      	nop
    }
  }
}
 8003e48:	3734      	adds	r7, #52	; 0x34
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_SetAddress+0x1a>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e012      	b.n	8003e8e <HAL_PCD_SetAddress+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 faf6 	bl	8009470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	4608      	mov	r0, r1
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	803b      	strh	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da0f      	bge.n	8003edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3310      	adds	r3, #16
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	705a      	strb	r2, [r3, #1]
 8003eda:	e00f      	b.n	8003efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f08:	883a      	ldrh	r2, [r7, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f26:	78bb      	ldrb	r3, [r7, #2]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_PCD_EP_Open+0xaa>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e00e      	b.n	8003f5e <HAL_PCD_EP_Open+0xc8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 fc7e 	bl	8008850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da0f      	bge.n	8003f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	3310      	adds	r3, #16
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3304      	adds	r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	705a      	strb	r2, [r3, #1]
 8003f98:	e00f      	b.n	8003fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_PCD_EP_Close+0x6e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00e      	b.n	8003ff2 <HAL_PCD_EP_Close+0x8c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f004 fcbc 	bl	8008960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800403c:	7afb      	ldrb	r3, [r7, #11]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2da      	uxtb	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	799b      	ldrb	r3, [r3, #6]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d102      	bne.n	8004056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	799b      	ldrb	r3, [r3, #6]
 800405e:	461a      	mov	r2, r3
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	f004 fd59 	bl	8008b18 <USB_EPStartXfer>

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	f003 020f 	and.w	r2, r3, #15
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	3310      	adds	r3, #16
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2201      	movs	r2, #1
 80040de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	799b      	ldrb	r3, [r3, #6]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	799b      	ldrb	r3, [r3, #6]
 8004102:	461a      	mov	r2, r3
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	f004 fd07 	bl	8008b18 <USB_EPStartXfer>

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	7912      	ldrb	r2, [r2, #4]
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e04f      	b.n	80041d2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0f      	bge.n	800415a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	f003 020f 	and.w	r2, r3, #15
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	3310      	adds	r3, #16
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	705a      	strb	r2, [r3, #1]
 8004158:	e00d      	b.n	8004176 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_PCD_EP_SetStall+0x82>
 8004192:	2302      	movs	r3, #2
 8004194:	e01d      	b.n	80041d2 <HAL_PCD_EP_SetStall+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f005 f88f 	bl	80092c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7999      	ldrb	r1, [r3, #6]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80041c2:	461a      	mov	r2, r3
 80041c4:	f005 fa80 	bl	80096c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	7912      	ldrb	r2, [r2, #4]
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e042      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0f      	bge.n	8004220 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	3310      	adds	r3, #16
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	705a      	strb	r2, [r3, #1]
 800421e:	e00f      	b.n	8004240 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 020f 	and.w	r2, r3, #15
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_PCD_EP_ClrStall+0x86>
 800425c:	2302      	movs	r3, #2
 800425e:	e00e      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f005 f898 	bl	80093a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0c      	bge.n	80042b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e00c      	b.n	80042ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 feb7 	bl	8009048 <USB_EPStopXfer>
 80042da:	4603      	mov	r3, r0
 80042dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042de:	7afb      	ldrb	r3, [r7, #11]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_PCD_EP_Flush+0x1a>
 80042fe:	2302      	movs	r3, #2
 8004300:	e01b      	b.n	800433a <HAL_PCD_EP_Flush+0x52>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800430a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da09      	bge.n	8004326 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f004 f9f8 	bl	8008714 <USB_FlushTxFifo>
 8004324:	e004      	b.n	8004330 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f004 fa24 	bl	8008778 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b08a      	sub	sp, #40	; 0x28
 8004346:	af02      	add	r7, sp, #8
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3310      	adds	r3, #16
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	429a      	cmp	r2, r3
 8004374:	d901      	bls.n	800437a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e06b      	b.n	8004452 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	429a      	cmp	r2, r3
 800438e:	d902      	bls.n	8004396 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3303      	adds	r3, #3
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439e:	e02a      	b.n	80043f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d902      	bls.n	80043bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3303      	adds	r3, #3
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	4603      	mov	r3, r0
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f004 fedf 	bl	800919c <USB_WritePacket>

    ep->xfer_buff  += len;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	441a      	add	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	429a      	cmp	r2, r3
 800440a:	d809      	bhi.n	8004420 <PCD_WriteEmptyTxFifo+0xde>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004414:	429a      	cmp	r2, r3
 8004416:	d203      	bcs.n	8004420 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1bf      	bne.n	80043a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d811      	bhi.n	8004450 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	2201      	movs	r2, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	43db      	mvns	r3, r3
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800444c:	4013      	ands	r3, r2
 800444e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	333c      	adds	r3, #60	; 0x3c
 8004474:	3304      	adds	r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	799b      	ldrb	r3, [r3, #6]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d17b      	bne.n	800458a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4a61      	ldr	r2, [pc, #388]	; (8004624 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	f240 80b9 	bls.w	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80b3 	beq.w	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	461a      	mov	r2, r3
 80044c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c4:	6093      	str	r3, [r2, #8]
 80044c6:	e0a7      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	2320      	movs	r3, #32
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	e098      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 8093 	bne.w	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	; (8004624 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d90f      	bls.n	800451a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	e07e      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	440b      	add	r3, r1
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d114      	bne.n	800457c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004564:	461a      	mov	r2, r3
 8004566:	2101      	movs	r1, #1
 8004568:	f005 f8ae 	bl	80096c8 <USB_EP0_OutStart>
 800456c:	e006      	b.n	800457c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	441a      	add	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f016 fd6e 	bl	801b064 <HAL_PCD_DataOutStageCallback>
 8004588:	e046      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4a26      	ldr	r2, [pc, #152]	; (8004628 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d124      	bne.n	80045dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	461a      	mov	r2, r3
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	6093      	str	r3, [r2, #8]
 80045b0:	e032      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	461a      	mov	r2, r3
 80045ca:	2320      	movs	r3, #32
 80045cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f016 fd45 	bl	801b064 <HAL_PCD_DataOutStageCallback>
 80045da:	e01d      	b.n	8004618 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d114      	bne.n	800460c <PCD_EP_OutXfrComplete_int+0x1b0>
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d108      	bne.n	800460c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004604:	461a      	mov	r2, r3
 8004606:	2100      	movs	r1, #0
 8004608:	f005 f85e 	bl	80096c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f016 fd26 	bl	801b064 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	4f54300a 	.word	0x4f54300a
 8004628:	4f54310a 	.word	0x4f54310a

0800462c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	333c      	adds	r3, #60	; 0x3c
 8004644:	3304      	adds	r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d90e      	bls.n	8004680 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	461a      	mov	r2, r3
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f016 fcdd 	bl	801b040 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d90c      	bls.n	80046a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d108      	bne.n	80046a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80046a0:	461a      	mov	r2, r3
 80046a2:	2101      	movs	r1, #1
 80046a4:	f005 f810 	bl	80096c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	4f54300a 	.word	0x4f54300a

080046b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
 80046c4:	4613      	mov	r3, r2
 80046c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046d6:	883b      	ldrh	r3, [r7, #0]
 80046d8:	0419      	lsls	r1, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
 80046e4:	e028      	b.n	8004738 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	4413      	add	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e00d      	b.n	8004716 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3340      	adds	r3, #64	; 0x40
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	3301      	adds	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	3b01      	subs	r3, #1
 800471c:	429a      	cmp	r2, r3
 800471e:	d3ec      	bcc.n	80046fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004720:	883b      	ldrh	r3, [r7, #0]
 8004722:	0418      	lsls	r0, r3, #16
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	3b01      	subs	r3, #1
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4302      	orrs	r2, r0
 8004730:	3340      	adds	r3, #64	; 0x40
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	887a      	ldrh	r2, [r7, #2]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e267      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4b85      	ldr	r3, [pc, #532]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d112      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c2:	d10b      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05b      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d157      	bne.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e242      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x74>
 80047e6:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a75      	ldr	r2, [pc, #468]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x98>
 80047fe:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6f      	ldr	r2, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 8004818:	4b69      	ldr	r3, [pc, #420]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b66      	ldr	r3, [pc, #408]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fc fd42 	bl	80012c0 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fc fd3e 	bl	80012c0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e207      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xc0>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fc fd2e 	bl	80012c0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7fc fd2a 	bl	80012c0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1f3      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004896:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1c7      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4937      	ldr	r1, [pc, #220]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fc fce3 	bl	80012c0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fc fcdf 	bl	80012c0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1a8      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4925      	ldr	r1, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fc fcc2 	bl	80012c0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004940:	f7fc fcbe 	bl	80012c0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e187      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fc fca2 	bl	80012c0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7fc fc9e 	bl	80012c0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e167      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x200>
 800499e:	e01b      	b.n	80049d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7fc fc8b 	bl	80012c0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e00e      	b.n	80049cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fc fc87 	bl	80012c0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d907      	bls.n	80049cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e150      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470000 	.word	0x42470000
 80049c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8097 	beq.w	8004b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b81      	ldr	r3, [pc, #516]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	4b7d      	ldr	r3, [pc, #500]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b7a      	ldr	r3, [pc, #488]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b74      	ldr	r3, [pc, #464]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fc fc47 	bl	80012c0 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fc fc43 	bl	80012c0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e10c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2ea>
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a63      	ldr	r2, [pc, #396]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x30c>
 8004a72:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a5e      	ldr	r2, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	4b5c      	ldr	r3, [pc, #368]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a8c:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	4b55      	ldr	r3, [pc, #340]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fc fc08 	bl	80012c0 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fc fc04 	bl	80012c0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0cb      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ee      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x334>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fc fbf2 	bl	80012c0 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fc fbee 	bl	80012c0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0b5      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a1 	beq.w	8004c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1e:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d05c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d141      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fc fbc2 	bl	80012c0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fc fbbe 	bl	80012c0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e087      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	491b      	ldr	r1, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fc fb97 	bl	80012c0 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fc fb93 	bl	80012c0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e05c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x416>
 8004bb4:	e054      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fb80 	bl	80012c0 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fc fb7c 	bl	80012c0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e045      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x444>
 8004be2:	e03d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e038      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x4ec>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d028      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d121      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d11a      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d111      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0cc      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90c      	bls.n	8004cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d044      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d003      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e067      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4934      	ldr	r1, [pc, #208]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fc faae 	bl	80012c0 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fc faaa 	bl	80012c0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e04f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20c      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f82d 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc fa0e 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	0801f1b4 	.word	0x0801f1b4
 8004e34:	20000000 	.word	0x20000000
 8004e38:	20000004 	.word	0x20000004

08004e3c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <HAL_RCC_EnableCSS+0x14>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	4247004c 	.word	0x4247004c

08004e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e58:	b090      	sub	sp, #64	; 0x40
 8004e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e60:	2300      	movs	r3, #0
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e64:	2300      	movs	r3, #0
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d00d      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x40>
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	f200 80a1 	bhi.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x34>
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d003      	beq.n	8004e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e86:	e09b      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e8c:	e09b      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8e:	4b53      	ldr	r3, [pc, #332]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e92:	e098      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e94:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9e:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d028      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	623b      	str	r3, [r7, #32]
 8004eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004ec0:	fb03 f201 	mul.w	r2, r3, r1
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	fb00 f303 	mul.w	r3, r0, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	4a43      	ldr	r2, [pc, #268]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8004ece:	fba0 1202 	umull	r1, r2, r0, r2
 8004ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ed4:	460a      	mov	r2, r1
 8004ed6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eda:	4413      	add	r3, r2
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	61fa      	str	r2, [r7, #28]
 8004ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eee:	f7fb f9bf 	bl	8000270 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004efa:	e053      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efc:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	2200      	movs	r2, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	617a      	str	r2, [r7, #20]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f0e:	f04f 0b00 	mov.w	fp, #0
 8004f12:	4652      	mov	r2, sl
 8004f14:	465b      	mov	r3, fp
 8004f16:	f04f 0000 	mov.w	r0, #0
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	0159      	lsls	r1, r3, #5
 8004f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f24:	0150      	lsls	r0, r2, #5
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f46:	ebb2 0408 	subs.w	r4, r2, r8
 8004f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	00eb      	lsls	r3, r5, #3
 8004f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5c:	00e2      	lsls	r2, r4, #3
 8004f5e:	4614      	mov	r4, r2
 8004f60:	461d      	mov	r5, r3
 8004f62:	eb14 030a 	adds.w	r3, r4, sl
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	eb45 030b 	adc.w	r3, r5, fp
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	2200      	movs	r2, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	60fa      	str	r2, [r7, #12]
 8004f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f98:	f7fb f96a 	bl	8000270 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3740      	adds	r7, #64	; 0x40
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	017d7840 	.word	0x017d7840

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	0801f1c4 	.word	0x0801f1c4

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffdc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	0801f1c4 	.word	0x0801f1c4

08005048 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_NMI_IRQHandler+0x20>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005054:	2b80      	cmp	r3, #128	; 0x80
 8005056:	d104      	bne.n	8005062 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005058:	f000 f80a 	bl	8005070 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_RCC_NMI_IRQHandler+0x24>)
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	701a      	strb	r2, [r3, #0]
  }
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	4002380e 	.word	0x4002380e

08005070 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e022      	b.n	80050d6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb fcaa 	bl	80009fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2203      	movs	r2, #3
 80050ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f815 	bl	80050e0 <HAL_SD_InitCard>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e00a      	b.n	80050d6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b08e      	sub	sp, #56	; 0x38
 80050e4:	af04      	add	r7, sp, #16
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80050fc:	2376      	movs	r3, #118	; 0x76
 80050fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681d      	ldr	r5, [r3, #0]
 8005104:	466c      	mov	r4, sp
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800510e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005118:	4628      	mov	r0, r5
 800511a:	f002 faf1 	bl	8007700 <SDIO_Init>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04f      	b.n	80051d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005130:	4b29      	ldr	r3, [pc, #164]	; (80051d8 <HAL_SD_InitCard+0xf8>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fb29 	bl	8007792 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <HAL_SD_InitCard+0xf8>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005146:	2002      	movs	r0, #2
 8005148:	f7fc f8c6 	bl	80012d8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f001 f877 	bl	8006240 <SD_PowerON>
 8005152:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e02e      	b.n	80051d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 ff96 	bl	80060a4 <SD_InitCard>
 8005178:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e01b      	b.n	80051d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fb88 	bl	80078b6 <SDMMC_CmdBlockLength>
 80051a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00f      	beq.n	80051ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <HAL_SD_InitCard+0xfc>)
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bdb0      	pop	{r4, r5, r7, pc}
 80051d8:	422580a0 	.word	0x422580a0
 80051dc:	004005ff 	.word	0x004005ff

080051e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b092      	sub	sp, #72	; 0x48
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051ee:	f7fc f867 	bl	80012c0 <HAL_GetTick>
 80051f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e1c5      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 81b8 	bne.w	8005590 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	441a      	add	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	429a      	cmp	r2, r3
 8005232:	d907      	bls.n	8005244 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e1ac      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2203      	movs	r2, #3
 8005248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	2b01      	cmp	r3, #1
 800525a:	d002      	beq.n	8005262 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	025b      	lsls	r3, r3, #9
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	025b      	lsls	r3, r3, #9
 800526c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800526e:	2390      	movs	r3, #144	; 0x90
 8005270:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005272:	2302      	movs	r3, #2
 8005274:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800527a:	2301      	movs	r3, #1
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f107 0214 	add.w	r2, r7, #20
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fae8 	bl	800785e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d90a      	bls.n	80052aa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2202      	movs	r2, #2
 8005298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fb4c 	bl	800793e <SDMMC_CmdReadMultiBlock>
 80052a6:	6478      	str	r0, [r7, #68]	; 0x44
 80052a8:	e009      	b.n	80052be <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b6:	4618      	mov	r0, r3
 80052b8:	f002 fb1f 	bl	80078fa <SDMMC_CmdReadSingleBlock>
 80052bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a7e      	ldr	r2, [pc, #504]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d2:	431a      	orrs	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e159      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80052ee:	e061      	b.n	80053b4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d03c      	beq.n	8005378 <HAL_SD_ReadBlocks+0x198>
 80052fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d039      	beq.n	8005378 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005304:	2300      	movs	r3, #0
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
 8005308:	e033      	b.n	8005372 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f002 fa21 	bl	8007756 <SDIO_ReadFIFO>
 8005314:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	b2da      	uxtb	r2, r3
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	3301      	adds	r3, #1
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	3b01      	subs	r3, #1
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	3301      	adds	r3, #1
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800533a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533c:	3b01      	subs	r3, #1
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	b2da      	uxtb	r2, r3
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	3301      	adds	r3, #1
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	3b01      	subs	r3, #1
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	b2da      	uxtb	r2, r3
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	3301      	adds	r3, #1
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	3b01      	subs	r3, #1
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800536c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536e:	3301      	adds	r3, #1
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	2b07      	cmp	r3, #7
 8005376:	d9c8      	bls.n	800530a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005378:	f7fb ffa2 	bl	80012c0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005384:	429a      	cmp	r2, r3
 8005386:	d902      	bls.n	800538e <HAL_SD_ReadBlocks+0x1ae>
 8005388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d112      	bne.n	80053b4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a4c      	ldr	r2, [pc, #304]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0f4      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ba:	f240 332a 	movw	r3, #810	; 0x32a
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d095      	beq.n	80052f0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d022      	beq.n	8005418 <HAL_SD_ReadBlocks+0x238>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d91f      	bls.n	8005418 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d01b      	beq.n	8005418 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fb11 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80053ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	431a      	orrs	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0c2      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_SD_ReadBlocks+0x254>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f043 0208 	orr.w	r2, r3, #8
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0a1      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f043 0202 	orr.w	r2, r3, #2
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e087      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d064      	beq.n	8005566 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <HAL_SD_ReadBlocks+0x2e4>)
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e06d      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
 80054c2:	bf00      	nop
 80054c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 f942 	bl	8007756 <SDIO_ReadFIFO>
 80054d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	3301      	adds	r3, #1
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	3b01      	subs	r3, #1
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	3301      	adds	r3, #1
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	3b01      	subs	r3, #1
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	3301      	adds	r3, #1
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	3b01      	subs	r3, #1
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	0e1b      	lsrs	r3, r3, #24
 8005518:	b2da      	uxtb	r2, r3
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	3301      	adds	r3, #1
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	3b01      	subs	r3, #1
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800552a:	f7fb fec9 	bl	80012c0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005536:	429a      	cmp	r2, r3
 8005538:	d902      	bls.n	8005540 <HAL_SD_ReadBlocks+0x360>
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d112      	bne.n	8005566 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_SD_ReadBlocks+0x3c8>)
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e01b      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_SD_ReadBlocks+0x39a>
 8005574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1a6      	bne.n	80054c8 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e006      	b.n	800559e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3748      	adds	r7, #72	; 0x48
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	004005ff 	.word	0x004005ff

080055ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b092      	sub	sp, #72	; 0x48
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055ba:	f7fb fe81 	bl	80012c0 <HAL_GetTick>
 80055be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e16d      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 8160 	bne.w	80058ac <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d907      	bls.n	8005610 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e154      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	025b      	lsls	r3, r3, #9
 8005638:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800563a:	2390      	movs	r3, #144	; 0x90
 800563c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005642:	2300      	movs	r3, #0
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f107 0218 	add.w	r2, r7, #24
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f002 f902 	bl	800785e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d90a      	bls.n	8005676 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566c:	4618      	mov	r0, r3
 800566e:	f002 f9aa 	bl	80079c6 <SDMMC_CmdWriteMultiBlock>
 8005672:	6478      	str	r0, [r7, #68]	; 0x44
 8005674:	e009      	b.n	800568a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2210      	movs	r2, #16
 800567a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f002 f97d 	bl	8007982 <SDMMC_CmdWriteSingleBlock>
 8005688:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800568a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568c:	2b00      	cmp	r3, #0
 800568e:	d012      	beq.n	80056b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a8b      	ldr	r2, [pc, #556]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569e:	431a      	orrs	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e101      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056ba:	e065      	b.n	8005788 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d040      	beq.n	800574c <HAL_SD_WriteBlocks+0x1a0>
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d03d      	beq.n	800574c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
 80056d4:	e037      	b.n	8005746 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	3301      	adds	r3, #1
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	3b01      	subs	r3, #1
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	021a      	lsls	r2, r3, #8
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	3301      	adds	r3, #1
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	3b01      	subs	r3, #1
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041a      	lsls	r2, r3, #16
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	3301      	adds	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	3b01      	subs	r3, #1
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	3301      	adds	r3, #1
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	3b01      	subs	r3, #1
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f107 0214 	add.w	r2, r7, #20
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f002 f818 	bl	8007770 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	3301      	adds	r3, #1
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	2b07      	cmp	r3, #7
 800574a:	d9c4      	bls.n	80056d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800574c:	f7fb fdb8 	bl	80012c0 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005758:	429a      	cmp	r2, r3
 800575a:	d902      	bls.n	8005762 <HAL_SD_WriteBlocks+0x1b6>
 800575c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a57      	ldr	r2, [pc, #348]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e098      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578e:	f240 331a 	movw	r3, #794	; 0x31a
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d091      	beq.n	80056bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d022      	beq.n	80057ec <HAL_SD_WriteBlocks+0x240>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d91f      	bls.n	80057ec <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d01b      	beq.n	80057ec <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 f927 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80057be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d012      	beq.n	80057ec <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3e      	ldr	r2, [pc, #248]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e066      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_SD_WriteBlocks+0x25c>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005804:	2b00      	cmp	r3, #0
 8005806:	d012      	beq.n	800582e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	f043 0208 	orr.w	r2, r3, #8
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e045      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d012      	beq.n	8005862 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f043 0202 	orr.w	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02b      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_SD_WriteBlocks+0x318>)
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	f043 0210 	orr.w	r2, r3, #16
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e011      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f240 523a 	movw	r2, #1338	; 0x53a
 800589e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e006      	b.n	80058ba <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3748      	adds	r7, #72	; 0x48
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	004005ff 	.word	0x004005ff

080058c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_SD_IRQHandler+0x2e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fd5c 	bl	80063ac <SD_Read_IT>
 80058f4:	e165      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 808f 	beq.w	8005a24 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800591e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005922:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d039      	beq.n	80059b2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <HAL_SD_IRQHandler+0x8a>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f002 f858 	bl	8007a0c <SDMMC_CmdStopTransfer>
 800595c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f92f 	bl	8005bd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f240 523a 	movw	r2, #1338	; 0x53a
 800597e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_SD_IRQHandler+0xda>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f003 ffc0 	bl	8009928 <HAL_SD_RxCpltCallback>
 80059a8:	e10b      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f003 ffb2 	bl	8009914 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059b0:	e107      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8102 	beq.w	8005bc2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d011      	beq.n	80059ec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f002 f81d 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80059d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8f4 	bl	8005bd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80e5 	bne.w	8005bc2 <HAL_SD_IRQHandler+0x2fa>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 80df 	bne.w	8005bc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0208 	bic.w	r2, r2, #8
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f003 ff79 	bl	8009914 <HAL_SD_TxCpltCallback>
}
 8005a22:	e0ce      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_SD_IRQHandler+0x17c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fd06 	bl	800644e <SD_Write_IT>
 8005a42:	e0be      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4a:	f240 233a 	movw	r3, #570	; 0x23a
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80b6 	beq.w	8005bc2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f043 0202 	orr.w	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	f043 0208 	orr.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	f043 0220 	orr.w	r2, r3, #32
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	f043 0210 	orr.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	f043 0208 	orr.w	r2, r3, #8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f240 723a 	movw	r2, #1850	; 0x73a
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005af0:	f023 0302 	bic.w	r3, r3, #2
 8005af4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 ff86 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005b00:	4602      	mov	r2, r0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f855 	bl	8005bd4 <HAL_SD_ErrorCallback>
}
 8005b2a:	e04a      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d045      	beq.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_SD_IRQHandler+0x282>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_SD_IRQHandler+0x304>)
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fb fe6a 	bl	8001830 <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d02f      	beq.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fa2e 	bl	8005fc8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b6c:	e029      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <HAL_SD_IRQHandler+0x2ba>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <HAL_SD_IRQHandler+0x308>)
 8005b88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fb fe4e 	bl	8001830 <HAL_DMA_Abort_IT>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fa49 	bl	8006036 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ba4:	e00d      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f003 fea0 	bl	8009900 <HAL_SD_AbortCallback>
}
 8005bc0:	e7ff      	b.n	8005bc2 <HAL_SD_IRQHandler+0x2fa>
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005fc9 	.word	0x08005fc9
 8005bd0:	08006037 	.word	0x08006037

08005bd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf6:	0f9b      	lsrs	r3, r3, #30
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	0e9b      	lsrs	r3, r3, #26
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	0e1b      	lsrs	r3, r3, #24
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c48:	0d1b      	lsrs	r3, r3, #20
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c66:	0bdb      	lsrs	r3, r3, #15
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c78:	0b9b      	lsrs	r3, r3, #14
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8a:	0b5b      	lsrs	r3, r3, #13
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9c:	0b1b      	lsrs	r3, r3, #12
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d163      	bne.n	8005d80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cbc:	009a      	lsls	r2, r3, #2
 8005cbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cc8:	0f92      	lsrs	r2, r2, #30
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd4:	0edb      	lsrs	r3, r3, #27
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce6:	0e1b      	lsrs	r3, r3, #24
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf8:	0d5b      	lsrs	r3, r3, #21
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0a:	0c9b      	lsrs	r3, r3, #18
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1c:	0bdb      	lsrs	r3, r3, #15
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	7e1b      	ldrb	r3, [r3, #24]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	3302      	adds	r3, #2
 8005d40:	2201      	movs	r2, #1
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d4a:	fb03 f202 	mul.w	r2, r3, r2
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	7a1b      	ldrb	r3, [r3, #8]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d6c:	0a52      	lsrs	r2, r2, #9
 8005d6e:	fb03 f202 	mul.w	r2, r3, r2
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60
 8005d7e:	e031      	b.n	8005de4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d11d      	bne.n	8005dc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	3301      	adds	r3, #1
 8005da4:	029a      	lsls	r2, r3, #10
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60
 8005dc2:	e00f      	b.n	8005de4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a58      	ldr	r2, [pc, #352]	; (8005f2c <HAL_SD_GetCardCSD+0x344>)
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09d      	b.n	8005f20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de8:	0b9b      	lsrs	r3, r3, #14
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	0fdb      	lsrs	r3, r3, #31
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	0f5b      	lsrs	r3, r3, #29
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	0e9b      	lsrs	r3, r3, #26
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	0d9b      	lsrs	r3, r3, #22
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	0d5b      	lsrs	r3, r3, #21
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	0bdb      	lsrs	r3, r3, #15
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	0b9b      	lsrs	r3, r3, #14
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	0b5b      	lsrs	r3, r3, #13
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	0b1b      	lsrs	r3, r3, #12
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	0a9b      	lsrs	r3, r3, #10
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	004005ff 	.word	0x004005ff

08005f30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9de 	bl	800635c <SD_SendStatus>
 8005fa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	0a5b      	lsrs	r3, r3, #9
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fbe:	693b      	ldr	r3, [r7, #16]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ffd1 	bl	8005f88 <HAL_SD_GetCardState>
 8005fe6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b06      	cmp	r3, #6
 8005ffa:	d002      	beq.n	8006002 <SD_DMATxAbort+0x3a>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d10a      	bne.n	8006018 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fd00 	bl	8007a0c <SDMMC_CmdStopTransfer>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	431a      	orrs	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f003 fc6d 	bl	8009900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006026:	e002      	b.n	800602e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fdd3 	bl	8005bd4 <HAL_SD_ErrorCallback>
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f240 523a 	movw	r2, #1338	; 0x53a
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff ff9a 	bl	8005f88 <HAL_SD_GetCardState>
 8006054:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d002      	beq.n	8006070 <SD_DMARxAbort+0x3a>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d10a      	bne.n	8006086 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fcc9 	bl	8007a0c <SDMMC_CmdStopTransfer>
 800607a:	4602      	mov	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f003 fc36 	bl	8009900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006094:	e002      	b.n	800609c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff fd9c 	bl	8005bd4 <HAL_SD_ErrorCallback>
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060a4:	b5b0      	push	{r4, r5, r7, lr}
 80060a6:	b094      	sub	sp, #80	; 0x50
 80060a8:	af04      	add	r7, sp, #16
 80060aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80060ac:	2301      	movs	r3, #1
 80060ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fb7a 	bl	80077ae <SDIO_GetPowerState>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060c4:	e0b8      	b.n	8006238 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d02f      	beq.n	800612e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fd61 	bl	8007b9a <SDMMC_CmdSendCID>
 80060d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80060e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e2:	e0a9      	b.n	8006238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fba4 	bl	8007838 <SDIO_GetResponse>
 80060f0:	4602      	mov	r2, r0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2104      	movs	r1, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fb9b 	bl	8007838 <SDIO_GetResponse>
 8006102:	4602      	mov	r2, r0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2108      	movs	r1, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fb92 	bl	8007838 <SDIO_GetResponse>
 8006114:	4602      	mov	r2, r0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	210c      	movs	r1, #12
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fb89 	bl	8007838 <SDIO_GetResponse>
 8006126:	4602      	mov	r2, r0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	2b03      	cmp	r3, #3
 8006134:	d00d      	beq.n	8006152 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f107 020e 	add.w	r2, r7, #14
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fd67 	bl	8007c14 <SDMMC_CmdSetRelAdd>
 8006146:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <SD_InitCard+0xae>
    {
      return errorstate;
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	e072      	b.n	8006238 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	2b03      	cmp	r3, #3
 8006158:	d036      	beq.n	80061c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800615a:	89fb      	ldrh	r3, [r7, #14]
 800615c:	461a      	mov	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f001 fd31 	bl	8007bd6 <SDMMC_CmdSendCSD>
 8006174:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <SD_InitCard+0xdc>
    {
      return errorstate;
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	e05b      	b.n	8006238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f001 fb56 	bl	8007838 <SDIO_GetResponse>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2104      	movs	r1, #4
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fb4d 	bl	8007838 <SDIO_GetResponse>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2108      	movs	r1, #8
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fb44 	bl	8007838 <SDIO_GetResponse>
 80061b0:	4602      	mov	r2, r0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	210c      	movs	r1, #12
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 fb3b 	bl	8007838 <SDIO_GetResponse>
 80061c2:	4602      	mov	r2, r0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2104      	movs	r1, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fb32 	bl	8007838 <SDIO_GetResponse>
 80061d4:	4603      	mov	r3, r0
 80061d6:	0d1a      	lsrs	r2, r3, #20
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061dc:	f107 0310 	add.w	r3, r7, #16
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fd00 	bl	8005be8 <HAL_SD_GetCardCSD>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061f2:	e021      	b.n	8006238 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6819      	ldr	r1, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	2200      	movs	r2, #0
 8006200:	461c      	mov	r4, r3
 8006202:	4615      	mov	r5, r2
 8006204:	4622      	mov	r2, r4
 8006206:	462b      	mov	r3, r5
 8006208:	4608      	mov	r0, r1
 800620a:	f001 fc21 	bl	8007a50 <SDMMC_CmdSelDesel>
 800620e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <SD_InitCard+0x176>
  {
    return errorstate;
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	e00e      	b.n	8006238 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	466c      	mov	r4, sp
 8006222:	f103 0210 	add.w	r2, r3, #16
 8006226:	ca07      	ldmia	r2, {r0, r1, r2}
 8006228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800622c:	3304      	adds	r3, #4
 800622e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006230:	4628      	mov	r0, r5
 8006232:	f001 fa65 	bl	8007700 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3740      	adds	r7, #64	; 0x40
 800623c:	46bd      	mov	sp, r7
 800623e:	bdb0      	pop	{r4, r5, r7, pc}

08006240 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fc1c 	bl	8007a96 <SDMMC_CmdGoIdleState>
 800625e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	e072      	b.n	8006350 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fc2f 	bl	8007ad2 <SDMMC_CmdOperCond>
 8006274:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f001 fc05 	bl	8007a96 <SDMMC_CmdGoIdleState>
 800628c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	e05b      	b.n	8006350 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d137      	bne.n	8006316 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fc2f 	bl	8007b10 <SDMMC_CmdAppCommand>
 80062b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02d      	beq.n	8006316 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062be:	e047      	b.n	8006350 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fc22 	bl	8007b10 <SDMMC_CmdAppCommand>
 80062cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	e03b      	b.n	8006350 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	491e      	ldr	r1, [pc, #120]	; (8006358 <SD_PowerON+0x118>)
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fc38 	bl	8007b54 <SDMMC_CmdAppOperCommand>
 80062e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062f0:	e02e      	b.n	8006350 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fa9d 	bl	8007838 <SDIO_GetResponse>
 80062fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	0fdb      	lsrs	r3, r3, #31
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <SD_PowerON+0xcc>
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <SD_PowerON+0xce>
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]

    count++;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	3301      	adds	r3, #1
 8006314:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800631c:	4293      	cmp	r3, r2
 800631e:	d802      	bhi.n	8006326 <SD_PowerON+0xe6>
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0cc      	beq.n	80062c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800632c:	4293      	cmp	r3, r2
 800632e:	d902      	bls.n	8006336 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006334:	e00c      	b.n	8006350 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
 8006346:	e002      	b.n	800634e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	c1100000 	.word	0xc1100000

0800635c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800636c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006370:	e018      	b.n	80063a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f001 fc69 	bl	8007c56 <SDMMC_CmdSendStatus>
 8006384:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SD_SendStatus+0x34>
  {
    return errorstate;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	e009      	b.n	80063a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fa4e 	bl	8007838 <SDIO_GetResponse>
 800639c:	4602      	mov	r2, r0
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03f      	beq.n	8006446 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e033      	b.n	8006434 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f9c0 	bl	8007756 <SDIO_ReadFIFO>
 80063d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3b01      	subs	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	0e1b      	lsrs	r3, r3, #24
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
 8006426:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3b01      	subs	r3, #1
 800642c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3301      	adds	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b07      	cmp	r3, #7
 8006438:	d9c8      	bls.n	80063cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006446:	bf00      	nop
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d043      	beq.n	80064f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e037      	b.n	80064de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3b01      	subs	r3, #1
 800647e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	3b01      	subs	r3, #1
 8006496:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	041a      	lsls	r2, r3, #16
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	061a      	lsls	r2, r3, #24
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f107 0208 	add.w	r2, r7, #8
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f94c 	bl	8007770 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	3301      	adds	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b07      	cmp	r3, #7
 80064e2:	d9c4      	bls.n	800646e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e042      	b.n	8006590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fa fadc 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fe6b 	bl	8007218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d112      	bne.n	80065d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_Receive_DMA+0x26>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e00b      	b.n	80065da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	461a      	mov	r2, r3
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fbc2 	bl	8006d58 <UART_Start_Receive_DMA>
 80065d4:	4603      	mov	r3, r0
 80065d6:	e000      	b.n	80065da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80065d8:	2302      	movs	r3, #2
  }
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b0ba      	sub	sp, #232	; 0xe8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_UART_IRQHandler+0x66>
 8006636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fd29 	bl	800709a <UART_Receive_IT>
      return;
 8006648:	e25b      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800664a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80de 	beq.w	8006810 <HAL_UART_IRQHandler+0x22c>
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006664:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80d1 	beq.w	8006810 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_UART_IRQHandler+0xae>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f043 0201 	orr.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_UART_IRQHandler+0xd2>
 800669e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_UART_IRQHandler+0xf6>
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f043 0204 	orr.w	r2, r3, #4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <HAL_UART_IRQHandler+0x126>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d105      	bne.n	80066fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f043 0208 	orr.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 81f2 	beq.w	8006af8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_UART_IRQHandler+0x14e>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fcb4 	bl	800709a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <HAL_UART_IRQHandler+0x17a>
 8006756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d04f      	beq.n	80067fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbbc 	bl	8006edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d141      	bne.n	80067f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800678c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800679e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1d9      	bne.n	8006772 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d013      	beq.n	80067ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	4a7e      	ldr	r2, [pc, #504]	; (80069c4 <HAL_UART_IRQHandler+0x3e0>)
 80067cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fb f82c 	bl	8001830 <HAL_DMA_Abort_IT>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	e00e      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f99e 	bl	8006b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	e00a      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f99a 	bl	8006b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e006      	b.n	800680c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f996 	bl	8006b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800680a:	e175      	b.n	8006af8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	bf00      	nop
    return;
 800680e:	e173      	b.n	8006af8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 814f 	bne.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0310 	and.w	r3, r3, #16
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8148 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8141 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	f040 80b6 	bne.w	80069c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8145 	beq.w	8006afc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800687a:	429a      	cmp	r2, r3
 800687c:	f080 813e 	bcs.w	8006afc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006886:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	f000 8088 	beq.w	80069a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3314      	adds	r3, #20
 8006902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800690a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800690e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e1      	bne.n	80068e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3314      	adds	r3, #20
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800692e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3314      	adds	r3, #20
 800693e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e3      	bne.n	800691e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006976:	f023 0310 	bic.w	r3, r3, #16
 800697a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006988:	65ba      	str	r2, [r7, #88]	; 0x58
 800698a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800698e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e3      	bne.n	8006964 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fa fed5 	bl	8001750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8c1 	bl	8006b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069c2:	e09b      	b.n	8006afc <HAL_UART_IRQHandler+0x518>
 80069c4:	08006fa3 	.word	0x08006fa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 808e 	beq.w	8006b00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8089 	beq.w	8006b00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a12:	647a      	str	r2, [r7, #68]	; 0x44
 8006a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e3      	bne.n	80069ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	623b      	str	r3, [r7, #32]
   return(result);
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a4a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e3      	bne.n	8006a26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a90:	61fa      	str	r2, [r7, #28]
 8006a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e3      	bne.n	8006a6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f847 	bl	8006b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ab6:	e023      	b.n	8006b00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x4f4>
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa7a 	bl	8006fca <UART_Transmit_IT>
    return;
 8006ad6:	e014      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00e      	beq.n	8006b02 <HAL_UART_IRQHandler+0x51e>
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 faba 	bl	800706a <UART_EndTransmit_IT>
    return;
 8006af6:	e004      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
    return;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b00:	bf00      	nop
  }
}
 8006b02:	37e8      	adds	r7, #232	; 0xe8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b09c      	sub	sp, #112	; 0x70
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d172      	bne.n	8006c5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ba0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3314      	adds	r3, #20
 8006bd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e5      	bne.n	8006bb2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3314      	adds	r3, #20
 8006c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c06:	633a      	str	r2, [r7, #48]	; 0x30
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e5      	bne.n	8006be6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d119      	bne.n	8006c5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 0310 	bic.w	r3, r3, #16
 8006c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c4a:	61fa      	str	r2, [r7, #28]
 8006c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	69b9      	ldr	r1, [r7, #24]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	617b      	str	r3, [r7, #20]
   return(result);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c60:	2200      	movs	r2, #0
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d106      	bne.n	8006c7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c70:	4619      	mov	r1, r3
 8006c72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c74:	f7ff ff66 	bl	8006b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c78:	e002      	b.n	8006c80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c7c:	f7f9 fe6e 	bl	800095c <HAL_UART_RxCpltCallback>
}
 8006c80:	bf00      	nop
 8006c82:	3770      	adds	r7, #112	; 0x70
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d108      	bne.n	8006cb6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4619      	mov	r1, r3
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff ff48 	bl	8006b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cb4:	e002      	b.n	8006cbc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff ff30 	bl	8006b1c <HAL_UART_RxHalfCpltCallback>
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b21      	cmp	r3, #33	; 0x21
 8006cf6:	d108      	bne.n	8006d0a <UART_DMAError+0x46>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f000 f8c1 	bl	8006e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	bf0c      	ite	eq
 8006d18:	2301      	moveq	r3, #1
 8006d1a:	2300      	movne	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b22      	cmp	r3, #34	; 0x22
 8006d2a:	d108      	bne.n	8006d3e <UART_DMAError+0x7a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d38:	68b8      	ldr	r0, [r7, #8]
 8006d3a:	f000 f8cf 	bl	8006edc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	f043 0210 	orr.w	r2, r3, #16
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f7ff fef0 	bl	8006b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b098      	sub	sp, #96	; 0x60
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2222      	movs	r2, #34	; 0x22
 8006d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	4a3e      	ldr	r2, [pc, #248]	; (8006e80 <UART_Start_Receive_DMA+0x128>)
 8006d86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	4a3d      	ldr	r2, [pc, #244]	; (8006e84 <UART_Start_Receive_DMA+0x12c>)
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	4a3c      	ldr	r2, [pc, #240]	; (8006e88 <UART_Start_Receive_DMA+0x130>)
 8006d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006da0:	f107 0308 	add.w	r3, r7, #8
 8006da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	f7fa fc72 	bl	80016a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d019      	beq.n	8006e0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	657b      	str	r3, [r7, #84]	; 0x54
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3314      	adds	r3, #20
 8006e48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	617b      	str	r3, [r7, #20]
   return(result);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e58:	653b      	str	r3, [r7, #80]	; 0x50
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e62:	627a      	str	r2, [r7, #36]	; 0x24
 8006e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6a39      	ldr	r1, [r7, #32]
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3760      	adds	r7, #96	; 0x60
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	08006b5d 	.word	0x08006b5d
 8006e84:	08006c89 	.word	0x08006c89
 8006e88:	08006cc5 	.word	0x08006cc5

08006e8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b089      	sub	sp, #36	; 0x24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	61ba      	str	r2, [r7, #24]
 8006eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006ed0:	bf00      	nop
 8006ed2:	3724      	adds	r7, #36	; 0x24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b095      	sub	sp, #84	; 0x54
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f04:	643a      	str	r2, [r7, #64]	; 0x40
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d119      	bne.n	8006f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 0310 	bic.w	r3, r3, #16
 8006f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f74:	61ba      	str	r2, [r7, #24]
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f96:	bf00      	nop
 8006f98:	3754      	adds	r7, #84	; 0x54
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff fdb7 	bl	8006b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b21      	cmp	r3, #33	; 0x21
 8006fdc:	d13e      	bne.n	800705c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe6:	d114      	bne.n	8007012 <UART_Transmit_IT+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]
 8007010:	e008      	b.n	8007024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6211      	str	r1, [r2, #32]
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	4619      	mov	r1, r3
 8007032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10f      	bne.n	8007058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e000      	b.n	800705e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800705c:	2302      	movs	r3, #2
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fd3c 	bl	8006b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08c      	sub	sp, #48	; 0x30
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b22      	cmp	r3, #34	; 0x22
 80070ac:	f040 80ae 	bne.w	800720c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d117      	bne.n	80070ea <UART_Receive_IT+0x50>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d113      	bne.n	80070ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d8:	b29a      	uxth	r2, r3
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	1c9a      	adds	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28
 80070e8:	e026      	b.n	8007138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fc:	d007      	beq.n	800710e <UART_Receive_IT+0x74>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <UART_Receive_IT+0x82>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e008      	b.n	800712e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	b2da      	uxtb	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4619      	mov	r1, r3
 8007146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007148:	2b00      	cmp	r3, #0
 800714a:	d15d      	bne.n	8007208 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0220 	bic.w	r2, r2, #32
 800715a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800716a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	2b01      	cmp	r3, #1
 8007190:	d135      	bne.n	80071fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	613b      	str	r3, [r7, #16]
   return(result);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f023 0310 	bic.w	r3, r3, #16
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b8:	623a      	str	r2, [r7, #32]
 80071ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e5      	bne.n	8007198 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d10a      	bne.n	80071f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fca4 	bl	8006b44 <HAL_UARTEx_RxEventCallback>
 80071fc:	e002      	b.n	8007204 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7f9 fbac 	bl	800095c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e002      	b.n	800720e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	e000      	b.n	800720e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800720c:	2302      	movs	r3, #2
  }
}
 800720e:	4618      	mov	r0, r3
 8007210:	3730      	adds	r7, #48	; 0x30
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800721c:	b0c0      	sub	sp, #256	; 0x100
 800721e:	af00      	add	r7, sp, #0
 8007220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	68d9      	ldr	r1, [r3, #12]
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	ea40 0301 	orr.w	r3, r0, r1
 8007240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	431a      	orrs	r2, r3
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	431a      	orrs	r2, r3
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007270:	f021 010c 	bic.w	r1, r1, #12
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800727e:	430b      	orrs	r3, r1
 8007280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	6999      	ldr	r1, [r3, #24]
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	ea40 0301 	orr.w	r3, r0, r1
 800729e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b8f      	ldr	r3, [pc, #572]	; (80074e4 <UART_SetConfig+0x2cc>)
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d005      	beq.n	80072b8 <UART_SetConfig+0xa0>
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b8d      	ldr	r3, [pc, #564]	; (80074e8 <UART_SetConfig+0x2d0>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d104      	bne.n	80072c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fd feb2 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 80072bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072c0:	e003      	b.n	80072ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072c2:	f7fd fe99 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80072c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d4:	f040 810c 	bne.w	80074f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ea:	4622      	mov	r2, r4
 80072ec:	462b      	mov	r3, r5
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80072f2:	415b      	adcs	r3, r3
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072fa:	4621      	mov	r1, r4
 80072fc:	eb12 0801 	adds.w	r8, r2, r1
 8007300:	4629      	mov	r1, r5
 8007302:	eb43 0901 	adc.w	r9, r3, r1
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800731a:	4690      	mov	r8, r2
 800731c:	4699      	mov	r9, r3
 800731e:	4623      	mov	r3, r4
 8007320:	eb18 0303 	adds.w	r3, r8, r3
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007328:	462b      	mov	r3, r5
 800732a:	eb49 0303 	adc.w	r3, r9, r3
 800732e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800733e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007346:	460b      	mov	r3, r1
 8007348:	18db      	adds	r3, r3, r3
 800734a:	653b      	str	r3, [r7, #80]	; 0x50
 800734c:	4613      	mov	r3, r2
 800734e:	eb42 0303 	adc.w	r3, r2, r3
 8007352:	657b      	str	r3, [r7, #84]	; 0x54
 8007354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800735c:	f7f8 ff88 	bl	8000270 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4b61      	ldr	r3, [pc, #388]	; (80074ec <UART_SetConfig+0x2d4>)
 8007366:	fba3 2302 	umull	r2, r3, r3, r2
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	011c      	lsls	r4, r3, #4
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800737c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	1891      	adds	r1, r2, r2
 8007386:	64b9      	str	r1, [r7, #72]	; 0x48
 8007388:	415b      	adcs	r3, r3
 800738a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007390:	4641      	mov	r1, r8
 8007392:	eb12 0a01 	adds.w	sl, r2, r1
 8007396:	4649      	mov	r1, r9
 8007398:	eb43 0b01 	adc.w	fp, r3, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b0:	4692      	mov	sl, r2
 80073b2:	469b      	mov	fp, r3
 80073b4:	4643      	mov	r3, r8
 80073b6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073be:	464b      	mov	r3, r9
 80073c0:	eb4b 0303 	adc.w	r3, fp, r3
 80073c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073dc:	460b      	mov	r3, r1
 80073de:	18db      	adds	r3, r3, r3
 80073e0:	643b      	str	r3, [r7, #64]	; 0x40
 80073e2:	4613      	mov	r3, r2
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073f2:	f7f8 ff3d 	bl	8000270 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2264      	movs	r2, #100	; 0x64
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	1acb      	subs	r3, r1, r3
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007412:	4b36      	ldr	r3, [pc, #216]	; (80074ec <UART_SetConfig+0x2d4>)
 8007414:	fba3 2302 	umull	r2, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007420:	441c      	add	r4, r3
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800742c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	63b9      	str	r1, [r7, #56]	; 0x38
 800743c:	415b      	adcs	r3, r3
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007444:	4641      	mov	r1, r8
 8007446:	1851      	adds	r1, r2, r1
 8007448:	6339      	str	r1, [r7, #48]	; 0x30
 800744a:	4649      	mov	r1, r9
 800744c:	414b      	adcs	r3, r1
 800744e:	637b      	str	r3, [r7, #52]	; 0x34
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800745c:	4659      	mov	r1, fp
 800745e:	00cb      	lsls	r3, r1, #3
 8007460:	4651      	mov	r1, sl
 8007462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007466:	4651      	mov	r1, sl
 8007468:	00ca      	lsls	r2, r1, #3
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	4603      	mov	r3, r0
 8007470:	4642      	mov	r2, r8
 8007472:	189b      	adds	r3, r3, r2
 8007474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007478:	464b      	mov	r3, r9
 800747a:	460a      	mov	r2, r1
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007498:	460b      	mov	r3, r1
 800749a:	18db      	adds	r3, r3, r3
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
 800749e:	4613      	mov	r3, r2
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074ae:	f7f8 fedf 	bl	8000270 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <UART_SetConfig+0x2d4>)
 80074b8:	fba3 1302 	umull	r1, r3, r3, r2
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	2164      	movs	r1, #100	; 0x64
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	3332      	adds	r3, #50	; 0x32
 80074ca:	4a08      	ldr	r2, [pc, #32]	; (80074ec <UART_SetConfig+0x2d4>)
 80074cc:	fba2 2303 	umull	r2, r3, r2, r3
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	f003 0207 	and.w	r2, r3, #7
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4422      	add	r2, r4
 80074de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074e0:	e106      	b.n	80076f0 <UART_SetConfig+0x4d8>
 80074e2:	bf00      	nop
 80074e4:	40011000 	.word	0x40011000
 80074e8:	40011400 	.word	0x40011400
 80074ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	1891      	adds	r1, r2, r2
 8007508:	6239      	str	r1, [r7, #32]
 800750a:	415b      	adcs	r3, r3
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
 800750e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007512:	4641      	mov	r1, r8
 8007514:	1854      	adds	r4, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb43 0501 	adc.w	r5, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	00eb      	lsls	r3, r5, #3
 8007526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752a:	00e2      	lsls	r2, r4, #3
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	4643      	mov	r3, r8
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007538:	464b      	mov	r3, r9
 800753a:	eb45 0303 	adc.w	r3, r5, r3
 800753e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800755e:	4629      	mov	r1, r5
 8007560:	008b      	lsls	r3, r1, #2
 8007562:	4621      	mov	r1, r4
 8007564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007568:	4621      	mov	r1, r4
 800756a:	008a      	lsls	r2, r1, #2
 800756c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007570:	f7f8 fe7e 	bl	8000270 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4b60      	ldr	r3, [pc, #384]	; (80076fc <UART_SetConfig+0x4e4>)
 800757a:	fba3 2302 	umull	r2, r3, r3, r2
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	011c      	lsls	r4, r3, #4
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800758c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	1891      	adds	r1, r2, r2
 800759a:	61b9      	str	r1, [r7, #24]
 800759c:	415b      	adcs	r3, r3
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a4:	4641      	mov	r1, r8
 80075a6:	1851      	adds	r1, r2, r1
 80075a8:	6139      	str	r1, [r7, #16]
 80075aa:	4649      	mov	r1, r9
 80075ac:	414b      	adcs	r3, r1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075bc:	4659      	mov	r1, fp
 80075be:	00cb      	lsls	r3, r1, #3
 80075c0:	4651      	mov	r1, sl
 80075c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c6:	4651      	mov	r1, sl
 80075c8:	00ca      	lsls	r2, r1, #3
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	4642      	mov	r2, r8
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075d8:	464b      	mov	r3, r9
 80075da:	460a      	mov	r2, r1
 80075dc:	eb42 0303 	adc.w	r3, r2, r3
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075fc:	4649      	mov	r1, r9
 80075fe:	008b      	lsls	r3, r1, #2
 8007600:	4641      	mov	r1, r8
 8007602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007606:	4641      	mov	r1, r8
 8007608:	008a      	lsls	r2, r1, #2
 800760a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800760e:	f7f8 fe2f 	bl	8000270 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4611      	mov	r1, r2
 8007618:	4b38      	ldr	r3, [pc, #224]	; (80076fc <UART_SetConfig+0x4e4>)
 800761a:	fba3 2301 	umull	r2, r3, r3, r1
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	2264      	movs	r2, #100	; 0x64
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	1acb      	subs	r3, r1, r3
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	3332      	adds	r3, #50	; 0x32
 800762c:	4a33      	ldr	r2, [pc, #204]	; (80076fc <UART_SetConfig+0x4e4>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007638:	441c      	add	r4, r3
 800763a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763e:	2200      	movs	r2, #0
 8007640:	673b      	str	r3, [r7, #112]	; 0x70
 8007642:	677a      	str	r2, [r7, #116]	; 0x74
 8007644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	415b      	adcs	r3, r3
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007658:	4641      	mov	r1, r8
 800765a:	1851      	adds	r1, r2, r1
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	4649      	mov	r1, r9
 8007660:	414b      	adcs	r3, r1
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007670:	4659      	mov	r1, fp
 8007672:	00cb      	lsls	r3, r1, #3
 8007674:	4651      	mov	r1, sl
 8007676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767a:	4651      	mov	r1, sl
 800767c:	00ca      	lsls	r2, r1, #3
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	4603      	mov	r3, r0
 8007684:	4642      	mov	r2, r8
 8007686:	189b      	adds	r3, r3, r2
 8007688:	66bb      	str	r3, [r7, #104]	; 0x68
 800768a:	464b      	mov	r3, r9
 800768c:	460a      	mov	r2, r1
 800768e:	eb42 0303 	adc.w	r3, r2, r3
 8007692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	663b      	str	r3, [r7, #96]	; 0x60
 800769e:	667a      	str	r2, [r7, #100]	; 0x64
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076ac:	4649      	mov	r1, r9
 80076ae:	008b      	lsls	r3, r1, #2
 80076b0:	4641      	mov	r1, r8
 80076b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b6:	4641      	mov	r1, r8
 80076b8:	008a      	lsls	r2, r1, #2
 80076ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076be:	f7f8 fdd7 	bl	8000270 <__aeabi_uldivmod>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <UART_SetConfig+0x4e4>)
 80076c8:	fba3 1302 	umull	r1, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	2164      	movs	r1, #100	; 0x64
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	3332      	adds	r3, #50	; 0x32
 80076da:	4a08      	ldr	r2, [pc, #32]	; (80076fc <UART_SetConfig+0x4e4>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	f003 020f 	and.w	r2, r3, #15
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4422      	add	r2, r4
 80076ee:	609a      	str	r2, [r3, #8]
}
 80076f0:	bf00      	nop
 80076f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076f6:	46bd      	mov	sp, r7
 80076f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fc:	51eb851f 	.word	0x51eb851f

08007700 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007700:	b084      	sub	sp, #16
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	f107 001c 	add.w	r0, r7, #28
 800770e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007716:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007718:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800771a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800771e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007722:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007726:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800772a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800773a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	b004      	add	sp, #16
 8007754:	4770      	bx	lr

08007756 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2203      	movs	r2, #3
 800779e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0303 	and.w	r3, r3, #3
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007804:	f023 030f 	bic.w	r3, r3, #15
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	b2db      	uxtb	r3, r3
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3314      	adds	r3, #20
 8007846:	461a      	mov	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	4413      	add	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
}  
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007884:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800788a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007890:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0

}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078c4:	2310      	movs	r3, #16
 80078c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff74 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	2110      	movs	r1, #16
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f9d7 	bl	8007c9c <SDMMC_GetCmdResp1>
 80078ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f0:	69fb      	ldr	r3, [r7, #28]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007908:	2311      	movs	r3, #17
 800790a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff52 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007926:	f241 3288 	movw	r2, #5000	; 0x1388
 800792a:	2111      	movs	r1, #17
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9b5 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800794c:	2312      	movs	r3, #18
 800794e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff ff30 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800796a:	f241 3288 	movw	r2, #5000	; 0x1388
 800796e:	2112      	movs	r1, #18
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f993 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007978:	69fb      	ldr	r3, [r7, #28]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b088      	sub	sp, #32
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007990:	2318      	movs	r3, #24
 8007992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800799c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff0e 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b2:	2118      	movs	r1, #24
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f971 	bl	8007c9c <SDMMC_GetCmdResp1>
 80079ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80079d4:	2319      	movs	r3, #25
 80079d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d8:	2340      	movs	r3, #64	; 0x40
 80079da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff feec 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f6:	2119      	movs	r1, #25
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f94f 	bl	8007c9c <SDMMC_GetCmdResp1>
 80079fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a00:	69fb      	ldr	r3, [r7, #28]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007a18:	230c      	movs	r3, #12
 8007a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a1c:	2340      	movs	r3, #64	; 0x40
 8007a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff feca 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007a36:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <SDMMC_CmdStopTransfer+0x40>)
 8007a38:	210c      	movs	r1, #12
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f92e 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	05f5e100 	.word	0x05f5e100

08007a50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a60:	2307      	movs	r3, #7
 8007a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a72:	f107 0310 	add.w	r3, r7, #16
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fea6 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a82:	2107      	movs	r1, #7
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f909 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab4:	f107 0308 	add.w	r3, r7, #8
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fe85 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb23 	bl	800810c <SDMMC_GetCmdError>
 8007ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ada:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fe66 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fab6 	bl	8008070 <SDMMC_GetCmdResp7>
 8007b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b06:	69fb      	ldr	r3, [r7, #28]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b1e:	2337      	movs	r3, #55	; 0x37
 8007b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b30:	f107 0308 	add.w	r3, r7, #8
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fe47 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	2137      	movs	r1, #55	; 0x37
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f8aa 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b6a:	2329      	movs	r3, #41	; 0x29
 8007b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b7c:	f107 0308 	add.w	r3, r7, #8
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fe21 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9bd 	bl	8007f08 <SDMMC_GetCmdResp3>
 8007b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b90:	69fb      	ldr	r3, [r7, #28]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b088      	sub	sp, #32
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007baa:	23c0      	movs	r3, #192	; 0xc0
 8007bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bb8:	f107 0308 	add.w	r3, r7, #8
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fe03 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f957 	bl	8007e78 <SDMMC_GetCmdResp2>
 8007bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007be4:	2309      	movs	r3, #9
 8007be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007be8:	23c0      	movs	r3, #192	; 0xc0
 8007bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bf6:	f107 0308 	add.w	r3, r7, #8
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fde4 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f938 	bl	8007e78 <SDMMC_GetCmdResp2>
 8007c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c22:	2303      	movs	r3, #3
 8007c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c34:	f107 0308 	add.w	r3, r7, #8
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fdc5 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	2103      	movs	r1, #3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f99d 	bl	8007f84 <SDMMC_GetCmdResp6>
 8007c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c64:	230d      	movs	r3, #13
 8007c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c76:	f107 0308 	add.w	r3, r7, #8
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fda4 	bl	80077ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c86:	210d      	movs	r1, #13
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f807 	bl	8007c9c <SDMMC_GetCmdResp1>
 8007c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007caa:	4b70      	ldr	r3, [pc, #448]	; (8007e6c <SDMMC_GetCmdResp1+0x1d0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a70      	ldr	r2, [pc, #448]	; (8007e70 <SDMMC_GetCmdResp1+0x1d4>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	0a5a      	lsrs	r2, r3, #9
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	1e5a      	subs	r2, r3, #1
 8007cc2:	61fa      	str	r2, [r7, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ccc:	e0c9      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0ef      	beq.n	8007cbe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1ea      	bne.n	8007cbe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cfa:	2304      	movs	r3, #4
 8007cfc:	e0b1      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0a6      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	22c5      	movs	r2, #197	; 0xc5
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff fd7f 	bl	800781e <SDIO_GetCommandResponse>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d001      	beq.n	8007d2e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e099      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fd81 	bl	8007838 <SDIO_GetResponse>
 8007d36:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	4b4e      	ldr	r3, [pc, #312]	; (8007e74 <SDMMC_GetCmdResp1+0x1d8>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e08d      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	da02      	bge.n	8007d52 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d50:	e087      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d5c:	2340      	movs	r3, #64	; 0x40
 8007d5e:	e080      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d6a:	2380      	movs	r3, #128	; 0x80
 8007d6c:	e079      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d7c:	e071      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8c:	e069      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9c:	e061      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dac:	e059      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dbc:	e051      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dcc:	e049      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ddc:	e041      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dec:	e039      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dfc:	e031      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e0c:	e029      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e1c:	e021      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e2c:	e019      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e3c:	e011      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e4c:	e009      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e5c:	e001      	b.n	8007e62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000000 	.word	0x20000000
 8007e70:	10624dd3 	.word	0x10624dd3
 8007e74:	fdffe008 	.word	0xfdffe008

08007e78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e80:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <SDMMC_GetCmdResp2+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <SDMMC_GetCmdResp2+0x8c>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	0a5b      	lsrs	r3, r3, #9
 8007e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1e5a      	subs	r2, r3, #1
 8007e9a:	60fa      	str	r2, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ea4:	e026      	b.n	8007ef4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0ef      	beq.n	8007e96 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1ea      	bne.n	8007e96 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2204      	movs	r2, #4
 8007ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	e00e      	b.n	8007ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e003      	b.n	8007ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	22c5      	movs	r2, #197	; 0xc5
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	20000000 	.word	0x20000000
 8007f04:	10624dd3 	.word	0x10624dd3

08007f08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f10:	4b1a      	ldr	r3, [pc, #104]	; (8007f7c <SDMMC_GetCmdResp3+0x74>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1a      	ldr	r2, [pc, #104]	; (8007f80 <SDMMC_GetCmdResp3+0x78>)
 8007f16:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1a:	0a5b      	lsrs	r3, r3, #9
 8007f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f20:	fb02 f303 	mul.w	r3, r2, r3
 8007f24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	1e5a      	subs	r2, r3, #1
 8007f2a:	60fa      	str	r2, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f34:	e01b      	b.n	8007f6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0ef      	beq.n	8007f26 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1ea      	bne.n	8007f26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f62:	2304      	movs	r3, #4
 8007f64:	e003      	b.n	8007f6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	22c5      	movs	r2, #197	; 0xc5
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000000 	.word	0x20000000
 8007f80:	10624dd3 	.word	0x10624dd3

08007f84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f92:	4b35      	ldr	r3, [pc, #212]	; (8008068 <SDMMC_GetCmdResp6+0xe4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a35      	ldr	r2, [pc, #212]	; (800806c <SDMMC_GetCmdResp6+0xe8>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	0a5b      	lsrs	r3, r3, #9
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	61fa      	str	r2, [r7, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fb6:	e052      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0ef      	beq.n	8007fa8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1ea      	bne.n	8007fa8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	e03a      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e02f      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff fc0d 	bl	800781e <SDIO_GetCommandResponse>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	4293      	cmp	r3, r2
 800800c:	d001      	beq.n	8008012 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800800e:	2301      	movs	r3, #1
 8008010:	e025      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22c5      	movs	r2, #197	; 0xc5
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff fc0c 	bl	8007838 <SDIO_GetResponse>
 8008020:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	0c1b      	lsrs	r3, r3, #16
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008036:	2300      	movs	r3, #0
 8008038:	e011      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008048:	e009      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008058:	e001      	b.n	800805e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800805a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000000 	.word	0x20000000
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008078:	4b22      	ldr	r3, [pc, #136]	; (8008104 <SDMMC_GetCmdResp7+0x94>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a22      	ldr	r2, [pc, #136]	; (8008108 <SDMMC_GetCmdResp7+0x98>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	0a5b      	lsrs	r3, r3, #9
 8008084:	f241 3288 	movw	r2, #5000	; 0x1388
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1e5a      	subs	r2, r3, #1
 8008092:	60fa      	str	r2, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800809c:	e02c      	b.n	80080f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0ef      	beq.n	800808e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1ea      	bne.n	800808e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ca:	2304      	movs	r3, #4
 80080cc:	e014      	b.n	80080f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e009      	b.n	80080f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2240      	movs	r2, #64	; 0x40
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
  
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	20000000 	.word	0x20000000
 8008108:	10624dd3 	.word	0x10624dd3

0800810c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008114:	4b11      	ldr	r3, [pc, #68]	; (800815c <SDMMC_GetCmdError+0x50>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a11      	ldr	r2, [pc, #68]	; (8008160 <SDMMC_GetCmdError+0x54>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	0a5b      	lsrs	r3, r3, #9
 8008120:	f241 3288 	movw	r2, #5000	; 0x1388
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	60fa      	str	r2, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008138:	e009      	b.n	800814e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f1      	beq.n	800812a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	22c5      	movs	r2, #197	; 0xc5
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000000 	.word	0x20000000
 8008160:	10624dd3 	.word	0x10624dd3

08008164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 001c 	add.w	r0, r7, #28
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008176:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800817a:	2b01      	cmp	r3, #1
 800817c:	d123      	bne.n	80081c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f001 fae2 	bl	8009784 <USB_CoreReset>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
 80081c4:	e01b      	b.n	80081fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fad6 	bl	8009784 <USB_CoreReset>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80081dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
 80081f0:	e005      	b.n	80081fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80081fe:	7fbb      	ldrb	r3, [r7, #30]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d10b      	bne.n	800821c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f043 0206 	orr.w	r2, r3, #6
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f043 0220 	orr.w	r2, r3, #32
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008228:	b004      	add	sp, #16
 800822a:	4770      	bx	lr

0800822c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d165      	bne.n	800830c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4a41      	ldr	r2, [pc, #260]	; (8008348 <USB_SetTurnaroundTime+0x11c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d906      	bls.n	8008256 <USB_SetTurnaroundTime+0x2a>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4a40      	ldr	r2, [pc, #256]	; (800834c <USB_SetTurnaroundTime+0x120>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d202      	bcs.n	8008256 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008250:	230f      	movs	r3, #15
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	e062      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4a3c      	ldr	r2, [pc, #240]	; (800834c <USB_SetTurnaroundTime+0x120>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d306      	bcc.n	800826c <USB_SetTurnaroundTime+0x40>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	4a3b      	ldr	r2, [pc, #236]	; (8008350 <USB_SetTurnaroundTime+0x124>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d202      	bcs.n	800826c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008266:	230e      	movs	r3, #14
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e057      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4a38      	ldr	r2, [pc, #224]	; (8008350 <USB_SetTurnaroundTime+0x124>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d306      	bcc.n	8008282 <USB_SetTurnaroundTime+0x56>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4a37      	ldr	r2, [pc, #220]	; (8008354 <USB_SetTurnaroundTime+0x128>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d202      	bcs.n	8008282 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800827c:	230d      	movs	r3, #13
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e04c      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4a33      	ldr	r2, [pc, #204]	; (8008354 <USB_SetTurnaroundTime+0x128>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d306      	bcc.n	8008298 <USB_SetTurnaroundTime+0x6c>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4a32      	ldr	r2, [pc, #200]	; (8008358 <USB_SetTurnaroundTime+0x12c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d802      	bhi.n	8008298 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008292:	230c      	movs	r3, #12
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e041      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4a2f      	ldr	r2, [pc, #188]	; (8008358 <USB_SetTurnaroundTime+0x12c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d906      	bls.n	80082ae <USB_SetTurnaroundTime+0x82>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4a2e      	ldr	r2, [pc, #184]	; (800835c <USB_SetTurnaroundTime+0x130>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d802      	bhi.n	80082ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082a8:	230b      	movs	r3, #11
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	e036      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4a2a      	ldr	r2, [pc, #168]	; (800835c <USB_SetTurnaroundTime+0x130>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d906      	bls.n	80082c4 <USB_SetTurnaroundTime+0x98>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4a29      	ldr	r2, [pc, #164]	; (8008360 <USB_SetTurnaroundTime+0x134>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d802      	bhi.n	80082c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80082be:	230a      	movs	r3, #10
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	e02b      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a26      	ldr	r2, [pc, #152]	; (8008360 <USB_SetTurnaroundTime+0x134>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d906      	bls.n	80082da <USB_SetTurnaroundTime+0xae>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	4a25      	ldr	r2, [pc, #148]	; (8008364 <USB_SetTurnaroundTime+0x138>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d202      	bcs.n	80082da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80082d4:	2309      	movs	r3, #9
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	e020      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a21      	ldr	r2, [pc, #132]	; (8008364 <USB_SetTurnaroundTime+0x138>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d306      	bcc.n	80082f0 <USB_SetTurnaroundTime+0xc4>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4a20      	ldr	r2, [pc, #128]	; (8008368 <USB_SetTurnaroundTime+0x13c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d802      	bhi.n	80082f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80082ea:	2308      	movs	r3, #8
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e015      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4a1d      	ldr	r2, [pc, #116]	; (8008368 <USB_SetTurnaroundTime+0x13c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d906      	bls.n	8008306 <USB_SetTurnaroundTime+0xda>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4a1c      	ldr	r2, [pc, #112]	; (800836c <USB_SetTurnaroundTime+0x140>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d202      	bcs.n	8008306 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008300:	2307      	movs	r3, #7
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e00a      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008306:	2306      	movs	r3, #6
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e007      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008312:	2309      	movs	r3, #9
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	e001      	b.n	800831c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008318:	2309      	movs	r3, #9
 800831a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	029b      	lsls	r3, r3, #10
 8008330:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008334:	431a      	orrs	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	00d8acbf 	.word	0x00d8acbf
 800834c:	00e4e1c0 	.word	0x00e4e1c0
 8008350:	00f42400 	.word	0x00f42400
 8008354:	01067380 	.word	0x01067380
 8008358:	011a499f 	.word	0x011a499f
 800835c:	01312cff 	.word	0x01312cff
 8008360:	014ca43f 	.word	0x014ca43f
 8008364:	016e3600 	.word	0x016e3600
 8008368:	01a6ab1f 	.word	0x01a6ab1f
 800836c:	01e84800 	.word	0x01e84800

08008370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f043 0201 	orr.w	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f023 0201 	bic.w	r2, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d115      	bne.n	8008402 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083e2:	200a      	movs	r0, #10
 80083e4:	f7f8 ff78 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	330a      	adds	r3, #10
 80083ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 f939 	bl	8009666 <USB_GetMode>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d01e      	beq.n	8008438 <USB_SetCurrentMode+0x84>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2bc7      	cmp	r3, #199	; 0xc7
 80083fe:	d9f0      	bls.n	80083e2 <USB_SetCurrentMode+0x2e>
 8008400:	e01a      	b.n	8008438 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d115      	bne.n	8008434 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008414:	200a      	movs	r0, #10
 8008416:	f7f8 ff5f 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	330a      	adds	r3, #10
 800841e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f920 	bl	8009666 <USB_GetMode>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <USB_SetCurrentMode+0x84>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2bc7      	cmp	r3, #199	; 0xc7
 8008430:	d9f0      	bls.n	8008414 <USB_SetCurrentMode+0x60>
 8008432:	e001      	b.n	8008438 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e005      	b.n	8008444 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2bc8      	cmp	r3, #200	; 0xc8
 800843c:	d101      	bne.n	8008442 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800844c:	b084      	sub	sp, #16
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800845a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	e009      	b.n	8008480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3340      	adds	r3, #64	; 0x40
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	2200      	movs	r2, #0
 8008478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	3301      	adds	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b0e      	cmp	r3, #14
 8008484:	d9f2      	bls.n	800846c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008486:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11c      	bne.n	80084c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800849c:	f043 0302 	orr.w	r3, r3, #2
 80084a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
 80084c6:	e00b      	b.n	80084e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e6:	461a      	mov	r2, r3
 80084e8:	2300      	movs	r3, #0
 80084ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d10d      	bne.n	8008510 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f968 	bl	80087d4 <USB_SetDevSpeed>
 8008504:	e008      	b.n	8008518 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008506:	2101      	movs	r1, #1
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f963 	bl	80087d4 <USB_SetDevSpeed>
 800850e:	e003      	b.n	8008518 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008510:	2103      	movs	r1, #3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f95e 	bl	80087d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008518:	2110      	movs	r1, #16
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8fa 	bl	8008714 <USB_FlushTxFifo>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f924 	bl	8008778 <USB_FlushRxFifo>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	461a      	mov	r2, r3
 8008542:	2300      	movs	r3, #0
 8008544:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854c:	461a      	mov	r2, r3
 800854e:	2300      	movs	r3, #0
 8008550:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008558:	461a      	mov	r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800855e:	2300      	movs	r3, #0
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	e043      	b.n	80085ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857a:	d118      	bne.n	80085ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858e:	461a      	mov	r2, r3
 8008590:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	e013      	b.n	80085c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	461a      	mov	r2, r3
 80085a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	e008      	b.n	80085c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ba:	461a      	mov	r2, r3
 80085bc:	2300      	movs	r3, #0
 80085be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	461a      	mov	r2, r3
 80085ce:	2300      	movs	r3, #0
 80085d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	461a      	mov	r2, r3
 80085e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3301      	adds	r3, #1
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085f0:	461a      	mov	r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d3b5      	bcc.n	8008564 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
 80085fc:	e043      	b.n	8008686 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008614:	d118      	bne.n	8008648 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008628:	461a      	mov	r2, r3
 800862a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	e013      	b.n	800865a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	461a      	mov	r2, r3
 8008640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	e008      	b.n	800865a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	461a      	mov	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	461a      	mov	r2, r3
 800867a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800867e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	3301      	adds	r3, #1
 8008684:	613b      	str	r3, [r7, #16]
 8008686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800868a:	461a      	mov	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4293      	cmp	r3, r2
 8008690:	d3b5      	bcc.n	80085fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	f043 0210 	orr.w	r2, r3, #16
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	4b10      	ldr	r3, [pc, #64]	; (8008710 <USB_DevInit+0x2c4>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	f043 0208 	orr.w	r2, r3, #8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d107      	bne.n	8008700 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	f043 0304 	orr.w	r3, r3, #4
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800870c:	b004      	add	sp, #16
 800870e:	4770      	bx	lr
 8008710:	803c3800 	.word	0x803c3800

08008714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3301      	adds	r3, #1
 8008726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800872e:	d901      	bls.n	8008734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e01b      	b.n	800876c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	daf2      	bge.n	8008722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	019b      	lsls	r3, r3, #6
 8008744:	f043 0220 	orr.w	r2, r3, #32
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008758:	d901      	bls.n	800875e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e006      	b.n	800876c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b20      	cmp	r3, #32
 8008768:	d0f0      	beq.n	800874c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008790:	d901      	bls.n	8008796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e018      	b.n	80087c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	daf2      	bge.n	8008784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2210      	movs	r2, #16
 80087a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80087b4:	d901      	bls.n	80087ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e006      	b.n	80087c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d0f0      	beq.n	80087a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087f4:	4313      	orrs	r3, r2
 80087f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 0306 	and.w	r3, r3, #6
 800881e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]
 800882a:	e00a      	b.n	8008842 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d002      	beq.n	8008838 <USB_GetDevSpeed+0x32>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b06      	cmp	r3, #6
 8008836:	d102      	bne.n	800883e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008838:	2302      	movs	r3, #2
 800883a:	75fb      	strb	r3, [r7, #23]
 800883c:	e001      	b.n	8008842 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800883e:	230f      	movs	r3, #15
 8008840:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d13a      	bne.n	80088e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	2101      	movs	r1, #1
 800887e:	fa01 f303 	lsl.w	r3, r1, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	68f9      	ldr	r1, [r7, #12]
 8008886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888a:	4313      	orrs	r3, r2
 800888c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d155      	bne.n	8008950 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	059b      	lsls	r3, r3, #22
 80088c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088c8:	4313      	orrs	r3, r2
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	e036      	b.n	8008950 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e8:	69da      	ldr	r2, [r3, #28]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	2101      	movs	r1, #1
 80088f4:	fa01 f303 	lsl.w	r3, r1, r3
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008900:	4313      	orrs	r3, r2
 8008902:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11a      	bne.n	8008950 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008936:	430b      	orrs	r3, r1
 8008938:	4313      	orrs	r3, r2
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d161      	bne.n	8008a40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008992:	d11f      	bne.n	80089d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	43db      	mvns	r3, r3
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f4:	4013      	ands	r3, r2
 80089f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	2101      	movs	r1, #1
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	43db      	mvns	r3, r3
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a18:	4013      	ands	r3, r2
 8008a1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	0159      	lsls	r1, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	440b      	add	r3, r1
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	4619      	mov	r1, r3
 8008a38:	4b35      	ldr	r3, [pc, #212]	; (8008b10 <USB_DeactivateEndpoint+0x1b0>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	600b      	str	r3, [r1, #0]
 8008a3e:	e060      	b.n	8008b02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a56:	d11f      	bne.n	8008a98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	0151      	lsls	r1, r2, #5
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	440a      	add	r2, r1
 8008a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	68f9      	ldr	r1, [r7, #12]
 8008ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ab8:	4013      	ands	r3, r2
 8008aba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	2101      	movs	r1, #1
 8008ace:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	68f9      	ldr	r1, [r7, #12]
 8008ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008adc:	4013      	ands	r3, r2
 8008ade:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	0159      	lsls	r1, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	440b      	add	r3, r1
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	4619      	mov	r1, r3
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <USB_DeactivateEndpoint+0x1b4>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	ec337800 	.word	0xec337800
 8008b14:	eff37800 	.word	0xeff37800

08008b18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	f040 817a 	bne.w	8008e2e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d132      	bne.n	8008ba8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba0:	0cdb      	lsrs	r3, r3, #19
 8008ba2:	04db      	lsls	r3, r3, #19
 8008ba4:	6113      	str	r3, [r2, #16]
 8008ba6:	e092      	b.n	8008cce <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc2:	0cdb      	lsrs	r3, r3, #19
 8008bc4:	04db      	lsls	r3, r3, #19
 8008bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008be6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d11a      	bne.n	8008c28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	691a      	ldr	r2, [r3, #16]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d903      	bls.n	8008c06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	0151      	lsls	r1, r2, #5
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	440a      	add	r2, r1
 8008c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c24:	6113      	str	r3, [r2, #16]
 8008c26:	e01b      	b.n	8008c60 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6919      	ldr	r1, [r3, #16]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	440b      	add	r3, r1
 8008c40:	1e59      	subs	r1, r3, #1
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c4a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c4c:	4ba2      	ldr	r3, [pc, #648]	; (8008ed8 <USB_EPStartXfer+0x3c0>)
 8008c4e:	400b      	ands	r3, r1
 8008c50:	69b9      	ldr	r1, [r7, #24]
 8008c52:	0148      	lsls	r0, r1, #5
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	4401      	add	r1, r0
 8008c58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c76:	69b9      	ldr	r1, [r7, #24]
 8008c78:	0148      	lsls	r0, r1, #5
 8008c7a:	69f9      	ldr	r1, [r7, #28]
 8008c7c:	4401      	add	r1, r0
 8008c7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c82:	4313      	orrs	r3, r2
 8008c84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	791b      	ldrb	r3, [r3, #4]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d11f      	bne.n	8008cce <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	0151      	lsls	r1, r2, #5
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ccc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d14b      	bne.n	8008d6c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	791b      	ldrb	r3, [r3, #4]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d128      	bne.n	8008d4a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d110      	bne.n	8008d2a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	0151      	lsls	r1, r2, #5
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	e00f      	b.n	8008d4a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	e165      	b.n	8009038 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d015      	beq.n	8008dc0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 814d 	beq.w	8009038 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	2101      	movs	r1, #1
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	634b      	str	r3, [r1, #52]	; 0x34
 8008dbe:	e13b      	b.n	8009038 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d110      	bne.n	8008df2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e00f      	b.n	8008e12 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	0151      	lsls	r1, r2, #5
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	440a      	add	r2, r1
 8008e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	68d9      	ldr	r1, [r3, #12]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	781a      	ldrb	r2, [r3, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	b298      	uxth	r0, r3
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4603      	mov	r3, r0
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f9b8 	bl	800919c <USB_WritePacket>
 8008e2c:	e104      	b.n	8009038 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e48:	0cdb      	lsrs	r3, r3, #19
 8008e4a:	04db      	lsls	r3, r3, #19
 8008e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e70:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d131      	bne.n	8008edc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9c:	691a      	ldr	r2, [r3, #16]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ea6:	69b9      	ldr	r1, [r7, #24]
 8008ea8:	0148      	lsls	r0, r1, #5
 8008eaa:	69f9      	ldr	r1, [r7, #28]
 8008eac:	4401      	add	r1, r0
 8008eae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ed4:	6113      	str	r3, [r2, #16]
 8008ed6:	e061      	b.n	8008f9c <USB_EPStartXfer+0x484>
 8008ed8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d123      	bne.n	8008f2c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008efa:	69b9      	ldr	r1, [r7, #24]
 8008efc:	0148      	lsls	r0, r1, #5
 8008efe:	69f9      	ldr	r1, [r7, #28]
 8008f00:	4401      	add	r1, r0
 8008f02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f06:	4313      	orrs	r3, r2
 8008f08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f28:	6113      	str	r3, [r2, #16]
 8008f2a:	e037      	b.n	8008f9c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	1e5a      	subs	r2, r3, #1
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	8afa      	ldrh	r2, [r7, #22]
 8008f48:	fb03 f202 	mul.w	r2, r3, r2
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	8afb      	ldrh	r3, [r7, #22]
 8008f60:	04d9      	lsls	r1, r3, #19
 8008f62:	4b38      	ldr	r3, [pc, #224]	; (8009044 <USB_EPStartXfer+0x52c>)
 8008f64:	400b      	ands	r3, r1
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	0148      	lsls	r0, r1, #5
 8008f6a:	69f9      	ldr	r1, [r7, #28]
 8008f6c:	4401      	add	r1, r0
 8008f6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f72:	4313      	orrs	r3, r2
 8008f74:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	0148      	lsls	r0, r1, #5
 8008f90:	69f9      	ldr	r1, [r7, #28]
 8008f92:	4401      	add	r1, r0
 8008f94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d10d      	bne.n	8008fbe <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	68d9      	ldr	r1, [r3, #12]
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fba:	460a      	mov	r2, r1
 8008fbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d128      	bne.n	8009018 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d110      	bne.n	8008ff8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e00f      	b.n	8009018 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009016:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	1ff80000 	.word	0x1ff80000

08009048 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d14a      	bne.n	80090fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800907a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800907e:	f040 8086 	bne.w	800918e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	7812      	ldrb	r2, [r2, #0]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	0151      	lsls	r1, r2, #5
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	440a      	add	r2, r1
 80090c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d902      	bls.n	80090e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
          break;
 80090de:	e056      	b.n	800918e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f8:	d0e7      	beq.n	80090ca <USB_EPStopXfer+0x82>
 80090fa:	e048      	b.n	800918e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009114:	d13b      	bne.n	800918e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	7812      	ldrb	r2, [r2, #0]
 800912a:	0151      	lsls	r1, r2, #5
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	440a      	add	r2, r1
 8009130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009138:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	7812      	ldrb	r2, [r2, #0]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f242 7210 	movw	r2, #10000	; 0x2710
 800916a:	4293      	cmp	r3, r2
 800916c:	d902      	bls.n	8009174 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
          break;
 8009172:	e00c      	b.n	800918e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800918c:	d0e7      	beq.n	800915e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009190:	4618      	mov	r0, r3
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	; 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4611      	mov	r1, r2
 80091a8:	461a      	mov	r2, r3
 80091aa:	460b      	mov	r3, r1
 80091ac:	71fb      	strb	r3, [r7, #7]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d123      	bne.n	800920a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091c2:	88bb      	ldrh	r3, [r7, #4]
 80091c4:	3303      	adds	r3, #3
 80091c6:	089b      	lsrs	r3, r3, #2
 80091c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	e018      	b.n	8009202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	031a      	lsls	r2, r3, #12
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091dc:	461a      	mov	r2, r3
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3301      	adds	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	3301      	adds	r3, #1
 80091fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	3301      	adds	r3, #1
 8009200:	61bb      	str	r3, [r7, #24]
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	429a      	cmp	r2, r3
 8009208:	d3e2      	bcc.n	80091d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3724      	adds	r7, #36	; 0x24
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009218:	b480      	push	{r7}
 800921a:	b08b      	sub	sp, #44	; 0x2c
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800922e:	88fb      	ldrh	r3, [r7, #6]
 8009230:	089b      	lsrs	r3, r3, #2
 8009232:	b29b      	uxth	r3, r3
 8009234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800923e:	2300      	movs	r3, #0
 8009240:	623b      	str	r3, [r7, #32]
 8009242:	e014      	b.n	800926e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	3301      	adds	r3, #1
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	3301      	adds	r3, #1
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	3301      	adds	r3, #1
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	3301      	adds	r3, #1
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	3301      	adds	r3, #1
 800926c:	623b      	str	r3, [r7, #32]
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	429a      	cmp	r2, r3
 8009274:	d3e6      	bcc.n	8009244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009276:	8bfb      	ldrh	r3, [r7, #30]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01e      	beq.n	80092ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009286:	461a      	mov	r2, r3
 8009288:	f107 0310 	add.w	r3, r7, #16
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
 800929c:	b2da      	uxtb	r2, r3
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	701a      	strb	r2, [r3, #0]
      i++;
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	3301      	adds	r3, #1
 80092a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	3301      	adds	r3, #1
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092ae:	8bfb      	ldrh	r3, [r7, #30]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092b4:	8bfb      	ldrh	r3, [r7, #30]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1ea      	bne.n	8009290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092bc:	4618      	mov	r0, r3
 80092be:	372c      	adds	r7, #44	; 0x2c
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d12c      	bne.n	800933e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	db12      	blt.n	800931c <USB_EPSetStall+0x54>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00f      	beq.n	800931c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800931a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	440a      	add	r2, r1
 8009332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e02b      	b.n	8009396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	db12      	blt.n	8009376 <USB_EPSetStall+0xae>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00f      	beq.n	8009376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d128      	bne.n	8009412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	0151      	lsls	r1, r2, #5
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	440a      	add	r2, r1
 80093d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	791b      	ldrb	r3, [r3, #4]
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d003      	beq.n	80093f0 <USB_EPClearStall+0x4c>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	791b      	ldrb	r3, [r3, #4]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d138      	bne.n	8009462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	e027      	b.n	8009462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800942c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	2b03      	cmp	r3, #3
 8009438:	d003      	beq.n	8009442 <USB_EPClearStall+0x9e>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	791b      	ldrb	r3, [r3, #4]
 800943e:	2b02      	cmp	r3, #2
 8009440:	d10f      	bne.n	8009462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800945c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800948e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094a4:	68f9      	ldr	r1, [r7, #12]
 80094a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094aa:	4313      	orrs	r3, r2
 80094ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094d6:	f023 0303 	bic.w	r3, r3, #3
 80094da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ea:	f023 0302 	bic.w	r3, r3, #2
 80094ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800952c:	f043 0302 	orr.w	r3, r3, #2
 8009530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4013      	ands	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009558:	68fb      	ldr	r3, [r7, #12]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	4013      	ands	r3, r2
 8009588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	0c1b      	lsrs	r3, r3, #16
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800959a:	b480      	push	{r7}
 800959c:	b085      	sub	sp, #20
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	4013      	ands	r3, r2
 80095bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	b29b      	uxth	r3, r3
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	4013      	ands	r3, r2
 80095fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095fc:	68bb      	ldr	r3, [r7, #8]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	01db      	lsls	r3, r3, #7
 800963c:	b2db      	uxtb	r3, r3
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4013      	ands	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009658:	68bb      	ldr	r3, [r7, #8]
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f003 0301 	and.w	r3, r3, #1
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096a0:	f023 0307 	bic.w	r3, r3, #7
 80096a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	460b      	mov	r3, r1
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	333c      	adds	r3, #60	; 0x3c
 80096de:	3304      	adds	r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4a26      	ldr	r2, [pc, #152]	; (8009780 <USB_EP0_OutStart+0xb8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d90a      	bls.n	8009702 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096fc:	d101      	bne.n	8009702 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e037      	b.n	8009772 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	461a      	mov	r2, r3
 800970a:	2300      	movs	r3, #0
 800970c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800971c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009730:	f043 0318 	orr.w	r3, r3, #24
 8009734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009744:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009748:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d10f      	bne.n	8009770 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800976e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	4f54300a 	.word	0x4f54300a

08009784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800979c:	d901      	bls.n	80097a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e01b      	b.n	80097da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	daf2      	bge.n	8009790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f043 0201 	orr.w	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3301      	adds	r3, #1
 80097be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80097c6:	d901      	bls.n	80097cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e006      	b.n	80097da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d0f0      	beq.n	80097ba <USB_CoreReset+0x36>

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <MX_FATFS_Init+0x18>)
 80097ee:	4805      	ldr	r0, [pc, #20]	; (8009804 <MX_FATFS_Init+0x1c>)
 80097f0:	f007 fb60 	bl	8010eb4 <FATFS_LinkDriver>
 80097f4:	4603      	mov	r3, r0
 80097f6:	461a      	mov	r2, r3
 80097f8:	4b03      	ldr	r3, [pc, #12]	; (8009808 <MX_FATFS_Init+0x20>)
 80097fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80097fc:	bf00      	nop
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000888 	.word	0x20000888
 8009804:	0801f1d4 	.word	0x0801f1d4
 8009808:	20000884 	.word	0x20000884

0800980c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009810:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009812:	4618      	mov	r0, r3
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009826:	f000 f89e 	bl	8009966 <BSP_SD_IsDetected>
 800982a:	4603      	mov	r3, r0
 800982c:	2b01      	cmp	r3, #1
 800982e:	d001      	beq.n	8009834 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e005      	b.n	8009840 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009834:	4804      	ldr	r0, [pc, #16]	; (8009848 <BSP_SD_Init+0x2c>)
 8009836:	f7fb fc22 	bl	800507e <HAL_SD_Init>
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800983e:	79fb      	ldrb	r3, [r7, #7]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000264 	.word	0x20000264

0800984c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4806      	ldr	r0, [pc, #24]	; (8009884 <BSP_SD_ReadBlocks+0x38>)
 800986a:	f7fb fcb9 	bl	80051e0 <HAL_SD_ReadBlocks>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000264 	.word	0x20000264

08009888 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <BSP_SD_WriteBlocks+0x38>)
 80098a6:	f7fb fe81 	bl	80055ac <HAL_SD_WriteBlocks>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000264 	.word	0x20000264

080098c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80098c8:	4805      	ldr	r0, [pc, #20]	; (80098e0 <BSP_SD_GetCardState+0x1c>)
 80098ca:	f7fc fb5d 	bl	8005f88 <HAL_SD_GetCardState>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
}
 80098da:	4618      	mov	r0, r3
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000264 	.word	0x20000264

080098e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4803      	ldr	r0, [pc, #12]	; (80098fc <BSP_SD_GetCardInfo+0x18>)
 80098f0:	f7fc fb1e 	bl	8005f30 <HAL_SD_GetCardInfo>
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20000264 	.word	0x20000264

08009900 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009908:	f000 f818 	bl	800993c <BSP_SD_AbortCallback>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800991c:	f000 f815 	bl	800994a <BSP_SD_WriteCpltCallback>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009930:	f000 f812 	bl	8009958 <BSP_SD_ReadCpltCallback>
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0

}
 8009940:	bf00      	nop
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800994a:	b480      	push	{r7}
 800994c:	af00      	add	r7, sp, #0

}
 800994e:	bf00      	nop
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0

}
 800995c:	bf00      	nop
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800996c:	2301      	movs	r3, #1
 800996e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	b2db      	uxtb	r3, r3
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <SD_CheckStatus+0x38>)
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009990:	f7ff ff98 	bl	80098c4 <BSP_SD_GetCardState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d107      	bne.n	80099aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <SD_CheckStatus+0x38>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <SD_CheckStatus+0x38>)
 80099a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <SD_CheckStatus+0x38>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b2db      	uxtb	r3, r3
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20000009 	.word	0x20000009

080099bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <SD_initialize+0x38>)
 80099c8:	2201      	movs	r2, #1
 80099ca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80099cc:	f7ff ff26 	bl	800981c <BSP_SD_Init>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d107      	bne.n	80099e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff ffd1 	bl	8009980 <SD_CheckStatus>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <SD_initialize+0x38>)
 80099e4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80099e6:	4b03      	ldr	r3, [pc, #12]	; (80099f4 <SD_initialize+0x38>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b2db      	uxtb	r3, r3
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000009 	.word	0x20000009

080099f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff ffbb 	bl	8009980 <SD_CheckStatus>
 8009a0a:	4603      	mov	r3, r0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009a28:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	68b8      	ldr	r0, [r7, #8]
 8009a32:	f7ff ff0b 	bl	800984c <BSP_SD_ReadBlocks>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d107      	bne.n	8009a4c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009a3c:	bf00      	nop
 8009a3e:	f7ff ff41 	bl	80098c4 <BSP_SD_GetCardState>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1fa      	bne.n	8009a3e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f7ff ff08 	bl	8009888 <BSP_SD_WriteBlocks>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d107      	bne.n	8009a8e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009a7e:	bf00      	nop
 8009a80:	f7ff ff20 	bl	80098c4 <BSP_SD_GetCardState>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1fa      	bne.n	8009a80 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08c      	sub	sp, #48	; 0x30
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	603a      	str	r2, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009aae:	4b25      	ldr	r3, [pc, #148]	; (8009b44 <SD_ioctl+0xac>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <SD_ioctl+0x28>
 8009abc:	2303      	movs	r3, #3
 8009abe:	e03c      	b.n	8009b3a <SD_ioctl+0xa2>

  switch (cmd)
 8009ac0:	79bb      	ldrb	r3, [r7, #6]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d834      	bhi.n	8009b30 <SD_ioctl+0x98>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <SD_ioctl+0x34>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009add 	.word	0x08009add
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b17 	.word	0x08009b17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ae2:	e028      	b.n	8009b36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ae4:	f107 030c 	add.w	r3, r7, #12
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff fefb 	bl	80098e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009afa:	e01c      	b.n	8009b36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009afc:	f107 030c 	add.w	r3, r7, #12
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff feef 	bl	80098e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b14:	e00f      	b.n	8009b36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b16:	f107 030c 	add.w	r3, r7, #12
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff fee2 	bl	80098e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	0a5a      	lsrs	r2, r3, #9
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b2e:	e002      	b.n	8009b36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3730      	adds	r7, #48	; 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000009 	.word	0x20000009

08009b48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009b4e:	4b87      	ldr	r3, [pc, #540]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009b50:	22c0      	movs	r2, #192	; 0xc0
 8009b52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009b54:	4b85      	ldr	r3, [pc, #532]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009b56:	22a8      	movs	r2, #168	; 0xa8
 8009b58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009b5a:	4b84      	ldr	r3, [pc, #528]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8009b60:	4b82      	ldr	r3, [pc, #520]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009b62:	226f      	movs	r2, #111	; 0x6f
 8009b64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009b66:	4b82      	ldr	r3, [pc, #520]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009b68:	22ff      	movs	r2, #255	; 0xff
 8009b6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009b6c:	4b80      	ldr	r3, [pc, #512]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009b6e:	22ff      	movs	r2, #255	; 0xff
 8009b70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009b72:	4b7f      	ldr	r3, [pc, #508]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009b74:	22ff      	movs	r2, #255	; 0xff
 8009b76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009b78:	4b7d      	ldr	r3, [pc, #500]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009b7e:	4b7d      	ldr	r3, [pc, #500]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009b80:	22c0      	movs	r2, #192	; 0xc0
 8009b82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009b84:	4b7b      	ldr	r3, [pc, #492]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009b86:	22a8      	movs	r2, #168	; 0xa8
 8009b88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009b8a:	4b7a      	ldr	r3, [pc, #488]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009b90:	4b78      	ldr	r3, [pc, #480]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009b96:	f007 f9ca 	bl	8010f2e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009b9a:	4b74      	ldr	r3, [pc, #464]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	061a      	lsls	r2, r3, #24
 8009ba0:	4b72      	ldr	r3, [pc, #456]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	4b70      	ldr	r3, [pc, #448]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009baa:	789b      	ldrb	r3, [r3, #2]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	4a6e      	ldr	r2, [pc, #440]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bb2:	78d2      	ldrb	r2, [r2, #3]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	061a      	lsls	r2, r3, #24
 8009bb8:	4b6c      	ldr	r3, [pc, #432]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	0619      	lsls	r1, r3, #24
 8009bbe:	4b6b      	ldr	r3, [pc, #428]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	4319      	orrs	r1, r3
 8009bc6:	4b69      	ldr	r3, [pc, #420]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bc8:	789b      	ldrb	r3, [r3, #2]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	4967      	ldr	r1, [pc, #412]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bd0:	78c9      	ldrb	r1, [r1, #3]
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	4b63      	ldr	r3, [pc, #396]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	0619      	lsls	r1, r3, #24
 8009be2:	4b62      	ldr	r3, [pc, #392]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	041b      	lsls	r3, r3, #16
 8009be8:	4319      	orrs	r1, r3
 8009bea:	4b60      	ldr	r3, [pc, #384]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bec:	789b      	ldrb	r3, [r3, #2]
 8009bee:	021b      	lsls	r3, r3, #8
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	495e      	ldr	r1, [pc, #376]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009bf4:	78c9      	ldrb	r1, [r1, #3]
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	4b5a      	ldr	r3, [pc, #360]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	0619      	lsls	r1, r3, #24
 8009c06:	4b59      	ldr	r3, [pc, #356]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	4319      	orrs	r1, r3
 8009c0e:	4b57      	ldr	r3, [pc, #348]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	430b      	orrs	r3, r1
 8009c16:	4955      	ldr	r1, [pc, #340]	; (8009d6c <MX_LWIP_Init+0x224>)
 8009c18:	78c9      	ldrb	r1, [r1, #3]
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	0e1b      	lsrs	r3, r3, #24
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	4a55      	ldr	r2, [pc, #340]	; (8009d78 <MX_LWIP_Init+0x230>)
 8009c22:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009c24:	4b52      	ldr	r3, [pc, #328]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	061a      	lsls	r2, r3, #24
 8009c2a:	4b51      	ldr	r3, [pc, #324]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	431a      	orrs	r2, r3
 8009c32:	4b4f      	ldr	r3, [pc, #316]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c34:	789b      	ldrb	r3, [r3, #2]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	4a4d      	ldr	r2, [pc, #308]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c3c:	78d2      	ldrb	r2, [r2, #3]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	061a      	lsls	r2, r3, #24
 8009c42:	4b4b      	ldr	r3, [pc, #300]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	0619      	lsls	r1, r3, #24
 8009c48:	4b49      	ldr	r3, [pc, #292]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	041b      	lsls	r3, r3, #16
 8009c4e:	4319      	orrs	r1, r3
 8009c50:	4b47      	ldr	r3, [pc, #284]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c52:	789b      	ldrb	r3, [r3, #2]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	430b      	orrs	r3, r1
 8009c58:	4945      	ldr	r1, [pc, #276]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c5a:	78c9      	ldrb	r1, [r1, #3]
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	021b      	lsls	r3, r3, #8
 8009c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c64:	431a      	orrs	r2, r3
 8009c66:	4b42      	ldr	r3, [pc, #264]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	0619      	lsls	r1, r3, #24
 8009c6c:	4b40      	ldr	r3, [pc, #256]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	041b      	lsls	r3, r3, #16
 8009c72:	4319      	orrs	r1, r3
 8009c74:	4b3e      	ldr	r3, [pc, #248]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c76:	789b      	ldrb	r3, [r3, #2]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	493c      	ldr	r1, [pc, #240]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c7e:	78c9      	ldrb	r1, [r1, #3]
 8009c80:	430b      	orrs	r3, r1
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	4b39      	ldr	r3, [pc, #228]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	0619      	lsls	r1, r3, #24
 8009c90:	4b37      	ldr	r3, [pc, #220]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	4319      	orrs	r1, r3
 8009c98:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009c9a:	789b      	ldrb	r3, [r3, #2]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	430b      	orrs	r3, r1
 8009ca0:	4933      	ldr	r1, [pc, #204]	; (8009d70 <MX_LWIP_Init+0x228>)
 8009ca2:	78c9      	ldrb	r1, [r1, #3]
 8009ca4:	430b      	orrs	r3, r1
 8009ca6:	0e1b      	lsrs	r3, r3, #24
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	4a34      	ldr	r2, [pc, #208]	; (8009d7c <MX_LWIP_Init+0x234>)
 8009cac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009cae:	4b31      	ldr	r3, [pc, #196]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	061a      	lsls	r2, r3, #24
 8009cb4:	4b2f      	ldr	r3, [pc, #188]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cbe:	789b      	ldrb	r3, [r3, #2]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	4a2b      	ldr	r2, [pc, #172]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cc6:	78d2      	ldrb	r2, [r2, #3]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	061a      	lsls	r2, r3, #24
 8009ccc:	4b29      	ldr	r3, [pc, #164]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	0619      	lsls	r1, r3, #24
 8009cd2:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	041b      	lsls	r3, r3, #16
 8009cd8:	4319      	orrs	r1, r3
 8009cda:	4b26      	ldr	r3, [pc, #152]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cdc:	789b      	ldrb	r3, [r3, #2]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	430b      	orrs	r3, r1
 8009ce2:	4924      	ldr	r1, [pc, #144]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009ce4:	78c9      	ldrb	r1, [r1, #3]
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	4b20      	ldr	r3, [pc, #128]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	0619      	lsls	r1, r3, #24
 8009cf6:	4b1f      	ldr	r3, [pc, #124]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	041b      	lsls	r3, r3, #16
 8009cfc:	4319      	orrs	r1, r3
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d00:	789b      	ldrb	r3, [r3, #2]
 8009d02:	021b      	lsls	r3, r3, #8
 8009d04:	430b      	orrs	r3, r1
 8009d06:	491b      	ldr	r1, [pc, #108]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d08:	78c9      	ldrb	r1, [r1, #3]
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d12:	431a      	orrs	r2, r3
 8009d14:	4b17      	ldr	r3, [pc, #92]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	0619      	lsls	r1, r3, #24
 8009d1a:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	041b      	lsls	r3, r3, #16
 8009d20:	4319      	orrs	r1, r3
 8009d22:	4b14      	ldr	r3, [pc, #80]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d24:	789b      	ldrb	r3, [r3, #2]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	4912      	ldr	r1, [pc, #72]	; (8009d74 <MX_LWIP_Init+0x22c>)
 8009d2c:	78c9      	ldrb	r1, [r1, #3]
 8009d2e:	430b      	orrs	r3, r1
 8009d30:	0e1b      	lsrs	r3, r3, #24
 8009d32:	4313      	orrs	r3, r2
 8009d34:	4a12      	ldr	r2, [pc, #72]	; (8009d80 <MX_LWIP_Init+0x238>)
 8009d36:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009d38:	4b12      	ldr	r3, [pc, #72]	; (8009d84 <MX_LWIP_Init+0x23c>)
 8009d3a:	9302      	str	r3, [sp, #8]
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <MX_LWIP_Init+0x240>)
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	2300      	movs	r3, #0
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <MX_LWIP_Init+0x238>)
 8009d46:	4a0d      	ldr	r2, [pc, #52]	; (8009d7c <MX_LWIP_Init+0x234>)
 8009d48:	490b      	ldr	r1, [pc, #44]	; (8009d78 <MX_LWIP_Init+0x230>)
 8009d4a:	4810      	ldr	r0, [pc, #64]	; (8009d8c <MX_LWIP_Init+0x244>)
 8009d4c:	f007 fdda 	bl	8011904 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009d50:	480e      	ldr	r0, [pc, #56]	; (8009d8c <MX_LWIP_Init+0x244>)
 8009d52:	f007 ff89 	bl	8011c68 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009d56:	480d      	ldr	r0, [pc, #52]	; (8009d8c <MX_LWIP_Init+0x244>)
 8009d58:	f007 ff96 	bl	8011c88 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009d5c:	490c      	ldr	r1, [pc, #48]	; (8009d90 <MX_LWIP_Init+0x248>)
 8009d5e:	480b      	ldr	r0, [pc, #44]	; (8009d8c <MX_LWIP_Init+0x244>)
 8009d60:	f008 f894 	bl	8011e8c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	200008d0 	.word	0x200008d0
 8009d70:	200008d4 	.word	0x200008d4
 8009d74:	200008d8 	.word	0x200008d8
 8009d78:	200008c4 	.word	0x200008c4
 8009d7c:	200008c8 	.word	0x200008c8
 8009d80:	200008cc 	.word	0x200008cc
 8009d84:	0801a745 	.word	0x0801a745
 8009d88:	0800a0a1 	.word	0x0800a0a1
 8009d8c:	20000890 	.word	0x20000890
 8009d90:	08009de5 	.word	0x08009de5

08009d94 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009d9c:	f7f7 fa90 	bl	80012c0 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <Ethernet_Link_Periodic_Handle+0x30>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b63      	cmp	r3, #99	; 0x63
 8009daa:	d907      	bls.n	8009dbc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009dac:	f7f7 fa88 	bl	80012c0 <HAL_GetTick>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <Ethernet_Link_Periodic_Handle+0x30>)
 8009db4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fab6 	bl	800a328 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	2000088c 	.word	0x2000088c

08009dc8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009dcc:	4804      	ldr	r0, [pc, #16]	; (8009de0 <MX_LWIP_Process+0x18>)
 8009dce:	f000 f947 	bl	800a060 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009dd2:	f00e f8cb 	bl	8017f6c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009dd6:	4802      	ldr	r0, [pc, #8]	; (8009de0 <MX_LWIP_Process+0x18>)
 8009dd8:	f7ff ffdc 	bl	8009d94 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009ddc:	bf00      	nop
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	20000890 	.word	0x20000890

08009de4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009e04:	4b40      	ldr	r3, [pc, #256]	; (8009f08 <low_level_init+0x110>)
 8009e06:	4a41      	ldr	r2, [pc, #260]	; (8009f0c <low_level_init+0x114>)
 8009e08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009e0e:	2380      	movs	r3, #128	; 0x80
 8009e10:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009e12:	23e1      	movs	r3, #225	; 0xe1
 8009e14:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009e16:	2300      	movs	r3, #0
 8009e18:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009e22:	4a39      	ldr	r2, [pc, #228]	; (8009f08 <low_level_init+0x110>)
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009e2a:	4b37      	ldr	r3, [pc, #220]	; (8009f08 <low_level_init+0x110>)
 8009e2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009e30:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009e32:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <low_level_init+0x110>)
 8009e34:	4a36      	ldr	r2, [pc, #216]	; (8009f10 <low_level_init+0x118>)
 8009e36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009e38:	4b33      	ldr	r3, [pc, #204]	; (8009f08 <low_level_init+0x110>)
 8009e3a:	4a36      	ldr	r2, [pc, #216]	; (8009f14 <low_level_init+0x11c>)
 8009e3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009e3e:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <low_level_init+0x110>)
 8009e40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009e44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009e46:	4830      	ldr	r0, [pc, #192]	; (8009f08 <low_level_init+0x110>)
 8009e48:	f7f7 ff7e 	bl	8001d48 <HAL_ETH_Init>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009e50:	2238      	movs	r2, #56	; 0x38
 8009e52:	2100      	movs	r1, #0
 8009e54:	4830      	ldr	r0, [pc, #192]	; (8009f18 <low_level_init+0x120>)
 8009e56:	f011 fd82 	bl	801b95e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009e5a:	4b2f      	ldr	r3, [pc, #188]	; (8009f18 <low_level_init+0x120>)
 8009e5c:	2221      	movs	r2, #33	; 0x21
 8009e5e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009e60:	4b2d      	ldr	r3, [pc, #180]	; (8009f18 <low_level_init+0x120>)
 8009e62:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009e66:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009e68:	4b2b      	ldr	r3, [pc, #172]	; (8009f18 <low_level_init+0x120>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009e6e:	482b      	ldr	r0, [pc, #172]	; (8009f1c <low_level_init+0x124>)
 8009e70:	f007 fc10 	bl	8011694 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2206      	movs	r2, #6
 8009e78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009e7c:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <low_level_init+0x110>)
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009e88:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <low_level_init+0x110>)
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	785a      	ldrb	r2, [r3, #1]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009e94:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <low_level_init+0x110>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	789a      	ldrb	r2, [r3, #2]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009ea0:	4b19      	ldr	r3, [pc, #100]	; (8009f08 <low_level_init+0x110>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	78da      	ldrb	r2, [r3, #3]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009eac:	4b16      	ldr	r3, [pc, #88]	; (8009f08 <low_level_init+0x110>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	791a      	ldrb	r2, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009eb8:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <low_level_init+0x110>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	795a      	ldrb	r2, [r3, #5]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009eca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ed2:	f043 030a 	orr.w	r3, r3, #10
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8009ede:	4910      	ldr	r1, [pc, #64]	; (8009f20 <low_level_init+0x128>)
 8009ee0:	4810      	ldr	r0, [pc, #64]	; (8009f24 <low_level_init+0x12c>)
 8009ee2:	f7f7 f826 	bl	8000f32 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8009ee6:	480f      	ldr	r0, [pc, #60]	; (8009f24 <low_level_init+0x12c>)
 8009ee8:	f7f7 f855 	bl	8000f96 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa18 	bl	800a328 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009ef8:	e001      	b.n	8009efe <low_level_init+0x106>
    Error_Handler();
 8009efa:	f7f6 fd51 	bl	80009a0 <Error_Handler>
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	200053a8 	.word	0x200053a8
 8009f0c:	40028000 	.word	0x40028000
 8009f10:	20005308 	.word	0x20005308
 8009f14:	20005268 	.word	0x20005268
 8009f18:	20005458 	.word	0x20005458
 8009f1c:	0801f1e8 	.word	0x0801f1e8
 8009f20:	2000000c 	.word	0x2000000c
 8009f24:	20005490 	.word	0x20005490

08009f28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b092      	sub	sp, #72	; 0x48
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009f40:	f107 030c 	add.w	r3, r7, #12
 8009f44:	2230      	movs	r2, #48	; 0x30
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f011 fd08 	bl	801b95e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	2230      	movs	r2, #48	; 0x30
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f011 fd01 	bl	801b95e <memset>

  for(q = p; q != NULL; q = q->next)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f60:	e045      	b.n	8009fee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d902      	bls.n	8009f6e <low_level_output+0x46>
      return ERR_IF;
 8009f68:	f06f 030b 	mvn.w	r3, #11
 8009f6c:	e055      	b.n	800a01a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f70:	6859      	ldr	r1, [r3, #4]
 8009f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f74:	4613      	mov	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	3348      	adds	r3, #72	; 0x48
 8009f7e:	443b      	add	r3, r7
 8009f80:	3b3c      	subs	r3, #60	; 0x3c
 8009f82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f86:	895b      	ldrh	r3, [r3, #10]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	3348      	adds	r3, #72	; 0x48
 8009f96:	443b      	add	r3, r7
 8009f98:	3b38      	subs	r3, #56	; 0x38
 8009f9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa4:	1e5a      	subs	r2, r3, #1
 8009fa6:	f107 000c 	add.w	r0, r7, #12
 8009faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fac:	460b      	mov	r3, r1
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	440b      	add	r3, r1
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	18c1      	adds	r1, r0, r3
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	3348      	adds	r3, #72	; 0x48
 8009fc0:	443b      	add	r3, r7
 8009fc2:	3b34      	subs	r3, #52	; 0x34
 8009fc4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	3348      	adds	r3, #72	; 0x48
 8009fda:	443b      	add	r3, r7
 8009fdc:	3b34      	subs	r3, #52	; 0x34
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	643b      	str	r3, [r7, #64]	; 0x40
 8009fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1b6      	bne.n	8009f62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <low_level_output+0xfc>)
 8009ffc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009ffe:	4a09      	ldr	r2, [pc, #36]	; (800a024 <low_level_output+0xfc>)
 800a000:	f107 030c 	add.w	r3, r7, #12
 800a004:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a006:	4a07      	ldr	r2, [pc, #28]	; (800a024 <low_level_output+0xfc>)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a00c:	2214      	movs	r2, #20
 800a00e:	4905      	ldr	r1, [pc, #20]	; (800a024 <low_level_output+0xfc>)
 800a010:	4805      	ldr	r0, [pc, #20]	; (800a028 <low_level_output+0x100>)
 800a012:	f7f7 ffcf 	bl	8001fb4 <HAL_ETH_Transmit>

  return errval;
 800a016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3748      	adds	r7, #72	; 0x48
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20005458 	.word	0x20005458
 800a028:	200053a8 	.word	0x200053a8

0800a02c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <low_level_input+0x2c>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d105      	bne.n	800a04c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a040:	f107 030c 	add.w	r3, r7, #12
 800a044:	4619      	mov	r1, r3
 800a046:	4805      	ldr	r0, [pc, #20]	; (800a05c <low_level_input+0x30>)
 800a048:	f7f8 f848 	bl	80020dc <HAL_ETH_ReadData>
  }

  return p;
 800a04c:	68fb      	ldr	r3, [r7, #12]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20005264 	.word	0x20005264
 800a05c:	200053a8 	.word	0x200053a8

0800a060 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ffdd 	bl	800a02c <low_level_input>
 800a072:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	4798      	blx	r3
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f008 fa7e 	bl	801258c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1ea      	bne.n	800a06c <ethernetif_input+0xc>
}
 800a096:	bf00      	nop
 800a098:	bf00      	nop
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <ethernetif_init+0x1c>
 800a0ae:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <ethernetif_init+0x48>)
 800a0b0:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a0b4:	490d      	ldr	r1, [pc, #52]	; (800a0ec <ethernetif_init+0x4c>)
 800a0b6:	480e      	ldr	r0, [pc, #56]	; (800a0f0 <ethernetif_init+0x50>)
 800a0b8:	f011 fbec 	bl	801b894 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2273      	movs	r2, #115	; 0x73
 800a0c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2274      	movs	r2, #116	; 0x74
 800a0c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <ethernetif_init+0x54>)
 800a0d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <ethernetif_init+0x58>)
 800a0d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff fe8d 	bl	8009df8 <low_level_init>

  return ERR_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	0801c718 	.word	0x0801c718
 800a0ec:	0801c734 	.word	0x0801c734
 800a0f0:	0801c744 	.word	0x0801c744
 800a0f4:	08018bfd 	.word	0x08018bfd
 800a0f8:	08009f29 	.word	0x08009f29

0800a0fc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a108:	68f9      	ldr	r1, [r7, #12]
 800a10a:	4807      	ldr	r0, [pc, #28]	; (800a128 <pbuf_free_custom+0x2c>)
 800a10c:	f007 fba4 	bl	8011858 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <pbuf_free_custom+0x30>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d102      	bne.n	800a11e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <pbuf_free_custom+0x30>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	701a      	strb	r2, [r3, #0]
  }
}
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	0801f1e8 	.word	0x0801f1e8
 800a12c:	20005264 	.word	0x20005264

0800a130 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a134:	f7f7 f8c4 	bl	80012c0 <HAL_GetTick>
 800a138:	4603      	mov	r3, r0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08e      	sub	sp, #56	; 0x38
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	605a      	str	r2, [r3, #4]
 800a152:	609a      	str	r2, [r3, #8]
 800a154:	60da      	str	r2, [r3, #12]
 800a156:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a46      	ldr	r2, [pc, #280]	; (800a278 <HAL_ETH_MspInit+0x138>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	f040 8085 	bne.w	800a26e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a164:	2300      	movs	r3, #0
 800a166:	623b      	str	r3, [r7, #32]
 800a168:	4b44      	ldr	r3, [pc, #272]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16c:	4a43      	ldr	r2, [pc, #268]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a16e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a172:	6313      	str	r3, [r2, #48]	; 0x30
 800a174:	4b41      	ldr	r3, [pc, #260]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17c:	623b      	str	r3, [r7, #32]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	4b3d      	ldr	r3, [pc, #244]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a188:	4a3c      	ldr	r2, [pc, #240]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a18a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a18e:	6313      	str	r3, [r2, #48]	; 0x30
 800a190:	4b3a      	ldr	r3, [pc, #232]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	2300      	movs	r3, #0
 800a19e:	61bb      	str	r3, [r7, #24]
 800a1a0:	4b36      	ldr	r3, [pc, #216]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a4:	4a35      	ldr	r2, [pc, #212]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ac:	4b33      	ldr	r3, [pc, #204]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	4b2f      	ldr	r3, [pc, #188]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c0:	4a2e      	ldr	r2, [pc, #184]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1c2:	f043 0304 	orr.w	r3, r3, #4
 800a1c6:	6313      	str	r3, [r2, #48]	; 0x30
 800a1c8:	4b2c      	ldr	r3, [pc, #176]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	4b28      	ldr	r3, [pc, #160]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	4a27      	ldr	r2, [pc, #156]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1de:	f043 0301 	orr.w	r3, r3, #1
 800a1e2:	6313      	str	r3, [r2, #48]	; 0x30
 800a1e4:	4b25      	ldr	r3, [pc, #148]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	613b      	str	r3, [r7, #16]
 800a1ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	4b21      	ldr	r3, [pc, #132]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f8:	4a20      	ldr	r2, [pc, #128]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a200:	4b1e      	ldr	r3, [pc, #120]	; (800a27c <HAL_ETH_MspInit+0x13c>)
 800a202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a20c:	2332      	movs	r3, #50	; 0x32
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a210:	2302      	movs	r3, #2
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a214:	2300      	movs	r3, #0
 800a216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a218:	2303      	movs	r3, #3
 800a21a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a21c:	230b      	movs	r3, #11
 800a21e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a224:	4619      	mov	r1, r3
 800a226:	4816      	ldr	r0, [pc, #88]	; (800a280 <HAL_ETH_MspInit+0x140>)
 800a228:	f7f8 fe90 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a22c:	2386      	movs	r3, #134	; 0x86
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a230:	2302      	movs	r3, #2
 800a232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a234:	2300      	movs	r3, #0
 800a236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a238:	2303      	movs	r3, #3
 800a23a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a23c:	230b      	movs	r3, #11
 800a23e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a244:	4619      	mov	r1, r3
 800a246:	480f      	ldr	r0, [pc, #60]	; (800a284 <HAL_ETH_MspInit+0x144>)
 800a248:	f7f8 fe80 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a24c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a252:	2302      	movs	r3, #2
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a256:	2300      	movs	r3, #0
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a25a:	2303      	movs	r3, #3
 800a25c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a25e:	230b      	movs	r3, #11
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a266:	4619      	mov	r1, r3
 800a268:	4807      	ldr	r0, [pc, #28]	; (800a288 <HAL_ETH_MspInit+0x148>)
 800a26a:	f7f8 fe6f 	bl	8002f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a26e:	bf00      	nop
 800a270:	3738      	adds	r7, #56	; 0x38
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40028000 	.word	0x40028000
 800a27c:	40023800 	.word	0x40023800
 800a280:	40020800 	.word	0x40020800
 800a284:	40020000 	.word	0x40020000
 800a288:	40020400 	.word	0x40020400

0800a28c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a290:	4802      	ldr	r0, [pc, #8]	; (800a29c <ETH_PHY_IO_Init+0x10>)
 800a292:	f7f8 f9ff 	bl	8002694 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	200053a8 	.word	0x200053a8

0800a2a0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	af00      	add	r7, sp, #0
  return 0;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	4807      	ldr	r0, [pc, #28]	; (800a2e0 <ETH_PHY_IO_ReadReg+0x30>)
 800a2c4:	f7f8 f84e 	bl	8002364 <HAL_ETH_ReadPHYRegister>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d2:	e000      	b.n	800a2d6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200053a8 	.word	0x200053a8

0800a2e4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	4807      	ldr	r0, [pc, #28]	; (800a314 <ETH_PHY_IO_WriteReg+0x30>)
 800a2f8:	f7f8 f87f 	bl	80023fa <HAL_ETH_WritePHYRegister>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e000      	b.n	800a30a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	200053a8 	.word	0x200053a8

0800a318 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a31c:	f7f6 ffd0 	bl	80012c0 <HAL_GetTick>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b0a0      	sub	sp, #128	; 0x80
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a330:	f107 030c 	add.w	r3, r7, #12
 800a334:	2264      	movs	r2, #100	; 0x64
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f011 fb10 	bl	801b95e <memset>
  int32_t PHYLinkState = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a346:	2300      	movs	r3, #0
 800a348:	67bb      	str	r3, [r7, #120]	; 0x78
 800a34a:	2300      	movs	r3, #0
 800a34c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800a34e:	483a      	ldr	r0, [pc, #232]	; (800a438 <ethernet_link_check_state+0x110>)
 800a350:	f7f6 fec9 	bl	80010e6 <DP83848_GetLinkState>
 800a354:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a35c:	089b      	lsrs	r3, r3, #2
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00c      	beq.n	800a382 <ethernet_link_check_state+0x5a>
 800a368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	dc09      	bgt.n	800a382 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a36e:	4833      	ldr	r0, [pc, #204]	; (800a43c <ethernet_link_check_state+0x114>)
 800a370:	f7f7 fdc7 	bl	8001f02 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f007 fcf3 	bl	8011d60 <netif_set_down>
    netif_set_link_down(netif);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f007 fd56 	bl	8011e2c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a380:	e055      	b.n	800a42e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d14e      	bne.n	800a42e <ethernet_link_check_state+0x106>
 800a390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a392:	2b01      	cmp	r3, #1
 800a394:	dd4b      	ble.n	800a42e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a398:	3b02      	subs	r3, #2
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d82a      	bhi.n	800a3f4 <ethernet_link_check_state+0xcc>
 800a39e:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <ethernet_link_check_state+0x7c>)
 800a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3c7 	.word	0x0800a3c7
 800a3ac:	0800a3d7 	.word	0x0800a3d7
 800a3b0:	0800a3e7 	.word	0x0800a3e7
      duplex = ETH_FULLDUPLEX_MODE;
 800a3b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a3ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a3c4:	e017      	b.n	800a3f6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a3ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a3d4:	e00f      	b.n	800a3f6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a3d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3da:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a3e4:	e007      	b.n	800a3f6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a3f2:	e000      	b.n	800a3f6 <ethernet_link_check_state+0xce>
      break;
 800a3f4:	bf00      	nop
    if(linkchanged)
 800a3f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d018      	beq.n	800a42e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	4619      	mov	r1, r3
 800a402:	480e      	ldr	r0, [pc, #56]	; (800a43c <ethernet_link_check_state+0x114>)
 800a404:	f7f8 f842 	bl	800248c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a40c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a40e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4619      	mov	r1, r3
 800a416:	4809      	ldr	r0, [pc, #36]	; (800a43c <ethernet_link_check_state+0x114>)
 800a418:	f7f8 f922 	bl	8002660 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a41c:	4807      	ldr	r0, [pc, #28]	; (800a43c <ethernet_link_check_state+0x114>)
 800a41e:	f7f7 fd11 	bl	8001e44 <HAL_ETH_Start>
      netif_set_up(netif);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f007 fc30 	bl	8011c88 <netif_set_up>
      netif_set_link_up(netif);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f007 fccb 	bl	8011dc4 <netif_set_link_up>
}
 800a42e:	bf00      	nop
 800a430:	3780      	adds	r7, #128	; 0x80
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20005490 	.word	0x20005490
 800a43c:	200053a8 	.word	0x200053a8

0800a440 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a448:	4812      	ldr	r0, [pc, #72]	; (800a494 <HAL_ETH_RxAllocateCallback+0x54>)
 800a44a:	f007 f997 	bl	801177c <memp_malloc_pool>
 800a44e:	60f8      	str	r0, [r7, #12]
  if (p)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d014      	beq.n	800a480 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f103 0220 	add.w	r2, r3, #32
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a0d      	ldr	r2, [pc, #52]	; (800a498 <HAL_ETH_RxAllocateCallback+0x58>)
 800a464:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a46e:	9201      	str	r2, [sp, #4]
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2241      	movs	r2, #65	; 0x41
 800a476:	2100      	movs	r1, #0
 800a478:	2000      	movs	r0, #0
 800a47a:	f007 fecd 	bl	8012218 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a47e:	e005      	b.n	800a48c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <HAL_ETH_RxAllocateCallback+0x5c>)
 800a482:	2201      	movs	r2, #1
 800a484:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	0801f1e8 	.word	0x0801f1e8
 800a498:	0800a0fd 	.word	0x0800a0fd
 800a49c:	20005264 	.word	0x20005264

0800a4a0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b089      	sub	sp, #36	; 0x24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3b20      	subs	r3, #32
 800a4be:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	887a      	ldrh	r2, [r7, #2]
 800a4d0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	e003      	b.n	800a4ea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	e009      	b.n	800a50c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	891a      	ldrh	r2, [r3, #8]
 800a4fc:	887b      	ldrh	r3, [r7, #2]
 800a4fe:	4413      	add	r3, r2
 800a500:	b29a      	uxth	r2, r3
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1f2      	bne.n	800a4f8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	3724      	adds	r7, #36	; 0x24
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a52c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a530:	f011 f86c 	bl	801b60c <USBD_static_malloc>
 800a534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d109      	bne.n	800a550 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	32b0      	adds	r2, #176	; 0xb0
 800a546:	2100      	movs	r1, #0
 800a548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a54c:	2302      	movs	r3, #2
 800a54e:	e0d4      	b.n	800a6fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a550:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a554:	2100      	movs	r1, #0
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f011 fa01 	bl	801b95e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32b0      	adds	r2, #176	; 0xb0
 800a566:	68f9      	ldr	r1, [r7, #12]
 800a568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	32b0      	adds	r2, #176	; 0xb0
 800a576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	7c1b      	ldrb	r3, [r3, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d138      	bne.n	800a5fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a588:	4b5e      	ldr	r3, [pc, #376]	; (800a704 <USBD_CDC_Init+0x1e4>)
 800a58a:	7819      	ldrb	r1, [r3, #0]
 800a58c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a590:	2202      	movs	r2, #2
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f010 fef7 	bl	801b386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a598:	4b5a      	ldr	r3, [pc, #360]	; (800a704 <USBD_CDC_Init+0x1e4>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 020f 	and.w	r2, r3, #15
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3324      	adds	r3, #36	; 0x24
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5b2:	4b55      	ldr	r3, [pc, #340]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a5b4:	7819      	ldrb	r1, [r3, #0]
 800a5b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f010 fee2 	bl	801b386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5c2:	4b51      	ldr	r3, [pc, #324]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	f003 020f 	and.w	r2, r3, #15
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5da:	2201      	movs	r2, #1
 800a5dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5de:	4b4b      	ldr	r3, [pc, #300]	; (800a70c <USBD_CDC_Init+0x1ec>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 020f 	and.w	r2, r3, #15
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	440b      	add	r3, r1
 800a5f2:	3326      	adds	r3, #38	; 0x26
 800a5f4:	2210      	movs	r2, #16
 800a5f6:	801a      	strh	r2, [r3, #0]
 800a5f8:	e035      	b.n	800a666 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5fa:	4b42      	ldr	r3, [pc, #264]	; (800a704 <USBD_CDC_Init+0x1e4>)
 800a5fc:	7819      	ldrb	r1, [r3, #0]
 800a5fe:	2340      	movs	r3, #64	; 0x40
 800a600:	2202      	movs	r2, #2
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f010 febf 	bl	801b386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a608:	4b3e      	ldr	r3, [pc, #248]	; (800a704 <USBD_CDC_Init+0x1e4>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 020f 	and.w	r2, r3, #15
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	4613      	mov	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	440b      	add	r3, r1
 800a61c:	3324      	adds	r3, #36	; 0x24
 800a61e:	2201      	movs	r2, #1
 800a620:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a622:	4b39      	ldr	r3, [pc, #228]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a624:	7819      	ldrb	r1, [r3, #0]
 800a626:	2340      	movs	r3, #64	; 0x40
 800a628:	2202      	movs	r2, #2
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f010 feab 	bl	801b386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a630:	4b35      	ldr	r3, [pc, #212]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	f003 020f 	and.w	r2, r3, #15
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	4613      	mov	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a648:	2201      	movs	r2, #1
 800a64a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a64c:	4b2f      	ldr	r3, [pc, #188]	; (800a70c <USBD_CDC_Init+0x1ec>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 020f 	and.w	r2, r3, #15
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	3326      	adds	r3, #38	; 0x26
 800a662:	2210      	movs	r2, #16
 800a664:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a666:	4b29      	ldr	r3, [pc, #164]	; (800a70c <USBD_CDC_Init+0x1ec>)
 800a668:	7819      	ldrb	r1, [r3, #0]
 800a66a:	2308      	movs	r3, #8
 800a66c:	2203      	movs	r2, #3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f010 fe89 	bl	801b386 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a674:	4b25      	ldr	r3, [pc, #148]	; (800a70c <USBD_CDC_Init+0x1ec>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	f003 020f 	and.w	r2, r3, #15
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	3324      	adds	r3, #36	; 0x24
 800a68a:	2201      	movs	r2, #1
 800a68c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	33b0      	adds	r3, #176	; 0xb0
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e018      	b.n	800a6fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7c1b      	ldrb	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6d0:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a6d2:	7819      	ldrb	r1, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f010 ff5f 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800a6e4:	e008      	b.n	800a6f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6e6:	4b08      	ldr	r3, [pc, #32]	; (800a708 <USBD_CDC_Init+0x1e8>)
 800a6e8:	7819      	ldrb	r1, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6f0:	2340      	movs	r3, #64	; 0x40
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f010 ff55 	bl	801b5a2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200000a7 	.word	0x200000a7
 800a708:	200000a8 	.word	0x200000a8
 800a70c:	200000a9 	.word	0x200000a9

0800a710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a71c:	4b3a      	ldr	r3, [pc, #232]	; (800a808 <USBD_CDC_DeInit+0xf8>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f010 fe55 	bl	801b3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a728:	4b37      	ldr	r3, [pc, #220]	; (800a808 <USBD_CDC_DeInit+0xf8>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 020f 	and.w	r2, r3, #15
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	440b      	add	r3, r1
 800a73c:	3324      	adds	r3, #36	; 0x24
 800a73e:	2200      	movs	r2, #0
 800a740:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a742:	4b32      	ldr	r3, [pc, #200]	; (800a80c <USBD_CDC_DeInit+0xfc>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f010 fe42 	bl	801b3d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a74e:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <USBD_CDC_DeInit+0xfc>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 020f 	and.w	r2, r3, #15
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	440b      	add	r3, r1
 800a762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a766:	2200      	movs	r2, #0
 800a768:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a76a:	4b29      	ldr	r3, [pc, #164]	; (800a810 <USBD_CDC_DeInit+0x100>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f010 fe2e 	bl	801b3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a776:	4b26      	ldr	r3, [pc, #152]	; (800a810 <USBD_CDC_DeInit+0x100>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 020f 	and.w	r2, r3, #15
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	3324      	adds	r3, #36	; 0x24
 800a78c:	2200      	movs	r2, #0
 800a78e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a790:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <USBD_CDC_DeInit+0x100>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	f003 020f 	and.w	r2, r3, #15
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	3326      	adds	r3, #38	; 0x26
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	32b0      	adds	r2, #176	; 0xb0
 800a7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01f      	beq.n	800a7fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	33b0      	adds	r3, #176	; 0xb0
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	32b0      	adds	r2, #176	; 0xb0
 800a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f010 ff22 	bl	801b628 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	32b0      	adds	r2, #176	; 0xb0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200000a7 	.word	0x200000a7
 800a80c:	200000a8 	.word	0x200000a8
 800a810:	200000a9 	.word	0x200000a9

0800a814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	32b0      	adds	r2, #176	; 0xb0
 800a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	e0bf      	b.n	800a9c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d050      	beq.n	800a8f2 <USBD_CDC_Setup+0xde>
 800a850:	2b20      	cmp	r3, #32
 800a852:	f040 80af 	bne.w	800a9b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88db      	ldrh	r3, [r3, #6]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d03a      	beq.n	800a8d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b25b      	sxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	da1b      	bge.n	800a8a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	33b0      	adds	r3, #176	; 0xb0
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a87e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	88d2      	ldrh	r2, [r2, #6]
 800a884:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	88db      	ldrh	r3, [r3, #6]
 800a88a:	2b07      	cmp	r3, #7
 800a88c:	bf28      	it	cs
 800a88e:	2307      	movcs	r3, #7
 800a890:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	89fa      	ldrh	r2, [r7, #14]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f003 fd2d 	bl	800e2f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a89e:	e090      	b.n	800a9c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	785a      	ldrb	r2, [r3, #1]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	88db      	ldrh	r3, [r3, #6]
 800a8ae:	2b3f      	cmp	r3, #63	; 0x3f
 800a8b0:	d803      	bhi.n	800a8ba <USBD_CDC_Setup+0xa6>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	88db      	ldrh	r3, [r3, #6]
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	e000      	b.n	800a8bc <USBD_CDC_Setup+0xa8>
 800a8ba:	2240      	movs	r2, #64	; 0x40
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8c2:	6939      	ldr	r1, [r7, #16]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f003 fd3f 	bl	800e350 <USBD_CtlPrepareRx>
      break;
 800a8d2:	e076      	b.n	800a9c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	33b0      	adds	r3, #176	; 0xb0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	7850      	ldrb	r0, [r2, #1]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	4798      	blx	r3
      break;
 800a8f0:	e067      	b.n	800a9c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b0b      	cmp	r3, #11
 800a8f8:	d851      	bhi.n	800a99e <USBD_CDC_Setup+0x18a>
 800a8fa:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <USBD_CDC_Setup+0xec>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a931 	.word	0x0800a931
 800a904:	0800a9ad 	.word	0x0800a9ad
 800a908:	0800a99f 	.word	0x0800a99f
 800a90c:	0800a99f 	.word	0x0800a99f
 800a910:	0800a99f 	.word	0x0800a99f
 800a914:	0800a99f 	.word	0x0800a99f
 800a918:	0800a99f 	.word	0x0800a99f
 800a91c:	0800a99f 	.word	0x0800a99f
 800a920:	0800a99f 	.word	0x0800a99f
 800a924:	0800a99f 	.word	0x0800a99f
 800a928:	0800a95b 	.word	0x0800a95b
 800a92c:	0800a985 	.word	0x0800a985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d107      	bne.n	800a94c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a93c:	f107 030a 	add.w	r3, r7, #10
 800a940:	2202      	movs	r2, #2
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f003 fcd7 	bl	800e2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a94a:	e032      	b.n	800a9b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f003 fc61 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	75fb      	strb	r3, [r7, #23]
          break;
 800a958:	e02b      	b.n	800a9b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b03      	cmp	r3, #3
 800a964:	d107      	bne.n	800a976 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a966:	f107 030d 	add.w	r3, r7, #13
 800a96a:	2201      	movs	r2, #1
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f003 fcc2 	bl	800e2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a974:	e01d      	b.n	800a9b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f003 fc4c 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a97e:	2303      	movs	r3, #3
 800a980:	75fb      	strb	r3, [r7, #23]
          break;
 800a982:	e016      	b.n	800a9b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d00f      	beq.n	800a9b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f003 fc3f 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a998:	2303      	movs	r3, #3
 800a99a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a99c:	e008      	b.n	800a9b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f003 fc38 	bl	800e216 <USBD_CtlError>
          ret = USBD_FAIL;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9aa:	e002      	b.n	800a9b2 <USBD_CDC_Setup+0x19e>
          break;
 800a9ac:	bf00      	nop
 800a9ae:	e008      	b.n	800a9c2 <USBD_CDC_Setup+0x1ae>
          break;
 800a9b0:	bf00      	nop
      }
      break;
 800a9b2:	e006      	b.n	800a9c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f003 fc2d 	bl	800e216 <USBD_CtlError>
      ret = USBD_FAIL;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	75fb      	strb	r3, [r7, #23]
      break;
 800a9c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	32b0      	adds	r2, #176	; 0xb0
 800a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e065      	b.n	800aac2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	32b0      	adds	r2, #176	; 0xb0
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa06:	78fb      	ldrb	r3, [r7, #3]
 800aa08:	f003 020f 	and.w	r2, r3, #15
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	440b      	add	r3, r1
 800aa18:	3318      	adds	r3, #24
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d02f      	beq.n	800aa80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	f003 020f 	and.w	r2, r3, #15
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	440b      	add	r3, r1
 800aa32:	3318      	adds	r3, #24
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	78fb      	ldrb	r3, [r7, #3]
 800aa38:	f003 010f 	and.w	r1, r3, #15
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	440b      	add	r3, r1
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4403      	add	r3, r0
 800aa48:	331c      	adds	r3, #28
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d112      	bne.n	800aa80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	f003 020f 	and.w	r2, r3, #15
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	3318      	adds	r3, #24
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa72:	78f9      	ldrb	r1, [r7, #3]
 800aa74:	2300      	movs	r3, #0
 800aa76:	2200      	movs	r2, #0
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f010 fd71 	bl	801b560 <USBD_LL_Transmit>
 800aa7e:	e01f      	b.n	800aac0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	33b0      	adds	r3, #176	; 0xb0
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d010      	beq.n	800aac0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	33b0      	adds	r3, #176	; 0xb0
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aabc:	78fa      	ldrb	r2, [r7, #3]
 800aabe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	32b0      	adds	r2, #176	; 0xb0
 800aae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	32b0      	adds	r2, #176	; 0xb0
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e01a      	b.n	800ab32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f010 fd6f 	bl	801b5e4 <USBD_LL_GetRxDataSize>
 800ab06:	4602      	mov	r2, r0
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	33b0      	adds	r3, #176	; 0xb0
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b084      	sub	sp, #16
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	32b0      	adds	r2, #176	; 0xb0
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e025      	b.n	800aba8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	33b0      	adds	r3, #176	; 0xb0
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01a      	beq.n	800aba6 <USBD_CDC_EP0_RxReady+0x6c>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab76:	2bff      	cmp	r3, #255	; 0xff
 800ab78:	d015      	beq.n	800aba6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	33b0      	adds	r3, #176	; 0xb0
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab9a:	b292      	uxth	r2, r2
 800ab9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	22ff      	movs	r2, #255	; 0xff
 800aba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abb8:	2182      	movs	r1, #130	; 0x82
 800abba:	4818      	ldr	r0, [pc, #96]	; (800ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abbc:	f002 fcf2 	bl	800d5a4 <USBD_GetEpDesc>
 800abc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abc2:	2101      	movs	r1, #1
 800abc4:	4815      	ldr	r0, [pc, #84]	; (800ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abc6:	f002 fced 	bl	800d5a4 <USBD_GetEpDesc>
 800abca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abcc:	2181      	movs	r1, #129	; 0x81
 800abce:	4813      	ldr	r0, [pc, #76]	; (800ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abd0:	f002 fce8 	bl	800d5a4 <USBD_GetEpDesc>
 800abd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2210      	movs	r2, #16
 800abe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d006      	beq.n	800abf6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2200      	movs	r2, #0
 800abec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abf0:	711a      	strb	r2, [r3, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac04:	711a      	strb	r2, [r3, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2243      	movs	r2, #67	; 0x43
 800ac0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000064 	.word	0x20000064

0800ac20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac28:	2182      	movs	r1, #130	; 0x82
 800ac2a:	4818      	ldr	r0, [pc, #96]	; (800ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac2c:	f002 fcba 	bl	800d5a4 <USBD_GetEpDesc>
 800ac30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac32:	2101      	movs	r1, #1
 800ac34:	4815      	ldr	r0, [pc, #84]	; (800ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac36:	f002 fcb5 	bl	800d5a4 <USBD_GetEpDesc>
 800ac3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac3c:	2181      	movs	r1, #129	; 0x81
 800ac3e:	4813      	ldr	r0, [pc, #76]	; (800ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac40:	f002 fcb0 	bl	800d5a4 <USBD_GetEpDesc>
 800ac44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2210      	movs	r2, #16
 800ac50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d006      	beq.n	800ac66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	711a      	strb	r2, [r3, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f042 0202 	orr.w	r2, r2, #2
 800ac64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d006      	beq.n	800ac7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	711a      	strb	r2, [r3, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f042 0202 	orr.w	r2, r2, #2
 800ac78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2243      	movs	r2, #67	; 0x43
 800ac7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac80:	4b02      	ldr	r3, [pc, #8]	; (800ac8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000064 	.word	0x20000064

0800ac90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac98:	2182      	movs	r1, #130	; 0x82
 800ac9a:	4818      	ldr	r0, [pc, #96]	; (800acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac9c:	f002 fc82 	bl	800d5a4 <USBD_GetEpDesc>
 800aca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aca2:	2101      	movs	r1, #1
 800aca4:	4815      	ldr	r0, [pc, #84]	; (800acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aca6:	f002 fc7d 	bl	800d5a4 <USBD_GetEpDesc>
 800acaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acac:	2181      	movs	r1, #129	; 0x81
 800acae:	4813      	ldr	r0, [pc, #76]	; (800acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acb0:	f002 fc78 	bl	800d5a4 <USBD_GetEpDesc>
 800acb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2210      	movs	r2, #16
 800acc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d006      	beq.n	800acd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2200      	movs	r2, #0
 800accc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acd0:	711a      	strb	r2, [r3, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ace4:	711a      	strb	r2, [r3, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2243      	movs	r2, #67	; 0x43
 800acee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acf0:	4b02      	ldr	r3, [pc, #8]	; (800acfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20000064 	.word	0x20000064

0800ad00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	220a      	movs	r2, #10
 800ad0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad0e:	4b03      	ldr	r3, [pc, #12]	; (800ad1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	20000020 	.word	0x20000020

0800ad20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e009      	b.n	800ad48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	33b0      	adds	r3, #176	; 0xb0
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	32b0      	adds	r2, #176	; 0xb0
 800ad6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e008      	b.n	800ad8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	32b0      	adds	r2, #176	; 0xb0
 800adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800adb8:	2303      	movs	r3, #3
 800adba:	e004      	b.n	800adc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	32b0      	adds	r2, #176	; 0xb0
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32b0      	adds	r2, #176	; 0xb0
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e018      	b.n	800ae34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	7c1b      	ldrb	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae0a:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <USBD_CDC_ReceivePacket+0x68>)
 800ae0c:	7819      	ldrb	r1, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f010 fbc2 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800ae1e:	e008      	b.n	800ae32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae20:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <USBD_CDC_ReceivePacket+0x68>)
 800ae22:	7819      	ldrb	r1, [r3, #0]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae2a:	2340      	movs	r3, #64	; 0x40
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f010 fbb8 	bl	801b5a2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	200000a8 	.word	0x200000a8

0800ae40 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800ae4c:	f44f 701d 	mov.w	r0, #628	; 0x274
 800ae50:	f010 fbdc 	bl	801b60c <USBD_static_malloc>
 800ae54:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d109      	bne.n	800ae70 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32b0      	adds	r2, #176	; 0xb0
 800ae66:	2100      	movs	r1, #0
 800ae68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e06e      	b.n	800af4e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32b0      	adds	r2, #176	; 0xb0
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32b0      	adds	r2, #176	; 0xb0
 800ae8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	7c1b      	ldrb	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d12b      	bne.n	800aef4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ae9c:	4b2e      	ldr	r3, [pc, #184]	; (800af58 <USBD_MSC_Init+0x118>)
 800ae9e:	7819      	ldrb	r1, [r3, #0]
 800aea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea4:	2202      	movs	r2, #2
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f010 fa6d 	bl	801b386 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800aeac:	4b2a      	ldr	r3, [pc, #168]	; (800af58 <USBD_MSC_Init+0x118>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aec4:	2201      	movs	r2, #1
 800aec6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800aec8:	4b24      	ldr	r3, [pc, #144]	; (800af5c <USBD_MSC_Init+0x11c>)
 800aeca:	7819      	ldrb	r1, [r3, #0]
 800aecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed0:	2202      	movs	r2, #2
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f010 fa57 	bl	801b386 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800aed8:	4b20      	ldr	r3, [pc, #128]	; (800af5c <USBD_MSC_Init+0x11c>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f003 020f 	and.w	r2, r3, #15
 800aee0:	6879      	ldr	r1, [r7, #4]
 800aee2:	4613      	mov	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	440b      	add	r3, r1
 800aeec:	3324      	adds	r3, #36	; 0x24
 800aeee:	2201      	movs	r2, #1
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	e028      	b.n	800af46 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800aef4:	4b18      	ldr	r3, [pc, #96]	; (800af58 <USBD_MSC_Init+0x118>)
 800aef6:	7819      	ldrb	r1, [r3, #0]
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	2202      	movs	r2, #2
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f010 fa42 	bl	801b386 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <USBD_MSC_Init+0x118>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	f003 020f 	and.w	r2, r3, #15
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	440b      	add	r3, r1
 800af16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af1a:	2201      	movs	r2, #1
 800af1c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <USBD_MSC_Init+0x11c>)
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	2202      	movs	r2, #2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f010 fa2d 	bl	801b386 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800af2c:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <USBD_MSC_Init+0x11c>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 020f 	and.w	r2, r3, #15
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	440b      	add	r3, r1
 800af40:	3324      	adds	r3, #36	; 0x24
 800af42:	2201      	movs	r2, #1
 800af44:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa2c 	bl	800b3a4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2000010f 	.word	0x2000010f
 800af5c:	2000010e 	.word	0x2000010e

0800af60 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800af6c:	4b26      	ldr	r3, [pc, #152]	; (800b008 <USBD_MSC_DeInit+0xa8>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f010 fa2d 	bl	801b3d2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800af78:	4b23      	ldr	r3, [pc, #140]	; (800b008 <USBD_MSC_DeInit+0xa8>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	f003 020f 	and.w	r2, r3, #15
 800af80:	6879      	ldr	r1, [r7, #4]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af90:	2200      	movs	r2, #0
 800af92:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800af94:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <USBD_MSC_DeInit+0xac>)
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f010 fa19 	bl	801b3d2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800afa0:	4b1a      	ldr	r3, [pc, #104]	; (800b00c <USBD_MSC_DeInit+0xac>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 020f 	and.w	r2, r3, #15
 800afa8:	6879      	ldr	r1, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	440b      	add	r3, r1
 800afb4:	3324      	adds	r3, #36	; 0x24
 800afb6:	2200      	movs	r2, #0
 800afb8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	32b0      	adds	r2, #176	; 0xb0
 800afc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d018      	beq.n	800affe <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fa67 	bl	800b4a0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	32b0      	adds	r2, #176	; 0xb0
 800afdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f010 fb21 	bl	801b628 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	32b0      	adds	r2, #176	; 0xb0
 800aff0:	2100      	movs	r1, #0
 800aff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	2000010f 	.word	0x2000010f
 800b00c:	2000010e 	.word	0x2000010e

0800b010 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	32b0      	adds	r2, #176	; 0xb0
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e0e1      	b.n	800b200 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b044:	2b00      	cmp	r3, #0
 800b046:	d053      	beq.n	800b0f0 <USBD_MSC_Setup+0xe0>
 800b048:	2b20      	cmp	r3, #32
 800b04a:	f040 80d1 	bne.w	800b1f0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	785b      	ldrb	r3, [r3, #1]
 800b052:	2bfe      	cmp	r3, #254	; 0xfe
 800b054:	d002      	beq.n	800b05c <USBD_MSC_Setup+0x4c>
 800b056:	2bff      	cmp	r3, #255	; 0xff
 800b058:	d02a      	beq.n	800b0b0 <USBD_MSC_Setup+0xa0>
 800b05a:	e041      	b.n	800b0e0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	885b      	ldrh	r3, [r3, #2]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d11e      	bne.n	800b0a2 <USBD_MSC_Setup+0x92>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	88db      	ldrh	r3, [r3, #6]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d11a      	bne.n	800b0a2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b072:	2b00      	cmp	r3, #0
 800b074:	da15      	bge.n	800b0a2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	33b0      	adds	r3, #176	; 0xb0
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	4798      	blx	r3
 800b08a:	4603      	mov	r3, r0
 800b08c:	461a      	mov	r2, r3
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2201      	movs	r2, #1
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f003 f92d 	bl	800e2f8 <USBD_CtlSendData>
 800b09e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0a0:	e025      	b.n	800b0ee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f003 f8b6 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b0ae:	e01e      	b.n	800b0ee <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	885b      	ldrh	r3, [r3, #2]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10c      	bne.n	800b0d2 <USBD_MSC_Setup+0xc2>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	88db      	ldrh	r3, [r3, #6]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d108      	bne.n	800b0d2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	db03      	blt.n	800b0d2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f9b4 	bl	800b438 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0d0:	e00d      	b.n	800b0ee <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f003 f89e 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0de:	e006      	b.n	800b0ee <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f003 f897 	bl	800e216 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b0ec:	bf00      	nop
      }
      break;
 800b0ee:	e086      	b.n	800b1fe <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	785b      	ldrb	r3, [r3, #1]
 800b0f4:	2b0b      	cmp	r3, #11
 800b0f6:	d872      	bhi.n	800b1de <USBD_MSC_Setup+0x1ce>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <USBD_MSC_Setup+0xf0>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b131 	.word	0x0800b131
 800b104:	0800b1ad 	.word	0x0800b1ad
 800b108:	0800b1df 	.word	0x0800b1df
 800b10c:	0800b1df 	.word	0x0800b1df
 800b110:	0800b1df 	.word	0x0800b1df
 800b114:	0800b1df 	.word	0x0800b1df
 800b118:	0800b1df 	.word	0x0800b1df
 800b11c:	0800b1df 	.word	0x0800b1df
 800b120:	0800b1df 	.word	0x0800b1df
 800b124:	0800b1df 	.word	0x0800b1df
 800b128:	0800b15b 	.word	0x0800b15b
 800b12c:	0800b185 	.word	0x0800b185
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d107      	bne.n	800b14c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b13c:	f107 030e 	add.w	r3, r7, #14
 800b140:	2202      	movs	r2, #2
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f003 f8d7 	bl	800e2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b14a:	e050      	b.n	800b1ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f003 f861 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800b154:	2303      	movs	r3, #3
 800b156:	75fb      	strb	r3, [r7, #23]
          break;
 800b158:	e049      	b.n	800b1ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b03      	cmp	r3, #3
 800b164:	d107      	bne.n	800b176 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	3304      	adds	r3, #4
 800b16a:	2201      	movs	r2, #1
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f003 f8c2 	bl	800e2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b174:	e03b      	b.n	800b1ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f003 f84c 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800b17e:	2303      	movs	r3, #3
 800b180:	75fb      	strb	r3, [r7, #23]
          break;
 800b182:	e034      	b.n	800b1ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d106      	bne.n	800b19e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	b2db      	uxtb	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b19c:	e027      	b.n	800b1ee <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f003 f838 	bl	800e216 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b1aa:	e020      	b.n	800b1ee <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d119      	bne.n	800b1ec <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	885b      	ldrh	r3, [r3, #2]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d115      	bne.n	800b1ec <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	889b      	ldrh	r3, [r3, #4]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f010 f921 	bl	801b410 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	889b      	ldrh	r3, [r3, #4]
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb2e 	bl	800b838 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b1dc:	e006      	b.n	800b1ec <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f003 f818 	bl	800e216 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b1ea:	e000      	b.n	800b1ee <USBD_MSC_Setup+0x1de>
          break;
 800b1ec:	bf00      	nop
      }
      break;
 800b1ee:	e006      	b.n	800b1fe <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f003 f80f 	bl	800e216 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b1fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f959 	bl	800b4d0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f983 	bl	800b544 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b250:	2181      	movs	r1, #129	; 0x81
 800b252:	4812      	ldr	r0, [pc, #72]	; (800b29c <USBD_MSC_GetHSCfgDesc+0x54>)
 800b254:	f002 f9a6 	bl	800d5a4 <USBD_GetEpDesc>
 800b258:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b25a:	2101      	movs	r1, #1
 800b25c:	480f      	ldr	r0, [pc, #60]	; (800b29c <USBD_MSC_GetHSCfgDesc+0x54>)
 800b25e:	f002 f9a1 	bl	800d5a4 <USBD_GetEpDesc>
 800b262:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d006      	beq.n	800b278 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	711a      	strb	r2, [r3, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f042 0202 	orr.w	r2, r2, #2
 800b276:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d006      	beq.n	800b28c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2200      	movs	r2, #0
 800b282:	711a      	strb	r2, [r3, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f042 0202 	orr.w	r2, r2, #2
 800b28a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2220      	movs	r2, #32
 800b290:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b292:	4b02      	ldr	r3, [pc, #8]	; (800b29c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	200000e4 	.word	0x200000e4

0800b2a0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b2a8:	2181      	movs	r1, #129	; 0x81
 800b2aa:	4812      	ldr	r0, [pc, #72]	; (800b2f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b2ac:	f002 f97a 	bl	800d5a4 <USBD_GetEpDesc>
 800b2b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	480f      	ldr	r0, [pc, #60]	; (800b2f4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b2b6:	f002 f975 	bl	800d5a4 <USBD_GetEpDesc>
 800b2ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2ca:	711a      	strb	r2, [r3, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d006      	beq.n	800b2e4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2de:	711a      	strb	r2, [r3, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b2ea:	4b02      	ldr	r3, [pc, #8]	; (800b2f4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	200000e4 	.word	0x200000e4

0800b2f8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b300:	2181      	movs	r1, #129	; 0x81
 800b302:	4812      	ldr	r0, [pc, #72]	; (800b34c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b304:	f002 f94e 	bl	800d5a4 <USBD_GetEpDesc>
 800b308:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b30a:	2101      	movs	r1, #1
 800b30c:	480f      	ldr	r0, [pc, #60]	; (800b34c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b30e:	f002 f949 	bl	800d5a4 <USBD_GetEpDesc>
 800b312:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b322:	711a      	strb	r2, [r3, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d006      	beq.n	800b33c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2200      	movs	r2, #0
 800b332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b336:	711a      	strb	r2, [r3, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2220      	movs	r2, #32
 800b340:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b342:	4b02      	ldr	r3, [pc, #8]	; (800b34c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	200000e4 	.word	0x200000e4

0800b350 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	220a      	movs	r2, #10
 800b35c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b35e:	4b03      	ldr	r3, [pc, #12]	; (800b36c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	20000104 	.word	0x20000104

0800b370 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	e009      	b.n	800b398 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	; 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	32b0      	adds	r2, #176	; 0xb0
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d032      	beq.n	800b428 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	33b0      	adds	r3, #176	; 0xb0
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800b3fc:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <MSC_BOT_Init+0x8c>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f010 f804 	bl	801b410 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <MSC_BOT_Init+0x90>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f00f fffe 	bl	801b410 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b414:	4b06      	ldr	r3, [pc, #24]	; (800b430 <MSC_BOT_Init+0x8c>)
 800b416:	7819      	ldrb	r1, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b41e:	231f      	movs	r3, #31
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f010 f8be 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800b426:	e000      	b.n	800b42a <MSC_BOT_Init+0x86>
    return;
 800b428:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	2000010f 	.word	0x2000010f
 800b434:	2000010e 	.word	0x2000010e

0800b438 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	32b0      	adds	r2, #176	; 0xb0
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01b      	beq.n	800b48e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2201      	movs	r2, #1
 800b460:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800b462:	4b0d      	ldr	r3, [pc, #52]	; (800b498 <MSC_BOT_Reset+0x60>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f010 f80f 	bl	801b48c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800b46e:	4b0b      	ldr	r3, [pc, #44]	; (800b49c <MSC_BOT_Reset+0x64>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f010 f809 	bl	801b48c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b47a:	4b08      	ldr	r3, [pc, #32]	; (800b49c <MSC_BOT_Reset+0x64>)
 800b47c:	7819      	ldrb	r1, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b484:	231f      	movs	r3, #31
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f010 f88b 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800b48c:	e000      	b.n	800b490 <MSC_BOT_Reset+0x58>
    return;
 800b48e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	2000010e 	.word	0x2000010e
 800b49c:	2000010f 	.word	0x2000010f

0800b4a0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	32b0      	adds	r2, #176	; 0xb0
 800b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	721a      	strb	r2, [r3, #8]
  }
}
 800b4c4:	bf00      	nop
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	32b0      	adds	r2, #176	; 0xb0
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d020      	beq.n	800b534 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	7a1b      	ldrb	r3, [r3, #8]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d005      	beq.n	800b506 <MSC_BOT_DataIn+0x36>
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	db1c      	blt.n	800b538 <MSC_BOT_DataIn+0x68>
 800b4fe:	3b03      	subs	r3, #3
 800b500:	2b01      	cmp	r3, #1
 800b502:	d819      	bhi.n	800b538 <MSC_BOT_DataIn+0x68>
 800b504:	e011      	b.n	800b52a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b512:	461a      	mov	r2, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f9c9 	bl	800b8ac <SCSI_ProcessCmd>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da0d      	bge.n	800b53c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b520:	2101      	movs	r1, #1
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f90c 	bl	800b740 <MSC_BOT_SendCSW>
      }
      break;
 800b528:	e008      	b.n	800b53c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b52a:	2100      	movs	r1, #0
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f907 	bl	800b740 <MSC_BOT_SendCSW>
      break;
 800b532:	e004      	b.n	800b53e <MSC_BOT_DataIn+0x6e>
    return;
 800b534:	bf00      	nop
 800b536:	e002      	b.n	800b53e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800b538:	bf00      	nop
 800b53a:	e000      	b.n	800b53e <MSC_BOT_DataIn+0x6e>
      break;
 800b53c:	bf00      	nop
  }
}
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	32b0      	adds	r2, #176	; 0xb0
 800b55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d01c      	beq.n	800b5a0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	7a1b      	ldrb	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <MSC_BOT_DataOut+0x30>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d004      	beq.n	800b57c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b572:	e018      	b.n	800b5a6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f819 	bl	800b5ac <MSC_BOT_CBW_Decode>
      break;
 800b57a:	e014      	b.n	800b5a6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b588:	461a      	mov	r2, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f98e 	bl	800b8ac <SCSI_ProcessCmd>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	da06      	bge.n	800b5a4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b596:	2101      	movs	r1, #1
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 f8d1 	bl	800b740 <MSC_BOT_SendCSW>
      break;
 800b59e:	e001      	b.n	800b5a4 <MSC_BOT_DataOut+0x60>
    return;
 800b5a0:	bf00      	nop
 800b5a2:	e000      	b.n	800b5a6 <MSC_BOT_DataOut+0x62>
      break;
 800b5a4:	bf00      	nop
  }
}
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	32b0      	adds	r2, #176	; 0xb0
 800b5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d079      	beq.n	800b6be <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b5e2:	4b3a      	ldr	r3, [pc, #232]	; (800b6cc <MSC_BOT_CBW_Decode+0x120>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f00f fffb 	bl	801b5e4 <USBD_LL_GetRxDataSize>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b1f      	cmp	r3, #31
 800b5f2:	d114      	bne.n	800b61e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b5fa:	4a35      	ldr	r2, [pc, #212]	; (800b6d0 <MSC_BOT_CBW_Decode+0x124>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d10e      	bne.n	800b61e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b606:	2b01      	cmp	r3, #1
 800b608:	d809      	bhi.n	800b61e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b610:	2b00      	cmp	r3, #0
 800b612:	d004      	beq.n	800b61e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b61a:	2b10      	cmp	r3, #16
 800b61c:	d90e      	bls.n	800b63c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b624:	2320      	movs	r3, #32
 800b626:	2205      	movs	r2, #5
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fe56 	bl	800c2da <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2202      	movs	r2, #2
 800b632:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f8bd 	bl	800b7b4 <MSC_BOT_Abort>
 800b63a:	e043      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b648:	461a      	mov	r2, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f92e 	bl	800b8ac <SCSI_ProcessCmd>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	da0c      	bge.n	800b670 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	7a1b      	ldrb	r3, [r3, #8]
 800b65a:	2b05      	cmp	r3, #5
 800b65c:	d104      	bne.n	800b668 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b65e:	2101      	movs	r1, #1
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f86d 	bl	800b740 <MSC_BOT_SendCSW>
 800b666:	e02d      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f8a3 	bl	800b7b4 <MSC_BOT_Abort>
 800b66e:	e029      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	7a1b      	ldrb	r3, [r3, #8]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d024      	beq.n	800b6c2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d020      	beq.n	800b6c2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b684:	2b03      	cmp	r3, #3
 800b686:	d01c      	beq.n	800b6c2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f103 0110 	add.w	r1, r3, #16
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	461a      	mov	r2, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f819 	bl	800b6d4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b6a2:	e00f      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d104      	bne.n	800b6b6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f846 	bl	800b740 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b6b4:	e006      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f87c 	bl	800b7b4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b6bc:	e002      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
    return;
 800b6be:	bf00      	nop
 800b6c0:	e000      	b.n	800b6c4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800b6c2:	bf00      	nop
    }
  }
}
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	2000010f 	.word	0x2000010f
 800b6d0:	43425355 	.word	0x43425355

0800b6d4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	32b0      	adds	r2, #176	; 0xb0
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d01e      	beq.n	800b734 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4293      	cmp	r3, r2
 800b700:	bf28      	it	cs
 800b702:	4613      	movcs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2204      	movs	r2, #4
 800b722:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <MSC_BOT_SendData+0x68>)
 800b726:	7819      	ldrb	r1, [r3, #0]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f00f ff17 	bl	801b560 <USBD_LL_Transmit>
 800b732:	e000      	b.n	800b736 <MSC_BOT_SendData+0x62>
    return;
 800b734:	bf00      	nop
}
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	2000010e 	.word	0x2000010e

0800b740 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	32b0      	adds	r2, #176	; 0xb0
 800b756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01d      	beq.n	800b79e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4a10      	ldr	r2, [pc, #64]	; (800b7a8 <MSC_BOT_SendCSW+0x68>)
 800b766:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	78fa      	ldrb	r2, [r7, #3]
 800b76e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b778:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <MSC_BOT_SendCSW+0x6c>)
 800b77a:	7819      	ldrb	r1, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800b782:	230d      	movs	r3, #13
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f00f feeb 	bl	801b560 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <MSC_BOT_SendCSW+0x70>)
 800b78c:	7819      	ldrb	r1, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b794:	231f      	movs	r3, #31
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f00f ff03 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800b79c:	e000      	b.n	800b7a0 <MSC_BOT_SendCSW+0x60>
    return;
 800b79e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	53425355 	.word	0x53425355
 800b7ac:	2000010e 	.word	0x2000010e
 800b7b0:	2000010f 	.word	0x2000010f

0800b7b4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	32b0      	adds	r2, #176	; 0xb0
 800b7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02a      	beq.n	800b828 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10e      	bne.n	800b7fa <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d105      	bne.n	800b7fa <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b7ee:	4b10      	ldr	r3, [pc, #64]	; (800b830 <MSC_BOT_Abort+0x7c>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f00f fe2a 	bl	801b44e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b7fa:	4b0e      	ldr	r3, [pc, #56]	; (800b834 <MSC_BOT_Abort+0x80>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f00f fe24 	bl	801b44e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	7a5b      	ldrb	r3, [r3, #9]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d10d      	bne.n	800b82a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <MSC_BOT_Abort+0x80>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f00f fe1a 	bl	801b44e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <MSC_BOT_Abort+0x7c>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f00f fe14 	bl	801b44e <USBD_LL_StallEP>
 800b826:	e000      	b.n	800b82a <MSC_BOT_Abort+0x76>
    return;
 800b828:	bf00      	nop
  }
}
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000010f 	.word	0x2000010f
 800b834:	2000010e 	.word	0x2000010e

0800b838 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32b0      	adds	r2, #176	; 0xb0
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d01d      	beq.n	800b896 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	7a5b      	ldrb	r3, [r3, #9]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d10c      	bne.n	800b87c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b862:	4b10      	ldr	r3, [pc, #64]	; (800b8a4 <MSC_BOT_CplClrFeature+0x6c>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f00f fdf0 	bl	801b44e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b86e:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <MSC_BOT_CplClrFeature+0x70>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f00f fdea 	bl	801b44e <USBD_LL_StallEP>
 800b87a:	e00f      	b.n	800b89c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b87c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b880:	2b00      	cmp	r3, #0
 800b882:	da0a      	bge.n	800b89a <MSC_BOT_CplClrFeature+0x62>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	7a5b      	ldrb	r3, [r3, #9]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d006      	beq.n	800b89a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b88c:	2101      	movs	r1, #1
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff ff56 	bl	800b740 <MSC_BOT_SendCSW>
 800b894:	e002      	b.n	800b89c <MSC_BOT_CplClrFeature+0x64>
    return;
 800b896:	bf00      	nop
 800b898:	e000      	b.n	800b89c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800b89a:	bf00      	nop
  }
}
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000010e 	.word	0x2000010e
 800b8a8:	2000010f 	.word	0x2000010f

0800b8ac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	32b0      	adds	r2, #176	; 0xb0
 800b8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800b8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d4:	e168      	b.n	800bba8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	2baa      	cmp	r3, #170	; 0xaa
 800b8dc:	f000 8144 	beq.w	800bb68 <SCSI_ProcessCmd+0x2bc>
 800b8e0:	2baa      	cmp	r3, #170	; 0xaa
 800b8e2:	f300 8153 	bgt.w	800bb8c <SCSI_ProcessCmd+0x2e0>
 800b8e6:	2ba8      	cmp	r3, #168	; 0xa8
 800b8e8:	f000 812c 	beq.w	800bb44 <SCSI_ProcessCmd+0x298>
 800b8ec:	2ba8      	cmp	r3, #168	; 0xa8
 800b8ee:	f300 814d 	bgt.w	800bb8c <SCSI_ProcessCmd+0x2e0>
 800b8f2:	2b5a      	cmp	r3, #90	; 0x5a
 800b8f4:	f300 80c0 	bgt.w	800ba78 <SCSI_ProcessCmd+0x1cc>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f2c0 8147 	blt.w	800bb8c <SCSI_ProcessCmd+0x2e0>
 800b8fe:	2b5a      	cmp	r3, #90	; 0x5a
 800b900:	f200 8144 	bhi.w	800bb8c <SCSI_ProcessCmd+0x2e0>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <SCSI_ProcessCmd+0x60>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800ba7f 	.word	0x0800ba7f
 800b910:	0800bb8d 	.word	0x0800bb8d
 800b914:	0800bb8d 	.word	0x0800bb8d
 800b918:	0800ba91 	.word	0x0800ba91
 800b91c:	0800bb8d 	.word	0x0800bb8d
 800b920:	0800bb8d 	.word	0x0800bb8d
 800b924:	0800bb8d 	.word	0x0800bb8d
 800b928:	0800bb8d 	.word	0x0800bb8d
 800b92c:	0800bb8d 	.word	0x0800bb8d
 800b930:	0800bb8d 	.word	0x0800bb8d
 800b934:	0800bb8d 	.word	0x0800bb8d
 800b938:	0800bb8d 	.word	0x0800bb8d
 800b93c:	0800bb8d 	.word	0x0800bb8d
 800b940:	0800bb8d 	.word	0x0800bb8d
 800b944:	0800bb8d 	.word	0x0800bb8d
 800b948:	0800bb8d 	.word	0x0800bb8d
 800b94c:	0800bb8d 	.word	0x0800bb8d
 800b950:	0800bb8d 	.word	0x0800bb8d
 800b954:	0800baa3 	.word	0x0800baa3
 800b958:	0800bb8d 	.word	0x0800bb8d
 800b95c:	0800bb8d 	.word	0x0800bb8d
 800b960:	0800bb8d 	.word	0x0800bb8d
 800b964:	0800bb8d 	.word	0x0800bb8d
 800b968:	0800bb8d 	.word	0x0800bb8d
 800b96c:	0800bb8d 	.word	0x0800bb8d
 800b970:	0800bb8d 	.word	0x0800bb8d
 800b974:	0800bad9 	.word	0x0800bad9
 800b978:	0800bab5 	.word	0x0800bab5
 800b97c:	0800bb8d 	.word	0x0800bb8d
 800b980:	0800bb8d 	.word	0x0800bb8d
 800b984:	0800bac7 	.word	0x0800bac7
 800b988:	0800bb8d 	.word	0x0800bb8d
 800b98c:	0800bb8d 	.word	0x0800bb8d
 800b990:	0800bb8d 	.word	0x0800bb8d
 800b994:	0800bb8d 	.word	0x0800bb8d
 800b998:	0800bafd 	.word	0x0800bafd
 800b99c:	0800bb8d 	.word	0x0800bb8d
 800b9a0:	0800bb0f 	.word	0x0800bb0f
 800b9a4:	0800bb8d 	.word	0x0800bb8d
 800b9a8:	0800bb8d 	.word	0x0800bb8d
 800b9ac:	0800bb33 	.word	0x0800bb33
 800b9b0:	0800bb8d 	.word	0x0800bb8d
 800b9b4:	0800bb57 	.word	0x0800bb57
 800b9b8:	0800bb8d 	.word	0x0800bb8d
 800b9bc:	0800bb8d 	.word	0x0800bb8d
 800b9c0:	0800bb8d 	.word	0x0800bb8d
 800b9c4:	0800bb8d 	.word	0x0800bb8d
 800b9c8:	0800bb7b 	.word	0x0800bb7b
 800b9cc:	0800bb8d 	.word	0x0800bb8d
 800b9d0:	0800bb8d 	.word	0x0800bb8d
 800b9d4:	0800bb8d 	.word	0x0800bb8d
 800b9d8:	0800bb8d 	.word	0x0800bb8d
 800b9dc:	0800bb8d 	.word	0x0800bb8d
 800b9e0:	0800bb8d 	.word	0x0800bb8d
 800b9e4:	0800bb8d 	.word	0x0800bb8d
 800b9e8:	0800bb8d 	.word	0x0800bb8d
 800b9ec:	0800bb8d 	.word	0x0800bb8d
 800b9f0:	0800bb8d 	.word	0x0800bb8d
 800b9f4:	0800bb8d 	.word	0x0800bb8d
 800b9f8:	0800bb8d 	.word	0x0800bb8d
 800b9fc:	0800bb8d 	.word	0x0800bb8d
 800ba00:	0800bb8d 	.word	0x0800bb8d
 800ba04:	0800bb8d 	.word	0x0800bb8d
 800ba08:	0800bb8d 	.word	0x0800bb8d
 800ba0c:	0800bb8d 	.word	0x0800bb8d
 800ba10:	0800bb8d 	.word	0x0800bb8d
 800ba14:	0800bb8d 	.word	0x0800bb8d
 800ba18:	0800bb8d 	.word	0x0800bb8d
 800ba1c:	0800bb8d 	.word	0x0800bb8d
 800ba20:	0800bb8d 	.word	0x0800bb8d
 800ba24:	0800bb8d 	.word	0x0800bb8d
 800ba28:	0800bb8d 	.word	0x0800bb8d
 800ba2c:	0800bb8d 	.word	0x0800bb8d
 800ba30:	0800bb8d 	.word	0x0800bb8d
 800ba34:	0800bb8d 	.word	0x0800bb8d
 800ba38:	0800bb8d 	.word	0x0800bb8d
 800ba3c:	0800bb8d 	.word	0x0800bb8d
 800ba40:	0800bb8d 	.word	0x0800bb8d
 800ba44:	0800bb8d 	.word	0x0800bb8d
 800ba48:	0800bb8d 	.word	0x0800bb8d
 800ba4c:	0800bb8d 	.word	0x0800bb8d
 800ba50:	0800bb8d 	.word	0x0800bb8d
 800ba54:	0800bb8d 	.word	0x0800bb8d
 800ba58:	0800bb8d 	.word	0x0800bb8d
 800ba5c:	0800bb8d 	.word	0x0800bb8d
 800ba60:	0800bb8d 	.word	0x0800bb8d
 800ba64:	0800bb8d 	.word	0x0800bb8d
 800ba68:	0800bb8d 	.word	0x0800bb8d
 800ba6c:	0800bb8d 	.word	0x0800bb8d
 800ba70:	0800bb8d 	.word	0x0800bb8d
 800ba74:	0800baeb 	.word	0x0800baeb
 800ba78:	2b9e      	cmp	r3, #158	; 0x9e
 800ba7a:	d051      	beq.n	800bb20 <SCSI_ProcessCmd+0x274>
 800ba7c:	e086      	b.n	800bb8c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4619      	mov	r1, r3
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 f893 	bl	800bbb0 <SCSI_TestUnitReady>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba8e:	e089      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800ba90:	7afb      	ldrb	r3, [r7, #11]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	4619      	mov	r1, r3
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 fb9c 	bl	800c1d4 <SCSI_RequestSense>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	75fb      	strb	r3, [r7, #23]
      break;
 800baa0:	e080      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800baa2:	7afb      	ldrb	r3, [r7, #11]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	4619      	mov	r1, r3
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 f8db 	bl	800bc64 <SCSI_Inquiry>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]
      break;
 800bab2:	e077      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800bab4:	7afb      	ldrb	r3, [r7, #11]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4619      	mov	r1, r3
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 fc58 	bl	800c370 <SCSI_StartStopUnit>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75fb      	strb	r3, [r7, #23]
      break;
 800bac4:	e06e      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4619      	mov	r1, r3
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 fca4 	bl	800c41a <SCSI_AllowPreventRemovable>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75fb      	strb	r3, [r7, #23]
      break;
 800bad6:	e065      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800bad8:	7afb      	ldrb	r3, [r7, #11]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4619      	mov	r1, r3
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 faec 	bl	800c0bc <SCSI_ModeSense6>
 800bae4:	4603      	mov	r3, r0
 800bae6:	75fb      	strb	r3, [r7, #23]
      break;
 800bae8:	e05c      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800baea:	7afb      	ldrb	r3, [r7, #11]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	4619      	mov	r1, r3
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f000 fb29 	bl	800c148 <SCSI_ModeSense10>
 800baf6:	4603      	mov	r3, r0
 800baf8:	75fb      	strb	r3, [r7, #23]
      break;
 800bafa:	e053      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800bafc:	7afb      	ldrb	r3, [r7, #11]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4619      	mov	r1, r3
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fa5e 	bl	800bfc4 <SCSI_ReadFormatCapacity>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb0c:	e04a      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800bb0e:	7afb      	ldrb	r3, [r7, #11]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	4619      	mov	r1, r3
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 f923 	bl	800bd60 <SCSI_ReadCapacity10>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb1e:	e041      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4619      	mov	r1, r3
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f000 f998 	bl	800be5c <SCSI_ReadCapacity16>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb30:	e038      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	4619      	mov	r1, r3
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 fc9b 	bl	800c474 <SCSI_Read10>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	75fb      	strb	r3, [r7, #23]
      break;
 800bb42:	e02f      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800bb44:	7afb      	ldrb	r3, [r7, #11]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f000 fd3c 	bl	800c5c8 <SCSI_Read12>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
      break;
 800bb54:	e026      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800bb56:	7afb      	ldrb	r3, [r7, #11]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f000 fde7 	bl	800c730 <SCSI_Write10>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75fb      	strb	r3, [r7, #23]
      break;
 800bb66:	e01d      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800bb68:	7afb      	ldrb	r3, [r7, #11]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 feb4 	bl	800c8dc <SCSI_Write12>
 800bb74:	4603      	mov	r3, r0
 800bb76:	75fb      	strb	r3, [r7, #23]
      break;
 800bb78:	e014      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800bb7a:	7afb      	ldrb	r3, [r7, #11]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 ff91 	bl	800caa8 <SCSI_Verify10>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]
      break;
 800bb8a:	e00b      	b.n	800bba4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800bb8c:	7af9      	ldrb	r1, [r7, #11]
 800bb8e:	2320      	movs	r3, #32
 800bb90:	2205      	movs	r2, #5
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 fba1 	bl	800c2da <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bb9e:	23ff      	movs	r3, #255	; 0xff
 800bba0:	75fb      	strb	r3, [r7, #23]
      break;
 800bba2:	bf00      	nop
  }

  return ret;
 800bba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	32b0      	adds	r2, #176	; 0xb0
 800bbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbcc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd8:	e03f      	b.n	800bc5a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00a      	beq.n	800bbfa <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bbea:	2320      	movs	r3, #32
 800bbec:	2205      	movs	r2, #5
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f000 fb73 	bl	800c2da <SCSI_SenseCode>

    return -1;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	e02f      	b.n	800bc5a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d10b      	bne.n	800bc1c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bc04:	7af9      	ldrb	r1, [r7, #11]
 800bc06:	233a      	movs	r3, #58	; 0x3a
 800bc08:	2202      	movs	r2, #2
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fb65 	bl	800c2da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2205      	movs	r2, #5
 800bc14:	721a      	strb	r2, [r3, #8]
    return -1;
 800bc16:	f04f 33ff 	mov.w	r3, #4294967295
 800bc1a:	e01e      	b.n	800bc5a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	33b0      	adds	r3, #176	; 0xb0
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	7afa      	ldrb	r2, [r7, #11]
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bc3a:	7af9      	ldrb	r1, [r7, #11]
 800bc3c:	233a      	movs	r3, #58	; 0x3a
 800bc3e:	2202      	movs	r2, #2
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 fb4a 	bl	800c2da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2205      	movs	r2, #5
 800bc4a:	721a      	strb	r2, [r3, #8]

    return -1;
 800bc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc50:	e003      	b.n	800bc5a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2200      	movs	r2, #0
 800bc56:	60da      	str	r2, [r3, #12]

  return 0;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	32b0      	adds	r2, #176	; 0xb0
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <SCSI_Inquiry+0x2a>
  {
    return -1;
 800bc88:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8c:	e05f      	b.n	800bd4e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc9e:	2320      	movs	r3, #32
 800bca0:	2205      	movs	r2, #5
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fb19 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800bca8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcac:	e04f      	b.n	800bd4e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d020      	beq.n	800bcfe <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3302      	adds	r3, #2
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d105      	bne.n	800bcd2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800bcc6:	2206      	movs	r2, #6
 800bcc8:	4923      	ldr	r1, [pc, #140]	; (800bd58 <SCSI_Inquiry+0xf4>)
 800bcca:	69b8      	ldr	r0, [r7, #24]
 800bccc:	f001 f872 	bl	800cdb4 <SCSI_UpdateBotData>
 800bcd0:	e03c      	b.n	800bd4c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3302      	adds	r3, #2
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b80      	cmp	r3, #128	; 0x80
 800bcda:	d105      	bne.n	800bce8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800bcdc:	2208      	movs	r2, #8
 800bcde:	491f      	ldr	r1, [pc, #124]	; (800bd5c <SCSI_Inquiry+0xf8>)
 800bce0:	69b8      	ldr	r0, [r7, #24]
 800bce2:	f001 f867 	bl	800cdb4 <SCSI_UpdateBotData>
 800bce6:	e031      	b.n	800bd4c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bcee:	2324      	movs	r3, #36	; 0x24
 800bcf0:	2205      	movs	r2, #5
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 faf1 	bl	800c2da <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfc:	e027      	b.n	800bd4e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	33b0      	adds	r3, #176	; 0xb0
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	7afa      	ldrb	r2, [r7, #11]
 800bd12:	4613      	mov	r3, r2
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bd1a:	440b      	add	r3, r1
 800bd1c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	3304      	adds	r3, #4
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3305      	adds	r3, #5
 800bd28:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	8bfa      	ldrh	r2, [r7, #30]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d303      	bcc.n	800bd40 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800bd40:	8bfb      	ldrh	r3, [r7, #30]
 800bd42:	461a      	mov	r2, r3
 800bd44:	6979      	ldr	r1, [r7, #20]
 800bd46:	69b8      	ldr	r0, [r7, #24]
 800bd48:	f001 f834 	bl	800cdb4 <SCSI_UpdateBotData>
  }

  return 0;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3720      	adds	r7, #32
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000110 	.word	0x20000110
 800bd5c:	20000118 	.word	0x20000118

0800bd60 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	32b0      	adds	r2, #176	; 0xb0
 800bd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800bd84:	f04f 33ff 	mov.w	r3, #4294967295
 800bd88:	e064      	b.n	800be54 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	33b0      	adds	r3, #176	; 0xb0
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800bda8:	7af8      	ldrb	r0, [r7, #11]
 800bdaa:	4798      	blx	r3
 800bdac:	4603      	mov	r3, r0
 800bdae:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bdb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d104      	bne.n	800bdc2 <SCSI_ReadCapacity10+0x62>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d108      	bne.n	800bdd4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bdc2:	7af9      	ldrb	r1, [r7, #11]
 800bdc4:	233a      	movs	r3, #58	; 0x3a
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fa86 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800bdce:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd2:	e03f      	b.n	800be54 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bdda:	3b01      	subs	r3, #1
 800bddc:	0e1b      	lsrs	r3, r3, #24
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bdea:	3b01      	subs	r3, #1
 800bdec:	0c1b      	lsrs	r3, r3, #16
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	0a1b      	lsrs	r3, r3, #8
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be1a:	161b      	asrs	r3, r3, #24
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be28:	141b      	asrs	r3, r3, #16
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	b29b      	uxth	r3, r3
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be46:	b2da      	uxtb	r2, r3
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2208      	movs	r2, #8
 800be50:	60da      	str	r2, [r3, #12]

  return 0;
 800be52:	2300      	movs	r3, #0

}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	460b      	mov	r3, r1
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	32b0      	adds	r2, #176	; 0xb0
 800be74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be78:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800be80:	f04f 33ff 	mov.w	r3, #4294967295
 800be84:	e09a      	b.n	800bfbc <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	33b0      	adds	r3, #176	; 0xb0
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800be9e:	69ba      	ldr	r2, [r7, #24]
 800bea0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800bea4:	7af8      	ldrb	r0, [r7, #11]
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800beac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d104      	bne.n	800bebe <SCSI_ReadCapacity16+0x62>
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d108      	bne.n	800bed0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bebe:	7af9      	ldrb	r1, [r7, #11]
 800bec0:	233a      	movs	r3, #58	; 0x3a
 800bec2:	2202      	movs	r2, #2
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fa08 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800beca:	f04f 33ff 	mov.w	r3, #4294967295
 800bece:	e075      	b.n	800bfbc <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	330a      	adds	r3, #10
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	330b      	adds	r3, #11
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bee0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	330c      	adds	r3, #12
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800beea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	320d      	adds	r2, #13
 800bef0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bef2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800bef8:	2300      	movs	r3, #0
 800befa:	61fb      	str	r3, [r7, #28]
 800befc:	e008      	b.n	800bf10 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800befe:	69ba      	ldr	r2, [r7, #24]
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	4413      	add	r3, r2
 800bf04:	3310      	adds	r3, #16
 800bf06:	2200      	movs	r2, #0
 800bf08:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	61fb      	str	r3, [r7, #28]
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	69fa      	ldr	r2, [r7, #28]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d3f1      	bcc.n	800befe <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf20:	3b01      	subs	r3, #1
 800bf22:	0e1b      	lsrs	r3, r3, #24
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf30:	3b01      	subs	r3, #1
 800bf32:	0c1b      	lsrs	r3, r3, #16
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf40:	3b01      	subs	r3, #1
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	3b01      	subs	r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf60:	161b      	asrs	r3, r3, #24
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf6e:	141b      	asrs	r3, r3, #16
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf7c:	0a1b      	lsrs	r3, r3, #8
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	330a      	adds	r3, #10
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330b      	adds	r3, #11
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bfa2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800bfac:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	320d      	adds	r2, #13
 800bfb2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bfb4:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	60da      	str	r2, [r3, #12]

  return 0;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	32b0      	adds	r2, #176	; 0xb0
 800bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d102      	bne.n	800bfee <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfec:	e061      	b.n	800c0b2 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	33b0      	adds	r3, #176	; 0xb0
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	f107 0214 	add.w	r2, r7, #20
 800c004:	f107 0110 	add.w	r1, r7, #16
 800c008:	7af8      	ldrb	r0, [r7, #11]
 800c00a:	4798      	blx	r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <SCSI_ReadFormatCapacity+0x5e>
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d108      	bne.n	800c034 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c022:	7af9      	ldrb	r1, [r7, #11]
 800c024:	233a      	movs	r3, #58	; 0x3a
 800c026:	2202      	movs	r2, #2
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f956 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800c02e:	f04f 33ff 	mov.w	r3, #4294967295
 800c032:	e03e      	b.n	800c0b2 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800c034:	2300      	movs	r3, #0
 800c036:	83fb      	strh	r3, [r7, #30]
 800c038:	e007      	b.n	800c04a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800c03a:	8bfb      	ldrh	r3, [r7, #30]
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	4413      	add	r3, r2
 800c040:	2200      	movs	r2, #0
 800c042:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c044:	8bfb      	ldrh	r3, [r7, #30]
 800c046:	3301      	adds	r3, #1
 800c048:	83fb      	strh	r3, [r7, #30]
 800c04a:	8bfb      	ldrh	r3, [r7, #30]
 800c04c:	2b0b      	cmp	r3, #11
 800c04e:	d9f4      	bls.n	800c03a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	2208      	movs	r2, #8
 800c054:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3b01      	subs	r3, #1
 800c05a:	0e1b      	lsrs	r3, r3, #24
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3b01      	subs	r3, #1
 800c066:	0c1b      	lsrs	r3, r3, #16
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	3b01      	subs	r3, #1
 800c072:	0a1b      	lsrs	r3, r3, #8
 800c074:	b2da      	uxtb	r2, r3
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b2da      	uxtb	r2, r3
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2202      	movs	r2, #2
 800c08a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c08c:	8abb      	ldrh	r3, [r7, #20]
 800c08e:	141b      	asrs	r3, r3, #16
 800c090:	b2da      	uxtb	r2, r3
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c096:	8abb      	ldrh	r3, [r7, #20]
 800c098:	0a1b      	lsrs	r3, r3, #8
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c0a2:	8abb      	ldrh	r3, [r7, #20]
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	220c      	movs	r2, #12
 800c0ae:	60da      	str	r2, [r3, #12]

  return 0;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3720      	adds	r7, #32
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	32b0      	adds	r2, #176	; 0xb0
 800c0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c0da:	2304      	movs	r3, #4
 800c0dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d102      	bne.n	800c0ea <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e8:	e027      	b.n	800c13a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	33b0      	adds	r3, #176	; 0xb0
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	7afa      	ldrb	r2, [r7, #11]
 800c0fe:	4610      	mov	r0, r2
 800c100:	4798      	blx	r3
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d006      	beq.n	800c116 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800c108:	4b0e      	ldr	r3, [pc, #56]	; (800c144 <SCSI_ModeSense6+0x88>)
 800c10a:	789b      	ldrb	r3, [r3, #2]
 800c10c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c110:	b2da      	uxtb	r2, r3
 800c112:	4b0c      	ldr	r3, [pc, #48]	; (800c144 <SCSI_ModeSense6+0x88>)
 800c114:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3304      	adds	r3, #4
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	8afa      	ldrh	r2, [r7, #22]
 800c120:	429a      	cmp	r2, r3
 800c122:	d303      	bcc.n	800c12c <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3304      	adds	r3, #4
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c12c:	8afb      	ldrh	r3, [r7, #22]
 800c12e:	461a      	mov	r2, r3
 800c130:	4904      	ldr	r1, [pc, #16]	; (800c144 <SCSI_ModeSense6+0x88>)
 800c132:	6938      	ldr	r0, [r7, #16]
 800c134:	f000 fe3e 	bl	800cdb4 <SCSI_UpdateBotData>

  return 0;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	20000120 	.word	0x20000120

0800c148 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	460b      	mov	r3, r1
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	32b0      	adds	r2, #176	; 0xb0
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c166:	2308      	movs	r3, #8
 800c168:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d102      	bne.n	800c176 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c170:	f04f 33ff 	mov.w	r3, #4294967295
 800c174:	e027      	b.n	800c1c6 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	33b0      	adds	r3, #176	; 0xb0
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	7afa      	ldrb	r2, [r7, #11]
 800c18a:	4610      	mov	r0, r2
 800c18c:	4798      	blx	r3
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d006      	beq.n	800c1a2 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <SCSI_ModeSense10+0x88>)
 800c196:	78db      	ldrb	r3, [r3, #3]
 800c198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <SCSI_ModeSense10+0x88>)
 800c1a0:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	8afa      	ldrh	r2, [r7, #22]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d303      	bcc.n	800c1b8 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c1b8:	8afb      	ldrh	r3, [r7, #22]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4904      	ldr	r1, [pc, #16]	; (800c1d0 <SCSI_ModeSense10+0x88>)
 800c1be:	6938      	ldr	r0, [r7, #16]
 800c1c0:	f000 fdf8 	bl	800cdb4 <SCSI_UpdateBotData>

  return 0;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000124 	.word	0x20000124

0800c1d4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	32b0      	adds	r2, #176	; 0xb0
 800c1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	e069      	b.n	800c2d2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c20e:	2320      	movs	r3, #32
 800c210:	2205      	movs	r2, #5
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 f861 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800c218:	f04f 33ff 	mov.w	r3, #4294967295
 800c21c:	e059      	b.n	800c2d2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
 800c222:	e007      	b.n	800c234 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	4413      	add	r3, r2
 800c22a:	2200      	movs	r2, #0
 800c22c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	3301      	adds	r3, #1
 800c232:	75fb      	strb	r3, [r7, #23]
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b11      	cmp	r3, #17
 800c238:	d9f4      	bls.n	800c224 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2270      	movs	r2, #112	; 0x70
 800c23e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	220c      	movs	r2, #12
 800c244:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c252:	429a      	cmp	r2, r3
 800c254:	d02e      	beq.n	800c2b4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c25c:	461a      	mov	r2, r3
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3248      	adds	r2, #72	; 0x48
 800c262:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	3348      	adds	r3, #72	; 0x48
 800c274:	00db      	lsls	r3, r3, #3
 800c276:	4413      	add	r3, r2
 800c278:	791a      	ldrb	r2, [r3, #4]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	3348      	adds	r3, #72	; 0x48
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	4413      	add	r3, r2
 800c28c:	795a      	ldrb	r2, [r3, #5]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c298:	3301      	adds	r3, #1
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c2a8:	2b04      	cmp	r3, #4
 800c2aa:	d103      	bne.n	800c2b4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2212      	movs	r2, #18
 800c2b8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	2b12      	cmp	r3, #18
 800c2c2:	d805      	bhi.n	800c2d0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b085      	sub	sp, #20
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	70fb      	strb	r3, [r7, #3]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70bb      	strb	r3, [r7, #2]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	32b0      	adds	r2, #176	; 0xb0
 800c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c302:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d02c      	beq.n	800c364 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c310:	461a      	mov	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3248      	adds	r2, #72	; 0x48
 800c316:	78b9      	ldrb	r1, [r7, #2]
 800c318:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	3348      	adds	r3, #72	; 0x48
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	787a      	ldrb	r2, [r7, #1]
 800c32c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	3348      	adds	r3, #72	; 0x48
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	4413      	add	r3, r2
 800c33c:	2200      	movs	r2, #0
 800c33e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c346:	3301      	adds	r3, #1
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c356:	2b04      	cmp	r3, #4
 800c358:	d105      	bne.n	800c366 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c362:	e000      	b.n	800c366 <SCSI_SenseCode+0x8c>
    return;
 800c364:	bf00      	nop
  }
}
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	460b      	mov	r3, r1
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	32b0      	adds	r2, #176	; 0xb0
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800c394:	f04f 33ff 	mov.w	r3, #4294967295
 800c398:	e03b      	b.n	800c412 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d10f      	bne.n	800c3c4 <SCSI_StartStopUnit+0x54>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	f003 0303 	and.w	r3, r3, #3
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d108      	bne.n	800c3c4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c3b2:	7af9      	ldrb	r1, [r7, #11]
 800c3b4:	2324      	movs	r3, #36	; 0x24
 800c3b6:	2205      	movs	r2, #5
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7ff ff8e 	bl	800c2da <SCSI_SenseCode>

    return -1;
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	e026      	b.n	800c412 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	f003 0303 	and.w	r3, r3, #3
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d104      	bne.n	800c3dc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c3da:	e016      	b.n	800c40a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 0303 	and.w	r3, r3, #3
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	d104      	bne.n	800c3f4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c3f2:	e00a      	b.n	800c40a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3304      	adds	r3, #4
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 0303 	and.w	r3, r3, #3
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d103      	bne.n	800c40a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2200      	movs	r2, #0
 800c40e:	60da      	str	r2, [r3, #12]

  return 0;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b087      	sub	sp, #28
 800c41e:	af00      	add	r7, sp, #0
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	460b      	mov	r3, r1
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	32b0      	adds	r2, #176	; 0xb0
 800c432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c436:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d102      	bne.n	800c444 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800c43e:	f04f 33ff 	mov.w	r3, #4294967295
 800c442:	e011      	b.n	800c468 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3304      	adds	r3, #4
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d104      	bne.n	800c458 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c456:	e003      	b.n	800c460 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2200      	movs	r2, #0
 800c464:	60da      	str	r2, [r3, #12]

  return 0;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	371c      	adds	r7, #28
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	460b      	mov	r3, r1
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	32b0      	adds	r2, #176	; 0xb0
 800c48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c490:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d102      	bne.n	800c49e <SCSI_Read10+0x2a>
  {
    return -1;
 800c498:	f04f 33ff 	mov.w	r3, #4294967295
 800c49c:	e090      	b.n	800c5c0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	7a1b      	ldrb	r3, [r3, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f040 8082 	bne.w	800c5ac <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c4ae:	b25b      	sxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	db0a      	blt.n	800c4ca <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c4ba:	2320      	movs	r3, #32
 800c4bc:	2205      	movs	r2, #5
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff ff0b 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c8:	e07a      	b.n	800c5c0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d108      	bne.n	800c4e6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c4d4:	7af9      	ldrb	r1, [r7, #11]
 800c4d6:	233a      	movs	r3, #58	; 0x3a
 800c4d8:	2202      	movs	r2, #2
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7ff fefd 	bl	800c2da <SCSI_SenseCode>

      return -1;
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	e06c      	b.n	800c5c0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	33b0      	adds	r3, #176	; 0xb0
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	4798      	blx	r3
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d008      	beq.n	800c516 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c504:	7af9      	ldrb	r1, [r7, #11]
 800c506:	233a      	movs	r3, #58	; 0x3a
 800c508:	2202      	movs	r2, #2
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f7ff fee5 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c510:	f04f 33ff 	mov.w	r3, #4294967295
 800c514:	e054      	b.n	800c5c0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3302      	adds	r3, #2
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3303      	adds	r3, #3
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c526:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3304      	adds	r3, #4
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c530:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	3205      	adds	r2, #5
 800c536:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c538:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3307      	adds	r3, #7
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	3208      	adds	r2, #8
 800c54c:	7812      	ldrb	r2, [r2, #0]
 800c54e:	431a      	orrs	r2, r3
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c562:	7af9      	ldrb	r1, [r7, #11]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 fadc 	bl	800cb22 <SCSI_CheckAddressRange>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	da02      	bge.n	800c576 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c570:	f04f 33ff 	mov.w	r3, #4294967295
 800c574:	e024      	b.n	800c5c0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c582:	6979      	ldr	r1, [r7, #20]
 800c584:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c588:	fb01 f303 	mul.w	r3, r1, r3
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d00a      	beq.n	800c5a6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c596:	2320      	movs	r3, #32
 800c598:	2205      	movs	r2, #5
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f7ff fe9d 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a4:	e00c      	b.n	800c5c0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5b2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 fadf 	bl	800cb7c <SCSI_ProcessRead>
 800c5be:	4603      	mov	r3, r0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	32b0      	adds	r2, #176	; 0xb0
 800c5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <SCSI_Read12+0x2a>
  {
    return -1;
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f0:	e09a      	b.n	800c728 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	7a1b      	ldrb	r3, [r3, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f040 808c 	bne.w	800c714 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c602:	b25b      	sxtb	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	db0a      	blt.n	800c61e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c60e:	2320      	movs	r3, #32
 800c610:	2205      	movs	r2, #5
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fe61 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c618:	f04f 33ff 	mov.w	r3, #4294967295
 800c61c:	e084      	b.n	800c728 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c624:	2b02      	cmp	r3, #2
 800c626:	d108      	bne.n	800c63a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c628:	7af9      	ldrb	r1, [r7, #11]
 800c62a:	233a      	movs	r3, #58	; 0x3a
 800c62c:	2202      	movs	r2, #2
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f7ff fe53 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c634:	f04f 33ff 	mov.w	r3, #4294967295
 800c638:	e076      	b.n	800c728 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	33b0      	adds	r3, #176	; 0xb0
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	7afa      	ldrb	r2, [r7, #11]
 800c64e:	4610      	mov	r0, r2
 800c650:	4798      	blx	r3
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d008      	beq.n	800c66a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c658:	7af9      	ldrb	r1, [r7, #11]
 800c65a:	233a      	movs	r3, #58	; 0x3a
 800c65c:	2202      	movs	r2, #2
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7ff fe3b 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c664:	f04f 33ff 	mov.w	r3, #4294967295
 800c668:	e05e      	b.n	800c728 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3302      	adds	r3, #2
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3303      	adds	r3, #3
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c67a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	3304      	adds	r3, #4
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c684:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	3205      	adds	r2, #5
 800c68a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c68c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3306      	adds	r3, #6
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3307      	adds	r3, #7
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c6a4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3308      	adds	r3, #8
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c6ae:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	3209      	adds	r2, #9
 800c6b4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c6b6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c6ca:	7af9      	ldrb	r1, [r7, #11]
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fa28 	bl	800cb22 <SCSI_CheckAddressRange>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	da02      	bge.n	800c6de <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6dc:	e024      	b.n	800c728 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c6ea:	6979      	ldr	r1, [r7, #20]
 800c6ec:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c6f0:	fb01 f303 	mul.w	r3, r1, r3
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d00a      	beq.n	800c70e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c6fe:	2320      	movs	r3, #32
 800c700:	2205      	movs	r2, #5
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7ff fde9 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c708:	f04f 33ff 	mov.w	r3, #4294967295
 800c70c:	e00c      	b.n	800c728 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2202      	movs	r2, #2
 800c712:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c71a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c71c:	7afb      	ldrb	r3, [r7, #11]
 800c71e:	4619      	mov	r1, r3
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f000 fa2b 	bl	800cb7c <SCSI_ProcessRead>
 800c726:	4603      	mov	r3, r0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	460b      	mov	r3, r1
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	32b0      	adds	r2, #176	; 0xb0
 800c748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <SCSI_Write10+0x2a>
  {
    return -1;
 800c754:	f04f 33ff 	mov.w	r3, #4294967295
 800c758:	e0ba      	b.n	800c8d0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	7a1b      	ldrb	r3, [r3, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f040 80b0 	bne.w	800c8c4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c774:	2320      	movs	r3, #32
 800c776:	2205      	movs	r2, #5
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fdae 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c77e:	f04f 33ff 	mov.w	r3, #4294967295
 800c782:	e0a5      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c78a:	b25b      	sxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	da0a      	bge.n	800c7a6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c796:	2320      	movs	r3, #32
 800c798:	2205      	movs	r2, #5
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f7ff fd9d 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a4:	e094      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	33b0      	adds	r3, #176	; 0xb0
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4798      	blx	r3
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d008      	beq.n	800c7d6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c7c4:	7af9      	ldrb	r1, [r7, #11]
 800c7c6:	233a      	movs	r3, #58	; 0x3a
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7ff fd85 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d4:	e07c      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	33b0      	adds	r3, #176	; 0xb0
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	7afa      	ldrb	r2, [r7, #11]
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d008      	beq.n	800c806 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c7f4:	7af9      	ldrb	r1, [r7, #11]
 800c7f6:	2327      	movs	r3, #39	; 0x27
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fd6d 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c800:	f04f 33ff 	mov.w	r3, #4294967295
 800c804:	e064      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3302      	adds	r3, #2
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3303      	adds	r3, #3
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c816:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3304      	adds	r3, #4
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c820:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	3205      	adds	r2, #5
 800c826:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c828:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	3307      	adds	r3, #7
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	3208      	adds	r2, #8
 800c83c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c83e:	431a      	orrs	r2, r3
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c852:	7af9      	ldrb	r1, [r7, #11]
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 f964 	bl	800cb22 <SCSI_CheckAddressRange>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da02      	bge.n	800c866 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	e034      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800c872:	fb02 f303 	mul.w	r3, r2, r3
 800c876:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	429a      	cmp	r2, r3
 800c882:	d00a      	beq.n	800c89a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c88a:	2320      	movs	r3, #32
 800c88c:	2205      	movs	r2, #5
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff fd23 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c894:	f04f 33ff 	mov.w	r3, #4294967295
 800c898:	e01a      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8a0:	bf28      	it	cs
 800c8a2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c8a6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c8ae:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <SCSI_Write10+0x1a8>)
 800c8b0:	7819      	ldrb	r1, [r3, #0]
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f103 0210 	add.w	r2, r3, #16
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f00e fe71 	bl	801b5a2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e005      	b.n	800c8d0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800c8c4:	7afb      	ldrb	r3, [r7, #11]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 f9dd 	bl	800cc88 <SCSI_ProcessWrite>
 800c8ce:	4603      	mov	r3, r0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	2000010f 	.word	0x2000010f

0800c8dc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	32b0      	adds	r2, #176	; 0xb0
 800c8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <SCSI_Write12+0x2a>
  {
    return -1;
 800c900:	f04f 33ff 	mov.w	r3, #4294967295
 800c904:	e0ca      	b.n	800ca9c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	7a1b      	ldrb	r3, [r3, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f040 80c0 	bne.w	800ca90 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10a      	bne.n	800c930 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c920:	2320      	movs	r3, #32
 800c922:	2205      	movs	r2, #5
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fcd8 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c92a:	f04f 33ff 	mov.w	r3, #4294967295
 800c92e:	e0b5      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c936:	b25b      	sxtb	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	da0a      	bge.n	800c952 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c942:	2320      	movs	r3, #32
 800c944:	2205      	movs	r2, #5
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff fcc7 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800c94c:	f04f 33ff 	mov.w	r3, #4294967295
 800c950:	e0a4      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	33b0      	adds	r3, #176	; 0xb0
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	7afa      	ldrb	r2, [r7, #11]
 800c966:	4610      	mov	r0, r2
 800c968:	4798      	blx	r3
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00b      	beq.n	800c988 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c970:	7af9      	ldrb	r1, [r7, #11]
 800c972:	233a      	movs	r3, #58	; 0x3a
 800c974:	2202      	movs	r2, #2
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff fcaf 	bl	800c2da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	2205      	movs	r2, #5
 800c980:	721a      	strb	r2, [r3, #8]
      return -1;
 800c982:	f04f 33ff 	mov.w	r3, #4294967295
 800c986:	e089      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	33b0      	adds	r3, #176	; 0xb0
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	7afa      	ldrb	r2, [r7, #11]
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00b      	beq.n	800c9be <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c9a6:	7af9      	ldrb	r1, [r7, #11]
 800c9a8:	2327      	movs	r3, #39	; 0x27
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff fc94 	bl	800c2da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2205      	movs	r2, #5
 800c9b6:	721a      	strb	r2, [r3, #8]
      return -1;
 800c9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9bc:	e06e      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	3302      	adds	r3, #2
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3303      	adds	r3, #3
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c9ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c9d8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	3205      	adds	r2, #5
 800c9de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c9e0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3306      	adds	r3, #6
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3307      	adds	r3, #7
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c9f8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ca02:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	3209      	adds	r2, #9
 800ca08:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ca0a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca1e:	7af9      	ldrb	r1, [r7, #11]
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f000 f87e 	bl	800cb22 <SCSI_CheckAddressRange>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	da02      	bge.n	800ca32 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ca2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca30:	e034      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ca3e:	fb02 f303 	mul.w	r3, r2, r3
 800ca42:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d00a      	beq.n	800ca66 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ca56:	2320      	movs	r3, #32
 800ca58:	2205      	movs	r2, #5
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff fc3d 	bl	800c2da <SCSI_SenseCode>
      return -1;
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	e01a      	b.n	800ca9c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6c:	bf28      	it	cs
 800ca6e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ca72:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2201      	movs	r2, #1
 800ca78:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <SCSI_Write12+0x1c8>)
 800ca7c:	7819      	ldrb	r1, [r3, #0]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f103 0210 	add.w	r2, r3, #16
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f00e fd8b 	bl	801b5a2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e005      	b.n	800ca9c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800ca90:	7afb      	ldrb	r3, [r7, #11]
 800ca92:	4619      	mov	r1, r3
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f000 f8f7 	bl	800cc88 <SCSI_ProcessWrite>
 800ca9a:	4603      	mov	r3, r0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000010f 	.word	0x2000010f

0800caa8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	460b      	mov	r3, r1
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	32b0      	adds	r2, #176	; 0xb0
 800cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d102      	bne.n	800cad2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800cacc:	f04f 33ff 	mov.w	r3, #4294967295
 800cad0:	e023      	b.n	800cb1a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3301      	adds	r3, #1
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	f003 0302 	and.w	r3, r3, #2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d008      	beq.n	800caf2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800cae0:	7af9      	ldrb	r1, [r7, #11]
 800cae2:	2324      	movs	r3, #36	; 0x24
 800cae4:	2205      	movs	r2, #5
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff fbf7 	bl	800c2da <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800caec:	f04f 33ff 	mov.w	r3, #4294967295
 800caf0:	e013      	b.n	800cb1a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cafe:	7af9      	ldrb	r1, [r7, #11]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f000 f80e 	bl	800cb22 <SCSI_CheckAddressRange>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da02      	bge.n	800cb12 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800cb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb10:	e003      	b.n	800cb1a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2200      	movs	r2, #0
 800cb16:	60da      	str	r2, [r3, #12]

  return 0;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b086      	sub	sp, #24
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	32b0      	adds	r2, #176	; 0xb0
 800cb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb40:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800cb48:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4c:	e011      	b.n	800cb72 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	441a      	add	r2, r3
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d908      	bls.n	800cb70 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800cb5e:	7af9      	ldrb	r1, [r7, #11]
 800cb60:	2321      	movs	r3, #33	; 0x21
 800cb62:	2205      	movs	r2, #5
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff fbb8 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800cb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6e:	e000      	b.n	800cb72 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
	...

0800cb7c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cb7c:	b590      	push	{r4, r7, lr}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	32b0      	adds	r2, #176	; 0xb0
 800cb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb96:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800cb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cba2:	e06a      	b.n	800cc7a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cbb0:	fb02 f303 	mul.w	r3, r2, r3
 800cbb4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbbc:	bf28      	it	cs
 800cbbe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cbc2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	33b0      	adds	r3, #176	; 0xb0
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	691c      	ldr	r4, [r3, #16]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f103 0110 	add.w	r1, r3, #16
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cbe8:	4618      	mov	r0, r3
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	78f8      	ldrb	r0, [r7, #3]
 800cbf4:	47a0      	blx	r4
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	da08      	bge.n	800cc0e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cbfc:	78f9      	ldrb	r1, [r7, #3]
 800cbfe:	2311      	movs	r3, #17
 800cc00:	2204      	movs	r2, #4
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fb69 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	e035      	b.n	800cc7a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <SCSI_ProcessRead+0x108>)
 800cc10:	7819      	ldrb	r1, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f103 0210 	add.w	r2, r3, #16
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f00e fca0 	bl	801b560 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc34:	441a      	add	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cc48:	4619      	mov	r1, r3
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc50:	1ad2      	subs	r2, r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	1ad2      	subs	r2, r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d102      	bne.n	800cc78 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2203      	movs	r2, #3
 800cc76:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd90      	pop	{r4, r7, pc}
 800cc82:	bf00      	nop
 800cc84:	2000010e 	.word	0x2000010e

0800cc88 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	32b0      	adds	r2, #176	; 0xb0
 800cc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d102      	bne.n	800ccb0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccae:	e07a      	b.n	800cda6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ccbc:	fb02 f303 	mul.w	r3, r2, r3
 800ccc0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccc8:	bf28      	it	cs
 800ccca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ccce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	33b0      	adds	r3, #176	; 0xb0
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	695c      	ldr	r4, [r3, #20]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f103 0110 	add.w	r1, r3, #16
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	78f8      	ldrb	r0, [r7, #3]
 800cd00:	47a0      	blx	r4
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	da08      	bge.n	800cd1a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800cd08:	78f9      	ldrb	r1, [r7, #3]
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	2204      	movs	r2, #4
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fae3 	bl	800c2da <SCSI_SenseCode>
    return -1;
 800cd14:	f04f 33ff 	mov.w	r3, #4294967295
 800cd18:	e045      	b.n	800cda6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cd26:	4619      	mov	r1, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd2e:	441a      	add	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cd42:	4619      	mov	r1, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd4a:	1ad2      	subs	r2, r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d104      	bne.n	800cd76 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7fe fce6 	bl	800b740 <MSC_BOT_SendCSW>
 800cd74:	e016      	b.n	800cda4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cd82:	fb02 f303 	mul.w	r3, r2, r3
 800cd86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8a:	bf28      	it	cs
 800cd8c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cd90:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800cd92:	4b07      	ldr	r3, [pc, #28]	; (800cdb0 <SCSI_ProcessWrite+0x128>)
 800cd94:	7819      	ldrb	r1, [r3, #0]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f103 0210 	add.w	r2, r3, #16
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f00e fbff 	bl	801b5a2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd90      	pop	{r4, r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	2000010f 	.word	0x2000010f

0800cdb4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d102      	bne.n	800cdd2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	e013      	b.n	800cdfa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800cdd2:	8afa      	ldrh	r2, [r7, #22]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800cdd8:	e00b      	b.n	800cdf2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800cdda:	8afb      	ldrh	r3, [r7, #22]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800cde0:	8afb      	ldrh	r3, [r7, #22]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	441a      	add	r2, r3
 800cde6:	8afb      	ldrh	r3, [r7, #22]
 800cde8:	7811      	ldrb	r1, [r2, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4413      	add	r3, r2
 800cdee:	460a      	mov	r2, r1
 800cdf0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800cdf2:	8afb      	ldrh	r3, [r7, #22]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1f0      	bne.n	800cdda <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	371c      	adds	r7, #28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b086      	sub	sp, #24
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	4613      	mov	r3, r2
 800ce12:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e01f      	b.n	800ce5e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d003      	beq.n	800ce44 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	79fa      	ldrb	r2, [r7, #7]
 800ce50:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f00e f9e6 	bl	801b224 <USBD_LL_Init>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e025      	b.n	800ceca <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	32ae      	adds	r2, #174	; 0xae
 800ce90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00f      	beq.n	800ceba <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	32ae      	adds	r2, #174	; 0xae
 800cea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	f107 020e 	add.w	r2, r7, #14
 800ceae:	4610      	mov	r0, r2
 800ceb0:	4798      	blx	r3
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b082      	sub	sp, #8
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f00e fa38 	bl	801b350 <USBD_LL_Start>
 800cee0:	4603      	mov	r3, r0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b083      	sub	sp, #12
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cef2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d009      	beq.n	800cf2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	4611      	mov	r1, r2
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	4798      	blx	r3
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	78fa      	ldrb	r2, [r7, #3]
 800cf52:	4611      	mov	r1, r2
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	4798      	blx	r3
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 f90f 	bl	800e1a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cf92:	461a      	mov	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfa0:	f003 031f 	and.w	r3, r3, #31
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d01a      	beq.n	800cfde <USBD_LL_SetupStage+0x72>
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d822      	bhi.n	800cff2 <USBD_LL_SetupStage+0x86>
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <USBD_LL_SetupStage+0x4a>
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d00a      	beq.n	800cfca <USBD_LL_SetupStage+0x5e>
 800cfb4:	e01d      	b.n	800cff2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fb66 	bl	800d690 <USBD_StdDevReq>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfc8:	e020      	b.n	800d00c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fbce 	bl	800d774 <USBD_StdItfReq>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
      break;
 800cfdc:	e016      	b.n	800d00c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fc30 	bl	800d84c <USBD_StdEPReq>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73fb      	strb	r3, [r7, #15]
      break;
 800cff0:	e00c      	b.n	800d00c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f00e fa24 	bl	801b44e <USBD_LL_StallEP>
 800d006:	4603      	mov	r3, r0
 800d008:	73fb      	strb	r3, [r7, #15]
      break;
 800d00a:	bf00      	nop
  }

  return ret;
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b086      	sub	sp, #24
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	460b      	mov	r3, r1
 800d020:	607a      	str	r2, [r7, #4]
 800d022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d028:	7afb      	ldrb	r3, [r7, #11]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d16e      	bne.n	800d10c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d034:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	f040 8098 	bne.w	800d172 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d913      	bls.n	800d076 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	689a      	ldr	r2, [r3, #8]
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	1ad2      	subs	r2, r2, r3
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	68da      	ldr	r2, [r3, #12]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	4293      	cmp	r3, r2
 800d066:	bf28      	it	cs
 800d068:	4613      	movcs	r3, r2
 800d06a:	461a      	mov	r2, r3
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f001 f98b 	bl	800e38a <USBD_CtlContinueRx>
 800d074:	e07d      	b.n	800d172 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d07c:	f003 031f 	and.w	r3, r3, #31
 800d080:	2b02      	cmp	r3, #2
 800d082:	d014      	beq.n	800d0ae <USBD_LL_DataOutStage+0x98>
 800d084:	2b02      	cmp	r3, #2
 800d086:	d81d      	bhi.n	800d0c4 <USBD_LL_DataOutStage+0xae>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <USBD_LL_DataOutStage+0x7c>
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d003      	beq.n	800d098 <USBD_LL_DataOutStage+0x82>
 800d090:	e018      	b.n	800d0c4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d092:	2300      	movs	r3, #0
 800d094:	75bb      	strb	r3, [r7, #22]
            break;
 800d096:	e018      	b.n	800d0ca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f000 fa64 	bl	800d570 <USBD_CoreFindIF>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	75bb      	strb	r3, [r7, #22]
            break;
 800d0ac:	e00d      	b.n	800d0ca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f000 fa66 	bl	800d58a <USBD_CoreFindEP>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75bb      	strb	r3, [r7, #22]
            break;
 800d0c2:	e002      	b.n	800d0ca <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	75bb      	strb	r3, [r7, #22]
            break;
 800d0c8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d0ca:	7dbb      	ldrb	r3, [r7, #22]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d119      	bne.n	800d104 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d113      	bne.n	800d104 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d0dc:	7dba      	ldrb	r2, [r7, #22]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	32ae      	adds	r2, #174	; 0xae
 800d0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d0ec:	7dba      	ldrb	r2, [r7, #22]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d0f4:	7dba      	ldrb	r2, [r7, #22]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	32ae      	adds	r2, #174	; 0xae
 800d0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f001 f951 	bl	800e3ac <USBD_CtlSendStatus>
 800d10a:	e032      	b.n	800d172 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d10c:	7afb      	ldrb	r3, [r7, #11]
 800d10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d112:	b2db      	uxtb	r3, r3
 800d114:	4619      	mov	r1, r3
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 fa37 	bl	800d58a <USBD_CoreFindEP>
 800d11c:	4603      	mov	r3, r0
 800d11e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d120:	7dbb      	ldrb	r3, [r7, #22]
 800d122:	2bff      	cmp	r3, #255	; 0xff
 800d124:	d025      	beq.n	800d172 <USBD_LL_DataOutStage+0x15c>
 800d126:	7dbb      	ldrb	r3, [r7, #22]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d122      	bne.n	800d172 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b03      	cmp	r3, #3
 800d136:	d117      	bne.n	800d168 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d138:	7dba      	ldrb	r2, [r7, #22]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	32ae      	adds	r2, #174	; 0xae
 800d13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d142:	699b      	ldr	r3, [r3, #24]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00f      	beq.n	800d168 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d148:	7dba      	ldrb	r2, [r7, #22]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d150:	7dba      	ldrb	r2, [r7, #22]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	32ae      	adds	r2, #174	; 0xae
 800d156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	7afa      	ldrb	r2, [r7, #11]
 800d15e:	4611      	mov	r1, r2
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	4798      	blx	r3
 800d164:	4603      	mov	r3, r0
 800d166:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d168:	7dfb      	ldrb	r3, [r7, #23]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	e000      	b.n	800d174 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	460b      	mov	r3, r1
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d18a:	7afb      	ldrb	r3, [r7, #11]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d16f      	bne.n	800d270 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	3314      	adds	r3, #20
 800d194:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d15a      	bne.n	800d256 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	689a      	ldr	r2, [r3, #8]
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d914      	bls.n	800d1d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	689a      	ldr	r2, [r3, #8]
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	1ad2      	subs	r2, r2, r3
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f001 f8b3 	bl	800e32e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f00e f9e7 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800d1d4:	e03f      	b.n	800d256 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	68da      	ldr	r2, [r3, #12]
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d11c      	bne.n	800d21c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d316      	bcc.n	800d21c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d20f      	bcs.n	800d21c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2100      	movs	r1, #0
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f001 f894 	bl	800e32e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d20e:	2300      	movs	r3, #0
 800d210:	2200      	movs	r2, #0
 800d212:	2100      	movs	r1, #0
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f00e f9c4 	bl	801b5a2 <USBD_LL_PrepareReceive>
 800d21a:	e01c      	b.n	800d256 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b03      	cmp	r3, #3
 800d226:	d10f      	bne.n	800d248 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d009      	beq.n	800d248 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d248:	2180      	movs	r1, #128	; 0x80
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f00e f8ff 	bl	801b44e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f001 f8be 	bl	800e3d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d03a      	beq.n	800d2d6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff fe42 	bl	800ceea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d26e:	e032      	b.n	800d2d6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d270:	7afb      	ldrb	r3, [r7, #11]
 800d272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d276:	b2db      	uxtb	r3, r3
 800d278:	4619      	mov	r1, r3
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f000 f985 	bl	800d58a <USBD_CoreFindEP>
 800d280:	4603      	mov	r3, r0
 800d282:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d284:	7dfb      	ldrb	r3, [r7, #23]
 800d286:	2bff      	cmp	r3, #255	; 0xff
 800d288:	d025      	beq.n	800d2d6 <USBD_LL_DataInStage+0x15a>
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d122      	bne.n	800d2d6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d11c      	bne.n	800d2d6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d29c:	7dfa      	ldrb	r2, [r7, #23]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	32ae      	adds	r2, #174	; 0xae
 800d2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d014      	beq.n	800d2d6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d2ac:	7dfa      	ldrb	r2, [r7, #23]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d2b4:	7dfa      	ldrb	r2, [r7, #23]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	32ae      	adds	r2, #174	; 0xae
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	7afa      	ldrb	r2, [r7, #11]
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	4798      	blx	r3
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d2cc:	7dbb      	ldrb	r3, [r7, #22]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d2d2:	7dbb      	ldrb	r3, [r7, #22]
 800d2d4:	e000      	b.n	800d2d8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3718      	adds	r7, #24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d014      	beq.n	800d346 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00e      	beq.n	800d346 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	6852      	ldr	r2, [r2, #4]
 800d334:	b2d2      	uxtb	r2, r2
 800d336:	4611      	mov	r1, r2
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	4798      	blx	r3
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d342:	2303      	movs	r3, #3
 800d344:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d346:	2340      	movs	r3, #64	; 0x40
 800d348:	2200      	movs	r2, #0
 800d34a:	2100      	movs	r1, #0
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f00e f81a 	bl	801b386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2201      	movs	r2, #1
 800d356:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2240      	movs	r2, #64	; 0x40
 800d35e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d362:	2340      	movs	r3, #64	; 0x40
 800d364:	2200      	movs	r2, #0
 800d366:	2180      	movs	r1, #128	; 0x80
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f00e f80c 	bl	801b386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2240      	movs	r2, #64	; 0x40
 800d378:	621a      	str	r2, [r3, #32]

  return ret;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	78fa      	ldrb	r2, [r7, #3]
 800d394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b04      	cmp	r3, #4
 800d3b6:	d006      	beq.n	800d3c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b04      	cmp	r3, #4
 800d3ee:	d106      	bne.n	800d3fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d110      	bne.n	800d442 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d005      	beq.n	800d442 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	32ae      	adds	r2, #174	; 0xae
 800d462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e01c      	b.n	800d4a8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b03      	cmp	r3, #3
 800d478:	d115      	bne.n	800d4a6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	32ae      	adds	r2, #174	; 0xae
 800d484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00b      	beq.n	800d4a6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	32ae      	adds	r2, #174	; 0xae
 800d498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	32ae      	adds	r2, #174	; 0xae
 800d4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e01c      	b.n	800d50c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d115      	bne.n	800d50a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	32ae      	adds	r2, #174	; 0xae
 800d4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00b      	beq.n	800d50a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	32ae      	adds	r2, #174	; 0xae
 800d4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	78fa      	ldrb	r2, [r7, #3]
 800d504:	4611      	mov	r1, r2
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00e      	beq.n	800d566 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	6852      	ldr	r2, [r2, #4]
 800d554:	b2d2      	uxtb	r2, r2
 800d556:	4611      	mov	r1, r2
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	4798      	blx	r3
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d562:	2303      	movs	r3, #3
 800d564:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d57c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d57e:	4618      	mov	r0, r3
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b083      	sub	sp, #12
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	460b      	mov	r3, r1
 800d594:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d596:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	885b      	ldrh	r3, [r3, #2]
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d920      	bls.n	800d60e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d5d4:	e013      	b.n	800d5fe <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d5d6:	f107 030a 	add.w	r3, r7, #10
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6978      	ldr	r0, [r7, #20]
 800d5de:	f000 f81b 	bl	800d618 <USBD_GetNextDesc>
 800d5e2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	2b05      	cmp	r3, #5
 800d5ea:	d108      	bne.n	800d5fe <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	789b      	ldrb	r3, [r3, #2]
 800d5f4:	78fa      	ldrb	r2, [r7, #3]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d008      	beq.n	800d60c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	885b      	ldrh	r3, [r3, #2]
 800d602:	b29a      	uxth	r2, r3
 800d604:	897b      	ldrh	r3, [r7, #10]
 800d606:	429a      	cmp	r2, r3
 800d608:	d8e5      	bhi.n	800d5d6 <USBD_GetEpDesc+0x32>
 800d60a:	e000      	b.n	800d60e <USBD_GetEpDesc+0x6a>
          break;
 800d60c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d60e:	693b      	ldr	r3, [r7, #16]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	881a      	ldrh	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	b29b      	uxth	r3, r3
 800d630:	4413      	add	r3, r2
 800d632:	b29a      	uxth	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4413      	add	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d644:	68fb      	ldr	r3, [r7, #12]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d652:	b480      	push	{r7}
 800d654:	b087      	sub	sp, #28
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	3301      	adds	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d670:	8a3b      	ldrh	r3, [r7, #16]
 800d672:	021b      	lsls	r3, r3, #8
 800d674:	b21a      	sxth	r2, r3
 800d676:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	b21b      	sxth	r3, r3
 800d67e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d680:	89fb      	ldrh	r3, [r7, #14]
}
 800d682:	4618      	mov	r0, r3
 800d684:	371c      	adds	r7, #28
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
	...

0800d690 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6a6:	2b40      	cmp	r3, #64	; 0x40
 800d6a8:	d005      	beq.n	800d6b6 <USBD_StdDevReq+0x26>
 800d6aa:	2b40      	cmp	r3, #64	; 0x40
 800d6ac:	d857      	bhi.n	800d75e <USBD_StdDevReq+0xce>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00f      	beq.n	800d6d2 <USBD_StdDevReq+0x42>
 800d6b2:	2b20      	cmp	r3, #32
 800d6b4:	d153      	bne.n	800d75e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	32ae      	adds	r2, #174	; 0xae
 800d6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	4798      	blx	r3
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d6d0:	e04a      	b.n	800d768 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	785b      	ldrb	r3, [r3, #1]
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d83b      	bhi.n	800d752 <USBD_StdDevReq+0xc2>
 800d6da:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <USBD_StdDevReq+0x50>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d735 	.word	0x0800d735
 800d6e4:	0800d749 	.word	0x0800d749
 800d6e8:	0800d753 	.word	0x0800d753
 800d6ec:	0800d73f 	.word	0x0800d73f
 800d6f0:	0800d753 	.word	0x0800d753
 800d6f4:	0800d713 	.word	0x0800d713
 800d6f8:	0800d709 	.word	0x0800d709
 800d6fc:	0800d753 	.word	0x0800d753
 800d700:	0800d72b 	.word	0x0800d72b
 800d704:	0800d71d 	.word	0x0800d71d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fa3c 	bl	800db88 <USBD_GetDescriptor>
          break;
 800d710:	e024      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 fba1 	bl	800de5c <USBD_SetAddress>
          break;
 800d71a:	e01f      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fbe0 	bl	800dee4 <USBD_SetConfig>
 800d724:	4603      	mov	r3, r0
 800d726:	73fb      	strb	r3, [r7, #15]
          break;
 800d728:	e018      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fc83 	bl	800e038 <USBD_GetConfig>
          break;
 800d732:	e013      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fcb4 	bl	800e0a4 <USBD_GetStatus>
          break;
 800d73c:	e00e      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fce3 	bl	800e10c <USBD_SetFeature>
          break;
 800d746:	e009      	b.n	800d75c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fd07 	bl	800e15e <USBD_ClrFeature>
          break;
 800d750:	e004      	b.n	800d75c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fd5e 	bl	800e216 <USBD_CtlError>
          break;
 800d75a:	bf00      	nop
      }
      break;
 800d75c:	e004      	b.n	800d768 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fd58 	bl	800e216 <USBD_CtlError>
      break;
 800d766:	bf00      	nop
  }

  return ret;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop

0800d774 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d78a:	2b40      	cmp	r3, #64	; 0x40
 800d78c:	d005      	beq.n	800d79a <USBD_StdItfReq+0x26>
 800d78e:	2b40      	cmp	r3, #64	; 0x40
 800d790:	d852      	bhi.n	800d838 <USBD_StdItfReq+0xc4>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <USBD_StdItfReq+0x26>
 800d796:	2b20      	cmp	r3, #32
 800d798:	d14e      	bne.n	800d838 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d840      	bhi.n	800d82a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	889b      	ldrh	r3, [r3, #4]
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d836      	bhi.n	800d820 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	889b      	ldrh	r3, [r3, #4]
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7ff fed8 	bl	800d570 <USBD_CoreFindIF>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7c4:	7bbb      	ldrb	r3, [r7, #14]
 800d7c6:	2bff      	cmp	r3, #255	; 0xff
 800d7c8:	d01d      	beq.n	800d806 <USBD_StdItfReq+0x92>
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d11a      	bne.n	800d806 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d7d0:	7bba      	ldrb	r2, [r7, #14]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	32ae      	adds	r2, #174	; 0xae
 800d7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00f      	beq.n	800d800 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d7e0:	7bba      	ldrb	r2, [r7, #14]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d7e8:	7bba      	ldrb	r2, [r7, #14]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	32ae      	adds	r2, #174	; 0xae
 800d7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	4798      	blx	r3
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7fe:	e004      	b.n	800d80a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d800:	2303      	movs	r3, #3
 800d802:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d804:	e001      	b.n	800d80a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d806:	2303      	movs	r3, #3
 800d808:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	88db      	ldrh	r3, [r3, #6]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d110      	bne.n	800d834 <USBD_StdItfReq+0xc0>
 800d812:	7bfb      	ldrb	r3, [r7, #15]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10d      	bne.n	800d834 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fdc7 	bl	800e3ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d81e:	e009      	b.n	800d834 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 fcf7 	bl	800e216 <USBD_CtlError>
          break;
 800d828:	e004      	b.n	800d834 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fcf2 	bl	800e216 <USBD_CtlError>
          break;
 800d832:	e000      	b.n	800d836 <USBD_StdItfReq+0xc2>
          break;
 800d834:	bf00      	nop
      }
      break;
 800d836:	e004      	b.n	800d842 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fceb 	bl	800e216 <USBD_CtlError>
      break;
 800d840:	bf00      	nop
  }

  return ret;
 800d842:	7bfb      	ldrb	r3, [r7, #15]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	889b      	ldrh	r3, [r3, #4]
 800d85e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d868:	2b40      	cmp	r3, #64	; 0x40
 800d86a:	d007      	beq.n	800d87c <USBD_StdEPReq+0x30>
 800d86c:	2b40      	cmp	r3, #64	; 0x40
 800d86e:	f200 817f 	bhi.w	800db70 <USBD_StdEPReq+0x324>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d02a      	beq.n	800d8cc <USBD_StdEPReq+0x80>
 800d876:	2b20      	cmp	r3, #32
 800d878:	f040 817a 	bne.w	800db70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d87c:	7bbb      	ldrb	r3, [r7, #14]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fe82 	bl	800d58a <USBD_CoreFindEP>
 800d886:	4603      	mov	r3, r0
 800d888:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d88a:	7b7b      	ldrb	r3, [r7, #13]
 800d88c:	2bff      	cmp	r3, #255	; 0xff
 800d88e:	f000 8174 	beq.w	800db7a <USBD_StdEPReq+0x32e>
 800d892:	7b7b      	ldrb	r3, [r7, #13]
 800d894:	2b00      	cmp	r3, #0
 800d896:	f040 8170 	bne.w	800db7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d89a:	7b7a      	ldrb	r2, [r7, #13]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d8a2:	7b7a      	ldrb	r2, [r7, #13]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	32ae      	adds	r2, #174	; 0xae
 800d8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8163 	beq.w	800db7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d8b4:	7b7a      	ldrb	r2, [r7, #13]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	32ae      	adds	r2, #174	; 0xae
 800d8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	4798      	blx	r3
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d8ca:	e156      	b.n	800db7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	785b      	ldrb	r3, [r3, #1]
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d008      	beq.n	800d8e6 <USBD_StdEPReq+0x9a>
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	f300 8145 	bgt.w	800db64 <USBD_StdEPReq+0x318>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 809b 	beq.w	800da16 <USBD_StdEPReq+0x1ca>
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d03c      	beq.n	800d95e <USBD_StdEPReq+0x112>
 800d8e4:	e13e      	b.n	800db64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	d002      	beq.n	800d8f8 <USBD_StdEPReq+0xac>
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d016      	beq.n	800d924 <USBD_StdEPReq+0xd8>
 800d8f6:	e02c      	b.n	800d952 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8f8:	7bbb      	ldrb	r3, [r7, #14]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00d      	beq.n	800d91a <USBD_StdEPReq+0xce>
 800d8fe:	7bbb      	ldrb	r3, [r7, #14]
 800d900:	2b80      	cmp	r3, #128	; 0x80
 800d902:	d00a      	beq.n	800d91a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d904:	7bbb      	ldrb	r3, [r7, #14]
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f00d fda0 	bl	801b44e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d90e:	2180      	movs	r1, #128	; 0x80
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f00d fd9c 	bl	801b44e <USBD_LL_StallEP>
 800d916:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d918:	e020      	b.n	800d95c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fc7a 	bl	800e216 <USBD_CtlError>
              break;
 800d922:	e01b      	b.n	800d95c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	885b      	ldrh	r3, [r3, #2]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10e      	bne.n	800d94a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d92c:	7bbb      	ldrb	r3, [r7, #14]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00b      	beq.n	800d94a <USBD_StdEPReq+0xfe>
 800d932:	7bbb      	ldrb	r3, [r7, #14]
 800d934:	2b80      	cmp	r3, #128	; 0x80
 800d936:	d008      	beq.n	800d94a <USBD_StdEPReq+0xfe>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	88db      	ldrh	r3, [r3, #6]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d940:	7bbb      	ldrb	r3, [r7, #14]
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f00d fd82 	bl	801b44e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fd2e 	bl	800e3ac <USBD_CtlSendStatus>

              break;
 800d950:	e004      	b.n	800d95c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fc5e 	bl	800e216 <USBD_CtlError>
              break;
 800d95a:	bf00      	nop
          }
          break;
 800d95c:	e107      	b.n	800db6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d964:	b2db      	uxtb	r3, r3
 800d966:	2b02      	cmp	r3, #2
 800d968:	d002      	beq.n	800d970 <USBD_StdEPReq+0x124>
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d016      	beq.n	800d99c <USBD_StdEPReq+0x150>
 800d96e:	e04b      	b.n	800da08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00d      	beq.n	800d992 <USBD_StdEPReq+0x146>
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	2b80      	cmp	r3, #128	; 0x80
 800d97a:	d00a      	beq.n	800d992 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f00d fd64 	bl	801b44e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d986:	2180      	movs	r1, #128	; 0x80
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f00d fd60 	bl	801b44e <USBD_LL_StallEP>
 800d98e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d990:	e040      	b.n	800da14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d992:	6839      	ldr	r1, [r7, #0]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 fc3e 	bl	800e216 <USBD_CtlError>
              break;
 800d99a:	e03b      	b.n	800da14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	885b      	ldrh	r3, [r3, #2]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d136      	bne.n	800da12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d9a4:	7bbb      	ldrb	r3, [r7, #14]
 800d9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d004      	beq.n	800d9b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d9ae:	7bbb      	ldrb	r3, [r7, #14]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f00d fd6a 	bl	801b48c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fcf7 	bl	800e3ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fde1 	bl	800d58a <USBD_CoreFindEP>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9cc:	7b7b      	ldrb	r3, [r7, #13]
 800d9ce:	2bff      	cmp	r3, #255	; 0xff
 800d9d0:	d01f      	beq.n	800da12 <USBD_StdEPReq+0x1c6>
 800d9d2:	7b7b      	ldrb	r3, [r7, #13]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d11c      	bne.n	800da12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d9d8:	7b7a      	ldrb	r2, [r7, #13]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d9e0:	7b7a      	ldrb	r2, [r7, #13]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	32ae      	adds	r2, #174	; 0xae
 800d9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d010      	beq.n	800da12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d9f0:	7b7a      	ldrb	r2, [r7, #13]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	32ae      	adds	r2, #174	; 0xae
 800d9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	4798      	blx	r3
 800da02:	4603      	mov	r3, r0
 800da04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800da06:	e004      	b.n	800da12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fc03 	bl	800e216 <USBD_CtlError>
              break;
 800da10:	e000      	b.n	800da14 <USBD_StdEPReq+0x1c8>
              break;
 800da12:	bf00      	nop
          }
          break;
 800da14:	e0ab      	b.n	800db6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d002      	beq.n	800da28 <USBD_StdEPReq+0x1dc>
 800da22:	2b03      	cmp	r3, #3
 800da24:	d032      	beq.n	800da8c <USBD_StdEPReq+0x240>
 800da26:	e097      	b.n	800db58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d007      	beq.n	800da3e <USBD_StdEPReq+0x1f2>
 800da2e:	7bbb      	ldrb	r3, [r7, #14]
 800da30:	2b80      	cmp	r3, #128	; 0x80
 800da32:	d004      	beq.n	800da3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800da34:	6839      	ldr	r1, [r7, #0]
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 fbed 	bl	800e216 <USBD_CtlError>
                break;
 800da3c:	e091      	b.n	800db62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da42:	2b00      	cmp	r3, #0
 800da44:	da0b      	bge.n	800da5e <USBD_StdEPReq+0x212>
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da4c:	4613      	mov	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	3310      	adds	r3, #16
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	4413      	add	r3, r2
 800da5a:	3304      	adds	r3, #4
 800da5c:	e00b      	b.n	800da76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	4413      	add	r3, r2
 800da74:	3304      	adds	r3, #4
 800da76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2202      	movs	r2, #2
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fc37 	bl	800e2f8 <USBD_CtlSendData>
              break;
 800da8a:	e06a      	b.n	800db62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800da8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da90:	2b00      	cmp	r3, #0
 800da92:	da11      	bge.n	800dab8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da94:	7bbb      	ldrb	r3, [r7, #14]
 800da96:	f003 020f 	and.w	r2, r3, #15
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	440b      	add	r3, r1
 800daa6:	3324      	adds	r3, #36	; 0x24
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d117      	bne.n	800dade <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fbb0 	bl	800e216 <USBD_CtlError>
                  break;
 800dab6:	e054      	b.n	800db62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	f003 020f 	and.w	r2, r3, #15
 800dabe:	6879      	ldr	r1, [r7, #4]
 800dac0:	4613      	mov	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	4413      	add	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	440b      	add	r3, r1
 800daca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dace:	881b      	ldrh	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 fb9d 	bl	800e216 <USBD_CtlError>
                  break;
 800dadc:	e041      	b.n	800db62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	da0b      	bge.n	800dafe <USBD_StdEPReq+0x2b2>
 800dae6:	7bbb      	ldrb	r3, [r7, #14]
 800dae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800daec:	4613      	mov	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	3310      	adds	r3, #16
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	4413      	add	r3, r2
 800dafa:	3304      	adds	r3, #4
 800dafc:	e00b      	b.n	800db16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dafe:	7bbb      	ldrb	r3, [r7, #14]
 800db00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	4413      	add	r3, r2
 800db14:	3304      	adds	r3, #4
 800db16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db18:	7bbb      	ldrb	r3, [r7, #14]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <USBD_StdEPReq+0x2d8>
 800db1e:	7bbb      	ldrb	r3, [r7, #14]
 800db20:	2b80      	cmp	r3, #128	; 0x80
 800db22:	d103      	bne.n	800db2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e00e      	b.n	800db4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f00d fcca 	bl	801b4ca <USBD_LL_IsStallEP>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d003      	beq.n	800db44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2201      	movs	r2, #1
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	e002      	b.n	800db4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2200      	movs	r2, #0
 800db48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2202      	movs	r2, #2
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fbd1 	bl	800e2f8 <USBD_CtlSendData>
              break;
 800db56:	e004      	b.n	800db62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800db58:	6839      	ldr	r1, [r7, #0]
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 fb5b 	bl	800e216 <USBD_CtlError>
              break;
 800db60:	bf00      	nop
          }
          break;
 800db62:	e004      	b.n	800db6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fb55 	bl	800e216 <USBD_CtlError>
          break;
 800db6c:	bf00      	nop
      }
      break;
 800db6e:	e005      	b.n	800db7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fb4f 	bl	800e216 <USBD_CtlError>
      break;
 800db78:	e000      	b.n	800db7c <USBD_StdEPReq+0x330>
      break;
 800db7a:	bf00      	nop
  }

  return ret;
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
	...

0800db88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db92:	2300      	movs	r3, #0
 800db94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800db9a:	2300      	movs	r3, #0
 800db9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	885b      	ldrh	r3, [r3, #2]
 800dba2:	0a1b      	lsrs	r3, r3, #8
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	3b01      	subs	r3, #1
 800dba8:	2b06      	cmp	r3, #6
 800dbaa:	f200 8128 	bhi.w	800ddfe <USBD_GetDescriptor+0x276>
 800dbae:	a201      	add	r2, pc, #4	; (adr r2, 800dbb4 <USBD_GetDescriptor+0x2c>)
 800dbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb4:	0800dbd1 	.word	0x0800dbd1
 800dbb8:	0800dbe9 	.word	0x0800dbe9
 800dbbc:	0800dc29 	.word	0x0800dc29
 800dbc0:	0800ddff 	.word	0x0800ddff
 800dbc4:	0800ddff 	.word	0x0800ddff
 800dbc8:	0800dd9f 	.word	0x0800dd9f
 800dbcc:	0800ddcb 	.word	0x0800ddcb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	7c12      	ldrb	r2, [r2, #16]
 800dbdc:	f107 0108 	add.w	r1, r7, #8
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	4798      	blx	r3
 800dbe4:	60f8      	str	r0, [r7, #12]
      break;
 800dbe6:	e112      	b.n	800de0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7c1b      	ldrb	r3, [r3, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10d      	bne.n	800dc0c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf8:	f107 0208 	add.w	r2, r7, #8
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	4798      	blx	r3
 800dc00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3301      	adds	r3, #1
 800dc06:	2202      	movs	r2, #2
 800dc08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc0a:	e100      	b.n	800de0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	f107 0208 	add.w	r2, r7, #8
 800dc18:	4610      	mov	r0, r2
 800dc1a:	4798      	blx	r3
 800dc1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3301      	adds	r3, #1
 800dc22:	2202      	movs	r2, #2
 800dc24:	701a      	strb	r2, [r3, #0]
      break;
 800dc26:	e0f2      	b.n	800de0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	885b      	ldrh	r3, [r3, #2]
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b05      	cmp	r3, #5
 800dc30:	f200 80ac 	bhi.w	800dd8c <USBD_GetDescriptor+0x204>
 800dc34:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <USBD_GetDescriptor+0xb4>)
 800dc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3a:	bf00      	nop
 800dc3c:	0800dc55 	.word	0x0800dc55
 800dc40:	0800dc89 	.word	0x0800dc89
 800dc44:	0800dcbd 	.word	0x0800dcbd
 800dc48:	0800dcf1 	.word	0x0800dcf1
 800dc4c:	0800dd25 	.word	0x0800dd25
 800dc50:	0800dd59 	.word	0x0800dd59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00b      	beq.n	800dc78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	7c12      	ldrb	r2, [r2, #16]
 800dc6c:	f107 0108 	add.w	r1, r7, #8
 800dc70:	4610      	mov	r0, r2
 800dc72:	4798      	blx	r3
 800dc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc76:	e091      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 facb 	bl	800e216 <USBD_CtlError>
            err++;
 800dc80:	7afb      	ldrb	r3, [r7, #11]
 800dc82:	3301      	adds	r3, #1
 800dc84:	72fb      	strb	r3, [r7, #11]
          break;
 800dc86:	e089      	b.n	800dd9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00b      	beq.n	800dcac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	7c12      	ldrb	r2, [r2, #16]
 800dca0:	f107 0108 	add.w	r1, r7, #8
 800dca4:	4610      	mov	r0, r2
 800dca6:	4798      	blx	r3
 800dca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcaa:	e077      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fab1 	bl	800e216 <USBD_CtlError>
            err++;
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800dcba:	e06f      	b.n	800dd9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00b      	beq.n	800dce0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	7c12      	ldrb	r2, [r2, #16]
 800dcd4:	f107 0108 	add.w	r1, r7, #8
 800dcd8:	4610      	mov	r0, r2
 800dcda:	4798      	blx	r3
 800dcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcde:	e05d      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fa97 	bl	800e216 <USBD_CtlError>
            err++;
 800dce8:	7afb      	ldrb	r3, [r7, #11]
 800dcea:	3301      	adds	r3, #1
 800dcec:	72fb      	strb	r3, [r7, #11]
          break;
 800dcee:	e055      	b.n	800dd9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	7c12      	ldrb	r2, [r2, #16]
 800dd08:	f107 0108 	add.w	r1, r7, #8
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	4798      	blx	r3
 800dd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd12:	e043      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd14:	6839      	ldr	r1, [r7, #0]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fa7d 	bl	800e216 <USBD_CtlError>
            err++;
 800dd1c:	7afb      	ldrb	r3, [r7, #11]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	72fb      	strb	r3, [r7, #11]
          break;
 800dd22:	e03b      	b.n	800dd9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	7c12      	ldrb	r2, [r2, #16]
 800dd3c:	f107 0108 	add.w	r1, r7, #8
 800dd40:	4610      	mov	r0, r2
 800dd42:	4798      	blx	r3
 800dd44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd46:	e029      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fa63 	bl	800e216 <USBD_CtlError>
            err++;
 800dd50:	7afb      	ldrb	r3, [r7, #11]
 800dd52:	3301      	adds	r3, #1
 800dd54:	72fb      	strb	r3, [r7, #11]
          break;
 800dd56:	e021      	b.n	800dd9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00b      	beq.n	800dd7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	7c12      	ldrb	r2, [r2, #16]
 800dd70:	f107 0108 	add.w	r1, r7, #8
 800dd74:	4610      	mov	r0, r2
 800dd76:	4798      	blx	r3
 800dd78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd7a:	e00f      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd7c:	6839      	ldr	r1, [r7, #0]
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 fa49 	bl	800e216 <USBD_CtlError>
            err++;
 800dd84:	7afb      	ldrb	r3, [r7, #11]
 800dd86:	3301      	adds	r3, #1
 800dd88:	72fb      	strb	r3, [r7, #11]
          break;
 800dd8a:	e007      	b.n	800dd9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fa41 	bl	800e216 <USBD_CtlError>
          err++;
 800dd94:	7afb      	ldrb	r3, [r7, #11]
 800dd96:	3301      	adds	r3, #1
 800dd98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dd9a:	bf00      	nop
      }
      break;
 800dd9c:	e037      	b.n	800de0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	7c1b      	ldrb	r3, [r3, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d109      	bne.n	800ddba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddae:	f107 0208 	add.w	r2, r7, #8
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	4798      	blx	r3
 800ddb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ddb8:	e029      	b.n	800de0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fa2a 	bl	800e216 <USBD_CtlError>
        err++;
 800ddc2:	7afb      	ldrb	r3, [r7, #11]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	72fb      	strb	r3, [r7, #11]
      break;
 800ddc8:	e021      	b.n	800de0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	7c1b      	ldrb	r3, [r3, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10d      	bne.n	800ddee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddda:	f107 0208 	add.w	r2, r7, #8
 800ddde:	4610      	mov	r0, r2
 800dde0:	4798      	blx	r3
 800dde2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3301      	adds	r3, #1
 800dde8:	2207      	movs	r2, #7
 800ddea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ddec:	e00f      	b.n	800de0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fa10 	bl	800e216 <USBD_CtlError>
        err++;
 800ddf6:	7afb      	ldrb	r3, [r7, #11]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	72fb      	strb	r3, [r7, #11]
      break;
 800ddfc:	e007      	b.n	800de0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fa08 	bl	800e216 <USBD_CtlError>
      err++;
 800de06:	7afb      	ldrb	r3, [r7, #11]
 800de08:	3301      	adds	r3, #1
 800de0a:	72fb      	strb	r3, [r7, #11]
      break;
 800de0c:	bf00      	nop
  }

  if (err != 0U)
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d11e      	bne.n	800de52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	88db      	ldrh	r3, [r3, #6]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d016      	beq.n	800de4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800de1c:	893b      	ldrh	r3, [r7, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00e      	beq.n	800de40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	88da      	ldrh	r2, [r3, #6]
 800de26:	893b      	ldrh	r3, [r7, #8]
 800de28:	4293      	cmp	r3, r2
 800de2a:	bf28      	it	cs
 800de2c:	4613      	movcs	r3, r2
 800de2e:	b29b      	uxth	r3, r3
 800de30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de32:	893b      	ldrh	r3, [r7, #8]
 800de34:	461a      	mov	r2, r3
 800de36:	68f9      	ldr	r1, [r7, #12]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fa5d 	bl	800e2f8 <USBD_CtlSendData>
 800de3e:	e009      	b.n	800de54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f9e7 	bl	800e216 <USBD_CtlError>
 800de48:	e004      	b.n	800de54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 faae 	bl	800e3ac <USBD_CtlSendStatus>
 800de50:	e000      	b.n	800de54 <USBD_GetDescriptor+0x2cc>
    return;
 800de52:	bf00      	nop
  }
}
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop

0800de5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	889b      	ldrh	r3, [r3, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d131      	bne.n	800ded2 <USBD_SetAddress+0x76>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d12d      	bne.n	800ded2 <USBD_SetAddress+0x76>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	885b      	ldrh	r3, [r3, #2]
 800de7a:	2b7f      	cmp	r3, #127	; 0x7f
 800de7c:	d829      	bhi.n	800ded2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	885b      	ldrh	r3, [r3, #2]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b03      	cmp	r3, #3
 800de94:	d104      	bne.n	800dea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800de96:	6839      	ldr	r1, [r7, #0]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f9bc 	bl	800e216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9e:	e01d      	b.n	800dedc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7bfa      	ldrb	r2, [r7, #15]
 800dea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f00d fb38 	bl	801b522 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fa7a 	bl	800e3ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800deb8:	7bfb      	ldrb	r3, [r7, #15]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d004      	beq.n	800dec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2202      	movs	r2, #2
 800dec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dec6:	e009      	b.n	800dedc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ded0:	e004      	b.n	800dedc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f99e 	bl	800e216 <USBD_CtlError>
  }
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	885b      	ldrh	r3, [r3, #2]
 800def6:	b2da      	uxtb	r2, r3
 800def8:	4b4e      	ldr	r3, [pc, #312]	; (800e034 <USBD_SetConfig+0x150>)
 800defa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800defc:	4b4d      	ldr	r3, [pc, #308]	; (800e034 <USBD_SetConfig+0x150>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d905      	bls.n	800df10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df04:	6839      	ldr	r1, [r7, #0]
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f985 	bl	800e216 <USBD_CtlError>
    return USBD_FAIL;
 800df0c:	2303      	movs	r3, #3
 800df0e:	e08c      	b.n	800e02a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d002      	beq.n	800df22 <USBD_SetConfig+0x3e>
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d029      	beq.n	800df74 <USBD_SetConfig+0x90>
 800df20:	e075      	b.n	800e00e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df22:	4b44      	ldr	r3, [pc, #272]	; (800e034 <USBD_SetConfig+0x150>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d020      	beq.n	800df6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800df2a:	4b42      	ldr	r3, [pc, #264]	; (800e034 <USBD_SetConfig+0x150>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df34:	4b3f      	ldr	r3, [pc, #252]	; (800e034 <USBD_SetConfig+0x150>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7fe ffe0 	bl	800cf00 <USBD_SetClassConfig>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d008      	beq.n	800df5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f962 	bl	800e216 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2202      	movs	r2, #2
 800df56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df5a:	e065      	b.n	800e028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fa25 	bl	800e3ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2203      	movs	r2, #3
 800df66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df6a:	e05d      	b.n	800e028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fa1d 	bl	800e3ac <USBD_CtlSendStatus>
      break;
 800df72:	e059      	b.n	800e028 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800df74:	4b2f      	ldr	r3, [pc, #188]	; (800e034 <USBD_SetConfig+0x150>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d112      	bne.n	800dfa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2202      	movs	r2, #2
 800df80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800df84:	4b2b      	ldr	r3, [pc, #172]	; (800e034 <USBD_SetConfig+0x150>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	461a      	mov	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df8e:	4b29      	ldr	r3, [pc, #164]	; (800e034 <USBD_SetConfig+0x150>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7fe ffcf 	bl	800cf38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fa06 	bl	800e3ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfa0:	e042      	b.n	800e028 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dfa2:	4b24      	ldr	r3, [pc, #144]	; (800e034 <USBD_SetConfig+0x150>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d02a      	beq.n	800e006 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7fe ffbd 	bl	800cf38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dfbe:	4b1d      	ldr	r3, [pc, #116]	; (800e034 <USBD_SetConfig+0x150>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfc8:	4b1a      	ldr	r3, [pc, #104]	; (800e034 <USBD_SetConfig+0x150>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7fe ff96 	bl	800cf00 <USBD_SetClassConfig>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00f      	beq.n	800dffe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f918 	bl	800e216 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7fe ffa2 	bl	800cf38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dffc:	e014      	b.n	800e028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f9d4 	bl	800e3ac <USBD_CtlSendStatus>
      break;
 800e004:	e010      	b.n	800e028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 f9d0 	bl	800e3ac <USBD_CtlSendStatus>
      break;
 800e00c:	e00c      	b.n	800e028 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f900 	bl	800e216 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e016:	4b07      	ldr	r3, [pc, #28]	; (800e034 <USBD_SetConfig+0x150>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	4619      	mov	r1, r3
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7fe ff8b 	bl	800cf38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e022:	2303      	movs	r3, #3
 800e024:	73fb      	strb	r3, [r7, #15]
      break;
 800e026:	bf00      	nop
  }

  return ret;
 800e028:	7bfb      	ldrb	r3, [r7, #15]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	200054b0 	.word	0x200054b0

0800e038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	88db      	ldrh	r3, [r3, #6]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d004      	beq.n	800e054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f8e2 	bl	800e216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e052:	e023      	b.n	800e09c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	dc02      	bgt.n	800e066 <USBD_GetConfig+0x2e>
 800e060:	2b00      	cmp	r3, #0
 800e062:	dc03      	bgt.n	800e06c <USBD_GetConfig+0x34>
 800e064:	e015      	b.n	800e092 <USBD_GetConfig+0x5a>
 800e066:	2b03      	cmp	r3, #3
 800e068:	d00b      	beq.n	800e082 <USBD_GetConfig+0x4a>
 800e06a:	e012      	b.n	800e092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	3308      	adds	r3, #8
 800e076:	2201      	movs	r2, #1
 800e078:	4619      	mov	r1, r3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f93c 	bl	800e2f8 <USBD_CtlSendData>
        break;
 800e080:	e00c      	b.n	800e09c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3304      	adds	r3, #4
 800e086:	2201      	movs	r2, #1
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f934 	bl	800e2f8 <USBD_CtlSendData>
        break;
 800e090:	e004      	b.n	800e09c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f8be 	bl	800e216 <USBD_CtlError>
        break;
 800e09a:	bf00      	nop
}
 800e09c:	bf00      	nop
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d81e      	bhi.n	800e0fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	88db      	ldrh	r3, [r3, #6]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d004      	beq.n	800e0ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f8a5 	bl	800e216 <USBD_CtlError>
        break;
 800e0cc:	e01a      	b.n	800e104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d005      	beq.n	800e0ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f043 0202 	orr.w	r2, r3, #2
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	330c      	adds	r3, #12
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f900 	bl	800e2f8 <USBD_CtlSendData>
      break;
 800e0f8:	e004      	b.n	800e104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f88a 	bl	800e216 <USBD_CtlError>
      break;
 800e102:	bf00      	nop
  }
}
 800e104:	bf00      	nop
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	885b      	ldrh	r3, [r3, #2]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d107      	bne.n	800e12e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f940 	bl	800e3ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e12c:	e013      	b.n	800e156 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	885b      	ldrh	r3, [r3, #2]
 800e132:	2b02      	cmp	r3, #2
 800e134:	d10b      	bne.n	800e14e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	889b      	ldrh	r3, [r3, #4]
 800e13a:	0a1b      	lsrs	r3, r3, #8
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f930 	bl	800e3ac <USBD_CtlSendStatus>
}
 800e14c:	e003      	b.n	800e156 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f860 	bl	800e216 <USBD_CtlError>
}
 800e156:	bf00      	nop
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b082      	sub	sp, #8
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	3b01      	subs	r3, #1
 800e172:	2b02      	cmp	r3, #2
 800e174:	d80b      	bhi.n	800e18e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	885b      	ldrh	r3, [r3, #2]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d10c      	bne.n	800e198 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 f910 	bl	800e3ac <USBD_CtlSendStatus>
      }
      break;
 800e18c:	e004      	b.n	800e198 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f840 	bl	800e216 <USBD_CtlError>
      break;
 800e196:	e000      	b.n	800e19a <USBD_ClrFeature+0x3c>
      break;
 800e198:	bf00      	nop
  }
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b084      	sub	sp, #16
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	781a      	ldrb	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	781a      	ldrb	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7ff fa40 	bl	800d652 <SWAPBYTE>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff fa33 	bl	800d652 <SWAPBYTE>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff fa26 	bl	800d652 <SWAPBYTE>
 800e206:	4603      	mov	r3, r0
 800e208:	461a      	mov	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	80da      	strh	r2, [r3, #6]
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e220:	2180      	movs	r1, #128	; 0x80
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f00d f913 	bl	801b44e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e228:	2100      	movs	r1, #0
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f00d f90f 	bl	801b44e <USBD_LL_StallEP>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d036      	beq.n	800e2bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e252:	6938      	ldr	r0, [r7, #16]
 800e254:	f000 f836 	bl	800e2c4 <USBD_GetLen>
 800e258:	4603      	mov	r3, r0
 800e25a:	3301      	adds	r3, #1
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	b29a      	uxth	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e266:	7dfb      	ldrb	r3, [r7, #23]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	4413      	add	r3, r2
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	7812      	ldrb	r2, [r2, #0]
 800e270:	701a      	strb	r2, [r3, #0]
  idx++;
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	3301      	adds	r3, #1
 800e276:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e278:	7dfb      	ldrb	r3, [r7, #23]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	2203      	movs	r2, #3
 800e280:	701a      	strb	r2, [r3, #0]
  idx++;
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	3301      	adds	r3, #1
 800e286:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e288:	e013      	b.n	800e2b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	4413      	add	r3, r2
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	7812      	ldrb	r2, [r2, #0]
 800e294:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	3301      	adds	r3, #1
 800e29a:	613b      	str	r3, [r7, #16]
    idx++;
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1e7      	bne.n	800e28a <USBD_GetString+0x52>
 800e2ba:	e000      	b.n	800e2be <USBD_GetString+0x86>
    return;
 800e2bc:	bf00      	nop
  }
}
 800e2be:	3718      	adds	r7, #24
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e2d4:	e005      	b.n	800e2e2 <USBD_GetLen+0x1e>
  {
    len++;
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1f5      	bne.n	800e2d6 <USBD_GetLen+0x12>
  }

  return len;
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2202      	movs	r2, #2
 800e308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	2100      	movs	r1, #0
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f00d f91e 	bl	801b560 <USBD_LL_Transmit>

  return USBD_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	60f8      	str	r0, [r7, #12]
 800e336:	60b9      	str	r1, [r7, #8]
 800e338:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	2100      	movs	r1, #0
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f00d f90d 	bl	801b560 <USBD_LL_Transmit>

  return USBD_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2203      	movs	r2, #3
 800e360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	2100      	movs	r1, #0
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f00d f911 	bl	801b5a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	60b9      	str	r1, [r7, #8]
 800e394:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	2100      	movs	r1, #0
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f00d f900 	bl	801b5a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2204      	movs	r2, #4
 800e3b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3bc:	2300      	movs	r3, #0
 800e3be:	2200      	movs	r2, #0
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f00d f8cc 	bl	801b560 <USBD_LL_Transmit>

  return USBD_OK;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2205      	movs	r2, #5
 800e3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f00d f8da 	bl	801b5a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e402:	79fb      	ldrb	r3, [r7, #7]
 800e404:	4a08      	ldr	r2, [pc, #32]	; (800e428 <disk_status+0x30>)
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	79fa      	ldrb	r2, [r7, #7]
 800e410:	4905      	ldr	r1, [pc, #20]	; (800e428 <disk_status+0x30>)
 800e412:	440a      	add	r2, r1
 800e414:	7a12      	ldrb	r2, [r2, #8]
 800e416:	4610      	mov	r0, r2
 800e418:	4798      	blx	r3
 800e41a:	4603      	mov	r3, r0
 800e41c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	200054dc 	.word	0x200054dc

0800e42c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	4603      	mov	r3, r0
 800e434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e436:	2300      	movs	r3, #0
 800e438:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e43a:	79fb      	ldrb	r3, [r7, #7]
 800e43c:	4a0e      	ldr	r2, [pc, #56]	; (800e478 <disk_initialize+0x4c>)
 800e43e:	5cd3      	ldrb	r3, [r2, r3]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d114      	bne.n	800e46e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e444:	79fb      	ldrb	r3, [r7, #7]
 800e446:	4a0c      	ldr	r2, [pc, #48]	; (800e478 <disk_initialize+0x4c>)
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4413      	add	r3, r2
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	79fa      	ldrb	r2, [r7, #7]
 800e452:	4909      	ldr	r1, [pc, #36]	; (800e478 <disk_initialize+0x4c>)
 800e454:	440a      	add	r2, r1
 800e456:	7a12      	ldrb	r2, [r2, #8]
 800e458:	4610      	mov	r0, r2
 800e45a:	4798      	blx	r3
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d103      	bne.n	800e46e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	4a03      	ldr	r2, [pc, #12]	; (800e478 <disk_initialize+0x4c>)
 800e46a:	2101      	movs	r1, #1
 800e46c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	200054dc 	.word	0x200054dc

0800e47c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	607a      	str	r2, [r7, #4]
 800e486:	603b      	str	r3, [r7, #0]
 800e488:	4603      	mov	r3, r0
 800e48a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	4a0a      	ldr	r2, [pc, #40]	; (800e4b8 <disk_read+0x3c>)
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4413      	add	r3, r2
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	689c      	ldr	r4, [r3, #8]
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	4a07      	ldr	r2, [pc, #28]	; (800e4b8 <disk_read+0x3c>)
 800e49c:	4413      	add	r3, r2
 800e49e:	7a18      	ldrb	r0, [r3, #8]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	68b9      	ldr	r1, [r7, #8]
 800e4a6:	47a0      	blx	r4
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200054dc 	.word	0x200054dc

0800e4bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4bc:	b590      	push	{r4, r7, lr}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	4a0a      	ldr	r2, [pc, #40]	; (800e4f8 <disk_write+0x3c>)
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	68dc      	ldr	r4, [r3, #12]
 800e4d8:	7bfb      	ldrb	r3, [r7, #15]
 800e4da:	4a07      	ldr	r2, [pc, #28]	; (800e4f8 <disk_write+0x3c>)
 800e4dc:	4413      	add	r3, r2
 800e4de:	7a18      	ldrb	r0, [r3, #8]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	68b9      	ldr	r1, [r7, #8]
 800e4e6:	47a0      	blx	r4
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd90      	pop	{r4, r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	200054dc 	.word	0x200054dc

0800e4fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	603a      	str	r2, [r7, #0]
 800e506:	71fb      	strb	r3, [r7, #7]
 800e508:	460b      	mov	r3, r1
 800e50a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	4a09      	ldr	r2, [pc, #36]	; (800e534 <disk_ioctl+0x38>)
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	79fa      	ldrb	r2, [r7, #7]
 800e51a:	4906      	ldr	r1, [pc, #24]	; (800e534 <disk_ioctl+0x38>)
 800e51c:	440a      	add	r2, r1
 800e51e:	7a10      	ldrb	r0, [r2, #8]
 800e520:	79b9      	ldrb	r1, [r7, #6]
 800e522:	683a      	ldr	r2, [r7, #0]
 800e524:	4798      	blx	r3
 800e526:	4603      	mov	r3, r0
 800e528:	73fb      	strb	r3, [r7, #15]
  return res;
 800e52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	200054dc 	.word	0x200054dc

0800e538 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	3301      	adds	r3, #1
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e548:	89fb      	ldrh	r3, [r7, #14]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	b21a      	sxth	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	b21b      	sxth	r3, r3
 800e554:	4313      	orrs	r3, r2
 800e556:	b21b      	sxth	r3, r3
 800e558:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e55a:	89fb      	ldrh	r3, [r7, #14]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3303      	adds	r3, #3
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	021b      	lsls	r3, r3, #8
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	3202      	adds	r2, #2
 800e580:	7812      	ldrb	r2, [r2, #0]
 800e582:	4313      	orrs	r3, r2
 800e584:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	021b      	lsls	r3, r3, #8
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	3201      	adds	r2, #1
 800e58e:	7812      	ldrb	r2, [r2, #0]
 800e590:	4313      	orrs	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	021b      	lsls	r3, r3, #8
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	7812      	ldrb	r2, [r2, #0]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b083      	sub	sp, #12
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	887a      	ldrh	r2, [r7, #2]
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	701a      	strb	r2, [r3, #0]
 800e5c6:	887b      	ldrh	r3, [r7, #2]
 800e5c8:	0a1b      	lsrs	r3, r3, #8
 800e5ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	1c5a      	adds	r2, r3, #1
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	887a      	ldrh	r2, [r7, #2]
 800e5d4:	b2d2      	uxtb	r2, r2
 800e5d6:	701a      	strb	r2, [r3, #0]
}
 800e5d8:	bf00      	nop
 800e5da:	370c      	adds	r7, #12
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	b2d2      	uxtb	r2, r2
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	0a1b      	lsrs	r3, r3, #8
 800e5fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	607a      	str	r2, [r7, #4]
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	b2d2      	uxtb	r2, r2
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	0a1b      	lsrs	r3, r3, #8
 800e610:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	0a1b      	lsrs	r3, r3, #8
 800e622:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	607a      	str	r2, [r7, #4]
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	b2d2      	uxtb	r2, r2
 800e62e:	701a      	strb	r2, [r3, #0]
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00d      	beq.n	800e672 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	1c53      	adds	r3, r2, #1
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	1c59      	adds	r1, r3, #1
 800e660:	6179      	str	r1, [r7, #20]
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3b01      	subs	r3, #1
 800e66a:	607b      	str	r3, [r7, #4]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1f1      	bne.n	800e656 <mem_cpy+0x1a>
	}
}
 800e672:	bf00      	nop
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e67e:	b480      	push	{r7}
 800e680:	b087      	sub	sp, #28
 800e682:	af00      	add	r7, sp, #0
 800e684:	60f8      	str	r0, [r7, #12]
 800e686:	60b9      	str	r1, [r7, #8]
 800e688:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	617a      	str	r2, [r7, #20]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	b2d2      	uxtb	r2, r2
 800e698:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3b01      	subs	r3, #1
 800e69e:	607b      	str	r3, [r7, #4]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1f3      	bne.n	800e68e <mem_set+0x10>
}
 800e6a6:	bf00      	nop
 800e6a8:	bf00      	nop
 800e6aa:	371c      	adds	r7, #28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6b4:	b480      	push	{r7}
 800e6b6:	b089      	sub	sp, #36	; 0x24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	61fb      	str	r3, [r7, #28]
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	61fa      	str	r2, [r7, #28]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	61ba      	str	r2, [r7, #24]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	1acb      	subs	r3, r1, r3
 800e6e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	607b      	str	r3, [r7, #4]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d002      	beq.n	800e6f4 <mem_cmp+0x40>
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d0eb      	beq.n	800e6cc <mem_cmp+0x18>

	return r;
 800e6f4:	697b      	ldr	r3, [r7, #20]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3724      	adds	r7, #36	; 0x24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e70c:	e002      	b.n	800e714 <chk_chr+0x12>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	3301      	adds	r3, #1
 800e712:	607b      	str	r3, [r7, #4]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d005      	beq.n	800e728 <chk_chr+0x26>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	4293      	cmp	r3, r2
 800e726:	d1f2      	bne.n	800e70e <chk_chr+0xc>
	return *str;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	781b      	ldrb	r3, [r3, #0]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e742:	2300      	movs	r3, #0
 800e744:	60bb      	str	r3, [r7, #8]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	60fb      	str	r3, [r7, #12]
 800e74a:	e029      	b.n	800e7a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e74c:	4a27      	ldr	r2, [pc, #156]	; (800e7ec <chk_lock+0xb4>)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	011b      	lsls	r3, r3, #4
 800e752:	4413      	add	r3, r2
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d01d      	beq.n	800e796 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e75a:	4a24      	ldr	r2, [pc, #144]	; (800e7ec <chk_lock+0xb4>)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	011b      	lsls	r3, r3, #4
 800e760:	4413      	add	r3, r2
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d116      	bne.n	800e79a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e76c:	4a1f      	ldr	r2, [pc, #124]	; (800e7ec <chk_lock+0xb4>)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	011b      	lsls	r3, r3, #4
 800e772:	4413      	add	r3, r2
 800e774:	3304      	adds	r3, #4
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d10c      	bne.n	800e79a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e780:	4a1a      	ldr	r2, [pc, #104]	; (800e7ec <chk_lock+0xb4>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	3308      	adds	r3, #8
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e790:	429a      	cmp	r2, r3
 800e792:	d102      	bne.n	800e79a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e794:	e007      	b.n	800e7a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e796:	2301      	movs	r3, #1
 800e798:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3301      	adds	r3, #1
 800e79e:	60fb      	str	r3, [r7, #12]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d9d2      	bls.n	800e74c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d109      	bne.n	800e7c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d102      	bne.n	800e7b8 <chk_lock+0x80>
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d101      	bne.n	800e7bc <chk_lock+0x84>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e010      	b.n	800e7de <chk_lock+0xa6>
 800e7bc:	2312      	movs	r3, #18
 800e7be:	e00e      	b.n	800e7de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d108      	bne.n	800e7d8 <chk_lock+0xa0>
 800e7c6:	4a09      	ldr	r2, [pc, #36]	; (800e7ec <chk_lock+0xb4>)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	011b      	lsls	r3, r3, #4
 800e7cc:	4413      	add	r3, r2
 800e7ce:	330c      	adds	r3, #12
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7d6:	d101      	bne.n	800e7dc <chk_lock+0xa4>
 800e7d8:	2310      	movs	r3, #16
 800e7da:	e000      	b.n	800e7de <chk_lock+0xa6>
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3714      	adds	r7, #20
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	200054bc 	.word	0x200054bc

0800e7f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	607b      	str	r3, [r7, #4]
 800e7fa:	e002      	b.n	800e802 <enq_lock+0x12>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	3301      	adds	r3, #1
 800e800:	607b      	str	r3, [r7, #4]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d806      	bhi.n	800e816 <enq_lock+0x26>
 800e808:	4a09      	ldr	r2, [pc, #36]	; (800e830 <enq_lock+0x40>)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	011b      	lsls	r3, r3, #4
 800e80e:	4413      	add	r3, r2
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1f2      	bne.n	800e7fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b02      	cmp	r3, #2
 800e81a:	bf14      	ite	ne
 800e81c:	2301      	movne	r3, #1
 800e81e:	2300      	moveq	r3, #0
 800e820:	b2db      	uxtb	r3, r3
}
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	200054bc 	.word	0x200054bc

0800e834 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e83e:	2300      	movs	r3, #0
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	e01f      	b.n	800e884 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e844:	4a41      	ldr	r2, [pc, #260]	; (800e94c <inc_lock+0x118>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	4413      	add	r3, r2
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	429a      	cmp	r2, r3
 800e854:	d113      	bne.n	800e87e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e856:	4a3d      	ldr	r2, [pc, #244]	; (800e94c <inc_lock+0x118>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	011b      	lsls	r3, r3, #4
 800e85c:	4413      	add	r3, r2
 800e85e:	3304      	adds	r3, #4
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e866:	429a      	cmp	r2, r3
 800e868:	d109      	bne.n	800e87e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e86a:	4a38      	ldr	r2, [pc, #224]	; (800e94c <inc_lock+0x118>)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	011b      	lsls	r3, r3, #4
 800e870:	4413      	add	r3, r2
 800e872:	3308      	adds	r3, #8
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d006      	beq.n	800e88c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3301      	adds	r3, #1
 800e882:	60fb      	str	r3, [r7, #12]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d9dc      	bls.n	800e844 <inc_lock+0x10>
 800e88a:	e000      	b.n	800e88e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e88c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d132      	bne.n	800e8fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e894:	2300      	movs	r3, #0
 800e896:	60fb      	str	r3, [r7, #12]
 800e898:	e002      	b.n	800e8a0 <inc_lock+0x6c>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	3301      	adds	r3, #1
 800e89e:	60fb      	str	r3, [r7, #12]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d806      	bhi.n	800e8b4 <inc_lock+0x80>
 800e8a6:	4a29      	ldr	r2, [pc, #164]	; (800e94c <inc_lock+0x118>)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	011b      	lsls	r3, r3, #4
 800e8ac:	4413      	add	r3, r2
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1f2      	bne.n	800e89a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d101      	bne.n	800e8be <inc_lock+0x8a>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e040      	b.n	800e940 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	4922      	ldr	r1, [pc, #136]	; (800e94c <inc_lock+0x118>)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	011b      	lsls	r3, r3, #4
 800e8c8:	440b      	add	r3, r1
 800e8ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	689a      	ldr	r2, [r3, #8]
 800e8d0:	491e      	ldr	r1, [pc, #120]	; (800e94c <inc_lock+0x118>)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	011b      	lsls	r3, r3, #4
 800e8d6:	440b      	add	r3, r1
 800e8d8:	3304      	adds	r3, #4
 800e8da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	695a      	ldr	r2, [r3, #20]
 800e8e0:	491a      	ldr	r1, [pc, #104]	; (800e94c <inc_lock+0x118>)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	011b      	lsls	r3, r3, #4
 800e8e6:	440b      	add	r3, r1
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8ec:	4a17      	ldr	r2, [pc, #92]	; (800e94c <inc_lock+0x118>)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	011b      	lsls	r3, r3, #4
 800e8f2:	4413      	add	r3, r2
 800e8f4:	330c      	adds	r3, #12
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d009      	beq.n	800e914 <inc_lock+0xe0>
 800e900:	4a12      	ldr	r2, [pc, #72]	; (800e94c <inc_lock+0x118>)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	011b      	lsls	r3, r3, #4
 800e906:	4413      	add	r3, r2
 800e908:	330c      	adds	r3, #12
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <inc_lock+0xe0>
 800e910:	2300      	movs	r3, #0
 800e912:	e015      	b.n	800e940 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d108      	bne.n	800e92c <inc_lock+0xf8>
 800e91a:	4a0c      	ldr	r2, [pc, #48]	; (800e94c <inc_lock+0x118>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	4413      	add	r3, r2
 800e922:	330c      	adds	r3, #12
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	3301      	adds	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	e001      	b.n	800e930 <inc_lock+0xfc>
 800e92c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e930:	4906      	ldr	r1, [pc, #24]	; (800e94c <inc_lock+0x118>)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	011b      	lsls	r3, r3, #4
 800e936:	440b      	add	r3, r1
 800e938:	330c      	adds	r3, #12
 800e93a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	3301      	adds	r3, #1
}
 800e940:	4618      	mov	r0, r3
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	200054bc 	.word	0x200054bc

0800e950 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	607b      	str	r3, [r7, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d825      	bhi.n	800e9b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800e964:	4a17      	ldr	r2, [pc, #92]	; (800e9c4 <dec_lock+0x74>)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	011b      	lsls	r3, r3, #4
 800e96a:	4413      	add	r3, r2
 800e96c:	330c      	adds	r3, #12
 800e96e:	881b      	ldrh	r3, [r3, #0]
 800e970:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e972:	89fb      	ldrh	r3, [r7, #14]
 800e974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e978:	d101      	bne.n	800e97e <dec_lock+0x2e>
 800e97a:	2300      	movs	r3, #0
 800e97c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e97e:	89fb      	ldrh	r3, [r7, #14]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <dec_lock+0x3a>
 800e984:	89fb      	ldrh	r3, [r7, #14]
 800e986:	3b01      	subs	r3, #1
 800e988:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e98a:	4a0e      	ldr	r2, [pc, #56]	; (800e9c4 <dec_lock+0x74>)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	4413      	add	r3, r2
 800e992:	330c      	adds	r3, #12
 800e994:	89fa      	ldrh	r2, [r7, #14]
 800e996:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d105      	bne.n	800e9aa <dec_lock+0x5a>
 800e99e:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <dec_lock+0x74>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	4413      	add	r3, r2
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	737b      	strb	r3, [r7, #13]
 800e9ae:	e001      	b.n	800e9b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3714      	adds	r7, #20
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	200054bc 	.word	0x200054bc

0800e9c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	e010      	b.n	800e9f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9d6:	4a0d      	ldr	r2, [pc, #52]	; (800ea0c <clear_lock+0x44>)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	011b      	lsls	r3, r3, #4
 800e9dc:	4413      	add	r3, r2
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d105      	bne.n	800e9f2 <clear_lock+0x2a>
 800e9e6:	4a09      	ldr	r2, [pc, #36]	; (800ea0c <clear_lock+0x44>)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	011b      	lsls	r3, r3, #4
 800e9ec:	4413      	add	r3, r2
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d9eb      	bls.n	800e9d6 <clear_lock+0xe>
	}
}
 800e9fe:	bf00      	nop
 800ea00:	bf00      	nop
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	200054bc 	.word	0x200054bc

0800ea10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	78db      	ldrb	r3, [r3, #3]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d034      	beq.n	800ea8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7858      	ldrb	r0, [r3, #1]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea34:	2301      	movs	r3, #1
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	f7ff fd40 	bl	800e4bc <disk_write>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	73fb      	strb	r3, [r7, #15]
 800ea46:	e022      	b.n	800ea8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	1ad2      	subs	r2, r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	699b      	ldr	r3, [r3, #24]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d217      	bcs.n	800ea8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	789b      	ldrb	r3, [r3, #2]
 800ea62:	613b      	str	r3, [r7, #16]
 800ea64:	e010      	b.n	800ea88 <sync_window+0x78>
					wsect += fs->fsize;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7858      	ldrb	r0, [r3, #1]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	f7ff fd1d 	bl	800e4bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	3b01      	subs	r3, #1
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d8eb      	bhi.n	800ea66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d01b      	beq.n	800eae8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ffad 	bl	800ea10 <sync_window>
 800eab6:	4603      	mov	r3, r0
 800eab8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d113      	bne.n	800eae8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7858      	ldrb	r0, [r3, #1]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaca:	2301      	movs	r3, #1
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	f7ff fcd5 	bl	800e47c <disk_read>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d004      	beq.n	800eae2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ead8:	f04f 33ff 	mov.w	r3, #4294967295
 800eadc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eade:	2301      	movs	r3, #1
 800eae0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
	...

0800eaf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff ff87 	bl	800ea10 <sync_window>
 800eb02:	4603      	mov	r3, r0
 800eb04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d158      	bne.n	800ebbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d148      	bne.n	800eba6 <sync_fs+0xb2>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	791b      	ldrb	r3, [r3, #4]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d144      	bne.n	800eba6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3330      	adds	r3, #48	; 0x30
 800eb20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb24:	2100      	movs	r1, #0
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff fda9 	bl	800e67e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3330      	adds	r3, #48	; 0x30
 800eb30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fd38 	bl	800e5ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	3330      	adds	r3, #48	; 0x30
 800eb42:	4921      	ldr	r1, [pc, #132]	; (800ebc8 <sync_fs+0xd4>)
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fd4d 	bl	800e5e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	3330      	adds	r3, #48	; 0x30
 800eb4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb52:	491e      	ldr	r1, [pc, #120]	; (800ebcc <sync_fs+0xd8>)
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff fd45 	bl	800e5e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	3330      	adds	r3, #48	; 0x30
 800eb5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7ff fd3b 	bl	800e5e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3330      	adds	r3, #48	; 0x30
 800eb72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	f7ff fd31 	bl	800e5e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	69db      	ldr	r3, [r3, #28]
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7858      	ldrb	r0, [r3, #1]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f7ff fc8e 	bl	800e4bc <disk_write>
			fs->fsi_flag = 0;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	785b      	ldrb	r3, [r3, #1]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	2100      	movs	r1, #0
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7ff fca4 	bl	800e4fc <disk_ioctl>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <sync_fs+0xca>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	41615252 	.word	0x41615252
 800ebcc:	61417272 	.word	0x61417272

0800ebd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	3b02      	subs	r3, #2
 800ebde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	3b02      	subs	r3, #2
 800ebe6:	683a      	ldr	r2, [r7, #0]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d301      	bcc.n	800ebf0 <clust2sect+0x20>
 800ebec:	2300      	movs	r3, #0
 800ebee:	e008      	b.n	800ec02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	895b      	ldrh	r3, [r3, #10]
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	fb03 f202 	mul.w	r2, r3, r2
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec00:	4413      	add	r3, r2
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b086      	sub	sp, #24
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d904      	bls.n	800ec2e <get_fat+0x20>
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	695b      	ldr	r3, [r3, #20]
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d302      	bcc.n	800ec34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ec2e:	2301      	movs	r3, #1
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	e08f      	b.n	800ed54 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec34:	f04f 33ff 	mov.w	r3, #4294967295
 800ec38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d062      	beq.n	800ed08 <get_fat+0xfa>
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	dc7c      	bgt.n	800ed40 <get_fat+0x132>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d002      	beq.n	800ec50 <get_fat+0x42>
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d042      	beq.n	800ecd4 <get_fat+0xc6>
 800ec4e:	e077      	b.n	800ed40 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	085b      	lsrs	r3, r3, #1
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	6a1a      	ldr	r2, [r3, #32]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	0a5b      	lsrs	r3, r3, #9
 800ec66:	4413      	add	r3, r2
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6938      	ldr	r0, [r7, #16]
 800ec6c:	f7ff ff14 	bl	800ea98 <move_window>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d167      	bne.n	800ed46 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	60fa      	str	r2, [r7, #12]
 800ec7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	4413      	add	r3, r2
 800ec84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	6a1a      	ldr	r2, [r3, #32]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	0a5b      	lsrs	r3, r3, #9
 800ec92:	4413      	add	r3, r2
 800ec94:	4619      	mov	r1, r3
 800ec96:	6938      	ldr	r0, [r7, #16]
 800ec98:	f7ff fefe 	bl	800ea98 <move_window>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d153      	bne.n	800ed4a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4413      	add	r3, r2
 800ecac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecb0:	021b      	lsls	r3, r3, #8
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <get_fat+0xbc>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	091b      	lsrs	r3, r3, #4
 800ecc8:	e002      	b.n	800ecd0 <get_fat+0xc2>
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecd0:	617b      	str	r3, [r7, #20]
			break;
 800ecd2:	e03f      	b.n	800ed54 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	6a1a      	ldr	r2, [r3, #32]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	0a1b      	lsrs	r3, r3, #8
 800ecdc:	4413      	add	r3, r2
 800ecde:	4619      	mov	r1, r3
 800ece0:	6938      	ldr	r0, [r7, #16]
 800ece2:	f7ff fed9 	bl	800ea98 <move_window>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d130      	bne.n	800ed4e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	005b      	lsls	r3, r3, #1
 800ecf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ecfa:	4413      	add	r3, r2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff fc1b 	bl	800e538 <ld_word>
 800ed02:	4603      	mov	r3, r0
 800ed04:	617b      	str	r3, [r7, #20]
			break;
 800ed06:	e025      	b.n	800ed54 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6a1a      	ldr	r2, [r3, #32]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	09db      	lsrs	r3, r3, #7
 800ed10:	4413      	add	r3, r2
 800ed12:	4619      	mov	r1, r3
 800ed14:	6938      	ldr	r0, [r7, #16]
 800ed16:	f7ff febf 	bl	800ea98 <move_window>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d118      	bne.n	800ed52 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed2e:	4413      	add	r3, r2
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fc19 	bl	800e568 <ld_dword>
 800ed36:	4603      	mov	r3, r0
 800ed38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ed3c:	617b      	str	r3, [r7, #20]
			break;
 800ed3e:	e009      	b.n	800ed54 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed40:	2301      	movs	r3, #1
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	e006      	b.n	800ed54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed46:	bf00      	nop
 800ed48:	e004      	b.n	800ed54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed4a:	bf00      	nop
 800ed4c:	e002      	b.n	800ed54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed4e:	bf00      	nop
 800ed50:	e000      	b.n	800ed54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed52:	bf00      	nop
		}
	}

	return val;
 800ed54:	697b      	ldr	r3, [r7, #20]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed5e:	b590      	push	{r4, r7, lr}
 800ed60:	b089      	sub	sp, #36	; 0x24
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	f240 80d9 	bls.w	800ef28 <put_fat+0x1ca>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	f080 80d3 	bcs.w	800ef28 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b03      	cmp	r3, #3
 800ed88:	f000 8096 	beq.w	800eeb8 <put_fat+0x15a>
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	f300 80cb 	bgt.w	800ef28 <put_fat+0x1ca>
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d002      	beq.n	800ed9c <put_fat+0x3e>
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d06e      	beq.n	800ee78 <put_fat+0x11a>
 800ed9a:	e0c5      	b.n	800ef28 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	61bb      	str	r3, [r7, #24]
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	085b      	lsrs	r3, r3, #1
 800eda4:	69ba      	ldr	r2, [r7, #24]
 800eda6:	4413      	add	r3, r2
 800eda8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6a1a      	ldr	r2, [r3, #32]
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	0a5b      	lsrs	r3, r3, #9
 800edb2:	4413      	add	r3, r2
 800edb4:	4619      	mov	r1, r3
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f7ff fe6e 	bl	800ea98 <move_window>
 800edbc:	4603      	mov	r3, r0
 800edbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edc0:	7ffb      	ldrb	r3, [r7, #31]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f040 80a9 	bne.w	800ef1a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	1c59      	adds	r1, r3, #1
 800edd2:	61b9      	str	r1, [r7, #24]
 800edd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edd8:	4413      	add	r3, r2
 800edda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00d      	beq.n	800ee02 <put_fat+0xa4>
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	b25b      	sxtb	r3, r3
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	b25a      	sxtb	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	011b      	lsls	r3, r3, #4
 800edf8:	b25b      	sxtb	r3, r3
 800edfa:	4313      	orrs	r3, r2
 800edfc:	b25b      	sxtb	r3, r3
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	e001      	b.n	800ee06 <put_fat+0xa8>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6a1a      	ldr	r2, [r3, #32]
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	0a5b      	lsrs	r3, r3, #9
 800ee18:	4413      	add	r3, r2
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7ff fe3b 	bl	800ea98 <move_window>
 800ee22:	4603      	mov	r3, r0
 800ee24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee26:	7ffb      	ldrb	r3, [r7, #31]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d178      	bne.n	800ef1e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee38:	4413      	add	r3, r2
 800ee3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d003      	beq.n	800ee4e <put_fat+0xf0>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	091b      	lsrs	r3, r3, #4
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	e00e      	b.n	800ee6c <put_fat+0x10e>
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b25b      	sxtb	r3, r3
 800ee54:	f023 030f 	bic.w	r3, r3, #15
 800ee58:	b25a      	sxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	b25b      	sxtb	r3, r3
 800ee60:	f003 030f 	and.w	r3, r3, #15
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	4313      	orrs	r3, r2
 800ee68:	b25b      	sxtb	r3, r3
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2201      	movs	r2, #1
 800ee74:	70da      	strb	r2, [r3, #3]
			break;
 800ee76:	e057      	b.n	800ef28 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6a1a      	ldr	r2, [r3, #32]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	0a1b      	lsrs	r3, r3, #8
 800ee80:	4413      	add	r3, r2
 800ee82:	4619      	mov	r1, r3
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff fe07 	bl	800ea98 <move_window>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee8e:	7ffb      	ldrb	r3, [r7, #31]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d146      	bne.n	800ef22 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eea2:	4413      	add	r3, r2
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	b292      	uxth	r2, r2
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff fb7f 	bl	800e5ae <st_word>
			fs->wflag = 1;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	70da      	strb	r2, [r3, #3]
			break;
 800eeb6:	e037      	b.n	800ef28 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6a1a      	ldr	r2, [r3, #32]
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	09db      	lsrs	r3, r3, #7
 800eec0:	4413      	add	r3, r2
 800eec2:	4619      	mov	r1, r3
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7ff fde7 	bl	800ea98 <move_window>
 800eeca:	4603      	mov	r3, r0
 800eecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eece:	7ffb      	ldrb	r3, [r7, #31]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d128      	bne.n	800ef26 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eee8:	4413      	add	r3, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff fb3c 	bl	800e568 <ld_dword>
 800eef0:	4603      	mov	r3, r0
 800eef2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eef6:	4323      	orrs	r3, r4
 800eef8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ef08:	4413      	add	r3, r2
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fb69 	bl	800e5e4 <st_dword>
			fs->wflag = 1;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2201      	movs	r2, #1
 800ef16:	70da      	strb	r2, [r3, #3]
			break;
 800ef18:	e006      	b.n	800ef28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef1a:	bf00      	nop
 800ef1c:	e004      	b.n	800ef28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef1e:	bf00      	nop
 800ef20:	e002      	b.n	800ef28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef22:	bf00      	nop
 800ef24:	e000      	b.n	800ef28 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ef26:	bf00      	nop
		}
	}
	return res;
 800ef28:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3724      	adds	r7, #36	; 0x24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd90      	pop	{r4, r7, pc}

0800ef32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b088      	sub	sp, #32
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d904      	bls.n	800ef58 <remove_chain+0x26>
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	68ba      	ldr	r2, [r7, #8]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d301      	bcc.n	800ef5c <remove_chain+0x2a>
 800ef58:	2302      	movs	r3, #2
 800ef5a:	e04b      	b.n	800eff4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00c      	beq.n	800ef7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef62:	f04f 32ff 	mov.w	r2, #4294967295
 800ef66:	6879      	ldr	r1, [r7, #4]
 800ef68:	69b8      	ldr	r0, [r7, #24]
 800ef6a:	f7ff fef8 	bl	800ed5e <put_fat>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef72:	7ffb      	ldrb	r3, [r7, #31]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <remove_chain+0x4a>
 800ef78:	7ffb      	ldrb	r3, [r7, #31]
 800ef7a:	e03b      	b.n	800eff4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef7c:	68b9      	ldr	r1, [r7, #8]
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff fe45 	bl	800ec0e <get_fat>
 800ef84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d031      	beq.n	800eff0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d101      	bne.n	800ef96 <remove_chain+0x64>
 800ef92:	2302      	movs	r3, #2
 800ef94:	e02e      	b.n	800eff4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9c:	d101      	bne.n	800efa2 <remove_chain+0x70>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e028      	b.n	800eff4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800efa2:	2200      	movs	r2, #0
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	69b8      	ldr	r0, [r7, #24]
 800efa8:	f7ff fed9 	bl	800ed5e <put_fat>
 800efac:	4603      	mov	r3, r0
 800efae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800efb0:	7ffb      	ldrb	r3, [r7, #31]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <remove_chain+0x88>
 800efb6:	7ffb      	ldrb	r3, [r7, #31]
 800efb8:	e01c      	b.n	800eff4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	691a      	ldr	r2, [r3, #16]
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	3b02      	subs	r3, #2
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d20b      	bcs.n	800efe0 <remove_chain+0xae>
			fs->free_clst++;
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	1c5a      	adds	r2, r3, #1
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	791b      	ldrb	r3, [r3, #4]
 800efd6:	f043 0301 	orr.w	r3, r3, #1
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	695b      	ldr	r3, [r3, #20]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	429a      	cmp	r2, r3
 800efec:	d3c6      	bcc.n	800ef7c <remove_chain+0x4a>
 800efee:	e000      	b.n	800eff2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eff0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3720      	adds	r7, #32
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10d      	bne.n	800f02e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <create_chain+0x2c>
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	69ba      	ldr	r2, [r7, #24]
 800f024:	429a      	cmp	r2, r3
 800f026:	d31b      	bcc.n	800f060 <create_chain+0x64>
 800f028:	2301      	movs	r3, #1
 800f02a:	61bb      	str	r3, [r7, #24]
 800f02c:	e018      	b.n	800f060 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7ff fdec 	bl	800ec0e <get_fat>
 800f036:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d801      	bhi.n	800f042 <create_chain+0x46>
 800f03e:	2301      	movs	r3, #1
 800f040:	e070      	b.n	800f124 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f048:	d101      	bne.n	800f04e <create_chain+0x52>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	e06a      	b.n	800f124 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	429a      	cmp	r2, r3
 800f056:	d201      	bcs.n	800f05c <create_chain+0x60>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	e063      	b.n	800f124 <create_chain+0x128>
		scl = clst;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	3301      	adds	r3, #1
 800f068:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	69fa      	ldr	r2, [r7, #28]
 800f070:	429a      	cmp	r2, r3
 800f072:	d307      	bcc.n	800f084 <create_chain+0x88>
				ncl = 2;
 800f074:	2302      	movs	r3, #2
 800f076:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f078:	69fa      	ldr	r2, [r7, #28]
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d901      	bls.n	800f084 <create_chain+0x88>
 800f080:	2300      	movs	r3, #0
 800f082:	e04f      	b.n	800f124 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f084:	69f9      	ldr	r1, [r7, #28]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fdc1 	bl	800ec0e <get_fat>
 800f08c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00e      	beq.n	800f0b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b01      	cmp	r3, #1
 800f098:	d003      	beq.n	800f0a2 <create_chain+0xa6>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a0:	d101      	bne.n	800f0a6 <create_chain+0xaa>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	e03e      	b.n	800f124 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f0a6:	69fa      	ldr	r2, [r7, #28]
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d1da      	bne.n	800f064 <create_chain+0x68>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	e038      	b.n	800f124 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f0b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b8:	69f9      	ldr	r1, [r7, #28]
 800f0ba:	6938      	ldr	r0, [r7, #16]
 800f0bc:	f7ff fe4f 	bl	800ed5e <put_fat>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <create_chain+0xe2>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d006      	beq.n	800f0de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f0d0:	69fa      	ldr	r2, [r7, #28]
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6938      	ldr	r0, [r7, #16]
 800f0d6:	f7ff fe42 	bl	800ed5e <put_fat>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d116      	bne.n	800f112 <create_chain+0x116>
		fs->last_clst = ncl;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	69fa      	ldr	r2, [r7, #28]
 800f0e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	691a      	ldr	r2, [r3, #16]
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	695b      	ldr	r3, [r3, #20]
 800f0f2:	3b02      	subs	r3, #2
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d804      	bhi.n	800f102 <create_chain+0x106>
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	1e5a      	subs	r2, r3, #1
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	791b      	ldrb	r3, [r3, #4]
 800f106:	f043 0301 	orr.w	r3, r3, #1
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	711a      	strb	r2, [r3, #4]
 800f110:	e007      	b.n	800f122 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d102      	bne.n	800f11e <create_chain+0x122>
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	e000      	b.n	800f120 <create_chain+0x124>
 800f11e:	2301      	movs	r3, #1
 800f120:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f122:	69fb      	ldr	r3, [r7, #28]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3720      	adds	r7, #32
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f140:	3304      	adds	r3, #4
 800f142:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	0a5b      	lsrs	r3, r3, #9
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	8952      	ldrh	r2, [r2, #10]
 800f14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f150:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	1d1a      	adds	r2, r3, #4
 800f156:	613a      	str	r2, [r7, #16]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <clmt_clust+0x3a>
 800f162:	2300      	movs	r3, #0
 800f164:	e010      	b.n	800f188 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d307      	bcc.n	800f17e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f16e:	697a      	ldr	r2, [r7, #20]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	617b      	str	r3, [r7, #20]
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	3304      	adds	r3, #4
 800f17a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f17c:	e7e9      	b.n	800f152 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f17e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	4413      	add	r3, r2
}
 800f188:	4618      	mov	r0, r3
 800f18a:	371c      	adds	r7, #28
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1aa:	d204      	bcs.n	800f1b6 <dir_sdi+0x22>
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	f003 031f 	and.w	r3, r3, #31
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800f1b6:	2302      	movs	r3, #2
 800f1b8:	e063      	b.n	800f282 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d106      	bne.n	800f1da <dir_sdi+0x46>
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d902      	bls.n	800f1da <dir_sdi+0x46>
		clst = fs->dirbase;
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10c      	bne.n	800f1fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	095b      	lsrs	r3, r3, #5
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	8912      	ldrh	r2, [r2, #8]
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d301      	bcc.n	800f1f0 <dir_sdi+0x5c>
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	e048      	b.n	800f282 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	61da      	str	r2, [r3, #28]
 800f1f8:	e029      	b.n	800f24e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	895b      	ldrh	r3, [r3, #10]
 800f1fe:	025b      	lsls	r3, r3, #9
 800f200:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f202:	e019      	b.n	800f238 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6979      	ldr	r1, [r7, #20]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fd00 	bl	800ec0e <get_fat>
 800f20e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f216:	d101      	bne.n	800f21c <dir_sdi+0x88>
 800f218:	2301      	movs	r3, #1
 800f21a:	e032      	b.n	800f282 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d904      	bls.n	800f22c <dir_sdi+0x98>
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	695b      	ldr	r3, [r3, #20]
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d301      	bcc.n	800f230 <dir_sdi+0x9c>
 800f22c:	2302      	movs	r3, #2
 800f22e:	e028      	b.n	800f282 <dir_sdi+0xee>
			ofs -= csz;
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d2e1      	bcs.n	800f204 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f240:	6979      	ldr	r1, [r7, #20]
 800f242:	6938      	ldr	r0, [r7, #16]
 800f244:	f7ff fcc4 	bl	800ebd0 <clust2sect>
 800f248:	4602      	mov	r2, r0
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	697a      	ldr	r2, [r7, #20]
 800f252:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	69db      	ldr	r3, [r3, #28]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d101      	bne.n	800f260 <dir_sdi+0xcc>
 800f25c:	2302      	movs	r3, #2
 800f25e:	e010      	b.n	800f282 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	69da      	ldr	r2, [r3, #28]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	0a5b      	lsrs	r3, r3, #9
 800f268:	441a      	add	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27a:	441a      	add	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f280:	2300      	movs	r3, #0
}
 800f282:	4618      	mov	r0, r3
 800f284:	3718      	adds	r7, #24
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b086      	sub	sp, #24
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	695b      	ldr	r3, [r3, #20]
 800f29e:	3320      	adds	r3, #32
 800f2a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d003      	beq.n	800f2b2 <dir_next+0x28>
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2b0:	d301      	bcc.n	800f2b6 <dir_next+0x2c>
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	e0aa      	b.n	800f40c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 8098 	bne.w	800f3f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	69db      	ldr	r3, [r3, #28]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10b      	bne.n	800f2ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	095b      	lsrs	r3, r3, #5
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	8912      	ldrh	r2, [r2, #8]
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	f0c0 8088 	bcc.w	800f3f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	61da      	str	r2, [r3, #28]
 800f2e8:	2304      	movs	r3, #4
 800f2ea:	e08f      	b.n	800f40c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	0a5b      	lsrs	r3, r3, #9
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	8952      	ldrh	r2, [r2, #10]
 800f2f4:	3a01      	subs	r2, #1
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d17a      	bne.n	800f3f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	4619      	mov	r1, r3
 800f304:	4610      	mov	r0, r2
 800f306:	f7ff fc82 	bl	800ec0e <get_fat>
 800f30a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d801      	bhi.n	800f316 <dir_next+0x8c>
 800f312:	2302      	movs	r3, #2
 800f314:	e07a      	b.n	800f40c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31c:	d101      	bne.n	800f322 <dir_next+0x98>
 800f31e:	2301      	movs	r3, #1
 800f320:	e074      	b.n	800f40c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	697a      	ldr	r2, [r7, #20]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d358      	bcc.n	800f3de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d104      	bne.n	800f33c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	61da      	str	r2, [r3, #28]
 800f338:	2304      	movs	r3, #4
 800f33a:	e067      	b.n	800f40c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	699b      	ldr	r3, [r3, #24]
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f7ff fe59 	bl	800effc <create_chain>
 800f34a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d101      	bne.n	800f356 <dir_next+0xcc>
 800f352:	2307      	movs	r3, #7
 800f354:	e05a      	b.n	800f40c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d101      	bne.n	800f360 <dir_next+0xd6>
 800f35c:	2302      	movs	r3, #2
 800f35e:	e055      	b.n	800f40c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f366:	d101      	bne.n	800f36c <dir_next+0xe2>
 800f368:	2301      	movs	r3, #1
 800f36a:	e04f      	b.n	800f40c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f7ff fb4f 	bl	800ea10 <sync_window>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <dir_next+0xf2>
 800f378:	2301      	movs	r3, #1
 800f37a:	e047      	b.n	800f40c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3330      	adds	r3, #48	; 0x30
 800f380:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f384:	2100      	movs	r1, #0
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff f979 	bl	800e67e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f38c:	2300      	movs	r3, #0
 800f38e:	613b      	str	r3, [r7, #16]
 800f390:	6979      	ldr	r1, [r7, #20]
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7ff fc1c 	bl	800ebd0 <clust2sect>
 800f398:	4602      	mov	r2, r0
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f39e:	e012      	b.n	800f3c6 <dir_next+0x13c>
						fs->wflag = 1;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff fb32 	bl	800ea10 <sync_window>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <dir_next+0x12c>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e02a      	b.n	800f40c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	613b      	str	r3, [r7, #16]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c0:	1c5a      	adds	r2, r3, #1
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	895b      	ldrh	r3, [r3, #10]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d3e6      	bcc.n	800f3a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	1ad2      	subs	r2, r2, r3
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f3e4:	6979      	ldr	r1, [r7, #20]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f7ff fbf2 	bl	800ebd0 <clust2sect>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f404:	441a      	add	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f424:	2100      	movs	r1, #0
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff feb4 	bl	800f194 <dir_sdi>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d12b      	bne.n	800f48e <dir_alloc+0x7a>
		n = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	69db      	ldr	r3, [r3, #28]
 800f43e:	4619      	mov	r1, r3
 800f440:	68f8      	ldr	r0, [r7, #12]
 800f442:	f7ff fb29 	bl	800ea98 <move_window>
 800f446:	4603      	mov	r3, r0
 800f448:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d11d      	bne.n	800f48c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a1b      	ldr	r3, [r3, #32]
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	2be5      	cmp	r3, #229	; 0xe5
 800f458:	d004      	beq.n	800f464 <dir_alloc+0x50>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d107      	bne.n	800f474 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	3301      	adds	r3, #1
 800f468:	613b      	str	r3, [r7, #16]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d102      	bne.n	800f478 <dir_alloc+0x64>
 800f472:	e00c      	b.n	800f48e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f474:	2300      	movs	r3, #0
 800f476:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f478:	2101      	movs	r1, #1
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff ff05 	bl	800f28a <dir_next>
 800f480:	4603      	mov	r3, r0
 800f482:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f484:	7dfb      	ldrb	r3, [r7, #23]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d0d7      	beq.n	800f43a <dir_alloc+0x26>
 800f48a:	e000      	b.n	800f48e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f48c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f48e:	7dfb      	ldrb	r3, [r7, #23]
 800f490:	2b04      	cmp	r3, #4
 800f492:	d101      	bne.n	800f498 <dir_alloc+0x84>
 800f494:	2307      	movs	r3, #7
 800f496:	75fb      	strb	r3, [r7, #23]
	return res;
 800f498:	7dfb      	ldrb	r3, [r7, #23]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3718      	adds	r7, #24
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	331a      	adds	r3, #26
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7ff f841 	bl	800e538 <ld_word>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d109      	bne.n	800f4d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	3314      	adds	r3, #20
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff f836 	bl	800e538 <ld_word>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	041b      	lsls	r3, r3, #16
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3710      	adds	r7, #16
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	331a      	adds	r3, #26
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	b292      	uxth	r2, r2
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7ff f859 	bl	800e5ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b03      	cmp	r3, #3
 800f502:	d109      	bne.n	800f518 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	f103 0214 	add.w	r2, r3, #20
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	0c1b      	lsrs	r3, r3, #16
 800f50e:	b29b      	uxth	r3, r3
 800f510:	4619      	mov	r1, r3
 800f512:	4610      	mov	r0, r2
 800f514:	f7ff f84b 	bl	800e5ae <st_word>
	}
}
 800f518:	bf00      	nop
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f52a:	2304      	movs	r3, #4
 800f52c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f534:	e03c      	b.n	800f5b0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	69db      	ldr	r3, [r3, #28]
 800f53a:	4619      	mov	r1, r3
 800f53c:	6938      	ldr	r0, [r7, #16]
 800f53e:	f7ff faab 	bl	800ea98 <move_window>
 800f542:	4603      	mov	r3, r0
 800f544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f546:	7dfb      	ldrb	r3, [r7, #23]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d136      	bne.n	800f5ba <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a1b      	ldr	r3, [r3, #32]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f554:	7bfb      	ldrb	r3, [r7, #15]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f55a:	2304      	movs	r3, #4
 800f55c:	75fb      	strb	r3, [r7, #23]
 800f55e:	e031      	b.n	800f5c4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6a1b      	ldr	r3, [r3, #32]
 800f564:	330b      	adds	r3, #11
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f56c:	73bb      	strb	r3, [r7, #14]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	7bba      	ldrb	r2, [r7, #14]
 800f572:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	2be5      	cmp	r3, #229	; 0xe5
 800f578:	d011      	beq.n	800f59e <dir_read+0x7e>
 800f57a:	7bfb      	ldrb	r3, [r7, #15]
 800f57c:	2b2e      	cmp	r3, #46	; 0x2e
 800f57e:	d00e      	beq.n	800f59e <dir_read+0x7e>
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	2b0f      	cmp	r3, #15
 800f584:	d00b      	beq.n	800f59e <dir_read+0x7e>
 800f586:	7bbb      	ldrb	r3, [r7, #14]
 800f588:	f023 0320 	bic.w	r3, r3, #32
 800f58c:	2b08      	cmp	r3, #8
 800f58e:	bf0c      	ite	eq
 800f590:	2301      	moveq	r3, #1
 800f592:	2300      	movne	r3, #0
 800f594:	b2db      	uxtb	r3, r3
 800f596:	461a      	mov	r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d00f      	beq.n	800f5be <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f59e:	2100      	movs	r1, #0
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff fe72 	bl	800f28a <dir_next>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d108      	bne.n	800f5c2 <dir_read+0xa2>
	while (dp->sect) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	69db      	ldr	r3, [r3, #28]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1be      	bne.n	800f536 <dir_read+0x16>
 800f5b8:	e004      	b.n	800f5c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5ba:	bf00      	nop
 800f5bc:	e002      	b.n	800f5c4 <dir_read+0xa4>
				break;
 800f5be:	bf00      	nop
 800f5c0:	e000      	b.n	800f5c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f5c2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f5c4:	7dfb      	ldrb	r3, [r7, #23]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <dir_read+0xb0>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	61da      	str	r2, [r3, #28]
	return res;
 800f5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3718      	adds	r7, #24
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b086      	sub	sp, #24
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7ff fdd2 	bl	800f194 <dir_sdi>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <dir_find+0x24>
 800f5fa:	7dfb      	ldrb	r3, [r7, #23]
 800f5fc:	e03e      	b.n	800f67c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	69db      	ldr	r3, [r3, #28]
 800f602:	4619      	mov	r1, r3
 800f604:	6938      	ldr	r0, [r7, #16]
 800f606:	f7ff fa47 	bl	800ea98 <move_window>
 800f60a:	4603      	mov	r3, r0
 800f60c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d12f      	bne.n	800f674 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a1b      	ldr	r3, [r3, #32]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f61c:	7bfb      	ldrb	r3, [r7, #15]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d102      	bne.n	800f628 <dir_find+0x4e>
 800f622:	2304      	movs	r3, #4
 800f624:	75fb      	strb	r3, [r7, #23]
 800f626:	e028      	b.n	800f67a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	330b      	adds	r3, #11
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f634:	b2da      	uxtb	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	330b      	adds	r3, #11
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f003 0308 	and.w	r3, r3, #8
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10a      	bne.n	800f660 <dir_find+0x86>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6a18      	ldr	r0, [r3, #32]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3324      	adds	r3, #36	; 0x24
 800f652:	220b      	movs	r2, #11
 800f654:	4619      	mov	r1, r3
 800f656:	f7ff f82d 	bl	800e6b4 <mem_cmp>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00b      	beq.n	800f678 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f660:	2100      	movs	r1, #0
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff fe11 	bl	800f28a <dir_next>
 800f668:	4603      	mov	r3, r0
 800f66a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d0c5      	beq.n	800f5fe <dir_find+0x24>
 800f672:	e002      	b.n	800f67a <dir_find+0xa0>
		if (res != FR_OK) break;
 800f674:	bf00      	nop
 800f676:	e000      	b.n	800f67a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f678:	bf00      	nop

	return res;
 800f67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f692:	2101      	movs	r1, #1
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7ff febd 	bl	800f414 <dir_alloc>
 800f69a:	4603      	mov	r3, r0
 800f69c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d11c      	bne.n	800f6de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	68b8      	ldr	r0, [r7, #8]
 800f6ac:	f7ff f9f4 	bl	800ea98 <move_window>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d111      	bne.n	800f6de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	2220      	movs	r2, #32
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fe ffdb 	bl	800e67e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a18      	ldr	r0, [r3, #32]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3324      	adds	r3, #36	; 0x24
 800f6d0:	220b      	movs	r2, #11
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	f7fe ffb2 	bl	800e63c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d04e      	beq.n	800f79e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	613b      	str	r3, [r7, #16]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f708:	e021      	b.n	800f74e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a1a      	ldr	r2, [r3, #32]
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	1c59      	adds	r1, r3, #1
 800f712:	6179      	str	r1, [r7, #20]
 800f714:	4413      	add	r3, r2
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f71a:	7bfb      	ldrb	r3, [r7, #15]
 800f71c:	2b20      	cmp	r3, #32
 800f71e:	d100      	bne.n	800f722 <get_fileinfo+0x3a>
 800f720:	e015      	b.n	800f74e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f722:	7bfb      	ldrb	r3, [r7, #15]
 800f724:	2b05      	cmp	r3, #5
 800f726:	d101      	bne.n	800f72c <get_fileinfo+0x44>
 800f728:	23e5      	movs	r3, #229	; 0xe5
 800f72a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b09      	cmp	r3, #9
 800f730:	d106      	bne.n	800f740 <get_fileinfo+0x58>
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	613a      	str	r2, [r7, #16]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	4413      	add	r3, r2
 800f73c:	222e      	movs	r2, #46	; 0x2e
 800f73e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	613a      	str	r2, [r7, #16]
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	4413      	add	r3, r2
 800f74a:	7bfa      	ldrb	r2, [r7, #15]
 800f74c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b0a      	cmp	r3, #10
 800f752:	d9da      	bls.n	800f70a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f754:	683a      	ldr	r2, [r7, #0]
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	4413      	add	r3, r2
 800f75a:	3309      	adds	r3, #9
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	7ada      	ldrb	r2, [r3, #11]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	331c      	adds	r3, #28
 800f770:	4618      	mov	r0, r3
 800f772:	f7fe fef9 	bl	800e568 <ld_dword>
 800f776:	4602      	mov	r2, r0
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a1b      	ldr	r3, [r3, #32]
 800f780:	3316      	adds	r3, #22
 800f782:	4618      	mov	r0, r3
 800f784:	f7fe fef0 	bl	800e568 <ld_dword>
 800f788:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	80da      	strh	r2, [r3, #6]
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	0c1b      	lsrs	r3, r3, #16
 800f796:	b29a      	uxth	r2, r3
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	809a      	strh	r2, [r3, #4]
 800f79c:	e000      	b.n	800f7a0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f79e:	bf00      	nop
}
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
	...

0800f7a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b088      	sub	sp, #32
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	3324      	adds	r3, #36	; 0x24
 800f7bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f7be:	220b      	movs	r2, #11
 800f7c0:	2120      	movs	r1, #32
 800f7c2:	68b8      	ldr	r0, [r7, #8]
 800f7c4:	f7fe ff5b 	bl	800e67e <mem_set>
	si = i = 0; ni = 8;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	613b      	str	r3, [r7, #16]
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	61fb      	str	r3, [r7, #28]
 800f7d0:	2308      	movs	r3, #8
 800f7d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	61fa      	str	r2, [r7, #28]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f7e2:	7efb      	ldrb	r3, [r7, #27]
 800f7e4:	2b20      	cmp	r3, #32
 800f7e6:	d94e      	bls.n	800f886 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f7e8:	7efb      	ldrb	r3, [r7, #27]
 800f7ea:	2b2f      	cmp	r3, #47	; 0x2f
 800f7ec:	d006      	beq.n	800f7fc <create_name+0x54>
 800f7ee:	7efb      	ldrb	r3, [r7, #27]
 800f7f0:	2b5c      	cmp	r3, #92	; 0x5c
 800f7f2:	d110      	bne.n	800f816 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f7f4:	e002      	b.n	800f7fc <create_name+0x54>
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	4413      	add	r3, r2
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	2b2f      	cmp	r3, #47	; 0x2f
 800f806:	d0f6      	beq.n	800f7f6 <create_name+0x4e>
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b5c      	cmp	r3, #92	; 0x5c
 800f812:	d0f0      	beq.n	800f7f6 <create_name+0x4e>
			break;
 800f814:	e038      	b.n	800f888 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f816:	7efb      	ldrb	r3, [r7, #27]
 800f818:	2b2e      	cmp	r3, #46	; 0x2e
 800f81a:	d003      	beq.n	800f824 <create_name+0x7c>
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	429a      	cmp	r2, r3
 800f822:	d30c      	bcc.n	800f83e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	2b0b      	cmp	r3, #11
 800f828:	d002      	beq.n	800f830 <create_name+0x88>
 800f82a:	7efb      	ldrb	r3, [r7, #27]
 800f82c:	2b2e      	cmp	r3, #46	; 0x2e
 800f82e:	d001      	beq.n	800f834 <create_name+0x8c>
 800f830:	2306      	movs	r3, #6
 800f832:	e044      	b.n	800f8be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f834:	2308      	movs	r3, #8
 800f836:	613b      	str	r3, [r7, #16]
 800f838:	230b      	movs	r3, #11
 800f83a:	617b      	str	r3, [r7, #20]
			continue;
 800f83c:	e022      	b.n	800f884 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f83e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f842:	2b00      	cmp	r3, #0
 800f844:	da04      	bge.n	800f850 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f846:	7efb      	ldrb	r3, [r7, #27]
 800f848:	3b80      	subs	r3, #128	; 0x80
 800f84a:	4a1f      	ldr	r2, [pc, #124]	; (800f8c8 <create_name+0x120>)
 800f84c:	5cd3      	ldrb	r3, [r2, r3]
 800f84e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f850:	7efb      	ldrb	r3, [r7, #27]
 800f852:	4619      	mov	r1, r3
 800f854:	481d      	ldr	r0, [pc, #116]	; (800f8cc <create_name+0x124>)
 800f856:	f7fe ff54 	bl	800e702 <chk_chr>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d001      	beq.n	800f864 <create_name+0xbc>
 800f860:	2306      	movs	r3, #6
 800f862:	e02c      	b.n	800f8be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f864:	7efb      	ldrb	r3, [r7, #27]
 800f866:	2b60      	cmp	r3, #96	; 0x60
 800f868:	d905      	bls.n	800f876 <create_name+0xce>
 800f86a:	7efb      	ldrb	r3, [r7, #27]
 800f86c:	2b7a      	cmp	r3, #122	; 0x7a
 800f86e:	d802      	bhi.n	800f876 <create_name+0xce>
 800f870:	7efb      	ldrb	r3, [r7, #27]
 800f872:	3b20      	subs	r3, #32
 800f874:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	613a      	str	r2, [r7, #16]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	4413      	add	r3, r2
 800f880:	7efa      	ldrb	r2, [r7, #27]
 800f882:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f884:	e7a6      	b.n	800f7d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f886:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	441a      	add	r2, r3
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <create_name+0xf4>
 800f898:	2306      	movs	r3, #6
 800f89a:	e010      	b.n	800f8be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2be5      	cmp	r3, #229	; 0xe5
 800f8a2:	d102      	bne.n	800f8aa <create_name+0x102>
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2205      	movs	r2, #5
 800f8a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f8aa:	7efb      	ldrb	r3, [r7, #27]
 800f8ac:	2b20      	cmp	r3, #32
 800f8ae:	d801      	bhi.n	800f8b4 <create_name+0x10c>
 800f8b0:	2204      	movs	r2, #4
 800f8b2:	e000      	b.n	800f8b6 <create_name+0x10e>
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	330b      	adds	r3, #11
 800f8ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f8bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3720      	adds	r7, #32
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	0801f1f4 	.word	0x0801f1f4
 800f8cc:	0801c76c 	.word	0x0801c76c

0800f8d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8e4:	e002      	b.n	800f8ec <follow_path+0x1c>
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b2f      	cmp	r3, #47	; 0x2f
 800f8f2:	d0f8      	beq.n	800f8e6 <follow_path+0x16>
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	2b5c      	cmp	r3, #92	; 0x5c
 800f8fa:	d0f4      	beq.n	800f8e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	2200      	movs	r2, #0
 800f900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	2b1f      	cmp	r3, #31
 800f908:	d80a      	bhi.n	800f920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2280      	movs	r2, #128	; 0x80
 800f90e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f912:	2100      	movs	r1, #0
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7ff fc3d 	bl	800f194 <dir_sdi>
 800f91a:	4603      	mov	r3, r0
 800f91c:	75fb      	strb	r3, [r7, #23]
 800f91e:	e043      	b.n	800f9a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f920:	463b      	mov	r3, r7
 800f922:	4619      	mov	r1, r3
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f7ff ff3f 	bl	800f7a8 <create_name>
 800f92a:	4603      	mov	r3, r0
 800f92c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d134      	bne.n	800f99e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff fe50 	bl	800f5da <dir_find>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00a      	beq.n	800f962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f94c:	7dfb      	ldrb	r3, [r7, #23]
 800f94e:	2b04      	cmp	r3, #4
 800f950:	d127      	bne.n	800f9a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f952:	7afb      	ldrb	r3, [r7, #11]
 800f954:	f003 0304 	and.w	r3, r3, #4
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d122      	bne.n	800f9a2 <follow_path+0xd2>
 800f95c:	2305      	movs	r3, #5
 800f95e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f960:	e01f      	b.n	800f9a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f962:	7afb      	ldrb	r3, [r7, #11]
 800f964:	f003 0304 	and.w	r3, r3, #4
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d11c      	bne.n	800f9a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	799b      	ldrb	r3, [r3, #6]
 800f970:	f003 0310 	and.w	r3, r3, #16
 800f974:	2b00      	cmp	r3, #0
 800f976:	d102      	bne.n	800f97e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f978:	2305      	movs	r3, #5
 800f97a:	75fb      	strb	r3, [r7, #23]
 800f97c:	e014      	b.n	800f9a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	695b      	ldr	r3, [r3, #20]
 800f988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f98c:	4413      	add	r3, r2
 800f98e:	4619      	mov	r1, r3
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff fd86 	bl	800f4a2 <ld_clust>
 800f996:	4602      	mov	r2, r0
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f99c:	e7c0      	b.n	800f920 <follow_path+0x50>
			if (res != FR_OK) break;
 800f99e:	bf00      	nop
 800f9a0:	e002      	b.n	800f9a8 <follow_path+0xd8>
				break;
 800f9a2:	bf00      	nop
 800f9a4:	e000      	b.n	800f9a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9a6:	bf00      	nop
			}
		}
	}

	return res;
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3718      	adds	r7, #24
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9b2:	b480      	push	{r7}
 800f9b4:	b087      	sub	sp, #28
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f9be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d031      	beq.n	800fa2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	e002      	b.n	800f9d6 <get_ldnumber+0x24>
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	617b      	str	r3, [r7, #20]
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	2b20      	cmp	r3, #32
 800f9dc:	d903      	bls.n	800f9e6 <get_ldnumber+0x34>
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	2b3a      	cmp	r3, #58	; 0x3a
 800f9e4:	d1f4      	bne.n	800f9d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b3a      	cmp	r3, #58	; 0x3a
 800f9ec:	d11c      	bne.n	800fa28 <get_ldnumber+0x76>
			tp = *path;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	1c5a      	adds	r2, r3, #1
 800f9f8:	60fa      	str	r2, [r7, #12]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	3b30      	subs	r3, #48	; 0x30
 800f9fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b09      	cmp	r3, #9
 800fa04:	d80e      	bhi.n	800fa24 <get_ldnumber+0x72>
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d10a      	bne.n	800fa24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d107      	bne.n	800fa24 <get_ldnumber+0x72>
					vol = (int)i;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	617b      	str	r3, [r7, #20]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	e002      	b.n	800fa2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa28:	2300      	movs	r3, #0
 800fa2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa2c:	693b      	ldr	r3, [r7, #16]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	371c      	adds	r7, #28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
	...

0800fa3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	70da      	strb	r2, [r3, #3]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa52:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff f81e 	bl	800ea98 <move_window>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d001      	beq.n	800fa66 <check_fs+0x2a>
 800fa62:	2304      	movs	r3, #4
 800fa64:	e038      	b.n	800fad8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3330      	adds	r3, #48	; 0x30
 800fa6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fd62 	bl	800e538 <ld_word>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d001      	beq.n	800fa84 <check_fs+0x48>
 800fa80:	2303      	movs	r3, #3
 800fa82:	e029      	b.n	800fad8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa8a:	2be9      	cmp	r3, #233	; 0xe9
 800fa8c:	d009      	beq.n	800faa2 <check_fs+0x66>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa94:	2beb      	cmp	r3, #235	; 0xeb
 800fa96:	d11e      	bne.n	800fad6 <check_fs+0x9a>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fa9e:	2b90      	cmp	r3, #144	; 0x90
 800faa0:	d119      	bne.n	800fad6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3330      	adds	r3, #48	; 0x30
 800faa6:	3336      	adds	r3, #54	; 0x36
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fe fd5d 	bl	800e568 <ld_dword>
 800faae:	4603      	mov	r3, r0
 800fab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fab4:	4a0a      	ldr	r2, [pc, #40]	; (800fae0 <check_fs+0xa4>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d101      	bne.n	800fabe <check_fs+0x82>
 800faba:	2300      	movs	r3, #0
 800fabc:	e00c      	b.n	800fad8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3330      	adds	r3, #48	; 0x30
 800fac2:	3352      	adds	r3, #82	; 0x52
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe fd4f 	bl	800e568 <ld_dword>
 800faca:	4603      	mov	r3, r0
 800facc:	4a05      	ldr	r2, [pc, #20]	; (800fae4 <check_fs+0xa8>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d101      	bne.n	800fad6 <check_fs+0x9a>
 800fad2:	2300      	movs	r3, #0
 800fad4:	e000      	b.n	800fad8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fad6:	2302      	movs	r3, #2
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	00544146 	.word	0x00544146
 800fae4:	33544146 	.word	0x33544146

0800fae8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b096      	sub	sp, #88	; 0x58
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	4613      	mov	r3, r2
 800faf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7ff ff58 	bl	800f9b2 <get_ldnumber>
 800fb02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	da01      	bge.n	800fb0e <find_volume+0x26>
 800fb0a:	230b      	movs	r3, #11
 800fb0c:	e22d      	b.n	800ff6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb0e:	4aa1      	ldr	r2, [pc, #644]	; (800fd94 <find_volume+0x2ac>)
 800fb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d101      	bne.n	800fb22 <find_volume+0x3a>
 800fb1e:	230c      	movs	r3, #12
 800fb20:	e223      	b.n	800ff6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb28:	79fb      	ldrb	r3, [r7, #7]
 800fb2a:	f023 0301 	bic.w	r3, r3, #1
 800fb2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d01a      	beq.n	800fb6e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	785b      	ldrb	r3, [r3, #1]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe fc5b 	bl	800e3f8 <disk_status>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10c      	bne.n	800fb6e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d007      	beq.n	800fb6a <find_volume+0x82>
 800fb5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d001      	beq.n	800fb6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb66:	230a      	movs	r3, #10
 800fb68:	e1ff      	b.n	800ff6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e1fd      	b.n	800ff6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	2200      	movs	r2, #0
 800fb72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	785b      	ldrb	r3, [r3, #1]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fc53 	bl	800e42c <disk_initialize>
 800fb86:	4603      	mov	r3, r0
 800fb88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d001      	beq.n	800fb9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb98:	2303      	movs	r3, #3
 800fb9a:	e1e6      	b.n	800ff6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fb9c:	79fb      	ldrb	r3, [r7, #7]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d007      	beq.n	800fbb2 <find_volume+0xca>
 800fba2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba6:	f003 0304 	and.w	r3, r3, #4
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbae:	230a      	movs	r3, #10
 800fbb0:	e1db      	b.n	800ff6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbba:	f7ff ff3f 	bl	800fa3c <check_fs>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d149      	bne.n	800fc60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbcc:	2300      	movs	r3, #0
 800fbce:	643b      	str	r3, [r7, #64]	; 0x40
 800fbd0:	e01e      	b.n	800fc10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbe0:	4413      	add	r3, r2
 800fbe2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d006      	beq.n	800fbfc <find_volume+0x114>
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe fcb8 	bl	800e568 <ld_dword>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	e000      	b.n	800fbfe <find_volume+0x116>
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	3358      	adds	r3, #88	; 0x58
 800fc04:	443b      	add	r3, r7
 800fc06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	643b      	str	r3, [r7, #64]	; 0x40
 800fc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d9dd      	bls.n	800fbd2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc16:	2300      	movs	r3, #0
 800fc18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d002      	beq.n	800fc26 <find_volume+0x13e>
 800fc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc22:	3b01      	subs	r3, #1
 800fc24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	3358      	adds	r3, #88	; 0x58
 800fc2c:	443b      	add	r3, r7
 800fc2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <find_volume+0x15e>
 800fc3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc3e:	f7ff fefd 	bl	800fa3c <check_fs>
 800fc42:	4603      	mov	r3, r0
 800fc44:	e000      	b.n	800fc48 <find_volume+0x160>
 800fc46:	2303      	movs	r3, #3
 800fc48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d905      	bls.n	800fc60 <find_volume+0x178>
 800fc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc56:	3301      	adds	r3, #1
 800fc58:	643b      	str	r3, [r7, #64]	; 0x40
 800fc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5c:	2b03      	cmp	r3, #3
 800fc5e:	d9e2      	bls.n	800fc26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d101      	bne.n	800fc6c <find_volume+0x184>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e17e      	b.n	800ff6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d901      	bls.n	800fc78 <find_volume+0x190>
 800fc74:	230d      	movs	r3, #13
 800fc76:	e178      	b.n	800ff6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	3330      	adds	r3, #48	; 0x30
 800fc7c:	330b      	adds	r3, #11
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe fc5a 	bl	800e538 <ld_word>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc8a:	d001      	beq.n	800fc90 <find_volume+0x1a8>
 800fc8c:	230d      	movs	r3, #13
 800fc8e:	e16c      	b.n	800ff6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	3330      	adds	r3, #48	; 0x30
 800fc94:	3316      	adds	r3, #22
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fe fc4e 	bl	800e538 <ld_word>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <find_volume+0x1cc>
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	3330      	adds	r3, #48	; 0x30
 800fcaa:	3324      	adds	r3, #36	; 0x24
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fe fc5b 	bl	800e568 <ld_dword>
 800fcb2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcb8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	789b      	ldrb	r3, [r3, #2]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d005      	beq.n	800fcd8 <find_volume+0x1f0>
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	789b      	ldrb	r3, [r3, #2]
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d001      	beq.n	800fcd8 <find_volume+0x1f0>
 800fcd4:	230d      	movs	r3, #13
 800fcd6:	e148      	b.n	800ff6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcda:	789b      	ldrb	r3, [r3, #2]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce0:	fb02 f303 	mul.w	r3, r2, r3
 800fce4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	895b      	ldrh	r3, [r3, #10]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d008      	beq.n	800fd0c <find_volume+0x224>
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	895b      	ldrh	r3, [r3, #10]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	895b      	ldrh	r3, [r3, #10]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	4013      	ands	r3, r2
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <find_volume+0x228>
 800fd0c:	230d      	movs	r3, #13
 800fd0e:	e12c      	b.n	800ff6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	3330      	adds	r3, #48	; 0x30
 800fd14:	3311      	adds	r3, #17
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fc0e 	bl	800e538 <ld_word>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	891b      	ldrh	r3, [r3, #8]
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <find_volume+0x24e>
 800fd32:	230d      	movs	r3, #13
 800fd34:	e119      	b.n	800ff6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	3330      	adds	r3, #48	; 0x30
 800fd3a:	3313      	adds	r3, #19
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fe fbfb 	bl	800e538 <ld_word>
 800fd42:	4603      	mov	r3, r0
 800fd44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <find_volume+0x272>
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	3330      	adds	r3, #48	; 0x30
 800fd50:	3320      	adds	r3, #32
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe fc08 	bl	800e568 <ld_dword>
 800fd58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5c:	3330      	adds	r3, #48	; 0x30
 800fd5e:	330e      	adds	r3, #14
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fe fbe9 	bl	800e538 <ld_word>
 800fd66:	4603      	mov	r3, r0
 800fd68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d101      	bne.n	800fd74 <find_volume+0x28c>
 800fd70:	230d      	movs	r3, #13
 800fd72:	e0fa      	b.n	800ff6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd78:	4413      	add	r3, r2
 800fd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd7c:	8912      	ldrh	r2, [r2, #8]
 800fd7e:	0912      	lsrs	r2, r2, #4
 800fd80:	b292      	uxth	r2, r2
 800fd82:	4413      	add	r3, r2
 800fd84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fd86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d204      	bcs.n	800fd98 <find_volume+0x2b0>
 800fd8e:	230d      	movs	r3, #13
 800fd90:	e0eb      	b.n	800ff6a <find_volume+0x482>
 800fd92:	bf00      	nop
 800fd94:	200054b4 	.word	0x200054b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fd98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fda0:	8952      	ldrh	r2, [r2, #10]
 800fda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <find_volume+0x2ca>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e0db      	b.n	800ff6a <find_volume+0x482>
		fmt = FS_FAT32;
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d802      	bhi.n	800fdc8 <find_volume+0x2e0>
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d802      	bhi.n	800fdd8 <find_volume+0x2f0>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	1c9a      	adds	r2, r3, #2
 800fddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdde:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fde4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fde6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fde8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdea:	441a      	add	r2, r3
 800fdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fdf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf4:	441a      	add	r2, r3
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fdfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d11e      	bne.n	800fe40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe04:	3330      	adds	r3, #48	; 0x30
 800fe06:	332a      	adds	r3, #42	; 0x2a
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fb95 	bl	800e538 <ld_word>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <find_volume+0x330>
 800fe14:	230d      	movs	r3, #13
 800fe16:	e0a8      	b.n	800ff6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	891b      	ldrh	r3, [r3, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <find_volume+0x33c>
 800fe20:	230d      	movs	r3, #13
 800fe22:	e0a2      	b.n	800ff6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	3330      	adds	r3, #48	; 0x30
 800fe28:	332c      	adds	r3, #44	; 0x2c
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fe fb9c 	bl	800e568 <ld_dword>
 800fe30:	4602      	mov	r2, r0
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe38:	695b      	ldr	r3, [r3, #20]
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe3e:	e01f      	b.n	800fe80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe42:	891b      	ldrh	r3, [r3, #8]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d101      	bne.n	800fe4c <find_volume+0x364>
 800fe48:	230d      	movs	r3, #13
 800fe4a:	e08e      	b.n	800ff6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4e:	6a1a      	ldr	r2, [r3, #32]
 800fe50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe52:	441a      	add	r2, r3
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	d103      	bne.n	800fe68 <find_volume+0x380>
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	695b      	ldr	r3, [r3, #20]
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	e00a      	b.n	800fe7e <find_volume+0x396>
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	695a      	ldr	r2, [r3, #20]
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	005b      	lsls	r3, r3, #1
 800fe70:	4413      	add	r3, r2
 800fe72:	085a      	lsrs	r2, r3, #1
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	695b      	ldr	r3, [r3, #20]
 800fe78:	f003 0301 	and.w	r3, r3, #1
 800fe7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	699a      	ldr	r2, [r3, #24]
 800fe84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fe8a:	0a5b      	lsrs	r3, r3, #9
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d201      	bcs.n	800fe94 <find_volume+0x3ac>
 800fe90:	230d      	movs	r3, #13
 800fe92:	e06a      	b.n	800ff6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9a:	611a      	str	r2, [r3, #16]
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	691a      	ldr	r2, [r3, #16]
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea6:	2280      	movs	r2, #128	; 0x80
 800fea8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feae:	2b03      	cmp	r3, #3
 800feb0:	d149      	bne.n	800ff46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800feb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb4:	3330      	adds	r3, #48	; 0x30
 800feb6:	3330      	adds	r3, #48	; 0x30
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fb3d 	bl	800e538 <ld_word>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d140      	bne.n	800ff46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec6:	3301      	adds	r3, #1
 800fec8:	4619      	mov	r1, r3
 800feca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fecc:	f7fe fde4 	bl	800ea98 <move_window>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d137      	bne.n	800ff46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	2200      	movs	r2, #0
 800feda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fede:	3330      	adds	r3, #48	; 0x30
 800fee0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fe fb27 	bl	800e538 <ld_word>
 800feea:	4603      	mov	r3, r0
 800feec:	461a      	mov	r2, r3
 800feee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d127      	bne.n	800ff46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	3330      	adds	r3, #48	; 0x30
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fb34 	bl	800e568 <ld_dword>
 800ff00:	4603      	mov	r3, r0
 800ff02:	4a1c      	ldr	r2, [pc, #112]	; (800ff74 <find_volume+0x48c>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d11e      	bne.n	800ff46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	3330      	adds	r3, #48	; 0x30
 800ff0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe fb29 	bl	800e568 <ld_dword>
 800ff16:	4603      	mov	r3, r0
 800ff18:	4a17      	ldr	r2, [pc, #92]	; (800ff78 <find_volume+0x490>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d113      	bne.n	800ff46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	3330      	adds	r3, #48	; 0x30
 800ff22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe fb1e 	bl	800e568 <ld_dword>
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	3330      	adds	r3, #48	; 0x30
 800ff36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fe fb14 	bl	800e568 <ld_dword>
 800ff40:	4602      	mov	r2, r0
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	; (800ff7c <find_volume+0x494>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	3301      	adds	r3, #1
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <find_volume+0x494>)
 800ff58:	801a      	strh	r2, [r3, #0]
 800ff5a:	4b08      	ldr	r3, [pc, #32]	; (800ff7c <find_volume+0x494>)
 800ff5c:	881a      	ldrh	r2, [r3, #0]
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff64:	f7fe fd30 	bl	800e9c8 <clear_lock>
#endif
	return FR_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3758      	adds	r7, #88	; 0x58
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	41615252 	.word	0x41615252
 800ff78:	61417272 	.word	0x61417272
 800ff7c:	200054b8 	.word	0x200054b8

0800ff80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ff8a:	2309      	movs	r3, #9
 800ff8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d01c      	beq.n	800ffce <validate+0x4e>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d018      	beq.n	800ffce <validate+0x4e>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d013      	beq.n	800ffce <validate+0x4e>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	889a      	ldrh	r2, [r3, #4]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	88db      	ldrh	r3, [r3, #6]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d10c      	bne.n	800ffce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	785b      	ldrb	r3, [r3, #1]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fe fa1c 	bl	800e3f8 <disk_status>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	f003 0301 	and.w	r3, r3, #1
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d101      	bne.n	800ffce <validate+0x4e>
			res = FR_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffce:	7bfb      	ldrb	r3, [r7, #15]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d102      	bne.n	800ffda <validate+0x5a>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	e000      	b.n	800ffdc <validate+0x5c>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	6013      	str	r3, [r2, #0]
	return res;
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
	...

0800ffec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b088      	sub	sp, #32
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	4613      	mov	r3, r2
 800fff8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fffe:	f107 0310 	add.w	r3, r7, #16
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff fcd5 	bl	800f9b2 <get_ldnumber>
 8010008:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	2b00      	cmp	r3, #0
 801000e:	da01      	bge.n	8010014 <f_mount+0x28>
 8010010:	230b      	movs	r3, #11
 8010012:	e02b      	b.n	801006c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010014:	4a17      	ldr	r2, [pc, #92]	; (8010074 <f_mount+0x88>)
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801001c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d005      	beq.n	8010030 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010024:	69b8      	ldr	r0, [r7, #24]
 8010026:	f7fe fccf 	bl	800e9c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	2200      	movs	r2, #0
 801002e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d002      	beq.n	801003c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	490d      	ldr	r1, [pc, #52]	; (8010074 <f_mount+0x88>)
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <f_mount+0x66>
 801004c:	79fb      	ldrb	r3, [r7, #7]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d001      	beq.n	8010056 <f_mount+0x6a>
 8010052:	2300      	movs	r3, #0
 8010054:	e00a      	b.n	801006c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010056:	f107 010c 	add.w	r1, r7, #12
 801005a:	f107 0308 	add.w	r3, r7, #8
 801005e:	2200      	movs	r2, #0
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fd41 	bl	800fae8 <find_volume>
 8010066:	4603      	mov	r3, r0
 8010068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801006a:	7dfb      	ldrb	r3, [r7, #23]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3720      	adds	r7, #32
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}
 8010074:	200054b4 	.word	0x200054b4

08010078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b098      	sub	sp, #96	; 0x60
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	4613      	mov	r3, r2
 8010084:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <f_open+0x18>
 801008c:	2309      	movs	r3, #9
 801008e:	e1ad      	b.n	80103ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010096:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010098:	79fa      	ldrb	r2, [r7, #7]
 801009a:	f107 0110 	add.w	r1, r7, #16
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff fd20 	bl	800fae8 <find_volume>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80100ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f040 8191 	bne.w	80103da <f_open+0x362>
		dj.obj.fs = fs;
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80100bc:	68ba      	ldr	r2, [r7, #8]
 80100be:	f107 0314 	add.w	r3, r7, #20
 80100c2:	4611      	mov	r1, r2
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff fc03 	bl	800f8d0 <follow_path>
 80100ca:	4603      	mov	r3, r0
 80100cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80100d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d11a      	bne.n	801010e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80100d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100dc:	b25b      	sxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	da03      	bge.n	80100ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80100e2:	2306      	movs	r3, #6
 80100e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100e8:	e011      	b.n	801010e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	f023 0301 	bic.w	r3, r3, #1
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	bf14      	ite	ne
 80100f4:	2301      	movne	r3, #1
 80100f6:	2300      	moveq	r3, #0
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	461a      	mov	r2, r3
 80100fc:	f107 0314 	add.w	r3, r7, #20
 8010100:	4611      	mov	r1, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fb18 	bl	800e738 <chk_lock>
 8010108:	4603      	mov	r3, r0
 801010a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801010e:	79fb      	ldrb	r3, [r7, #7]
 8010110:	f003 031c 	and.w	r3, r3, #28
 8010114:	2b00      	cmp	r3, #0
 8010116:	d07f      	beq.n	8010218 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801011c:	2b00      	cmp	r3, #0
 801011e:	d017      	beq.n	8010150 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010124:	2b04      	cmp	r3, #4
 8010126:	d10e      	bne.n	8010146 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010128:	f7fe fb62 	bl	800e7f0 <enq_lock>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d006      	beq.n	8010140 <f_open+0xc8>
 8010132:	f107 0314 	add.w	r3, r7, #20
 8010136:	4618      	mov	r0, r3
 8010138:	f7ff faa4 	bl	800f684 <dir_register>
 801013c:	4603      	mov	r3, r0
 801013e:	e000      	b.n	8010142 <f_open+0xca>
 8010140:	2312      	movs	r3, #18
 8010142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010146:	79fb      	ldrb	r3, [r7, #7]
 8010148:	f043 0308 	orr.w	r3, r3, #8
 801014c:	71fb      	strb	r3, [r7, #7]
 801014e:	e010      	b.n	8010172 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010150:	7ebb      	ldrb	r3, [r7, #26]
 8010152:	f003 0311 	and.w	r3, r3, #17
 8010156:	2b00      	cmp	r3, #0
 8010158:	d003      	beq.n	8010162 <f_open+0xea>
					res = FR_DENIED;
 801015a:	2307      	movs	r3, #7
 801015c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010160:	e007      	b.n	8010172 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010162:	79fb      	ldrb	r3, [r7, #7]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	d002      	beq.n	8010172 <f_open+0xfa>
 801016c:	2308      	movs	r3, #8
 801016e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010176:	2b00      	cmp	r3, #0
 8010178:	d168      	bne.n	801024c <f_open+0x1d4>
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	f003 0308 	and.w	r3, r3, #8
 8010180:	2b00      	cmp	r3, #0
 8010182:	d063      	beq.n	801024c <f_open+0x1d4>
				dw = GET_FATTIME();
 8010184:	f7f9 fb42 	bl	800980c <get_fattime>
 8010188:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801018a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018c:	330e      	adds	r3, #14
 801018e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010190:	4618      	mov	r0, r3
 8010192:	f7fe fa27 	bl	800e5e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010198:	3316      	adds	r3, #22
 801019a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801019c:	4618      	mov	r0, r3
 801019e:	f7fe fa21 	bl	800e5e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a4:	330b      	adds	r3, #11
 80101a6:	2220      	movs	r2, #32
 80101a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ae:	4611      	mov	r1, r2
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7ff f976 	bl	800f4a2 <ld_clust>
 80101b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101bc:	2200      	movs	r2, #0
 80101be:	4618      	mov	r0, r3
 80101c0:	f7ff f98e 	bl	800f4e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c6:	331c      	adds	r3, #28
 80101c8:	2100      	movs	r1, #0
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fe fa0a 	bl	800e5e4 <st_dword>
					fs->wflag = 1;
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	2201      	movs	r2, #1
 80101d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80101d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d037      	beq.n	801024c <f_open+0x1d4>
						dw = fs->winsect;
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80101e2:	f107 0314 	add.w	r3, r7, #20
 80101e6:	2200      	movs	r2, #0
 80101e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe fea1 	bl	800ef32 <remove_chain>
 80101f0:	4603      	mov	r3, r0
 80101f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80101f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d126      	bne.n	801024c <f_open+0x1d4>
							res = move_window(fs, dw);
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010202:	4618      	mov	r0, r3
 8010204:	f7fe fc48 	bl	800ea98 <move_window>
 8010208:	4603      	mov	r3, r0
 801020a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010212:	3a01      	subs	r2, #1
 8010214:	60da      	str	r2, [r3, #12]
 8010216:	e019      	b.n	801024c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801021c:	2b00      	cmp	r3, #0
 801021e:	d115      	bne.n	801024c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010220:	7ebb      	ldrb	r3, [r7, #26]
 8010222:	f003 0310 	and.w	r3, r3, #16
 8010226:	2b00      	cmp	r3, #0
 8010228:	d003      	beq.n	8010232 <f_open+0x1ba>
					res = FR_NO_FILE;
 801022a:	2304      	movs	r3, #4
 801022c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010230:	e00c      	b.n	801024c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	f003 0302 	and.w	r3, r3, #2
 8010238:	2b00      	cmp	r3, #0
 801023a:	d007      	beq.n	801024c <f_open+0x1d4>
 801023c:	7ebb      	ldrb	r3, [r7, #26]
 801023e:	f003 0301 	and.w	r3, r3, #1
 8010242:	2b00      	cmp	r3, #0
 8010244:	d002      	beq.n	801024c <f_open+0x1d4>
						res = FR_DENIED;
 8010246:	2307      	movs	r3, #7
 8010248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801024c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d128      	bne.n	80102a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010254:	79fb      	ldrb	r3, [r7, #7]
 8010256:	f003 0308 	and.w	r3, r3, #8
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801025e:	79fb      	ldrb	r3, [r7, #7]
 8010260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010264:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801026e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	f023 0301 	bic.w	r3, r3, #1
 801027a:	2b00      	cmp	r3, #0
 801027c:	bf14      	ite	ne
 801027e:	2301      	movne	r3, #1
 8010280:	2300      	moveq	r3, #0
 8010282:	b2db      	uxtb	r3, r3
 8010284:	461a      	mov	r2, r3
 8010286:	f107 0314 	add.w	r3, r7, #20
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f7fe fad1 	bl	800e834 <inc_lock>
 8010292:	4602      	mov	r2, r0
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d102      	bne.n	80102a6 <f_open+0x22e>
 80102a0:	2302      	movs	r3, #2
 80102a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f040 8095 	bne.w	80103da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b4:	4611      	mov	r1, r2
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff f8f3 	bl	800f4a2 <ld_clust>
 80102bc:	4602      	mov	r2, r0
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c4:	331c      	adds	r3, #28
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe f94e 	bl	800e568 <ld_dword>
 80102cc:	4602      	mov	r2, r0
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2200      	movs	r2, #0
 80102d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	88da      	ldrh	r2, [r3, #6]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	79fa      	ldrb	r2, [r7, #7]
 80102ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2200      	movs	r2, #0
 80102fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	3330      	adds	r3, #48	; 0x30
 8010302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010306:	2100      	movs	r1, #0
 8010308:	4618      	mov	r0, r3
 801030a:	f7fe f9b8 	bl	800e67e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801030e:	79fb      	ldrb	r3, [r7, #7]
 8010310:	f003 0320 	and.w	r3, r3, #32
 8010314:	2b00      	cmp	r3, #0
 8010316:	d060      	beq.n	80103da <f_open+0x362>
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d05c      	beq.n	80103da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	68da      	ldr	r2, [r3, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	895b      	ldrh	r3, [r3, #10]
 801032c:	025b      	lsls	r3, r3, #9
 801032e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	657b      	str	r3, [r7, #84]	; 0x54
 801033c:	e016      	b.n	801036c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010342:	4618      	mov	r0, r3
 8010344:	f7fe fc63 	bl	800ec0e <get_fat>
 8010348:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801034a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801034c:	2b01      	cmp	r3, #1
 801034e:	d802      	bhi.n	8010356 <f_open+0x2de>
 8010350:	2302      	movs	r3, #2
 8010352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035c:	d102      	bne.n	8010364 <f_open+0x2ec>
 801035e:	2301      	movs	r3, #1
 8010360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	657b      	str	r3, [r7, #84]	; 0x54
 801036c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010370:	2b00      	cmp	r3, #0
 8010372:	d103      	bne.n	801037c <f_open+0x304>
 8010374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010378:	429a      	cmp	r2, r3
 801037a:	d8e0      	bhi.n	801033e <f_open+0x2c6>
				}
				fp->clust = clst;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010380:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010386:	2b00      	cmp	r3, #0
 8010388:	d127      	bne.n	80103da <f_open+0x362>
 801038a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801038c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010390:	2b00      	cmp	r3, #0
 8010392:	d022      	beq.n	80103da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010398:	4618      	mov	r0, r3
 801039a:	f7fe fc19 	bl	800ebd0 <clust2sect>
 801039e:	6478      	str	r0, [r7, #68]	; 0x44
 80103a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d103      	bne.n	80103ae <f_open+0x336>
						res = FR_INT_ERR;
 80103a6:	2302      	movs	r3, #2
 80103a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103ac:	e015      	b.n	80103da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b0:	0a5a      	lsrs	r2, r3, #9
 80103b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b4:	441a      	add	r2, r3
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	7858      	ldrb	r0, [r3, #1]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6a1a      	ldr	r2, [r3, #32]
 80103c8:	2301      	movs	r3, #1
 80103ca:	f7fe f857 	bl	800e47c <disk_read>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d002      	beq.n	80103da <f_open+0x362>
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80103da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d002      	beq.n	80103e8 <f_open+0x370>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3760      	adds	r7, #96	; 0x60
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08e      	sub	sp, #56	; 0x38
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
 8010400:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f107 0214 	add.w	r2, r7, #20
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fdb3 	bl	800ff80 <validate>
 801041a:	4603      	mov	r3, r0
 801041c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010420:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010424:	2b00      	cmp	r3, #0
 8010426:	d107      	bne.n	8010438 <f_read+0x44>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	7d5b      	ldrb	r3, [r3, #21]
 801042c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010434:	2b00      	cmp	r3, #0
 8010436:	d002      	beq.n	801043e <f_read+0x4a>
 8010438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801043c:	e115      	b.n	801066a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	7d1b      	ldrb	r3, [r3, #20]
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d101      	bne.n	801044e <f_read+0x5a>
 801044a:	2307      	movs	r3, #7
 801044c:	e10d      	b.n	801066a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	68da      	ldr	r2, [r3, #12]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	6a3b      	ldr	r3, [r7, #32]
 801045e:	429a      	cmp	r2, r3
 8010460:	f240 80fe 	bls.w	8010660 <f_read+0x26c>
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010468:	e0fa      	b.n	8010660 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	699b      	ldr	r3, [r3, #24]
 801046e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010472:	2b00      	cmp	r3, #0
 8010474:	f040 80c6 	bne.w	8010604 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	699b      	ldr	r3, [r3, #24]
 801047c:	0a5b      	lsrs	r3, r3, #9
 801047e:	697a      	ldr	r2, [r7, #20]
 8010480:	8952      	ldrh	r2, [r2, #10]
 8010482:	3a01      	subs	r2, #1
 8010484:	4013      	ands	r3, r2
 8010486:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d12f      	bne.n	80104ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d103      	bne.n	801049e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	633b      	str	r3, [r7, #48]	; 0x30
 801049c:	e013      	b.n	80104c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d007      	beq.n	80104b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	4619      	mov	r1, r3
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7fe fe3d 	bl	800f12c <clmt_clust>
 80104b2:	6338      	str	r0, [r7, #48]	; 0x30
 80104b4:	e007      	b.n	80104c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	4619      	mov	r1, r3
 80104be:	4610      	mov	r0, r2
 80104c0:	f7fe fba5 	bl	800ec0e <get_fat>
 80104c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d804      	bhi.n	80104d6 <f_read+0xe2>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2202      	movs	r2, #2
 80104d0:	755a      	strb	r2, [r3, #21]
 80104d2:	2302      	movs	r3, #2
 80104d4:	e0c9      	b.n	801066a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104dc:	d104      	bne.n	80104e8 <f_read+0xf4>
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2201      	movs	r2, #1
 80104e2:	755a      	strb	r2, [r3, #21]
 80104e4:	2301      	movs	r3, #1
 80104e6:	e0c0      	b.n	801066a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80104ee:	697a      	ldr	r2, [r7, #20]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	69db      	ldr	r3, [r3, #28]
 80104f4:	4619      	mov	r1, r3
 80104f6:	4610      	mov	r0, r2
 80104f8:	f7fe fb6a 	bl	800ebd0 <clust2sect>
 80104fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d104      	bne.n	801050e <f_read+0x11a>
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2202      	movs	r2, #2
 8010508:	755a      	strb	r2, [r3, #21]
 801050a:	2302      	movs	r3, #2
 801050c:	e0ad      	b.n	801066a <f_read+0x276>
			sect += csect;
 801050e:	69ba      	ldr	r2, [r7, #24]
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	4413      	add	r3, r2
 8010514:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	0a5b      	lsrs	r3, r3, #9
 801051a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051e:	2b00      	cmp	r3, #0
 8010520:	d039      	beq.n	8010596 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010522:	69fa      	ldr	r2, [r7, #28]
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	4413      	add	r3, r2
 8010528:	697a      	ldr	r2, [r7, #20]
 801052a:	8952      	ldrh	r2, [r2, #10]
 801052c:	4293      	cmp	r3, r2
 801052e:	d905      	bls.n	801053c <f_read+0x148>
					cc = fs->csize - csect;
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	895b      	ldrh	r3, [r3, #10]
 8010534:	461a      	mov	r2, r3
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	7858      	ldrb	r0, [r3, #1]
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	69ba      	ldr	r2, [r7, #24]
 8010544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010546:	f7fd ff99 	bl	800e47c <disk_read>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d004      	beq.n	801055a <f_read+0x166>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2201      	movs	r2, #1
 8010554:	755a      	strb	r2, [r3, #21]
 8010556:	2301      	movs	r3, #1
 8010558:	e087      	b.n	801066a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	7d1b      	ldrb	r3, [r3, #20]
 801055e:	b25b      	sxtb	r3, r3
 8010560:	2b00      	cmp	r3, #0
 8010562:	da14      	bge.n	801058e <f_read+0x19a>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6a1a      	ldr	r2, [r3, #32]
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801056e:	429a      	cmp	r2, r3
 8010570:	d90d      	bls.n	801058e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6a1a      	ldr	r2, [r3, #32]
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	025b      	lsls	r3, r3, #9
 801057c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801057e:	18d0      	adds	r0, r2, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	3330      	adds	r3, #48	; 0x30
 8010584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010588:	4619      	mov	r1, r3
 801058a:	f7fe f857 	bl	800e63c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010590:	025b      	lsls	r3, r3, #9
 8010592:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010594:	e050      	b.n	8010638 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6a1b      	ldr	r3, [r3, #32]
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	429a      	cmp	r2, r3
 801059e:	d02e      	beq.n	80105fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	b25b      	sxtb	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	da18      	bge.n	80105dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	7858      	ldrb	r0, [r3, #1]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6a1a      	ldr	r2, [r3, #32]
 80105b8:	2301      	movs	r3, #1
 80105ba:	f7fd ff7f 	bl	800e4bc <disk_write>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d004      	beq.n	80105ce <f_read+0x1da>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2201      	movs	r2, #1
 80105c8:	755a      	strb	r2, [r3, #21]
 80105ca:	2301      	movs	r3, #1
 80105cc:	e04d      	b.n	801066a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	7d1b      	ldrb	r3, [r3, #20]
 80105d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105d6:	b2da      	uxtb	r2, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	7858      	ldrb	r0, [r3, #1]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105e6:	2301      	movs	r3, #1
 80105e8:	69ba      	ldr	r2, [r7, #24]
 80105ea:	f7fd ff47 	bl	800e47c <disk_read>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d004      	beq.n	80105fe <f_read+0x20a>
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2201      	movs	r2, #1
 80105f8:	755a      	strb	r2, [r3, #21]
 80105fa:	2301      	movs	r3, #1
 80105fc:	e035      	b.n	801066a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801060c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	429a      	cmp	r2, r3
 8010618:	d901      	bls.n	801061e <f_read+0x22a>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	699b      	ldr	r3, [r3, #24]
 8010628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801062c:	4413      	add	r3, r2
 801062e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010630:	4619      	mov	r1, r3
 8010632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010634:	f7fe f802 	bl	800e63c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063c:	4413      	add	r3, r2
 801063e:	627b      	str	r3, [r7, #36]	; 0x24
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	699a      	ldr	r2, [r3, #24]
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	441a      	add	r2, r3
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	619a      	str	r2, [r3, #24]
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010652:	441a      	add	r2, r3
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	601a      	str	r2, [r3, #0]
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f47f af01 	bne.w	801046a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	3738      	adds	r7, #56	; 0x38
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b08c      	sub	sp, #48	; 0x30
 8010676:	af00      	add	r7, sp, #0
 8010678:	60f8      	str	r0, [r7, #12]
 801067a:	60b9      	str	r1, [r7, #8]
 801067c:	607a      	str	r2, [r7, #4]
 801067e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	2200      	movs	r2, #0
 8010688:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f107 0210 	add.w	r2, r7, #16
 8010690:	4611      	mov	r1, r2
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff fc74 	bl	800ff80 <validate>
 8010698:	4603      	mov	r3, r0
 801069a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801069e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d107      	bne.n	80106b6 <f_write+0x44>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	7d5b      	ldrb	r3, [r3, #21]
 80106aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d002      	beq.n	80106bc <f_write+0x4a>
 80106b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ba:	e14b      	b.n	8010954 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	7d1b      	ldrb	r3, [r3, #20]
 80106c0:	f003 0302 	and.w	r3, r3, #2
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d101      	bne.n	80106cc <f_write+0x5a>
 80106c8:	2307      	movs	r3, #7
 80106ca:	e143      	b.n	8010954 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	699a      	ldr	r2, [r3, #24]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	441a      	add	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	429a      	cmp	r2, r3
 80106da:	f080 812d 	bcs.w	8010938 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	699b      	ldr	r3, [r3, #24]
 80106e2:	43db      	mvns	r3, r3
 80106e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80106e6:	e127      	b.n	8010938 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	699b      	ldr	r3, [r3, #24]
 80106ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f040 80e3 	bne.w	80108bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	699b      	ldr	r3, [r3, #24]
 80106fa:	0a5b      	lsrs	r3, r3, #9
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	8952      	ldrh	r2, [r2, #10]
 8010700:	3a01      	subs	r2, #1
 8010702:	4013      	ands	r3, r2
 8010704:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d143      	bne.n	8010794 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10c      	bne.n	801072e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	689b      	ldr	r3, [r3, #8]
 8010718:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071c:	2b00      	cmp	r3, #0
 801071e:	d11a      	bne.n	8010756 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2100      	movs	r1, #0
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe fc69 	bl	800effc <create_chain>
 801072a:	62b8      	str	r0, [r7, #40]	; 0x28
 801072c:	e013      	b.n	8010756 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d007      	beq.n	8010746 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	4619      	mov	r1, r3
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f7fe fcf5 	bl	800f12c <clmt_clust>
 8010742:	62b8      	str	r0, [r7, #40]	; 0x28
 8010744:	e007      	b.n	8010756 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	4619      	mov	r1, r3
 801074e:	4610      	mov	r0, r2
 8010750:	f7fe fc54 	bl	800effc <create_chain>
 8010754:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010758:	2b00      	cmp	r3, #0
 801075a:	f000 80f2 	beq.w	8010942 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	2b01      	cmp	r3, #1
 8010762:	d104      	bne.n	801076e <f_write+0xfc>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2202      	movs	r2, #2
 8010768:	755a      	strb	r2, [r3, #21]
 801076a:	2302      	movs	r3, #2
 801076c:	e0f2      	b.n	8010954 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010774:	d104      	bne.n	8010780 <f_write+0x10e>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2201      	movs	r2, #1
 801077a:	755a      	strb	r2, [r3, #21]
 801077c:	2301      	movs	r3, #1
 801077e:	e0e9      	b.n	8010954 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010784:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d102      	bne.n	8010794 <f_write+0x122>
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010792:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	7d1b      	ldrb	r3, [r3, #20]
 8010798:	b25b      	sxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da18      	bge.n	80107d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	7858      	ldrb	r0, [r3, #1]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	2301      	movs	r3, #1
 80107ae:	f7fd fe85 	bl	800e4bc <disk_write>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <f_write+0x150>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2201      	movs	r2, #1
 80107bc:	755a      	strb	r2, [r3, #21]
 80107be:	2301      	movs	r3, #1
 80107c0:	e0c8      	b.n	8010954 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	7d1b      	ldrb	r3, [r3, #20]
 80107c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	69db      	ldr	r3, [r3, #28]
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7fe f9f9 	bl	800ebd0 <clust2sect>
 80107de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d104      	bne.n	80107f0 <f_write+0x17e>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2202      	movs	r2, #2
 80107ea:	755a      	strb	r2, [r3, #21]
 80107ec:	2302      	movs	r3, #2
 80107ee:	e0b1      	b.n	8010954 <f_write+0x2e2>
			sect += csect;
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	4413      	add	r3, r2
 80107f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	0a5b      	lsrs	r3, r3, #9
 80107fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d03c      	beq.n	801087e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	6a3b      	ldr	r3, [r7, #32]
 8010808:	4413      	add	r3, r2
 801080a:	693a      	ldr	r2, [r7, #16]
 801080c:	8952      	ldrh	r2, [r2, #10]
 801080e:	4293      	cmp	r3, r2
 8010810:	d905      	bls.n	801081e <f_write+0x1ac>
					cc = fs->csize - csect;
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	895b      	ldrh	r3, [r3, #10]
 8010816:	461a      	mov	r2, r3
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	7858      	ldrb	r0, [r3, #1]
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	69f9      	ldr	r1, [r7, #28]
 8010828:	f7fd fe48 	bl	800e4bc <disk_write>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d004      	beq.n	801083c <f_write+0x1ca>
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2201      	movs	r2, #1
 8010836:	755a      	strb	r2, [r3, #21]
 8010838:	2301      	movs	r3, #1
 801083a:	e08b      	b.n	8010954 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6a1a      	ldr	r2, [r3, #32]
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	6a3a      	ldr	r2, [r7, #32]
 8010846:	429a      	cmp	r2, r3
 8010848:	d915      	bls.n	8010876 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6a1a      	ldr	r2, [r3, #32]
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	025b      	lsls	r3, r3, #9
 801085a:	69fa      	ldr	r2, [r7, #28]
 801085c:	4413      	add	r3, r2
 801085e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010862:	4619      	mov	r1, r3
 8010864:	f7fd feea 	bl	800e63c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
 801086c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010870:	b2da      	uxtb	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	025b      	lsls	r3, r3, #9
 801087a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801087c:	e03f      	b.n	80108fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	429a      	cmp	r2, r3
 8010886:	d016      	beq.n	80108b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	699a      	ldr	r2, [r3, #24]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010890:	429a      	cmp	r2, r3
 8010892:	d210      	bcs.n	80108b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	7858      	ldrb	r0, [r3, #1]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801089e:	2301      	movs	r3, #1
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	f7fd fdeb 	bl	800e47c <disk_read>
 80108a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d004      	beq.n	80108b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2201      	movs	r2, #1
 80108b0:	755a      	strb	r2, [r3, #21]
 80108b2:	2301      	movs	r3, #1
 80108b4:	e04e      	b.n	8010954 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	699b      	ldr	r3, [r3, #24]
 80108c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80108c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80108ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d901      	bls.n	80108d6 <f_write+0x264>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e4:	4413      	add	r3, r2
 80108e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108e8:	69f9      	ldr	r1, [r7, #28]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fd fea6 	bl	800e63c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	7d1b      	ldrb	r3, [r3, #20]
 80108f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80108f8:	b2da      	uxtb	r2, r3
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80108fe:	69fa      	ldr	r2, [r7, #28]
 8010900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010902:	4413      	add	r3, r2
 8010904:	61fb      	str	r3, [r7, #28]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	699a      	ldr	r2, [r3, #24]
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	441a      	add	r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	619a      	str	r2, [r3, #24]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	429a      	cmp	r2, r3
 801091c:	bf38      	it	cc
 801091e:	461a      	movcc	r2, r3
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	60da      	str	r2, [r3, #12]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	441a      	add	r2, r3
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	601a      	str	r2, [r3, #0]
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f47f aed4 	bne.w	80106e8 <f_write+0x76>
 8010940:	e000      	b.n	8010944 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010942:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	7d1b      	ldrb	r3, [r3, #20]
 8010948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094c:	b2da      	uxtb	r2, r3
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3730      	adds	r7, #48	; 0x30
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b086      	sub	sp, #24
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f107 0208 	add.w	r2, r7, #8
 801096a:	4611      	mov	r1, r2
 801096c:	4618      	mov	r0, r3
 801096e:	f7ff fb07 	bl	800ff80 <validate>
 8010972:	4603      	mov	r3, r0
 8010974:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d168      	bne.n	8010a4e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	7d1b      	ldrb	r3, [r3, #20]
 8010980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010984:	2b00      	cmp	r3, #0
 8010986:	d062      	beq.n	8010a4e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	7d1b      	ldrb	r3, [r3, #20]
 801098c:	b25b      	sxtb	r3, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	da15      	bge.n	80109be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	7858      	ldrb	r0, [r3, #1]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a1a      	ldr	r2, [r3, #32]
 80109a0:	2301      	movs	r3, #1
 80109a2:	f7fd fd8b 	bl	800e4bc <disk_write>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d001      	beq.n	80109b0 <f_sync+0x54>
 80109ac:	2301      	movs	r3, #1
 80109ae:	e04f      	b.n	8010a50 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	7d1b      	ldrb	r3, [r3, #20]
 80109b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109be:	f7f8 ff25 	bl	800980c <get_fattime>
 80109c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ca:	4619      	mov	r1, r3
 80109cc:	4610      	mov	r0, r2
 80109ce:	f7fe f863 	bl	800ea98 <move_window>
 80109d2:	4603      	mov	r3, r0
 80109d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d138      	bne.n	8010a4e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	330b      	adds	r3, #11
 80109e6:	781a      	ldrb	r2, [r3, #0]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	330b      	adds	r3, #11
 80109ec:	f042 0220 	orr.w	r2, r2, #32
 80109f0:	b2d2      	uxtb	r2, r2
 80109f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6818      	ldr	r0, [r3, #0]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	461a      	mov	r2, r3
 80109fe:	68f9      	ldr	r1, [r7, #12]
 8010a00:	f7fe fd6e 	bl	800f4e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f103 021c 	add.w	r2, r3, #28
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	4619      	mov	r1, r3
 8010a10:	4610      	mov	r0, r2
 8010a12:	f7fd fde7 	bl	800e5e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	3316      	adds	r3, #22
 8010a1a:	6939      	ldr	r1, [r7, #16]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7fd fde1 	bl	800e5e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3312      	adds	r3, #18
 8010a26:	2100      	movs	r1, #0
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fd fdc0 	bl	800e5ae <st_word>
					fs->wflag = 1;
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	2201      	movs	r2, #1
 8010a32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fe f85c 	bl	800eaf4 <sync_fs>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	7d1b      	ldrb	r3, [r3, #20]
 8010a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3718      	adds	r7, #24
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ff7b 	bl	801095c <f_sync>
 8010a66:	4603      	mov	r3, r0
 8010a68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a6a:	7bfb      	ldrb	r3, [r7, #15]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d118      	bne.n	8010aa2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f107 0208 	add.w	r2, r7, #8
 8010a76:	4611      	mov	r1, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7ff fa81 	bl	800ff80 <validate>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d10c      	bne.n	8010aa2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fd ff5f 	bl	800e950 <dec_lock>
 8010a92:	4603      	mov	r3, r0
 8010a94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d102      	bne.n	8010aa2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d101      	bne.n	8010ac0 <f_opendir+0x14>
 8010abc:	2309      	movs	r3, #9
 8010abe:	e064      	b.n	8010b8a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010ac4:	f107 010c 	add.w	r1, r7, #12
 8010ac8:	463b      	mov	r3, r7
 8010aca:	2200      	movs	r2, #0
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff f80b 	bl	800fae8 <find_volume>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ad6:	7dfb      	ldrb	r3, [r7, #23]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d14f      	bne.n	8010b7c <f_opendir+0xd0>
		obj->fs = fs;
 8010adc:	68fa      	ldr	r2, [r7, #12]
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7fe fef2 	bl	800f8d0 <follow_path>
 8010aec:	4603      	mov	r3, r0
 8010aee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010af0:	7dfb      	ldrb	r3, [r7, #23]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d13d      	bne.n	8010b72 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010afc:	b25b      	sxtb	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	db12      	blt.n	8010b28 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	799b      	ldrb	r3, [r3, #6]
 8010b06:	f003 0310 	and.w	r3, r3, #16
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00a      	beq.n	8010b24 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6a1b      	ldr	r3, [r3, #32]
 8010b14:	4619      	mov	r1, r3
 8010b16:	4610      	mov	r0, r2
 8010b18:	f7fe fcc3 	bl	800f4a2 <ld_clust>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	609a      	str	r2, [r3, #8]
 8010b22:	e001      	b.n	8010b28 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010b24:	2305      	movs	r3, #5
 8010b26:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010b28:	7dfb      	ldrb	r3, [r7, #23]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d121      	bne.n	8010b72 <f_opendir+0xc6>
				obj->id = fs->id;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	88da      	ldrh	r2, [r3, #6]
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010b36:	2100      	movs	r1, #0
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7fe fb2b 	bl	800f194 <dir_sdi>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010b42:	7dfb      	ldrb	r3, [r7, #23]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d114      	bne.n	8010b72 <f_opendir+0xc6>
					if (obj->sclust) {
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	689b      	ldr	r3, [r3, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d00d      	beq.n	8010b6c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010b50:	2100      	movs	r1, #0
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7fd fe6e 	bl	800e834 <inc_lock>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d105      	bne.n	8010b72 <f_opendir+0xc6>
 8010b66:	2312      	movs	r3, #18
 8010b68:	75fb      	strb	r3, [r7, #23]
 8010b6a:	e002      	b.n	8010b72 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
 8010b74:	2b04      	cmp	r3, #4
 8010b76:	d101      	bne.n	8010b7c <f_opendir+0xd0>
 8010b78:	2305      	movs	r3, #5
 8010b7a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d002      	beq.n	8010b88 <f_opendir+0xdc>
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	2200      	movs	r2, #0
 8010b86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3718      	adds	r7, #24
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b084      	sub	sp, #16
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f107 0208 	add.w	r2, r7, #8
 8010ba2:	4611      	mov	r1, r2
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff f9eb 	bl	800ff80 <validate>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d126      	bne.n	8010c02 <f_readdir+0x70>
		if (!fno) {
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d106      	bne.n	8010bc8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010bba:	2100      	movs	r1, #0
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fe fae9 	bl	800f194 <dir_sdi>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	73fb      	strb	r3, [r7, #15]
 8010bc6:	e01c      	b.n	8010c02 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010bc8:	2100      	movs	r1, #0
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7fe fca8 	bl	800f520 <dir_read>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010bd4:	7bfb      	ldrb	r3, [r7, #15]
 8010bd6:	2b04      	cmp	r3, #4
 8010bd8:	d101      	bne.n	8010bde <f_readdir+0x4c>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d10e      	bne.n	8010c02 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010be4:	6839      	ldr	r1, [r7, #0]
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7fe fd7e 	bl	800f6e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010bec:	2100      	movs	r1, #0
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7fe fb4b 	bl	800f28a <dir_next>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010bf8:	7bfb      	ldrb	r3, [r7, #15]
 8010bfa:	2b04      	cmp	r3, #4
 8010bfc:	d101      	bne.n	8010c02 <f_readdir+0x70>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b096      	sub	sp, #88	; 0x58
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010c14:	f107 0108 	add.w	r1, r7, #8
 8010c18:	1d3b      	adds	r3, r7, #4
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe ff63 	bl	800fae8 <find_volume>
 8010c22:	4603      	mov	r3, r0
 8010c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f040 80ec 	bne.w	8010e0e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	f107 030c 	add.w	r3, r7, #12
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fe fe46 	bl	800f8d0 <follow_path>
 8010c44:	4603      	mov	r3, r0
 8010c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d102      	bne.n	8010c58 <f_mkdir+0x4c>
 8010c52:	2308      	movs	r3, #8
 8010c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c5c:	2b04      	cmp	r3, #4
 8010c5e:	f040 80d6 	bne.w	8010e0e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010c62:	f107 030c 	add.w	r3, r7, #12
 8010c66:	2100      	movs	r1, #0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fe f9c7 	bl	800effc <create_chain>
 8010c6e:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	895b      	ldrh	r3, [r3, #10]
 8010c74:	025b      	lsls	r3, r3, #9
 8010c76:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d102      	bne.n	8010c8a <f_mkdir+0x7e>
 8010c84:	2307      	movs	r3, #7
 8010c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d102      	bne.n	8010c96 <f_mkdir+0x8a>
 8010c90:	2302      	movs	r3, #2
 8010c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9c:	d102      	bne.n	8010ca4 <f_mkdir+0x98>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d106      	bne.n	8010cba <f_mkdir+0xae>
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fd feae 	bl	800ea10 <sync_window>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8010cba:	f7f8 fda7 	bl	800980c <get_fattime>
 8010cbe:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d16a      	bne.n	8010d9e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fd ff7f 	bl	800ebd0 <clust2sect>
 8010cd2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	3330      	adds	r3, #48	; 0x30
 8010cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8010cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cde:	2100      	movs	r1, #0
 8010ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ce2:	f7fd fccc 	bl	800e67e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010ce6:	220b      	movs	r2, #11
 8010ce8:	2120      	movs	r1, #32
 8010cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cec:	f7fd fcc7 	bl	800e67e <mem_set>
					dir[DIR_Name] = '.';
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	222e      	movs	r2, #46	; 0x2e
 8010cf4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf8:	330b      	adds	r3, #11
 8010cfa:	2210      	movs	r2, #16
 8010cfc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d00:	3316      	adds	r3, #22
 8010d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fd fc6d 	bl	800e5e4 <st_dword>
					st_clust(fs, dir, dcl);
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fe fbe5 	bl	800f4e0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d18:	3320      	adds	r3, #32
 8010d1a:	2220      	movs	r2, #32
 8010d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fd fc8c 	bl	800e63c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d26:	3321      	adds	r3, #33	; 0x21
 8010d28:	222e      	movs	r2, #46	; 0x2e
 8010d2a:	701a      	strb	r2, [r3, #0]
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d106      	bne.n	8010d46 <f_mkdir+0x13a>
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d101      	bne.n	8010d46 <f_mkdir+0x13a>
 8010d42:	2300      	movs	r3, #0
 8010d44:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010d46:	68b8      	ldr	r0, [r7, #8]
 8010d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d4a:	3320      	adds	r3, #32
 8010d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d4e:	4619      	mov	r1, r3
 8010d50:	f7fe fbc6 	bl	800f4e0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	895b      	ldrh	r3, [r3, #10]
 8010d58:	653b      	str	r3, [r7, #80]	; 0x50
 8010d5a:	e01b      	b.n	8010d94 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8010d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d5e:	1c5a      	adds	r2, r3, #1
 8010d60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fd fe4e 	bl	800ea10 <sync_window>
 8010d74:	4603      	mov	r3, r0
 8010d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8010d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d10c      	bne.n	8010d9c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8010d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d86:	2100      	movs	r1, #0
 8010d88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d8a:	f7fd fc78 	bl	800e67e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d90:	3b01      	subs	r3, #1
 8010d92:	653b      	str	r3, [r7, #80]	; 0x50
 8010d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1e0      	bne.n	8010d5c <f_mkdir+0x150>
 8010d9a:	e000      	b.n	8010d9e <f_mkdir+0x192>
					if (res != FR_OK) break;
 8010d9c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d107      	bne.n	8010db6 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010da6:	f107 030c 	add.w	r3, r7, #12
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fe fc6a 	bl	800f684 <dir_register>
 8010db0:	4603      	mov	r3, r0
 8010db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8010db6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d120      	bne.n	8010e00 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc4:	3316      	adds	r3, #22
 8010dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7fd fc0b 	bl	800e5e4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fb83 	bl	800f4e0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ddc:	330b      	adds	r3, #11
 8010dde:	2210      	movs	r2, #16
 8010de0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2201      	movs	r2, #1
 8010de6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10e      	bne.n	8010e0e <f_mkdir+0x202>
					res = sync_fs(fs);
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fd fe7e 	bl	800eaf4 <sync_fs>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010dfe:	e006      	b.n	8010e0e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010e00:	f107 030c 	add.w	r3, r7, #12
 8010e04:	2200      	movs	r2, #0
 8010e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fe f892 	bl	800ef32 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3758      	adds	r7, #88	; 0x58
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
	...

08010e1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b087      	sub	sp, #28
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	4613      	mov	r3, r2
 8010e28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr <= _VOLUMES)
 8010e32:	4b1f      	ldr	r3, [pc, #124]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e34:	7a5b      	ldrb	r3, [r3, #9]
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d831      	bhi.n	8010ea0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010e3c:	4b1c      	ldr	r3, [pc, #112]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e3e:	7a5b      	ldrb	r3, [r3, #9]
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	461a      	mov	r2, r3
 8010e44:	4b1a      	ldr	r3, [pc, #104]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e46:	2100      	movs	r1, #0
 8010e48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010e4a:	4b19      	ldr	r3, [pc, #100]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e4c:	7a5b      	ldrb	r3, [r3, #9]
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	4a17      	ldr	r2, [pc, #92]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e5a:	4b15      	ldr	r3, [pc, #84]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e5c:	7a5b      	ldrb	r3, [r3, #9]
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	4b13      	ldr	r3, [pc, #76]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e64:	4413      	add	r3, r2
 8010e66:	79fa      	ldrb	r2, [r7, #7]
 8010e68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010e6a:	4b11      	ldr	r3, [pc, #68]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e6c:	7a5b      	ldrb	r3, [r3, #9]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	1c5a      	adds	r2, r3, #1
 8010e72:	b2d1      	uxtb	r1, r2
 8010e74:	4a0e      	ldr	r2, [pc, #56]	; (8010eb0 <FATFS_LinkDriverEx+0x94>)
 8010e76:	7251      	strb	r1, [r2, #9]
 8010e78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e7a:	7dbb      	ldrb	r3, [r7, #22]
 8010e7c:	3330      	adds	r3, #48	; 0x30
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	3301      	adds	r3, #1
 8010e88:	223a      	movs	r2, #58	; 0x3a
 8010e8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	3302      	adds	r3, #2
 8010e90:	222f      	movs	r2, #47	; 0x2f
 8010e92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	3303      	adds	r3, #3
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	371c      	adds	r7, #28
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	200054dc 	.word	0x200054dc

08010eb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	6839      	ldr	r1, [r7, #0]
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff ffaa 	bl	8010e1c <FATFS_LinkDriverEx>
 8010ec8:	4603      	mov	r3, r0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b083      	sub	sp, #12
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	4603      	mov	r3, r0
 8010eda:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010edc:	88fb      	ldrh	r3, [r7, #6]
 8010ede:	021b      	lsls	r3, r3, #8
 8010ee0:	b21a      	sxth	r2, r3
 8010ee2:	88fb      	ldrh	r3, [r7, #6]
 8010ee4:	0a1b      	lsrs	r3, r3, #8
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	b21b      	sxth	r3, r3
 8010eea:	4313      	orrs	r3, r2
 8010eec:	b21b      	sxth	r3, r3
 8010eee:	b29b      	uxth	r3, r3
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	061a      	lsls	r2, r3, #24
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	021b      	lsls	r3, r3, #8
 8010f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010f10:	431a      	orrs	r2, r3
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	0a1b      	lsrs	r3, r3, #8
 8010f16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010f1a:	431a      	orrs	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	0e1b      	lsrs	r3, r3, #24
 8010f20:	4313      	orrs	r3, r2
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b082      	sub	sp, #8
 8010f32:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010f34:	2300      	movs	r3, #0
 8010f36:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010f38:	f000 f8d4 	bl	80110e4 <mem_init>
  memp_init();
 8010f3c:	f000 fbda 	bl	80116f4 <memp_init>
  pbuf_init();
  netif_init();
 8010f40:	f000 fcd8 	bl	80118f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010f44:	f007 f854 	bl	8017ff0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010f48:	f001 fdae 	bl	8012aa8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010f4c:	f006 ffc6 	bl	8017edc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	4603      	mov	r3, r0
 8010f60:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010f62:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <ptr_to_mem+0x20>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	88fb      	ldrh	r3, [r7, #6]
 8010f68:	4413      	add	r3, r2
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	20005b54 	.word	0x20005b54

08010f7c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010f84:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <mem_to_ptr+0x20>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	b29b      	uxth	r3, r3
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	370c      	adds	r7, #12
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	20005b54 	.word	0x20005b54

08010fa0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010fa0:	b590      	push	{r4, r7, lr}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010fa8:	4b45      	ldr	r3, [pc, #276]	; (80110c0 <plug_holes+0x120>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d206      	bcs.n	8010fc0 <plug_holes+0x20>
 8010fb2:	4b44      	ldr	r3, [pc, #272]	; (80110c4 <plug_holes+0x124>)
 8010fb4:	f240 12df 	movw	r2, #479	; 0x1df
 8010fb8:	4943      	ldr	r1, [pc, #268]	; (80110c8 <plug_holes+0x128>)
 8010fba:	4844      	ldr	r0, [pc, #272]	; (80110cc <plug_holes+0x12c>)
 8010fbc:	f00a fc6a 	bl	801b894 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010fc0:	4b43      	ldr	r3, [pc, #268]	; (80110d0 <plug_holes+0x130>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d306      	bcc.n	8010fd8 <plug_holes+0x38>
 8010fca:	4b3e      	ldr	r3, [pc, #248]	; (80110c4 <plug_holes+0x124>)
 8010fcc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010fd0:	4940      	ldr	r1, [pc, #256]	; (80110d4 <plug_holes+0x134>)
 8010fd2:	483e      	ldr	r0, [pc, #248]	; (80110cc <plug_holes+0x12c>)
 8010fd4:	f00a fc5e 	bl	801b894 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	791b      	ldrb	r3, [r3, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <plug_holes+0x4e>
 8010fe0:	4b38      	ldr	r3, [pc, #224]	; (80110c4 <plug_holes+0x124>)
 8010fe2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010fe6:	493c      	ldr	r1, [pc, #240]	; (80110d8 <plug_holes+0x138>)
 8010fe8:	4838      	ldr	r0, [pc, #224]	; (80110cc <plug_holes+0x12c>)
 8010fea:	f00a fc53 	bl	801b894 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ff6:	d906      	bls.n	8011006 <plug_holes+0x66>
 8010ff8:	4b32      	ldr	r3, [pc, #200]	; (80110c4 <plug_holes+0x124>)
 8010ffa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010ffe:	4937      	ldr	r1, [pc, #220]	; (80110dc <plug_holes+0x13c>)
 8011000:	4832      	ldr	r0, [pc, #200]	; (80110cc <plug_holes+0x12c>)
 8011002:	f00a fc47 	bl	801b894 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	4618      	mov	r0, r3
 801100c:	f7ff ffa4 	bl	8010f58 <ptr_to_mem>
 8011010:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	429a      	cmp	r2, r3
 8011018:	d024      	beq.n	8011064 <plug_holes+0xc4>
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	791b      	ldrb	r3, [r3, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d120      	bne.n	8011064 <plug_holes+0xc4>
 8011022:	4b2b      	ldr	r3, [pc, #172]	; (80110d0 <plug_holes+0x130>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	68fa      	ldr	r2, [r7, #12]
 8011028:	429a      	cmp	r2, r3
 801102a:	d01b      	beq.n	8011064 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801102c:	4b2c      	ldr	r3, [pc, #176]	; (80110e0 <plug_holes+0x140>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	429a      	cmp	r2, r3
 8011034:	d102      	bne.n	801103c <plug_holes+0x9c>
      lfree = mem;
 8011036:	4a2a      	ldr	r2, [pc, #168]	; (80110e0 <plug_holes+0x140>)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	881a      	ldrh	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801104c:	d00a      	beq.n	8011064 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff ff80 	bl	8010f58 <ptr_to_mem>
 8011058:	4604      	mov	r4, r0
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7ff ff8e 	bl	8010f7c <mem_to_ptr>
 8011060:	4603      	mov	r3, r0
 8011062:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	885b      	ldrh	r3, [r3, #2]
 8011068:	4618      	mov	r0, r3
 801106a:	f7ff ff75 	bl	8010f58 <ptr_to_mem>
 801106e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	429a      	cmp	r2, r3
 8011076:	d01f      	beq.n	80110b8 <plug_holes+0x118>
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	791b      	ldrb	r3, [r3, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d11b      	bne.n	80110b8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011080:	4b17      	ldr	r3, [pc, #92]	; (80110e0 <plug_holes+0x140>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	429a      	cmp	r2, r3
 8011088:	d102      	bne.n	8011090 <plug_holes+0xf0>
      lfree = pmem;
 801108a:	4a15      	ldr	r2, [pc, #84]	; (80110e0 <plug_holes+0x140>)
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	881a      	ldrh	r2, [r3, #0]
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80110a0:	d00a      	beq.n	80110b8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff ff56 	bl	8010f58 <ptr_to_mem>
 80110ac:	4604      	mov	r4, r0
 80110ae:	68b8      	ldr	r0, [r7, #8]
 80110b0:	f7ff ff64 	bl	8010f7c <mem_to_ptr>
 80110b4:	4603      	mov	r3, r0
 80110b6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80110b8:	bf00      	nop
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	20005b54 	.word	0x20005b54
 80110c4:	0801c7b0 	.word	0x0801c7b0
 80110c8:	0801c7e0 	.word	0x0801c7e0
 80110cc:	0801c7f8 	.word	0x0801c7f8
 80110d0:	20005b58 	.word	0x20005b58
 80110d4:	0801c820 	.word	0x0801c820
 80110d8:	0801c83c 	.word	0x0801c83c
 80110dc:	0801c858 	.word	0x0801c858
 80110e0:	20005b5c 	.word	0x20005b5c

080110e4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80110ea:	4b18      	ldr	r3, [pc, #96]	; (801114c <mem_init+0x68>)
 80110ec:	3303      	adds	r3, #3
 80110ee:	f023 0303 	bic.w	r3, r3, #3
 80110f2:	461a      	mov	r2, r3
 80110f4:	4b16      	ldr	r3, [pc, #88]	; (8011150 <mem_init+0x6c>)
 80110f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80110f8:	4b15      	ldr	r3, [pc, #84]	; (8011150 <mem_init+0x6c>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011104:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011112:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011116:	f7ff ff1f 	bl	8010f58 <ptr_to_mem>
 801111a:	4603      	mov	r3, r0
 801111c:	4a0d      	ldr	r2, [pc, #52]	; (8011154 <mem_init+0x70>)
 801111e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011120:	4b0c      	ldr	r3, [pc, #48]	; (8011154 <mem_init+0x70>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2201      	movs	r2, #1
 8011126:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011128:	4b0a      	ldr	r3, [pc, #40]	; (8011154 <mem_init+0x70>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011130:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011132:	4b08      	ldr	r3, [pc, #32]	; (8011154 <mem_init+0x70>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801113a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <mem_init+0x6c>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a05      	ldr	r2, [pc, #20]	; (8011158 <mem_init+0x74>)
 8011142:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8011144:	bf00      	nop
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20005500 	.word	0x20005500
 8011150:	20005b54 	.word	0x20005b54
 8011154:	20005b58 	.word	0x20005b58
 8011158:	20005b5c 	.word	0x20005b5c

0801115c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b086      	sub	sp, #24
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff ff09 	bl	8010f7c <mem_to_ptr>
 801116a:	4603      	mov	r3, r0
 801116c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fef0 	bl	8010f58 <ptr_to_mem>
 8011178:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	885b      	ldrh	r3, [r3, #2]
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff feea 	bl	8010f58 <ptr_to_mem>
 8011184:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	881b      	ldrh	r3, [r3, #0]
 801118a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801118e:	d818      	bhi.n	80111c2 <mem_link_valid+0x66>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	885b      	ldrh	r3, [r3, #2]
 8011194:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011198:	d813      	bhi.n	80111c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801119e:	8afa      	ldrh	r2, [r7, #22]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d004      	beq.n	80111ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	8afa      	ldrh	r2, [r7, #22]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d109      	bne.n	80111c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80111ae:	4b08      	ldr	r3, [pc, #32]	; (80111d0 <mem_link_valid+0x74>)
 80111b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80111b2:	693a      	ldr	r2, [r7, #16]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d006      	beq.n	80111c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	885b      	ldrh	r3, [r3, #2]
 80111bc:	8afa      	ldrh	r2, [r7, #22]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d001      	beq.n	80111c6 <mem_link_valid+0x6a>
    return 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	e000      	b.n	80111c8 <mem_link_valid+0x6c>
  }
  return 1;
 80111c6:	2301      	movs	r3, #1
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20005b58 	.word	0x20005b58

080111d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d04c      	beq.n	801127c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f003 0303 	and.w	r3, r3, #3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d007      	beq.n	80111fc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80111ec:	4b25      	ldr	r3, [pc, #148]	; (8011284 <mem_free+0xb0>)
 80111ee:	f240 2273 	movw	r2, #627	; 0x273
 80111f2:	4925      	ldr	r1, [pc, #148]	; (8011288 <mem_free+0xb4>)
 80111f4:	4825      	ldr	r0, [pc, #148]	; (801128c <mem_free+0xb8>)
 80111f6:	f00a fb4d 	bl	801b894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80111fa:	e040      	b.n	801127e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	3b08      	subs	r3, #8
 8011200:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011202:	4b23      	ldr	r3, [pc, #140]	; (8011290 <mem_free+0xbc>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	429a      	cmp	r2, r3
 801120a:	d306      	bcc.n	801121a <mem_free+0x46>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f103 020c 	add.w	r2, r3, #12
 8011212:	4b20      	ldr	r3, [pc, #128]	; (8011294 <mem_free+0xc0>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	429a      	cmp	r2, r3
 8011218:	d907      	bls.n	801122a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801121a:	4b1a      	ldr	r3, [pc, #104]	; (8011284 <mem_free+0xb0>)
 801121c:	f240 227f 	movw	r2, #639	; 0x27f
 8011220:	491d      	ldr	r1, [pc, #116]	; (8011298 <mem_free+0xc4>)
 8011222:	481a      	ldr	r0, [pc, #104]	; (801128c <mem_free+0xb8>)
 8011224:	f00a fb36 	bl	801b894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011228:	e029      	b.n	801127e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	791b      	ldrb	r3, [r3, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d107      	bne.n	8011242 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011232:	4b14      	ldr	r3, [pc, #80]	; (8011284 <mem_free+0xb0>)
 8011234:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011238:	4918      	ldr	r1, [pc, #96]	; (801129c <mem_free+0xc8>)
 801123a:	4814      	ldr	r0, [pc, #80]	; (801128c <mem_free+0xb8>)
 801123c:	f00a fb2a 	bl	801b894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011240:	e01d      	b.n	801127e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f7ff ff8a 	bl	801115c <mem_link_valid>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d107      	bne.n	801125e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801124e:	4b0d      	ldr	r3, [pc, #52]	; (8011284 <mem_free+0xb0>)
 8011250:	f240 2295 	movw	r2, #661	; 0x295
 8011254:	4912      	ldr	r1, [pc, #72]	; (80112a0 <mem_free+0xcc>)
 8011256:	480d      	ldr	r0, [pc, #52]	; (801128c <mem_free+0xb8>)
 8011258:	f00a fb1c 	bl	801b894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801125c:	e00f      	b.n	801127e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2200      	movs	r2, #0
 8011262:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011264:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <mem_free+0xd0>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	429a      	cmp	r2, r3
 801126c:	d202      	bcs.n	8011274 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801126e:	4a0d      	ldr	r2, [pc, #52]	; (80112a4 <mem_free+0xd0>)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f7ff fe93 	bl	8010fa0 <plug_holes>
 801127a:	e000      	b.n	801127e <mem_free+0xaa>
    return;
 801127c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	0801c7b0 	.word	0x0801c7b0
 8011288:	0801c884 	.word	0x0801c884
 801128c:	0801c7f8 	.word	0x0801c7f8
 8011290:	20005b54 	.word	0x20005b54
 8011294:	20005b58 	.word	0x20005b58
 8011298:	0801c8a8 	.word	0x0801c8a8
 801129c:	0801c8c4 	.word	0x0801c8c4
 80112a0:	0801c8ec 	.word	0x0801c8ec
 80112a4:	20005b5c 	.word	0x20005b5c

080112a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b088      	sub	sp, #32
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	460b      	mov	r3, r1
 80112b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80112b4:	887b      	ldrh	r3, [r7, #2]
 80112b6:	3303      	adds	r3, #3
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	f023 0303 	bic.w	r3, r3, #3
 80112be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80112c0:	8bfb      	ldrh	r3, [r7, #30]
 80112c2:	2b0b      	cmp	r3, #11
 80112c4:	d801      	bhi.n	80112ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80112c6:	230c      	movs	r3, #12
 80112c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80112ca:	8bfb      	ldrh	r3, [r7, #30]
 80112cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80112d0:	d803      	bhi.n	80112da <mem_trim+0x32>
 80112d2:	8bfa      	ldrh	r2, [r7, #30]
 80112d4:	887b      	ldrh	r3, [r7, #2]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d201      	bcs.n	80112de <mem_trim+0x36>
    return NULL;
 80112da:	2300      	movs	r3, #0
 80112dc:	e0cc      	b.n	8011478 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80112de:	4b68      	ldr	r3, [pc, #416]	; (8011480 <mem_trim+0x1d8>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d304      	bcc.n	80112f2 <mem_trim+0x4a>
 80112e8:	4b66      	ldr	r3, [pc, #408]	; (8011484 <mem_trim+0x1dc>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d306      	bcc.n	8011300 <mem_trim+0x58>
 80112f2:	4b65      	ldr	r3, [pc, #404]	; (8011488 <mem_trim+0x1e0>)
 80112f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80112f8:	4964      	ldr	r1, [pc, #400]	; (801148c <mem_trim+0x1e4>)
 80112fa:	4865      	ldr	r0, [pc, #404]	; (8011490 <mem_trim+0x1e8>)
 80112fc:	f00a faca 	bl	801b894 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011300:	4b5f      	ldr	r3, [pc, #380]	; (8011480 <mem_trim+0x1d8>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d304      	bcc.n	8011314 <mem_trim+0x6c>
 801130a:	4b5e      	ldr	r3, [pc, #376]	; (8011484 <mem_trim+0x1dc>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	429a      	cmp	r2, r3
 8011312:	d301      	bcc.n	8011318 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	e0af      	b.n	8011478 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	3b08      	subs	r3, #8
 801131c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801131e:	69b8      	ldr	r0, [r7, #24]
 8011320:	f7ff fe2c 	bl	8010f7c <mem_to_ptr>
 8011324:	4603      	mov	r3, r0
 8011326:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011328:	69bb      	ldr	r3, [r7, #24]
 801132a:	881a      	ldrh	r2, [r3, #0]
 801132c:	8afb      	ldrh	r3, [r7, #22]
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	b29b      	uxth	r3, r3
 8011332:	3b08      	subs	r3, #8
 8011334:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011336:	8bfa      	ldrh	r2, [r7, #30]
 8011338:	8abb      	ldrh	r3, [r7, #20]
 801133a:	429a      	cmp	r2, r3
 801133c:	d906      	bls.n	801134c <mem_trim+0xa4>
 801133e:	4b52      	ldr	r3, [pc, #328]	; (8011488 <mem_trim+0x1e0>)
 8011340:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011344:	4953      	ldr	r1, [pc, #332]	; (8011494 <mem_trim+0x1ec>)
 8011346:	4852      	ldr	r0, [pc, #328]	; (8011490 <mem_trim+0x1e8>)
 8011348:	f00a faa4 	bl	801b894 <iprintf>
  if (newsize > size) {
 801134c:	8bfa      	ldrh	r2, [r7, #30]
 801134e:	8abb      	ldrh	r3, [r7, #20]
 8011350:	429a      	cmp	r2, r3
 8011352:	d901      	bls.n	8011358 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8011354:	2300      	movs	r3, #0
 8011356:	e08f      	b.n	8011478 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8011358:	8bfa      	ldrh	r2, [r7, #30]
 801135a:	8abb      	ldrh	r3, [r7, #20]
 801135c:	429a      	cmp	r2, r3
 801135e:	d101      	bne.n	8011364 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	e089      	b.n	8011478 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff fdf5 	bl	8010f58 <ptr_to_mem>
 801136e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	791b      	ldrb	r3, [r3, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d13f      	bne.n	80113f8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011380:	d106      	bne.n	8011390 <mem_trim+0xe8>
 8011382:	4b41      	ldr	r3, [pc, #260]	; (8011488 <mem_trim+0x1e0>)
 8011384:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011388:	4943      	ldr	r1, [pc, #268]	; (8011498 <mem_trim+0x1f0>)
 801138a:	4841      	ldr	r0, [pc, #260]	; (8011490 <mem_trim+0x1e8>)
 801138c:	f00a fa82 	bl	801b894 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	881b      	ldrh	r3, [r3, #0]
 8011394:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011396:	8afa      	ldrh	r2, [r7, #22]
 8011398:	8bfb      	ldrh	r3, [r7, #30]
 801139a:	4413      	add	r3, r2
 801139c:	b29b      	uxth	r3, r3
 801139e:	3308      	adds	r3, #8
 80113a0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80113a2:	4b3e      	ldr	r3, [pc, #248]	; (801149c <mem_trim+0x1f4>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	693a      	ldr	r2, [r7, #16]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d106      	bne.n	80113ba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80113ac:	89fb      	ldrh	r3, [r7, #14]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff fdd2 	bl	8010f58 <ptr_to_mem>
 80113b4:	4603      	mov	r3, r0
 80113b6:	4a39      	ldr	r2, [pc, #228]	; (801149c <mem_trim+0x1f4>)
 80113b8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80113ba:	89fb      	ldrh	r3, [r7, #14]
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fdcb 	bl	8010f58 <ptr_to_mem>
 80113c2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	2200      	movs	r2, #0
 80113c8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	89ba      	ldrh	r2, [r7, #12]
 80113ce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	8afa      	ldrh	r2, [r7, #22]
 80113d4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	89fa      	ldrh	r2, [r7, #14]
 80113da:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	881b      	ldrh	r3, [r3, #0]
 80113e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113e4:	d047      	beq.n	8011476 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	881b      	ldrh	r3, [r3, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff fdb4 	bl	8010f58 <ptr_to_mem>
 80113f0:	4602      	mov	r2, r0
 80113f2:	89fb      	ldrh	r3, [r7, #14]
 80113f4:	8053      	strh	r3, [r2, #2]
 80113f6:	e03e      	b.n	8011476 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80113f8:	8bfb      	ldrh	r3, [r7, #30]
 80113fa:	f103 0214 	add.w	r2, r3, #20
 80113fe:	8abb      	ldrh	r3, [r7, #20]
 8011400:	429a      	cmp	r2, r3
 8011402:	d838      	bhi.n	8011476 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011404:	8afa      	ldrh	r2, [r7, #22]
 8011406:	8bfb      	ldrh	r3, [r7, #30]
 8011408:	4413      	add	r3, r2
 801140a:	b29b      	uxth	r3, r3
 801140c:	3308      	adds	r3, #8
 801140e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	881b      	ldrh	r3, [r3, #0]
 8011414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011418:	d106      	bne.n	8011428 <mem_trim+0x180>
 801141a:	4b1b      	ldr	r3, [pc, #108]	; (8011488 <mem_trim+0x1e0>)
 801141c:	f240 3216 	movw	r2, #790	; 0x316
 8011420:	491d      	ldr	r1, [pc, #116]	; (8011498 <mem_trim+0x1f0>)
 8011422:	481b      	ldr	r0, [pc, #108]	; (8011490 <mem_trim+0x1e8>)
 8011424:	f00a fa36 	bl	801b894 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011428:	89fb      	ldrh	r3, [r7, #14]
 801142a:	4618      	mov	r0, r3
 801142c:	f7ff fd94 	bl	8010f58 <ptr_to_mem>
 8011430:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011432:	4b1a      	ldr	r3, [pc, #104]	; (801149c <mem_trim+0x1f4>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	693a      	ldr	r2, [r7, #16]
 8011438:	429a      	cmp	r2, r3
 801143a:	d202      	bcs.n	8011442 <mem_trim+0x19a>
      lfree = mem2;
 801143c:	4a17      	ldr	r2, [pc, #92]	; (801149c <mem_trim+0x1f4>)
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	2200      	movs	r2, #0
 8011446:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	881a      	ldrh	r2, [r3, #0]
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	8afa      	ldrh	r2, [r7, #22]
 8011454:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011456:	69bb      	ldr	r3, [r7, #24]
 8011458:	89fa      	ldrh	r2, [r7, #14]
 801145a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011464:	d007      	beq.n	8011476 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff fd74 	bl	8010f58 <ptr_to_mem>
 8011470:	4602      	mov	r2, r0
 8011472:	89fb      	ldrh	r3, [r7, #14]
 8011474:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8011476:	687b      	ldr	r3, [r7, #4]
}
 8011478:	4618      	mov	r0, r3
 801147a:	3720      	adds	r7, #32
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	20005b54 	.word	0x20005b54
 8011484:	20005b58 	.word	0x20005b58
 8011488:	0801c7b0 	.word	0x0801c7b0
 801148c:	0801c920 	.word	0x0801c920
 8011490:	0801c7f8 	.word	0x0801c7f8
 8011494:	0801c938 	.word	0x0801c938
 8011498:	0801c958 	.word	0x0801c958
 801149c:	20005b5c 	.word	0x20005b5c

080114a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b088      	sub	sp, #32
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80114aa:	88fb      	ldrh	r3, [r7, #6]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d101      	bne.n	80114b4 <mem_malloc+0x14>
    return NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	e0d9      	b.n	8011668 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	3303      	adds	r3, #3
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	f023 0303 	bic.w	r3, r3, #3
 80114be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80114c0:	8bbb      	ldrh	r3, [r7, #28]
 80114c2:	2b0b      	cmp	r3, #11
 80114c4:	d801      	bhi.n	80114ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80114c6:	230c      	movs	r3, #12
 80114c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80114ca:	8bbb      	ldrh	r3, [r7, #28]
 80114cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80114d0:	d803      	bhi.n	80114da <mem_malloc+0x3a>
 80114d2:	8bba      	ldrh	r2, [r7, #28]
 80114d4:	88fb      	ldrh	r3, [r7, #6]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d201      	bcs.n	80114de <mem_malloc+0x3e>
    return NULL;
 80114da:	2300      	movs	r3, #0
 80114dc:	e0c4      	b.n	8011668 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80114de:	4b64      	ldr	r3, [pc, #400]	; (8011670 <mem_malloc+0x1d0>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7ff fd4a 	bl	8010f7c <mem_to_ptr>
 80114e8:	4603      	mov	r3, r0
 80114ea:	83fb      	strh	r3, [r7, #30]
 80114ec:	e0b4      	b.n	8011658 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80114ee:	8bfb      	ldrh	r3, [r7, #30]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7ff fd31 	bl	8010f58 <ptr_to_mem>
 80114f6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	791b      	ldrb	r3, [r3, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f040 80a4 	bne.w	801164a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	8bfb      	ldrh	r3, [r7, #30]
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	f1a3 0208 	sub.w	r2, r3, #8
 8011510:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011512:	429a      	cmp	r2, r3
 8011514:	f0c0 8099 	bcc.w	801164a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	881b      	ldrh	r3, [r3, #0]
 801151c:	461a      	mov	r2, r3
 801151e:	8bfb      	ldrh	r3, [r7, #30]
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	f1a3 0208 	sub.w	r2, r3, #8
 8011526:	8bbb      	ldrh	r3, [r7, #28]
 8011528:	3314      	adds	r3, #20
 801152a:	429a      	cmp	r2, r3
 801152c:	d333      	bcc.n	8011596 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801152e:	8bfa      	ldrh	r2, [r7, #30]
 8011530:	8bbb      	ldrh	r3, [r7, #28]
 8011532:	4413      	add	r3, r2
 8011534:	b29b      	uxth	r3, r3
 8011536:	3308      	adds	r3, #8
 8011538:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801153a:	8a7b      	ldrh	r3, [r7, #18]
 801153c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011540:	d106      	bne.n	8011550 <mem_malloc+0xb0>
 8011542:	4b4c      	ldr	r3, [pc, #304]	; (8011674 <mem_malloc+0x1d4>)
 8011544:	f240 3287 	movw	r2, #903	; 0x387
 8011548:	494b      	ldr	r1, [pc, #300]	; (8011678 <mem_malloc+0x1d8>)
 801154a:	484c      	ldr	r0, [pc, #304]	; (801167c <mem_malloc+0x1dc>)
 801154c:	f00a f9a2 	bl	801b894 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011550:	8a7b      	ldrh	r3, [r7, #18]
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fd00 	bl	8010f58 <ptr_to_mem>
 8011558:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2200      	movs	r2, #0
 801155e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	881a      	ldrh	r2, [r3, #0]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	8bfa      	ldrh	r2, [r7, #30]
 801156c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	8a7a      	ldrh	r2, [r7, #18]
 8011572:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	2201      	movs	r2, #1
 8011578:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	881b      	ldrh	r3, [r3, #0]
 801157e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011582:	d00b      	beq.n	801159c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff fce5 	bl	8010f58 <ptr_to_mem>
 801158e:	4602      	mov	r2, r0
 8011590:	8a7b      	ldrh	r3, [r7, #18]
 8011592:	8053      	strh	r3, [r2, #2]
 8011594:	e002      	b.n	801159c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	2201      	movs	r2, #1
 801159a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801159c:	4b34      	ldr	r3, [pc, #208]	; (8011670 <mem_malloc+0x1d0>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	697a      	ldr	r2, [r7, #20]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d127      	bne.n	80115f6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80115a6:	4b32      	ldr	r3, [pc, #200]	; (8011670 <mem_malloc+0x1d0>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80115ac:	e005      	b.n	80115ba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fcd0 	bl	8010f58 <ptr_to_mem>
 80115b8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	791b      	ldrb	r3, [r3, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d004      	beq.n	80115cc <mem_malloc+0x12c>
 80115c2:	4b2f      	ldr	r3, [pc, #188]	; (8011680 <mem_malloc+0x1e0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	69ba      	ldr	r2, [r7, #24]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d1f0      	bne.n	80115ae <mem_malloc+0x10e>
          }
          lfree = cur;
 80115cc:	4a28      	ldr	r2, [pc, #160]	; (8011670 <mem_malloc+0x1d0>)
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80115d2:	4b27      	ldr	r3, [pc, #156]	; (8011670 <mem_malloc+0x1d0>)
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	4b2a      	ldr	r3, [pc, #168]	; (8011680 <mem_malloc+0x1e0>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d00b      	beq.n	80115f6 <mem_malloc+0x156>
 80115de:	4b24      	ldr	r3, [pc, #144]	; (8011670 <mem_malloc+0x1d0>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	791b      	ldrb	r3, [r3, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d006      	beq.n	80115f6 <mem_malloc+0x156>
 80115e8:	4b22      	ldr	r3, [pc, #136]	; (8011674 <mem_malloc+0x1d4>)
 80115ea:	f240 32b5 	movw	r2, #949	; 0x3b5
 80115ee:	4925      	ldr	r1, [pc, #148]	; (8011684 <mem_malloc+0x1e4>)
 80115f0:	4822      	ldr	r0, [pc, #136]	; (801167c <mem_malloc+0x1dc>)
 80115f2:	f00a f94f 	bl	801b894 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80115f6:	8bba      	ldrh	r2, [r7, #28]
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	4413      	add	r3, r2
 80115fc:	3308      	adds	r3, #8
 80115fe:	4a20      	ldr	r2, [pc, #128]	; (8011680 <mem_malloc+0x1e0>)
 8011600:	6812      	ldr	r2, [r2, #0]
 8011602:	4293      	cmp	r3, r2
 8011604:	d906      	bls.n	8011614 <mem_malloc+0x174>
 8011606:	4b1b      	ldr	r3, [pc, #108]	; (8011674 <mem_malloc+0x1d4>)
 8011608:	f240 32b9 	movw	r2, #953	; 0x3b9
 801160c:	491e      	ldr	r1, [pc, #120]	; (8011688 <mem_malloc+0x1e8>)
 801160e:	481b      	ldr	r0, [pc, #108]	; (801167c <mem_malloc+0x1dc>)
 8011610:	f00a f940 	bl	801b894 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	f003 0303 	and.w	r3, r3, #3
 801161a:	2b00      	cmp	r3, #0
 801161c:	d006      	beq.n	801162c <mem_malloc+0x18c>
 801161e:	4b15      	ldr	r3, [pc, #84]	; (8011674 <mem_malloc+0x1d4>)
 8011620:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011624:	4919      	ldr	r1, [pc, #100]	; (801168c <mem_malloc+0x1ec>)
 8011626:	4815      	ldr	r0, [pc, #84]	; (801167c <mem_malloc+0x1dc>)
 8011628:	f00a f934 	bl	801b894 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	f003 0303 	and.w	r3, r3, #3
 8011632:	2b00      	cmp	r3, #0
 8011634:	d006      	beq.n	8011644 <mem_malloc+0x1a4>
 8011636:	4b0f      	ldr	r3, [pc, #60]	; (8011674 <mem_malloc+0x1d4>)
 8011638:	f240 32bd 	movw	r2, #957	; 0x3bd
 801163c:	4914      	ldr	r1, [pc, #80]	; (8011690 <mem_malloc+0x1f0>)
 801163e:	480f      	ldr	r0, [pc, #60]	; (801167c <mem_malloc+0x1dc>)
 8011640:	f00a f928 	bl	801b894 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	3308      	adds	r3, #8
 8011648:	e00e      	b.n	8011668 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801164a:	8bfb      	ldrh	r3, [r7, #30]
 801164c:	4618      	mov	r0, r3
 801164e:	f7ff fc83 	bl	8010f58 <ptr_to_mem>
 8011652:	4603      	mov	r3, r0
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011658:	8bfa      	ldrh	r2, [r7, #30]
 801165a:	8bbb      	ldrh	r3, [r7, #28]
 801165c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011660:	429a      	cmp	r2, r3
 8011662:	f4ff af44 	bcc.w	80114ee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3720      	adds	r7, #32
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	20005b5c 	.word	0x20005b5c
 8011674:	0801c7b0 	.word	0x0801c7b0
 8011678:	0801c958 	.word	0x0801c958
 801167c:	0801c7f8 	.word	0x0801c7f8
 8011680:	20005b58 	.word	0x20005b58
 8011684:	0801c96c 	.word	0x0801c96c
 8011688:	0801c988 	.word	0x0801c988
 801168c:	0801c9b8 	.word	0x0801c9b8
 8011690:	0801c9e8 	.word	0x0801c9e8

08011694 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011694:	b480      	push	{r7}
 8011696:	b085      	sub	sp, #20
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	2200      	movs	r2, #0
 80116a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	3303      	adds	r3, #3
 80116aa:	f023 0303 	bic.w	r3, r3, #3
 80116ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80116b0:	2300      	movs	r3, #0
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	e011      	b.n	80116da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	461a      	mov	r2, r3
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	4413      	add	r3, r2
 80116d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	3301      	adds	r3, #1
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	885b      	ldrh	r3, [r3, #2]
 80116de:	461a      	mov	r2, r3
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	4293      	cmp	r3, r2
 80116e4:	dbe7      	blt.n	80116b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80116e6:	bf00      	nop
 80116e8:	bf00      	nop
 80116ea:	3714      	adds	r7, #20
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80116fa:	2300      	movs	r3, #0
 80116fc:	80fb      	strh	r3, [r7, #6]
 80116fe:	e009      	b.n	8011714 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011700:	88fb      	ldrh	r3, [r7, #6]
 8011702:	4a08      	ldr	r2, [pc, #32]	; (8011724 <memp_init+0x30>)
 8011704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011708:	4618      	mov	r0, r3
 801170a:	f7ff ffc3 	bl	8011694 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801170e:	88fb      	ldrh	r3, [r7, #6]
 8011710:	3301      	adds	r3, #1
 8011712:	80fb      	strh	r3, [r7, #6]
 8011714:	88fb      	ldrh	r3, [r7, #6]
 8011716:	2b08      	cmp	r3, #8
 8011718:	d9f2      	bls.n	8011700 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801171a:	bf00      	nop
 801171c:	bf00      	nop
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	0801f2e0 	.word	0x0801f2e0

08011728 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d012      	beq.n	8011764 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	6812      	ldr	r2, [r2, #0]
 8011746:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f003 0303 	and.w	r3, r3, #3
 801174e:	2b00      	cmp	r3, #0
 8011750:	d006      	beq.n	8011760 <do_memp_malloc_pool+0x38>
 8011752:	4b07      	ldr	r3, [pc, #28]	; (8011770 <do_memp_malloc_pool+0x48>)
 8011754:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011758:	4906      	ldr	r1, [pc, #24]	; (8011774 <do_memp_malloc_pool+0x4c>)
 801175a:	4807      	ldr	r0, [pc, #28]	; (8011778 <do_memp_malloc_pool+0x50>)
 801175c:	f00a f89a 	bl	801b894 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	e000      	b.n	8011766 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	0801ca0c 	.word	0x0801ca0c
 8011774:	0801ca3c 	.word	0x0801ca3c
 8011778:	0801ca60 	.word	0x0801ca60

0801177c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <memp_malloc_pool+0x1c>
 801178a:	4b0a      	ldr	r3, [pc, #40]	; (80117b4 <memp_malloc_pool+0x38>)
 801178c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011790:	4909      	ldr	r1, [pc, #36]	; (80117b8 <memp_malloc_pool+0x3c>)
 8011792:	480a      	ldr	r0, [pc, #40]	; (80117bc <memp_malloc_pool+0x40>)
 8011794:	f00a f87e 	bl	801b894 <iprintf>
  if (desc == NULL) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <memp_malloc_pool+0x26>
    return NULL;
 801179e:	2300      	movs	r3, #0
 80117a0:	e003      	b.n	80117aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff ffc0 	bl	8011728 <do_memp_malloc_pool>
 80117a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3708      	adds	r7, #8
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	0801ca0c 	.word	0x0801ca0c
 80117b8:	0801ca88 	.word	0x0801ca88
 80117bc:	0801ca60 	.word	0x0801ca60

080117c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	4603      	mov	r3, r0
 80117c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80117ca:	79fb      	ldrb	r3, [r7, #7]
 80117cc:	2b08      	cmp	r3, #8
 80117ce:	d908      	bls.n	80117e2 <memp_malloc+0x22>
 80117d0:	4b0a      	ldr	r3, [pc, #40]	; (80117fc <memp_malloc+0x3c>)
 80117d2:	f240 1257 	movw	r2, #343	; 0x157
 80117d6:	490a      	ldr	r1, [pc, #40]	; (8011800 <memp_malloc+0x40>)
 80117d8:	480a      	ldr	r0, [pc, #40]	; (8011804 <memp_malloc+0x44>)
 80117da:	f00a f85b 	bl	801b894 <iprintf>
 80117de:	2300      	movs	r3, #0
 80117e0:	e008      	b.n	80117f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	4a08      	ldr	r2, [pc, #32]	; (8011808 <memp_malloc+0x48>)
 80117e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff ff9c 	bl	8011728 <do_memp_malloc_pool>
 80117f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80117f2:	68fb      	ldr	r3, [r7, #12]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	0801ca0c 	.word	0x0801ca0c
 8011800:	0801ca9c 	.word	0x0801ca9c
 8011804:	0801ca60 	.word	0x0801ca60
 8011808:	0801f2e0 	.word	0x0801f2e0

0801180c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	f003 0303 	and.w	r3, r3, #3
 801181c:	2b00      	cmp	r3, #0
 801181e:	d006      	beq.n	801182e <do_memp_free_pool+0x22>
 8011820:	4b0a      	ldr	r3, [pc, #40]	; (801184c <do_memp_free_pool+0x40>)
 8011822:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011826:	490a      	ldr	r1, [pc, #40]	; (8011850 <do_memp_free_pool+0x44>)
 8011828:	480a      	ldr	r0, [pc, #40]	; (8011854 <do_memp_free_pool+0x48>)
 801182a:	f00a f833 	bl	801b894 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8011844:	bf00      	nop
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	0801ca0c 	.word	0x0801ca0c
 8011850:	0801cabc 	.word	0x0801cabc
 8011854:	0801ca60 	.word	0x0801ca60

08011858 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <memp_free_pool+0x1e>
 8011868:	4b0a      	ldr	r3, [pc, #40]	; (8011894 <memp_free_pool+0x3c>)
 801186a:	f240 1295 	movw	r2, #405	; 0x195
 801186e:	490a      	ldr	r1, [pc, #40]	; (8011898 <memp_free_pool+0x40>)
 8011870:	480a      	ldr	r0, [pc, #40]	; (801189c <memp_free_pool+0x44>)
 8011872:	f00a f80f 	bl	801b894 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d007      	beq.n	801188c <memp_free_pool+0x34>
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d004      	beq.n	801188c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7ff ffc1 	bl	801180c <do_memp_free_pool>
 801188a:	e000      	b.n	801188e <memp_free_pool+0x36>
    return;
 801188c:	bf00      	nop
}
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	0801ca0c 	.word	0x0801ca0c
 8011898:	0801ca88 	.word	0x0801ca88
 801189c:	0801ca60 	.word	0x0801ca60

080118a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	6039      	str	r1, [r7, #0]
 80118aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80118ac:	79fb      	ldrb	r3, [r7, #7]
 80118ae:	2b08      	cmp	r3, #8
 80118b0:	d907      	bls.n	80118c2 <memp_free+0x22>
 80118b2:	4b0c      	ldr	r3, [pc, #48]	; (80118e4 <memp_free+0x44>)
 80118b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80118b8:	490b      	ldr	r1, [pc, #44]	; (80118e8 <memp_free+0x48>)
 80118ba:	480c      	ldr	r0, [pc, #48]	; (80118ec <memp_free+0x4c>)
 80118bc:	f009 ffea 	bl	801b894 <iprintf>
 80118c0:	e00c      	b.n	80118dc <memp_free+0x3c>

  if (mem == NULL) {
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d008      	beq.n	80118da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80118c8:	79fb      	ldrb	r3, [r7, #7]
 80118ca:	4a09      	ldr	r2, [pc, #36]	; (80118f0 <memp_free+0x50>)
 80118cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118d0:	6839      	ldr	r1, [r7, #0]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7ff ff9a 	bl	801180c <do_memp_free_pool>
 80118d8:	e000      	b.n	80118dc <memp_free+0x3c>
    return;
 80118da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	0801ca0c 	.word	0x0801ca0c
 80118e8:	0801cadc 	.word	0x0801cadc
 80118ec:	0801ca60 	.word	0x0801ca60
 80118f0:	0801f2e0 	.word	0x0801f2e0

080118f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80118f4:	b480      	push	{r7}
 80118f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80118f8:	bf00      	nop
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
	...

08011904 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
 8011910:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d108      	bne.n	801192a <netif_add+0x26>
 8011918:	4b57      	ldr	r3, [pc, #348]	; (8011a78 <netif_add+0x174>)
 801191a:	f240 1227 	movw	r2, #295	; 0x127
 801191e:	4957      	ldr	r1, [pc, #348]	; (8011a7c <netif_add+0x178>)
 8011920:	4857      	ldr	r0, [pc, #348]	; (8011a80 <netif_add+0x17c>)
 8011922:	f009 ffb7 	bl	801b894 <iprintf>
 8011926:	2300      	movs	r3, #0
 8011928:	e0a2      	b.n	8011a70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	2b00      	cmp	r3, #0
 801192e:	d108      	bne.n	8011942 <netif_add+0x3e>
 8011930:	4b51      	ldr	r3, [pc, #324]	; (8011a78 <netif_add+0x174>)
 8011932:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011936:	4953      	ldr	r1, [pc, #332]	; (8011a84 <netif_add+0x180>)
 8011938:	4851      	ldr	r0, [pc, #324]	; (8011a80 <netif_add+0x17c>)
 801193a:	f009 ffab 	bl	801b894 <iprintf>
 801193e:	2300      	movs	r3, #0
 8011940:	e096      	b.n	8011a70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d101      	bne.n	801194c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011948:	4b4f      	ldr	r3, [pc, #316]	; (8011a88 <netif_add+0x184>)
 801194a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011952:	4b4d      	ldr	r3, [pc, #308]	; (8011a88 <netif_add+0x184>)
 8011954:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801195c:	4b4a      	ldr	r3, [pc, #296]	; (8011a88 <netif_add+0x184>)
 801195e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2200      	movs	r2, #0
 8011964:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2200      	movs	r2, #0
 801196a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2200      	movs	r2, #0
 8011970:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	4a45      	ldr	r2, [pc, #276]	; (8011a8c <netif_add+0x188>)
 8011976:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	6a3a      	ldr	r2, [r7, #32]
 8011990:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011992:	4b3f      	ldr	r3, [pc, #252]	; (8011a90 <netif_add+0x18c>)
 8011994:	781a      	ldrb	r2, [r3, #0]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	68b9      	ldr	r1, [r7, #8]
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f000 f913 	bl	8011bd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	4798      	blx	r3
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <netif_add+0xba>
    return NULL;
 80119ba:	2300      	movs	r3, #0
 80119bc:	e058      	b.n	8011a70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119c4:	2bff      	cmp	r3, #255	; 0xff
 80119c6:	d103      	bne.n	80119d0 <netif_add+0xcc>
        netif->num = 0;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2200      	movs	r2, #0
 80119cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80119d0:	2300      	movs	r3, #0
 80119d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80119d4:	4b2f      	ldr	r3, [pc, #188]	; (8011a94 <netif_add+0x190>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	617b      	str	r3, [r7, #20]
 80119da:	e02b      	b.n	8011a34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80119dc:	697a      	ldr	r2, [r7, #20]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d106      	bne.n	80119f2 <netif_add+0xee>
 80119e4:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <netif_add+0x174>)
 80119e6:	f240 128b 	movw	r2, #395	; 0x18b
 80119ea:	492b      	ldr	r1, [pc, #172]	; (8011a98 <netif_add+0x194>)
 80119ec:	4824      	ldr	r0, [pc, #144]	; (8011a80 <netif_add+0x17c>)
 80119ee:	f009 ff51 	bl	801b894 <iprintf>
        num_netifs++;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	3301      	adds	r3, #1
 80119f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	2bff      	cmp	r3, #255	; 0xff
 80119fc:	dd06      	ble.n	8011a0c <netif_add+0x108>
 80119fe:	4b1e      	ldr	r3, [pc, #120]	; (8011a78 <netif_add+0x174>)
 8011a00:	f240 128d 	movw	r2, #397	; 0x18d
 8011a04:	4925      	ldr	r1, [pc, #148]	; (8011a9c <netif_add+0x198>)
 8011a06:	481e      	ldr	r0, [pc, #120]	; (8011a80 <netif_add+0x17c>)
 8011a08:	f009 ff44 	bl	801b894 <iprintf>
        if (netif2->num == netif->num) {
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d108      	bne.n	8011a2e <netif_add+0x12a>
          netif->num++;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a22:	3301      	adds	r3, #1
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011a2c:	e005      	b.n	8011a3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	617b      	str	r3, [r7, #20]
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d1d0      	bne.n	80119dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1be      	bne.n	80119be <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a46:	2bfe      	cmp	r3, #254	; 0xfe
 8011a48:	d103      	bne.n	8011a52 <netif_add+0x14e>
    netif_num = 0;
 8011a4a:	4b11      	ldr	r3, [pc, #68]	; (8011a90 <netif_add+0x18c>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	701a      	strb	r2, [r3, #0]
 8011a50:	e006      	b.n	8011a60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a58:	3301      	adds	r3, #1
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	4b0c      	ldr	r3, [pc, #48]	; (8011a90 <netif_add+0x18c>)
 8011a5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011a60:	4b0c      	ldr	r3, [pc, #48]	; (8011a94 <netif_add+0x190>)
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011a68:	4a0a      	ldr	r2, [pc, #40]	; (8011a94 <netif_add+0x190>)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3718      	adds	r7, #24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	0801caf8 	.word	0x0801caf8
 8011a7c:	0801cb8c 	.word	0x0801cb8c
 8011a80:	0801cb48 	.word	0x0801cb48
 8011a84:	0801cba8 	.word	0x0801cba8
 8011a88:	0801f344 	.word	0x0801f344
 8011a8c:	08011eaf 	.word	0x08011eaf
 8011a90:	20008614 	.word	0x20008614
 8011a94:	2000860c 	.word	0x2000860c
 8011a98:	0801cbcc 	.word	0x0801cbcc
 8011a9c:	0801cbe0 	.word	0x0801cbe0

08011aa0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f002 fb43 	bl	8014138 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f006 fc25 	bl	8018304 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011aba:	bf00      	nop
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
	...

08011ac4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b086      	sub	sp, #24
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d106      	bne.n	8011ae4 <netif_do_set_ipaddr+0x20>
 8011ad6:	4b1d      	ldr	r3, [pc, #116]	; (8011b4c <netif_do_set_ipaddr+0x88>)
 8011ad8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011adc:	491c      	ldr	r1, [pc, #112]	; (8011b50 <netif_do_set_ipaddr+0x8c>)
 8011ade:	481d      	ldr	r0, [pc, #116]	; (8011b54 <netif_do_set_ipaddr+0x90>)
 8011ae0:	f009 fed8 	bl	801b894 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d106      	bne.n	8011af8 <netif_do_set_ipaddr+0x34>
 8011aea:	4b18      	ldr	r3, [pc, #96]	; (8011b4c <netif_do_set_ipaddr+0x88>)
 8011aec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011af0:	4917      	ldr	r1, [pc, #92]	; (8011b50 <netif_do_set_ipaddr+0x8c>)
 8011af2:	4818      	ldr	r0, [pc, #96]	; (8011b54 <netif_do_set_ipaddr+0x90>)
 8011af4:	f009 fece 	bl	801b894 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	3304      	adds	r3, #4
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d01c      	beq.n	8011b40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011b16:	f107 0314 	add.w	r3, r7, #20
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7ff ffbf 	bl	8011aa0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d002      	beq.n	8011b2e <netif_do_set_ipaddr+0x6a>
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	e000      	b.n	8011b30 <netif_do_set_ipaddr+0x6c>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011b34:	2101      	movs	r1, #1
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	f000 f8d2 	bl	8011ce0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e000      	b.n	8011b42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3718      	adds	r7, #24
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	0801caf8 	.word	0x0801caf8
 8011b50:	0801cc10 	.word	0x0801cc10
 8011b54:	0801cb48 	.word	0x0801cb48

08011b58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	3308      	adds	r3, #8
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d00a      	beq.n	8011b88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <netif_do_set_netmask+0x26>
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	e000      	b.n	8011b80 <netif_do_set_netmask+0x28>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011b84:	2301      	movs	r3, #1
 8011b86:	e000      	b.n	8011b8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3714      	adds	r7, #20
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr

08011b96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011b96:	b480      	push	{r7}
 8011b98:	b085      	sub	sp, #20
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	60f8      	str	r0, [r7, #12]
 8011b9e:	60b9      	str	r1, [r7, #8]
 8011ba0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	330c      	adds	r3, #12
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d00a      	beq.n	8011bc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d002      	beq.n	8011bbc <netif_do_set_gw+0x26>
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	e000      	b.n	8011bbe <netif_do_set_gw+0x28>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e000      	b.n	8011bc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011bc6:	2300      	movs	r3, #0
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b088      	sub	sp, #32
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
 8011be0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d101      	bne.n	8011bf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011bf0:	4b1c      	ldr	r3, [pc, #112]	; (8011c64 <netif_set_addr+0x90>)
 8011bf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d101      	bne.n	8011bfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011bfa:	4b1a      	ldr	r3, [pc, #104]	; (8011c64 <netif_set_addr+0x90>)
 8011bfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d101      	bne.n	8011c08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011c04:	4b17      	ldr	r3, [pc, #92]	; (8011c64 <netif_set_addr+0x90>)
 8011c06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d003      	beq.n	8011c16 <netif_set_addr+0x42>
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d101      	bne.n	8011c1a <netif_set_addr+0x46>
 8011c16:	2301      	movs	r3, #1
 8011c18:	e000      	b.n	8011c1c <netif_set_addr+0x48>
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d006      	beq.n	8011c32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011c24:	f107 0310 	add.w	r3, r7, #16
 8011c28:	461a      	mov	r2, r3
 8011c2a:	68b9      	ldr	r1, [r7, #8]
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f7ff ff49 	bl	8011ac4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011c32:	69fa      	ldr	r2, [r7, #28]
 8011c34:	6879      	ldr	r1, [r7, #4]
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7ff ff8e 	bl	8011b58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011c3c:	69ba      	ldr	r2, [r7, #24]
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	68f8      	ldr	r0, [r7, #12]
 8011c42:	f7ff ffa8 	bl	8011b96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d106      	bne.n	8011c5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011c4c:	f107 0310 	add.w	r3, r7, #16
 8011c50:	461a      	mov	r2, r3
 8011c52:	68b9      	ldr	r1, [r7, #8]
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f7ff ff35 	bl	8011ac4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011c5a:	bf00      	nop
 8011c5c:	3720      	adds	r7, #32
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	0801f344 	.word	0x0801f344

08011c68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011c70:	4a04      	ldr	r2, [pc, #16]	; (8011c84 <netif_set_default+0x1c>)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011c76:	bf00      	nop
 8011c78:	370c      	adds	r7, #12
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	20008610 	.word	0x20008610

08011c88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d107      	bne.n	8011ca6 <netif_set_up+0x1e>
 8011c96:	4b0f      	ldr	r3, [pc, #60]	; (8011cd4 <netif_set_up+0x4c>)
 8011c98:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011c9c:	490e      	ldr	r1, [pc, #56]	; (8011cd8 <netif_set_up+0x50>)
 8011c9e:	480f      	ldr	r0, [pc, #60]	; (8011cdc <netif_set_up+0x54>)
 8011ca0:	f009 fdf8 	bl	801b894 <iprintf>
 8011ca4:	e013      	b.n	8011cce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d10c      	bne.n	8011cce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cba:	f043 0301 	orr.w	r3, r3, #1
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011cc6:	2103      	movs	r1, #3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 f809 	bl	8011ce0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	0801caf8 	.word	0x0801caf8
 8011cd8:	0801cc80 	.word	0x0801cc80
 8011cdc:	0801cb48 	.word	0x0801cb48

08011ce0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <netif_issue_reports+0x20>
 8011cf2:	4b18      	ldr	r3, [pc, #96]	; (8011d54 <netif_issue_reports+0x74>)
 8011cf4:	f240 326d 	movw	r2, #877	; 0x36d
 8011cf8:	4917      	ldr	r1, [pc, #92]	; (8011d58 <netif_issue_reports+0x78>)
 8011cfa:	4818      	ldr	r0, [pc, #96]	; (8011d5c <netif_issue_reports+0x7c>)
 8011cfc:	f009 fdca 	bl	801b894 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d06:	f003 0304 	and.w	r3, r3, #4
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d01e      	beq.n	8011d4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d017      	beq.n	8011d4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011d1c:	78fb      	ldrb	r3, [r7, #3]
 8011d1e:	f003 0301 	and.w	r3, r3, #1
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d013      	beq.n	8011d4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	3304      	adds	r3, #4
 8011d2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00e      	beq.n	8011d4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d36:	f003 0308 	and.w	r3, r3, #8
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d007      	beq.n	8011d4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	3304      	adds	r3, #4
 8011d42:	4619      	mov	r1, r3
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f007 fa47 	bl	80191d8 <etharp_request>
 8011d4a:	e000      	b.n	8011d4e <netif_issue_reports+0x6e>
    return;
 8011d4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	0801caf8 	.word	0x0801caf8
 8011d58:	0801cc9c 	.word	0x0801cc9c
 8011d5c:	0801cb48 	.word	0x0801cb48

08011d60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d107      	bne.n	8011d7e <netif_set_down+0x1e>
 8011d6e:	4b12      	ldr	r3, [pc, #72]	; (8011db8 <netif_set_down+0x58>)
 8011d70:	f240 329b 	movw	r2, #923	; 0x39b
 8011d74:	4911      	ldr	r1, [pc, #68]	; (8011dbc <netif_set_down+0x5c>)
 8011d76:	4812      	ldr	r0, [pc, #72]	; (8011dc0 <netif_set_down+0x60>)
 8011d78:	f009 fd8c 	bl	801b894 <iprintf>
 8011d7c:	e019      	b.n	8011db2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d84:	f003 0301 	and.w	r3, r3, #1
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d012      	beq.n	8011db2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d92:	f023 0301 	bic.w	r3, r3, #1
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011da4:	f003 0308 	and.w	r3, r3, #8
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d002      	beq.n	8011db2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f006 fdd1 	bl	8018954 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	0801caf8 	.word	0x0801caf8
 8011dbc:	0801ccc0 	.word	0x0801ccc0
 8011dc0:	0801cb48 	.word	0x0801cb48

08011dc4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d107      	bne.n	8011de2 <netif_set_link_up+0x1e>
 8011dd2:	4b13      	ldr	r3, [pc, #76]	; (8011e20 <netif_set_link_up+0x5c>)
 8011dd4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011dd8:	4912      	ldr	r1, [pc, #72]	; (8011e24 <netif_set_link_up+0x60>)
 8011dda:	4813      	ldr	r0, [pc, #76]	; (8011e28 <netif_set_link_up+0x64>)
 8011ddc:	f009 fd5a 	bl	801b894 <iprintf>
 8011de0:	e01b      	b.n	8011e1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011de8:	f003 0304 	and.w	r3, r3, #4
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d114      	bne.n	8011e1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011df6:	f043 0304 	orr.w	r3, r3, #4
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011e02:	2103      	movs	r1, #3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff ff6b 	bl	8011ce0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	69db      	ldr	r3, [r3, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d003      	beq.n	8011e1a <netif_set_link_up+0x56>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	69db      	ldr	r3, [r3, #28]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	0801caf8 	.word	0x0801caf8
 8011e24:	0801cce0 	.word	0x0801cce0
 8011e28:	0801cb48 	.word	0x0801cb48

08011e2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d107      	bne.n	8011e4a <netif_set_link_down+0x1e>
 8011e3a:	4b11      	ldr	r3, [pc, #68]	; (8011e80 <netif_set_link_down+0x54>)
 8011e3c:	f240 4206 	movw	r2, #1030	; 0x406
 8011e40:	4910      	ldr	r1, [pc, #64]	; (8011e84 <netif_set_link_down+0x58>)
 8011e42:	4811      	ldr	r0, [pc, #68]	; (8011e88 <netif_set_link_down+0x5c>)
 8011e44:	f009 fd26 	bl	801b894 <iprintf>
 8011e48:	e017      	b.n	8011e7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e50:	f003 0304 	and.w	r3, r3, #4
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d010      	beq.n	8011e7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e5e:	f023 0304 	bic.w	r3, r3, #4
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	69db      	ldr	r3, [r3, #28]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d003      	beq.n	8011e7a <netif_set_link_down+0x4e>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	69db      	ldr	r3, [r3, #28]
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	0801caf8 	.word	0x0801caf8
 8011e84:	0801cd04 	.word	0x0801cd04
 8011e88:	0801cb48 	.word	0x0801cb48

08011e8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	683a      	ldr	r2, [r7, #0]
 8011ea0:	61da      	str	r2, [r3, #28]
  }
}
 8011ea2:	bf00      	nop
 8011ea4:	370c      	adds	r7, #12
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr

08011eae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011eae:	b480      	push	{r7}
 8011eb0:	b085      	sub	sp, #20
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	60f8      	str	r0, [r7, #12]
 8011eb6:	60b9      	str	r1, [r7, #8]
 8011eb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011eba:	f06f 030b 	mvn.w	r3, #11
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr
	...

08011ecc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011ed6:	79fb      	ldrb	r3, [r7, #7]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d013      	beq.n	8011f04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011edc:	4b0d      	ldr	r3, [pc, #52]	; (8011f14 <netif_get_by_index+0x48>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	60fb      	str	r3, [r7, #12]
 8011ee2:	e00c      	b.n	8011efe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011eea:	3301      	adds	r3, #1
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	79fa      	ldrb	r2, [r7, #7]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d101      	bne.n	8011ef8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	e006      	b.n	8011f06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	60fb      	str	r3, [r7, #12]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1ef      	bne.n	8011ee4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3714      	adds	r7, #20
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	2000860c 	.word	0x2000860c

08011f18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011f1e:	4b0c      	ldr	r3, [pc, #48]	; (8011f50 <pbuf_free_ooseq+0x38>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011f24:	4b0b      	ldr	r3, [pc, #44]	; (8011f54 <pbuf_free_ooseq+0x3c>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	607b      	str	r3, [r7, #4]
 8011f2a:	e00a      	b.n	8011f42 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d003      	beq.n	8011f3c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f002 f93d 	bl	80141b4 <tcp_free_ooseq>
      return;
 8011f3a:	e005      	b.n	8011f48 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	607b      	str	r3, [r7, #4]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1f1      	bne.n	8011f2c <pbuf_free_ooseq+0x14>
    }
  }
}
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	20008615 	.word	0x20008615
 8011f54:	20008624 	.word	0x20008624

08011f58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8011f5c:	4b03      	ldr	r3, [pc, #12]	; (8011f6c <pbuf_pool_is_empty+0x14>)
 8011f5e:	2201      	movs	r2, #1
 8011f60:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011f62:	bf00      	nop
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	20008615 	.word	0x20008615

08011f70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	460b      	mov	r3, r1
 8011f80:	80fb      	strh	r3, [r7, #6]
 8011f82:	4613      	mov	r3, r2
 8011f84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	88fa      	ldrh	r2, [r7, #6]
 8011f96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	88ba      	ldrh	r2, [r7, #4]
 8011f9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011f9e:	8b3b      	ldrh	r3, [r7, #24]
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	7f3a      	ldrb	r2, [r7, #28]
 8011faa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2201      	movs	r2, #1
 8011fb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	73da      	strb	r2, [r3, #15]
}
 8011fb8:	bf00      	nop
 8011fba:	3714      	adds	r7, #20
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b08c      	sub	sp, #48	; 0x30
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	4603      	mov	r3, r0
 8011fcc:	71fb      	strb	r3, [r7, #7]
 8011fce:	460b      	mov	r3, r1
 8011fd0:	80bb      	strh	r3, [r7, #4]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011fd6:	79fb      	ldrb	r3, [r7, #7]
 8011fd8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011fda:	887b      	ldrh	r3, [r7, #2]
 8011fdc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011fe0:	d07f      	beq.n	80120e2 <pbuf_alloc+0x11e>
 8011fe2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011fe6:	f300 80c8 	bgt.w	801217a <pbuf_alloc+0x1b6>
 8011fea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011fee:	d010      	beq.n	8012012 <pbuf_alloc+0x4e>
 8011ff0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011ff4:	f300 80c1 	bgt.w	801217a <pbuf_alloc+0x1b6>
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d002      	beq.n	8012002 <pbuf_alloc+0x3e>
 8011ffc:	2b41      	cmp	r3, #65	; 0x41
 8011ffe:	f040 80bc 	bne.w	801217a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012002:	887a      	ldrh	r2, [r7, #2]
 8012004:	88bb      	ldrh	r3, [r7, #4]
 8012006:	4619      	mov	r1, r3
 8012008:	2000      	movs	r0, #0
 801200a:	f000 f8d1 	bl	80121b0 <pbuf_alloc_reference>
 801200e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012010:	e0bd      	b.n	801218e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012016:	2300      	movs	r3, #0
 8012018:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801201a:	88bb      	ldrh	r3, [r7, #4]
 801201c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801201e:	2008      	movs	r0, #8
 8012020:	f7ff fbce 	bl	80117c0 <memp_malloc>
 8012024:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d109      	bne.n	8012040 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801202c:	f7ff ff94 	bl	8011f58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <pbuf_alloc+0x78>
            pbuf_free(p);
 8012036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012038:	f000 faa8 	bl	801258c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801203c:	2300      	movs	r3, #0
 801203e:	e0a7      	b.n	8012190 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012042:	3303      	adds	r3, #3
 8012044:	b29b      	uxth	r3, r3
 8012046:	f023 0303 	bic.w	r3, r3, #3
 801204a:	b29b      	uxth	r3, r3
 801204c:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8012050:	b29b      	uxth	r3, r3
 8012052:	8b7a      	ldrh	r2, [r7, #26]
 8012054:	4293      	cmp	r3, r2
 8012056:	bf28      	it	cs
 8012058:	4613      	movcs	r3, r2
 801205a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801205c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801205e:	3310      	adds	r3, #16
 8012060:	693a      	ldr	r2, [r7, #16]
 8012062:	4413      	add	r3, r2
 8012064:	3303      	adds	r3, #3
 8012066:	f023 0303 	bic.w	r3, r3, #3
 801206a:	4618      	mov	r0, r3
 801206c:	89f9      	ldrh	r1, [r7, #14]
 801206e:	8b7a      	ldrh	r2, [r7, #26]
 8012070:	2300      	movs	r3, #0
 8012072:	9301      	str	r3, [sp, #4]
 8012074:	887b      	ldrh	r3, [r7, #2]
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	460b      	mov	r3, r1
 801207a:	4601      	mov	r1, r0
 801207c:	6938      	ldr	r0, [r7, #16]
 801207e:	f7ff ff77 	bl	8011f70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	f003 0303 	and.w	r3, r3, #3
 801208a:	2b00      	cmp	r3, #0
 801208c:	d006      	beq.n	801209c <pbuf_alloc+0xd8>
 801208e:	4b42      	ldr	r3, [pc, #264]	; (8012198 <pbuf_alloc+0x1d4>)
 8012090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012094:	4941      	ldr	r1, [pc, #260]	; (801219c <pbuf_alloc+0x1d8>)
 8012096:	4842      	ldr	r0, [pc, #264]	; (80121a0 <pbuf_alloc+0x1dc>)
 8012098:	f009 fbfc 	bl	801b894 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801209c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801209e:	3303      	adds	r3, #3
 80120a0:	f023 0303 	bic.w	r3, r3, #3
 80120a4:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80120a8:	d106      	bne.n	80120b8 <pbuf_alloc+0xf4>
 80120aa:	4b3b      	ldr	r3, [pc, #236]	; (8012198 <pbuf_alloc+0x1d4>)
 80120ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 80120b0:	493c      	ldr	r1, [pc, #240]	; (80121a4 <pbuf_alloc+0x1e0>)
 80120b2:	483b      	ldr	r0, [pc, #236]	; (80121a0 <pbuf_alloc+0x1dc>)
 80120b4:	f009 fbee 	bl	801b894 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d102      	bne.n	80120c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
 80120c2:	e002      	b.n	80120ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	693a      	ldr	r2, [r7, #16]
 80120c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80120ce:	8b7a      	ldrh	r2, [r7, #26]
 80120d0:	89fb      	ldrh	r3, [r7, #14]
 80120d2:	1ad3      	subs	r3, r2, r3
 80120d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80120da:	8b7b      	ldrh	r3, [r7, #26]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d19e      	bne.n	801201e <pbuf_alloc+0x5a>
      break;
 80120e0:	e055      	b.n	801218e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80120e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120e4:	3303      	adds	r3, #3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	f023 0303 	bic.w	r3, r3, #3
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	88bb      	ldrh	r3, [r7, #4]
 80120f0:	3303      	adds	r3, #3
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	f023 0303 	bic.w	r3, r3, #3
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	4413      	add	r3, r2
 80120fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80120fe:	8b3b      	ldrh	r3, [r7, #24]
 8012100:	3310      	adds	r3, #16
 8012102:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012104:	8b3a      	ldrh	r2, [r7, #24]
 8012106:	88bb      	ldrh	r3, [r7, #4]
 8012108:	3303      	adds	r3, #3
 801210a:	f023 0303 	bic.w	r3, r3, #3
 801210e:	429a      	cmp	r2, r3
 8012110:	d306      	bcc.n	8012120 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012112:	8afa      	ldrh	r2, [r7, #22]
 8012114:	88bb      	ldrh	r3, [r7, #4]
 8012116:	3303      	adds	r3, #3
 8012118:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801211c:	429a      	cmp	r2, r3
 801211e:	d201      	bcs.n	8012124 <pbuf_alloc+0x160>
        return NULL;
 8012120:	2300      	movs	r3, #0
 8012122:	e035      	b.n	8012190 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012124:	8afb      	ldrh	r3, [r7, #22]
 8012126:	4618      	mov	r0, r3
 8012128:	f7ff f9ba 	bl	80114a0 <mem_malloc>
 801212c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <pbuf_alloc+0x174>
        return NULL;
 8012134:	2300      	movs	r3, #0
 8012136:	e02b      	b.n	8012190 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801213a:	3310      	adds	r3, #16
 801213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801213e:	4413      	add	r3, r2
 8012140:	3303      	adds	r3, #3
 8012142:	f023 0303 	bic.w	r3, r3, #3
 8012146:	4618      	mov	r0, r3
 8012148:	88b9      	ldrh	r1, [r7, #4]
 801214a:	88ba      	ldrh	r2, [r7, #4]
 801214c:	2300      	movs	r3, #0
 801214e:	9301      	str	r3, [sp, #4]
 8012150:	887b      	ldrh	r3, [r7, #2]
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	460b      	mov	r3, r1
 8012156:	4601      	mov	r1, r0
 8012158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801215a:	f7ff ff09 	bl	8011f70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	f003 0303 	and.w	r3, r3, #3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d010      	beq.n	801218c <pbuf_alloc+0x1c8>
 801216a:	4b0b      	ldr	r3, [pc, #44]	; (8012198 <pbuf_alloc+0x1d4>)
 801216c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012170:	490d      	ldr	r1, [pc, #52]	; (80121a8 <pbuf_alloc+0x1e4>)
 8012172:	480b      	ldr	r0, [pc, #44]	; (80121a0 <pbuf_alloc+0x1dc>)
 8012174:	f009 fb8e 	bl	801b894 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012178:	e008      	b.n	801218c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801217a:	4b07      	ldr	r3, [pc, #28]	; (8012198 <pbuf_alloc+0x1d4>)
 801217c:	f240 1227 	movw	r2, #295	; 0x127
 8012180:	490a      	ldr	r1, [pc, #40]	; (80121ac <pbuf_alloc+0x1e8>)
 8012182:	4807      	ldr	r0, [pc, #28]	; (80121a0 <pbuf_alloc+0x1dc>)
 8012184:	f009 fb86 	bl	801b894 <iprintf>
      return NULL;
 8012188:	2300      	movs	r3, #0
 801218a:	e001      	b.n	8012190 <pbuf_alloc+0x1cc>
      break;
 801218c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012190:	4618      	mov	r0, r3
 8012192:	3728      	adds	r7, #40	; 0x28
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	0801cd28 	.word	0x0801cd28
 801219c:	0801cd58 	.word	0x0801cd58
 80121a0:	0801cd88 	.word	0x0801cd88
 80121a4:	0801cdb0 	.word	0x0801cdb0
 80121a8:	0801cde4 	.word	0x0801cde4
 80121ac:	0801ce10 	.word	0x0801ce10

080121b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af02      	add	r7, sp, #8
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	460b      	mov	r3, r1
 80121ba:	807b      	strh	r3, [r7, #2]
 80121bc:	4613      	mov	r3, r2
 80121be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80121c0:	883b      	ldrh	r3, [r7, #0]
 80121c2:	2b41      	cmp	r3, #65	; 0x41
 80121c4:	d009      	beq.n	80121da <pbuf_alloc_reference+0x2a>
 80121c6:	883b      	ldrh	r3, [r7, #0]
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d006      	beq.n	80121da <pbuf_alloc_reference+0x2a>
 80121cc:	4b0f      	ldr	r3, [pc, #60]	; (801220c <pbuf_alloc_reference+0x5c>)
 80121ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80121d2:	490f      	ldr	r1, [pc, #60]	; (8012210 <pbuf_alloc_reference+0x60>)
 80121d4:	480f      	ldr	r0, [pc, #60]	; (8012214 <pbuf_alloc_reference+0x64>)
 80121d6:	f009 fb5d 	bl	801b894 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80121da:	2007      	movs	r0, #7
 80121dc:	f7ff faf0 	bl	80117c0 <memp_malloc>
 80121e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d101      	bne.n	80121ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80121e8:	2300      	movs	r3, #0
 80121ea:	e00b      	b.n	8012204 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80121ec:	8879      	ldrh	r1, [r7, #2]
 80121ee:	887a      	ldrh	r2, [r7, #2]
 80121f0:	2300      	movs	r3, #0
 80121f2:	9301      	str	r3, [sp, #4]
 80121f4:	883b      	ldrh	r3, [r7, #0]
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	460b      	mov	r3, r1
 80121fa:	6879      	ldr	r1, [r7, #4]
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f7ff feb7 	bl	8011f70 <pbuf_init_alloced_pbuf>
  return p;
 8012202:	68fb      	ldr	r3, [r7, #12]
}
 8012204:	4618      	mov	r0, r3
 8012206:	3710      	adds	r7, #16
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	0801cd28 	.word	0x0801cd28
 8012210:	0801ce2c 	.word	0x0801ce2c
 8012214:	0801cd88 	.word	0x0801cd88

08012218 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b088      	sub	sp, #32
 801221c:	af02      	add	r7, sp, #8
 801221e:	607b      	str	r3, [r7, #4]
 8012220:	4603      	mov	r3, r0
 8012222:	73fb      	strb	r3, [r7, #15]
 8012224:	460b      	mov	r3, r1
 8012226:	81bb      	strh	r3, [r7, #12]
 8012228:	4613      	mov	r3, r2
 801222a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801222c:	7bfb      	ldrb	r3, [r7, #15]
 801222e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012230:	8a7b      	ldrh	r3, [r7, #18]
 8012232:	3303      	adds	r3, #3
 8012234:	f023 0203 	bic.w	r2, r3, #3
 8012238:	89bb      	ldrh	r3, [r7, #12]
 801223a:	441a      	add	r2, r3
 801223c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801223e:	429a      	cmp	r2, r3
 8012240:	d901      	bls.n	8012246 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	e018      	b.n	8012278 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d007      	beq.n	801225c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801224c:	8a7b      	ldrh	r3, [r7, #18]
 801224e:	3303      	adds	r3, #3
 8012250:	f023 0303 	bic.w	r3, r3, #3
 8012254:	6a3a      	ldr	r2, [r7, #32]
 8012256:	4413      	add	r3, r2
 8012258:	617b      	str	r3, [r7, #20]
 801225a:	e001      	b.n	8012260 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801225c:	2300      	movs	r3, #0
 801225e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	89b9      	ldrh	r1, [r7, #12]
 8012264:	89ba      	ldrh	r2, [r7, #12]
 8012266:	2302      	movs	r3, #2
 8012268:	9301      	str	r3, [sp, #4]
 801226a:	897b      	ldrh	r3, [r7, #10]
 801226c:	9300      	str	r3, [sp, #0]
 801226e:	460b      	mov	r3, r1
 8012270:	6979      	ldr	r1, [r7, #20]
 8012272:	f7ff fe7d 	bl	8011f70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012276:	687b      	ldr	r3, [r7, #4]
}
 8012278:	4618      	mov	r0, r3
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d106      	bne.n	80122a0 <pbuf_realloc+0x20>
 8012292:	4b3a      	ldr	r3, [pc, #232]	; (801237c <pbuf_realloc+0xfc>)
 8012294:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012298:	4939      	ldr	r1, [pc, #228]	; (8012380 <pbuf_realloc+0x100>)
 801229a:	483a      	ldr	r0, [pc, #232]	; (8012384 <pbuf_realloc+0x104>)
 801229c:	f009 fafa 	bl	801b894 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	891b      	ldrh	r3, [r3, #8]
 80122a4:	887a      	ldrh	r2, [r7, #2]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d263      	bcs.n	8012372 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	891a      	ldrh	r2, [r3, #8]
 80122ae:	887b      	ldrh	r3, [r7, #2]
 80122b0:	1ad3      	subs	r3, r2, r3
 80122b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80122b4:	887b      	ldrh	r3, [r7, #2]
 80122b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80122bc:	e018      	b.n	80122f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	895b      	ldrh	r3, [r3, #10]
 80122c2:	897a      	ldrh	r2, [r7, #10]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	891a      	ldrh	r2, [r3, #8]
 80122cc:	893b      	ldrh	r3, [r7, #8]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <pbuf_realloc+0x70>
 80122e2:	4b26      	ldr	r3, [pc, #152]	; (801237c <pbuf_realloc+0xfc>)
 80122e4:	f240 12af 	movw	r2, #431	; 0x1af
 80122e8:	4927      	ldr	r1, [pc, #156]	; (8012388 <pbuf_realloc+0x108>)
 80122ea:	4826      	ldr	r0, [pc, #152]	; (8012384 <pbuf_realloc+0x104>)
 80122ec:	f009 fad2 	bl	801b894 <iprintf>
  while (rem_len > q->len) {
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	897a      	ldrh	r2, [r7, #10]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d8e1      	bhi.n	80122be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	7b1b      	ldrb	r3, [r3, #12]
 80122fe:	f003 030f 	and.w	r3, r3, #15
 8012302:	2b00      	cmp	r3, #0
 8012304:	d121      	bne.n	801234a <pbuf_realloc+0xca>
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	895b      	ldrh	r3, [r3, #10]
 801230a:	897a      	ldrh	r2, [r7, #10]
 801230c:	429a      	cmp	r2, r3
 801230e:	d01c      	beq.n	801234a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7b5b      	ldrb	r3, [r3, #13]
 8012314:	f003 0302 	and.w	r3, r3, #2
 8012318:	2b00      	cmp	r3, #0
 801231a:	d116      	bne.n	801234a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	685a      	ldr	r2, [r3, #4]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	b29a      	uxth	r2, r3
 8012326:	897b      	ldrh	r3, [r7, #10]
 8012328:	4413      	add	r3, r2
 801232a:	b29b      	uxth	r3, r3
 801232c:	4619      	mov	r1, r3
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f7fe ffba 	bl	80112a8 <mem_trim>
 8012334:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <pbuf_realloc+0xca>
 801233c:	4b0f      	ldr	r3, [pc, #60]	; (801237c <pbuf_realloc+0xfc>)
 801233e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012342:	4912      	ldr	r1, [pc, #72]	; (801238c <pbuf_realloc+0x10c>)
 8012344:	480f      	ldr	r0, [pc, #60]	; (8012384 <pbuf_realloc+0x104>)
 8012346:	f009 faa5 	bl	801b894 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	897a      	ldrh	r2, [r7, #10]
 801234e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	895a      	ldrh	r2, [r3, #10]
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d004      	beq.n	801236a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4618      	mov	r0, r3
 8012366:	f000 f911 	bl	801258c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2200      	movs	r2, #0
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	e000      	b.n	8012374 <pbuf_realloc+0xf4>
    return;
 8012372:	bf00      	nop

}
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	0801cd28 	.word	0x0801cd28
 8012380:	0801ce40 	.word	0x0801ce40
 8012384:	0801cd88 	.word	0x0801cd88
 8012388:	0801ce58 	.word	0x0801ce58
 801238c:	0801ce70 	.word	0x0801ce70

08012390 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	4613      	mov	r3, r2
 801239c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d106      	bne.n	80123b2 <pbuf_add_header_impl+0x22>
 80123a4:	4b2b      	ldr	r3, [pc, #172]	; (8012454 <pbuf_add_header_impl+0xc4>)
 80123a6:	f240 12df 	movw	r2, #479	; 0x1df
 80123aa:	492b      	ldr	r1, [pc, #172]	; (8012458 <pbuf_add_header_impl+0xc8>)
 80123ac:	482b      	ldr	r0, [pc, #172]	; (801245c <pbuf_add_header_impl+0xcc>)
 80123ae:	f009 fa71 	bl	801b894 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d003      	beq.n	80123c0 <pbuf_add_header_impl+0x30>
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123be:	d301      	bcc.n	80123c4 <pbuf_add_header_impl+0x34>
    return 1;
 80123c0:	2301      	movs	r3, #1
 80123c2:	e043      	b.n	801244c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d101      	bne.n	80123ce <pbuf_add_header_impl+0x3e>
    return 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	e03e      	b.n	801244c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	891a      	ldrh	r2, [r3, #8]
 80123d6:	8a7b      	ldrh	r3, [r7, #18]
 80123d8:	4413      	add	r3, r2
 80123da:	b29b      	uxth	r3, r3
 80123dc:	8a7a      	ldrh	r2, [r7, #18]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d901      	bls.n	80123e6 <pbuf_add_header_impl+0x56>
    return 1;
 80123e2:	2301      	movs	r3, #1
 80123e4:	e032      	b.n	801244c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	7b1b      	ldrb	r3, [r3, #12]
 80123ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80123ec:	8a3b      	ldrh	r3, [r7, #16]
 80123ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00c      	beq.n	8012410 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	685a      	ldr	r2, [r3, #4]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	425b      	negs	r3, r3
 80123fe:	4413      	add	r3, r2
 8012400:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	3310      	adds	r3, #16
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	429a      	cmp	r2, r3
 801240a:	d20d      	bcs.n	8012428 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801240c:	2301      	movs	r3, #1
 801240e:	e01d      	b.n	801244c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d006      	beq.n	8012424 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	685a      	ldr	r2, [r3, #4]
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	425b      	negs	r3, r3
 801241e:	4413      	add	r3, r2
 8012420:	617b      	str	r3, [r7, #20]
 8012422:	e001      	b.n	8012428 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012424:	2301      	movs	r3, #1
 8012426:	e011      	b.n	801244c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	697a      	ldr	r2, [r7, #20]
 801242c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	895a      	ldrh	r2, [r3, #10]
 8012432:	8a7b      	ldrh	r3, [r7, #18]
 8012434:	4413      	add	r3, r2
 8012436:	b29a      	uxth	r2, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	891a      	ldrh	r2, [r3, #8]
 8012440:	8a7b      	ldrh	r3, [r7, #18]
 8012442:	4413      	add	r3, r2
 8012444:	b29a      	uxth	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	811a      	strh	r2, [r3, #8]


  return 0;
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	0801cd28 	.word	0x0801cd28
 8012458:	0801ce8c 	.word	0x0801ce8c
 801245c:	0801cd88 	.word	0x0801cd88

08012460 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801246a:	2200      	movs	r2, #0
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7ff ff8e 	bl	8012390 <pbuf_add_header_impl>
 8012474:	4603      	mov	r3, r0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3708      	adds	r7, #8
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
	...

08012480 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <pbuf_remove_header+0x1e>
 8012490:	4b20      	ldr	r3, [pc, #128]	; (8012514 <pbuf_remove_header+0x94>)
 8012492:	f240 224b 	movw	r2, #587	; 0x24b
 8012496:	4920      	ldr	r1, [pc, #128]	; (8012518 <pbuf_remove_header+0x98>)
 8012498:	4820      	ldr	r0, [pc, #128]	; (801251c <pbuf_remove_header+0x9c>)
 801249a:	f009 f9fb 	bl	801b894 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <pbuf_remove_header+0x2c>
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124aa:	d301      	bcc.n	80124b0 <pbuf_remove_header+0x30>
    return 1;
 80124ac:	2301      	movs	r3, #1
 80124ae:	e02c      	b.n	801250a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <pbuf_remove_header+0x3a>
    return 0;
 80124b6:	2300      	movs	r3, #0
 80124b8:	e027      	b.n	801250a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	895b      	ldrh	r3, [r3, #10]
 80124c2:	89fa      	ldrh	r2, [r7, #14]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d908      	bls.n	80124da <pbuf_remove_header+0x5a>
 80124c8:	4b12      	ldr	r3, [pc, #72]	; (8012514 <pbuf_remove_header+0x94>)
 80124ca:	f240 2255 	movw	r2, #597	; 0x255
 80124ce:	4914      	ldr	r1, [pc, #80]	; (8012520 <pbuf_remove_header+0xa0>)
 80124d0:	4812      	ldr	r0, [pc, #72]	; (801251c <pbuf_remove_header+0x9c>)
 80124d2:	f009 f9df 	bl	801b894 <iprintf>
 80124d6:	2301      	movs	r3, #1
 80124d8:	e017      	b.n	801250a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	685a      	ldr	r2, [r3, #4]
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	441a      	add	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	895a      	ldrh	r2, [r3, #10]
 80124f0:	89fb      	ldrh	r3, [r7, #14]
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	891a      	ldrh	r2, [r3, #8]
 80124fe:	89fb      	ldrh	r3, [r7, #14]
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	b29a      	uxth	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012508:	2300      	movs	r3, #0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3710      	adds	r7, #16
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	0801cd28 	.word	0x0801cd28
 8012518:	0801ce8c 	.word	0x0801ce8c
 801251c:	0801cd88 	.word	0x0801cd88
 8012520:	0801ce98 	.word	0x0801ce98

08012524 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	460b      	mov	r3, r1
 801252e:	807b      	strh	r3, [r7, #2]
 8012530:	4613      	mov	r3, r2
 8012532:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012538:	2b00      	cmp	r3, #0
 801253a:	da08      	bge.n	801254e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801253c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012540:	425b      	negs	r3, r3
 8012542:	4619      	mov	r1, r3
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f7ff ff9b 	bl	8012480 <pbuf_remove_header>
 801254a:	4603      	mov	r3, r0
 801254c:	e007      	b.n	801255e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801254e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012552:	787a      	ldrb	r2, [r7, #1]
 8012554:	4619      	mov	r1, r3
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff ff1a 	bl	8012390 <pbuf_add_header_impl>
 801255c:	4603      	mov	r3, r0
  }
}
 801255e:	4618      	mov	r0, r3
 8012560:	3708      	adds	r7, #8
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}

08012566 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012566:	b580      	push	{r7, lr}
 8012568:	b082      	sub	sp, #8
 801256a:	af00      	add	r7, sp, #0
 801256c:	6078      	str	r0, [r7, #4]
 801256e:	460b      	mov	r3, r1
 8012570:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012576:	2201      	movs	r2, #1
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7ff ffd2 	bl	8012524 <pbuf_header_impl>
 8012580:	4603      	mov	r3, r0
}
 8012582:	4618      	mov	r0, r3
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
	...

0801258c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b086      	sub	sp, #24
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d10b      	bne.n	80125b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d106      	bne.n	80125ae <pbuf_free+0x22>
 80125a0:	4b38      	ldr	r3, [pc, #224]	; (8012684 <pbuf_free+0xf8>)
 80125a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80125a6:	4938      	ldr	r1, [pc, #224]	; (8012688 <pbuf_free+0xfc>)
 80125a8:	4838      	ldr	r0, [pc, #224]	; (801268c <pbuf_free+0x100>)
 80125aa:	f009 f973 	bl	801b894 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	e063      	b.n	801267a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80125b6:	e05c      	b.n	8012672 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	7b9b      	ldrb	r3, [r3, #14]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d106      	bne.n	80125ce <pbuf_free+0x42>
 80125c0:	4b30      	ldr	r3, [pc, #192]	; (8012684 <pbuf_free+0xf8>)
 80125c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80125c6:	4932      	ldr	r1, [pc, #200]	; (8012690 <pbuf_free+0x104>)
 80125c8:	4830      	ldr	r0, [pc, #192]	; (801268c <pbuf_free+0x100>)
 80125ca:	f009 f963 	bl	801b894 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7b9b      	ldrb	r3, [r3, #14]
 80125d2:	3b01      	subs	r3, #1
 80125d4:	b2da      	uxtb	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	739a      	strb	r2, [r3, #14]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	7b9b      	ldrb	r3, [r3, #14]
 80125de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80125e0:	7dbb      	ldrb	r3, [r7, #22]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d143      	bne.n	801266e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7b1b      	ldrb	r3, [r3, #12]
 80125f0:	f003 030f 	and.w	r3, r3, #15
 80125f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	7b5b      	ldrb	r3, [r3, #13]
 80125fa:	f003 0302 	and.w	r3, r3, #2
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d011      	beq.n	8012626 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	691b      	ldr	r3, [r3, #16]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <pbuf_free+0x90>
 801260e:	4b1d      	ldr	r3, [pc, #116]	; (8012684 <pbuf_free+0xf8>)
 8012610:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012614:	491f      	ldr	r1, [pc, #124]	; (8012694 <pbuf_free+0x108>)
 8012616:	481d      	ldr	r0, [pc, #116]	; (801268c <pbuf_free+0x100>)
 8012618:	f009 f93c 	bl	801b894 <iprintf>
        pc->custom_free_function(p);
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	4798      	blx	r3
 8012624:	e01d      	b.n	8012662 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012626:	7bfb      	ldrb	r3, [r7, #15]
 8012628:	2b02      	cmp	r3, #2
 801262a:	d104      	bne.n	8012636 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801262c:	6879      	ldr	r1, [r7, #4]
 801262e:	2008      	movs	r0, #8
 8012630:	f7ff f936 	bl	80118a0 <memp_free>
 8012634:	e015      	b.n	8012662 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012636:	7bfb      	ldrb	r3, [r7, #15]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d104      	bne.n	8012646 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801263c:	6879      	ldr	r1, [r7, #4]
 801263e:	2007      	movs	r0, #7
 8012640:	f7ff f92e 	bl	80118a0 <memp_free>
 8012644:	e00d      	b.n	8012662 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d103      	bne.n	8012654 <pbuf_free+0xc8>
          mem_free(p);
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f7fe fdc1 	bl	80111d4 <mem_free>
 8012652:	e006      	b.n	8012662 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012654:	4b0b      	ldr	r3, [pc, #44]	; (8012684 <pbuf_free+0xf8>)
 8012656:	f240 320f 	movw	r2, #783	; 0x30f
 801265a:	490f      	ldr	r1, [pc, #60]	; (8012698 <pbuf_free+0x10c>)
 801265c:	480b      	ldr	r0, [pc, #44]	; (801268c <pbuf_free+0x100>)
 801265e:	f009 f919 	bl	801b894 <iprintf>
        }
      }
      count++;
 8012662:	7dfb      	ldrb	r3, [r7, #23]
 8012664:	3301      	adds	r3, #1
 8012666:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	607b      	str	r3, [r7, #4]
 801266c:	e001      	b.n	8012672 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d19f      	bne.n	80125b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012678:	7dfb      	ldrb	r3, [r7, #23]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3718      	adds	r7, #24
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	0801cd28 	.word	0x0801cd28
 8012688:	0801ce8c 	.word	0x0801ce8c
 801268c:	0801cd88 	.word	0x0801cd88
 8012690:	0801ceb8 	.word	0x0801ceb8
 8012694:	0801ced0 	.word	0x0801ced0
 8012698:	0801cef4 	.word	0x0801cef4

0801269c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80126a4:	2300      	movs	r3, #0
 80126a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80126a8:	e005      	b.n	80126b6 <pbuf_clen+0x1a>
    ++len;
 80126aa:	89fb      	ldrh	r3, [r7, #14]
 80126ac:	3301      	adds	r3, #1
 80126ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1f6      	bne.n	80126aa <pbuf_clen+0xe>
  }
  return len;
 80126bc:	89fb      	ldrh	r3, [r7, #14]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr
	...

080126cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d010      	beq.n	80126fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	7b9b      	ldrb	r3, [r3, #14]
 80126de:	3301      	adds	r3, #1
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	7b9b      	ldrb	r3, [r3, #14]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <pbuf_ref+0x30>
 80126ee:	4b05      	ldr	r3, [pc, #20]	; (8012704 <pbuf_ref+0x38>)
 80126f0:	f240 3242 	movw	r2, #834	; 0x342
 80126f4:	4904      	ldr	r1, [pc, #16]	; (8012708 <pbuf_ref+0x3c>)
 80126f6:	4805      	ldr	r0, [pc, #20]	; (801270c <pbuf_ref+0x40>)
 80126f8:	f009 f8cc 	bl	801b894 <iprintf>
  }
}
 80126fc:	bf00      	nop
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	0801cd28 	.word	0x0801cd28
 8012708:	0801cf08 	.word	0x0801cf08
 801270c:	0801cd88 	.word	0x0801cd88

08012710 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d002      	beq.n	8012726 <pbuf_cat+0x16>
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d107      	bne.n	8012736 <pbuf_cat+0x26>
 8012726:	4b20      	ldr	r3, [pc, #128]	; (80127a8 <pbuf_cat+0x98>)
 8012728:	f240 3259 	movw	r2, #857	; 0x359
 801272c:	491f      	ldr	r1, [pc, #124]	; (80127ac <pbuf_cat+0x9c>)
 801272e:	4820      	ldr	r0, [pc, #128]	; (80127b0 <pbuf_cat+0xa0>)
 8012730:	f009 f8b0 	bl	801b894 <iprintf>
 8012734:	e034      	b.n	80127a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	60fb      	str	r3, [r7, #12]
 801273a:	e00a      	b.n	8012752 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	891a      	ldrh	r2, [r3, #8]
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	891b      	ldrh	r3, [r3, #8]
 8012744:	4413      	add	r3, r2
 8012746:	b29a      	uxth	r2, r3
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	60fb      	str	r3, [r7, #12]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1f0      	bne.n	801273c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	891a      	ldrh	r2, [r3, #8]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	895b      	ldrh	r3, [r3, #10]
 8012762:	429a      	cmp	r2, r3
 8012764:	d006      	beq.n	8012774 <pbuf_cat+0x64>
 8012766:	4b10      	ldr	r3, [pc, #64]	; (80127a8 <pbuf_cat+0x98>)
 8012768:	f240 3262 	movw	r2, #866	; 0x362
 801276c:	4911      	ldr	r1, [pc, #68]	; (80127b4 <pbuf_cat+0xa4>)
 801276e:	4810      	ldr	r0, [pc, #64]	; (80127b0 <pbuf_cat+0xa0>)
 8012770:	f009 f890 	bl	801b894 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <pbuf_cat+0x7a>
 801277c:	4b0a      	ldr	r3, [pc, #40]	; (80127a8 <pbuf_cat+0x98>)
 801277e:	f240 3263 	movw	r2, #867	; 0x363
 8012782:	490d      	ldr	r1, [pc, #52]	; (80127b8 <pbuf_cat+0xa8>)
 8012784:	480a      	ldr	r0, [pc, #40]	; (80127b0 <pbuf_cat+0xa0>)
 8012786:	f009 f885 	bl	801b894 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	891a      	ldrh	r2, [r3, #8]
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	891b      	ldrh	r3, [r3, #8]
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	683a      	ldr	r2, [r7, #0]
 801279e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80127a0:	3710      	adds	r7, #16
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	0801cd28 	.word	0x0801cd28
 80127ac:	0801cf1c 	.word	0x0801cf1c
 80127b0:	0801cd88 	.word	0x0801cd88
 80127b4:	0801cf54 	.word	0x0801cf54
 80127b8:	0801cf84 	.word	0x0801cf84

080127bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b086      	sub	sp, #24
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80127c6:	2300      	movs	r3, #0
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	2300      	movs	r3, #0
 80127cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d008      	beq.n	80127e6 <pbuf_copy+0x2a>
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d005      	beq.n	80127e6 <pbuf_copy+0x2a>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	891a      	ldrh	r2, [r3, #8]
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	891b      	ldrh	r3, [r3, #8]
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d209      	bcs.n	80127fa <pbuf_copy+0x3e>
 80127e6:	4b57      	ldr	r3, [pc, #348]	; (8012944 <pbuf_copy+0x188>)
 80127e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80127ec:	4956      	ldr	r1, [pc, #344]	; (8012948 <pbuf_copy+0x18c>)
 80127ee:	4857      	ldr	r0, [pc, #348]	; (801294c <pbuf_copy+0x190>)
 80127f0:	f009 f850 	bl	801b894 <iprintf>
 80127f4:	f06f 030f 	mvn.w	r3, #15
 80127f8:	e09f      	b.n	801293a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	895b      	ldrh	r3, [r3, #10]
 80127fe:	461a      	mov	r2, r3
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	1ad2      	subs	r2, r2, r3
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	895b      	ldrh	r3, [r3, #10]
 8012808:	4619      	mov	r1, r3
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	1acb      	subs	r3, r1, r3
 801280e:	429a      	cmp	r2, r3
 8012810:	d306      	bcc.n	8012820 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	895b      	ldrh	r3, [r3, #10]
 8012816:	461a      	mov	r2, r3
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	60fb      	str	r3, [r7, #12]
 801281e:	e005      	b.n	801282c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	895b      	ldrh	r3, [r3, #10]
 8012824:	461a      	mov	r2, r3
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685a      	ldr	r2, [r3, #4]
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	18d0      	adds	r0, r2, r3
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	4413      	add	r3, r2
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	4619      	mov	r1, r3
 8012840:	f009 f903 	bl	801ba4a <memcpy>
    offset_to += len;
 8012844:	697a      	ldr	r2, [r7, #20]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	4413      	add	r3, r2
 801284a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801284c:	693a      	ldr	r2, [r7, #16]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	4413      	add	r3, r2
 8012852:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	895b      	ldrh	r3, [r3, #10]
 8012858:	461a      	mov	r2, r3
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	4293      	cmp	r3, r2
 801285e:	d906      	bls.n	801286e <pbuf_copy+0xb2>
 8012860:	4b38      	ldr	r3, [pc, #224]	; (8012944 <pbuf_copy+0x188>)
 8012862:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012866:	493a      	ldr	r1, [pc, #232]	; (8012950 <pbuf_copy+0x194>)
 8012868:	4838      	ldr	r0, [pc, #224]	; (801294c <pbuf_copy+0x190>)
 801286a:	f009 f813 	bl	801b894 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	895b      	ldrh	r3, [r3, #10]
 8012872:	461a      	mov	r2, r3
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	4293      	cmp	r3, r2
 8012878:	d906      	bls.n	8012888 <pbuf_copy+0xcc>
 801287a:	4b32      	ldr	r3, [pc, #200]	; (8012944 <pbuf_copy+0x188>)
 801287c:	f240 32da 	movw	r2, #986	; 0x3da
 8012880:	4934      	ldr	r1, [pc, #208]	; (8012954 <pbuf_copy+0x198>)
 8012882:	4832      	ldr	r0, [pc, #200]	; (801294c <pbuf_copy+0x190>)
 8012884:	f009 f806 	bl	801b894 <iprintf>
    if (offset_from >= p_from->len) {
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	895b      	ldrh	r3, [r3, #10]
 801288c:	461a      	mov	r2, r3
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	4293      	cmp	r3, r2
 8012892:	d304      	bcc.n	801289e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	895b      	ldrh	r3, [r3, #10]
 80128a2:	461a      	mov	r2, r3
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d114      	bne.n	80128d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80128aa:	2300      	movs	r3, #0
 80128ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d10c      	bne.n	80128d4 <pbuf_copy+0x118>
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d009      	beq.n	80128d4 <pbuf_copy+0x118>
 80128c0:	4b20      	ldr	r3, [pc, #128]	; (8012944 <pbuf_copy+0x188>)
 80128c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80128c6:	4924      	ldr	r1, [pc, #144]	; (8012958 <pbuf_copy+0x19c>)
 80128c8:	4820      	ldr	r0, [pc, #128]	; (801294c <pbuf_copy+0x190>)
 80128ca:	f008 ffe3 	bl	801b894 <iprintf>
 80128ce:	f06f 030f 	mvn.w	r3, #15
 80128d2:	e032      	b.n	801293a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d013      	beq.n	8012902 <pbuf_copy+0x146>
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	895a      	ldrh	r2, [r3, #10]
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	891b      	ldrh	r3, [r3, #8]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d10d      	bne.n	8012902 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d009      	beq.n	8012902 <pbuf_copy+0x146>
 80128ee:	4b15      	ldr	r3, [pc, #84]	; (8012944 <pbuf_copy+0x188>)
 80128f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80128f4:	4919      	ldr	r1, [pc, #100]	; (801295c <pbuf_copy+0x1a0>)
 80128f6:	4815      	ldr	r0, [pc, #84]	; (801294c <pbuf_copy+0x190>)
 80128f8:	f008 ffcc 	bl	801b894 <iprintf>
 80128fc:	f06f 0305 	mvn.w	r3, #5
 8012900:	e01b      	b.n	801293a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d013      	beq.n	8012930 <pbuf_copy+0x174>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	895a      	ldrh	r2, [r3, #10]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	891b      	ldrh	r3, [r3, #8]
 8012910:	429a      	cmp	r2, r3
 8012912:	d10d      	bne.n	8012930 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d009      	beq.n	8012930 <pbuf_copy+0x174>
 801291c:	4b09      	ldr	r3, [pc, #36]	; (8012944 <pbuf_copy+0x188>)
 801291e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012922:	490e      	ldr	r1, [pc, #56]	; (801295c <pbuf_copy+0x1a0>)
 8012924:	4809      	ldr	r0, [pc, #36]	; (801294c <pbuf_copy+0x190>)
 8012926:	f008 ffb5 	bl	801b894 <iprintf>
 801292a:	f06f 0305 	mvn.w	r3, #5
 801292e:	e004      	b.n	801293a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	f47f af61 	bne.w	80127fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012938:	2300      	movs	r3, #0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3718      	adds	r7, #24
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	0801cd28 	.word	0x0801cd28
 8012948:	0801cfd0 	.word	0x0801cfd0
 801294c:	0801cd88 	.word	0x0801cd88
 8012950:	0801d000 	.word	0x0801d000
 8012954:	0801d018 	.word	0x0801d018
 8012958:	0801d034 	.word	0x0801d034
 801295c:	0801d044 	.word	0x0801d044

08012960 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b088      	sub	sp, #32
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	4611      	mov	r1, r2
 801296c:	461a      	mov	r2, r3
 801296e:	460b      	mov	r3, r1
 8012970:	80fb      	strh	r3, [r7, #6]
 8012972:	4613      	mov	r3, r2
 8012974:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012976:	2300      	movs	r3, #0
 8012978:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801297a:	2300      	movs	r3, #0
 801297c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d108      	bne.n	8012996 <pbuf_copy_partial+0x36>
 8012984:	4b2b      	ldr	r3, [pc, #172]	; (8012a34 <pbuf_copy_partial+0xd4>)
 8012986:	f240 420a 	movw	r2, #1034	; 0x40a
 801298a:	492b      	ldr	r1, [pc, #172]	; (8012a38 <pbuf_copy_partial+0xd8>)
 801298c:	482b      	ldr	r0, [pc, #172]	; (8012a3c <pbuf_copy_partial+0xdc>)
 801298e:	f008 ff81 	bl	801b894 <iprintf>
 8012992:	2300      	movs	r3, #0
 8012994:	e04a      	b.n	8012a2c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d108      	bne.n	80129ae <pbuf_copy_partial+0x4e>
 801299c:	4b25      	ldr	r3, [pc, #148]	; (8012a34 <pbuf_copy_partial+0xd4>)
 801299e:	f240 420b 	movw	r2, #1035	; 0x40b
 80129a2:	4927      	ldr	r1, [pc, #156]	; (8012a40 <pbuf_copy_partial+0xe0>)
 80129a4:	4825      	ldr	r0, [pc, #148]	; (8012a3c <pbuf_copy_partial+0xdc>)
 80129a6:	f008 ff75 	bl	801b894 <iprintf>
 80129aa:	2300      	movs	r3, #0
 80129ac:	e03e      	b.n	8012a2c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	61fb      	str	r3, [r7, #28]
 80129b2:	e034      	b.n	8012a1e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80129b4:	88bb      	ldrh	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d00a      	beq.n	80129d0 <pbuf_copy_partial+0x70>
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	895b      	ldrh	r3, [r3, #10]
 80129be:	88ba      	ldrh	r2, [r7, #4]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d305      	bcc.n	80129d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	895b      	ldrh	r3, [r3, #10]
 80129c8:	88ba      	ldrh	r2, [r7, #4]
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	80bb      	strh	r3, [r7, #4]
 80129ce:	e023      	b.n	8012a18 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	895a      	ldrh	r2, [r3, #10]
 80129d4:	88bb      	ldrh	r3, [r7, #4]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80129da:	8b3a      	ldrh	r2, [r7, #24]
 80129dc:	88fb      	ldrh	r3, [r7, #6]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d901      	bls.n	80129e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80129e2:	88fb      	ldrh	r3, [r7, #6]
 80129e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80129e6:	8b7b      	ldrh	r3, [r7, #26]
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	18d0      	adds	r0, r2, r3
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	88bb      	ldrh	r3, [r7, #4]
 80129f2:	4413      	add	r3, r2
 80129f4:	8b3a      	ldrh	r2, [r7, #24]
 80129f6:	4619      	mov	r1, r3
 80129f8:	f009 f827 	bl	801ba4a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80129fc:	8afa      	ldrh	r2, [r7, #22]
 80129fe:	8b3b      	ldrh	r3, [r7, #24]
 8012a00:	4413      	add	r3, r2
 8012a02:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012a04:	8b7a      	ldrh	r2, [r7, #26]
 8012a06:	8b3b      	ldrh	r3, [r7, #24]
 8012a08:	4413      	add	r3, r2
 8012a0a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012a0c:	88fa      	ldrh	r2, [r7, #6]
 8012a0e:	8b3b      	ldrh	r3, [r7, #24]
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012a14:	2300      	movs	r3, #0
 8012a16:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	61fb      	str	r3, [r7, #28]
 8012a1e:	88fb      	ldrh	r3, [r7, #6]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <pbuf_copy_partial+0xca>
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1c4      	bne.n	80129b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012a2a:	8afb      	ldrh	r3, [r7, #22]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3720      	adds	r7, #32
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	0801cd28 	.word	0x0801cd28
 8012a38:	0801d070 	.word	0x0801d070
 8012a3c:	0801cd88 	.word	0x0801cd88
 8012a40:	0801d090 	.word	0x0801d090

08012a44 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	603a      	str	r2, [r7, #0]
 8012a4e:	71fb      	strb	r3, [r7, #7]
 8012a50:	460b      	mov	r3, r1
 8012a52:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	8919      	ldrh	r1, [r3, #8]
 8012a58:	88ba      	ldrh	r2, [r7, #4]
 8012a5a:	79fb      	ldrb	r3, [r7, #7]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7ff fab1 	bl	8011fc4 <pbuf_alloc>
 8012a62:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d101      	bne.n	8012a6e <pbuf_clone+0x2a>
    return NULL;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	e011      	b.n	8012a92 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012a6e:	6839      	ldr	r1, [r7, #0]
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f7ff fea3 	bl	80127bc <pbuf_copy>
 8012a76:	4603      	mov	r3, r0
 8012a78:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012a7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d006      	beq.n	8012a90 <pbuf_clone+0x4c>
 8012a82:	4b06      	ldr	r3, [pc, #24]	; (8012a9c <pbuf_clone+0x58>)
 8012a84:	f240 5224 	movw	r2, #1316	; 0x524
 8012a88:	4905      	ldr	r1, [pc, #20]	; (8012aa0 <pbuf_clone+0x5c>)
 8012a8a:	4806      	ldr	r0, [pc, #24]	; (8012aa4 <pbuf_clone+0x60>)
 8012a8c:	f008 ff02 	bl	801b894 <iprintf>
  return q;
 8012a90:	68fb      	ldr	r3, [r7, #12]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3710      	adds	r7, #16
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	0801cd28 	.word	0x0801cd28
 8012aa0:	0801d19c 	.word	0x0801d19c
 8012aa4:	0801cd88 	.word	0x0801cd88

08012aa8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012aac:	f008 fdf2 	bl	801b694 <rand>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	4b01      	ldr	r3, [pc, #4]	; (8012ac8 <tcp_init+0x20>)
 8012ac2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ac4:	bf00      	nop
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	2000012c 	.word	0x2000012c

08012acc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	7d1b      	ldrb	r3, [r3, #20]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d105      	bne.n	8012ae8 <tcp_free+0x1c>
 8012adc:	4b06      	ldr	r3, [pc, #24]	; (8012af8 <tcp_free+0x2c>)
 8012ade:	22d4      	movs	r2, #212	; 0xd4
 8012ae0:	4906      	ldr	r1, [pc, #24]	; (8012afc <tcp_free+0x30>)
 8012ae2:	4807      	ldr	r0, [pc, #28]	; (8012b00 <tcp_free+0x34>)
 8012ae4:	f008 fed6 	bl	801b894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012ae8:	6879      	ldr	r1, [r7, #4]
 8012aea:	2001      	movs	r0, #1
 8012aec:	f7fe fed8 	bl	80118a0 <memp_free>
}
 8012af0:	bf00      	nop
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	0801d228 	.word	0x0801d228
 8012afc:	0801d258 	.word	0x0801d258
 8012b00:	0801d26c 	.word	0x0801d26c

08012b04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	7d1b      	ldrb	r3, [r3, #20]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d105      	bne.n	8012b20 <tcp_free_listen+0x1c>
 8012b14:	4b06      	ldr	r3, [pc, #24]	; (8012b30 <tcp_free_listen+0x2c>)
 8012b16:	22df      	movs	r2, #223	; 0xdf
 8012b18:	4906      	ldr	r1, [pc, #24]	; (8012b34 <tcp_free_listen+0x30>)
 8012b1a:	4807      	ldr	r0, [pc, #28]	; (8012b38 <tcp_free_listen+0x34>)
 8012b1c:	f008 feba 	bl	801b894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012b20:	6879      	ldr	r1, [r7, #4]
 8012b22:	2002      	movs	r0, #2
 8012b24:	f7fe febc 	bl	80118a0 <memp_free>
}
 8012b28:	bf00      	nop
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	0801d228 	.word	0x0801d228
 8012b34:	0801d294 	.word	0x0801d294
 8012b38:	0801d26c 	.word	0x0801d26c

08012b3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012b40:	f000 fea2 	bl	8013888 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012b44:	4b07      	ldr	r3, [pc, #28]	; (8012b64 <tcp_tmr+0x28>)
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	b2da      	uxtb	r2, r3
 8012b4c:	4b05      	ldr	r3, [pc, #20]	; (8012b64 <tcp_tmr+0x28>)
 8012b4e:	701a      	strb	r2, [r3, #0]
 8012b50:	4b04      	ldr	r3, [pc, #16]	; (8012b64 <tcp_tmr+0x28>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	f003 0301 	and.w	r3, r3, #1
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012b5c:	f000 fb54 	bl	8013208 <tcp_slowtmr>
  }
}
 8012b60:	bf00      	nop
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	2000862d 	.word	0x2000862d

08012b68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d105      	bne.n	8012b84 <tcp_remove_listener+0x1c>
 8012b78:	4b0d      	ldr	r3, [pc, #52]	; (8012bb0 <tcp_remove_listener+0x48>)
 8012b7a:	22ff      	movs	r2, #255	; 0xff
 8012b7c:	490d      	ldr	r1, [pc, #52]	; (8012bb4 <tcp_remove_listener+0x4c>)
 8012b7e:	480e      	ldr	r0, [pc, #56]	; (8012bb8 <tcp_remove_listener+0x50>)
 8012b80:	f008 fe88 	bl	801b894 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	60fb      	str	r3, [r7, #12]
 8012b88:	e00a      	b.n	8012ba0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b8e:	683a      	ldr	r2, [r7, #0]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d102      	bne.n	8012b9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2200      	movs	r2, #0
 8012b98:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	60fb      	str	r3, [r7, #12]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1f1      	bne.n	8012b8a <tcp_remove_listener+0x22>
    }
  }
}
 8012ba6:	bf00      	nop
 8012ba8:	bf00      	nop
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	0801d228 	.word	0x0801d228
 8012bb4:	0801d2b0 	.word	0x0801d2b0
 8012bb8:	0801d26c 	.word	0x0801d26c

08012bbc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d106      	bne.n	8012bd8 <tcp_listen_closed+0x1c>
 8012bca:	4b14      	ldr	r3, [pc, #80]	; (8012c1c <tcp_listen_closed+0x60>)
 8012bcc:	f240 1211 	movw	r2, #273	; 0x111
 8012bd0:	4913      	ldr	r1, [pc, #76]	; (8012c20 <tcp_listen_closed+0x64>)
 8012bd2:	4814      	ldr	r0, [pc, #80]	; (8012c24 <tcp_listen_closed+0x68>)
 8012bd4:	f008 fe5e 	bl	801b894 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	7d1b      	ldrb	r3, [r3, #20]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d006      	beq.n	8012bee <tcp_listen_closed+0x32>
 8012be0:	4b0e      	ldr	r3, [pc, #56]	; (8012c1c <tcp_listen_closed+0x60>)
 8012be2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012be6:	4910      	ldr	r1, [pc, #64]	; (8012c28 <tcp_listen_closed+0x6c>)
 8012be8:	480e      	ldr	r0, [pc, #56]	; (8012c24 <tcp_listen_closed+0x68>)
 8012bea:	f008 fe53 	bl	801b894 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012bee:	2301      	movs	r3, #1
 8012bf0:	60fb      	str	r3, [r7, #12]
 8012bf2:	e00b      	b.n	8012c0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012bf4:	4a0d      	ldr	r2, [pc, #52]	; (8012c2c <tcp_listen_closed+0x70>)
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	6879      	ldr	r1, [r7, #4]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7ff ffb1 	bl	8012b68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	60fb      	str	r3, [r7, #12]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b03      	cmp	r3, #3
 8012c10:	d9f0      	bls.n	8012bf4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012c12:	bf00      	nop
 8012c14:	bf00      	nop
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	0801d228 	.word	0x0801d228
 8012c20:	0801d2d8 	.word	0x0801d2d8
 8012c24:	0801d26c 	.word	0x0801d26c
 8012c28:	0801d2e4 	.word	0x0801d2e4
 8012c2c:	0801f31c 	.word	0x0801f31c

08012c30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012c30:	b5b0      	push	{r4, r5, r7, lr}
 8012c32:	b088      	sub	sp, #32
 8012c34:	af04      	add	r7, sp, #16
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	460b      	mov	r3, r1
 8012c3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d106      	bne.n	8012c50 <tcp_close_shutdown+0x20>
 8012c42:	4b63      	ldr	r3, [pc, #396]	; (8012dd0 <tcp_close_shutdown+0x1a0>)
 8012c44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012c48:	4962      	ldr	r1, [pc, #392]	; (8012dd4 <tcp_close_shutdown+0x1a4>)
 8012c4a:	4863      	ldr	r0, [pc, #396]	; (8012dd8 <tcp_close_shutdown+0x1a8>)
 8012c4c:	f008 fe22 	bl	801b894 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d066      	beq.n	8012d24 <tcp_close_shutdown+0xf4>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	7d1b      	ldrb	r3, [r3, #20]
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	d003      	beq.n	8012c66 <tcp_close_shutdown+0x36>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	7d1b      	ldrb	r3, [r3, #20]
 8012c62:	2b07      	cmp	r3, #7
 8012c64:	d15e      	bne.n	8012d24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d104      	bne.n	8012c78 <tcp_close_shutdown+0x48>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c76:	d055      	beq.n	8012d24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	8b5b      	ldrh	r3, [r3, #26]
 8012c7c:	f003 0310 	and.w	r3, r3, #16
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d106      	bne.n	8012c92 <tcp_close_shutdown+0x62>
 8012c84:	4b52      	ldr	r3, [pc, #328]	; (8012dd0 <tcp_close_shutdown+0x1a0>)
 8012c86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012c8a:	4954      	ldr	r1, [pc, #336]	; (8012ddc <tcp_close_shutdown+0x1ac>)
 8012c8c:	4852      	ldr	r0, [pc, #328]	; (8012dd8 <tcp_close_shutdown+0x1a8>)
 8012c8e:	f008 fe01 	bl	801b894 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012c9a:	687d      	ldr	r5, [r7, #4]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	8ad2      	ldrh	r2, [r2, #22]
 8012ca4:	6879      	ldr	r1, [r7, #4]
 8012ca6:	8b09      	ldrh	r1, [r1, #24]
 8012ca8:	9102      	str	r1, [sp, #8]
 8012caa:	9201      	str	r2, [sp, #4]
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	462b      	mov	r3, r5
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	4601      	mov	r1, r0
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f004 fe91 	bl	80179dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f001 f8c6 	bl	8013e4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012cc0:	4b47      	ldr	r3, [pc, #284]	; (8012de0 <tcp_close_shutdown+0x1b0>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d105      	bne.n	8012cd6 <tcp_close_shutdown+0xa6>
 8012cca:	4b45      	ldr	r3, [pc, #276]	; (8012de0 <tcp_close_shutdown+0x1b0>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	4a43      	ldr	r2, [pc, #268]	; (8012de0 <tcp_close_shutdown+0x1b0>)
 8012cd2:	6013      	str	r3, [r2, #0]
 8012cd4:	e013      	b.n	8012cfe <tcp_close_shutdown+0xce>
 8012cd6:	4b42      	ldr	r3, [pc, #264]	; (8012de0 <tcp_close_shutdown+0x1b0>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	60fb      	str	r3, [r7, #12]
 8012cdc:	e00c      	b.n	8012cf8 <tcp_close_shutdown+0xc8>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d104      	bne.n	8012cf2 <tcp_close_shutdown+0xc2>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	68da      	ldr	r2, [r3, #12]
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	60da      	str	r2, [r3, #12]
 8012cf0:	e005      	b.n	8012cfe <tcp_close_shutdown+0xce>
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	60fb      	str	r3, [r7, #12]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1ef      	bne.n	8012cde <tcp_close_shutdown+0xae>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2200      	movs	r2, #0
 8012d02:	60da      	str	r2, [r3, #12]
 8012d04:	4b37      	ldr	r3, [pc, #220]	; (8012de4 <tcp_close_shutdown+0x1b4>)
 8012d06:	2201      	movs	r2, #1
 8012d08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012d0a:	4b37      	ldr	r3, [pc, #220]	; (8012de8 <tcp_close_shutdown+0x1b8>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d102      	bne.n	8012d1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012d14:	f003 fd5e 	bl	80167d4 <tcp_trigger_input_pcb_close>
 8012d18:	e002      	b.n	8012d20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7ff fed6 	bl	8012acc <tcp_free>
      }
      return ERR_OK;
 8012d20:	2300      	movs	r3, #0
 8012d22:	e050      	b.n	8012dc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	7d1b      	ldrb	r3, [r3, #20]
 8012d28:	2b02      	cmp	r3, #2
 8012d2a:	d03b      	beq.n	8012da4 <tcp_close_shutdown+0x174>
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	dc44      	bgt.n	8012dba <tcp_close_shutdown+0x18a>
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <tcp_close_shutdown+0x10a>
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d02a      	beq.n	8012d8e <tcp_close_shutdown+0x15e>
 8012d38:	e03f      	b.n	8012dba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	8adb      	ldrh	r3, [r3, #22]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d021      	beq.n	8012d86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d42:	4b2a      	ldr	r3, [pc, #168]	; (8012dec <tcp_close_shutdown+0x1bc>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d105      	bne.n	8012d58 <tcp_close_shutdown+0x128>
 8012d4c:	4b27      	ldr	r3, [pc, #156]	; (8012dec <tcp_close_shutdown+0x1bc>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	4a26      	ldr	r2, [pc, #152]	; (8012dec <tcp_close_shutdown+0x1bc>)
 8012d54:	6013      	str	r3, [r2, #0]
 8012d56:	e013      	b.n	8012d80 <tcp_close_shutdown+0x150>
 8012d58:	4b24      	ldr	r3, [pc, #144]	; (8012dec <tcp_close_shutdown+0x1bc>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	60bb      	str	r3, [r7, #8]
 8012d5e:	e00c      	b.n	8012d7a <tcp_close_shutdown+0x14a>
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d104      	bne.n	8012d74 <tcp_close_shutdown+0x144>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	68da      	ldr	r2, [r3, #12]
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	60da      	str	r2, [r3, #12]
 8012d72:	e005      	b.n	8012d80 <tcp_close_shutdown+0x150>
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	60bb      	str	r3, [r7, #8]
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d1ef      	bne.n	8012d60 <tcp_close_shutdown+0x130>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fea0 	bl	8012acc <tcp_free>
      break;
 8012d8c:	e01a      	b.n	8012dc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff ff14 	bl	8012bbc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012d94:	6879      	ldr	r1, [r7, #4]
 8012d96:	4816      	ldr	r0, [pc, #88]	; (8012df0 <tcp_close_shutdown+0x1c0>)
 8012d98:	f001 f8a8 	bl	8013eec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7ff feb1 	bl	8012b04 <tcp_free_listen>
      break;
 8012da2:	e00f      	b.n	8012dc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012da4:	6879      	ldr	r1, [r7, #4]
 8012da6:	480e      	ldr	r0, [pc, #56]	; (8012de0 <tcp_close_shutdown+0x1b0>)
 8012da8:	f001 f8a0 	bl	8013eec <tcp_pcb_remove>
 8012dac:	4b0d      	ldr	r3, [pc, #52]	; (8012de4 <tcp_close_shutdown+0x1b4>)
 8012dae:	2201      	movs	r2, #1
 8012db0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7ff fe8a 	bl	8012acc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012db8:	e004      	b.n	8012dc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 f81a 	bl	8012df4 <tcp_close_shutdown_fin>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	e000      	b.n	8012dc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	0801d228 	.word	0x0801d228
 8012dd4:	0801d2fc 	.word	0x0801d2fc
 8012dd8:	0801d26c 	.word	0x0801d26c
 8012ddc:	0801d31c 	.word	0x0801d31c
 8012de0:	20008624 	.word	0x20008624
 8012de4:	2000862c 	.word	0x2000862c
 8012de8:	20008664 	.word	0x20008664
 8012dec:	2000861c 	.word	0x2000861c
 8012df0:	20008620 	.word	0x20008620

08012df4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d106      	bne.n	8012e10 <tcp_close_shutdown_fin+0x1c>
 8012e02:	4b2e      	ldr	r3, [pc, #184]	; (8012ebc <tcp_close_shutdown_fin+0xc8>)
 8012e04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012e08:	492d      	ldr	r1, [pc, #180]	; (8012ec0 <tcp_close_shutdown_fin+0xcc>)
 8012e0a:	482e      	ldr	r0, [pc, #184]	; (8012ec4 <tcp_close_shutdown_fin+0xd0>)
 8012e0c:	f008 fd42 	bl	801b894 <iprintf>

  switch (pcb->state) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	2b07      	cmp	r3, #7
 8012e16:	d020      	beq.n	8012e5a <tcp_close_shutdown_fin+0x66>
 8012e18:	2b07      	cmp	r3, #7
 8012e1a:	dc2b      	bgt.n	8012e74 <tcp_close_shutdown_fin+0x80>
 8012e1c:	2b03      	cmp	r3, #3
 8012e1e:	d002      	beq.n	8012e26 <tcp_close_shutdown_fin+0x32>
 8012e20:	2b04      	cmp	r3, #4
 8012e22:	d00d      	beq.n	8012e40 <tcp_close_shutdown_fin+0x4c>
 8012e24:	e026      	b.n	8012e74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f003 fee6 	bl	8016bf8 <tcp_send_fin>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d11f      	bne.n	8012e78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2205      	movs	r2, #5
 8012e3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e3e:	e01b      	b.n	8012e78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f003 fed9 	bl	8016bf8 <tcp_send_fin>
 8012e46:	4603      	mov	r3, r0
 8012e48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d114      	bne.n	8012e7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2205      	movs	r2, #5
 8012e56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e58:	e010      	b.n	8012e7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f003 fecc 	bl	8016bf8 <tcp_send_fin>
 8012e60:	4603      	mov	r3, r0
 8012e62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d109      	bne.n	8012e80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2209      	movs	r2, #9
 8012e70:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e72:	e005      	b.n	8012e80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012e74:	2300      	movs	r3, #0
 8012e76:	e01c      	b.n	8012eb2 <tcp_close_shutdown_fin+0xbe>
      break;
 8012e78:	bf00      	nop
 8012e7a:	e002      	b.n	8012e82 <tcp_close_shutdown_fin+0x8e>
      break;
 8012e7c:	bf00      	nop
 8012e7e:	e000      	b.n	8012e82 <tcp_close_shutdown_fin+0x8e>
      break;
 8012e80:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d103      	bne.n	8012e92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f003 fff2 	bl	8016e74 <tcp_output>
 8012e90:	e00d      	b.n	8012eae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e9a:	d108      	bne.n	8012eae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	8b5b      	ldrh	r3, [r3, #26]
 8012ea0:	f043 0308 	orr.w	r3, r3, #8
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	e001      	b.n	8012eb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	0801d228 	.word	0x0801d228
 8012ec0:	0801d2d8 	.word	0x0801d2d8
 8012ec4:	0801d26c 	.word	0x0801d26c

08012ec8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d109      	bne.n	8012eea <tcp_close+0x22>
 8012ed6:	4b0f      	ldr	r3, [pc, #60]	; (8012f14 <tcp_close+0x4c>)
 8012ed8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012edc:	490e      	ldr	r1, [pc, #56]	; (8012f18 <tcp_close+0x50>)
 8012ede:	480f      	ldr	r0, [pc, #60]	; (8012f1c <tcp_close+0x54>)
 8012ee0:	f008 fcd8 	bl	801b894 <iprintf>
 8012ee4:	f06f 030f 	mvn.w	r3, #15
 8012ee8:	e00f      	b.n	8012f0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	7d1b      	ldrb	r3, [r3, #20]
 8012eee:	2b01      	cmp	r3, #1
 8012ef0:	d006      	beq.n	8012f00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	8b5b      	ldrh	r3, [r3, #26]
 8012ef6:	f043 0310 	orr.w	r3, r3, #16
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012f00:	2101      	movs	r1, #1
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7ff fe94 	bl	8012c30 <tcp_close_shutdown>
 8012f08:	4603      	mov	r3, r0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3708      	adds	r7, #8
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	0801d228 	.word	0x0801d228
 8012f18:	0801d338 	.word	0x0801d338
 8012f1c:	0801d26c 	.word	0x0801d26c

08012f20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b08e      	sub	sp, #56	; 0x38
 8012f24:	af04      	add	r7, sp, #16
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d107      	bne.n	8012f40 <tcp_abandon+0x20>
 8012f30:	4b52      	ldr	r3, [pc, #328]	; (801307c <tcp_abandon+0x15c>)
 8012f32:	f240 223d 	movw	r2, #573	; 0x23d
 8012f36:	4952      	ldr	r1, [pc, #328]	; (8013080 <tcp_abandon+0x160>)
 8012f38:	4852      	ldr	r0, [pc, #328]	; (8013084 <tcp_abandon+0x164>)
 8012f3a:	f008 fcab 	bl	801b894 <iprintf>
 8012f3e:	e099      	b.n	8013074 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	7d1b      	ldrb	r3, [r3, #20]
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d106      	bne.n	8012f56 <tcp_abandon+0x36>
 8012f48:	4b4c      	ldr	r3, [pc, #304]	; (801307c <tcp_abandon+0x15c>)
 8012f4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012f4e:	494e      	ldr	r1, [pc, #312]	; (8013088 <tcp_abandon+0x168>)
 8012f50:	484c      	ldr	r0, [pc, #304]	; (8013084 <tcp_abandon+0x164>)
 8012f52:	f008 fc9f 	bl	801b894 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	7d1b      	ldrb	r3, [r3, #20]
 8012f5a:	2b0a      	cmp	r3, #10
 8012f5c:	d107      	bne.n	8012f6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012f5e:	6879      	ldr	r1, [r7, #4]
 8012f60:	484a      	ldr	r0, [pc, #296]	; (801308c <tcp_abandon+0x16c>)
 8012f62:	f000 ffc3 	bl	8013eec <tcp_pcb_remove>
    tcp_free(pcb);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff fdb0 	bl	8012acc <tcp_free>
 8012f6c:	e082      	b.n	8013074 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	7d1b      	ldrb	r3, [r3, #20]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d126      	bne.n	8012fe6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	8adb      	ldrh	r3, [r3, #22]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d02e      	beq.n	8012ffe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012fa0:	4b3b      	ldr	r3, [pc, #236]	; (8013090 <tcp_abandon+0x170>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d105      	bne.n	8012fb6 <tcp_abandon+0x96>
 8012faa:	4b39      	ldr	r3, [pc, #228]	; (8013090 <tcp_abandon+0x170>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	4a37      	ldr	r2, [pc, #220]	; (8013090 <tcp_abandon+0x170>)
 8012fb2:	6013      	str	r3, [r2, #0]
 8012fb4:	e013      	b.n	8012fde <tcp_abandon+0xbe>
 8012fb6:	4b36      	ldr	r3, [pc, #216]	; (8013090 <tcp_abandon+0x170>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	61fb      	str	r3, [r7, #28]
 8012fbc:	e00c      	b.n	8012fd8 <tcp_abandon+0xb8>
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	68db      	ldr	r3, [r3, #12]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d104      	bne.n	8012fd2 <tcp_abandon+0xb2>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68da      	ldr	r2, [r3, #12]
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	60da      	str	r2, [r3, #12]
 8012fd0:	e005      	b.n	8012fde <tcp_abandon+0xbe>
 8012fd2:	69fb      	ldr	r3, [r7, #28]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d1ef      	bne.n	8012fbe <tcp_abandon+0x9e>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	60da      	str	r2, [r3, #12]
 8012fe4:	e00b      	b.n	8012ffe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8adb      	ldrh	r3, [r3, #22]
 8012fee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012ff0:	6879      	ldr	r1, [r7, #4]
 8012ff2:	4828      	ldr	r0, [pc, #160]	; (8013094 <tcp_abandon+0x174>)
 8012ff4:	f000 ff7a 	bl	8013eec <tcp_pcb_remove>
 8012ff8:	4b27      	ldr	r3, [pc, #156]	; (8013098 <tcp_abandon+0x178>)
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013002:	2b00      	cmp	r3, #0
 8013004:	d004      	beq.n	8013010 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801300a:	4618      	mov	r0, r3
 801300c:	f000 fd1c 	bl	8013a48 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013014:	2b00      	cmp	r3, #0
 8013016:	d004      	beq.n	8013022 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801301c:	4618      	mov	r0, r3
 801301e:	f000 fd13 	bl	8013a48 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013026:	2b00      	cmp	r3, #0
 8013028:	d004      	beq.n	8013034 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801302e:	4618      	mov	r0, r3
 8013030:	f000 fd0a 	bl	8013a48 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00e      	beq.n	8013058 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801303a:	6879      	ldr	r1, [r7, #4]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	3304      	adds	r3, #4
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	8b12      	ldrh	r2, [r2, #24]
 8013044:	9202      	str	r2, [sp, #8]
 8013046:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013048:	9201      	str	r2, [sp, #4]
 801304a:	9300      	str	r3, [sp, #0]
 801304c:	460b      	mov	r3, r1
 801304e:	697a      	ldr	r2, [r7, #20]
 8013050:	69b9      	ldr	r1, [r7, #24]
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f004 fcc2 	bl	80179dc <tcp_rst>
    }
    last_state = pcb->state;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	7d1b      	ldrb	r3, [r3, #20]
 801305c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f7ff fd34 	bl	8012acc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d004      	beq.n	8013074 <tcp_abandon+0x154>
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	f06f 010c 	mvn.w	r1, #12
 8013070:	68f8      	ldr	r0, [r7, #12]
 8013072:	4798      	blx	r3
  }
}
 8013074:	3728      	adds	r7, #40	; 0x28
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	0801d228 	.word	0x0801d228
 8013080:	0801d36c 	.word	0x0801d36c
 8013084:	0801d26c 	.word	0x0801d26c
 8013088:	0801d388 	.word	0x0801d388
 801308c:	20008628 	.word	0x20008628
 8013090:	2000861c 	.word	0x2000861c
 8013094:	20008624 	.word	0x20008624
 8013098:	2000862c 	.word	0x2000862c

0801309c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80130a4:	2101      	movs	r1, #1
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f7ff ff3a 	bl	8012f20 <tcp_abandon>
}
 80130ac:	bf00      	nop
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d106      	bne.n	80130d0 <tcp_update_rcv_ann_wnd+0x1c>
 80130c2:	4b25      	ldr	r3, [pc, #148]	; (8013158 <tcp_update_rcv_ann_wnd+0xa4>)
 80130c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80130c8:	4924      	ldr	r1, [pc, #144]	; (801315c <tcp_update_rcv_ann_wnd+0xa8>)
 80130ca:	4825      	ldr	r0, [pc, #148]	; (8013160 <tcp_update_rcv_ann_wnd+0xac>)
 80130cc:	f008 fbe2 	bl	801b894 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80130d8:	4413      	add	r3, r2
 80130da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80130e4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80130e8:	bf28      	it	cs
 80130ea:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80130ee:	b292      	uxth	r2, r2
 80130f0:	4413      	add	r3, r2
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	db08      	blt.n	801310c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013106:	68fa      	ldr	r2, [r7, #12]
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	e020      	b.n	801314e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013114:	1ad3      	subs	r3, r2, r3
 8013116:	2b00      	cmp	r3, #0
 8013118:	dd03      	ble.n	8013122 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2200      	movs	r2, #0
 801311e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013120:	e014      	b.n	801314c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312a:	1ad3      	subs	r3, r2, r3
 801312c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013134:	d306      	bcc.n	8013144 <tcp_update_rcv_ann_wnd+0x90>
 8013136:	4b08      	ldr	r3, [pc, #32]	; (8013158 <tcp_update_rcv_ann_wnd+0xa4>)
 8013138:	f240 32b6 	movw	r2, #950	; 0x3b6
 801313c:	4909      	ldr	r1, [pc, #36]	; (8013164 <tcp_update_rcv_ann_wnd+0xb0>)
 801313e:	4808      	ldr	r0, [pc, #32]	; (8013160 <tcp_update_rcv_ann_wnd+0xac>)
 8013140:	f008 fba8 	bl	801b894 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	b29a      	uxth	r2, r3
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801314c:	2300      	movs	r3, #0
  }
}
 801314e:	4618      	mov	r0, r3
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	0801d228 	.word	0x0801d228
 801315c:	0801d484 	.word	0x0801d484
 8013160:	0801d26c 	.word	0x0801d26c
 8013164:	0801d4a8 	.word	0x0801d4a8

08013168 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d107      	bne.n	801318a <tcp_recved+0x22>
 801317a:	4b1f      	ldr	r3, [pc, #124]	; (80131f8 <tcp_recved+0x90>)
 801317c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013180:	491e      	ldr	r1, [pc, #120]	; (80131fc <tcp_recved+0x94>)
 8013182:	481f      	ldr	r0, [pc, #124]	; (8013200 <tcp_recved+0x98>)
 8013184:	f008 fb86 	bl	801b894 <iprintf>
 8013188:	e032      	b.n	80131f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	2b01      	cmp	r3, #1
 8013190:	d106      	bne.n	80131a0 <tcp_recved+0x38>
 8013192:	4b19      	ldr	r3, [pc, #100]	; (80131f8 <tcp_recved+0x90>)
 8013194:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013198:	491a      	ldr	r1, [pc, #104]	; (8013204 <tcp_recved+0x9c>)
 801319a:	4819      	ldr	r0, [pc, #100]	; (8013200 <tcp_recved+0x98>)
 801319c:	f008 fb7a 	bl	801b894 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80131a4:	887b      	ldrh	r3, [r7, #2]
 80131a6:	4413      	add	r3, r2
 80131a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80131aa:	89fb      	ldrh	r3, [r7, #14]
 80131ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131b0:	d804      	bhi.n	80131bc <tcp_recved+0x54>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131b6:	89fa      	ldrh	r2, [r7, #14]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d204      	bcs.n	80131c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80131c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80131c4:	e002      	b.n	80131cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	89fa      	ldrh	r2, [r7, #14]
 80131ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7ff ff71 	bl	80130b4 <tcp_update_rcv_ann_wnd>
 80131d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131da:	d309      	bcc.n	80131f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	8b5b      	ldrh	r3, [r3, #26]
 80131e0:	f043 0302 	orr.w	r3, r3, #2
 80131e4:	b29a      	uxth	r2, r3
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f003 fe42 	bl	8016e74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	0801d228 	.word	0x0801d228
 80131fc:	0801d4c4 	.word	0x0801d4c4
 8013200:	0801d26c 	.word	0x0801d26c
 8013204:	0801d4dc 	.word	0x0801d4dc

08013208 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013208:	b5b0      	push	{r4, r5, r7, lr}
 801320a:	b090      	sub	sp, #64	; 0x40
 801320c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801320e:	2300      	movs	r3, #0
 8013210:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013214:	4b94      	ldr	r3, [pc, #592]	; (8013468 <tcp_slowtmr+0x260>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	3301      	adds	r3, #1
 801321a:	4a93      	ldr	r2, [pc, #588]	; (8013468 <tcp_slowtmr+0x260>)
 801321c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801321e:	4b93      	ldr	r3, [pc, #588]	; (801346c <tcp_slowtmr+0x264>)
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	3301      	adds	r3, #1
 8013224:	b2da      	uxtb	r2, r3
 8013226:	4b91      	ldr	r3, [pc, #580]	; (801346c <tcp_slowtmr+0x264>)
 8013228:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801322a:	2300      	movs	r3, #0
 801322c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801322e:	4b90      	ldr	r3, [pc, #576]	; (8013470 <tcp_slowtmr+0x268>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013234:	e29f      	b.n	8013776 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013238:	7d1b      	ldrb	r3, [r3, #20]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d106      	bne.n	801324c <tcp_slowtmr+0x44>
 801323e:	4b8d      	ldr	r3, [pc, #564]	; (8013474 <tcp_slowtmr+0x26c>)
 8013240:	f240 42be 	movw	r2, #1214	; 0x4be
 8013244:	498c      	ldr	r1, [pc, #560]	; (8013478 <tcp_slowtmr+0x270>)
 8013246:	488d      	ldr	r0, [pc, #564]	; (801347c <tcp_slowtmr+0x274>)
 8013248:	f008 fb24 	bl	801b894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324e:	7d1b      	ldrb	r3, [r3, #20]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d106      	bne.n	8013262 <tcp_slowtmr+0x5a>
 8013254:	4b87      	ldr	r3, [pc, #540]	; (8013474 <tcp_slowtmr+0x26c>)
 8013256:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801325a:	4989      	ldr	r1, [pc, #548]	; (8013480 <tcp_slowtmr+0x278>)
 801325c:	4887      	ldr	r0, [pc, #540]	; (801347c <tcp_slowtmr+0x274>)
 801325e:	f008 fb19 	bl	801b894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	7d1b      	ldrb	r3, [r3, #20]
 8013266:	2b0a      	cmp	r3, #10
 8013268:	d106      	bne.n	8013278 <tcp_slowtmr+0x70>
 801326a:	4b82      	ldr	r3, [pc, #520]	; (8013474 <tcp_slowtmr+0x26c>)
 801326c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013270:	4984      	ldr	r1, [pc, #528]	; (8013484 <tcp_slowtmr+0x27c>)
 8013272:	4882      	ldr	r0, [pc, #520]	; (801347c <tcp_slowtmr+0x274>)
 8013274:	f008 fb0e 	bl	801b894 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	7f9a      	ldrb	r2, [r3, #30]
 801327c:	4b7b      	ldr	r3, [pc, #492]	; (801346c <tcp_slowtmr+0x264>)
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	429a      	cmp	r2, r3
 8013282:	d105      	bne.n	8013290 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013286:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801328e:	e272      	b.n	8013776 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013290:	4b76      	ldr	r3, [pc, #472]	; (801346c <tcp_slowtmr+0x264>)
 8013292:	781a      	ldrb	r2, [r3, #0]
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013298:	2300      	movs	r3, #0
 801329a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801329e:	2300      	movs	r3, #0
 80132a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d10a      	bne.n	80132c2 <tcp_slowtmr+0xba>
 80132ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132b2:	2b05      	cmp	r3, #5
 80132b4:	d905      	bls.n	80132c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80132b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132ba:	3301      	adds	r3, #1
 80132bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132c0:	e11e      	b.n	8013500 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80132c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132c8:	2b0b      	cmp	r3, #11
 80132ca:	d905      	bls.n	80132d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80132cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132d0:	3301      	adds	r3, #1
 80132d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132d6:	e113      	b.n	8013500 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80132d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d075      	beq.n	80133ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80132e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d006      	beq.n	80132f8 <tcp_slowtmr+0xf0>
 80132ea:	4b62      	ldr	r3, [pc, #392]	; (8013474 <tcp_slowtmr+0x26c>)
 80132ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80132f0:	4965      	ldr	r1, [pc, #404]	; (8013488 <tcp_slowtmr+0x280>)
 80132f2:	4862      	ldr	r0, [pc, #392]	; (801347c <tcp_slowtmr+0x274>)
 80132f4:	f008 face 	bl	801b894 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d106      	bne.n	801330e <tcp_slowtmr+0x106>
 8013300:	4b5c      	ldr	r3, [pc, #368]	; (8013474 <tcp_slowtmr+0x26c>)
 8013302:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013306:	4961      	ldr	r1, [pc, #388]	; (801348c <tcp_slowtmr+0x284>)
 8013308:	485c      	ldr	r0, [pc, #368]	; (801347c <tcp_slowtmr+0x274>)
 801330a:	f008 fac3 	bl	801b894 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013310:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013314:	2b0b      	cmp	r3, #11
 8013316:	d905      	bls.n	8013324 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801331c:	3301      	adds	r3, #1
 801331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013322:	e0ed      	b.n	8013500 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801332a:	3b01      	subs	r3, #1
 801332c:	4a58      	ldr	r2, [pc, #352]	; (8013490 <tcp_slowtmr+0x288>)
 801332e:	5cd3      	ldrb	r3, [r2, r3]
 8013330:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013334:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013338:	7c7a      	ldrb	r2, [r7, #17]
 801333a:	429a      	cmp	r2, r3
 801333c:	d907      	bls.n	801334e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013340:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013344:	3301      	adds	r3, #1
 8013346:	b2da      	uxtb	r2, r3
 8013348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801334a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013354:	7c7a      	ldrb	r2, [r7, #17]
 8013356:	429a      	cmp	r2, r3
 8013358:	f200 80d2 	bhi.w	8013500 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801335c:	2301      	movs	r3, #1
 801335e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013366:	2b00      	cmp	r3, #0
 8013368:	d108      	bne.n	801337c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801336a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801336c:	f004 fc28 	bl	8017bc0 <tcp_zero_window_probe>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d014      	beq.n	80133a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013376:	2300      	movs	r3, #0
 8013378:	623b      	str	r3, [r7, #32]
 801337a:	e011      	b.n	80133a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013382:	4619      	mov	r1, r3
 8013384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013386:	f003 faef 	bl	8016968 <tcp_split_unsent_seg>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d107      	bne.n	80133a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013392:	f003 fd6f 	bl	8016e74 <tcp_output>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d101      	bne.n	80133a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801339c:	2300      	movs	r3, #0
 801339e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80133a0:	6a3b      	ldr	r3, [r7, #32]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f000 80ac 	beq.w	8013500 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80133a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133aa:	2200      	movs	r2, #0
 80133ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80133b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80133b6:	2b06      	cmp	r3, #6
 80133b8:	f200 80a2 	bhi.w	8013500 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80133c2:	3301      	adds	r3, #1
 80133c4:	b2da      	uxtb	r2, r3
 80133c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80133cc:	e098      	b.n	8013500 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80133ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	db0f      	blt.n	80133f8 <tcp_slowtmr+0x1f0>
 80133d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d008      	beq.n	80133f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80133e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	3301      	adds	r3, #1
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	b21a      	sxth	r2, r3
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80133fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013400:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013404:	429a      	cmp	r2, r3
 8013406:	db7b      	blt.n	8013500 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801340a:	f004 f827 	bl	801745c <tcp_rexmit_rto_prepare>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d007      	beq.n	8013424 <tcp_slowtmr+0x21c>
 8013414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013418:	2b00      	cmp	r3, #0
 801341a:	d171      	bne.n	8013500 <tcp_slowtmr+0x2f8>
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013420:	2b00      	cmp	r3, #0
 8013422:	d06d      	beq.n	8013500 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013426:	7d1b      	ldrb	r3, [r3, #20]
 8013428:	2b02      	cmp	r3, #2
 801342a:	d03a      	beq.n	80134a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013432:	2b0c      	cmp	r3, #12
 8013434:	bf28      	it	cs
 8013436:	230c      	movcs	r3, #12
 8013438:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801343c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013440:	10db      	asrs	r3, r3, #3
 8013442:	b21b      	sxth	r3, r3
 8013444:	461a      	mov	r2, r3
 8013446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013448:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801344c:	4413      	add	r3, r2
 801344e:	7efa      	ldrb	r2, [r7, #27]
 8013450:	4910      	ldr	r1, [pc, #64]	; (8013494 <tcp_slowtmr+0x28c>)
 8013452:	5c8a      	ldrb	r2, [r1, r2]
 8013454:	4093      	lsls	r3, r2
 8013456:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801345e:	4293      	cmp	r3, r2
 8013460:	dc1a      	bgt.n	8013498 <tcp_slowtmr+0x290>
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	b21a      	sxth	r2, r3
 8013466:	e019      	b.n	801349c <tcp_slowtmr+0x294>
 8013468:	20008618 	.word	0x20008618
 801346c:	2000862e 	.word	0x2000862e
 8013470:	20008624 	.word	0x20008624
 8013474:	0801d228 	.word	0x0801d228
 8013478:	0801d56c 	.word	0x0801d56c
 801347c:	0801d26c 	.word	0x0801d26c
 8013480:	0801d598 	.word	0x0801d598
 8013484:	0801d5c4 	.word	0x0801d5c4
 8013488:	0801d5f4 	.word	0x0801d5f4
 801348c:	0801d628 	.word	0x0801d628
 8013490:	0801f314 	.word	0x0801f314
 8013494:	0801f304 	.word	0x0801f304
 8013498:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80134a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a4:	2200      	movs	r2, #0
 80134a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134b4:	4293      	cmp	r3, r2
 80134b6:	bf28      	it	cs
 80134b8:	4613      	movcs	r3, r2
 80134ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80134bc:	8a7b      	ldrh	r3, [r7, #18]
 80134be:	085b      	lsrs	r3, r3, #1
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80134c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80134ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d206      	bcs.n	80134e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80134da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80134e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80134ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80134f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f4:	2200      	movs	r2, #0
 80134f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80134fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134fc:	f004 f81e 	bl	801753c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	7d1b      	ldrb	r3, [r3, #20]
 8013504:	2b06      	cmp	r3, #6
 8013506:	d111      	bne.n	801352c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350a:	8b5b      	ldrh	r3, [r3, #26]
 801350c:	f003 0310 	and.w	r3, r3, #16
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00b      	beq.n	801352c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013514:	4b9d      	ldr	r3, [pc, #628]	; (801378c <tcp_slowtmr+0x584>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351a:	6a1b      	ldr	r3, [r3, #32]
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	2b28      	cmp	r3, #40	; 0x28
 8013520:	d904      	bls.n	801352c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013526:	3301      	adds	r3, #1
 8013528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801352e:	7a5b      	ldrb	r3, [r3, #9]
 8013530:	f003 0308 	and.w	r3, r3, #8
 8013534:	2b00      	cmp	r3, #0
 8013536:	d04c      	beq.n	80135d2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801353c:	2b04      	cmp	r3, #4
 801353e:	d003      	beq.n	8013548 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013542:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013544:	2b07      	cmp	r3, #7
 8013546:	d144      	bne.n	80135d2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013548:	4b90      	ldr	r3, [pc, #576]	; (801378c <tcp_slowtmr+0x584>)
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354e:	6a1b      	ldr	r3, [r3, #32]
 8013550:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013558:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801355c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013560:	498b      	ldr	r1, [pc, #556]	; (8013790 <tcp_slowtmr+0x588>)
 8013562:	fba1 1303 	umull	r1, r3, r1, r3
 8013566:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013568:	429a      	cmp	r2, r3
 801356a:	d90a      	bls.n	8013582 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801356c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013570:	3301      	adds	r3, #1
 8013572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013576:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801357a:	3301      	adds	r3, #1
 801357c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013580:	e027      	b.n	80135d2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013582:	4b82      	ldr	r3, [pc, #520]	; (801378c <tcp_slowtmr+0x584>)
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013588:	6a1b      	ldr	r3, [r3, #32]
 801358a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013594:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013598:	4618      	mov	r0, r3
 801359a:	4b7e      	ldr	r3, [pc, #504]	; (8013794 <tcp_slowtmr+0x58c>)
 801359c:	fb00 f303 	mul.w	r3, r0, r3
 80135a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80135a2:	497b      	ldr	r1, [pc, #492]	; (8013790 <tcp_slowtmr+0x588>)
 80135a4:	fba1 1303 	umull	r1, r3, r1, r3
 80135a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d911      	bls.n	80135d2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80135ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135b0:	f004 fac6 	bl	8017b40 <tcp_keepalive>
 80135b4:	4603      	mov	r3, r0
 80135b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80135ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d107      	bne.n	80135d2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80135c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80135c8:	3301      	adds	r3, #1
 80135ca:	b2da      	uxtb	r2, r3
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80135d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d011      	beq.n	80135fe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80135da:	4b6c      	ldr	r3, [pc, #432]	; (801378c <tcp_slowtmr+0x584>)
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	6a1b      	ldr	r3, [r3, #32]
 80135e2:	1ad2      	subs	r2, r2, r3
 80135e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80135ea:	4619      	mov	r1, r3
 80135ec:	460b      	mov	r3, r1
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	440b      	add	r3, r1
 80135f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d302      	bcc.n	80135fe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80135f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135fa:	f000 fddb 	bl	80141b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80135fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013600:	7d1b      	ldrb	r3, [r3, #20]
 8013602:	2b03      	cmp	r3, #3
 8013604:	d10b      	bne.n	801361e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013606:	4b61      	ldr	r3, [pc, #388]	; (801378c <tcp_slowtmr+0x584>)
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	6a1b      	ldr	r3, [r3, #32]
 801360e:	1ad3      	subs	r3, r2, r3
 8013610:	2b28      	cmp	r3, #40	; 0x28
 8013612:	d904      	bls.n	801361e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013618:	3301      	adds	r3, #1
 801361a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013620:	7d1b      	ldrb	r3, [r3, #20]
 8013622:	2b09      	cmp	r3, #9
 8013624:	d10b      	bne.n	801363e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013626:	4b59      	ldr	r3, [pc, #356]	; (801378c <tcp_slowtmr+0x584>)
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	6a1b      	ldr	r3, [r3, #32]
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	2bf0      	cmp	r3, #240	; 0xf0
 8013632:	d904      	bls.n	801363e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013638:	3301      	adds	r3, #1
 801363a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801363e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013642:	2b00      	cmp	r3, #0
 8013644:	d060      	beq.n	8013708 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801364c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801364e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013650:	f000 fbfc 	bl	8013e4c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013656:	2b00      	cmp	r3, #0
 8013658:	d010      	beq.n	801367c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801365a:	4b4f      	ldr	r3, [pc, #316]	; (8013798 <tcp_slowtmr+0x590>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013660:	429a      	cmp	r2, r3
 8013662:	d106      	bne.n	8013672 <tcp_slowtmr+0x46a>
 8013664:	4b4d      	ldr	r3, [pc, #308]	; (801379c <tcp_slowtmr+0x594>)
 8013666:	f240 526d 	movw	r2, #1389	; 0x56d
 801366a:	494d      	ldr	r1, [pc, #308]	; (80137a0 <tcp_slowtmr+0x598>)
 801366c:	484d      	ldr	r0, [pc, #308]	; (80137a4 <tcp_slowtmr+0x59c>)
 801366e:	f008 f911 	bl	801b894 <iprintf>
        prev->next = pcb->next;
 8013672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013674:	68da      	ldr	r2, [r3, #12]
 8013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013678:	60da      	str	r2, [r3, #12]
 801367a:	e00f      	b.n	801369c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801367c:	4b46      	ldr	r3, [pc, #280]	; (8013798 <tcp_slowtmr+0x590>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013682:	429a      	cmp	r2, r3
 8013684:	d006      	beq.n	8013694 <tcp_slowtmr+0x48c>
 8013686:	4b45      	ldr	r3, [pc, #276]	; (801379c <tcp_slowtmr+0x594>)
 8013688:	f240 5271 	movw	r2, #1393	; 0x571
 801368c:	4946      	ldr	r1, [pc, #280]	; (80137a8 <tcp_slowtmr+0x5a0>)
 801368e:	4845      	ldr	r0, [pc, #276]	; (80137a4 <tcp_slowtmr+0x59c>)
 8013690:	f008 f900 	bl	801b894 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	4a3f      	ldr	r2, [pc, #252]	; (8013798 <tcp_slowtmr+0x590>)
 801369a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801369c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d013      	beq.n	80136cc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80136a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80136a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80136ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80136ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b0:	3304      	adds	r3, #4
 80136b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136b4:	8ad2      	ldrh	r2, [r2, #22]
 80136b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136b8:	8b09      	ldrh	r1, [r1, #24]
 80136ba:	9102      	str	r1, [sp, #8]
 80136bc:	9201      	str	r2, [sp, #4]
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	462b      	mov	r3, r5
 80136c2:	4622      	mov	r2, r4
 80136c4:	4601      	mov	r1, r0
 80136c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136c8:	f004 f988 	bl	80179dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	691b      	ldr	r3, [r3, #16]
 80136d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80136d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d4:	7d1b      	ldrb	r3, [r3, #20]
 80136d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80136d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80136dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80136e2:	6838      	ldr	r0, [r7, #0]
 80136e4:	f7ff f9f2 	bl	8012acc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80136e8:	4b30      	ldr	r3, [pc, #192]	; (80137ac <tcp_slowtmr+0x5a4>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d004      	beq.n	80136fe <tcp_slowtmr+0x4f6>
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f06f 010c 	mvn.w	r1, #12
 80136fa:	68b8      	ldr	r0, [r7, #8]
 80136fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80136fe:	4b2b      	ldr	r3, [pc, #172]	; (80137ac <tcp_slowtmr+0x5a4>)
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d037      	beq.n	8013776 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013706:	e590      	b.n	801322a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013714:	7f1b      	ldrb	r3, [r3, #28]
 8013716:	3301      	adds	r3, #1
 8013718:	b2da      	uxtb	r2, r3
 801371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	7f1a      	ldrb	r2, [r3, #28]
 8013722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013724:	7f5b      	ldrb	r3, [r3, #29]
 8013726:	429a      	cmp	r2, r3
 8013728:	d325      	bcc.n	8013776 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	2200      	movs	r2, #0
 801372e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013730:	4b1e      	ldr	r3, [pc, #120]	; (80137ac <tcp_slowtmr+0x5a4>)
 8013732:	2200      	movs	r2, #0
 8013734:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00b      	beq.n	8013758 <tcp_slowtmr+0x550>
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013748:	6912      	ldr	r2, [r2, #16]
 801374a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801374c:	4610      	mov	r0, r2
 801374e:	4798      	blx	r3
 8013750:	4603      	mov	r3, r0
 8013752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013756:	e002      	b.n	801375e <tcp_slowtmr+0x556>
 8013758:	2300      	movs	r3, #0
 801375a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801375e:	4b13      	ldr	r3, [pc, #76]	; (80137ac <tcp_slowtmr+0x5a4>)
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d000      	beq.n	8013768 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8013766:	e560      	b.n	801322a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013768:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801376c:	2b00      	cmp	r3, #0
 801376e:	d102      	bne.n	8013776 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013772:	f003 fb7f 	bl	8016e74 <tcp_output>
  while (pcb != NULL) {
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	2b00      	cmp	r3, #0
 801377a:	f47f ad5c 	bne.w	8013236 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801377e:	2300      	movs	r3, #0
 8013780:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013782:	4b0b      	ldr	r3, [pc, #44]	; (80137b0 <tcp_slowtmr+0x5a8>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013788:	e067      	b.n	801385a <tcp_slowtmr+0x652>
 801378a:	bf00      	nop
 801378c:	20008618 	.word	0x20008618
 8013790:	10624dd3 	.word	0x10624dd3
 8013794:	000124f8 	.word	0x000124f8
 8013798:	20008624 	.word	0x20008624
 801379c:	0801d228 	.word	0x0801d228
 80137a0:	0801d660 	.word	0x0801d660
 80137a4:	0801d26c 	.word	0x0801d26c
 80137a8:	0801d68c 	.word	0x0801d68c
 80137ac:	2000862c 	.word	0x2000862c
 80137b0:	20008628 	.word	0x20008628
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80137b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b6:	7d1b      	ldrb	r3, [r3, #20]
 80137b8:	2b0a      	cmp	r3, #10
 80137ba:	d006      	beq.n	80137ca <tcp_slowtmr+0x5c2>
 80137bc:	4b2b      	ldr	r3, [pc, #172]	; (801386c <tcp_slowtmr+0x664>)
 80137be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80137c2:	492b      	ldr	r1, [pc, #172]	; (8013870 <tcp_slowtmr+0x668>)
 80137c4:	482b      	ldr	r0, [pc, #172]	; (8013874 <tcp_slowtmr+0x66c>)
 80137c6:	f008 f865 	bl	801b894 <iprintf>
    pcb_remove = 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80137d0:	4b29      	ldr	r3, [pc, #164]	; (8013878 <tcp_slowtmr+0x670>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d6:	6a1b      	ldr	r3, [r3, #32]
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	2bf0      	cmp	r3, #240	; 0xf0
 80137dc:	d904      	bls.n	80137e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80137de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137e2:	3301      	adds	r3, #1
 80137e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80137e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d02f      	beq.n	8013850 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80137f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137f2:	f000 fb2b 	bl	8013e4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80137f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d010      	beq.n	801381e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80137fc:	4b1f      	ldr	r3, [pc, #124]	; (801387c <tcp_slowtmr+0x674>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013802:	429a      	cmp	r2, r3
 8013804:	d106      	bne.n	8013814 <tcp_slowtmr+0x60c>
 8013806:	4b19      	ldr	r3, [pc, #100]	; (801386c <tcp_slowtmr+0x664>)
 8013808:	f240 52af 	movw	r2, #1455	; 0x5af
 801380c:	491c      	ldr	r1, [pc, #112]	; (8013880 <tcp_slowtmr+0x678>)
 801380e:	4819      	ldr	r0, [pc, #100]	; (8013874 <tcp_slowtmr+0x66c>)
 8013810:	f008 f840 	bl	801b894 <iprintf>
        prev->next = pcb->next;
 8013814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013816:	68da      	ldr	r2, [r3, #12]
 8013818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381a:	60da      	str	r2, [r3, #12]
 801381c:	e00f      	b.n	801383e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801381e:	4b17      	ldr	r3, [pc, #92]	; (801387c <tcp_slowtmr+0x674>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013824:	429a      	cmp	r2, r3
 8013826:	d006      	beq.n	8013836 <tcp_slowtmr+0x62e>
 8013828:	4b10      	ldr	r3, [pc, #64]	; (801386c <tcp_slowtmr+0x664>)
 801382a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801382e:	4915      	ldr	r1, [pc, #84]	; (8013884 <tcp_slowtmr+0x67c>)
 8013830:	4810      	ldr	r0, [pc, #64]	; (8013874 <tcp_slowtmr+0x66c>)
 8013832:	f008 f82f 	bl	801b894 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013838:	68db      	ldr	r3, [r3, #12]
 801383a:	4a10      	ldr	r2, [pc, #64]	; (801387c <tcp_slowtmr+0x674>)
 801383c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013840:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013848:	69f8      	ldr	r0, [r7, #28]
 801384a:	f7ff f93f 	bl	8012acc <tcp_free>
 801384e:	e004      	b.n	801385a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013852:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	2b00      	cmp	r3, #0
 801385e:	d1a9      	bne.n	80137b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013860:	bf00      	nop
 8013862:	bf00      	nop
 8013864:	3730      	adds	r7, #48	; 0x30
 8013866:	46bd      	mov	sp, r7
 8013868:	bdb0      	pop	{r4, r5, r7, pc}
 801386a:	bf00      	nop
 801386c:	0801d228 	.word	0x0801d228
 8013870:	0801d6b8 	.word	0x0801d6b8
 8013874:	0801d26c 	.word	0x0801d26c
 8013878:	20008618 	.word	0x20008618
 801387c:	20008628 	.word	0x20008628
 8013880:	0801d6e8 	.word	0x0801d6e8
 8013884:	0801d710 	.word	0x0801d710

08013888 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801388e:	4b2d      	ldr	r3, [pc, #180]	; (8013944 <tcp_fasttmr+0xbc>)
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	3301      	adds	r3, #1
 8013894:	b2da      	uxtb	r2, r3
 8013896:	4b2b      	ldr	r3, [pc, #172]	; (8013944 <tcp_fasttmr+0xbc>)
 8013898:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801389a:	4b2b      	ldr	r3, [pc, #172]	; (8013948 <tcp_fasttmr+0xc0>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80138a0:	e048      	b.n	8013934 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	7f9a      	ldrb	r2, [r3, #30]
 80138a6:	4b27      	ldr	r3, [pc, #156]	; (8013944 <tcp_fasttmr+0xbc>)
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d03f      	beq.n	801392e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80138ae:	4b25      	ldr	r3, [pc, #148]	; (8013944 <tcp_fasttmr+0xbc>)
 80138b0:	781a      	ldrb	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	8b5b      	ldrh	r3, [r3, #26]
 80138ba:	f003 0301 	and.w	r3, r3, #1
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d010      	beq.n	80138e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	8b5b      	ldrh	r3, [r3, #26]
 80138c6:	f043 0302 	orr.w	r3, r3, #2
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f003 facf 	bl	8016e74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	8b5b      	ldrh	r3, [r3, #26]
 80138da:	f023 0303 	bic.w	r3, r3, #3
 80138de:	b29a      	uxth	r2, r3
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	8b5b      	ldrh	r3, [r3, #26]
 80138e8:	f003 0308 	and.w	r3, r3, #8
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d009      	beq.n	8013904 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	8b5b      	ldrh	r3, [r3, #26]
 80138f4:	f023 0308 	bic.w	r3, r3, #8
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff fa78 	bl	8012df4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00a      	beq.n	8013928 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013912:	4b0e      	ldr	r3, [pc, #56]	; (801394c <tcp_fasttmr+0xc4>)
 8013914:	2200      	movs	r2, #0
 8013916:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 f819 	bl	8013950 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801391e:	4b0b      	ldr	r3, [pc, #44]	; (801394c <tcp_fasttmr+0xc4>)
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d000      	beq.n	8013928 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013926:	e7b8      	b.n	801389a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	607b      	str	r3, [r7, #4]
 801392c:	e002      	b.n	8013934 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1b3      	bne.n	80138a2 <tcp_fasttmr+0x1a>
    }
  }
}
 801393a:	bf00      	nop
 801393c:	bf00      	nop
 801393e:	3708      	adds	r7, #8
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}
 8013944:	2000862e 	.word	0x2000862e
 8013948:	20008624 	.word	0x20008624
 801394c:	2000862c 	.word	0x2000862c

08013950 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b085      	sub	sp, #20
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d109      	bne.n	8013972 <tcp_process_refused_data+0x22>
 801395e:	4b37      	ldr	r3, [pc, #220]	; (8013a3c <tcp_process_refused_data+0xec>)
 8013960:	f240 6209 	movw	r2, #1545	; 0x609
 8013964:	4936      	ldr	r1, [pc, #216]	; (8013a40 <tcp_process_refused_data+0xf0>)
 8013966:	4837      	ldr	r0, [pc, #220]	; (8013a44 <tcp_process_refused_data+0xf4>)
 8013968:	f007 ff94 	bl	801b894 <iprintf>
 801396c:	f06f 030f 	mvn.w	r3, #15
 8013970:	e060      	b.n	8013a34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013976:	7b5b      	ldrb	r3, [r3, #13]
 8013978:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801397e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2200      	movs	r2, #0
 8013984:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00b      	beq.n	80139a8 <tcp_process_refused_data+0x58>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6918      	ldr	r0, [r3, #16]
 801399a:	2300      	movs	r3, #0
 801399c:	68ba      	ldr	r2, [r7, #8]
 801399e:	6879      	ldr	r1, [r7, #4]
 80139a0:	47a0      	blx	r4
 80139a2:	4603      	mov	r3, r0
 80139a4:	73fb      	strb	r3, [r7, #15]
 80139a6:	e007      	b.n	80139b8 <tcp_process_refused_data+0x68>
 80139a8:	2300      	movs	r3, #0
 80139aa:	68ba      	ldr	r2, [r7, #8]
 80139ac:	6879      	ldr	r1, [r7, #4]
 80139ae:	2000      	movs	r0, #0
 80139b0:	f000 f8a4 	bl	8013afc <tcp_recv_null>
 80139b4:	4603      	mov	r3, r0
 80139b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80139b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d12a      	bne.n	8013a16 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80139c0:	7bbb      	ldrb	r3, [r7, #14]
 80139c2:	f003 0320 	and.w	r3, r3, #32
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d033      	beq.n	8013a32 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139d2:	d005      	beq.n	80139e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139d8:	3301      	adds	r3, #1
 80139da:	b29a      	uxth	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d00b      	beq.n	8013a02 <tcp_process_refused_data+0xb2>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6918      	ldr	r0, [r3, #16]
 80139f4:	2300      	movs	r3, #0
 80139f6:	2200      	movs	r2, #0
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	47a0      	blx	r4
 80139fc:	4603      	mov	r3, r0
 80139fe:	73fb      	strb	r3, [r7, #15]
 8013a00:	e001      	b.n	8013a06 <tcp_process_refused_data+0xb6>
 8013a02:	2300      	movs	r3, #0
 8013a04:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a0a:	f113 0f0d 	cmn.w	r3, #13
 8013a0e:	d110      	bne.n	8013a32 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013a10:	f06f 030c 	mvn.w	r3, #12
 8013a14:	e00e      	b.n	8013a34 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a1a:	f113 0f0d 	cmn.w	r3, #13
 8013a1e:	d102      	bne.n	8013a26 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013a20:	f06f 030c 	mvn.w	r3, #12
 8013a24:	e006      	b.n	8013a34 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013a2c:	f06f 0304 	mvn.w	r3, #4
 8013a30:	e000      	b.n	8013a34 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3714      	adds	r7, #20
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd90      	pop	{r4, r7, pc}
 8013a3c:	0801d228 	.word	0x0801d228
 8013a40:	0801d738 	.word	0x0801d738
 8013a44:	0801d26c 	.word	0x0801d26c

08013a48 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013a50:	e007      	b.n	8013a62 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f000 f80a 	bl	8013a72 <tcp_seg_free>
    seg = next;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d1f4      	bne.n	8013a52 <tcp_segs_free+0xa>
  }
}
 8013a68:	bf00      	nop
 8013a6a:	bf00      	nop
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b082      	sub	sp, #8
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d00c      	beq.n	8013a9a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d004      	beq.n	8013a92 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fe fd7d 	bl	801258c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013a92:	6879      	ldr	r1, [r7, #4]
 8013a94:	2003      	movs	r0, #3
 8013a96:	f7fd ff03 	bl	80118a0 <memp_free>
  }
}
 8013a9a:	bf00      	nop
 8013a9c:	3708      	adds	r7, #8
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
	...

08013aa4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <tcp_seg_copy+0x1c>
 8013ab2:	4b0f      	ldr	r3, [pc, #60]	; (8013af0 <tcp_seg_copy+0x4c>)
 8013ab4:	f240 6282 	movw	r2, #1666	; 0x682
 8013ab8:	490e      	ldr	r1, [pc, #56]	; (8013af4 <tcp_seg_copy+0x50>)
 8013aba:	480f      	ldr	r0, [pc, #60]	; (8013af8 <tcp_seg_copy+0x54>)
 8013abc:	f007 feea 	bl	801b894 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013ac0:	2003      	movs	r0, #3
 8013ac2:	f7fd fe7d 	bl	80117c0 <memp_malloc>
 8013ac6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <tcp_seg_copy+0x2e>
    return NULL;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e00a      	b.n	8013ae8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013ad2:	2210      	movs	r2, #16
 8013ad4:	6879      	ldr	r1, [r7, #4]
 8013ad6:	68f8      	ldr	r0, [r7, #12]
 8013ad8:	f007 ffb7 	bl	801ba4a <memcpy>
  pbuf_ref(cseg->p);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe fdf3 	bl	80126cc <pbuf_ref>
  return cseg;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	0801d228 	.word	0x0801d228
 8013af4:	0801d77c 	.word	0x0801d77c
 8013af8:	0801d26c 	.word	0x0801d26c

08013afc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d109      	bne.n	8013b24 <tcp_recv_null+0x28>
 8013b10:	4b12      	ldr	r3, [pc, #72]	; (8013b5c <tcp_recv_null+0x60>)
 8013b12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013b16:	4912      	ldr	r1, [pc, #72]	; (8013b60 <tcp_recv_null+0x64>)
 8013b18:	4812      	ldr	r0, [pc, #72]	; (8013b64 <tcp_recv_null+0x68>)
 8013b1a:	f007 febb 	bl	801b894 <iprintf>
 8013b1e:	f06f 030f 	mvn.w	r3, #15
 8013b22:	e016      	b.n	8013b52 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d009      	beq.n	8013b3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	891b      	ldrh	r3, [r3, #8]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	68b8      	ldr	r0, [r7, #8]
 8013b32:	f7ff fb19 	bl	8013168 <tcp_recved>
    pbuf_free(p);
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7fe fd28 	bl	801258c <pbuf_free>
 8013b3c:	e008      	b.n	8013b50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d104      	bne.n	8013b50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013b46:	68b8      	ldr	r0, [r7, #8]
 8013b48:	f7ff f9be 	bl	8012ec8 <tcp_close>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	e000      	b.n	8013b52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	0801d228 	.word	0x0801d228
 8013b60:	0801d798 	.word	0x0801d798
 8013b64:	0801d26c 	.word	0x0801d26c

08013b68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b086      	sub	sp, #24
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	4603      	mov	r3, r0
 8013b70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	db01      	blt.n	8013b7e <tcp_kill_prio+0x16>
 8013b7a:	79fb      	ldrb	r3, [r7, #7]
 8013b7c:	e000      	b.n	8013b80 <tcp_kill_prio+0x18>
 8013b7e:	237f      	movs	r3, #127	; 0x7f
 8013b80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013b82:	7afb      	ldrb	r3, [r7, #11]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d034      	beq.n	8013bf2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013b88:	7afb      	ldrb	r3, [r7, #11]
 8013b8a:	3b01      	subs	r3, #1
 8013b8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013b92:	2300      	movs	r3, #0
 8013b94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b96:	4b19      	ldr	r3, [pc, #100]	; (8013bfc <tcp_kill_prio+0x94>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	617b      	str	r3, [r7, #20]
 8013b9c:	e01f      	b.n	8013bde <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	7d5b      	ldrb	r3, [r3, #21]
 8013ba2:	7afa      	ldrb	r2, [r7, #11]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d80c      	bhi.n	8013bc2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013bac:	7afa      	ldrb	r2, [r7, #11]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d112      	bne.n	8013bd8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013bb2:	4b13      	ldr	r3, [pc, #76]	; (8013c00 <tcp_kill_prio+0x98>)
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	6a1b      	ldr	r3, [r3, #32]
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	68fa      	ldr	r2, [r7, #12]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d80a      	bhi.n	8013bd8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013bc2:	4b0f      	ldr	r3, [pc, #60]	; (8013c00 <tcp_kill_prio+0x98>)
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	6a1b      	ldr	r3, [r3, #32]
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	7d5b      	ldrb	r3, [r3, #21]
 8013bd6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	617b      	str	r3, [r7, #20]
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d1dc      	bne.n	8013b9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d004      	beq.n	8013bf4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013bea:	6938      	ldr	r0, [r7, #16]
 8013bec:	f7ff fa56 	bl	801309c <tcp_abort>
 8013bf0:	e000      	b.n	8013bf4 <tcp_kill_prio+0x8c>
    return;
 8013bf2:	bf00      	nop
  }
}
 8013bf4:	3718      	adds	r7, #24
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	20008624 	.word	0x20008624
 8013c00:	20008618 	.word	0x20008618

08013c04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013c0e:	79fb      	ldrb	r3, [r7, #7]
 8013c10:	2b08      	cmp	r3, #8
 8013c12:	d009      	beq.n	8013c28 <tcp_kill_state+0x24>
 8013c14:	79fb      	ldrb	r3, [r7, #7]
 8013c16:	2b09      	cmp	r3, #9
 8013c18:	d006      	beq.n	8013c28 <tcp_kill_state+0x24>
 8013c1a:	4b1a      	ldr	r3, [pc, #104]	; (8013c84 <tcp_kill_state+0x80>)
 8013c1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013c20:	4919      	ldr	r1, [pc, #100]	; (8013c88 <tcp_kill_state+0x84>)
 8013c22:	481a      	ldr	r0, [pc, #104]	; (8013c8c <tcp_kill_state+0x88>)
 8013c24:	f007 fe36 	bl	801b894 <iprintf>

  inactivity = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c30:	4b17      	ldr	r3, [pc, #92]	; (8013c90 <tcp_kill_state+0x8c>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	617b      	str	r3, [r7, #20]
 8013c36:	e017      	b.n	8013c68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	7d1b      	ldrb	r3, [r3, #20]
 8013c3c:	79fa      	ldrb	r2, [r7, #7]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d10f      	bne.n	8013c62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013c42:	4b14      	ldr	r3, [pc, #80]	; (8013c94 <tcp_kill_state+0x90>)
 8013c44:	681a      	ldr	r2, [r3, #0]
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	6a1b      	ldr	r3, [r3, #32]
 8013c4a:	1ad3      	subs	r3, r2, r3
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d807      	bhi.n	8013c62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013c52:	4b10      	ldr	r3, [pc, #64]	; (8013c94 <tcp_kill_state+0x90>)
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	6a1b      	ldr	r3, [r3, #32]
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	617b      	str	r3, [r7, #20]
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d1e4      	bne.n	8013c38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d003      	beq.n	8013c7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013c74:	2100      	movs	r1, #0
 8013c76:	6938      	ldr	r0, [r7, #16]
 8013c78:	f7ff f952 	bl	8012f20 <tcp_abandon>
  }
}
 8013c7c:	bf00      	nop
 8013c7e:	3718      	adds	r7, #24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	0801d228 	.word	0x0801d228
 8013c88:	0801d7b4 	.word	0x0801d7b4
 8013c8c:	0801d26c 	.word	0x0801d26c
 8013c90:	20008624 	.word	0x20008624
 8013c94:	20008618 	.word	0x20008618

08013c98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ca6:	4b12      	ldr	r3, [pc, #72]	; (8013cf0 <tcp_kill_timewait+0x58>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	60fb      	str	r3, [r7, #12]
 8013cac:	e012      	b.n	8013cd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013cae:	4b11      	ldr	r3, [pc, #68]	; (8013cf4 <tcp_kill_timewait+0x5c>)
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6a1b      	ldr	r3, [r3, #32]
 8013cb6:	1ad3      	subs	r3, r2, r3
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d807      	bhi.n	8013cce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013cbe:	4b0d      	ldr	r3, [pc, #52]	; (8013cf4 <tcp_kill_timewait+0x5c>)
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6a1b      	ldr	r3, [r3, #32]
 8013cc6:	1ad3      	subs	r3, r2, r3
 8013cc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	68db      	ldr	r3, [r3, #12]
 8013cd2:	60fb      	str	r3, [r7, #12]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d1e9      	bne.n	8013cae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d002      	beq.n	8013ce6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013ce0:	68b8      	ldr	r0, [r7, #8]
 8013ce2:	f7ff f9db 	bl	801309c <tcp_abort>
  }
}
 8013ce6:	bf00      	nop
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	20008628 	.word	0x20008628
 8013cf4:	20008618 	.word	0x20008618

08013cf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013cfe:	4b10      	ldr	r3, [pc, #64]	; (8013d40 <tcp_handle_closepend+0x48>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013d04:	e014      	b.n	8013d30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	8b5b      	ldrh	r3, [r3, #26]
 8013d10:	f003 0308 	and.w	r3, r3, #8
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d009      	beq.n	8013d2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	8b5b      	ldrh	r3, [r3, #26]
 8013d1c:	f023 0308 	bic.w	r3, r3, #8
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7ff f864 	bl	8012df4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d1e7      	bne.n	8013d06 <tcp_handle_closepend+0xe>
  }
}
 8013d36:	bf00      	nop
 8013d38:	bf00      	nop
 8013d3a:	3708      	adds	r7, #8
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	20008624 	.word	0x20008624

08013d44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d4e:	2001      	movs	r0, #1
 8013d50:	f7fd fd36 	bl	80117c0 <memp_malloc>
 8013d54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d126      	bne.n	8013daa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013d5c:	f7ff ffcc 	bl	8013cf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013d60:	f7ff ff9a 	bl	8013c98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d64:	2001      	movs	r0, #1
 8013d66:	f7fd fd2b 	bl	80117c0 <memp_malloc>
 8013d6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d11b      	bne.n	8013daa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013d72:	2009      	movs	r0, #9
 8013d74:	f7ff ff46 	bl	8013c04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d78:	2001      	movs	r0, #1
 8013d7a:	f7fd fd21 	bl	80117c0 <memp_malloc>
 8013d7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d111      	bne.n	8013daa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013d86:	2008      	movs	r0, #8
 8013d88:	f7ff ff3c 	bl	8013c04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013d8c:	2001      	movs	r0, #1
 8013d8e:	f7fd fd17 	bl	80117c0 <memp_malloc>
 8013d92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d107      	bne.n	8013daa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013d9a:	79fb      	ldrb	r3, [r7, #7]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7ff fee3 	bl	8013b68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013da2:	2001      	movs	r0, #1
 8013da4:	f7fd fd0c 	bl	80117c0 <memp_malloc>
 8013da8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d03f      	beq.n	8013e30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013db0:	229c      	movs	r2, #156	; 0x9c
 8013db2:	2100      	movs	r1, #0
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f007 fdd2 	bl	801b95e <memset>
    pcb->prio = prio;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	79fa      	ldrb	r2, [r7, #7]
 8013dbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8013dc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	22ff      	movs	r2, #255	; 0xff
 8013dde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013de6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2206      	movs	r2, #6
 8013dec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2206      	movs	r2, #6
 8013df4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2201      	movs	r2, #1
 8013e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013e06:	4b0d      	ldr	r3, [pc, #52]	; (8013e3c <tcp_alloc+0xf8>)
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013e0e:	4b0c      	ldr	r3, [pc, #48]	; (8013e40 <tcp_alloc+0xfc>)
 8013e10:	781a      	ldrb	r2, [r3, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8013e1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	4a08      	ldr	r2, [pc, #32]	; (8013e44 <tcp_alloc+0x100>)
 8013e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	4a07      	ldr	r2, [pc, #28]	; (8013e48 <tcp_alloc+0x104>)
 8013e2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013e30:	68fb      	ldr	r3, [r7, #12]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3710      	adds	r7, #16
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	20008618 	.word	0x20008618
 8013e40:	2000862e 	.word	0x2000862e
 8013e44:	08013afd 	.word	0x08013afd
 8013e48:	006ddd00 	.word	0x006ddd00

08013e4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d107      	bne.n	8013e6a <tcp_pcb_purge+0x1e>
 8013e5a:	4b21      	ldr	r3, [pc, #132]	; (8013ee0 <tcp_pcb_purge+0x94>)
 8013e5c:	f640 0251 	movw	r2, #2129	; 0x851
 8013e60:	4920      	ldr	r1, [pc, #128]	; (8013ee4 <tcp_pcb_purge+0x98>)
 8013e62:	4821      	ldr	r0, [pc, #132]	; (8013ee8 <tcp_pcb_purge+0x9c>)
 8013e64:	f007 fd16 	bl	801b894 <iprintf>
 8013e68:	e037      	b.n	8013eda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	7d1b      	ldrb	r3, [r3, #20]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d033      	beq.n	8013eda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013e76:	2b0a      	cmp	r3, #10
 8013e78:	d02f      	beq.n	8013eda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d02b      	beq.n	8013eda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d007      	beq.n	8013e9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7fe fb7c 	bl	801258c <pbuf_free>
      pcb->refused_data = NULL;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d002      	beq.n	8013ea8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 f986 	bl	80141b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013eae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7ff fdc7 	bl	8013a48 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff fdc2 	bl	8013a48 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	0801d228 	.word	0x0801d228
 8013ee4:	0801d874 	.word	0x0801d874
 8013ee8:	0801d26c 	.word	0x0801d26c

08013eec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d106      	bne.n	8013f0a <tcp_pcb_remove+0x1e>
 8013efc:	4b3e      	ldr	r3, [pc, #248]	; (8013ff8 <tcp_pcb_remove+0x10c>)
 8013efe:	f640 0283 	movw	r2, #2179	; 0x883
 8013f02:	493e      	ldr	r1, [pc, #248]	; (8013ffc <tcp_pcb_remove+0x110>)
 8013f04:	483e      	ldr	r0, [pc, #248]	; (8014000 <tcp_pcb_remove+0x114>)
 8013f06:	f007 fcc5 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <tcp_pcb_remove+0x32>
 8013f10:	4b39      	ldr	r3, [pc, #228]	; (8013ff8 <tcp_pcb_remove+0x10c>)
 8013f12:	f640 0284 	movw	r2, #2180	; 0x884
 8013f16:	493b      	ldr	r1, [pc, #236]	; (8014004 <tcp_pcb_remove+0x118>)
 8013f18:	4839      	ldr	r0, [pc, #228]	; (8014000 <tcp_pcb_remove+0x114>)
 8013f1a:	f007 fcbb 	bl	801b894 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	683a      	ldr	r2, [r7, #0]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d105      	bne.n	8013f34 <tcp_pcb_remove+0x48>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	68da      	ldr	r2, [r3, #12]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	e013      	b.n	8013f5c <tcp_pcb_remove+0x70>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	60fb      	str	r3, [r7, #12]
 8013f3a:	e00c      	b.n	8013f56 <tcp_pcb_remove+0x6a>
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	683a      	ldr	r2, [r7, #0]
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d104      	bne.n	8013f50 <tcp_pcb_remove+0x64>
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	68da      	ldr	r2, [r3, #12]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	60da      	str	r2, [r3, #12]
 8013f4e:	e005      	b.n	8013f5c <tcp_pcb_remove+0x70>
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	60fb      	str	r3, [r7, #12]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1ef      	bne.n	8013f3c <tcp_pcb_remove+0x50>
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013f62:	6838      	ldr	r0, [r7, #0]
 8013f64:	f7ff ff72 	bl	8013e4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	7d1b      	ldrb	r3, [r3, #20]
 8013f6c:	2b0a      	cmp	r3, #10
 8013f6e:	d013      	beq.n	8013f98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d00f      	beq.n	8013f98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	8b5b      	ldrh	r3, [r3, #26]
 8013f7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d009      	beq.n	8013f98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	8b5b      	ldrh	r3, [r3, #26]
 8013f88:	f043 0302 	orr.w	r3, r3, #2
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013f92:	6838      	ldr	r0, [r7, #0]
 8013f94:	f002 ff6e 	bl	8016e74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	7d1b      	ldrb	r3, [r3, #20]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d020      	beq.n	8013fe2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d006      	beq.n	8013fb6 <tcp_pcb_remove+0xca>
 8013fa8:	4b13      	ldr	r3, [pc, #76]	; (8013ff8 <tcp_pcb_remove+0x10c>)
 8013faa:	f640 0293 	movw	r2, #2195	; 0x893
 8013fae:	4916      	ldr	r1, [pc, #88]	; (8014008 <tcp_pcb_remove+0x11c>)
 8013fb0:	4813      	ldr	r0, [pc, #76]	; (8014000 <tcp_pcb_remove+0x114>)
 8013fb2:	f007 fc6f 	bl	801b894 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d006      	beq.n	8013fcc <tcp_pcb_remove+0xe0>
 8013fbe:	4b0e      	ldr	r3, [pc, #56]	; (8013ff8 <tcp_pcb_remove+0x10c>)
 8013fc0:	f640 0294 	movw	r2, #2196	; 0x894
 8013fc4:	4911      	ldr	r1, [pc, #68]	; (801400c <tcp_pcb_remove+0x120>)
 8013fc6:	480e      	ldr	r0, [pc, #56]	; (8014000 <tcp_pcb_remove+0x114>)
 8013fc8:	f007 fc64 	bl	801b894 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d006      	beq.n	8013fe2 <tcp_pcb_remove+0xf6>
 8013fd4:	4b08      	ldr	r3, [pc, #32]	; (8013ff8 <tcp_pcb_remove+0x10c>)
 8013fd6:	f640 0296 	movw	r2, #2198	; 0x896
 8013fda:	490d      	ldr	r1, [pc, #52]	; (8014010 <tcp_pcb_remove+0x124>)
 8013fdc:	4808      	ldr	r0, [pc, #32]	; (8014000 <tcp_pcb_remove+0x114>)
 8013fde:	f007 fc59 	bl	801b894 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	2200      	movs	r2, #0
 8013fec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013fee:	bf00      	nop
 8013ff0:	3710      	adds	r7, #16
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	0801d228 	.word	0x0801d228
 8013ffc:	0801d890 	.word	0x0801d890
 8014000:	0801d26c 	.word	0x0801d26c
 8014004:	0801d8ac 	.word	0x0801d8ac
 8014008:	0801d8cc 	.word	0x0801d8cc
 801400c:	0801d8e4 	.word	0x0801d8e4
 8014010:	0801d900 	.word	0x0801d900

08014014 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d106      	bne.n	8014030 <tcp_next_iss+0x1c>
 8014022:	4b0a      	ldr	r3, [pc, #40]	; (801404c <tcp_next_iss+0x38>)
 8014024:	f640 02af 	movw	r2, #2223	; 0x8af
 8014028:	4909      	ldr	r1, [pc, #36]	; (8014050 <tcp_next_iss+0x3c>)
 801402a:	480a      	ldr	r0, [pc, #40]	; (8014054 <tcp_next_iss+0x40>)
 801402c:	f007 fc32 	bl	801b894 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014030:	4b09      	ldr	r3, [pc, #36]	; (8014058 <tcp_next_iss+0x44>)
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	4b09      	ldr	r3, [pc, #36]	; (801405c <tcp_next_iss+0x48>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4413      	add	r3, r2
 801403a:	4a07      	ldr	r2, [pc, #28]	; (8014058 <tcp_next_iss+0x44>)
 801403c:	6013      	str	r3, [r2, #0]
  return iss;
 801403e:	4b06      	ldr	r3, [pc, #24]	; (8014058 <tcp_next_iss+0x44>)
 8014040:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014042:	4618      	mov	r0, r3
 8014044:	3708      	adds	r7, #8
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0801d228 	.word	0x0801d228
 8014050:	0801d918 	.word	0x0801d918
 8014054:	0801d26c 	.word	0x0801d26c
 8014058:	20000130 	.word	0x20000130
 801405c:	20008618 	.word	0x20008618

08014060 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	4603      	mov	r3, r0
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d106      	bne.n	8014082 <tcp_eff_send_mss_netif+0x22>
 8014074:	4b14      	ldr	r3, [pc, #80]	; (80140c8 <tcp_eff_send_mss_netif+0x68>)
 8014076:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801407a:	4914      	ldr	r1, [pc, #80]	; (80140cc <tcp_eff_send_mss_netif+0x6c>)
 801407c:	4814      	ldr	r0, [pc, #80]	; (80140d0 <tcp_eff_send_mss_netif+0x70>)
 801407e:	f007 fc09 	bl	801b894 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d101      	bne.n	801408c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014088:	89fb      	ldrh	r3, [r7, #14]
 801408a:	e019      	b.n	80140c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014090:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014092:	8afb      	ldrh	r3, [r7, #22]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d012      	beq.n	80140be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014098:	2328      	movs	r3, #40	; 0x28
 801409a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801409c:	8afa      	ldrh	r2, [r7, #22]
 801409e:	8abb      	ldrh	r3, [r7, #20]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d904      	bls.n	80140ae <tcp_eff_send_mss_netif+0x4e>
 80140a4:	8afa      	ldrh	r2, [r7, #22]
 80140a6:	8abb      	ldrh	r3, [r7, #20]
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	e000      	b.n	80140b0 <tcp_eff_send_mss_netif+0x50>
 80140ae:	2300      	movs	r3, #0
 80140b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80140b2:	8a7a      	ldrh	r2, [r7, #18]
 80140b4:	89fb      	ldrh	r3, [r7, #14]
 80140b6:	4293      	cmp	r3, r2
 80140b8:	bf28      	it	cs
 80140ba:	4613      	movcs	r3, r2
 80140bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80140be:	89fb      	ldrh	r3, [r7, #14]
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3718      	adds	r7, #24
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	0801d228 	.word	0x0801d228
 80140cc:	0801d934 	.word	0x0801d934
 80140d0:	0801d26c 	.word	0x0801d26c

080140d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d119      	bne.n	801411c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80140e8:	4b10      	ldr	r3, [pc, #64]	; (801412c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80140ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80140ee:	4910      	ldr	r1, [pc, #64]	; (8014130 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80140f0:	4810      	ldr	r0, [pc, #64]	; (8014134 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80140f2:	f007 fbcf 	bl	801b894 <iprintf>

  while (pcb != NULL) {
 80140f6:	e011      	b.n	801411c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	429a      	cmp	r2, r3
 8014102:	d108      	bne.n	8014116 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f7fe ffc6 	bl	801309c <tcp_abort>
      pcb = next;
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	60fb      	str	r3, [r7, #12]
 8014114:	e002      	b.n	801411c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d1ea      	bne.n	80140f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014122:	bf00      	nop
 8014124:	bf00      	nop
 8014126:	3710      	adds	r7, #16
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	0801d228 	.word	0x0801d228
 8014130:	0801d95c 	.word	0x0801d95c
 8014134:	0801d26c 	.word	0x0801d26c

08014138 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d02a      	beq.n	801419e <tcp_netif_ip_addr_changed+0x66>
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d026      	beq.n	801419e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014150:	4b15      	ldr	r3, [pc, #84]	; (80141a8 <tcp_netif_ip_addr_changed+0x70>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	4619      	mov	r1, r3
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7ff ffbc 	bl	80140d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801415c:	4b13      	ldr	r3, [pc, #76]	; (80141ac <tcp_netif_ip_addr_changed+0x74>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4619      	mov	r1, r3
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7ff ffb6 	bl	80140d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d017      	beq.n	801419e <tcp_netif_ip_addr_changed+0x66>
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d013      	beq.n	801419e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014176:	4b0e      	ldr	r3, [pc, #56]	; (80141b0 <tcp_netif_ip_addr_changed+0x78>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	60fb      	str	r3, [r7, #12]
 801417c:	e00c      	b.n	8014198 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	429a      	cmp	r2, r3
 8014188:	d103      	bne.n	8014192 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	681a      	ldr	r2, [r3, #0]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	60fb      	str	r3, [r7, #12]
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d1ef      	bne.n	801417e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801419e:	bf00      	nop
 80141a0:	3710      	adds	r7, #16
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	20008624 	.word	0x20008624
 80141ac:	2000861c 	.word	0x2000861c
 80141b0:	20008620 	.word	0x20008620

080141b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d007      	beq.n	80141d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff fc3d 	bl	8013a48 <tcp_segs_free>
    pcb->ooseq = NULL;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2200      	movs	r2, #0
 80141d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80141d4:	bf00      	nop
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	b08d      	sub	sp, #52	; 0x34
 80141e0:	af04      	add	r7, sp, #16
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d105      	bne.n	80141f8 <tcp_input+0x1c>
 80141ec:	4b9b      	ldr	r3, [pc, #620]	; (801445c <tcp_input+0x280>)
 80141ee:	2283      	movs	r2, #131	; 0x83
 80141f0:	499b      	ldr	r1, [pc, #620]	; (8014460 <tcp_input+0x284>)
 80141f2:	489c      	ldr	r0, [pc, #624]	; (8014464 <tcp_input+0x288>)
 80141f4:	f007 fb4e 	bl	801b894 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	4a9a      	ldr	r2, [pc, #616]	; (8014468 <tcp_input+0x28c>)
 80141fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	895b      	ldrh	r3, [r3, #10]
 8014204:	2b13      	cmp	r3, #19
 8014206:	f240 83d1 	bls.w	80149ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801420a:	4b98      	ldr	r3, [pc, #608]	; (801446c <tcp_input+0x290>)
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	4a97      	ldr	r2, [pc, #604]	; (801446c <tcp_input+0x290>)
 8014210:	6812      	ldr	r2, [r2, #0]
 8014212:	4611      	mov	r1, r2
 8014214:	4618      	mov	r0, r3
 8014216:	f005 fc15 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 801421a:	4603      	mov	r3, r0
 801421c:	2b00      	cmp	r3, #0
 801421e:	f040 83c7 	bne.w	80149b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014222:	4b92      	ldr	r3, [pc, #584]	; (801446c <tcp_input+0x290>)
 8014224:	695b      	ldr	r3, [r3, #20]
 8014226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801422a:	2be0      	cmp	r3, #224	; 0xe0
 801422c:	f000 83c0 	beq.w	80149b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014230:	4b8d      	ldr	r3, [pc, #564]	; (8014468 <tcp_input+0x28c>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	899b      	ldrh	r3, [r3, #12]
 8014236:	b29b      	uxth	r3, r3
 8014238:	4618      	mov	r0, r3
 801423a:	f7fc fe4a 	bl	8010ed2 <lwip_htons>
 801423e:	4603      	mov	r3, r0
 8014240:	0b1b      	lsrs	r3, r3, #12
 8014242:	b29b      	uxth	r3, r3
 8014244:	b2db      	uxtb	r3, r3
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801424a:	7cbb      	ldrb	r3, [r7, #18]
 801424c:	2b13      	cmp	r3, #19
 801424e:	f240 83b1 	bls.w	80149b4 <tcp_input+0x7d8>
 8014252:	7cbb      	ldrb	r3, [r7, #18]
 8014254:	b29a      	uxth	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	891b      	ldrh	r3, [r3, #8]
 801425a:	429a      	cmp	r2, r3
 801425c:	f200 83aa 	bhi.w	80149b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014260:	7cbb      	ldrb	r3, [r7, #18]
 8014262:	b29b      	uxth	r3, r3
 8014264:	3b14      	subs	r3, #20
 8014266:	b29a      	uxth	r2, r3
 8014268:	4b81      	ldr	r3, [pc, #516]	; (8014470 <tcp_input+0x294>)
 801426a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801426c:	4b81      	ldr	r3, [pc, #516]	; (8014474 <tcp_input+0x298>)
 801426e:	2200      	movs	r2, #0
 8014270:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	895a      	ldrh	r2, [r3, #10]
 8014276:	7cbb      	ldrb	r3, [r7, #18]
 8014278:	b29b      	uxth	r3, r3
 801427a:	429a      	cmp	r2, r3
 801427c:	d309      	bcc.n	8014292 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801427e:	4b7c      	ldr	r3, [pc, #496]	; (8014470 <tcp_input+0x294>)
 8014280:	881a      	ldrh	r2, [r3, #0]
 8014282:	4b7d      	ldr	r3, [pc, #500]	; (8014478 <tcp_input+0x29c>)
 8014284:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014286:	7cbb      	ldrb	r3, [r7, #18]
 8014288:	4619      	mov	r1, r3
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7fe f8f8 	bl	8012480 <pbuf_remove_header>
 8014290:	e04e      	b.n	8014330 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d105      	bne.n	80142a6 <tcp_input+0xca>
 801429a:	4b70      	ldr	r3, [pc, #448]	; (801445c <tcp_input+0x280>)
 801429c:	22c2      	movs	r2, #194	; 0xc2
 801429e:	4977      	ldr	r1, [pc, #476]	; (801447c <tcp_input+0x2a0>)
 80142a0:	4870      	ldr	r0, [pc, #448]	; (8014464 <tcp_input+0x288>)
 80142a2:	f007 faf7 	bl	801b894 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80142a6:	2114      	movs	r1, #20
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7fe f8e9 	bl	8012480 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	895a      	ldrh	r2, [r3, #10]
 80142b2:	4b71      	ldr	r3, [pc, #452]	; (8014478 <tcp_input+0x29c>)
 80142b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80142b6:	4b6e      	ldr	r3, [pc, #440]	; (8014470 <tcp_input+0x294>)
 80142b8:	881a      	ldrh	r2, [r3, #0]
 80142ba:	4b6f      	ldr	r3, [pc, #444]	; (8014478 <tcp_input+0x29c>)
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80142c2:	4b6d      	ldr	r3, [pc, #436]	; (8014478 <tcp_input+0x29c>)
 80142c4:	881b      	ldrh	r3, [r3, #0]
 80142c6:	4619      	mov	r1, r3
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7fe f8d9 	bl	8012480 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	895b      	ldrh	r3, [r3, #10]
 80142d4:	8a3a      	ldrh	r2, [r7, #16]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	f200 836e 	bhi.w	80149b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	4a64      	ldr	r2, [pc, #400]	; (8014474 <tcp_input+0x298>)
 80142e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	8a3a      	ldrh	r2, [r7, #16]
 80142ec:	4611      	mov	r1, r2
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7fe f8c6 	bl	8012480 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	891a      	ldrh	r2, [r3, #8]
 80142f8:	8a3b      	ldrh	r3, [r7, #16]
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	895b      	ldrh	r3, [r3, #10]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d005      	beq.n	8014316 <tcp_input+0x13a>
 801430a:	4b54      	ldr	r3, [pc, #336]	; (801445c <tcp_input+0x280>)
 801430c:	22df      	movs	r2, #223	; 0xdf
 801430e:	495c      	ldr	r1, [pc, #368]	; (8014480 <tcp_input+0x2a4>)
 8014310:	4854      	ldr	r0, [pc, #336]	; (8014464 <tcp_input+0x288>)
 8014312:	f007 fabf 	bl	801b894 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	891a      	ldrh	r2, [r3, #8]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	891b      	ldrh	r3, [r3, #8]
 8014320:	429a      	cmp	r2, r3
 8014322:	d005      	beq.n	8014330 <tcp_input+0x154>
 8014324:	4b4d      	ldr	r3, [pc, #308]	; (801445c <tcp_input+0x280>)
 8014326:	22e0      	movs	r2, #224	; 0xe0
 8014328:	4956      	ldr	r1, [pc, #344]	; (8014484 <tcp_input+0x2a8>)
 801432a:	484e      	ldr	r0, [pc, #312]	; (8014464 <tcp_input+0x288>)
 801432c:	f007 fab2 	bl	801b894 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014330:	4b4d      	ldr	r3, [pc, #308]	; (8014468 <tcp_input+0x28c>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	b29b      	uxth	r3, r3
 8014338:	4a4b      	ldr	r2, [pc, #300]	; (8014468 <tcp_input+0x28c>)
 801433a:	6814      	ldr	r4, [r2, #0]
 801433c:	4618      	mov	r0, r3
 801433e:	f7fc fdc8 	bl	8010ed2 <lwip_htons>
 8014342:	4603      	mov	r3, r0
 8014344:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014346:	4b48      	ldr	r3, [pc, #288]	; (8014468 <tcp_input+0x28c>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	885b      	ldrh	r3, [r3, #2]
 801434c:	b29b      	uxth	r3, r3
 801434e:	4a46      	ldr	r2, [pc, #280]	; (8014468 <tcp_input+0x28c>)
 8014350:	6814      	ldr	r4, [r2, #0]
 8014352:	4618      	mov	r0, r3
 8014354:	f7fc fdbd 	bl	8010ed2 <lwip_htons>
 8014358:	4603      	mov	r3, r0
 801435a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801435c:	4b42      	ldr	r3, [pc, #264]	; (8014468 <tcp_input+0x28c>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	4a41      	ldr	r2, [pc, #260]	; (8014468 <tcp_input+0x28c>)
 8014364:	6814      	ldr	r4, [r2, #0]
 8014366:	4618      	mov	r0, r3
 8014368:	f7fc fdc8 	bl	8010efc <lwip_htonl>
 801436c:	4603      	mov	r3, r0
 801436e:	6063      	str	r3, [r4, #4]
 8014370:	6863      	ldr	r3, [r4, #4]
 8014372:	4a45      	ldr	r2, [pc, #276]	; (8014488 <tcp_input+0x2ac>)
 8014374:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014376:	4b3c      	ldr	r3, [pc, #240]	; (8014468 <tcp_input+0x28c>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	689b      	ldr	r3, [r3, #8]
 801437c:	4a3a      	ldr	r2, [pc, #232]	; (8014468 <tcp_input+0x28c>)
 801437e:	6814      	ldr	r4, [r2, #0]
 8014380:	4618      	mov	r0, r3
 8014382:	f7fc fdbb 	bl	8010efc <lwip_htonl>
 8014386:	4603      	mov	r3, r0
 8014388:	60a3      	str	r3, [r4, #8]
 801438a:	68a3      	ldr	r3, [r4, #8]
 801438c:	4a3f      	ldr	r2, [pc, #252]	; (801448c <tcp_input+0x2b0>)
 801438e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014390:	4b35      	ldr	r3, [pc, #212]	; (8014468 <tcp_input+0x28c>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	89db      	ldrh	r3, [r3, #14]
 8014396:	b29b      	uxth	r3, r3
 8014398:	4a33      	ldr	r2, [pc, #204]	; (8014468 <tcp_input+0x28c>)
 801439a:	6814      	ldr	r4, [r2, #0]
 801439c:	4618      	mov	r0, r3
 801439e:	f7fc fd98 	bl	8010ed2 <lwip_htons>
 80143a2:	4603      	mov	r3, r0
 80143a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80143a6:	4b30      	ldr	r3, [pc, #192]	; (8014468 <tcp_input+0x28c>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	899b      	ldrh	r3, [r3, #12]
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fc fd8f 	bl	8010ed2 <lwip_htons>
 80143b4:	4603      	mov	r3, r0
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143bc:	b2da      	uxtb	r2, r3
 80143be:	4b34      	ldr	r3, [pc, #208]	; (8014490 <tcp_input+0x2b4>)
 80143c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	891a      	ldrh	r2, [r3, #8]
 80143c6:	4b33      	ldr	r3, [pc, #204]	; (8014494 <tcp_input+0x2b8>)
 80143c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80143ca:	4b31      	ldr	r3, [pc, #196]	; (8014490 <tcp_input+0x2b4>)
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	f003 0303 	and.w	r3, r3, #3
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00c      	beq.n	80143f0 <tcp_input+0x214>
    tcplen++;
 80143d6:	4b2f      	ldr	r3, [pc, #188]	; (8014494 <tcp_input+0x2b8>)
 80143d8:	881b      	ldrh	r3, [r3, #0]
 80143da:	3301      	adds	r3, #1
 80143dc:	b29a      	uxth	r2, r3
 80143de:	4b2d      	ldr	r3, [pc, #180]	; (8014494 <tcp_input+0x2b8>)
 80143e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	891a      	ldrh	r2, [r3, #8]
 80143e6:	4b2b      	ldr	r3, [pc, #172]	; (8014494 <tcp_input+0x2b8>)
 80143e8:	881b      	ldrh	r3, [r3, #0]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	f200 82e6 	bhi.w	80149bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80143f0:	2300      	movs	r3, #0
 80143f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80143f4:	4b28      	ldr	r3, [pc, #160]	; (8014498 <tcp_input+0x2bc>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	61fb      	str	r3, [r7, #28]
 80143fa:	e09d      	b.n	8014538 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	7d1b      	ldrb	r3, [r3, #20]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d105      	bne.n	8014410 <tcp_input+0x234>
 8014404:	4b15      	ldr	r3, [pc, #84]	; (801445c <tcp_input+0x280>)
 8014406:	22fb      	movs	r2, #251	; 0xfb
 8014408:	4924      	ldr	r1, [pc, #144]	; (801449c <tcp_input+0x2c0>)
 801440a:	4816      	ldr	r0, [pc, #88]	; (8014464 <tcp_input+0x288>)
 801440c:	f007 fa42 	bl	801b894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	7d1b      	ldrb	r3, [r3, #20]
 8014414:	2b0a      	cmp	r3, #10
 8014416:	d105      	bne.n	8014424 <tcp_input+0x248>
 8014418:	4b10      	ldr	r3, [pc, #64]	; (801445c <tcp_input+0x280>)
 801441a:	22fc      	movs	r2, #252	; 0xfc
 801441c:	4920      	ldr	r1, [pc, #128]	; (80144a0 <tcp_input+0x2c4>)
 801441e:	4811      	ldr	r0, [pc, #68]	; (8014464 <tcp_input+0x288>)
 8014420:	f007 fa38 	bl	801b894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	7d1b      	ldrb	r3, [r3, #20]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d105      	bne.n	8014438 <tcp_input+0x25c>
 801442c:	4b0b      	ldr	r3, [pc, #44]	; (801445c <tcp_input+0x280>)
 801442e:	22fd      	movs	r2, #253	; 0xfd
 8014430:	491c      	ldr	r1, [pc, #112]	; (80144a4 <tcp_input+0x2c8>)
 8014432:	480c      	ldr	r0, [pc, #48]	; (8014464 <tcp_input+0x288>)
 8014434:	f007 fa2e 	bl	801b894 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	7a1b      	ldrb	r3, [r3, #8]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d033      	beq.n	80144a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	7a1a      	ldrb	r2, [r3, #8]
 8014444:	4b09      	ldr	r3, [pc, #36]	; (801446c <tcp_input+0x290>)
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801444c:	3301      	adds	r3, #1
 801444e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014450:	429a      	cmp	r2, r3
 8014452:	d029      	beq.n	80144a8 <tcp_input+0x2cc>
      prev = pcb;
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	61bb      	str	r3, [r7, #24]
      continue;
 8014458:	e06b      	b.n	8014532 <tcp_input+0x356>
 801445a:	bf00      	nop
 801445c:	0801d990 	.word	0x0801d990
 8014460:	0801d9c4 	.word	0x0801d9c4
 8014464:	0801d9dc 	.word	0x0801d9dc
 8014468:	20008640 	.word	0x20008640
 801446c:	200054e8 	.word	0x200054e8
 8014470:	20008644 	.word	0x20008644
 8014474:	20008648 	.word	0x20008648
 8014478:	20008646 	.word	0x20008646
 801447c:	0801da04 	.word	0x0801da04
 8014480:	0801da14 	.word	0x0801da14
 8014484:	0801da20 	.word	0x0801da20
 8014488:	20008650 	.word	0x20008650
 801448c:	20008654 	.word	0x20008654
 8014490:	2000865c 	.word	0x2000865c
 8014494:	2000865a 	.word	0x2000865a
 8014498:	20008624 	.word	0x20008624
 801449c:	0801da40 	.word	0x0801da40
 80144a0:	0801da68 	.word	0x0801da68
 80144a4:	0801da94 	.word	0x0801da94
    }

    if (pcb->remote_port == tcphdr->src &&
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	8b1a      	ldrh	r2, [r3, #24]
 80144ac:	4b72      	ldr	r3, [pc, #456]	; (8014678 <tcp_input+0x49c>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d13a      	bne.n	801452e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	8ada      	ldrh	r2, [r3, #22]
 80144bc:	4b6e      	ldr	r3, [pc, #440]	; (8014678 <tcp_input+0x49c>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	885b      	ldrh	r3, [r3, #2]
 80144c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d132      	bne.n	801452e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	685a      	ldr	r2, [r3, #4]
 80144cc:	4b6b      	ldr	r3, [pc, #428]	; (801467c <tcp_input+0x4a0>)
 80144ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d12c      	bne.n	801452e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	4b68      	ldr	r3, [pc, #416]	; (801467c <tcp_input+0x4a0>)
 80144da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144dc:	429a      	cmp	r2, r3
 80144de:	d126      	bne.n	801452e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	69fa      	ldr	r2, [r7, #28]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d106      	bne.n	80144f8 <tcp_input+0x31c>
 80144ea:	4b65      	ldr	r3, [pc, #404]	; (8014680 <tcp_input+0x4a4>)
 80144ec:	f240 120d 	movw	r2, #269	; 0x10d
 80144f0:	4964      	ldr	r1, [pc, #400]	; (8014684 <tcp_input+0x4a8>)
 80144f2:	4865      	ldr	r0, [pc, #404]	; (8014688 <tcp_input+0x4ac>)
 80144f4:	f007 f9ce 	bl	801b894 <iprintf>
      if (prev != NULL) {
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00a      	beq.n	8014514 <tcp_input+0x338>
        prev->next = pcb->next;
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	68da      	ldr	r2, [r3, #12]
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014506:	4b61      	ldr	r3, [pc, #388]	; (801468c <tcp_input+0x4b0>)
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801450e:	4a5f      	ldr	r2, [pc, #380]	; (801468c <tcp_input+0x4b0>)
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	69fa      	ldr	r2, [r7, #28]
 801451a:	429a      	cmp	r2, r3
 801451c:	d111      	bne.n	8014542 <tcp_input+0x366>
 801451e:	4b58      	ldr	r3, [pc, #352]	; (8014680 <tcp_input+0x4a4>)
 8014520:	f240 1215 	movw	r2, #277	; 0x115
 8014524:	495a      	ldr	r1, [pc, #360]	; (8014690 <tcp_input+0x4b4>)
 8014526:	4858      	ldr	r0, [pc, #352]	; (8014688 <tcp_input+0x4ac>)
 8014528:	f007 f9b4 	bl	801b894 <iprintf>
      break;
 801452c:	e009      	b.n	8014542 <tcp_input+0x366>
    }
    prev = pcb;
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014532:	69fb      	ldr	r3, [r7, #28]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	61fb      	str	r3, [r7, #28]
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	2b00      	cmp	r3, #0
 801453c:	f47f af5e 	bne.w	80143fc <tcp_input+0x220>
 8014540:	e000      	b.n	8014544 <tcp_input+0x368>
      break;
 8014542:	bf00      	nop
  }

  if (pcb == NULL) {
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	2b00      	cmp	r3, #0
 8014548:	f040 80aa 	bne.w	80146a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801454c:	4b51      	ldr	r3, [pc, #324]	; (8014694 <tcp_input+0x4b8>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	61fb      	str	r3, [r7, #28]
 8014552:	e03f      	b.n	80145d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	7d1b      	ldrb	r3, [r3, #20]
 8014558:	2b0a      	cmp	r3, #10
 801455a:	d006      	beq.n	801456a <tcp_input+0x38e>
 801455c:	4b48      	ldr	r3, [pc, #288]	; (8014680 <tcp_input+0x4a4>)
 801455e:	f240 121f 	movw	r2, #287	; 0x11f
 8014562:	494d      	ldr	r1, [pc, #308]	; (8014698 <tcp_input+0x4bc>)
 8014564:	4848      	ldr	r0, [pc, #288]	; (8014688 <tcp_input+0x4ac>)
 8014566:	f007 f995 	bl	801b894 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	7a1b      	ldrb	r3, [r3, #8]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d009      	beq.n	8014586 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	7a1a      	ldrb	r2, [r3, #8]
 8014576:	4b41      	ldr	r3, [pc, #260]	; (801467c <tcp_input+0x4a0>)
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801457e:	3301      	adds	r3, #1
 8014580:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014582:	429a      	cmp	r2, r3
 8014584:	d122      	bne.n	80145cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	8b1a      	ldrh	r2, [r3, #24]
 801458a:	4b3b      	ldr	r3, [pc, #236]	; (8014678 <tcp_input+0x49c>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	881b      	ldrh	r3, [r3, #0]
 8014590:	b29b      	uxth	r3, r3
 8014592:	429a      	cmp	r2, r3
 8014594:	d11b      	bne.n	80145ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	8ada      	ldrh	r2, [r3, #22]
 801459a:	4b37      	ldr	r3, [pc, #220]	; (8014678 <tcp_input+0x49c>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	885b      	ldrh	r3, [r3, #2]
 80145a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d113      	bne.n	80145ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145a6:	69fb      	ldr	r3, [r7, #28]
 80145a8:	685a      	ldr	r2, [r3, #4]
 80145aa:	4b34      	ldr	r3, [pc, #208]	; (801467c <tcp_input+0x4a0>)
 80145ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d10d      	bne.n	80145ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	4b31      	ldr	r3, [pc, #196]	; (801467c <tcp_input+0x4a0>)
 80145b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d107      	bne.n	80145ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80145be:	69f8      	ldr	r0, [r7, #28]
 80145c0:	f000 fb56 	bl	8014c70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7fd ffe1 	bl	801258c <pbuf_free>
        return;
 80145ca:	e1fd      	b.n	80149c8 <tcp_input+0x7ec>
        continue;
 80145cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	61fb      	str	r3, [r7, #28]
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1bc      	bne.n	8014554 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80145da:	2300      	movs	r3, #0
 80145dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145de:	4b2f      	ldr	r3, [pc, #188]	; (801469c <tcp_input+0x4c0>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	617b      	str	r3, [r7, #20]
 80145e4:	e02a      	b.n	801463c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	7a1b      	ldrb	r3, [r3, #8]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d00c      	beq.n	8014608 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	7a1a      	ldrb	r2, [r3, #8]
 80145f2:	4b22      	ldr	r3, [pc, #136]	; (801467c <tcp_input+0x4a0>)
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145fa:	3301      	adds	r3, #1
 80145fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80145fe:	429a      	cmp	r2, r3
 8014600:	d002      	beq.n	8014608 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	61bb      	str	r3, [r7, #24]
        continue;
 8014606:	e016      	b.n	8014636 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	8ada      	ldrh	r2, [r3, #22]
 801460c:	4b1a      	ldr	r3, [pc, #104]	; (8014678 <tcp_input+0x49c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	885b      	ldrh	r3, [r3, #2]
 8014612:	b29b      	uxth	r3, r3
 8014614:	429a      	cmp	r2, r3
 8014616:	d10c      	bne.n	8014632 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	4b17      	ldr	r3, [pc, #92]	; (801467c <tcp_input+0x4a0>)
 801461e:	695b      	ldr	r3, [r3, #20]
 8014620:	429a      	cmp	r2, r3
 8014622:	d00f      	beq.n	8014644 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d00d      	beq.n	8014646 <tcp_input+0x46a>
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d009      	beq.n	8014646 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	617b      	str	r3, [r7, #20]
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1d1      	bne.n	80145e6 <tcp_input+0x40a>
 8014642:	e000      	b.n	8014646 <tcp_input+0x46a>
            break;
 8014644:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d029      	beq.n	80146a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00a      	beq.n	8014668 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	68da      	ldr	r2, [r3, #12]
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801465a:	4b10      	ldr	r3, [pc, #64]	; (801469c <tcp_input+0x4c0>)
 801465c:	681a      	ldr	r2, [r3, #0]
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014662:	4a0e      	ldr	r2, [pc, #56]	; (801469c <tcp_input+0x4c0>)
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014668:	6978      	ldr	r0, [r7, #20]
 801466a:	f000 fa03 	bl	8014a74 <tcp_listen_input>
      }
      pbuf_free(p);
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f7fd ff8c 	bl	801258c <pbuf_free>
      return;
 8014674:	e1a8      	b.n	80149c8 <tcp_input+0x7ec>
 8014676:	bf00      	nop
 8014678:	20008640 	.word	0x20008640
 801467c:	200054e8 	.word	0x200054e8
 8014680:	0801d990 	.word	0x0801d990
 8014684:	0801dabc 	.word	0x0801dabc
 8014688:	0801d9dc 	.word	0x0801d9dc
 801468c:	20008624 	.word	0x20008624
 8014690:	0801dae8 	.word	0x0801dae8
 8014694:	20008628 	.word	0x20008628
 8014698:	0801db14 	.word	0x0801db14
 801469c:	20008620 	.word	0x20008620
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f000 8158 	beq.w	8014958 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80146a8:	4b95      	ldr	r3, [pc, #596]	; (8014900 <tcp_input+0x724>)
 80146aa:	2200      	movs	r2, #0
 80146ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	891a      	ldrh	r2, [r3, #8]
 80146b2:	4b93      	ldr	r3, [pc, #588]	; (8014900 <tcp_input+0x724>)
 80146b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80146b6:	4a92      	ldr	r2, [pc, #584]	; (8014900 <tcp_input+0x724>)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80146bc:	4b91      	ldr	r3, [pc, #580]	; (8014904 <tcp_input+0x728>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4a8f      	ldr	r2, [pc, #572]	; (8014900 <tcp_input+0x724>)
 80146c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80146c4:	4b90      	ldr	r3, [pc, #576]	; (8014908 <tcp_input+0x72c>)
 80146c6:	2200      	movs	r2, #0
 80146c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80146ca:	4b90      	ldr	r3, [pc, #576]	; (801490c <tcp_input+0x730>)
 80146cc:	2200      	movs	r2, #0
 80146ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80146d0:	4b8f      	ldr	r3, [pc, #572]	; (8014910 <tcp_input+0x734>)
 80146d2:	2200      	movs	r2, #0
 80146d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80146d6:	4b8f      	ldr	r3, [pc, #572]	; (8014914 <tcp_input+0x738>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	f003 0308 	and.w	r3, r3, #8
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d006      	beq.n	80146f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	7b5b      	ldrb	r3, [r3, #13]
 80146e6:	f043 0301 	orr.w	r3, r3, #1
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d017      	beq.n	8014728 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80146f8:	69f8      	ldr	r0, [r7, #28]
 80146fa:	f7ff f929 	bl	8013950 <tcp_process_refused_data>
 80146fe:	4603      	mov	r3, r0
 8014700:	f113 0f0d 	cmn.w	r3, #13
 8014704:	d007      	beq.n	8014716 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801470a:	2b00      	cmp	r3, #0
 801470c:	d00c      	beq.n	8014728 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801470e:	4b82      	ldr	r3, [pc, #520]	; (8014918 <tcp_input+0x73c>)
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d008      	beq.n	8014728 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801471a:	2b00      	cmp	r3, #0
 801471c:	f040 80e3 	bne.w	80148e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014720:	69f8      	ldr	r0, [r7, #28]
 8014722:	f003 f9ab 	bl	8017a7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014726:	e0de      	b.n	80148e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014728:	4a7c      	ldr	r2, [pc, #496]	; (801491c <tcp_input+0x740>)
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801472e:	69f8      	ldr	r0, [r7, #28]
 8014730:	f000 fb18 	bl	8014d64 <tcp_process>
 8014734:	4603      	mov	r3, r0
 8014736:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801473c:	f113 0f0d 	cmn.w	r3, #13
 8014740:	f000 80d3 	beq.w	80148ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014744:	4b71      	ldr	r3, [pc, #452]	; (801490c <tcp_input+0x730>)
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	f003 0308 	and.w	r3, r3, #8
 801474c:	2b00      	cmp	r3, #0
 801474e:	d015      	beq.n	801477c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014756:	2b00      	cmp	r3, #0
 8014758:	d008      	beq.n	801476c <tcp_input+0x590>
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014760:	69fa      	ldr	r2, [r7, #28]
 8014762:	6912      	ldr	r2, [r2, #16]
 8014764:	f06f 010d 	mvn.w	r1, #13
 8014768:	4610      	mov	r0, r2
 801476a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801476c:	69f9      	ldr	r1, [r7, #28]
 801476e:	486c      	ldr	r0, [pc, #432]	; (8014920 <tcp_input+0x744>)
 8014770:	f7ff fbbc 	bl	8013eec <tcp_pcb_remove>
        tcp_free(pcb);
 8014774:	69f8      	ldr	r0, [r7, #28]
 8014776:	f7fe f9a9 	bl	8012acc <tcp_free>
 801477a:	e0da      	b.n	8014932 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801477c:	2300      	movs	r3, #0
 801477e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014780:	4b63      	ldr	r3, [pc, #396]	; (8014910 <tcp_input+0x734>)
 8014782:	881b      	ldrh	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d01d      	beq.n	80147c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014788:	4b61      	ldr	r3, [pc, #388]	; (8014910 <tcp_input+0x734>)
 801478a:	881b      	ldrh	r3, [r3, #0]
 801478c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00a      	beq.n	80147ae <tcp_input+0x5d2>
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801479e:	69fa      	ldr	r2, [r7, #28]
 80147a0:	6910      	ldr	r0, [r2, #16]
 80147a2:	89fa      	ldrh	r2, [r7, #14]
 80147a4:	69f9      	ldr	r1, [r7, #28]
 80147a6:	4798      	blx	r3
 80147a8:	4603      	mov	r3, r0
 80147aa:	74fb      	strb	r3, [r7, #19]
 80147ac:	e001      	b.n	80147b2 <tcp_input+0x5d6>
 80147ae:	2300      	movs	r3, #0
 80147b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80147b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147b6:	f113 0f0d 	cmn.w	r3, #13
 80147ba:	f000 8098 	beq.w	80148ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80147be:	4b54      	ldr	r3, [pc, #336]	; (8014910 <tcp_input+0x734>)
 80147c0:	2200      	movs	r2, #0
 80147c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80147c4:	69f8      	ldr	r0, [r7, #28]
 80147c6:	f000 f915 	bl	80149f4 <tcp_input_delayed_close>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	f040 8090 	bne.w	80148f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80147d2:	4b4d      	ldr	r3, [pc, #308]	; (8014908 <tcp_input+0x72c>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d041      	beq.n	801485e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d006      	beq.n	80147f0 <tcp_input+0x614>
 80147e2:	4b50      	ldr	r3, [pc, #320]	; (8014924 <tcp_input+0x748>)
 80147e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80147e8:	494f      	ldr	r1, [pc, #316]	; (8014928 <tcp_input+0x74c>)
 80147ea:	4850      	ldr	r0, [pc, #320]	; (801492c <tcp_input+0x750>)
 80147ec:	f007 f852 	bl	801b894 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	8b5b      	ldrh	r3, [r3, #26]
 80147f4:	f003 0310 	and.w	r3, r3, #16
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d008      	beq.n	801480e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80147fc:	4b42      	ldr	r3, [pc, #264]	; (8014908 <tcp_input+0x72c>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4618      	mov	r0, r3
 8014802:	f7fd fec3 	bl	801258c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014806:	69f8      	ldr	r0, [r7, #28]
 8014808:	f7fe fc48 	bl	801309c <tcp_abort>
            goto aborted;
 801480c:	e091      	b.n	8014932 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00c      	beq.n	8014832 <tcp_input+0x656>
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	6918      	ldr	r0, [r3, #16]
 8014822:	4b39      	ldr	r3, [pc, #228]	; (8014908 <tcp_input+0x72c>)
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	2300      	movs	r3, #0
 8014828:	69f9      	ldr	r1, [r7, #28]
 801482a:	47a0      	blx	r4
 801482c:	4603      	mov	r3, r0
 801482e:	74fb      	strb	r3, [r7, #19]
 8014830:	e008      	b.n	8014844 <tcp_input+0x668>
 8014832:	4b35      	ldr	r3, [pc, #212]	; (8014908 <tcp_input+0x72c>)
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	2300      	movs	r3, #0
 8014838:	69f9      	ldr	r1, [r7, #28]
 801483a:	2000      	movs	r0, #0
 801483c:	f7ff f95e 	bl	8013afc <tcp_recv_null>
 8014840:	4603      	mov	r3, r0
 8014842:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014844:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014848:	f113 0f0d 	cmn.w	r3, #13
 801484c:	d053      	beq.n	80148f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801484e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d003      	beq.n	801485e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014856:	4b2c      	ldr	r3, [pc, #176]	; (8014908 <tcp_input+0x72c>)
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801485e:	4b2b      	ldr	r3, [pc, #172]	; (801490c <tcp_input+0x730>)
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	f003 0320 	and.w	r3, r3, #32
 8014866:	2b00      	cmp	r3, #0
 8014868:	d030      	beq.n	80148cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801486e:	2b00      	cmp	r3, #0
 8014870:	d009      	beq.n	8014886 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014876:	7b5a      	ldrb	r2, [r3, #13]
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801487c:	f042 0220 	orr.w	r2, r2, #32
 8014880:	b2d2      	uxtb	r2, r2
 8014882:	735a      	strb	r2, [r3, #13]
 8014884:	e022      	b.n	80148cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014886:	69fb      	ldr	r3, [r7, #28]
 8014888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801488a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801488e:	d005      	beq.n	801489c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014894:	3301      	adds	r3, #1
 8014896:	b29a      	uxth	r2, r3
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00b      	beq.n	80148be <tcp_input+0x6e2>
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	6918      	ldr	r0, [r3, #16]
 80148b0:	2300      	movs	r3, #0
 80148b2:	2200      	movs	r2, #0
 80148b4:	69f9      	ldr	r1, [r7, #28]
 80148b6:	47a0      	blx	r4
 80148b8:	4603      	mov	r3, r0
 80148ba:	74fb      	strb	r3, [r7, #19]
 80148bc:	e001      	b.n	80148c2 <tcp_input+0x6e6>
 80148be:	2300      	movs	r3, #0
 80148c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80148c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148c6:	f113 0f0d 	cmn.w	r3, #13
 80148ca:	d016      	beq.n	80148fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80148cc:	4b13      	ldr	r3, [pc, #76]	; (801491c <tcp_input+0x740>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80148d2:	69f8      	ldr	r0, [r7, #28]
 80148d4:	f000 f88e 	bl	80149f4 <tcp_input_delayed_close>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d128      	bne.n	8014930 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80148de:	69f8      	ldr	r0, [r7, #28]
 80148e0:	f002 fac8 	bl	8016e74 <tcp_output>
 80148e4:	e025      	b.n	8014932 <tcp_input+0x756>
        goto aborted;
 80148e6:	bf00      	nop
 80148e8:	e023      	b.n	8014932 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80148ea:	bf00      	nop
 80148ec:	e021      	b.n	8014932 <tcp_input+0x756>
              goto aborted;
 80148ee:	bf00      	nop
 80148f0:	e01f      	b.n	8014932 <tcp_input+0x756>
          goto aborted;
 80148f2:	bf00      	nop
 80148f4:	e01d      	b.n	8014932 <tcp_input+0x756>
            goto aborted;
 80148f6:	bf00      	nop
 80148f8:	e01b      	b.n	8014932 <tcp_input+0x756>
              goto aborted;
 80148fa:	bf00      	nop
 80148fc:	e019      	b.n	8014932 <tcp_input+0x756>
 80148fe:	bf00      	nop
 8014900:	20008630 	.word	0x20008630
 8014904:	20008640 	.word	0x20008640
 8014908:	20008660 	.word	0x20008660
 801490c:	2000865d 	.word	0x2000865d
 8014910:	20008658 	.word	0x20008658
 8014914:	2000865c 	.word	0x2000865c
 8014918:	2000865a 	.word	0x2000865a
 801491c:	20008664 	.word	0x20008664
 8014920:	20008624 	.word	0x20008624
 8014924:	0801d990 	.word	0x0801d990
 8014928:	0801db44 	.word	0x0801db44
 801492c:	0801d9dc 	.word	0x0801d9dc
          goto aborted;
 8014930:	bf00      	nop
    tcp_input_pcb = NULL;
 8014932:	4b27      	ldr	r3, [pc, #156]	; (80149d0 <tcp_input+0x7f4>)
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014938:	4b26      	ldr	r3, [pc, #152]	; (80149d4 <tcp_input+0x7f8>)
 801493a:	2200      	movs	r2, #0
 801493c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801493e:	4b26      	ldr	r3, [pc, #152]	; (80149d8 <tcp_input+0x7fc>)
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d03f      	beq.n	80149c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014946:	4b24      	ldr	r3, [pc, #144]	; (80149d8 <tcp_input+0x7fc>)
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	4618      	mov	r0, r3
 801494c:	f7fd fe1e 	bl	801258c <pbuf_free>
      inseg.p = NULL;
 8014950:	4b21      	ldr	r3, [pc, #132]	; (80149d8 <tcp_input+0x7fc>)
 8014952:	2200      	movs	r2, #0
 8014954:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014956:	e036      	b.n	80149c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014958:	4b20      	ldr	r3, [pc, #128]	; (80149dc <tcp_input+0x800>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	899b      	ldrh	r3, [r3, #12]
 801495e:	b29b      	uxth	r3, r3
 8014960:	4618      	mov	r0, r3
 8014962:	f7fc fab6 	bl	8010ed2 <lwip_htons>
 8014966:	4603      	mov	r3, r0
 8014968:	b2db      	uxtb	r3, r3
 801496a:	f003 0304 	and.w	r3, r3, #4
 801496e:	2b00      	cmp	r3, #0
 8014970:	d118      	bne.n	80149a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014972:	4b1b      	ldr	r3, [pc, #108]	; (80149e0 <tcp_input+0x804>)
 8014974:	6819      	ldr	r1, [r3, #0]
 8014976:	4b1b      	ldr	r3, [pc, #108]	; (80149e4 <tcp_input+0x808>)
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	4b1a      	ldr	r3, [pc, #104]	; (80149e8 <tcp_input+0x80c>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014982:	4b16      	ldr	r3, [pc, #88]	; (80149dc <tcp_input+0x800>)
 8014984:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014986:	885b      	ldrh	r3, [r3, #2]
 8014988:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801498a:	4a14      	ldr	r2, [pc, #80]	; (80149dc <tcp_input+0x800>)
 801498c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801498e:	8812      	ldrh	r2, [r2, #0]
 8014990:	b292      	uxth	r2, r2
 8014992:	9202      	str	r2, [sp, #8]
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	4b15      	ldr	r3, [pc, #84]	; (80149ec <tcp_input+0x810>)
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	4b15      	ldr	r3, [pc, #84]	; (80149f0 <tcp_input+0x814>)
 801499c:	4602      	mov	r2, r0
 801499e:	2000      	movs	r0, #0
 80149a0:	f003 f81c 	bl	80179dc <tcp_rst>
    pbuf_free(p);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7fd fdf1 	bl	801258c <pbuf_free>
  return;
 80149aa:	e00c      	b.n	80149c6 <tcp_input+0x7ea>
    goto dropped;
 80149ac:	bf00      	nop
 80149ae:	e006      	b.n	80149be <tcp_input+0x7e2>
    goto dropped;
 80149b0:	bf00      	nop
 80149b2:	e004      	b.n	80149be <tcp_input+0x7e2>
    goto dropped;
 80149b4:	bf00      	nop
 80149b6:	e002      	b.n	80149be <tcp_input+0x7e2>
      goto dropped;
 80149b8:	bf00      	nop
 80149ba:	e000      	b.n	80149be <tcp_input+0x7e2>
      goto dropped;
 80149bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f7fd fde4 	bl	801258c <pbuf_free>
 80149c4:	e000      	b.n	80149c8 <tcp_input+0x7ec>
  return;
 80149c6:	bf00      	nop
}
 80149c8:	3724      	adds	r7, #36	; 0x24
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd90      	pop	{r4, r7, pc}
 80149ce:	bf00      	nop
 80149d0:	20008664 	.word	0x20008664
 80149d4:	20008660 	.word	0x20008660
 80149d8:	20008630 	.word	0x20008630
 80149dc:	20008640 	.word	0x20008640
 80149e0:	20008654 	.word	0x20008654
 80149e4:	2000865a 	.word	0x2000865a
 80149e8:	20008650 	.word	0x20008650
 80149ec:	200054f8 	.word	0x200054f8
 80149f0:	200054fc 	.word	0x200054fc

080149f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d106      	bne.n	8014a10 <tcp_input_delayed_close+0x1c>
 8014a02:	4b17      	ldr	r3, [pc, #92]	; (8014a60 <tcp_input_delayed_close+0x6c>)
 8014a04:	f240 225a 	movw	r2, #602	; 0x25a
 8014a08:	4916      	ldr	r1, [pc, #88]	; (8014a64 <tcp_input_delayed_close+0x70>)
 8014a0a:	4817      	ldr	r0, [pc, #92]	; (8014a68 <tcp_input_delayed_close+0x74>)
 8014a0c:	f006 ff42 	bl	801b894 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014a10:	4b16      	ldr	r3, [pc, #88]	; (8014a6c <tcp_input_delayed_close+0x78>)
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	f003 0310 	and.w	r3, r3, #16
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01c      	beq.n	8014a56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	8b5b      	ldrh	r3, [r3, #26]
 8014a20:	f003 0310 	and.w	r3, r3, #16
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d10d      	bne.n	8014a44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d008      	beq.n	8014a44 <tcp_input_delayed_close+0x50>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	6912      	ldr	r2, [r2, #16]
 8014a3c:	f06f 010e 	mvn.w	r1, #14
 8014a40:	4610      	mov	r0, r2
 8014a42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014a44:	6879      	ldr	r1, [r7, #4]
 8014a46:	480a      	ldr	r0, [pc, #40]	; (8014a70 <tcp_input_delayed_close+0x7c>)
 8014a48:	f7ff fa50 	bl	8013eec <tcp_pcb_remove>
    tcp_free(pcb);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7fe f83d 	bl	8012acc <tcp_free>
    return 1;
 8014a52:	2301      	movs	r3, #1
 8014a54:	e000      	b.n	8014a58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014a56:	2300      	movs	r3, #0
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3708      	adds	r7, #8
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	0801d990 	.word	0x0801d990
 8014a64:	0801db60 	.word	0x0801db60
 8014a68:	0801d9dc 	.word	0x0801d9dc
 8014a6c:	2000865d 	.word	0x2000865d
 8014a70:	20008624 	.word	0x20008624

08014a74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014a74:	b590      	push	{r4, r7, lr}
 8014a76:	b08b      	sub	sp, #44	; 0x2c
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014a7c:	4b6f      	ldr	r3, [pc, #444]	; (8014c3c <tcp_listen_input+0x1c8>)
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	f003 0304 	and.w	r3, r3, #4
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f040 80d2 	bne.w	8014c2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d106      	bne.n	8014a9e <tcp_listen_input+0x2a>
 8014a90:	4b6b      	ldr	r3, [pc, #428]	; (8014c40 <tcp_listen_input+0x1cc>)
 8014a92:	f240 2281 	movw	r2, #641	; 0x281
 8014a96:	496b      	ldr	r1, [pc, #428]	; (8014c44 <tcp_listen_input+0x1d0>)
 8014a98:	486b      	ldr	r0, [pc, #428]	; (8014c48 <tcp_listen_input+0x1d4>)
 8014a9a:	f006 fefb 	bl	801b894 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014a9e:	4b67      	ldr	r3, [pc, #412]	; (8014c3c <tcp_listen_input+0x1c8>)
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	f003 0310 	and.w	r3, r3, #16
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d019      	beq.n	8014ade <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aaa:	4b68      	ldr	r3, [pc, #416]	; (8014c4c <tcp_listen_input+0x1d8>)
 8014aac:	6819      	ldr	r1, [r3, #0]
 8014aae:	4b68      	ldr	r3, [pc, #416]	; (8014c50 <tcp_listen_input+0x1dc>)
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	4b67      	ldr	r3, [pc, #412]	; (8014c54 <tcp_listen_input+0x1e0>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014aba:	4b67      	ldr	r3, [pc, #412]	; (8014c58 <tcp_listen_input+0x1e4>)
 8014abc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014abe:	885b      	ldrh	r3, [r3, #2]
 8014ac0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ac2:	4a65      	ldr	r2, [pc, #404]	; (8014c58 <tcp_listen_input+0x1e4>)
 8014ac4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ac6:	8812      	ldrh	r2, [r2, #0]
 8014ac8:	b292      	uxth	r2, r2
 8014aca:	9202      	str	r2, [sp, #8]
 8014acc:	9301      	str	r3, [sp, #4]
 8014ace:	4b63      	ldr	r3, [pc, #396]	; (8014c5c <tcp_listen_input+0x1e8>)
 8014ad0:	9300      	str	r3, [sp, #0]
 8014ad2:	4b63      	ldr	r3, [pc, #396]	; (8014c60 <tcp_listen_input+0x1ec>)
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f002 ff80 	bl	80179dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014adc:	e0a9      	b.n	8014c32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014ade:	4b57      	ldr	r3, [pc, #348]	; (8014c3c <tcp_listen_input+0x1c8>)
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	f003 0302 	and.w	r3, r3, #2
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f000 80a3 	beq.w	8014c32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	7d5b      	ldrb	r3, [r3, #21]
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7ff f927 	bl	8013d44 <tcp_alloc>
 8014af6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d111      	bne.n	8014b22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	699b      	ldr	r3, [r3, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d00a      	beq.n	8014b1c <tcp_listen_input+0xa8>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	6910      	ldr	r0, [r2, #16]
 8014b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b12:	2100      	movs	r1, #0
 8014b14:	4798      	blx	r3
 8014b16:	4603      	mov	r3, r0
 8014b18:	73bb      	strb	r3, [r7, #14]
      return;
 8014b1a:	e08b      	b.n	8014c34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014b1c:	23f0      	movs	r3, #240	; 0xf0
 8014b1e:	73bb      	strb	r3, [r7, #14]
      return;
 8014b20:	e088      	b.n	8014c34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014b22:	4b50      	ldr	r3, [pc, #320]	; (8014c64 <tcp_listen_input+0x1f0>)
 8014b24:	695a      	ldr	r2, [r3, #20]
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014b2a:	4b4e      	ldr	r3, [pc, #312]	; (8014c64 <tcp_listen_input+0x1f0>)
 8014b2c:	691a      	ldr	r2, [r3, #16]
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	8ada      	ldrh	r2, [r3, #22]
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014b3a:	4b47      	ldr	r3, [pc, #284]	; (8014c58 <tcp_listen_input+0x1e4>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	881b      	ldrh	r3, [r3, #0]
 8014b40:	b29a      	uxth	r2, r3
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	2203      	movs	r2, #3
 8014b4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014b4c:	4b41      	ldr	r3, [pc, #260]	; (8014c54 <tcp_listen_input+0x1e0>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	1c5a      	adds	r2, r3, #1
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014b5e:	6978      	ldr	r0, [r7, #20]
 8014b60:	f7ff fa58 	bl	8014014 <tcp_next_iss>
 8014b64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	693a      	ldr	r2, [r7, #16]
 8014b6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	693a      	ldr	r2, [r7, #16]
 8014b70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	693a      	ldr	r2, [r7, #16]
 8014b76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	693a      	ldr	r2, [r7, #16]
 8014b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014b7e:	4b35      	ldr	r3, [pc, #212]	; (8014c54 <tcp_listen_input+0x1e0>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	1e5a      	subs	r2, r3, #1
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	691a      	ldr	r2, [r3, #16]
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	7a5b      	ldrb	r3, [r3, #9]
 8014b9a:	f003 030c 	and.w	r3, r3, #12
 8014b9e:	b2da      	uxtb	r2, r3
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	7a1a      	ldrb	r2, [r3, #8]
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014bac:	4b2e      	ldr	r3, [pc, #184]	; (8014c68 <tcp_listen_input+0x1f4>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	60da      	str	r2, [r3, #12]
 8014bb4:	4a2c      	ldr	r2, [pc, #176]	; (8014c68 <tcp_listen_input+0x1f4>)
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	f003 f8cf 	bl	8017d5c <tcp_timer_needed>
 8014bbe:	4b2b      	ldr	r3, [pc, #172]	; (8014c6c <tcp_listen_input+0x1f8>)
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014bc4:	6978      	ldr	r0, [r7, #20]
 8014bc6:	f001 fd8f 	bl	80166e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014bca:	4b23      	ldr	r3, [pc, #140]	; (8014c58 <tcp_listen_input+0x1e4>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	89db      	ldrh	r3, [r3, #14]
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	3304      	adds	r3, #4
 8014bec:	4618      	mov	r0, r3
 8014bee:	f004 fc93 	bl	8019518 <ip4_route>
 8014bf2:	4601      	mov	r1, r0
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	3304      	adds	r3, #4
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7ff fa30 	bl	8014060 <tcp_eff_send_mss_netif>
 8014c00:	4603      	mov	r3, r0
 8014c02:	461a      	mov	r2, r3
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014c08:	2112      	movs	r1, #18
 8014c0a:	6978      	ldr	r0, [r7, #20]
 8014c0c:	f002 f844 	bl	8016c98 <tcp_enqueue_flags>
 8014c10:	4603      	mov	r3, r0
 8014c12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d004      	beq.n	8014c26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	6978      	ldr	r0, [r7, #20]
 8014c20:	f7fe f97e 	bl	8012f20 <tcp_abandon>
      return;
 8014c24:	e006      	b.n	8014c34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014c26:	6978      	ldr	r0, [r7, #20]
 8014c28:	f002 f924 	bl	8016e74 <tcp_output>
  return;
 8014c2c:	e001      	b.n	8014c32 <tcp_listen_input+0x1be>
    return;
 8014c2e:	bf00      	nop
 8014c30:	e000      	b.n	8014c34 <tcp_listen_input+0x1c0>
  return;
 8014c32:	bf00      	nop
}
 8014c34:	371c      	adds	r7, #28
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd90      	pop	{r4, r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	2000865c 	.word	0x2000865c
 8014c40:	0801d990 	.word	0x0801d990
 8014c44:	0801db88 	.word	0x0801db88
 8014c48:	0801d9dc 	.word	0x0801d9dc
 8014c4c:	20008654 	.word	0x20008654
 8014c50:	2000865a 	.word	0x2000865a
 8014c54:	20008650 	.word	0x20008650
 8014c58:	20008640 	.word	0x20008640
 8014c5c:	200054f8 	.word	0x200054f8
 8014c60:	200054fc 	.word	0x200054fc
 8014c64:	200054e8 	.word	0x200054e8
 8014c68:	20008624 	.word	0x20008624
 8014c6c:	2000862c 	.word	0x2000862c

08014c70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b086      	sub	sp, #24
 8014c74:	af04      	add	r7, sp, #16
 8014c76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014c78:	4b2f      	ldr	r3, [pc, #188]	; (8014d38 <tcp_timewait_input+0xc8>)
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	f003 0304 	and.w	r3, r3, #4
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d153      	bne.n	8014d2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d106      	bne.n	8014c98 <tcp_timewait_input+0x28>
 8014c8a:	4b2c      	ldr	r3, [pc, #176]	; (8014d3c <tcp_timewait_input+0xcc>)
 8014c8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014c90:	492b      	ldr	r1, [pc, #172]	; (8014d40 <tcp_timewait_input+0xd0>)
 8014c92:	482c      	ldr	r0, [pc, #176]	; (8014d44 <tcp_timewait_input+0xd4>)
 8014c94:	f006 fdfe 	bl	801b894 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014c98:	4b27      	ldr	r3, [pc, #156]	; (8014d38 <tcp_timewait_input+0xc8>)
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	f003 0302 	and.w	r3, r3, #2
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d02a      	beq.n	8014cfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014ca4:	4b28      	ldr	r3, [pc, #160]	; (8014d48 <tcp_timewait_input+0xd8>)
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cac:	1ad3      	subs	r3, r2, r3
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	db2d      	blt.n	8014d0e <tcp_timewait_input+0x9e>
 8014cb2:	4b25      	ldr	r3, [pc, #148]	; (8014d48 <tcp_timewait_input+0xd8>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cba:	6879      	ldr	r1, [r7, #4]
 8014cbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cbe:	440b      	add	r3, r1
 8014cc0:	1ad3      	subs	r3, r2, r3
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	dc23      	bgt.n	8014d0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cc6:	4b21      	ldr	r3, [pc, #132]	; (8014d4c <tcp_timewait_input+0xdc>)
 8014cc8:	6819      	ldr	r1, [r3, #0]
 8014cca:	4b21      	ldr	r3, [pc, #132]	; (8014d50 <tcp_timewait_input+0xe0>)
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	4b1d      	ldr	r3, [pc, #116]	; (8014d48 <tcp_timewait_input+0xd8>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cd6:	4b1f      	ldr	r3, [pc, #124]	; (8014d54 <tcp_timewait_input+0xe4>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cda:	885b      	ldrh	r3, [r3, #2]
 8014cdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cde:	4a1d      	ldr	r2, [pc, #116]	; (8014d54 <tcp_timewait_input+0xe4>)
 8014ce0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ce2:	8812      	ldrh	r2, [r2, #0]
 8014ce4:	b292      	uxth	r2, r2
 8014ce6:	9202      	str	r2, [sp, #8]
 8014ce8:	9301      	str	r3, [sp, #4]
 8014cea:	4b1b      	ldr	r3, [pc, #108]	; (8014d58 <tcp_timewait_input+0xe8>)
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	4b1b      	ldr	r3, [pc, #108]	; (8014d5c <tcp_timewait_input+0xec>)
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f002 fe72 	bl	80179dc <tcp_rst>
      return;
 8014cf8:	e01b      	b.n	8014d32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014cfa:	4b0f      	ldr	r3, [pc, #60]	; (8014d38 <tcp_timewait_input+0xc8>)
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	f003 0301 	and.w	r3, r3, #1
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d003      	beq.n	8014d0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014d06:	4b16      	ldr	r3, [pc, #88]	; (8014d60 <tcp_timewait_input+0xf0>)
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014d0e:	4b10      	ldr	r3, [pc, #64]	; (8014d50 <tcp_timewait_input+0xe0>)
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00c      	beq.n	8014d30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	8b5b      	ldrh	r3, [r3, #26]
 8014d1a:	f043 0302 	orr.w	r3, r3, #2
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f002 f8a5 	bl	8016e74 <tcp_output>
  }
  return;
 8014d2a:	e001      	b.n	8014d30 <tcp_timewait_input+0xc0>
    return;
 8014d2c:	bf00      	nop
 8014d2e:	e000      	b.n	8014d32 <tcp_timewait_input+0xc2>
  return;
 8014d30:	bf00      	nop
}
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	2000865c 	.word	0x2000865c
 8014d3c:	0801d990 	.word	0x0801d990
 8014d40:	0801dba8 	.word	0x0801dba8
 8014d44:	0801d9dc 	.word	0x0801d9dc
 8014d48:	20008650 	.word	0x20008650
 8014d4c:	20008654 	.word	0x20008654
 8014d50:	2000865a 	.word	0x2000865a
 8014d54:	20008640 	.word	0x20008640
 8014d58:	200054f8 	.word	0x200054f8
 8014d5c:	200054fc 	.word	0x200054fc
 8014d60:	20008618 	.word	0x20008618

08014d64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014d64:	b590      	push	{r4, r7, lr}
 8014d66:	b08d      	sub	sp, #52	; 0x34
 8014d68:	af04      	add	r7, sp, #16
 8014d6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d106      	bne.n	8014d88 <tcp_process+0x24>
 8014d7a:	4b9d      	ldr	r3, [pc, #628]	; (8014ff0 <tcp_process+0x28c>)
 8014d7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014d80:	499c      	ldr	r1, [pc, #624]	; (8014ff4 <tcp_process+0x290>)
 8014d82:	489d      	ldr	r0, [pc, #628]	; (8014ff8 <tcp_process+0x294>)
 8014d84:	f006 fd86 	bl	801b894 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014d88:	4b9c      	ldr	r3, [pc, #624]	; (8014ffc <tcp_process+0x298>)
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	f003 0304 	and.w	r3, r3, #4
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d04e      	beq.n	8014e32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	7d1b      	ldrb	r3, [r3, #20]
 8014d98:	2b02      	cmp	r3, #2
 8014d9a:	d108      	bne.n	8014dae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014da0:	4b97      	ldr	r3, [pc, #604]	; (8015000 <tcp_process+0x29c>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d123      	bne.n	8014df0 <tcp_process+0x8c>
        acceptable = 1;
 8014da8:	2301      	movs	r3, #1
 8014daa:	76fb      	strb	r3, [r7, #27]
 8014dac:	e020      	b.n	8014df0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014db2:	4b94      	ldr	r3, [pc, #592]	; (8015004 <tcp_process+0x2a0>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d102      	bne.n	8014dc0 <tcp_process+0x5c>
        acceptable = 1;
 8014dba:	2301      	movs	r3, #1
 8014dbc:	76fb      	strb	r3, [r7, #27]
 8014dbe:	e017      	b.n	8014df0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014dc0:	4b90      	ldr	r3, [pc, #576]	; (8015004 <tcp_process+0x2a0>)
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	db10      	blt.n	8014df0 <tcp_process+0x8c>
 8014dce:	4b8d      	ldr	r3, [pc, #564]	; (8015004 <tcp_process+0x2a0>)
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd6:	6879      	ldr	r1, [r7, #4]
 8014dd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dda:	440b      	add	r3, r1
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	dc06      	bgt.n	8014df0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	8b5b      	ldrh	r3, [r3, #26]
 8014de6:	f043 0302 	orr.w	r3, r3, #2
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014df0:	7efb      	ldrb	r3, [r7, #27]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d01b      	beq.n	8014e2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7d1b      	ldrb	r3, [r3, #20]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d106      	bne.n	8014e0c <tcp_process+0xa8>
 8014dfe:	4b7c      	ldr	r3, [pc, #496]	; (8014ff0 <tcp_process+0x28c>)
 8014e00:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014e04:	4980      	ldr	r1, [pc, #512]	; (8015008 <tcp_process+0x2a4>)
 8014e06:	487c      	ldr	r0, [pc, #496]	; (8014ff8 <tcp_process+0x294>)
 8014e08:	f006 fd44 	bl	801b894 <iprintf>
      recv_flags |= TF_RESET;
 8014e0c:	4b7f      	ldr	r3, [pc, #508]	; (801500c <tcp_process+0x2a8>)
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	f043 0308 	orr.w	r3, r3, #8
 8014e14:	b2da      	uxtb	r2, r3
 8014e16:	4b7d      	ldr	r3, [pc, #500]	; (801500c <tcp_process+0x2a8>)
 8014e18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	8b5b      	ldrh	r3, [r3, #26]
 8014e1e:	f023 0301 	bic.w	r3, r3, #1
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014e28:	f06f 030d 	mvn.w	r3, #13
 8014e2c:	e37a      	b.n	8015524 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	e378      	b.n	8015524 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014e32:	4b72      	ldr	r3, [pc, #456]	; (8014ffc <tcp_process+0x298>)
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	f003 0302 	and.w	r3, r3, #2
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d010      	beq.n	8014e60 <tcp_process+0xfc>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	7d1b      	ldrb	r3, [r3, #20]
 8014e42:	2b02      	cmp	r3, #2
 8014e44:	d00c      	beq.n	8014e60 <tcp_process+0xfc>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	7d1b      	ldrb	r3, [r3, #20]
 8014e4a:	2b03      	cmp	r3, #3
 8014e4c:	d008      	beq.n	8014e60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	8b5b      	ldrh	r3, [r3, #26]
 8014e52:	f043 0302 	orr.w	r3, r3, #2
 8014e56:	b29a      	uxth	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	e361      	b.n	8015524 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	8b5b      	ldrh	r3, [r3, #26]
 8014e64:	f003 0310 	and.w	r3, r3, #16
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d103      	bne.n	8014e74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014e6c:	4b68      	ldr	r3, [pc, #416]	; (8015010 <tcp_process+0x2ac>)
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f001 fc2f 	bl	80166e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	7d1b      	ldrb	r3, [r3, #20]
 8014e8e:	3b02      	subs	r3, #2
 8014e90:	2b07      	cmp	r3, #7
 8014e92:	f200 8337 	bhi.w	8015504 <tcp_process+0x7a0>
 8014e96:	a201      	add	r2, pc, #4	; (adr r2, 8014e9c <tcp_process+0x138>)
 8014e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e9c:	08014ebd 	.word	0x08014ebd
 8014ea0:	080150ed 	.word	0x080150ed
 8014ea4:	08015265 	.word	0x08015265
 8014ea8:	0801528f 	.word	0x0801528f
 8014eac:	080153b3 	.word	0x080153b3
 8014eb0:	08015265 	.word	0x08015265
 8014eb4:	0801543f 	.word	0x0801543f
 8014eb8:	080154cf 	.word	0x080154cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014ebc:	4b4f      	ldr	r3, [pc, #316]	; (8014ffc <tcp_process+0x298>)
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	f003 0310 	and.w	r3, r3, #16
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	f000 80e4 	beq.w	8015092 <tcp_process+0x32e>
 8014eca:	4b4c      	ldr	r3, [pc, #304]	; (8014ffc <tcp_process+0x298>)
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	f003 0302 	and.w	r3, r3, #2
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 80dd 	beq.w	8015092 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014edc:	1c5a      	adds	r2, r3, #1
 8014ede:	4b48      	ldr	r3, [pc, #288]	; (8015000 <tcp_process+0x29c>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	f040 80d5 	bne.w	8015092 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014ee8:	4b46      	ldr	r3, [pc, #280]	; (8015004 <tcp_process+0x2a0>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	1c5a      	adds	r2, r3, #1
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014efa:	4b41      	ldr	r3, [pc, #260]	; (8015000 <tcp_process+0x29c>)
 8014efc:	681a      	ldr	r2, [r3, #0]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014f02:	4b44      	ldr	r3, [pc, #272]	; (8015014 <tcp_process+0x2b0>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	89db      	ldrh	r3, [r3, #14]
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014f1c:	4b39      	ldr	r3, [pc, #228]	; (8015004 <tcp_process+0x2a0>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	1e5a      	subs	r2, r3, #1
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2204      	movs	r2, #4
 8014f2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	3304      	adds	r3, #4
 8014f34:	4618      	mov	r0, r3
 8014f36:	f004 faef 	bl	8019518 <ip4_route>
 8014f3a:	4601      	mov	r1, r0
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3304      	adds	r3, #4
 8014f40:	461a      	mov	r2, r3
 8014f42:	4620      	mov	r0, r4
 8014f44:	f7ff f88c 	bl	8014060 <tcp_eff_send_mss_netif>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f54:	009a      	lsls	r2, r3, #2
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014f60:	428b      	cmp	r3, r1
 8014f62:	bf38      	it	cc
 8014f64:	460b      	movcc	r3, r1
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d204      	bcs.n	8014f74 <tcp_process+0x210>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	e00d      	b.n	8014f90 <tcp_process+0x22c>
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f78:	005b      	lsls	r3, r3, #1
 8014f7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	d904      	bls.n	8014f8c <tcp_process+0x228>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f86:	005b      	lsls	r3, r3, #1
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	e001      	b.n	8014f90 <tcp_process+0x22c>
 8014f8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d106      	bne.n	8014fae <tcp_process+0x24a>
 8014fa0:	4b13      	ldr	r3, [pc, #76]	; (8014ff0 <tcp_process+0x28c>)
 8014fa2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014fa6:	491c      	ldr	r1, [pc, #112]	; (8015018 <tcp_process+0x2b4>)
 8014fa8:	4813      	ldr	r0, [pc, #76]	; (8014ff8 <tcp_process+0x294>)
 8014faa:	f006 fc73 	bl	801b894 <iprintf>
        --pcb->snd_queuelen;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fb4:	3b01      	subs	r3, #1
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d12a      	bne.n	8015020 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d106      	bne.n	8014fe4 <tcp_process+0x280>
 8014fd6:	4b06      	ldr	r3, [pc, #24]	; (8014ff0 <tcp_process+0x28c>)
 8014fd8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014fdc:	490f      	ldr	r1, [pc, #60]	; (801501c <tcp_process+0x2b8>)
 8014fde:	4806      	ldr	r0, [pc, #24]	; (8014ff8 <tcp_process+0x294>)
 8014fe0:	f006 fc58 	bl	801b894 <iprintf>
          pcb->unsent = rseg->next;
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	66da      	str	r2, [r3, #108]	; 0x6c
 8014fec:	e01c      	b.n	8015028 <tcp_process+0x2c4>
 8014fee:	bf00      	nop
 8014ff0:	0801d990 	.word	0x0801d990
 8014ff4:	0801dbc8 	.word	0x0801dbc8
 8014ff8:	0801d9dc 	.word	0x0801d9dc
 8014ffc:	2000865c 	.word	0x2000865c
 8015000:	20008654 	.word	0x20008654
 8015004:	20008650 	.word	0x20008650
 8015008:	0801dbe4 	.word	0x0801dbe4
 801500c:	2000865d 	.word	0x2000865d
 8015010:	20008618 	.word	0x20008618
 8015014:	20008640 	.word	0x20008640
 8015018:	0801dc04 	.word	0x0801dc04
 801501c:	0801dc1c 	.word	0x0801dc1c
        } else {
          pcb->unacked = rseg->next;
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	681a      	ldr	r2, [r3, #0]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015028:	69f8      	ldr	r0, [r7, #28]
 801502a:	f7fe fd22 	bl	8013a72 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015032:	2b00      	cmp	r3, #0
 8015034:	d104      	bne.n	8015040 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801503c:	861a      	strh	r2, [r3, #48]	; 0x30
 801503e:	e006      	b.n	801504e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015054:	2b00      	cmp	r3, #0
 8015056:	d00a      	beq.n	801506e <tcp_process+0x30a>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	6910      	ldr	r0, [r2, #16]
 8015062:	2200      	movs	r2, #0
 8015064:	6879      	ldr	r1, [r7, #4]
 8015066:	4798      	blx	r3
 8015068:	4603      	mov	r3, r0
 801506a:	76bb      	strb	r3, [r7, #26]
 801506c:	e001      	b.n	8015072 <tcp_process+0x30e>
 801506e:	2300      	movs	r3, #0
 8015070:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015072:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015076:	f113 0f0d 	cmn.w	r3, #13
 801507a:	d102      	bne.n	8015082 <tcp_process+0x31e>
          return ERR_ABRT;
 801507c:	f06f 030c 	mvn.w	r3, #12
 8015080:	e250      	b.n	8015524 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	8b5b      	ldrh	r3, [r3, #26]
 8015086:	f043 0302 	orr.w	r3, r3, #2
 801508a:	b29a      	uxth	r2, r3
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015090:	e23a      	b.n	8015508 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015092:	4b98      	ldr	r3, [pc, #608]	; (80152f4 <tcp_process+0x590>)
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	f003 0310 	and.w	r3, r3, #16
 801509a:	2b00      	cmp	r3, #0
 801509c:	f000 8234 	beq.w	8015508 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a0:	4b95      	ldr	r3, [pc, #596]	; (80152f8 <tcp_process+0x594>)
 80150a2:	6819      	ldr	r1, [r3, #0]
 80150a4:	4b95      	ldr	r3, [pc, #596]	; (80152fc <tcp_process+0x598>)
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	461a      	mov	r2, r3
 80150aa:	4b95      	ldr	r3, [pc, #596]	; (8015300 <tcp_process+0x59c>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b0:	4b94      	ldr	r3, [pc, #592]	; (8015304 <tcp_process+0x5a0>)
 80150b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150b4:	885b      	ldrh	r3, [r3, #2]
 80150b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b8:	4a92      	ldr	r2, [pc, #584]	; (8015304 <tcp_process+0x5a0>)
 80150ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150bc:	8812      	ldrh	r2, [r2, #0]
 80150be:	b292      	uxth	r2, r2
 80150c0:	9202      	str	r2, [sp, #8]
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	4b90      	ldr	r3, [pc, #576]	; (8015308 <tcp_process+0x5a4>)
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	4b90      	ldr	r3, [pc, #576]	; (801530c <tcp_process+0x5a8>)
 80150ca:	4602      	mov	r2, r0
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f002 fc85 	bl	80179dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80150d8:	2b05      	cmp	r3, #5
 80150da:	f200 8215 	bhi.w	8015508 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2200      	movs	r2, #0
 80150e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f002 fa51 	bl	801758c <tcp_rexmit_rto>
      break;
 80150ea:	e20d      	b.n	8015508 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80150ec:	4b81      	ldr	r3, [pc, #516]	; (80152f4 <tcp_process+0x590>)
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	f003 0310 	and.w	r3, r3, #16
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f000 80a1 	beq.w	801523c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150fa:	4b7f      	ldr	r3, [pc, #508]	; (80152f8 <tcp_process+0x594>)
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015102:	1ad3      	subs	r3, r2, r3
 8015104:	3b01      	subs	r3, #1
 8015106:	2b00      	cmp	r3, #0
 8015108:	db7e      	blt.n	8015208 <tcp_process+0x4a4>
 801510a:	4b7b      	ldr	r3, [pc, #492]	; (80152f8 <tcp_process+0x594>)
 801510c:	681a      	ldr	r2, [r3, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015112:	1ad3      	subs	r3, r2, r3
 8015114:	2b00      	cmp	r3, #0
 8015116:	dc77      	bgt.n	8015208 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2204      	movs	r2, #4
 801511c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015122:	2b00      	cmp	r3, #0
 8015124:	d102      	bne.n	801512c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015126:	23fa      	movs	r3, #250	; 0xfa
 8015128:	76bb      	strb	r3, [r7, #26]
 801512a:	e01d      	b.n	8015168 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015130:	699b      	ldr	r3, [r3, #24]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d106      	bne.n	8015144 <tcp_process+0x3e0>
 8015136:	4b76      	ldr	r3, [pc, #472]	; (8015310 <tcp_process+0x5ac>)
 8015138:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801513c:	4975      	ldr	r1, [pc, #468]	; (8015314 <tcp_process+0x5b0>)
 801513e:	4876      	ldr	r0, [pc, #472]	; (8015318 <tcp_process+0x5b4>)
 8015140:	f006 fba8 	bl	801b894 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015148:	699b      	ldr	r3, [r3, #24]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d00a      	beq.n	8015164 <tcp_process+0x400>
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015152:	699b      	ldr	r3, [r3, #24]
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	6910      	ldr	r0, [r2, #16]
 8015158:	2200      	movs	r2, #0
 801515a:	6879      	ldr	r1, [r7, #4]
 801515c:	4798      	blx	r3
 801515e:	4603      	mov	r3, r0
 8015160:	76bb      	strb	r3, [r7, #26]
 8015162:	e001      	b.n	8015168 <tcp_process+0x404>
 8015164:	23f0      	movs	r3, #240	; 0xf0
 8015166:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015168:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00a      	beq.n	8015186 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015170:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015174:	f113 0f0d 	cmn.w	r3, #13
 8015178:	d002      	beq.n	8015180 <tcp_process+0x41c>
              tcp_abort(pcb);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f7fd ff8e 	bl	801309c <tcp_abort>
            }
            return ERR_ABRT;
 8015180:	f06f 030c 	mvn.w	r3, #12
 8015184:	e1ce      	b.n	8015524 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f000 fae0 	bl	801574c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801518c:	4b63      	ldr	r3, [pc, #396]	; (801531c <tcp_process+0x5b8>)
 801518e:	881b      	ldrh	r3, [r3, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d005      	beq.n	80151a0 <tcp_process+0x43c>
            recv_acked--;
 8015194:	4b61      	ldr	r3, [pc, #388]	; (801531c <tcp_process+0x5b8>)
 8015196:	881b      	ldrh	r3, [r3, #0]
 8015198:	3b01      	subs	r3, #1
 801519a:	b29a      	uxth	r2, r3
 801519c:	4b5f      	ldr	r3, [pc, #380]	; (801531c <tcp_process+0x5b8>)
 801519e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151a4:	009a      	lsls	r2, r3, #2
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151aa:	005b      	lsls	r3, r3, #1
 80151ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80151b0:	428b      	cmp	r3, r1
 80151b2:	bf38      	it	cc
 80151b4:	460b      	movcc	r3, r1
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d204      	bcs.n	80151c4 <tcp_process+0x460>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151be:	009b      	lsls	r3, r3, #2
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	e00d      	b.n	80151e0 <tcp_process+0x47c>
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d904      	bls.n	80151dc <tcp_process+0x478>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151d6:	005b      	lsls	r3, r3, #1
 80151d8:	b29b      	uxth	r3, r3
 80151da:	e001      	b.n	80151e0 <tcp_process+0x47c>
 80151dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80151e6:	4b4e      	ldr	r3, [pc, #312]	; (8015320 <tcp_process+0x5bc>)
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	f003 0320 	and.w	r3, r3, #32
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d037      	beq.n	8015262 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	8b5b      	ldrh	r3, [r3, #26]
 80151f6:	f043 0302 	orr.w	r3, r3, #2
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2207      	movs	r2, #7
 8015204:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015206:	e02c      	b.n	8015262 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015208:	4b3b      	ldr	r3, [pc, #236]	; (80152f8 <tcp_process+0x594>)
 801520a:	6819      	ldr	r1, [r3, #0]
 801520c:	4b3b      	ldr	r3, [pc, #236]	; (80152fc <tcp_process+0x598>)
 801520e:	881b      	ldrh	r3, [r3, #0]
 8015210:	461a      	mov	r2, r3
 8015212:	4b3b      	ldr	r3, [pc, #236]	; (8015300 <tcp_process+0x59c>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015218:	4b3a      	ldr	r3, [pc, #232]	; (8015304 <tcp_process+0x5a0>)
 801521a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801521c:	885b      	ldrh	r3, [r3, #2]
 801521e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015220:	4a38      	ldr	r2, [pc, #224]	; (8015304 <tcp_process+0x5a0>)
 8015222:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015224:	8812      	ldrh	r2, [r2, #0]
 8015226:	b292      	uxth	r2, r2
 8015228:	9202      	str	r2, [sp, #8]
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	4b36      	ldr	r3, [pc, #216]	; (8015308 <tcp_process+0x5a4>)
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	4b36      	ldr	r3, [pc, #216]	; (801530c <tcp_process+0x5a8>)
 8015232:	4602      	mov	r2, r0
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f002 fbd1 	bl	80179dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801523a:	e167      	b.n	801550c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801523c:	4b2d      	ldr	r3, [pc, #180]	; (80152f4 <tcp_process+0x590>)
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	f003 0302 	and.w	r3, r3, #2
 8015244:	2b00      	cmp	r3, #0
 8015246:	f000 8161 	beq.w	801550c <tcp_process+0x7a8>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801524e:	1e5a      	subs	r2, r3, #1
 8015250:	4b2b      	ldr	r3, [pc, #172]	; (8015300 <tcp_process+0x59c>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	429a      	cmp	r2, r3
 8015256:	f040 8159 	bne.w	801550c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f002 f9b8 	bl	80175d0 <tcp_rexmit>
      break;
 8015260:	e154      	b.n	801550c <tcp_process+0x7a8>
 8015262:	e153      	b.n	801550c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 fa71 	bl	801574c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801526a:	4b2d      	ldr	r3, [pc, #180]	; (8015320 <tcp_process+0x5bc>)
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	f003 0320 	and.w	r3, r3, #32
 8015272:	2b00      	cmp	r3, #0
 8015274:	f000 814c 	beq.w	8015510 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	8b5b      	ldrh	r3, [r3, #26]
 801527c:	f043 0302 	orr.w	r3, r3, #2
 8015280:	b29a      	uxth	r2, r3
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2207      	movs	r2, #7
 801528a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801528c:	e140      	b.n	8015510 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 fa5c 	bl	801574c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015294:	4b22      	ldr	r3, [pc, #136]	; (8015320 <tcp_process+0x5bc>)
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	f003 0320 	and.w	r3, r3, #32
 801529c:	2b00      	cmp	r3, #0
 801529e:	d071      	beq.n	8015384 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152a0:	4b14      	ldr	r3, [pc, #80]	; (80152f4 <tcp_process+0x590>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	f003 0310 	and.w	r3, r3, #16
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d060      	beq.n	801536e <tcp_process+0x60a>
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152b0:	4b11      	ldr	r3, [pc, #68]	; (80152f8 <tcp_process+0x594>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d15a      	bne.n	801536e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d156      	bne.n	801536e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	8b5b      	ldrh	r3, [r3, #26]
 80152c4:	f043 0302 	orr.w	r3, r3, #2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7fe fdbc 	bl	8013e4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80152d4:	4b13      	ldr	r3, [pc, #76]	; (8015324 <tcp_process+0x5c0>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d105      	bne.n	80152ea <tcp_process+0x586>
 80152de:	4b11      	ldr	r3, [pc, #68]	; (8015324 <tcp_process+0x5c0>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	4a0f      	ldr	r2, [pc, #60]	; (8015324 <tcp_process+0x5c0>)
 80152e6:	6013      	str	r3, [r2, #0]
 80152e8:	e02e      	b.n	8015348 <tcp_process+0x5e4>
 80152ea:	4b0e      	ldr	r3, [pc, #56]	; (8015324 <tcp_process+0x5c0>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	617b      	str	r3, [r7, #20]
 80152f0:	e027      	b.n	8015342 <tcp_process+0x5de>
 80152f2:	bf00      	nop
 80152f4:	2000865c 	.word	0x2000865c
 80152f8:	20008654 	.word	0x20008654
 80152fc:	2000865a 	.word	0x2000865a
 8015300:	20008650 	.word	0x20008650
 8015304:	20008640 	.word	0x20008640
 8015308:	200054f8 	.word	0x200054f8
 801530c:	200054fc 	.word	0x200054fc
 8015310:	0801d990 	.word	0x0801d990
 8015314:	0801dc30 	.word	0x0801dc30
 8015318:	0801d9dc 	.word	0x0801d9dc
 801531c:	20008658 	.word	0x20008658
 8015320:	2000865d 	.word	0x2000865d
 8015324:	20008624 	.word	0x20008624
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	429a      	cmp	r2, r3
 8015330:	d104      	bne.n	801533c <tcp_process+0x5d8>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	68da      	ldr	r2, [r3, #12]
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	60da      	str	r2, [r3, #12]
 801533a:	e005      	b.n	8015348 <tcp_process+0x5e4>
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	617b      	str	r3, [r7, #20]
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d1ef      	bne.n	8015328 <tcp_process+0x5c4>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2200      	movs	r2, #0
 801534c:	60da      	str	r2, [r3, #12]
 801534e:	4b77      	ldr	r3, [pc, #476]	; (801552c <tcp_process+0x7c8>)
 8015350:	2201      	movs	r2, #1
 8015352:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	220a      	movs	r2, #10
 8015358:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801535a:	4b75      	ldr	r3, [pc, #468]	; (8015530 <tcp_process+0x7cc>)
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	60da      	str	r2, [r3, #12]
 8015362:	4a73      	ldr	r2, [pc, #460]	; (8015530 <tcp_process+0x7cc>)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6013      	str	r3, [r2, #0]
 8015368:	f002 fcf8 	bl	8017d5c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801536c:	e0d2      	b.n	8015514 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	8b5b      	ldrh	r3, [r3, #26]
 8015372:	f043 0302 	orr.w	r3, r3, #2
 8015376:	b29a      	uxth	r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2208      	movs	r2, #8
 8015380:	751a      	strb	r2, [r3, #20]
      break;
 8015382:	e0c7      	b.n	8015514 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015384:	4b6b      	ldr	r3, [pc, #428]	; (8015534 <tcp_process+0x7d0>)
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	f003 0310 	and.w	r3, r3, #16
 801538c:	2b00      	cmp	r3, #0
 801538e:	f000 80c1 	beq.w	8015514 <tcp_process+0x7b0>
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015396:	4b68      	ldr	r3, [pc, #416]	; (8015538 <tcp_process+0x7d4>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	429a      	cmp	r2, r3
 801539c:	f040 80ba 	bne.w	8015514 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	f040 80b5 	bne.w	8015514 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2206      	movs	r2, #6
 80153ae:	751a      	strb	r2, [r3, #20]
      break;
 80153b0:	e0b0      	b.n	8015514 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f9ca 	bl	801574c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80153b8:	4b60      	ldr	r3, [pc, #384]	; (801553c <tcp_process+0x7d8>)
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	f003 0320 	and.w	r3, r3, #32
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	f000 80a9 	beq.w	8015518 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	8b5b      	ldrh	r3, [r3, #26]
 80153ca:	f043 0302 	orr.w	r3, r3, #2
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7fe fd39 	bl	8013e4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80153da:	4b59      	ldr	r3, [pc, #356]	; (8015540 <tcp_process+0x7dc>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d105      	bne.n	80153f0 <tcp_process+0x68c>
 80153e4:	4b56      	ldr	r3, [pc, #344]	; (8015540 <tcp_process+0x7dc>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	68db      	ldr	r3, [r3, #12]
 80153ea:	4a55      	ldr	r2, [pc, #340]	; (8015540 <tcp_process+0x7dc>)
 80153ec:	6013      	str	r3, [r2, #0]
 80153ee:	e013      	b.n	8015418 <tcp_process+0x6b4>
 80153f0:	4b53      	ldr	r3, [pc, #332]	; (8015540 <tcp_process+0x7dc>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	613b      	str	r3, [r7, #16]
 80153f6:	e00c      	b.n	8015412 <tcp_process+0x6ae>
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	687a      	ldr	r2, [r7, #4]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d104      	bne.n	801540c <tcp_process+0x6a8>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	68da      	ldr	r2, [r3, #12]
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	60da      	str	r2, [r3, #12]
 801540a:	e005      	b.n	8015418 <tcp_process+0x6b4>
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	68db      	ldr	r3, [r3, #12]
 8015410:	613b      	str	r3, [r7, #16]
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d1ef      	bne.n	80153f8 <tcp_process+0x694>
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2200      	movs	r2, #0
 801541c:	60da      	str	r2, [r3, #12]
 801541e:	4b43      	ldr	r3, [pc, #268]	; (801552c <tcp_process+0x7c8>)
 8015420:	2201      	movs	r2, #1
 8015422:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	220a      	movs	r2, #10
 8015428:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801542a:	4b41      	ldr	r3, [pc, #260]	; (8015530 <tcp_process+0x7cc>)
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	60da      	str	r2, [r3, #12]
 8015432:	4a3f      	ldr	r2, [pc, #252]	; (8015530 <tcp_process+0x7cc>)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6013      	str	r3, [r2, #0]
 8015438:	f002 fc90 	bl	8017d5c <tcp_timer_needed>
      }
      break;
 801543c:	e06c      	b.n	8015518 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 f984 	bl	801574c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015444:	4b3b      	ldr	r3, [pc, #236]	; (8015534 <tcp_process+0x7d0>)
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	f003 0310 	and.w	r3, r3, #16
 801544c:	2b00      	cmp	r3, #0
 801544e:	d065      	beq.n	801551c <tcp_process+0x7b8>
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015454:	4b38      	ldr	r3, [pc, #224]	; (8015538 <tcp_process+0x7d4>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	429a      	cmp	r2, r3
 801545a:	d15f      	bne.n	801551c <tcp_process+0x7b8>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015460:	2b00      	cmp	r3, #0
 8015462:	d15b      	bne.n	801551c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7fe fcf1 	bl	8013e4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801546a:	4b35      	ldr	r3, [pc, #212]	; (8015540 <tcp_process+0x7dc>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	429a      	cmp	r2, r3
 8015472:	d105      	bne.n	8015480 <tcp_process+0x71c>
 8015474:	4b32      	ldr	r3, [pc, #200]	; (8015540 <tcp_process+0x7dc>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	4a31      	ldr	r2, [pc, #196]	; (8015540 <tcp_process+0x7dc>)
 801547c:	6013      	str	r3, [r2, #0]
 801547e:	e013      	b.n	80154a8 <tcp_process+0x744>
 8015480:	4b2f      	ldr	r3, [pc, #188]	; (8015540 <tcp_process+0x7dc>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	60fb      	str	r3, [r7, #12]
 8015486:	e00c      	b.n	80154a2 <tcp_process+0x73e>
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	429a      	cmp	r2, r3
 8015490:	d104      	bne.n	801549c <tcp_process+0x738>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	68da      	ldr	r2, [r3, #12]
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	60da      	str	r2, [r3, #12]
 801549a:	e005      	b.n	80154a8 <tcp_process+0x744>
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	60fb      	str	r3, [r7, #12]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d1ef      	bne.n	8015488 <tcp_process+0x724>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	60da      	str	r2, [r3, #12]
 80154ae:	4b1f      	ldr	r3, [pc, #124]	; (801552c <tcp_process+0x7c8>)
 80154b0:	2201      	movs	r2, #1
 80154b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	220a      	movs	r2, #10
 80154b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80154ba:	4b1d      	ldr	r3, [pc, #116]	; (8015530 <tcp_process+0x7cc>)
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	60da      	str	r2, [r3, #12]
 80154c2:	4a1b      	ldr	r2, [pc, #108]	; (8015530 <tcp_process+0x7cc>)
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	f002 fc48 	bl	8017d5c <tcp_timer_needed>
      }
      break;
 80154cc:	e026      	b.n	801551c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f000 f93c 	bl	801574c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80154d4:	4b17      	ldr	r3, [pc, #92]	; (8015534 <tcp_process+0x7d0>)
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	f003 0310 	and.w	r3, r3, #16
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d01f      	beq.n	8015520 <tcp_process+0x7bc>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80154e4:	4b14      	ldr	r3, [pc, #80]	; (8015538 <tcp_process+0x7d4>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d119      	bne.n	8015520 <tcp_process+0x7bc>
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d115      	bne.n	8015520 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80154f4:	4b11      	ldr	r3, [pc, #68]	; (801553c <tcp_process+0x7d8>)
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	f043 0310 	orr.w	r3, r3, #16
 80154fc:	b2da      	uxtb	r2, r3
 80154fe:	4b0f      	ldr	r3, [pc, #60]	; (801553c <tcp_process+0x7d8>)
 8015500:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015502:	e00d      	b.n	8015520 <tcp_process+0x7bc>
    default:
      break;
 8015504:	bf00      	nop
 8015506:	e00c      	b.n	8015522 <tcp_process+0x7be>
      break;
 8015508:	bf00      	nop
 801550a:	e00a      	b.n	8015522 <tcp_process+0x7be>
      break;
 801550c:	bf00      	nop
 801550e:	e008      	b.n	8015522 <tcp_process+0x7be>
      break;
 8015510:	bf00      	nop
 8015512:	e006      	b.n	8015522 <tcp_process+0x7be>
      break;
 8015514:	bf00      	nop
 8015516:	e004      	b.n	8015522 <tcp_process+0x7be>
      break;
 8015518:	bf00      	nop
 801551a:	e002      	b.n	8015522 <tcp_process+0x7be>
      break;
 801551c:	bf00      	nop
 801551e:	e000      	b.n	8015522 <tcp_process+0x7be>
      break;
 8015520:	bf00      	nop
  }
  return ERR_OK;
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3724      	adds	r7, #36	; 0x24
 8015528:	46bd      	mov	sp, r7
 801552a:	bd90      	pop	{r4, r7, pc}
 801552c:	2000862c 	.word	0x2000862c
 8015530:	20008628 	.word	0x20008628
 8015534:	2000865c 	.word	0x2000865c
 8015538:	20008654 	.word	0x20008654
 801553c:	2000865d 	.word	0x2000865d
 8015540:	20008624 	.word	0x20008624

08015544 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015544:	b590      	push	{r4, r7, lr}
 8015546:	b085      	sub	sp, #20
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d106      	bne.n	8015562 <tcp_oos_insert_segment+0x1e>
 8015554:	4b3b      	ldr	r3, [pc, #236]	; (8015644 <tcp_oos_insert_segment+0x100>)
 8015556:	f240 421f 	movw	r2, #1055	; 0x41f
 801555a:	493b      	ldr	r1, [pc, #236]	; (8015648 <tcp_oos_insert_segment+0x104>)
 801555c:	483b      	ldr	r0, [pc, #236]	; (801564c <tcp_oos_insert_segment+0x108>)
 801555e:	f006 f999 	bl	801b894 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	68db      	ldr	r3, [r3, #12]
 8015566:	899b      	ldrh	r3, [r3, #12]
 8015568:	b29b      	uxth	r3, r3
 801556a:	4618      	mov	r0, r3
 801556c:	f7fb fcb1 	bl	8010ed2 <lwip_htons>
 8015570:	4603      	mov	r3, r0
 8015572:	b2db      	uxtb	r3, r3
 8015574:	f003 0301 	and.w	r3, r3, #1
 8015578:	2b00      	cmp	r3, #0
 801557a:	d028      	beq.n	80155ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801557c:	6838      	ldr	r0, [r7, #0]
 801557e:	f7fe fa63 	bl	8013a48 <tcp_segs_free>
    next = NULL;
 8015582:	2300      	movs	r3, #0
 8015584:	603b      	str	r3, [r7, #0]
 8015586:	e056      	b.n	8015636 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	899b      	ldrh	r3, [r3, #12]
 801558e:	b29b      	uxth	r3, r3
 8015590:	4618      	mov	r0, r3
 8015592:	f7fb fc9e 	bl	8010ed2 <lwip_htons>
 8015596:	4603      	mov	r3, r0
 8015598:	b2db      	uxtb	r3, r3
 801559a:	f003 0301 	and.w	r3, r3, #1
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d00d      	beq.n	80155be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	899b      	ldrh	r3, [r3, #12]
 80155a8:	b29c      	uxth	r4, r3
 80155aa:	2001      	movs	r0, #1
 80155ac:	f7fb fc91 	bl	8010ed2 <lwip_htons>
 80155b0:	4603      	mov	r3, r0
 80155b2:	461a      	mov	r2, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	4322      	orrs	r2, r4
 80155ba:	b292      	uxth	r2, r2
 80155bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f7fe fa52 	bl	8013a72 <tcp_seg_free>
    while (next &&
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00e      	beq.n	80155f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	891b      	ldrh	r3, [r3, #8]
 80155d8:	461a      	mov	r2, r3
 80155da:	4b1d      	ldr	r3, [pc, #116]	; (8015650 <tcp_oos_insert_segment+0x10c>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	441a      	add	r2, r3
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	6839      	ldr	r1, [r7, #0]
 80155e8:	8909      	ldrh	r1, [r1, #8]
 80155ea:	440b      	add	r3, r1
 80155ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	daca      	bge.n	8015588 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d01e      	beq.n	8015636 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	891b      	ldrh	r3, [r3, #8]
 80155fc:	461a      	mov	r2, r3
 80155fe:	4b14      	ldr	r3, [pc, #80]	; (8015650 <tcp_oos_insert_segment+0x10c>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	441a      	add	r2, r3
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801560c:	2b00      	cmp	r3, #0
 801560e:	dd12      	ble.n	8015636 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	b29a      	uxth	r2, r3
 8015618:	4b0d      	ldr	r3, [pc, #52]	; (8015650 <tcp_oos_insert_segment+0x10c>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	b29b      	uxth	r3, r3
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	891b      	ldrh	r3, [r3, #8]
 801562e:	4619      	mov	r1, r3
 8015630:	4610      	mov	r0, r2
 8015632:	f7fc fe25 	bl	8012280 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	683a      	ldr	r2, [r7, #0]
 801563a:	601a      	str	r2, [r3, #0]
}
 801563c:	bf00      	nop
 801563e:	3714      	adds	r7, #20
 8015640:	46bd      	mov	sp, r7
 8015642:	bd90      	pop	{r4, r7, pc}
 8015644:	0801d990 	.word	0x0801d990
 8015648:	0801dc50 	.word	0x0801dc50
 801564c:	0801d9dc 	.word	0x0801d9dc
 8015650:	20008650 	.word	0x20008650

08015654 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015654:	b5b0      	push	{r4, r5, r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
 8015660:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015662:	e03e      	b.n	80156e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7fd f812 	bl	801269c <pbuf_clen>
 8015678:	4603      	mov	r3, r0
 801567a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015682:	8a7a      	ldrh	r2, [r7, #18]
 8015684:	429a      	cmp	r2, r3
 8015686:	d906      	bls.n	8015696 <tcp_free_acked_segments+0x42>
 8015688:	4b2a      	ldr	r3, [pc, #168]	; (8015734 <tcp_free_acked_segments+0xe0>)
 801568a:	f240 4257 	movw	r2, #1111	; 0x457
 801568e:	492a      	ldr	r1, [pc, #168]	; (8015738 <tcp_free_acked_segments+0xe4>)
 8015690:	482a      	ldr	r0, [pc, #168]	; (801573c <tcp_free_acked_segments+0xe8>)
 8015692:	f006 f8ff 	bl	801b894 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801569c:	8a7b      	ldrh	r3, [r7, #18]
 801569e:	1ad3      	subs	r3, r2, r3
 80156a0:	b29a      	uxth	r2, r3
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	891a      	ldrh	r2, [r3, #8]
 80156ac:	4b24      	ldr	r3, [pc, #144]	; (8015740 <tcp_free_acked_segments+0xec>)
 80156ae:	881b      	ldrh	r3, [r3, #0]
 80156b0:	4413      	add	r3, r2
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	4b22      	ldr	r3, [pc, #136]	; (8015740 <tcp_free_acked_segments+0xec>)
 80156b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80156b8:	6978      	ldr	r0, [r7, #20]
 80156ba:	f7fe f9da 	bl	8013a72 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d00c      	beq.n	80156e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d109      	bne.n	80156e2 <tcp_free_acked_segments+0x8e>
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d106      	bne.n	80156e2 <tcp_free_acked_segments+0x8e>
 80156d4:	4b17      	ldr	r3, [pc, #92]	; (8015734 <tcp_free_acked_segments+0xe0>)
 80156d6:	f240 4261 	movw	r2, #1121	; 0x461
 80156da:	491a      	ldr	r1, [pc, #104]	; (8015744 <tcp_free_acked_segments+0xf0>)
 80156dc:	4817      	ldr	r0, [pc, #92]	; (801573c <tcp_free_acked_segments+0xe8>)
 80156de:	f006 f8d9 	bl	801b894 <iprintf>
  while (seg_list != NULL &&
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d020      	beq.n	801572a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fb fc04 	bl	8010efc <lwip_htonl>
 80156f4:	4604      	mov	r4, r0
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	891b      	ldrh	r3, [r3, #8]
 80156fa:	461d      	mov	r5, r3
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	899b      	ldrh	r3, [r3, #12]
 8015702:	b29b      	uxth	r3, r3
 8015704:	4618      	mov	r0, r3
 8015706:	f7fb fbe4 	bl	8010ed2 <lwip_htons>
 801570a:	4603      	mov	r3, r0
 801570c:	b2db      	uxtb	r3, r3
 801570e:	f003 0303 	and.w	r3, r3, #3
 8015712:	2b00      	cmp	r3, #0
 8015714:	d001      	beq.n	801571a <tcp_free_acked_segments+0xc6>
 8015716:	2301      	movs	r3, #1
 8015718:	e000      	b.n	801571c <tcp_free_acked_segments+0xc8>
 801571a:	2300      	movs	r3, #0
 801571c:	442b      	add	r3, r5
 801571e:	18e2      	adds	r2, r4, r3
 8015720:	4b09      	ldr	r3, [pc, #36]	; (8015748 <tcp_free_acked_segments+0xf4>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015726:	2b00      	cmp	r3, #0
 8015728:	dd9c      	ble.n	8015664 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801572a:	68bb      	ldr	r3, [r7, #8]
}
 801572c:	4618      	mov	r0, r3
 801572e:	3718      	adds	r7, #24
 8015730:	46bd      	mov	sp, r7
 8015732:	bdb0      	pop	{r4, r5, r7, pc}
 8015734:	0801d990 	.word	0x0801d990
 8015738:	0801dc78 	.word	0x0801dc78
 801573c:	0801d9dc 	.word	0x0801d9dc
 8015740:	20008658 	.word	0x20008658
 8015744:	0801dca0 	.word	0x0801dca0
 8015748:	20008654 	.word	0x20008654

0801574c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801574c:	b5b0      	push	{r4, r5, r7, lr}
 801574e:	b094      	sub	sp, #80	; 0x50
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015754:	2300      	movs	r3, #0
 8015756:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d106      	bne.n	801576c <tcp_receive+0x20>
 801575e:	4b91      	ldr	r3, [pc, #580]	; (80159a4 <tcp_receive+0x258>)
 8015760:	f240 427b 	movw	r2, #1147	; 0x47b
 8015764:	4990      	ldr	r1, [pc, #576]	; (80159a8 <tcp_receive+0x25c>)
 8015766:	4891      	ldr	r0, [pc, #580]	; (80159ac <tcp_receive+0x260>)
 8015768:	f006 f894 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	7d1b      	ldrb	r3, [r3, #20]
 8015770:	2b03      	cmp	r3, #3
 8015772:	d806      	bhi.n	8015782 <tcp_receive+0x36>
 8015774:	4b8b      	ldr	r3, [pc, #556]	; (80159a4 <tcp_receive+0x258>)
 8015776:	f240 427c 	movw	r2, #1148	; 0x47c
 801577a:	498d      	ldr	r1, [pc, #564]	; (80159b0 <tcp_receive+0x264>)
 801577c:	488b      	ldr	r0, [pc, #556]	; (80159ac <tcp_receive+0x260>)
 801577e:	f006 f889 	bl	801b894 <iprintf>

  if (flags & TCP_ACK) {
 8015782:	4b8c      	ldr	r3, [pc, #560]	; (80159b4 <tcp_receive+0x268>)
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	f003 0310 	and.w	r3, r3, #16
 801578a:	2b00      	cmp	r3, #0
 801578c:	f000 8264 	beq.w	8015c58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015796:	461a      	mov	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801579c:	4413      	add	r3, r2
 801579e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80157a4:	4b84      	ldr	r3, [pc, #528]	; (80159b8 <tcp_receive+0x26c>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	1ad3      	subs	r3, r2, r3
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	db1b      	blt.n	80157e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80157b2:	4b81      	ldr	r3, [pc, #516]	; (80159b8 <tcp_receive+0x26c>)
 80157b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80157b6:	429a      	cmp	r2, r3
 80157b8:	d106      	bne.n	80157c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80157be:	4b7f      	ldr	r3, [pc, #508]	; (80159bc <tcp_receive+0x270>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	db0e      	blt.n	80157e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80157cc:	4b7b      	ldr	r3, [pc, #492]	; (80159bc <tcp_receive+0x270>)
 80157ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d125      	bne.n	8015820 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80157d4:	4b7a      	ldr	r3, [pc, #488]	; (80159c0 <tcp_receive+0x274>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	89db      	ldrh	r3, [r3, #14]
 80157da:	b29a      	uxth	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d91c      	bls.n	8015820 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80157e6:	4b76      	ldr	r3, [pc, #472]	; (80159c0 <tcp_receive+0x274>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	89db      	ldrh	r3, [r3, #14]
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015800:	429a      	cmp	r2, r3
 8015802:	d205      	bcs.n	8015810 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015810:	4b69      	ldr	r3, [pc, #420]	; (80159b8 <tcp_receive+0x26c>)
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015818:	4b68      	ldr	r3, [pc, #416]	; (80159bc <tcp_receive+0x270>)
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015820:	4b66      	ldr	r3, [pc, #408]	; (80159bc <tcp_receive+0x270>)
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015828:	1ad3      	subs	r3, r2, r3
 801582a:	2b00      	cmp	r3, #0
 801582c:	dc58      	bgt.n	80158e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801582e:	4b65      	ldr	r3, [pc, #404]	; (80159c4 <tcp_receive+0x278>)
 8015830:	881b      	ldrh	r3, [r3, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d14b      	bne.n	80158ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015840:	4413      	add	r3, r2
 8015842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015844:	429a      	cmp	r2, r3
 8015846:	d142      	bne.n	80158ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801584e:	2b00      	cmp	r3, #0
 8015850:	db3d      	blt.n	80158ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015856:	4b59      	ldr	r3, [pc, #356]	; (80159bc <tcp_receive+0x270>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	429a      	cmp	r2, r3
 801585c:	d137      	bne.n	80158ce <tcp_receive+0x182>
              found_dupack = 1;
 801585e:	2301      	movs	r3, #1
 8015860:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015868:	2bff      	cmp	r3, #255	; 0xff
 801586a:	d007      	beq.n	801587c <tcp_receive+0x130>
                ++pcb->dupacks;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015872:	3301      	adds	r3, #1
 8015874:	b2da      	uxtb	r2, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015882:	2b03      	cmp	r3, #3
 8015884:	d91b      	bls.n	80158be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015890:	4413      	add	r3, r2
 8015892:	b29a      	uxth	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801589a:	429a      	cmp	r2, r3
 801589c:	d30a      	bcc.n	80158b4 <tcp_receive+0x168>
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158a8:	4413      	add	r3, r2
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80158b2:	e004      	b.n	80158be <tcp_receive+0x172>
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80158c4:	2b02      	cmp	r3, #2
 80158c6:	d902      	bls.n	80158ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f001 feed 	bl	80176a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80158ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f040 8161 	bne.w	8015b98 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2200      	movs	r2, #0
 80158da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80158de:	e15b      	b.n	8015b98 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80158e0:	4b36      	ldr	r3, [pc, #216]	; (80159bc <tcp_receive+0x270>)
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	3b01      	subs	r3, #1
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f2c0 814e 	blt.w	8015b8e <tcp_receive+0x442>
 80158f2:	4b32      	ldr	r3, [pc, #200]	; (80159bc <tcp_receive+0x270>)
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158fa:	1ad3      	subs	r3, r2, r3
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f300 8146 	bgt.w	8015b8e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	8b5b      	ldrh	r3, [r3, #26]
 8015906:	f003 0304 	and.w	r3, r3, #4
 801590a:	2b00      	cmp	r3, #0
 801590c:	d010      	beq.n	8015930 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	8b5b      	ldrh	r3, [r3, #26]
 8015912:	f023 0304 	bic.w	r3, r3, #4
 8015916:	b29a      	uxth	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2200      	movs	r2, #0
 801592c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2200      	movs	r2, #0
 8015934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801593e:	10db      	asrs	r3, r3, #3
 8015940:	b21b      	sxth	r3, r3
 8015942:	b29a      	uxth	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801594a:	b29b      	uxth	r3, r3
 801594c:	4413      	add	r3, r2
 801594e:	b29b      	uxth	r3, r3
 8015950:	b21a      	sxth	r2, r3
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015958:	4b18      	ldr	r3, [pc, #96]	; (80159bc <tcp_receive+0x270>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	b29a      	uxth	r2, r3
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015962:	b29b      	uxth	r3, r3
 8015964:	1ad3      	subs	r3, r2, r3
 8015966:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2200      	movs	r2, #0
 801596c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015970:	4b12      	ldr	r3, [pc, #72]	; (80159bc <tcp_receive+0x270>)
 8015972:	681a      	ldr	r2, [r3, #0]
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	7d1b      	ldrb	r3, [r3, #20]
 801597c:	2b03      	cmp	r3, #3
 801597e:	f240 8097 	bls.w	8015ab0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801598e:	429a      	cmp	r2, r3
 8015990:	d245      	bcs.n	8015a1e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	8b5b      	ldrh	r3, [r3, #26]
 8015996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801599a:	2b00      	cmp	r3, #0
 801599c:	d014      	beq.n	80159c8 <tcp_receive+0x27c>
 801599e:	2301      	movs	r3, #1
 80159a0:	e013      	b.n	80159ca <tcp_receive+0x27e>
 80159a2:	bf00      	nop
 80159a4:	0801d990 	.word	0x0801d990
 80159a8:	0801dcc0 	.word	0x0801dcc0
 80159ac:	0801d9dc 	.word	0x0801d9dc
 80159b0:	0801dcdc 	.word	0x0801dcdc
 80159b4:	2000865c 	.word	0x2000865c
 80159b8:	20008650 	.word	0x20008650
 80159bc:	20008654 	.word	0x20008654
 80159c0:	20008640 	.word	0x20008640
 80159c4:	2000865a 	.word	0x2000865a
 80159c8:	2302      	movs	r3, #2
 80159ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80159ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80159d2:	b29a      	uxth	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159d8:	fb12 f303 	smulbb	r3, r2, r3
 80159dc:	b29b      	uxth	r3, r3
 80159de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80159e0:	4293      	cmp	r3, r2
 80159e2:	bf28      	it	cs
 80159e4:	4613      	movcs	r3, r2
 80159e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80159f0:	4413      	add	r3, r2
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d309      	bcc.n	8015a12 <tcp_receive+0x2c6>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a06:	4413      	add	r3, r2
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015a10:	e04e      	b.n	8015ab0 <tcp_receive+0x364>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015a1c:	e048      	b.n	8015ab0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015a24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015a26:	4413      	add	r3, r2
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d309      	bcc.n	8015a48 <tcp_receive+0x2fc>
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015a3c:	4413      	add	r3, r2
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015a46:	e004      	b.n	8015a52 <tcp_receive+0x306>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d326      	bcc.n	8015ab0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a6e:	1ad3      	subs	r3, r2, r3
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a82:	4413      	add	r3, r2
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d30a      	bcc.n	8015aa6 <tcp_receive+0x35a>
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a9a:	4413      	add	r3, r2
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015aa4:	e004      	b.n	8015ab0 <tcp_receive+0x364>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015aac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ab8:	4a98      	ldr	r2, [pc, #608]	; (8015d1c <tcp_receive+0x5d0>)
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f7ff fdca 	bl	8015654 <tcp_free_acked_segments>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ace:	4a94      	ldr	r2, [pc, #592]	; (8015d20 <tcp_receive+0x5d4>)
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f7ff fdbf 	bl	8015654 <tcp_free_acked_segments>
 8015ad6:	4602      	mov	r2, r0
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d104      	bne.n	8015aee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015aea:	861a      	strh	r2, [r3, #48]	; 0x30
 8015aec:	e002      	b.n	8015af4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2200      	movs	r2, #0
 8015af2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2200      	movs	r2, #0
 8015af8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d103      	bne.n	8015b0a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2200      	movs	r2, #0
 8015b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015b10:	4b84      	ldr	r3, [pc, #528]	; (8015d24 <tcp_receive+0x5d8>)
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	4413      	add	r3, r2
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	8b5b      	ldrh	r3, [r3, #26]
 8015b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d035      	beq.n	8015b96 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d118      	bne.n	8015b64 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d00c      	beq.n	8015b54 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b42:	68db      	ldr	r3, [r3, #12]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7fb f9d8 	bl	8010efc <lwip_htonl>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	dc20      	bgt.n	8015b96 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	8b5b      	ldrh	r3, [r3, #26]
 8015b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b62:	e018      	b.n	8015b96 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fb f9c3 	bl	8010efc <lwip_htonl>
 8015b76:	4603      	mov	r3, r0
 8015b78:	1ae3      	subs	r3, r4, r3
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	dc0b      	bgt.n	8015b96 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	8b5b      	ldrh	r3, [r3, #26]
 8015b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015b86:	b29a      	uxth	r2, r3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b8c:	e003      	b.n	8015b96 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f001 ff74 	bl	8017a7c <tcp_send_empty_ack>
 8015b94:	e000      	b.n	8015b98 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b96:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d05b      	beq.n	8015c58 <tcp_receive+0x50c>
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ba4:	4b60      	ldr	r3, [pc, #384]	; (8015d28 <tcp_receive+0x5dc>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	1ad3      	subs	r3, r2, r3
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	da54      	bge.n	8015c58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015bae:	4b5f      	ldr	r3, [pc, #380]	; (8015d2c <tcp_receive+0x5e0>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015bc2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015bcc:	10db      	asrs	r3, r3, #3
 8015bce:	b21b      	sxth	r3, r3
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	1ad3      	subs	r3, r2, r3
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015be6:	4413      	add	r3, r2
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	b21a      	sxth	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015bf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	da05      	bge.n	8015c04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015bfc:	425b      	negs	r3, r3
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015c04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015c0e:	109b      	asrs	r3, r3, #2
 8015c10:	b21b      	sxth	r3, r3
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	1ad3      	subs	r3, r2, r3
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015c22:	b29a      	uxth	r2, r3
 8015c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015c28:	4413      	add	r3, r2
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	b21a      	sxth	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015c38:	10db      	asrs	r3, r3, #3
 8015c3a:	b21b      	sxth	r3, r3
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	4413      	add	r3, r2
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	b21a      	sxth	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2200      	movs	r2, #0
 8015c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015c58:	4b35      	ldr	r3, [pc, #212]	; (8015d30 <tcp_receive+0x5e4>)
 8015c5a:	881b      	ldrh	r3, [r3, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	f000 84e2 	beq.w	8016626 <tcp_receive+0xeda>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	7d1b      	ldrb	r3, [r3, #20]
 8015c66:	2b06      	cmp	r3, #6
 8015c68:	f200 84dd 	bhi.w	8016626 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c70:	4b30      	ldr	r3, [pc, #192]	; (8015d34 <tcp_receive+0x5e8>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	1ad3      	subs	r3, r2, r3
 8015c76:	3b01      	subs	r3, #1
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f2c0 808f 	blt.w	8015d9c <tcp_receive+0x650>
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c82:	4b2b      	ldr	r3, [pc, #172]	; (8015d30 <tcp_receive+0x5e4>)
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	4619      	mov	r1, r3
 8015c88:	4b2a      	ldr	r3, [pc, #168]	; (8015d34 <tcp_receive+0x5e8>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	440b      	add	r3, r1
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	3301      	adds	r3, #1
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f300 8082 	bgt.w	8015d9c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015c98:	4b27      	ldr	r3, [pc, #156]	; (8015d38 <tcp_receive+0x5ec>)
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ca2:	4b24      	ldr	r3, [pc, #144]	; (8015d34 <tcp_receive+0x5e8>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	1ad3      	subs	r3, r2, r3
 8015ca8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015caa:	4b23      	ldr	r3, [pc, #140]	; (8015d38 <tcp_receive+0x5ec>)
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d106      	bne.n	8015cc0 <tcp_receive+0x574>
 8015cb2:	4b22      	ldr	r3, [pc, #136]	; (8015d3c <tcp_receive+0x5f0>)
 8015cb4:	f240 5294 	movw	r2, #1428	; 0x594
 8015cb8:	4921      	ldr	r1, [pc, #132]	; (8015d40 <tcp_receive+0x5f4>)
 8015cba:	4822      	ldr	r0, [pc, #136]	; (8015d44 <tcp_receive+0x5f8>)
 8015cbc:	f005 fdea 	bl	801b894 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015cc6:	4293      	cmp	r3, r2
 8015cc8:	d906      	bls.n	8015cd8 <tcp_receive+0x58c>
 8015cca:	4b1c      	ldr	r3, [pc, #112]	; (8015d3c <tcp_receive+0x5f0>)
 8015ccc:	f240 5295 	movw	r2, #1429	; 0x595
 8015cd0:	491d      	ldr	r1, [pc, #116]	; (8015d48 <tcp_receive+0x5fc>)
 8015cd2:	481c      	ldr	r0, [pc, #112]	; (8015d44 <tcp_receive+0x5f8>)
 8015cd4:	f005 fdde 	bl	801b894 <iprintf>
      off = (u16_t)off32;
 8015cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015cde:	4b16      	ldr	r3, [pc, #88]	; (8015d38 <tcp_receive+0x5ec>)
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	891b      	ldrh	r3, [r3, #8]
 8015ce4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d906      	bls.n	8015cfa <tcp_receive+0x5ae>
 8015cec:	4b13      	ldr	r3, [pc, #76]	; (8015d3c <tcp_receive+0x5f0>)
 8015cee:	f240 5297 	movw	r2, #1431	; 0x597
 8015cf2:	4916      	ldr	r1, [pc, #88]	; (8015d4c <tcp_receive+0x600>)
 8015cf4:	4813      	ldr	r0, [pc, #76]	; (8015d44 <tcp_receive+0x5f8>)
 8015cf6:	f005 fdcd 	bl	801b894 <iprintf>
      inseg.len -= off;
 8015cfa:	4b0f      	ldr	r3, [pc, #60]	; (8015d38 <tcp_receive+0x5ec>)
 8015cfc:	891a      	ldrh	r2, [r3, #8]
 8015cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d02:	1ad3      	subs	r3, r2, r3
 8015d04:	b29a      	uxth	r2, r3
 8015d06:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <tcp_receive+0x5ec>)
 8015d08:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015d0a:	4b0b      	ldr	r3, [pc, #44]	; (8015d38 <tcp_receive+0x5ec>)
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	891a      	ldrh	r2, [r3, #8]
 8015d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015d18:	e02a      	b.n	8015d70 <tcp_receive+0x624>
 8015d1a:	bf00      	nop
 8015d1c:	0801dcf8 	.word	0x0801dcf8
 8015d20:	0801dd00 	.word	0x0801dd00
 8015d24:	20008658 	.word	0x20008658
 8015d28:	20008654 	.word	0x20008654
 8015d2c:	20008618 	.word	0x20008618
 8015d30:	2000865a 	.word	0x2000865a
 8015d34:	20008650 	.word	0x20008650
 8015d38:	20008630 	.word	0x20008630
 8015d3c:	0801d990 	.word	0x0801d990
 8015d40:	0801dd08 	.word	0x0801dd08
 8015d44:	0801d9dc 	.word	0x0801d9dc
 8015d48:	0801dd18 	.word	0x0801dd18
 8015d4c:	0801dd28 	.word	0x0801dd28
        off -= p->len;
 8015d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d52:	895b      	ldrh	r3, [r3, #10]
 8015d54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015d62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d66:	2200      	movs	r2, #0
 8015d68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d72:	895b      	ldrh	r3, [r3, #10]
 8015d74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d8e9      	bhi.n	8015d50 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d80:	4619      	mov	r1, r3
 8015d82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015d84:	f7fc fb7c 	bl	8012480 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d8c:	4a91      	ldr	r2, [pc, #580]	; (8015fd4 <tcp_receive+0x888>)
 8015d8e:	6013      	str	r3, [r2, #0]
 8015d90:	4b91      	ldr	r3, [pc, #580]	; (8015fd8 <tcp_receive+0x88c>)
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	4a8f      	ldr	r2, [pc, #572]	; (8015fd4 <tcp_receive+0x888>)
 8015d96:	6812      	ldr	r2, [r2, #0]
 8015d98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015d9a:	e00d      	b.n	8015db8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015d9c:	4b8d      	ldr	r3, [pc, #564]	; (8015fd4 <tcp_receive+0x888>)
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	da06      	bge.n	8015db8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	8b5b      	ldrh	r3, [r3, #26]
 8015dae:	f043 0302 	orr.w	r3, r3, #2
 8015db2:	b29a      	uxth	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015db8:	4b86      	ldr	r3, [pc, #536]	; (8015fd4 <tcp_receive+0x888>)
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dc0:	1ad3      	subs	r3, r2, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f2c0 842a 	blt.w	801661c <tcp_receive+0xed0>
 8015dc8:	4b82      	ldr	r3, [pc, #520]	; (8015fd4 <tcp_receive+0x888>)
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd0:	6879      	ldr	r1, [r7, #4]
 8015dd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015dd4:	440b      	add	r3, r1
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	3301      	adds	r3, #1
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	f300 841e 	bgt.w	801661c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015de4:	4b7b      	ldr	r3, [pc, #492]	; (8015fd4 <tcp_receive+0x888>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	f040 829a 	bne.w	8016322 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015dee:	4b7a      	ldr	r3, [pc, #488]	; (8015fd8 <tcp_receive+0x88c>)
 8015df0:	891c      	ldrh	r4, [r3, #8]
 8015df2:	4b79      	ldr	r3, [pc, #484]	; (8015fd8 <tcp_receive+0x88c>)
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	899b      	ldrh	r3, [r3, #12]
 8015df8:	b29b      	uxth	r3, r3
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fb f869 	bl	8010ed2 <lwip_htons>
 8015e00:	4603      	mov	r3, r0
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	f003 0303 	and.w	r3, r3, #3
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d001      	beq.n	8015e10 <tcp_receive+0x6c4>
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e000      	b.n	8015e12 <tcp_receive+0x6c6>
 8015e10:	2300      	movs	r3, #0
 8015e12:	4423      	add	r3, r4
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	4b71      	ldr	r3, [pc, #452]	; (8015fdc <tcp_receive+0x890>)
 8015e18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015e1e:	4b6f      	ldr	r3, [pc, #444]	; (8015fdc <tcp_receive+0x890>)
 8015e20:	881b      	ldrh	r3, [r3, #0]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d275      	bcs.n	8015f12 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e26:	4b6c      	ldr	r3, [pc, #432]	; (8015fd8 <tcp_receive+0x88c>)
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	899b      	ldrh	r3, [r3, #12]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fb f84f 	bl	8010ed2 <lwip_htons>
 8015e34:	4603      	mov	r3, r0
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d01f      	beq.n	8015e80 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015e40:	4b65      	ldr	r3, [pc, #404]	; (8015fd8 <tcp_receive+0x88c>)
 8015e42:	68db      	ldr	r3, [r3, #12]
 8015e44:	899b      	ldrh	r3, [r3, #12]
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	b21b      	sxth	r3, r3
 8015e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015e4e:	b21c      	sxth	r4, r3
 8015e50:	4b61      	ldr	r3, [pc, #388]	; (8015fd8 <tcp_receive+0x88c>)
 8015e52:	68db      	ldr	r3, [r3, #12]
 8015e54:	899b      	ldrh	r3, [r3, #12]
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7fb f83a 	bl	8010ed2 <lwip_htons>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fb f831 	bl	8010ed2 <lwip_htons>
 8015e70:	4603      	mov	r3, r0
 8015e72:	b21b      	sxth	r3, r3
 8015e74:	4323      	orrs	r3, r4
 8015e76:	b21a      	sxth	r2, r3
 8015e78:	4b57      	ldr	r3, [pc, #348]	; (8015fd8 <tcp_receive+0x88c>)
 8015e7a:	68db      	ldr	r3, [r3, #12]
 8015e7c:	b292      	uxth	r2, r2
 8015e7e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015e84:	4b54      	ldr	r3, [pc, #336]	; (8015fd8 <tcp_receive+0x88c>)
 8015e86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015e88:	4b53      	ldr	r3, [pc, #332]	; (8015fd8 <tcp_receive+0x88c>)
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	899b      	ldrh	r3, [r3, #12]
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fb f81e 	bl	8010ed2 <lwip_htons>
 8015e96:	4603      	mov	r3, r0
 8015e98:	b2db      	uxtb	r3, r3
 8015e9a:	f003 0302 	and.w	r3, r3, #2
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d005      	beq.n	8015eae <tcp_receive+0x762>
            inseg.len -= 1;
 8015ea2:	4b4d      	ldr	r3, [pc, #308]	; (8015fd8 <tcp_receive+0x88c>)
 8015ea4:	891b      	ldrh	r3, [r3, #8]
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	b29a      	uxth	r2, r3
 8015eaa:	4b4b      	ldr	r3, [pc, #300]	; (8015fd8 <tcp_receive+0x88c>)
 8015eac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015eae:	4b4a      	ldr	r3, [pc, #296]	; (8015fd8 <tcp_receive+0x88c>)
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	4a49      	ldr	r2, [pc, #292]	; (8015fd8 <tcp_receive+0x88c>)
 8015eb4:	8912      	ldrh	r2, [r2, #8]
 8015eb6:	4611      	mov	r1, r2
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fc f9e1 	bl	8012280 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015ebe:	4b46      	ldr	r3, [pc, #280]	; (8015fd8 <tcp_receive+0x88c>)
 8015ec0:	891c      	ldrh	r4, [r3, #8]
 8015ec2:	4b45      	ldr	r3, [pc, #276]	; (8015fd8 <tcp_receive+0x88c>)
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	899b      	ldrh	r3, [r3, #12]
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fb f801 	bl	8010ed2 <lwip_htons>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	f003 0303 	and.w	r3, r3, #3
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d001      	beq.n	8015ee0 <tcp_receive+0x794>
 8015edc:	2301      	movs	r3, #1
 8015ede:	e000      	b.n	8015ee2 <tcp_receive+0x796>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	4423      	add	r3, r4
 8015ee4:	b29a      	uxth	r2, r3
 8015ee6:	4b3d      	ldr	r3, [pc, #244]	; (8015fdc <tcp_receive+0x890>)
 8015ee8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015eea:	4b3c      	ldr	r3, [pc, #240]	; (8015fdc <tcp_receive+0x890>)
 8015eec:	881b      	ldrh	r3, [r3, #0]
 8015eee:	461a      	mov	r2, r3
 8015ef0:	4b38      	ldr	r3, [pc, #224]	; (8015fd4 <tcp_receive+0x888>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	441a      	add	r2, r3
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015efa:	6879      	ldr	r1, [r7, #4]
 8015efc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015efe:	440b      	add	r3, r1
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d006      	beq.n	8015f12 <tcp_receive+0x7c6>
 8015f04:	4b36      	ldr	r3, [pc, #216]	; (8015fe0 <tcp_receive+0x894>)
 8015f06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015f0a:	4936      	ldr	r1, [pc, #216]	; (8015fe4 <tcp_receive+0x898>)
 8015f0c:	4836      	ldr	r0, [pc, #216]	; (8015fe8 <tcp_receive+0x89c>)
 8015f0e:	f005 fcc1 	bl	801b894 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	f000 80e7 	beq.w	80160ea <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f1c:	4b2e      	ldr	r3, [pc, #184]	; (8015fd8 <tcp_receive+0x88c>)
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	899b      	ldrh	r3, [r3, #12]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7fa ffd4 	bl	8010ed2 <lwip_htons>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	b2db      	uxtb	r3, r3
 8015f2e:	f003 0301 	and.w	r3, r3, #1
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d010      	beq.n	8015f58 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015f36:	e00a      	b.n	8015f4e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f42:	681a      	ldr	r2, [r3, #0]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7fd fd92 	bl	8013a72 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1f0      	bne.n	8015f38 <tcp_receive+0x7ec>
 8015f56:	e0c8      	b.n	80160ea <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015f5e:	e052      	b.n	8016006 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	899b      	ldrh	r3, [r3, #12]
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7fa ffb2 	bl	8010ed2 <lwip_htons>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	b2db      	uxtb	r3, r3
 8015f72:	f003 0301 	and.w	r3, r3, #1
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d03d      	beq.n	8015ff6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015f7a:	4b17      	ldr	r3, [pc, #92]	; (8015fd8 <tcp_receive+0x88c>)
 8015f7c:	68db      	ldr	r3, [r3, #12]
 8015f7e:	899b      	ldrh	r3, [r3, #12]
 8015f80:	b29b      	uxth	r3, r3
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fa ffa5 	bl	8010ed2 <lwip_htons>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d130      	bne.n	8015ff6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015f94:	4b10      	ldr	r3, [pc, #64]	; (8015fd8 <tcp_receive+0x88c>)
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	899b      	ldrh	r3, [r3, #12]
 8015f9a:	b29c      	uxth	r4, r3
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	f7fa ff98 	bl	8010ed2 <lwip_htons>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	4b0c      	ldr	r3, [pc, #48]	; (8015fd8 <tcp_receive+0x88c>)
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	4322      	orrs	r2, r4
 8015fac:	b292      	uxth	r2, r2
 8015fae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015fb0:	4b09      	ldr	r3, [pc, #36]	; (8015fd8 <tcp_receive+0x88c>)
 8015fb2:	891c      	ldrh	r4, [r3, #8]
 8015fb4:	4b08      	ldr	r3, [pc, #32]	; (8015fd8 <tcp_receive+0x88c>)
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	899b      	ldrh	r3, [r3, #12]
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7fa ff88 	bl	8010ed2 <lwip_htons>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	f003 0303 	and.w	r3, r3, #3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d00e      	beq.n	8015fec <tcp_receive+0x8a0>
 8015fce:	2301      	movs	r3, #1
 8015fd0:	e00d      	b.n	8015fee <tcp_receive+0x8a2>
 8015fd2:	bf00      	nop
 8015fd4:	20008650 	.word	0x20008650
 8015fd8:	20008630 	.word	0x20008630
 8015fdc:	2000865a 	.word	0x2000865a
 8015fe0:	0801d990 	.word	0x0801d990
 8015fe4:	0801dd38 	.word	0x0801dd38
 8015fe8:	0801d9dc 	.word	0x0801d9dc
 8015fec:	2300      	movs	r3, #0
 8015fee:	4423      	add	r3, r4
 8015ff0:	b29a      	uxth	r2, r3
 8015ff2:	4b98      	ldr	r3, [pc, #608]	; (8016254 <tcp_receive+0xb08>)
 8015ff4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ff8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016000:	6938      	ldr	r0, [r7, #16]
 8016002:	f7fd fd36 	bl	8013a72 <tcp_seg_free>
            while (next &&
 8016006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016008:	2b00      	cmp	r3, #0
 801600a:	d00e      	beq.n	801602a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801600c:	4b91      	ldr	r3, [pc, #580]	; (8016254 <tcp_receive+0xb08>)
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	4b91      	ldr	r3, [pc, #580]	; (8016258 <tcp_receive+0xb0c>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	441a      	add	r2, r3
 8016018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016020:	8909      	ldrh	r1, [r1, #8]
 8016022:	440b      	add	r3, r1
 8016024:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016026:	2b00      	cmp	r3, #0
 8016028:	da9a      	bge.n	8015f60 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801602c:	2b00      	cmp	r3, #0
 801602e:	d059      	beq.n	80160e4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016030:	4b88      	ldr	r3, [pc, #544]	; (8016254 <tcp_receive+0xb08>)
 8016032:	881b      	ldrh	r3, [r3, #0]
 8016034:	461a      	mov	r2, r3
 8016036:	4b88      	ldr	r3, [pc, #544]	; (8016258 <tcp_receive+0xb0c>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	441a      	add	r2, r3
 801603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801603e:	68db      	ldr	r3, [r3, #12]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016044:	2b00      	cmp	r3, #0
 8016046:	dd4d      	ble.n	80160e4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801604a:	68db      	ldr	r3, [r3, #12]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	b29a      	uxth	r2, r3
 8016050:	4b81      	ldr	r3, [pc, #516]	; (8016258 <tcp_receive+0xb0c>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	b29b      	uxth	r3, r3
 8016056:	1ad3      	subs	r3, r2, r3
 8016058:	b29a      	uxth	r2, r3
 801605a:	4b80      	ldr	r3, [pc, #512]	; (801625c <tcp_receive+0xb10>)
 801605c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801605e:	4b7f      	ldr	r3, [pc, #508]	; (801625c <tcp_receive+0xb10>)
 8016060:	68db      	ldr	r3, [r3, #12]
 8016062:	899b      	ldrh	r3, [r3, #12]
 8016064:	b29b      	uxth	r3, r3
 8016066:	4618      	mov	r0, r3
 8016068:	f7fa ff33 	bl	8010ed2 <lwip_htons>
 801606c:	4603      	mov	r3, r0
 801606e:	b2db      	uxtb	r3, r3
 8016070:	f003 0302 	and.w	r3, r3, #2
 8016074:	2b00      	cmp	r3, #0
 8016076:	d005      	beq.n	8016084 <tcp_receive+0x938>
                inseg.len -= 1;
 8016078:	4b78      	ldr	r3, [pc, #480]	; (801625c <tcp_receive+0xb10>)
 801607a:	891b      	ldrh	r3, [r3, #8]
 801607c:	3b01      	subs	r3, #1
 801607e:	b29a      	uxth	r2, r3
 8016080:	4b76      	ldr	r3, [pc, #472]	; (801625c <tcp_receive+0xb10>)
 8016082:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016084:	4b75      	ldr	r3, [pc, #468]	; (801625c <tcp_receive+0xb10>)
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	4a74      	ldr	r2, [pc, #464]	; (801625c <tcp_receive+0xb10>)
 801608a:	8912      	ldrh	r2, [r2, #8]
 801608c:	4611      	mov	r1, r2
 801608e:	4618      	mov	r0, r3
 8016090:	f7fc f8f6 	bl	8012280 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016094:	4b71      	ldr	r3, [pc, #452]	; (801625c <tcp_receive+0xb10>)
 8016096:	891c      	ldrh	r4, [r3, #8]
 8016098:	4b70      	ldr	r3, [pc, #448]	; (801625c <tcp_receive+0xb10>)
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	899b      	ldrh	r3, [r3, #12]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fa ff16 	bl	8010ed2 <lwip_htons>
 80160a6:	4603      	mov	r3, r0
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	f003 0303 	and.w	r3, r3, #3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d001      	beq.n	80160b6 <tcp_receive+0x96a>
 80160b2:	2301      	movs	r3, #1
 80160b4:	e000      	b.n	80160b8 <tcp_receive+0x96c>
 80160b6:	2300      	movs	r3, #0
 80160b8:	4423      	add	r3, r4
 80160ba:	b29a      	uxth	r2, r3
 80160bc:	4b65      	ldr	r3, [pc, #404]	; (8016254 <tcp_receive+0xb08>)
 80160be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80160c0:	4b64      	ldr	r3, [pc, #400]	; (8016254 <tcp_receive+0xb08>)
 80160c2:	881b      	ldrh	r3, [r3, #0]
 80160c4:	461a      	mov	r2, r3
 80160c6:	4b64      	ldr	r3, [pc, #400]	; (8016258 <tcp_receive+0xb0c>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	441a      	add	r2, r3
 80160cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d006      	beq.n	80160e4 <tcp_receive+0x998>
 80160d6:	4b62      	ldr	r3, [pc, #392]	; (8016260 <tcp_receive+0xb14>)
 80160d8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80160dc:	4961      	ldr	r1, [pc, #388]	; (8016264 <tcp_receive+0xb18>)
 80160de:	4862      	ldr	r0, [pc, #392]	; (8016268 <tcp_receive+0xb1c>)
 80160e0:	f005 fbd8 	bl	801b894 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80160e8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80160ea:	4b5a      	ldr	r3, [pc, #360]	; (8016254 <tcp_receive+0xb08>)
 80160ec:	881b      	ldrh	r3, [r3, #0]
 80160ee:	461a      	mov	r2, r3
 80160f0:	4b59      	ldr	r3, [pc, #356]	; (8016258 <tcp_receive+0xb0c>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	441a      	add	r2, r3
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80160fe:	4b55      	ldr	r3, [pc, #340]	; (8016254 <tcp_receive+0xb08>)
 8016100:	881b      	ldrh	r3, [r3, #0]
 8016102:	429a      	cmp	r2, r3
 8016104:	d206      	bcs.n	8016114 <tcp_receive+0x9c8>
 8016106:	4b56      	ldr	r3, [pc, #344]	; (8016260 <tcp_receive+0xb14>)
 8016108:	f240 6207 	movw	r2, #1543	; 0x607
 801610c:	4957      	ldr	r1, [pc, #348]	; (801626c <tcp_receive+0xb20>)
 801610e:	4856      	ldr	r0, [pc, #344]	; (8016268 <tcp_receive+0xb1c>)
 8016110:	f005 fbc0 	bl	801b894 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016118:	4b4e      	ldr	r3, [pc, #312]	; (8016254 <tcp_receive+0xb08>)
 801611a:	881b      	ldrh	r3, [r3, #0]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	b29a      	uxth	r2, r3
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f7fc ffc5 	bl	80130b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801612a:	4b4c      	ldr	r3, [pc, #304]	; (801625c <tcp_receive+0xb10>)
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	891b      	ldrh	r3, [r3, #8]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016134:	4b49      	ldr	r3, [pc, #292]	; (801625c <tcp_receive+0xb10>)
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	4a4d      	ldr	r2, [pc, #308]	; (8016270 <tcp_receive+0xb24>)
 801613a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801613c:	4b47      	ldr	r3, [pc, #284]	; (801625c <tcp_receive+0xb10>)
 801613e:	2200      	movs	r2, #0
 8016140:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016142:	4b46      	ldr	r3, [pc, #280]	; (801625c <tcp_receive+0xb10>)
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	899b      	ldrh	r3, [r3, #12]
 8016148:	b29b      	uxth	r3, r3
 801614a:	4618      	mov	r0, r3
 801614c:	f7fa fec1 	bl	8010ed2 <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	b2db      	uxtb	r3, r3
 8016154:	f003 0301 	and.w	r3, r3, #1
 8016158:	2b00      	cmp	r3, #0
 801615a:	f000 80b8 	beq.w	80162ce <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801615e:	4b45      	ldr	r3, [pc, #276]	; (8016274 <tcp_receive+0xb28>)
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	f043 0320 	orr.w	r3, r3, #32
 8016166:	b2da      	uxtb	r2, r3
 8016168:	4b42      	ldr	r3, [pc, #264]	; (8016274 <tcp_receive+0xb28>)
 801616a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801616c:	e0af      	b.n	80162ce <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016172:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	4a36      	ldr	r2, [pc, #216]	; (8016258 <tcp_receive+0xb0c>)
 801617e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	891b      	ldrh	r3, [r3, #8]
 8016184:	461c      	mov	r4, r3
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	68db      	ldr	r3, [r3, #12]
 801618a:	899b      	ldrh	r3, [r3, #12]
 801618c:	b29b      	uxth	r3, r3
 801618e:	4618      	mov	r0, r3
 8016190:	f7fa fe9f 	bl	8010ed2 <lwip_htons>
 8016194:	4603      	mov	r3, r0
 8016196:	b2db      	uxtb	r3, r3
 8016198:	f003 0303 	and.w	r3, r3, #3
 801619c:	2b00      	cmp	r3, #0
 801619e:	d001      	beq.n	80161a4 <tcp_receive+0xa58>
 80161a0:	2301      	movs	r3, #1
 80161a2:	e000      	b.n	80161a6 <tcp_receive+0xa5a>
 80161a4:	2300      	movs	r3, #0
 80161a6:	191a      	adds	r2, r3, r4
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ac:	441a      	add	r2, r3
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161b6:	461c      	mov	r4, r3
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	891b      	ldrh	r3, [r3, #8]
 80161bc:	461d      	mov	r5, r3
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	899b      	ldrh	r3, [r3, #12]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7fa fe83 	bl	8010ed2 <lwip_htons>
 80161cc:	4603      	mov	r3, r0
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	f003 0303 	and.w	r3, r3, #3
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d001      	beq.n	80161dc <tcp_receive+0xa90>
 80161d8:	2301      	movs	r3, #1
 80161da:	e000      	b.n	80161de <tcp_receive+0xa92>
 80161dc:	2300      	movs	r3, #0
 80161de:	442b      	add	r3, r5
 80161e0:	429c      	cmp	r4, r3
 80161e2:	d206      	bcs.n	80161f2 <tcp_receive+0xaa6>
 80161e4:	4b1e      	ldr	r3, [pc, #120]	; (8016260 <tcp_receive+0xb14>)
 80161e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80161ea:	4923      	ldr	r1, [pc, #140]	; (8016278 <tcp_receive+0xb2c>)
 80161ec:	481e      	ldr	r0, [pc, #120]	; (8016268 <tcp_receive+0xb1c>)
 80161ee:	f005 fb51 	bl	801b894 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	891b      	ldrh	r3, [r3, #8]
 80161f6:	461c      	mov	r4, r3
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	68db      	ldr	r3, [r3, #12]
 80161fc:	899b      	ldrh	r3, [r3, #12]
 80161fe:	b29b      	uxth	r3, r3
 8016200:	4618      	mov	r0, r3
 8016202:	f7fa fe66 	bl	8010ed2 <lwip_htons>
 8016206:	4603      	mov	r3, r0
 8016208:	b2db      	uxtb	r3, r3
 801620a:	f003 0303 	and.w	r3, r3, #3
 801620e:	2b00      	cmp	r3, #0
 8016210:	d001      	beq.n	8016216 <tcp_receive+0xaca>
 8016212:	2301      	movs	r3, #1
 8016214:	e000      	b.n	8016218 <tcp_receive+0xacc>
 8016216:	2300      	movs	r3, #0
 8016218:	1919      	adds	r1, r3, r4
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801621e:	b28b      	uxth	r3, r1
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	b29a      	uxth	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7fc ff43 	bl	80130b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	891b      	ldrh	r3, [r3, #8]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d028      	beq.n	801628a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016238:	4b0d      	ldr	r3, [pc, #52]	; (8016270 <tcp_receive+0xb24>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d01d      	beq.n	801627c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016240:	4b0b      	ldr	r3, [pc, #44]	; (8016270 <tcp_receive+0xb24>)
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	4619      	mov	r1, r3
 801624a:	4610      	mov	r0, r2
 801624c:	f7fc fa60 	bl	8012710 <pbuf_cat>
 8016250:	e018      	b.n	8016284 <tcp_receive+0xb38>
 8016252:	bf00      	nop
 8016254:	2000865a 	.word	0x2000865a
 8016258:	20008650 	.word	0x20008650
 801625c:	20008630 	.word	0x20008630
 8016260:	0801d990 	.word	0x0801d990
 8016264:	0801dd70 	.word	0x0801dd70
 8016268:	0801d9dc 	.word	0x0801d9dc
 801626c:	0801ddac 	.word	0x0801ddac
 8016270:	20008660 	.word	0x20008660
 8016274:	2000865d 	.word	0x2000865d
 8016278:	0801ddcc 	.word	0x0801ddcc
            } else {
              recv_data = cseg->p;
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	4a70      	ldr	r2, [pc, #448]	; (8016444 <tcp_receive+0xcf8>)
 8016282:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	2200      	movs	r2, #0
 8016288:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	899b      	ldrh	r3, [r3, #12]
 8016290:	b29b      	uxth	r3, r3
 8016292:	4618      	mov	r0, r3
 8016294:	f7fa fe1d 	bl	8010ed2 <lwip_htons>
 8016298:	4603      	mov	r3, r0
 801629a:	b2db      	uxtb	r3, r3
 801629c:	f003 0301 	and.w	r3, r3, #1
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d00d      	beq.n	80162c0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80162a4:	4b68      	ldr	r3, [pc, #416]	; (8016448 <tcp_receive+0xcfc>)
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	f043 0320 	orr.w	r3, r3, #32
 80162ac:	b2da      	uxtb	r2, r3
 80162ae:	4b66      	ldr	r3, [pc, #408]	; (8016448 <tcp_receive+0xcfc>)
 80162b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	7d1b      	ldrb	r3, [r3, #20]
 80162b6:	2b04      	cmp	r3, #4
 80162b8:	d102      	bne.n	80162c0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2207      	movs	r2, #7
 80162be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	681a      	ldr	r2, [r3, #0]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80162c8:	68b8      	ldr	r0, [r7, #8]
 80162ca:	f7fd fbd2 	bl	8013a72 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d008      	beq.n	80162e8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	685a      	ldr	r2, [r3, #4]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80162e2:	429a      	cmp	r2, r3
 80162e4:	f43f af43 	beq.w	801616e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	8b5b      	ldrh	r3, [r3, #26]
 80162ec:	f003 0301 	and.w	r3, r3, #1
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d00e      	beq.n	8016312 <tcp_receive+0xbc6>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	8b5b      	ldrh	r3, [r3, #26]
 80162f8:	f023 0301 	bic.w	r3, r3, #1
 80162fc:	b29a      	uxth	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	835a      	strh	r2, [r3, #26]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	8b5b      	ldrh	r3, [r3, #26]
 8016306:	f043 0302 	orr.w	r3, r3, #2
 801630a:	b29a      	uxth	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016310:	e188      	b.n	8016624 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	8b5b      	ldrh	r3, [r3, #26]
 8016316:	f043 0301 	orr.w	r3, r3, #1
 801631a:	b29a      	uxth	r2, r3
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016320:	e180      	b.n	8016624 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016326:	2b00      	cmp	r3, #0
 8016328:	d106      	bne.n	8016338 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801632a:	4848      	ldr	r0, [pc, #288]	; (801644c <tcp_receive+0xd00>)
 801632c:	f7fd fbba 	bl	8013aa4 <tcp_seg_copy>
 8016330:	4602      	mov	r2, r0
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	675a      	str	r2, [r3, #116]	; 0x74
 8016336:	e16d      	b.n	8016614 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016338:	2300      	movs	r3, #0
 801633a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016340:	63bb      	str	r3, [r7, #56]	; 0x38
 8016342:	e157      	b.n	80165f4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	685a      	ldr	r2, [r3, #4]
 801634a:	4b41      	ldr	r3, [pc, #260]	; (8016450 <tcp_receive+0xd04>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	429a      	cmp	r2, r3
 8016350:	d11d      	bne.n	801638e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016352:	4b3e      	ldr	r3, [pc, #248]	; (801644c <tcp_receive+0xd00>)
 8016354:	891a      	ldrh	r2, [r3, #8]
 8016356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016358:	891b      	ldrh	r3, [r3, #8]
 801635a:	429a      	cmp	r2, r3
 801635c:	f240 814f 	bls.w	80165fe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016360:	483a      	ldr	r0, [pc, #232]	; (801644c <tcp_receive+0xd00>)
 8016362:	f7fd fb9f 	bl	8013aa4 <tcp_seg_copy>
 8016366:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 8149 	beq.w	8016602 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016372:	2b00      	cmp	r3, #0
 8016374:	d003      	beq.n	801637e <tcp_receive+0xc32>
                    prev->next = cseg;
 8016376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016378:	697a      	ldr	r2, [r7, #20]
 801637a:	601a      	str	r2, [r3, #0]
 801637c:	e002      	b.n	8016384 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016386:	6978      	ldr	r0, [r7, #20]
 8016388:	f7ff f8dc 	bl	8015544 <tcp_oos_insert_segment>
                }
                break;
 801638c:	e139      	b.n	8016602 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016390:	2b00      	cmp	r3, #0
 8016392:	d117      	bne.n	80163c4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016394:	4b2e      	ldr	r3, [pc, #184]	; (8016450 <tcp_receive+0xd04>)
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801639a:	68db      	ldr	r3, [r3, #12]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	1ad3      	subs	r3, r2, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	da57      	bge.n	8016454 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80163a4:	4829      	ldr	r0, [pc, #164]	; (801644c <tcp_receive+0xd00>)
 80163a6:	f7fd fb7d 	bl	8013aa4 <tcp_seg_copy>
 80163aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80163ac:	69bb      	ldr	r3, [r7, #24]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	f000 8129 	beq.w	8016606 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	69ba      	ldr	r2, [r7, #24]
 80163b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80163ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80163bc:	69b8      	ldr	r0, [r7, #24]
 80163be:	f7ff f8c1 	bl	8015544 <tcp_oos_insert_segment>
                  }
                  break;
 80163c2:	e120      	b.n	8016606 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80163c4:	4b22      	ldr	r3, [pc, #136]	; (8016450 <tcp_receive+0xd04>)
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	1ad3      	subs	r3, r2, r3
 80163d0:	3b01      	subs	r3, #1
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	db3e      	blt.n	8016454 <tcp_receive+0xd08>
 80163d6:	4b1e      	ldr	r3, [pc, #120]	; (8016450 <tcp_receive+0xd04>)
 80163d8:	681a      	ldr	r2, [r3, #0]
 80163da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163dc:	68db      	ldr	r3, [r3, #12]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	3301      	adds	r3, #1
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	dc35      	bgt.n	8016454 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80163e8:	4818      	ldr	r0, [pc, #96]	; (801644c <tcp_receive+0xd00>)
 80163ea:	f7fd fb5b 	bl	8013aa4 <tcp_seg_copy>
 80163ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	f000 8109 	beq.w	801660a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80163f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	685b      	ldr	r3, [r3, #4]
 80163fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016400:	8912      	ldrh	r2, [r2, #8]
 8016402:	441a      	add	r2, r3
 8016404:	4b12      	ldr	r3, [pc, #72]	; (8016450 <tcp_receive+0xd04>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	1ad3      	subs	r3, r2, r3
 801640a:	2b00      	cmp	r3, #0
 801640c:	dd12      	ble.n	8016434 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801640e:	4b10      	ldr	r3, [pc, #64]	; (8016450 <tcp_receive+0xd04>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	b29a      	uxth	r2, r3
 8016414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	b29b      	uxth	r3, r3
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	b29a      	uxth	r2, r3
 8016420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016422:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016426:	685a      	ldr	r2, [r3, #4]
 8016428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801642a:	891b      	ldrh	r3, [r3, #8]
 801642c:	4619      	mov	r1, r3
 801642e:	4610      	mov	r0, r2
 8016430:	f7fb ff26 	bl	8012280 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016436:	69fa      	ldr	r2, [r7, #28]
 8016438:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801643a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801643c:	69f8      	ldr	r0, [r7, #28]
 801643e:	f7ff f881 	bl	8015544 <tcp_oos_insert_segment>
                  }
                  break;
 8016442:	e0e2      	b.n	801660a <tcp_receive+0xebe>
 8016444:	20008660 	.word	0x20008660
 8016448:	2000865d 	.word	0x2000865d
 801644c:	20008630 	.word	0x20008630
 8016450:	20008650 	.word	0x20008650
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016456:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	f040 80c6 	bne.w	80165ee <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016462:	4b80      	ldr	r3, [pc, #512]	; (8016664 <tcp_receive+0xf18>)
 8016464:	681a      	ldr	r2, [r3, #0]
 8016466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801646e:	2b00      	cmp	r3, #0
 8016470:	f340 80bd 	ble.w	80165ee <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	899b      	ldrh	r3, [r3, #12]
 801647a:	b29b      	uxth	r3, r3
 801647c:	4618      	mov	r0, r3
 801647e:	f7fa fd28 	bl	8010ed2 <lwip_htons>
 8016482:	4603      	mov	r3, r0
 8016484:	b2db      	uxtb	r3, r3
 8016486:	f003 0301 	and.w	r3, r3, #1
 801648a:	2b00      	cmp	r3, #0
 801648c:	f040 80bf 	bne.w	801660e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016490:	4875      	ldr	r0, [pc, #468]	; (8016668 <tcp_receive+0xf1c>)
 8016492:	f7fd fb07 	bl	8013aa4 <tcp_seg_copy>
 8016496:	4602      	mov	r2, r0
 8016498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	f000 80b6 	beq.w	8016612 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80164a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a8:	68db      	ldr	r3, [r3, #12]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80164ae:	8912      	ldrh	r2, [r2, #8]
 80164b0:	441a      	add	r2, r3
 80164b2:	4b6c      	ldr	r3, [pc, #432]	; (8016664 <tcp_receive+0xf18>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	1ad3      	subs	r3, r2, r3
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	dd12      	ble.n	80164e2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80164bc:	4b69      	ldr	r3, [pc, #420]	; (8016664 <tcp_receive+0xf18>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	1ad3      	subs	r3, r2, r3
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80164d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d4:	685a      	ldr	r2, [r3, #4]
 80164d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d8:	891b      	ldrh	r3, [r3, #8]
 80164da:	4619      	mov	r1, r3
 80164dc:	4610      	mov	r0, r2
 80164de:	f7fb fecf 	bl	8012280 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80164e2:	4b62      	ldr	r3, [pc, #392]	; (801666c <tcp_receive+0xf20>)
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	461a      	mov	r2, r3
 80164e8:	4b5e      	ldr	r3, [pc, #376]	; (8016664 <tcp_receive+0xf18>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	441a      	add	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f2:	6879      	ldr	r1, [r7, #4]
 80164f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80164f6:	440b      	add	r3, r1
 80164f8:	1ad3      	subs	r3, r2, r3
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	f340 8089 	ble.w	8016612 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	899b      	ldrh	r3, [r3, #12]
 8016508:	b29b      	uxth	r3, r3
 801650a:	4618      	mov	r0, r3
 801650c:	f7fa fce1 	bl	8010ed2 <lwip_htons>
 8016510:	4603      	mov	r3, r0
 8016512:	b2db      	uxtb	r3, r3
 8016514:	f003 0301 	and.w	r3, r3, #1
 8016518:	2b00      	cmp	r3, #0
 801651a:	d022      	beq.n	8016562 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	899b      	ldrh	r3, [r3, #12]
 8016524:	b29b      	uxth	r3, r3
 8016526:	b21b      	sxth	r3, r3
 8016528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801652c:	b21c      	sxth	r4, r3
 801652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	899b      	ldrh	r3, [r3, #12]
 8016536:	b29b      	uxth	r3, r3
 8016538:	4618      	mov	r0, r3
 801653a:	f7fa fcca 	bl	8010ed2 <lwip_htons>
 801653e:	4603      	mov	r3, r0
 8016540:	b2db      	uxtb	r3, r3
 8016542:	b29b      	uxth	r3, r3
 8016544:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016548:	b29b      	uxth	r3, r3
 801654a:	4618      	mov	r0, r3
 801654c:	f7fa fcc1 	bl	8010ed2 <lwip_htons>
 8016550:	4603      	mov	r3, r0
 8016552:	b21b      	sxth	r3, r3
 8016554:	4323      	orrs	r3, r4
 8016556:	b21a      	sxth	r2, r3
 8016558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	b292      	uxth	r2, r2
 8016560:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016566:	b29a      	uxth	r2, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801656c:	4413      	add	r3, r2
 801656e:	b299      	uxth	r1, r3
 8016570:	4b3c      	ldr	r3, [pc, #240]	; (8016664 <tcp_receive+0xf18>)
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	b29a      	uxth	r2, r3
 8016576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	1a8a      	subs	r2, r1, r2
 801657c:	b292      	uxth	r2, r2
 801657e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	685a      	ldr	r2, [r3, #4]
 8016586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	891b      	ldrh	r3, [r3, #8]
 801658c:	4619      	mov	r1, r3
 801658e:	4610      	mov	r0, r2
 8016590:	f7fb fe76 	bl	8012280 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	891c      	ldrh	r4, [r3, #8]
 801659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	68db      	ldr	r3, [r3, #12]
 80165a0:	899b      	ldrh	r3, [r3, #12]
 80165a2:	b29b      	uxth	r3, r3
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7fa fc94 	bl	8010ed2 <lwip_htons>
 80165aa:	4603      	mov	r3, r0
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	f003 0303 	and.w	r3, r3, #3
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d001      	beq.n	80165ba <tcp_receive+0xe6e>
 80165b6:	2301      	movs	r3, #1
 80165b8:	e000      	b.n	80165bc <tcp_receive+0xe70>
 80165ba:	2300      	movs	r3, #0
 80165bc:	4423      	add	r3, r4
 80165be:	b29a      	uxth	r2, r3
 80165c0:	4b2a      	ldr	r3, [pc, #168]	; (801666c <tcp_receive+0xf20>)
 80165c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80165c4:	4b29      	ldr	r3, [pc, #164]	; (801666c <tcp_receive+0xf20>)
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	461a      	mov	r2, r3
 80165ca:	4b26      	ldr	r3, [pc, #152]	; (8016664 <tcp_receive+0xf18>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	441a      	add	r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d4:	6879      	ldr	r1, [r7, #4]
 80165d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80165d8:	440b      	add	r3, r1
 80165da:	429a      	cmp	r2, r3
 80165dc:	d019      	beq.n	8016612 <tcp_receive+0xec6>
 80165de:	4b24      	ldr	r3, [pc, #144]	; (8016670 <tcp_receive+0xf24>)
 80165e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80165e4:	4923      	ldr	r1, [pc, #140]	; (8016674 <tcp_receive+0xf28>)
 80165e6:	4824      	ldr	r0, [pc, #144]	; (8016678 <tcp_receive+0xf2c>)
 80165e8:	f005 f954 	bl	801b894 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80165ec:	e011      	b.n	8016612 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80165ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80165f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	f47f aea4 	bne.w	8016344 <tcp_receive+0xbf8>
 80165fc:	e00a      	b.n	8016614 <tcp_receive+0xec8>
                break;
 80165fe:	bf00      	nop
 8016600:	e008      	b.n	8016614 <tcp_receive+0xec8>
                break;
 8016602:	bf00      	nop
 8016604:	e006      	b.n	8016614 <tcp_receive+0xec8>
                  break;
 8016606:	bf00      	nop
 8016608:	e004      	b.n	8016614 <tcp_receive+0xec8>
                  break;
 801660a:	bf00      	nop
 801660c:	e002      	b.n	8016614 <tcp_receive+0xec8>
                  break;
 801660e:	bf00      	nop
 8016610:	e000      	b.n	8016614 <tcp_receive+0xec8>
                break;
 8016612:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016614:	6878      	ldr	r0, [r7, #4]
 8016616:	f001 fa31 	bl	8017a7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801661a:	e003      	b.n	8016624 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f001 fa2d 	bl	8017a7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016622:	e01a      	b.n	801665a <tcp_receive+0xf0e>
 8016624:	e019      	b.n	801665a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016626:	4b0f      	ldr	r3, [pc, #60]	; (8016664 <tcp_receive+0xf18>)
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801662e:	1ad3      	subs	r3, r2, r3
 8016630:	2b00      	cmp	r3, #0
 8016632:	db0a      	blt.n	801664a <tcp_receive+0xefe>
 8016634:	4b0b      	ldr	r3, [pc, #44]	; (8016664 <tcp_receive+0xf18>)
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801663c:	6879      	ldr	r1, [r7, #4]
 801663e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016640:	440b      	add	r3, r1
 8016642:	1ad3      	subs	r3, r2, r3
 8016644:	3301      	adds	r3, #1
 8016646:	2b00      	cmp	r3, #0
 8016648:	dd07      	ble.n	801665a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	8b5b      	ldrh	r3, [r3, #26]
 801664e:	f043 0302 	orr.w	r3, r3, #2
 8016652:	b29a      	uxth	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016658:	e7ff      	b.n	801665a <tcp_receive+0xf0e>
 801665a:	bf00      	nop
 801665c:	3750      	adds	r7, #80	; 0x50
 801665e:	46bd      	mov	sp, r7
 8016660:	bdb0      	pop	{r4, r5, r7, pc}
 8016662:	bf00      	nop
 8016664:	20008650 	.word	0x20008650
 8016668:	20008630 	.word	0x20008630
 801666c:	2000865a 	.word	0x2000865a
 8016670:	0801d990 	.word	0x0801d990
 8016674:	0801dd38 	.word	0x0801dd38
 8016678:	0801d9dc 	.word	0x0801d9dc

0801667c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016682:	4b15      	ldr	r3, [pc, #84]	; (80166d8 <tcp_get_next_optbyte+0x5c>)
 8016684:	881b      	ldrh	r3, [r3, #0]
 8016686:	1c5a      	adds	r2, r3, #1
 8016688:	b291      	uxth	r1, r2
 801668a:	4a13      	ldr	r2, [pc, #76]	; (80166d8 <tcp_get_next_optbyte+0x5c>)
 801668c:	8011      	strh	r1, [r2, #0]
 801668e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016690:	4b12      	ldr	r3, [pc, #72]	; (80166dc <tcp_get_next_optbyte+0x60>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d004      	beq.n	80166a2 <tcp_get_next_optbyte+0x26>
 8016698:	4b11      	ldr	r3, [pc, #68]	; (80166e0 <tcp_get_next_optbyte+0x64>)
 801669a:	881b      	ldrh	r3, [r3, #0]
 801669c:	88fa      	ldrh	r2, [r7, #6]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d208      	bcs.n	80166b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80166a2:	4b10      	ldr	r3, [pc, #64]	; (80166e4 <tcp_get_next_optbyte+0x68>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	3314      	adds	r3, #20
 80166a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80166aa:	88fb      	ldrh	r3, [r7, #6]
 80166ac:	683a      	ldr	r2, [r7, #0]
 80166ae:	4413      	add	r3, r2
 80166b0:	781b      	ldrb	r3, [r3, #0]
 80166b2:	e00b      	b.n	80166cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80166b4:	88fb      	ldrh	r3, [r7, #6]
 80166b6:	b2da      	uxtb	r2, r3
 80166b8:	4b09      	ldr	r3, [pc, #36]	; (80166e0 <tcp_get_next_optbyte+0x64>)
 80166ba:	881b      	ldrh	r3, [r3, #0]
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	1ad3      	subs	r3, r2, r3
 80166c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80166c2:	4b06      	ldr	r3, [pc, #24]	; (80166dc <tcp_get_next_optbyte+0x60>)
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	797b      	ldrb	r3, [r7, #5]
 80166c8:	4413      	add	r3, r2
 80166ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	370c      	adds	r7, #12
 80166d0:	46bd      	mov	sp, r7
 80166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d6:	4770      	bx	lr
 80166d8:	2000864c 	.word	0x2000864c
 80166dc:	20008648 	.word	0x20008648
 80166e0:	20008646 	.word	0x20008646
 80166e4:	20008640 	.word	0x20008640

080166e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b084      	sub	sp, #16
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d106      	bne.n	8016704 <tcp_parseopt+0x1c>
 80166f6:	4b32      	ldr	r3, [pc, #200]	; (80167c0 <tcp_parseopt+0xd8>)
 80166f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80166fc:	4931      	ldr	r1, [pc, #196]	; (80167c4 <tcp_parseopt+0xdc>)
 80166fe:	4832      	ldr	r0, [pc, #200]	; (80167c8 <tcp_parseopt+0xe0>)
 8016700:	f005 f8c8 	bl	801b894 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016704:	4b31      	ldr	r3, [pc, #196]	; (80167cc <tcp_parseopt+0xe4>)
 8016706:	881b      	ldrh	r3, [r3, #0]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d055      	beq.n	80167b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801670c:	4b30      	ldr	r3, [pc, #192]	; (80167d0 <tcp_parseopt+0xe8>)
 801670e:	2200      	movs	r2, #0
 8016710:	801a      	strh	r2, [r3, #0]
 8016712:	e045      	b.n	80167a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016714:	f7ff ffb2 	bl	801667c <tcp_get_next_optbyte>
 8016718:	4603      	mov	r3, r0
 801671a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801671c:	7bfb      	ldrb	r3, [r7, #15]
 801671e:	2b02      	cmp	r3, #2
 8016720:	d006      	beq.n	8016730 <tcp_parseopt+0x48>
 8016722:	2b02      	cmp	r3, #2
 8016724:	dc2b      	bgt.n	801677e <tcp_parseopt+0x96>
 8016726:	2b00      	cmp	r3, #0
 8016728:	d041      	beq.n	80167ae <tcp_parseopt+0xc6>
 801672a:	2b01      	cmp	r3, #1
 801672c:	d127      	bne.n	801677e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801672e:	e037      	b.n	80167a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016730:	f7ff ffa4 	bl	801667c <tcp_get_next_optbyte>
 8016734:	4603      	mov	r3, r0
 8016736:	2b04      	cmp	r3, #4
 8016738:	d13b      	bne.n	80167b2 <tcp_parseopt+0xca>
 801673a:	4b25      	ldr	r3, [pc, #148]	; (80167d0 <tcp_parseopt+0xe8>)
 801673c:	881b      	ldrh	r3, [r3, #0]
 801673e:	3301      	adds	r3, #1
 8016740:	4a22      	ldr	r2, [pc, #136]	; (80167cc <tcp_parseopt+0xe4>)
 8016742:	8812      	ldrh	r2, [r2, #0]
 8016744:	4293      	cmp	r3, r2
 8016746:	da34      	bge.n	80167b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016748:	f7ff ff98 	bl	801667c <tcp_get_next_optbyte>
 801674c:	4603      	mov	r3, r0
 801674e:	b29b      	uxth	r3, r3
 8016750:	021b      	lsls	r3, r3, #8
 8016752:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016754:	f7ff ff92 	bl	801667c <tcp_get_next_optbyte>
 8016758:	4603      	mov	r3, r0
 801675a:	b29a      	uxth	r2, r3
 801675c:	89bb      	ldrh	r3, [r7, #12]
 801675e:	4313      	orrs	r3, r2
 8016760:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016762:	89bb      	ldrh	r3, [r7, #12]
 8016764:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8016768:	d804      	bhi.n	8016774 <tcp_parseopt+0x8c>
 801676a:	89bb      	ldrh	r3, [r7, #12]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <tcp_parseopt+0x8c>
 8016770:	89ba      	ldrh	r2, [r7, #12]
 8016772:	e001      	b.n	8016778 <tcp_parseopt+0x90>
 8016774:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801677c:	e010      	b.n	80167a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801677e:	f7ff ff7d 	bl	801667c <tcp_get_next_optbyte>
 8016782:	4603      	mov	r3, r0
 8016784:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016786:	7afb      	ldrb	r3, [r7, #11]
 8016788:	2b01      	cmp	r3, #1
 801678a:	d914      	bls.n	80167b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801678c:	7afb      	ldrb	r3, [r7, #11]
 801678e:	b29a      	uxth	r2, r3
 8016790:	4b0f      	ldr	r3, [pc, #60]	; (80167d0 <tcp_parseopt+0xe8>)
 8016792:	881b      	ldrh	r3, [r3, #0]
 8016794:	4413      	add	r3, r2
 8016796:	b29b      	uxth	r3, r3
 8016798:	3b02      	subs	r3, #2
 801679a:	b29a      	uxth	r2, r3
 801679c:	4b0c      	ldr	r3, [pc, #48]	; (80167d0 <tcp_parseopt+0xe8>)
 801679e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80167a0:	4b0b      	ldr	r3, [pc, #44]	; (80167d0 <tcp_parseopt+0xe8>)
 80167a2:	881a      	ldrh	r2, [r3, #0]
 80167a4:	4b09      	ldr	r3, [pc, #36]	; (80167cc <tcp_parseopt+0xe4>)
 80167a6:	881b      	ldrh	r3, [r3, #0]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d3b3      	bcc.n	8016714 <tcp_parseopt+0x2c>
 80167ac:	e004      	b.n	80167b8 <tcp_parseopt+0xd0>
          return;
 80167ae:	bf00      	nop
 80167b0:	e002      	b.n	80167b8 <tcp_parseopt+0xd0>
            return;
 80167b2:	bf00      	nop
 80167b4:	e000      	b.n	80167b8 <tcp_parseopt+0xd0>
            return;
 80167b6:	bf00      	nop
      }
    }
  }
}
 80167b8:	3710      	adds	r7, #16
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
 80167be:	bf00      	nop
 80167c0:	0801d990 	.word	0x0801d990
 80167c4:	0801ddf4 	.word	0x0801ddf4
 80167c8:	0801d9dc 	.word	0x0801d9dc
 80167cc:	20008644 	.word	0x20008644
 80167d0:	2000864c 	.word	0x2000864c

080167d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80167d4:	b480      	push	{r7}
 80167d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80167d8:	4b05      	ldr	r3, [pc, #20]	; (80167f0 <tcp_trigger_input_pcb_close+0x1c>)
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	f043 0310 	orr.w	r3, r3, #16
 80167e0:	b2da      	uxtb	r2, r3
 80167e2:	4b03      	ldr	r3, [pc, #12]	; (80167f0 <tcp_trigger_input_pcb_close+0x1c>)
 80167e4:	701a      	strb	r2, [r3, #0]
}
 80167e6:	bf00      	nop
 80167e8:	46bd      	mov	sp, r7
 80167ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ee:	4770      	bx	lr
 80167f0:	2000865d 	.word	0x2000865d

080167f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d00a      	beq.n	801681c <tcp_route+0x28>
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	7a1b      	ldrb	r3, [r3, #8]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d006      	beq.n	801681c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	7a1b      	ldrb	r3, [r3, #8]
 8016812:	4618      	mov	r0, r3
 8016814:	f7fb fb5a 	bl	8011ecc <netif_get_by_index>
 8016818:	4603      	mov	r3, r0
 801681a:	e003      	b.n	8016824 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f002 fe7b 	bl	8019518 <ip4_route>
 8016822:	4603      	mov	r3, r0
  }
}
 8016824:	4618      	mov	r0, r3
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801682c:	b590      	push	{r4, r7, lr}
 801682e:	b087      	sub	sp, #28
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	4613      	mov	r3, r2
 801683a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d105      	bne.n	801684e <tcp_create_segment+0x22>
 8016842:	4b44      	ldr	r3, [pc, #272]	; (8016954 <tcp_create_segment+0x128>)
 8016844:	22a3      	movs	r2, #163	; 0xa3
 8016846:	4944      	ldr	r1, [pc, #272]	; (8016958 <tcp_create_segment+0x12c>)
 8016848:	4844      	ldr	r0, [pc, #272]	; (801695c <tcp_create_segment+0x130>)
 801684a:	f005 f823 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d105      	bne.n	8016860 <tcp_create_segment+0x34>
 8016854:	4b3f      	ldr	r3, [pc, #252]	; (8016954 <tcp_create_segment+0x128>)
 8016856:	22a4      	movs	r2, #164	; 0xa4
 8016858:	4941      	ldr	r1, [pc, #260]	; (8016960 <tcp_create_segment+0x134>)
 801685a:	4840      	ldr	r0, [pc, #256]	; (801695c <tcp_create_segment+0x130>)
 801685c:	f005 f81a 	bl	801b894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016860:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016864:	009b      	lsls	r3, r3, #2
 8016866:	b2db      	uxtb	r3, r3
 8016868:	f003 0304 	and.w	r3, r3, #4
 801686c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801686e:	2003      	movs	r0, #3
 8016870:	f7fa ffa6 	bl	80117c0 <memp_malloc>
 8016874:	6138      	str	r0, [r7, #16]
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d104      	bne.n	8016886 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801687c:	68b8      	ldr	r0, [r7, #8]
 801687e:	f7fb fe85 	bl	801258c <pbuf_free>
    return NULL;
 8016882:	2300      	movs	r3, #0
 8016884:	e061      	b.n	801694a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801688c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	2200      	movs	r2, #0
 8016892:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	68ba      	ldr	r2, [r7, #8]
 8016898:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	891a      	ldrh	r2, [r3, #8]
 801689e:	7dfb      	ldrb	r3, [r7, #23]
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d205      	bcs.n	80168b2 <tcp_create_segment+0x86>
 80168a6:	4b2b      	ldr	r3, [pc, #172]	; (8016954 <tcp_create_segment+0x128>)
 80168a8:	22b0      	movs	r2, #176	; 0xb0
 80168aa:	492e      	ldr	r1, [pc, #184]	; (8016964 <tcp_create_segment+0x138>)
 80168ac:	482b      	ldr	r0, [pc, #172]	; (801695c <tcp_create_segment+0x130>)
 80168ae:	f004 fff1 	bl	801b894 <iprintf>
  seg->len = p->tot_len - optlen;
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	891a      	ldrh	r2, [r3, #8]
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	b29b      	uxth	r3, r3
 80168ba:	1ad3      	subs	r3, r2, r3
 80168bc:	b29a      	uxth	r2, r3
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80168c2:	2114      	movs	r1, #20
 80168c4:	68b8      	ldr	r0, [r7, #8]
 80168c6:	f7fb fdcb 	bl	8012460 <pbuf_add_header>
 80168ca:	4603      	mov	r3, r0
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d004      	beq.n	80168da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80168d0:	6938      	ldr	r0, [r7, #16]
 80168d2:	f7fd f8ce 	bl	8013a72 <tcp_seg_free>
    return NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	e037      	b.n	801694a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	685a      	ldr	r2, [r3, #4]
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	8ada      	ldrh	r2, [r3, #22]
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	68dc      	ldr	r4, [r3, #12]
 80168ec:	4610      	mov	r0, r2
 80168ee:	f7fa faf0 	bl	8010ed2 <lwip_htons>
 80168f2:	4603      	mov	r3, r0
 80168f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	8b1a      	ldrh	r2, [r3, #24]
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	68dc      	ldr	r4, [r3, #12]
 80168fe:	4610      	mov	r0, r2
 8016900:	f7fa fae7 	bl	8010ed2 <lwip_htons>
 8016904:	4603      	mov	r3, r0
 8016906:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	68dc      	ldr	r4, [r3, #12]
 801690c:	6838      	ldr	r0, [r7, #0]
 801690e:	f7fa faf5 	bl	8010efc <lwip_htonl>
 8016912:	4603      	mov	r3, r0
 8016914:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016916:	7dfb      	ldrb	r3, [r7, #23]
 8016918:	089b      	lsrs	r3, r3, #2
 801691a:	b2db      	uxtb	r3, r3
 801691c:	b29b      	uxth	r3, r3
 801691e:	3305      	adds	r3, #5
 8016920:	b29b      	uxth	r3, r3
 8016922:	031b      	lsls	r3, r3, #12
 8016924:	b29a      	uxth	r2, r3
 8016926:	79fb      	ldrb	r3, [r7, #7]
 8016928:	b29b      	uxth	r3, r3
 801692a:	4313      	orrs	r3, r2
 801692c:	b29a      	uxth	r2, r3
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	68dc      	ldr	r4, [r3, #12]
 8016932:	4610      	mov	r0, r2
 8016934:	f7fa facd 	bl	8010ed2 <lwip_htons>
 8016938:	4603      	mov	r3, r0
 801693a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	2200      	movs	r2, #0
 8016942:	749a      	strb	r2, [r3, #18]
 8016944:	2200      	movs	r2, #0
 8016946:	74da      	strb	r2, [r3, #19]
  return seg;
 8016948:	693b      	ldr	r3, [r7, #16]
}
 801694a:	4618      	mov	r0, r3
 801694c:	371c      	adds	r7, #28
 801694e:	46bd      	mov	sp, r7
 8016950:	bd90      	pop	{r4, r7, pc}
 8016952:	bf00      	nop
 8016954:	0801de10 	.word	0x0801de10
 8016958:	0801de44 	.word	0x0801de44
 801695c:	0801de64 	.word	0x0801de64
 8016960:	0801de8c 	.word	0x0801de8c
 8016964:	0801deb0 	.word	0x0801deb0

08016968 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016968:	b590      	push	{r4, r7, lr}
 801696a:	b08b      	sub	sp, #44	; 0x2c
 801696c:	af02      	add	r7, sp, #8
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016974:	2300      	movs	r3, #0
 8016976:	61fb      	str	r3, [r7, #28]
 8016978:	2300      	movs	r3, #0
 801697a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801697c:	2300      	movs	r3, #0
 801697e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d106      	bne.n	8016994 <tcp_split_unsent_seg+0x2c>
 8016986:	4b95      	ldr	r3, [pc, #596]	; (8016bdc <tcp_split_unsent_seg+0x274>)
 8016988:	f240 324b 	movw	r2, #843	; 0x34b
 801698c:	4994      	ldr	r1, [pc, #592]	; (8016be0 <tcp_split_unsent_seg+0x278>)
 801698e:	4895      	ldr	r0, [pc, #596]	; (8016be4 <tcp_split_unsent_seg+0x27c>)
 8016990:	f004 ff80 	bl	801b894 <iprintf>

  useg = pcb->unsent;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016998:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d102      	bne.n	80169a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80169a0:	f04f 33ff 	mov.w	r3, #4294967295
 80169a4:	e116      	b.n	8016bd4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80169a6:	887b      	ldrh	r3, [r7, #2]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d109      	bne.n	80169c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80169ac:	4b8b      	ldr	r3, [pc, #556]	; (8016bdc <tcp_split_unsent_seg+0x274>)
 80169ae:	f240 3253 	movw	r2, #851	; 0x353
 80169b2:	498d      	ldr	r1, [pc, #564]	; (8016be8 <tcp_split_unsent_seg+0x280>)
 80169b4:	488b      	ldr	r0, [pc, #556]	; (8016be4 <tcp_split_unsent_seg+0x27c>)
 80169b6:	f004 ff6d 	bl	801b894 <iprintf>
    return ERR_VAL;
 80169ba:	f06f 0305 	mvn.w	r3, #5
 80169be:	e109      	b.n	8016bd4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	891b      	ldrh	r3, [r3, #8]
 80169c4:	887a      	ldrh	r2, [r7, #2]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d301      	bcc.n	80169ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80169ca:	2300      	movs	r3, #0
 80169cc:	e102      	b.n	8016bd4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169d2:	887a      	ldrh	r2, [r7, #2]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d906      	bls.n	80169e6 <tcp_split_unsent_seg+0x7e>
 80169d8:	4b80      	ldr	r3, [pc, #512]	; (8016bdc <tcp_split_unsent_seg+0x274>)
 80169da:	f240 325b 	movw	r2, #859	; 0x35b
 80169de:	4983      	ldr	r1, [pc, #524]	; (8016bec <tcp_split_unsent_seg+0x284>)
 80169e0:	4880      	ldr	r0, [pc, #512]	; (8016be4 <tcp_split_unsent_seg+0x27c>)
 80169e2:	f004 ff57 	bl	801b894 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80169e6:	697b      	ldr	r3, [r7, #20]
 80169e8:	891b      	ldrh	r3, [r3, #8]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d106      	bne.n	80169fc <tcp_split_unsent_seg+0x94>
 80169ee:	4b7b      	ldr	r3, [pc, #492]	; (8016bdc <tcp_split_unsent_seg+0x274>)
 80169f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80169f4:	497e      	ldr	r1, [pc, #504]	; (8016bf0 <tcp_split_unsent_seg+0x288>)
 80169f6:	487b      	ldr	r0, [pc, #492]	; (8016be4 <tcp_split_unsent_seg+0x27c>)
 80169f8:	f004 ff4c 	bl	801b894 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	7a9b      	ldrb	r3, [r3, #10]
 8016a00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016a02:	7bfb      	ldrb	r3, [r7, #15]
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	f003 0304 	and.w	r3, r3, #4
 8016a0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	891a      	ldrh	r2, [r3, #8]
 8016a12:	887b      	ldrh	r3, [r7, #2]
 8016a14:	1ad3      	subs	r3, r2, r3
 8016a16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016a18:	7bbb      	ldrb	r3, [r7, #14]
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	89bb      	ldrh	r3, [r7, #12]
 8016a1e:	4413      	add	r3, r2
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a26:	4619      	mov	r1, r3
 8016a28:	2036      	movs	r0, #54	; 0x36
 8016a2a:	f7fb facb 	bl	8011fc4 <pbuf_alloc>
 8016a2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f000 80b7 	beq.w	8016ba6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	891a      	ldrh	r2, [r3, #8]
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	891b      	ldrh	r3, [r3, #8]
 8016a42:	1ad3      	subs	r3, r2, r3
 8016a44:	b29a      	uxth	r2, r3
 8016a46:	887b      	ldrh	r3, [r7, #2]
 8016a48:	4413      	add	r3, r2
 8016a4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	6858      	ldr	r0, [r3, #4]
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	685a      	ldr	r2, [r3, #4]
 8016a54:	7bbb      	ldrb	r3, [r7, #14]
 8016a56:	18d1      	adds	r1, r2, r3
 8016a58:	897b      	ldrh	r3, [r7, #10]
 8016a5a:	89ba      	ldrh	r2, [r7, #12]
 8016a5c:	f7fb ff80 	bl	8012960 <pbuf_copy_partial>
 8016a60:	4603      	mov	r3, r0
 8016a62:	461a      	mov	r2, r3
 8016a64:	89bb      	ldrh	r3, [r7, #12]
 8016a66:	4293      	cmp	r3, r2
 8016a68:	f040 809f 	bne.w	8016baa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	899b      	ldrh	r3, [r3, #12]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7fa fa2c 	bl	8010ed2 <lwip_htons>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016a84:	2300      	movs	r3, #0
 8016a86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016a88:	7efb      	ldrb	r3, [r7, #27]
 8016a8a:	f003 0308 	and.w	r3, r3, #8
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d007      	beq.n	8016aa2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016a92:	7efb      	ldrb	r3, [r7, #27]
 8016a94:	f023 0308 	bic.w	r3, r3, #8
 8016a98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016a9a:	7ebb      	ldrb	r3, [r7, #26]
 8016a9c:	f043 0308 	orr.w	r3, r3, #8
 8016aa0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016aa2:	7efb      	ldrb	r3, [r7, #27]
 8016aa4:	f003 0301 	and.w	r3, r3, #1
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d007      	beq.n	8016abc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016aac:	7efb      	ldrb	r3, [r7, #27]
 8016aae:	f023 0301 	bic.w	r3, r3, #1
 8016ab2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016ab4:	7ebb      	ldrb	r3, [r7, #26]
 8016ab6:	f043 0301 	orr.w	r3, r3, #1
 8016aba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7fa fa1a 	bl	8010efc <lwip_htonl>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	887b      	ldrh	r3, [r7, #2]
 8016acc:	18d1      	adds	r1, r2, r3
 8016ace:	7eba      	ldrb	r2, [r7, #26]
 8016ad0:	7bfb      	ldrb	r3, [r7, #15]
 8016ad2:	9300      	str	r3, [sp, #0]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	6939      	ldr	r1, [r7, #16]
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7ff fea7 	bl	801682c <tcp_create_segment>
 8016ade:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d063      	beq.n	8016bae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	685b      	ldr	r3, [r3, #4]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7fb fdd6 	bl	801269c <pbuf_clen>
 8016af0:	4603      	mov	r3, r0
 8016af2:	461a      	mov	r2, r3
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016afa:	1a9b      	subs	r3, r3, r2
 8016afc:	b29a      	uxth	r2, r3
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	6858      	ldr	r0, [r3, #4]
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	891a      	ldrh	r2, [r3, #8]
 8016b0e:	89bb      	ldrh	r3, [r7, #12]
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	4619      	mov	r1, r3
 8016b16:	f7fb fbb3 	bl	8012280 <pbuf_realloc>
  useg->len -= remainder;
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	891a      	ldrh	r2, [r3, #8]
 8016b1e:	89bb      	ldrh	r3, [r7, #12]
 8016b20:	1ad3      	subs	r3, r2, r3
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	899b      	ldrh	r3, [r3, #12]
 8016b2e:	b29c      	uxth	r4, r3
 8016b30:	7efb      	ldrb	r3, [r7, #27]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7fa f9cc 	bl	8010ed2 <lwip_htons>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	68db      	ldr	r3, [r3, #12]
 8016b42:	4322      	orrs	r2, r4
 8016b44:	b292      	uxth	r2, r2
 8016b46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7fb fda5 	bl	801269c <pbuf_clen>
 8016b52:	4603      	mov	r3, r0
 8016b54:	461a      	mov	r2, r3
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b5c:	4413      	add	r3, r2
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7fb fd96 	bl	801269c <pbuf_clen>
 8016b70:	4603      	mov	r3, r0
 8016b72:	461a      	mov	r2, r3
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b7a:	4413      	add	r3, r2
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	69fa      	ldr	r2, [r7, #28]
 8016b90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d103      	bne.n	8016ba2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	e016      	b.n	8016bd4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016ba6:	bf00      	nop
 8016ba8:	e002      	b.n	8016bb0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016baa:	bf00      	nop
 8016bac:	e000      	b.n	8016bb0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016bae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d006      	beq.n	8016bc4 <tcp_split_unsent_seg+0x25c>
 8016bb6:	4b09      	ldr	r3, [pc, #36]	; (8016bdc <tcp_split_unsent_seg+0x274>)
 8016bb8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016bbc:	490d      	ldr	r1, [pc, #52]	; (8016bf4 <tcp_split_unsent_seg+0x28c>)
 8016bbe:	4809      	ldr	r0, [pc, #36]	; (8016be4 <tcp_split_unsent_seg+0x27c>)
 8016bc0:	f004 fe68 	bl	801b894 <iprintf>
  if (p != NULL) {
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d002      	beq.n	8016bd0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016bca:	6938      	ldr	r0, [r7, #16]
 8016bcc:	f7fb fcde 	bl	801258c <pbuf_free>
  }

  return ERR_MEM;
 8016bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3724      	adds	r7, #36	; 0x24
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd90      	pop	{r4, r7, pc}
 8016bdc:	0801de10 	.word	0x0801de10
 8016be0:	0801e1a4 	.word	0x0801e1a4
 8016be4:	0801de64 	.word	0x0801de64
 8016be8:	0801e1c8 	.word	0x0801e1c8
 8016bec:	0801e1ec 	.word	0x0801e1ec
 8016bf0:	0801e1fc 	.word	0x0801e1fc
 8016bf4:	0801e20c 	.word	0x0801e20c

08016bf8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016bf8:	b590      	push	{r4, r7, lr}
 8016bfa:	b085      	sub	sp, #20
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d106      	bne.n	8016c14 <tcp_send_fin+0x1c>
 8016c06:	4b21      	ldr	r3, [pc, #132]	; (8016c8c <tcp_send_fin+0x94>)
 8016c08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016c0c:	4920      	ldr	r1, [pc, #128]	; (8016c90 <tcp_send_fin+0x98>)
 8016c0e:	4821      	ldr	r0, [pc, #132]	; (8016c94 <tcp_send_fin+0x9c>)
 8016c10:	f004 fe40 	bl	801b894 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d02e      	beq.n	8016c7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c20:	60fb      	str	r3, [r7, #12]
 8016c22:	e002      	b.n	8016c2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d1f8      	bne.n	8016c24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	899b      	ldrh	r3, [r3, #12]
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7fa f949 	bl	8010ed2 <lwip_htons>
 8016c40:	4603      	mov	r3, r0
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	f003 0307 	and.w	r3, r3, #7
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d116      	bne.n	8016c7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	899b      	ldrh	r3, [r3, #12]
 8016c52:	b29c      	uxth	r4, r3
 8016c54:	2001      	movs	r0, #1
 8016c56:	f7fa f93c 	bl	8010ed2 <lwip_htons>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	4322      	orrs	r2, r4
 8016c64:	b292      	uxth	r2, r2
 8016c66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	8b5b      	ldrh	r3, [r3, #26]
 8016c6c:	f043 0320 	orr.w	r3, r3, #32
 8016c70:	b29a      	uxth	r2, r3
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016c76:	2300      	movs	r3, #0
 8016c78:	e004      	b.n	8016c84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016c7a:	2101      	movs	r1, #1
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 f80b 	bl	8016c98 <tcp_enqueue_flags>
 8016c82:	4603      	mov	r3, r0
}
 8016c84:	4618      	mov	r0, r3
 8016c86:	3714      	adds	r7, #20
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd90      	pop	{r4, r7, pc}
 8016c8c:	0801de10 	.word	0x0801de10
 8016c90:	0801e218 	.word	0x0801e218
 8016c94:	0801de64 	.word	0x0801de64

08016c98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b08a      	sub	sp, #40	; 0x28
 8016c9c:	af02      	add	r7, sp, #8
 8016c9e:	6078      	str	r0, [r7, #4]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016cac:	78fb      	ldrb	r3, [r7, #3]
 8016cae:	f003 0303 	and.w	r3, r3, #3
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d106      	bne.n	8016cc4 <tcp_enqueue_flags+0x2c>
 8016cb6:	4b67      	ldr	r3, [pc, #412]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016cb8:	f240 4211 	movw	r2, #1041	; 0x411
 8016cbc:	4966      	ldr	r1, [pc, #408]	; (8016e58 <tcp_enqueue_flags+0x1c0>)
 8016cbe:	4867      	ldr	r0, [pc, #412]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016cc0:	f004 fde8 	bl	801b894 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d106      	bne.n	8016cd8 <tcp_enqueue_flags+0x40>
 8016cca:	4b62      	ldr	r3, [pc, #392]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016ccc:	f240 4213 	movw	r2, #1043	; 0x413
 8016cd0:	4963      	ldr	r1, [pc, #396]	; (8016e60 <tcp_enqueue_flags+0x1c8>)
 8016cd2:	4862      	ldr	r0, [pc, #392]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016cd4:	f004 fdde 	bl	801b894 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016cd8:	78fb      	ldrb	r3, [r7, #3]
 8016cda:	f003 0302 	and.w	r3, r3, #2
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d001      	beq.n	8016ce6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ce6:	7ffb      	ldrb	r3, [r7, #31]
 8016ce8:	009b      	lsls	r3, r3, #2
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	f003 0304 	and.w	r3, r3, #4
 8016cf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016cf2:	7dfb      	ldrb	r3, [r7, #23]
 8016cf4:	b29b      	uxth	r3, r3
 8016cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	2036      	movs	r0, #54	; 0x36
 8016cfe:	f7fb f961 	bl	8011fc4 <pbuf_alloc>
 8016d02:	6138      	str	r0, [r7, #16]
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d109      	bne.n	8016d1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	8b5b      	ldrh	r3, [r3, #26]
 8016d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d12:	b29a      	uxth	r2, r3
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016d18:	f04f 33ff 	mov.w	r3, #4294967295
 8016d1c:	e095      	b.n	8016e4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	895a      	ldrh	r2, [r3, #10]
 8016d22:	7dfb      	ldrb	r3, [r7, #23]
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d206      	bcs.n	8016d38 <tcp_enqueue_flags+0xa0>
 8016d2a:	4b4a      	ldr	r3, [pc, #296]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016d2c:	f240 4239 	movw	r2, #1081	; 0x439
 8016d30:	494c      	ldr	r1, [pc, #304]	; (8016e64 <tcp_enqueue_flags+0x1cc>)
 8016d32:	484a      	ldr	r0, [pc, #296]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016d34:	f004 fdae 	bl	801b894 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016d3c:	78fa      	ldrb	r2, [r7, #3]
 8016d3e:	7ffb      	ldrb	r3, [r7, #31]
 8016d40:	9300      	str	r3, [sp, #0]
 8016d42:	460b      	mov	r3, r1
 8016d44:	6939      	ldr	r1, [r7, #16]
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f7ff fd70 	bl	801682c <tcp_create_segment>
 8016d4c:	60f8      	str	r0, [r7, #12]
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d109      	bne.n	8016d68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	8b5b      	ldrh	r3, [r3, #26]
 8016d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016d62:	f04f 33ff 	mov.w	r3, #4294967295
 8016d66:	e070      	b.n	8016e4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	68db      	ldr	r3, [r3, #12]
 8016d6c:	f003 0303 	and.w	r3, r3, #3
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d006      	beq.n	8016d82 <tcp_enqueue_flags+0xea>
 8016d74:	4b37      	ldr	r3, [pc, #220]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016d76:	f240 4242 	movw	r2, #1090	; 0x442
 8016d7a:	493b      	ldr	r1, [pc, #236]	; (8016e68 <tcp_enqueue_flags+0x1d0>)
 8016d7c:	4837      	ldr	r0, [pc, #220]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016d7e:	f004 fd89 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	891b      	ldrh	r3, [r3, #8]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d006      	beq.n	8016d98 <tcp_enqueue_flags+0x100>
 8016d8a:	4b32      	ldr	r3, [pc, #200]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016d8c:	f240 4243 	movw	r2, #1091	; 0x443
 8016d90:	4936      	ldr	r1, [pc, #216]	; (8016e6c <tcp_enqueue_flags+0x1d4>)
 8016d92:	4832      	ldr	r0, [pc, #200]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016d94:	f004 fd7e 	bl	801b894 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d103      	bne.n	8016da8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	68fa      	ldr	r2, [r7, #12]
 8016da4:	66da      	str	r2, [r3, #108]	; 0x6c
 8016da6:	e00d      	b.n	8016dc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dac:	61bb      	str	r3, [r7, #24]
 8016dae:	e002      	b.n	8016db6 <tcp_enqueue_flags+0x11e>
 8016db0:	69bb      	ldr	r3, [r7, #24]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	61bb      	str	r3, [r7, #24]
 8016db6:	69bb      	ldr	r3, [r7, #24]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d1f8      	bne.n	8016db0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	68fa      	ldr	r2, [r7, #12]
 8016dc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016dcc:	78fb      	ldrb	r3, [r7, #3]
 8016dce:	f003 0302 	and.w	r3, r3, #2
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d104      	bne.n	8016de0 <tcp_enqueue_flags+0x148>
 8016dd6:	78fb      	ldrb	r3, [r7, #3]
 8016dd8:	f003 0301 	and.w	r3, r3, #1
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d004      	beq.n	8016dea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016de4:	1c5a      	adds	r2, r3, #1
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016dea:	78fb      	ldrb	r3, [r7, #3]
 8016dec:	f003 0301 	and.w	r3, r3, #1
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d006      	beq.n	8016e02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	8b5b      	ldrh	r3, [r3, #26]
 8016df8:	f043 0320 	orr.w	r3, r3, #32
 8016dfc:	b29a      	uxth	r2, r3
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7fb fc48 	bl	801269c <pbuf_clen>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	461a      	mov	r2, r3
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e16:	4413      	add	r3, r2
 8016e18:	b29a      	uxth	r2, r3
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d00e      	beq.n	8016e48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d10a      	bne.n	8016e48 <tcp_enqueue_flags+0x1b0>
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d106      	bne.n	8016e48 <tcp_enqueue_flags+0x1b0>
 8016e3a:	4b06      	ldr	r3, [pc, #24]	; (8016e54 <tcp_enqueue_flags+0x1bc>)
 8016e3c:	f240 4265 	movw	r2, #1125	; 0x465
 8016e40:	490b      	ldr	r1, [pc, #44]	; (8016e70 <tcp_enqueue_flags+0x1d8>)
 8016e42:	4806      	ldr	r0, [pc, #24]	; (8016e5c <tcp_enqueue_flags+0x1c4>)
 8016e44:	f004 fd26 	bl	801b894 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016e48:	2300      	movs	r3, #0
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3720      	adds	r7, #32
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801de10 	.word	0x0801de10
 8016e58:	0801e234 	.word	0x0801e234
 8016e5c:	0801de64 	.word	0x0801de64
 8016e60:	0801e28c 	.word	0x0801e28c
 8016e64:	0801e2ac 	.word	0x0801e2ac
 8016e68:	0801e2e8 	.word	0x0801e2e8
 8016e6c:	0801e300 	.word	0x0801e300
 8016e70:	0801e32c 	.word	0x0801e32c

08016e74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016e74:	b5b0      	push	{r4, r5, r7, lr}
 8016e76:	b08a      	sub	sp, #40	; 0x28
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d106      	bne.n	8016e90 <tcp_output+0x1c>
 8016e82:	4b8a      	ldr	r3, [pc, #552]	; (80170ac <tcp_output+0x238>)
 8016e84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016e88:	4989      	ldr	r1, [pc, #548]	; (80170b0 <tcp_output+0x23c>)
 8016e8a:	488a      	ldr	r0, [pc, #552]	; (80170b4 <tcp_output+0x240>)
 8016e8c:	f004 fd02 	bl	801b894 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	7d1b      	ldrb	r3, [r3, #20]
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d106      	bne.n	8016ea6 <tcp_output+0x32>
 8016e98:	4b84      	ldr	r3, [pc, #528]	; (80170ac <tcp_output+0x238>)
 8016e9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016e9e:	4986      	ldr	r1, [pc, #536]	; (80170b8 <tcp_output+0x244>)
 8016ea0:	4884      	ldr	r0, [pc, #528]	; (80170b4 <tcp_output+0x240>)
 8016ea2:	f004 fcf7 	bl	801b894 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016ea6:	4b85      	ldr	r3, [pc, #532]	; (80170bc <tcp_output+0x248>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d101      	bne.n	8016eb4 <tcp_output+0x40>
    return ERR_OK;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	e1ce      	b.n	8017252 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	bf28      	it	cs
 8016ec4:	4613      	movcs	r3, r2
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ece:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d10b      	bne.n	8016eee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8b5b      	ldrh	r3, [r3, #26]
 8016eda:	f003 0302 	and.w	r3, r3, #2
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	f000 81aa 	beq.w	8017238 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f000 fdc9 	bl	8017a7c <tcp_send_empty_ack>
 8016eea:	4603      	mov	r3, r0
 8016eec:	e1b1      	b.n	8017252 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016eee:	6879      	ldr	r1, [r7, #4]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	3304      	adds	r3, #4
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f7ff fc7c 	bl	80167f4 <tcp_route>
 8016efc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d102      	bne.n	8016f0a <tcp_output+0x96>
    return ERR_RTE;
 8016f04:	f06f 0303 	mvn.w	r3, #3
 8016f08:	e1a3      	b.n	8017252 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d003      	beq.n	8016f18 <tcp_output+0xa4>
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d111      	bne.n	8016f3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <tcp_output+0xb0>
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	3304      	adds	r3, #4
 8016f22:	e000      	b.n	8016f26 <tcp_output+0xb2>
 8016f24:	2300      	movs	r3, #0
 8016f26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d102      	bne.n	8016f34 <tcp_output+0xc0>
      return ERR_RTE;
 8016f2e:	f06f 0303 	mvn.w	r3, #3
 8016f32:	e18e      	b.n	8017252 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016f34:	693b      	ldr	r3, [r7, #16]
 8016f36:	681a      	ldr	r2, [r3, #0]
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3e:	68db      	ldr	r3, [r3, #12]
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	4618      	mov	r0, r3
 8016f44:	f7f9 ffda 	bl	8010efc <lwip_htonl>
 8016f48:	4602      	mov	r2, r0
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f52:	8912      	ldrh	r2, [r2, #8]
 8016f54:	4413      	add	r3, r2
 8016f56:	69ba      	ldr	r2, [r7, #24]
 8016f58:	429a      	cmp	r2, r3
 8016f5a:	d227      	bcs.n	8016fac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f62:	461a      	mov	r2, r3
 8016f64:	69bb      	ldr	r3, [r7, #24]
 8016f66:	4293      	cmp	r3, r2
 8016f68:	d114      	bne.n	8016f94 <tcp_output+0x120>
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d110      	bne.n	8016f94 <tcp_output+0x120>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10b      	bne.n	8016f94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2201      	movs	r2, #1
 8016f88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	8b5b      	ldrh	r3, [r3, #26]
 8016f98:	f003 0302 	and.w	r3, r3, #2
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 814d 	beq.w	801723c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	f000 fd6a 	bl	8017a7c <tcp_send_empty_ack>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	e152      	b.n	8017252 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016fb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016fba:	6a3b      	ldr	r3, [r7, #32]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	f000 811c 	beq.w	80171fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016fc2:	e002      	b.n	8016fca <tcp_output+0x156>
 8016fc4:	6a3b      	ldr	r3, [r7, #32]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	623b      	str	r3, [r7, #32]
 8016fca:	6a3b      	ldr	r3, [r7, #32]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d1f8      	bne.n	8016fc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016fd2:	e112      	b.n	80171fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd6:	68db      	ldr	r3, [r3, #12]
 8016fd8:	899b      	ldrh	r3, [r3, #12]
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f7f9 ff78 	bl	8010ed2 <lwip_htons>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	f003 0304 	and.w	r3, r3, #4
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d006      	beq.n	8016ffc <tcp_output+0x188>
 8016fee:	4b2f      	ldr	r3, [pc, #188]	; (80170ac <tcp_output+0x238>)
 8016ff0:	f240 5236 	movw	r2, #1334	; 0x536
 8016ff4:	4932      	ldr	r1, [pc, #200]	; (80170c0 <tcp_output+0x24c>)
 8016ff6:	482f      	ldr	r0, [pc, #188]	; (80170b4 <tcp_output+0x240>)
 8016ff8:	f004 fc4c 	bl	801b894 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017000:	2b00      	cmp	r3, #0
 8017002:	d01f      	beq.n	8017044 <tcp_output+0x1d0>
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	8b5b      	ldrh	r3, [r3, #26]
 8017008:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801700c:	2b00      	cmp	r3, #0
 801700e:	d119      	bne.n	8017044 <tcp_output+0x1d0>
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017014:	2b00      	cmp	r3, #0
 8017016:	d00b      	beq.n	8017030 <tcp_output+0x1bc>
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d110      	bne.n	8017044 <tcp_output+0x1d0>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017026:	891a      	ldrh	r2, [r3, #8]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801702c:	429a      	cmp	r2, r3
 801702e:	d209      	bcs.n	8017044 <tcp_output+0x1d0>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017036:	2b00      	cmp	r3, #0
 8017038:	d004      	beq.n	8017044 <tcp_output+0x1d0>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017040:	2b0f      	cmp	r3, #15
 8017042:	d901      	bls.n	8017048 <tcp_output+0x1d4>
 8017044:	2301      	movs	r3, #1
 8017046:	e000      	b.n	801704a <tcp_output+0x1d6>
 8017048:	2300      	movs	r3, #0
 801704a:	2b00      	cmp	r3, #0
 801704c:	d106      	bne.n	801705c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	8b5b      	ldrh	r3, [r3, #26]
 8017052:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017056:	2b00      	cmp	r3, #0
 8017058:	f000 80e4 	beq.w	8017224 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	7d1b      	ldrb	r3, [r3, #20]
 8017060:	2b02      	cmp	r3, #2
 8017062:	d00d      	beq.n	8017080 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017066:	68db      	ldr	r3, [r3, #12]
 8017068:	899b      	ldrh	r3, [r3, #12]
 801706a:	b29c      	uxth	r4, r3
 801706c:	2010      	movs	r0, #16
 801706e:	f7f9 ff30 	bl	8010ed2 <lwip_htons>
 8017072:	4603      	mov	r3, r0
 8017074:	461a      	mov	r2, r3
 8017076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017078:	68db      	ldr	r3, [r3, #12]
 801707a:	4322      	orrs	r2, r4
 801707c:	b292      	uxth	r2, r2
 801707e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017080:	697a      	ldr	r2, [r7, #20]
 8017082:	6879      	ldr	r1, [r7, #4]
 8017084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017086:	f000 f909 	bl	801729c <tcp_output_segment>
 801708a:	4603      	mov	r3, r0
 801708c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801708e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d016      	beq.n	80170c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	8b5b      	ldrh	r3, [r3, #26]
 801709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801709e:	b29a      	uxth	r2, r3
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	835a      	strh	r2, [r3, #26]
      return err;
 80170a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170a8:	e0d3      	b.n	8017252 <tcp_output+0x3de>
 80170aa:	bf00      	nop
 80170ac:	0801de10 	.word	0x0801de10
 80170b0:	0801e354 	.word	0x0801e354
 80170b4:	0801de64 	.word	0x0801de64
 80170b8:	0801e36c 	.word	0x0801e36c
 80170bc:	20008664 	.word	0x20008664
 80170c0:	0801e394 	.word	0x0801e394
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80170c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	7d1b      	ldrb	r3, [r3, #20]
 80170d0:	2b02      	cmp	r3, #2
 80170d2:	d006      	beq.n	80170e2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	8b5b      	ldrh	r3, [r3, #26]
 80170d8:	f023 0303 	bic.w	r3, r3, #3
 80170dc:	b29a      	uxth	r2, r3
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80170e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7f9 ff07 	bl	8010efc <lwip_htonl>
 80170ee:	4604      	mov	r4, r0
 80170f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f2:	891b      	ldrh	r3, [r3, #8]
 80170f4:	461d      	mov	r5, r3
 80170f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f8:	68db      	ldr	r3, [r3, #12]
 80170fa:	899b      	ldrh	r3, [r3, #12]
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	4618      	mov	r0, r3
 8017100:	f7f9 fee7 	bl	8010ed2 <lwip_htons>
 8017104:	4603      	mov	r3, r0
 8017106:	b2db      	uxtb	r3, r3
 8017108:	f003 0303 	and.w	r3, r3, #3
 801710c:	2b00      	cmp	r3, #0
 801710e:	d001      	beq.n	8017114 <tcp_output+0x2a0>
 8017110:	2301      	movs	r3, #1
 8017112:	e000      	b.n	8017116 <tcp_output+0x2a2>
 8017114:	2300      	movs	r3, #0
 8017116:	442b      	add	r3, r5
 8017118:	4423      	add	r3, r4
 801711a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	1ad3      	subs	r3, r2, r3
 8017124:	2b00      	cmp	r3, #0
 8017126:	da02      	bge.n	801712e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	68ba      	ldr	r2, [r7, #8]
 801712c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017130:	891b      	ldrh	r3, [r3, #8]
 8017132:	461c      	mov	r4, r3
 8017134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	899b      	ldrh	r3, [r3, #12]
 801713a:	b29b      	uxth	r3, r3
 801713c:	4618      	mov	r0, r3
 801713e:	f7f9 fec8 	bl	8010ed2 <lwip_htons>
 8017142:	4603      	mov	r3, r0
 8017144:	b2db      	uxtb	r3, r3
 8017146:	f003 0303 	and.w	r3, r3, #3
 801714a:	2b00      	cmp	r3, #0
 801714c:	d001      	beq.n	8017152 <tcp_output+0x2de>
 801714e:	2301      	movs	r3, #1
 8017150:	e000      	b.n	8017154 <tcp_output+0x2e0>
 8017152:	2300      	movs	r3, #0
 8017154:	4423      	add	r3, r4
 8017156:	2b00      	cmp	r3, #0
 8017158:	d049      	beq.n	80171ee <tcp_output+0x37a>
      seg->next = NULL;
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	2200      	movs	r2, #0
 801715e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017164:	2b00      	cmp	r3, #0
 8017166:	d105      	bne.n	8017174 <tcp_output+0x300>
        pcb->unacked = seg;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801716c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017170:	623b      	str	r3, [r7, #32]
 8017172:	e03f      	b.n	80171f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	4618      	mov	r0, r3
 801717c:	f7f9 febe 	bl	8010efc <lwip_htonl>
 8017180:	4604      	mov	r4, r0
 8017182:	6a3b      	ldr	r3, [r7, #32]
 8017184:	68db      	ldr	r3, [r3, #12]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	4618      	mov	r0, r3
 801718a:	f7f9 feb7 	bl	8010efc <lwip_htonl>
 801718e:	4603      	mov	r3, r0
 8017190:	1ae3      	subs	r3, r4, r3
 8017192:	2b00      	cmp	r3, #0
 8017194:	da24      	bge.n	80171e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	3370      	adds	r3, #112	; 0x70
 801719a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801719c:	e002      	b.n	80171a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d011      	beq.n	80171d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80171ac:	69fb      	ldr	r3, [r7, #28]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	68db      	ldr	r3, [r3, #12]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7f9 fea1 	bl	8010efc <lwip_htonl>
 80171ba:	4604      	mov	r4, r0
 80171bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7f9 fe9a 	bl	8010efc <lwip_htonl>
 80171c8:	4603      	mov	r3, r0
 80171ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	dbe6      	blt.n	801719e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80171d0:	69fb      	ldr	r3, [r7, #28]
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171dc:	601a      	str	r2, [r3, #0]
 80171de:	e009      	b.n	80171f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80171e0:	6a3b      	ldr	r3, [r7, #32]
 80171e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80171e6:	6a3b      	ldr	r3, [r7, #32]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	623b      	str	r3, [r7, #32]
 80171ec:	e002      	b.n	80171f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80171ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171f0:	f7fc fc3f 	bl	8013a72 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80171fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d012      	beq.n	8017226 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	4618      	mov	r0, r3
 8017208:	f7f9 fe78 	bl	8010efc <lwip_htonl>
 801720c:	4602      	mov	r2, r0
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017212:	1ad3      	subs	r3, r2, r3
 8017214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017216:	8912      	ldrh	r2, [r2, #8]
 8017218:	4413      	add	r3, r2
  while (seg != NULL &&
 801721a:	69ba      	ldr	r2, [r7, #24]
 801721c:	429a      	cmp	r2, r3
 801721e:	f4bf aed9 	bcs.w	8016fd4 <tcp_output+0x160>
 8017222:	e000      	b.n	8017226 <tcp_output+0x3b2>
      break;
 8017224:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801722a:	2b00      	cmp	r3, #0
 801722c:	d108      	bne.n	8017240 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2200      	movs	r2, #0
 8017232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017236:	e004      	b.n	8017242 <tcp_output+0x3ce>
    goto output_done;
 8017238:	bf00      	nop
 801723a:	e002      	b.n	8017242 <tcp_output+0x3ce>
    goto output_done;
 801723c:	bf00      	nop
 801723e:	e000      	b.n	8017242 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017240:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	8b5b      	ldrh	r3, [r3, #26]
 8017246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801724a:	b29a      	uxth	r2, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017250:	2300      	movs	r3, #0
}
 8017252:	4618      	mov	r0, r3
 8017254:	3728      	adds	r7, #40	; 0x28
 8017256:	46bd      	mov	sp, r7
 8017258:	bdb0      	pop	{r4, r5, r7, pc}
 801725a:	bf00      	nop

0801725c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b082      	sub	sp, #8
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d106      	bne.n	8017278 <tcp_output_segment_busy+0x1c>
 801726a:	4b09      	ldr	r3, [pc, #36]	; (8017290 <tcp_output_segment_busy+0x34>)
 801726c:	f240 529a 	movw	r2, #1434	; 0x59a
 8017270:	4908      	ldr	r1, [pc, #32]	; (8017294 <tcp_output_segment_busy+0x38>)
 8017272:	4809      	ldr	r0, [pc, #36]	; (8017298 <tcp_output_segment_busy+0x3c>)
 8017274:	f004 fb0e 	bl	801b894 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	7b9b      	ldrb	r3, [r3, #14]
 801727e:	2b01      	cmp	r3, #1
 8017280:	d001      	beq.n	8017286 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017282:	2301      	movs	r3, #1
 8017284:	e000      	b.n	8017288 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017286:	2300      	movs	r3, #0
}
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	0801de10 	.word	0x0801de10
 8017294:	0801e3ac 	.word	0x0801e3ac
 8017298:	0801de64 	.word	0x0801de64

0801729c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801729c:	b5b0      	push	{r4, r5, r7, lr}
 801729e:	b08c      	sub	sp, #48	; 0x30
 80172a0:	af04      	add	r7, sp, #16
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d106      	bne.n	80172bc <tcp_output_segment+0x20>
 80172ae:	4b64      	ldr	r3, [pc, #400]	; (8017440 <tcp_output_segment+0x1a4>)
 80172b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80172b4:	4963      	ldr	r1, [pc, #396]	; (8017444 <tcp_output_segment+0x1a8>)
 80172b6:	4864      	ldr	r0, [pc, #400]	; (8017448 <tcp_output_segment+0x1ac>)
 80172b8:	f004 faec 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d106      	bne.n	80172d0 <tcp_output_segment+0x34>
 80172c2:	4b5f      	ldr	r3, [pc, #380]	; (8017440 <tcp_output_segment+0x1a4>)
 80172c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80172c8:	4960      	ldr	r1, [pc, #384]	; (801744c <tcp_output_segment+0x1b0>)
 80172ca:	485f      	ldr	r0, [pc, #380]	; (8017448 <tcp_output_segment+0x1ac>)
 80172cc:	f004 fae2 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d106      	bne.n	80172e4 <tcp_output_segment+0x48>
 80172d6:	4b5a      	ldr	r3, [pc, #360]	; (8017440 <tcp_output_segment+0x1a4>)
 80172d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80172dc:	495c      	ldr	r1, [pc, #368]	; (8017450 <tcp_output_segment+0x1b4>)
 80172de:	485a      	ldr	r0, [pc, #360]	; (8017448 <tcp_output_segment+0x1ac>)
 80172e0:	f004 fad8 	bl	801b894 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f7ff ffb9 	bl	801725c <tcp_output_segment_busy>
 80172ea:	4603      	mov	r3, r0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d001      	beq.n	80172f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80172f0:	2300      	movs	r3, #0
 80172f2:	e0a1      	b.n	8017438 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	68dc      	ldr	r4, [r3, #12]
 80172fc:	4610      	mov	r0, r2
 80172fe:	f7f9 fdfd 	bl	8010efc <lwip_htonl>
 8017302:	4603      	mov	r3, r0
 8017304:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	68dc      	ldr	r4, [r3, #12]
 801730e:	4610      	mov	r0, r2
 8017310:	f7f9 fddf 	bl	8010ed2 <lwip_htons>
 8017314:	4603      	mov	r3, r0
 8017316:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801731c:	68ba      	ldr	r2, [r7, #8]
 801731e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017320:	441a      	add	r2, r3
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	68db      	ldr	r3, [r3, #12]
 801732a:	3314      	adds	r3, #20
 801732c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	7a9b      	ldrb	r3, [r3, #10]
 8017332:	f003 0301 	and.w	r3, r3, #1
 8017336:	2b00      	cmp	r3, #0
 8017338:	d015      	beq.n	8017366 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	3304      	adds	r3, #4
 801733e:	461a      	mov	r2, r3
 8017340:	6879      	ldr	r1, [r7, #4]
 8017342:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8017346:	f7fc fe8b 	bl	8014060 <tcp_eff_send_mss_netif>
 801734a:	4603      	mov	r3, r0
 801734c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801734e:	8b7b      	ldrh	r3, [r7, #26]
 8017350:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017354:	4618      	mov	r0, r3
 8017356:	f7f9 fdd1 	bl	8010efc <lwip_htonl>
 801735a:	4602      	mov	r2, r0
 801735c:	69fb      	ldr	r3, [r7, #28]
 801735e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	3304      	adds	r3, #4
 8017364:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801736c:	2b00      	cmp	r3, #0
 801736e:	da02      	bge.n	8017376 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	2200      	movs	r2, #0
 8017374:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801737a:	2b00      	cmp	r3, #0
 801737c:	d10c      	bne.n	8017398 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801737e:	4b35      	ldr	r3, [pc, #212]	; (8017454 <tcp_output_segment+0x1b8>)
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	68db      	ldr	r3, [r3, #12]
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	4618      	mov	r0, r3
 801738e:	f7f9 fdb5 	bl	8010efc <lwip_htonl>
 8017392:	4602      	mov	r2, r0
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	68da      	ldr	r2, [r3, #12]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	1ad3      	subs	r3, r2, r3
 80173a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	8959      	ldrh	r1, [r3, #10]
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	8b3a      	ldrh	r2, [r7, #24]
 80173b2:	1a8a      	subs	r2, r1, r2
 80173b4:	b292      	uxth	r2, r2
 80173b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	8919      	ldrh	r1, [r3, #8]
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	685b      	ldr	r3, [r3, #4]
 80173c2:	8b3a      	ldrh	r2, [r7, #24]
 80173c4:	1a8a      	subs	r2, r1, r2
 80173c6:	b292      	uxth	r2, r2
 80173c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	685b      	ldr	r3, [r3, #4]
 80173ce:	68fa      	ldr	r2, [r7, #12]
 80173d0:	68d2      	ldr	r2, [r2, #12]
 80173d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	68db      	ldr	r3, [r3, #12]
 80173d8:	2200      	movs	r2, #0
 80173da:	741a      	strb	r2, [r3, #16]
 80173dc:	2200      	movs	r2, #0
 80173de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	68da      	ldr	r2, [r3, #12]
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	7a9b      	ldrb	r3, [r3, #10]
 80173e8:	f003 0301 	and.w	r3, r3, #1
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d001      	beq.n	80173f4 <tcp_output_segment+0x158>
 80173f0:	2318      	movs	r3, #24
 80173f2:	e000      	b.n	80173f6 <tcp_output_segment+0x15a>
 80173f4:	2314      	movs	r3, #20
 80173f6:	4413      	add	r3, r2
 80173f8:	69fa      	ldr	r2, [r7, #28]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	d006      	beq.n	801740c <tcp_output_segment+0x170>
 80173fe:	4b10      	ldr	r3, [pc, #64]	; (8017440 <tcp_output_segment+0x1a4>)
 8017400:	f240 621c 	movw	r2, #1564	; 0x61c
 8017404:	4914      	ldr	r1, [pc, #80]	; (8017458 <tcp_output_segment+0x1bc>)
 8017406:	4810      	ldr	r0, [pc, #64]	; (8017448 <tcp_output_segment+0x1ac>)
 8017408:	f004 fa44 	bl	801b894 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	6858      	ldr	r0, [r3, #4]
 8017410:	68b9      	ldr	r1, [r7, #8]
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	1d1c      	adds	r4, r3, #4
 8017416:	68bb      	ldr	r3, [r7, #8]
 8017418:	7add      	ldrb	r5, [r3, #11]
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	7a9b      	ldrb	r3, [r3, #10]
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	9202      	str	r2, [sp, #8]
 8017422:	2206      	movs	r2, #6
 8017424:	9201      	str	r2, [sp, #4]
 8017426:	9300      	str	r3, [sp, #0]
 8017428:	462b      	mov	r3, r5
 801742a:	4622      	mov	r2, r4
 801742c:	f002 fa32 	bl	8019894 <ip4_output_if>
 8017430:	4603      	mov	r3, r0
 8017432:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017438:	4618      	mov	r0, r3
 801743a:	3720      	adds	r7, #32
 801743c:	46bd      	mov	sp, r7
 801743e:	bdb0      	pop	{r4, r5, r7, pc}
 8017440:	0801de10 	.word	0x0801de10
 8017444:	0801e3d4 	.word	0x0801e3d4
 8017448:	0801de64 	.word	0x0801de64
 801744c:	0801e3f4 	.word	0x0801e3f4
 8017450:	0801e414 	.word	0x0801e414
 8017454:	20008618 	.word	0x20008618
 8017458:	0801e438 	.word	0x0801e438

0801745c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801745c:	b5b0      	push	{r4, r5, r7, lr}
 801745e:	b084      	sub	sp, #16
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d106      	bne.n	8017478 <tcp_rexmit_rto_prepare+0x1c>
 801746a:	4b31      	ldr	r3, [pc, #196]	; (8017530 <tcp_rexmit_rto_prepare+0xd4>)
 801746c:	f240 6263 	movw	r2, #1635	; 0x663
 8017470:	4930      	ldr	r1, [pc, #192]	; (8017534 <tcp_rexmit_rto_prepare+0xd8>)
 8017472:	4831      	ldr	r0, [pc, #196]	; (8017538 <tcp_rexmit_rto_prepare+0xdc>)
 8017474:	f004 fa0e 	bl	801b894 <iprintf>

  if (pcb->unacked == NULL) {
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801747c:	2b00      	cmp	r3, #0
 801747e:	d102      	bne.n	8017486 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017480:	f06f 0305 	mvn.w	r3, #5
 8017484:	e050      	b.n	8017528 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801748a:	60fb      	str	r3, [r7, #12]
 801748c:	e00b      	b.n	80174a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7ff fee4 	bl	801725c <tcp_output_segment_busy>
 8017494:	4603      	mov	r3, r0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d002      	beq.n	80174a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801749a:	f06f 0305 	mvn.w	r3, #5
 801749e:	e043      	b.n	8017528 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	60fb      	str	r3, [r7, #12]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1ef      	bne.n	801748e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80174ae:	68f8      	ldr	r0, [r7, #12]
 80174b0:	f7ff fed4 	bl	801725c <tcp_output_segment_busy>
 80174b4:	4603      	mov	r3, r0
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d002      	beq.n	80174c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80174ba:	f06f 0305 	mvn.w	r3, #5
 80174be:	e033      	b.n	8017528 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2200      	movs	r2, #0
 80174d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	8b5b      	ldrh	r3, [r3, #26]
 80174da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80174de:	b29a      	uxth	r2, r3
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	68db      	ldr	r3, [r3, #12]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7f9 fd06 	bl	8010efc <lwip_htonl>
 80174f0:	4604      	mov	r4, r0
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	891b      	ldrh	r3, [r3, #8]
 80174f6:	461d      	mov	r5, r3
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	68db      	ldr	r3, [r3, #12]
 80174fc:	899b      	ldrh	r3, [r3, #12]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	4618      	mov	r0, r3
 8017502:	f7f9 fce6 	bl	8010ed2 <lwip_htons>
 8017506:	4603      	mov	r3, r0
 8017508:	b2db      	uxtb	r3, r3
 801750a:	f003 0303 	and.w	r3, r3, #3
 801750e:	2b00      	cmp	r3, #0
 8017510:	d001      	beq.n	8017516 <tcp_rexmit_rto_prepare+0xba>
 8017512:	2301      	movs	r3, #1
 8017514:	e000      	b.n	8017518 <tcp_rexmit_rto_prepare+0xbc>
 8017516:	2300      	movs	r3, #0
 8017518:	442b      	add	r3, r5
 801751a:	18e2      	adds	r2, r4, r3
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2200      	movs	r2, #0
 8017524:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017526:	2300      	movs	r3, #0
}
 8017528:	4618      	mov	r0, r3
 801752a:	3710      	adds	r7, #16
 801752c:	46bd      	mov	sp, r7
 801752e:	bdb0      	pop	{r4, r5, r7, pc}
 8017530:	0801de10 	.word	0x0801de10
 8017534:	0801e44c 	.word	0x0801e44c
 8017538:	0801de64 	.word	0x0801de64

0801753c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d106      	bne.n	8017558 <tcp_rexmit_rto_commit+0x1c>
 801754a:	4b0d      	ldr	r3, [pc, #52]	; (8017580 <tcp_rexmit_rto_commit+0x44>)
 801754c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017550:	490c      	ldr	r1, [pc, #48]	; (8017584 <tcp_rexmit_rto_commit+0x48>)
 8017552:	480d      	ldr	r0, [pc, #52]	; (8017588 <tcp_rexmit_rto_commit+0x4c>)
 8017554:	f004 f99e 	bl	801b894 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801755e:	2bff      	cmp	r3, #255	; 0xff
 8017560:	d007      	beq.n	8017572 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017568:	3301      	adds	r3, #1
 801756a:	b2da      	uxtb	r2, r3
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f7ff fc7e 	bl	8016e74 <tcp_output>
}
 8017578:	bf00      	nop
 801757a:	3708      	adds	r7, #8
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}
 8017580:	0801de10 	.word	0x0801de10
 8017584:	0801e470 	.word	0x0801e470
 8017588:	0801de64 	.word	0x0801de64

0801758c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d106      	bne.n	80175a8 <tcp_rexmit_rto+0x1c>
 801759a:	4b0a      	ldr	r3, [pc, #40]	; (80175c4 <tcp_rexmit_rto+0x38>)
 801759c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80175a0:	4909      	ldr	r1, [pc, #36]	; (80175c8 <tcp_rexmit_rto+0x3c>)
 80175a2:	480a      	ldr	r0, [pc, #40]	; (80175cc <tcp_rexmit_rto+0x40>)
 80175a4:	f004 f976 	bl	801b894 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80175a8:	6878      	ldr	r0, [r7, #4]
 80175aa:	f7ff ff57 	bl	801745c <tcp_rexmit_rto_prepare>
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d102      	bne.n	80175ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f7ff ffc1 	bl	801753c <tcp_rexmit_rto_commit>
  }
}
 80175ba:	bf00      	nop
 80175bc:	3708      	adds	r7, #8
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	0801de10 	.word	0x0801de10
 80175c8:	0801e494 	.word	0x0801e494
 80175cc:	0801de64 	.word	0x0801de64

080175d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80175d0:	b590      	push	{r4, r7, lr}
 80175d2:	b085      	sub	sp, #20
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d106      	bne.n	80175ec <tcp_rexmit+0x1c>
 80175de:	4b2f      	ldr	r3, [pc, #188]	; (801769c <tcp_rexmit+0xcc>)
 80175e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80175e4:	492e      	ldr	r1, [pc, #184]	; (80176a0 <tcp_rexmit+0xd0>)
 80175e6:	482f      	ldr	r0, [pc, #188]	; (80176a4 <tcp_rexmit+0xd4>)
 80175e8:	f004 f954 	bl	801b894 <iprintf>

  if (pcb->unacked == NULL) {
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d102      	bne.n	80175fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80175f4:	f06f 0305 	mvn.w	r3, #5
 80175f8:	e04c      	b.n	8017694 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017600:	68b8      	ldr	r0, [r7, #8]
 8017602:	f7ff fe2b 	bl	801725c <tcp_output_segment_busy>
 8017606:	4603      	mov	r3, r0
 8017608:	2b00      	cmp	r3, #0
 801760a:	d002      	beq.n	8017612 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801760c:	f06f 0305 	mvn.w	r3, #5
 8017610:	e040      	b.n	8017694 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017612:	68bb      	ldr	r3, [r7, #8]
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	336c      	adds	r3, #108	; 0x6c
 801761e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017620:	e002      	b.n	8017628 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d011      	beq.n	8017654 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	68db      	ldr	r3, [r3, #12]
 8017636:	685b      	ldr	r3, [r3, #4]
 8017638:	4618      	mov	r0, r3
 801763a:	f7f9 fc5f 	bl	8010efc <lwip_htonl>
 801763e:	4604      	mov	r4, r0
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	68db      	ldr	r3, [r3, #12]
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	4618      	mov	r0, r3
 8017648:	f7f9 fc58 	bl	8010efc <lwip_htonl>
 801764c:	4603      	mov	r3, r0
 801764e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017650:	2b00      	cmp	r3, #0
 8017652:	dbe6      	blt.n	8017622 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	68ba      	ldr	r2, [r7, #8]
 8017660:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d103      	bne.n	8017672 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2200      	movs	r2, #0
 801766e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017678:	2bff      	cmp	r3, #255	; 0xff
 801767a:	d007      	beq.n	801768c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017682:	3301      	adds	r3, #1
 8017684:	b2da      	uxtb	r2, r3
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2200      	movs	r2, #0
 8017690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017692:	2300      	movs	r3, #0
}
 8017694:	4618      	mov	r0, r3
 8017696:	3714      	adds	r7, #20
 8017698:	46bd      	mov	sp, r7
 801769a:	bd90      	pop	{r4, r7, pc}
 801769c:	0801de10 	.word	0x0801de10
 80176a0:	0801e4b0 	.word	0x0801e4b0
 80176a4:	0801de64 	.word	0x0801de64

080176a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d106      	bne.n	80176c4 <tcp_rexmit_fast+0x1c>
 80176b6:	4b2a      	ldr	r3, [pc, #168]	; (8017760 <tcp_rexmit_fast+0xb8>)
 80176b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80176bc:	4929      	ldr	r1, [pc, #164]	; (8017764 <tcp_rexmit_fast+0xbc>)
 80176be:	482a      	ldr	r0, [pc, #168]	; (8017768 <tcp_rexmit_fast+0xc0>)
 80176c0:	f004 f8e8 	bl	801b894 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d044      	beq.n	8017756 <tcp_rexmit_fast+0xae>
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	8b5b      	ldrh	r3, [r3, #26]
 80176d0:	f003 0304 	and.w	r3, r3, #4
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d13e      	bne.n	8017756 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	f7ff ff79 	bl	80175d0 <tcp_rexmit>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d138      	bne.n	8017756 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80176f0:	4293      	cmp	r3, r2
 80176f2:	bf28      	it	cs
 80176f4:	4613      	movcs	r3, r2
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	0fda      	lsrs	r2, r3, #31
 80176fa:	4413      	add	r3, r2
 80176fc:	105b      	asrs	r3, r3, #1
 80176fe:	b29a      	uxth	r2, r3
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801770c:	461a      	mov	r2, r3
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017712:	005b      	lsls	r3, r3, #1
 8017714:	429a      	cmp	r2, r3
 8017716:	d206      	bcs.n	8017726 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	b29a      	uxth	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017730:	4619      	mov	r1, r3
 8017732:	0049      	lsls	r1, r1, #1
 8017734:	440b      	add	r3, r1
 8017736:	b29b      	uxth	r3, r3
 8017738:	4413      	add	r3, r2
 801773a:	b29a      	uxth	r2, r3
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	8b5b      	ldrh	r3, [r3, #26]
 8017746:	f043 0304 	orr.w	r3, r3, #4
 801774a:	b29a      	uxth	r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2200      	movs	r2, #0
 8017754:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017756:	bf00      	nop
 8017758:	3708      	adds	r7, #8
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	0801de10 	.word	0x0801de10
 8017764:	0801e4c8 	.word	0x0801e4c8
 8017768:	0801de64 	.word	0x0801de64

0801776c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b086      	sub	sp, #24
 8017770:	af00      	add	r7, sp, #0
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	607b      	str	r3, [r7, #4]
 8017776:	460b      	mov	r3, r1
 8017778:	817b      	strh	r3, [r7, #10]
 801777a:	4613      	mov	r3, r2
 801777c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801777e:	897a      	ldrh	r2, [r7, #10]
 8017780:	893b      	ldrh	r3, [r7, #8]
 8017782:	4413      	add	r3, r2
 8017784:	b29b      	uxth	r3, r3
 8017786:	3314      	adds	r3, #20
 8017788:	b29b      	uxth	r3, r3
 801778a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801778e:	4619      	mov	r1, r3
 8017790:	2022      	movs	r0, #34	; 0x22
 8017792:	f7fa fc17 	bl	8011fc4 <pbuf_alloc>
 8017796:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d04d      	beq.n	801783a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801779e:	897b      	ldrh	r3, [r7, #10]
 80177a0:	3313      	adds	r3, #19
 80177a2:	697a      	ldr	r2, [r7, #20]
 80177a4:	8952      	ldrh	r2, [r2, #10]
 80177a6:	4293      	cmp	r3, r2
 80177a8:	db06      	blt.n	80177b8 <tcp_output_alloc_header_common+0x4c>
 80177aa:	4b26      	ldr	r3, [pc, #152]	; (8017844 <tcp_output_alloc_header_common+0xd8>)
 80177ac:	f240 7223 	movw	r2, #1827	; 0x723
 80177b0:	4925      	ldr	r1, [pc, #148]	; (8017848 <tcp_output_alloc_header_common+0xdc>)
 80177b2:	4826      	ldr	r0, [pc, #152]	; (801784c <tcp_output_alloc_header_common+0xe0>)
 80177b4:	f004 f86e 	bl	801b894 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	685b      	ldr	r3, [r3, #4]
 80177bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80177be:	8c3b      	ldrh	r3, [r7, #32]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7f9 fb86 	bl	8010ed2 <lwip_htons>
 80177c6:	4603      	mov	r3, r0
 80177c8:	461a      	mov	r2, r3
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80177ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7f9 fb7e 	bl	8010ed2 <lwip_htons>
 80177d6:	4603      	mov	r3, r0
 80177d8:	461a      	mov	r2, r3
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	687a      	ldr	r2, [r7, #4]
 80177e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f7f9 fb89 	bl	8010efc <lwip_htonl>
 80177ea:	4602      	mov	r2, r0
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80177f0:	897b      	ldrh	r3, [r7, #10]
 80177f2:	089b      	lsrs	r3, r3, #2
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	3305      	adds	r3, #5
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	031b      	lsls	r3, r3, #12
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017802:	b29b      	uxth	r3, r3
 8017804:	4313      	orrs	r3, r2
 8017806:	b29b      	uxth	r3, r3
 8017808:	4618      	mov	r0, r3
 801780a:	f7f9 fb62 	bl	8010ed2 <lwip_htons>
 801780e:	4603      	mov	r3, r0
 8017810:	461a      	mov	r2, r3
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017816:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017818:	4618      	mov	r0, r3
 801781a:	f7f9 fb5a 	bl	8010ed2 <lwip_htons>
 801781e:	4603      	mov	r3, r0
 8017820:	461a      	mov	r2, r3
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	2200      	movs	r2, #0
 801782a:	741a      	strb	r2, [r3, #16]
 801782c:	2200      	movs	r2, #0
 801782e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	2200      	movs	r2, #0
 8017834:	749a      	strb	r2, [r3, #18]
 8017836:	2200      	movs	r2, #0
 8017838:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801783a:	697b      	ldr	r3, [r7, #20]
}
 801783c:	4618      	mov	r0, r3
 801783e:	3718      	adds	r7, #24
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}
 8017844:	0801de10 	.word	0x0801de10
 8017848:	0801e4e8 	.word	0x0801e4e8
 801784c:	0801de64 	.word	0x0801de64

08017850 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017850:	b5b0      	push	{r4, r5, r7, lr}
 8017852:	b08a      	sub	sp, #40	; 0x28
 8017854:	af04      	add	r7, sp, #16
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	607b      	str	r3, [r7, #4]
 801785a:	460b      	mov	r3, r1
 801785c:	817b      	strh	r3, [r7, #10]
 801785e:	4613      	mov	r3, r2
 8017860:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d106      	bne.n	8017876 <tcp_output_alloc_header+0x26>
 8017868:	4b15      	ldr	r3, [pc, #84]	; (80178c0 <tcp_output_alloc_header+0x70>)
 801786a:	f240 7242 	movw	r2, #1858	; 0x742
 801786e:	4915      	ldr	r1, [pc, #84]	; (80178c4 <tcp_output_alloc_header+0x74>)
 8017870:	4815      	ldr	r0, [pc, #84]	; (80178c8 <tcp_output_alloc_header+0x78>)
 8017872:	f004 f80f 	bl	801b894 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	8adb      	ldrh	r3, [r3, #22]
 801787e:	68fa      	ldr	r2, [r7, #12]
 8017880:	8b12      	ldrh	r2, [r2, #24]
 8017882:	68f9      	ldr	r1, [r7, #12]
 8017884:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017886:	893d      	ldrh	r5, [r7, #8]
 8017888:	897c      	ldrh	r4, [r7, #10]
 801788a:	9103      	str	r1, [sp, #12]
 801788c:	2110      	movs	r1, #16
 801788e:	9102      	str	r1, [sp, #8]
 8017890:	9201      	str	r2, [sp, #4]
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	462a      	mov	r2, r5
 8017898:	4621      	mov	r1, r4
 801789a:	f7ff ff67 	bl	801776c <tcp_output_alloc_header_common>
 801789e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80178a0:	697b      	ldr	r3, [r7, #20]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d006      	beq.n	80178b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80178ae:	441a      	add	r2, r3
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80178b4:	697b      	ldr	r3, [r7, #20]
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	3718      	adds	r7, #24
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bdb0      	pop	{r4, r5, r7, pc}
 80178be:	bf00      	nop
 80178c0:	0801de10 	.word	0x0801de10
 80178c4:	0801e518 	.word	0x0801e518
 80178c8:	0801de64 	.word	0x0801de64

080178cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b088      	sub	sp, #32
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	60b9      	str	r1, [r7, #8]
 80178d6:	4611      	mov	r1, r2
 80178d8:	461a      	mov	r2, r3
 80178da:	460b      	mov	r3, r1
 80178dc:	71fb      	strb	r3, [r7, #7]
 80178de:	4613      	mov	r3, r2
 80178e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80178e2:	2300      	movs	r3, #0
 80178e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d106      	bne.n	80178fa <tcp_output_fill_options+0x2e>
 80178ec:	4b12      	ldr	r3, [pc, #72]	; (8017938 <tcp_output_fill_options+0x6c>)
 80178ee:	f240 7256 	movw	r2, #1878	; 0x756
 80178f2:	4912      	ldr	r1, [pc, #72]	; (801793c <tcp_output_fill_options+0x70>)
 80178f4:	4812      	ldr	r0, [pc, #72]	; (8017940 <tcp_output_fill_options+0x74>)
 80178f6:	f003 ffcd 	bl	801b894 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80178fa:	68bb      	ldr	r3, [r7, #8]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017900:	69bb      	ldr	r3, [r7, #24]
 8017902:	3314      	adds	r3, #20
 8017904:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017906:	8bfb      	ldrh	r3, [r7, #30]
 8017908:	009b      	lsls	r3, r3, #2
 801790a:	461a      	mov	r2, r3
 801790c:	79fb      	ldrb	r3, [r7, #7]
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	f003 0304 	and.w	r3, r3, #4
 8017914:	4413      	add	r3, r2
 8017916:	3314      	adds	r3, #20
 8017918:	69ba      	ldr	r2, [r7, #24]
 801791a:	4413      	add	r3, r2
 801791c:	697a      	ldr	r2, [r7, #20]
 801791e:	429a      	cmp	r2, r3
 8017920:	d006      	beq.n	8017930 <tcp_output_fill_options+0x64>
 8017922:	4b05      	ldr	r3, [pc, #20]	; (8017938 <tcp_output_fill_options+0x6c>)
 8017924:	f240 7275 	movw	r2, #1909	; 0x775
 8017928:	4906      	ldr	r1, [pc, #24]	; (8017944 <tcp_output_fill_options+0x78>)
 801792a:	4805      	ldr	r0, [pc, #20]	; (8017940 <tcp_output_fill_options+0x74>)
 801792c:	f003 ffb2 	bl	801b894 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017930:	bf00      	nop
 8017932:	3720      	adds	r7, #32
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	0801de10 	.word	0x0801de10
 801793c:	0801e540 	.word	0x0801e540
 8017940:	0801de64 	.word	0x0801de64
 8017944:	0801e438 	.word	0x0801e438

08017948 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b08a      	sub	sp, #40	; 0x28
 801794c:	af04      	add	r7, sp, #16
 801794e:	60f8      	str	r0, [r7, #12]
 8017950:	60b9      	str	r1, [r7, #8]
 8017952:	607a      	str	r2, [r7, #4]
 8017954:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d106      	bne.n	801796a <tcp_output_control_segment+0x22>
 801795c:	4b1c      	ldr	r3, [pc, #112]	; (80179d0 <tcp_output_control_segment+0x88>)
 801795e:	f240 7287 	movw	r2, #1927	; 0x787
 8017962:	491c      	ldr	r1, [pc, #112]	; (80179d4 <tcp_output_control_segment+0x8c>)
 8017964:	481c      	ldr	r0, [pc, #112]	; (80179d8 <tcp_output_control_segment+0x90>)
 8017966:	f003 ff95 	bl	801b894 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801796a:	683a      	ldr	r2, [r7, #0]
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	68f8      	ldr	r0, [r7, #12]
 8017970:	f7fe ff40 	bl	80167f4 <tcp_route>
 8017974:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017976:	693b      	ldr	r3, [r7, #16]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d102      	bne.n	8017982 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801797c:	23fc      	movs	r3, #252	; 0xfc
 801797e:	75fb      	strb	r3, [r7, #23]
 8017980:	e01c      	b.n	80179bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d006      	beq.n	8017996 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	7adb      	ldrb	r3, [r3, #11]
 801798c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	7a9b      	ldrb	r3, [r3, #10]
 8017992:	757b      	strb	r3, [r7, #21]
 8017994:	e003      	b.n	801799e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017996:	23ff      	movs	r3, #255	; 0xff
 8017998:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801799a:	2300      	movs	r3, #0
 801799c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801799e:	7dba      	ldrb	r2, [r7, #22]
 80179a0:	693b      	ldr	r3, [r7, #16]
 80179a2:	9302      	str	r3, [sp, #8]
 80179a4:	2306      	movs	r3, #6
 80179a6:	9301      	str	r3, [sp, #4]
 80179a8:	7d7b      	ldrb	r3, [r7, #21]
 80179aa:	9300      	str	r3, [sp, #0]
 80179ac:	4613      	mov	r3, r2
 80179ae:	683a      	ldr	r2, [r7, #0]
 80179b0:	6879      	ldr	r1, [r7, #4]
 80179b2:	68b8      	ldr	r0, [r7, #8]
 80179b4:	f001 ff6e 	bl	8019894 <ip4_output_if>
 80179b8:	4603      	mov	r3, r0
 80179ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80179bc:	68b8      	ldr	r0, [r7, #8]
 80179be:	f7fa fde5 	bl	801258c <pbuf_free>
  return err;
 80179c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3718      	adds	r7, #24
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
 80179ce:	bf00      	nop
 80179d0:	0801de10 	.word	0x0801de10
 80179d4:	0801e568 	.word	0x0801e568
 80179d8:	0801de64 	.word	0x0801de64

080179dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80179dc:	b590      	push	{r4, r7, lr}
 80179de:	b08b      	sub	sp, #44	; 0x2c
 80179e0:	af04      	add	r7, sp, #16
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	607a      	str	r2, [r7, #4]
 80179e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d106      	bne.n	80179fe <tcp_rst+0x22>
 80179f0:	4b1e      	ldr	r3, [pc, #120]	; (8017a6c <tcp_rst+0x90>)
 80179f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80179f6:	491e      	ldr	r1, [pc, #120]	; (8017a70 <tcp_rst+0x94>)
 80179f8:	481e      	ldr	r0, [pc, #120]	; (8017a74 <tcp_rst+0x98>)
 80179fa:	f003 ff4b 	bl	801b894 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80179fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d106      	bne.n	8017a12 <tcp_rst+0x36>
 8017a04:	4b19      	ldr	r3, [pc, #100]	; (8017a6c <tcp_rst+0x90>)
 8017a06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017a0a:	491b      	ldr	r1, [pc, #108]	; (8017a78 <tcp_rst+0x9c>)
 8017a0c:	4819      	ldr	r0, [pc, #100]	; (8017a74 <tcp_rst+0x98>)
 8017a0e:	f003 ff41 	bl	801b894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a12:	2300      	movs	r3, #0
 8017a14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017a16:	2308      	movs	r3, #8
 8017a18:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017a1a:	7dfb      	ldrb	r3, [r7, #23]
 8017a1c:	b29c      	uxth	r4, r3
 8017a1e:	68b8      	ldr	r0, [r7, #8]
 8017a20:	f7f9 fa6c 	bl	8010efc <lwip_htonl>
 8017a24:	4602      	mov	r2, r0
 8017a26:	8abb      	ldrh	r3, [r7, #20]
 8017a28:	9303      	str	r3, [sp, #12]
 8017a2a:	2314      	movs	r3, #20
 8017a2c:	9302      	str	r3, [sp, #8]
 8017a2e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017a30:	9301      	str	r3, [sp, #4]
 8017a32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	4613      	mov	r3, r2
 8017a38:	2200      	movs	r2, #0
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f7ff fe95 	bl	801776c <tcp_output_alloc_header_common>
 8017a42:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017a44:	693b      	ldr	r3, [r7, #16]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d00c      	beq.n	8017a64 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a4a:	7dfb      	ldrb	r3, [r7, #23]
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	6939      	ldr	r1, [r7, #16]
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f7ff ff3b 	bl	80178cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a58:	683a      	ldr	r2, [r7, #0]
 8017a5a:	6939      	ldr	r1, [r7, #16]
 8017a5c:	68f8      	ldr	r0, [r7, #12]
 8017a5e:	f7ff ff73 	bl	8017948 <tcp_output_control_segment>
 8017a62:	e000      	b.n	8017a66 <tcp_rst+0x8a>
    return;
 8017a64:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017a66:	371c      	adds	r7, #28
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd90      	pop	{r4, r7, pc}
 8017a6c:	0801de10 	.word	0x0801de10
 8017a70:	0801e594 	.word	0x0801e594
 8017a74:	0801de64 	.word	0x0801de64
 8017a78:	0801e5b0 	.word	0x0801e5b0

08017a7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017a7c:	b590      	push	{r4, r7, lr}
 8017a7e:	b087      	sub	sp, #28
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017a84:	2300      	movs	r3, #0
 8017a86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d106      	bne.n	8017aa0 <tcp_send_empty_ack+0x24>
 8017a92:	4b28      	ldr	r3, [pc, #160]	; (8017b34 <tcp_send_empty_ack+0xb8>)
 8017a94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017a98:	4927      	ldr	r1, [pc, #156]	; (8017b38 <tcp_send_empty_ack+0xbc>)
 8017a9a:	4828      	ldr	r0, [pc, #160]	; (8017b3c <tcp_send_empty_ack+0xc0>)
 8017a9c:	f003 fefa 	bl	801b894 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017aa0:	7dfb      	ldrb	r3, [r7, #23]
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	f003 0304 	and.w	r3, r3, #4
 8017aaa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017aac:	7d7b      	ldrb	r3, [r7, #21]
 8017aae:	b29c      	uxth	r4, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7f9 fa21 	bl	8010efc <lwip_htonl>
 8017aba:	4603      	mov	r3, r0
 8017abc:	2200      	movs	r2, #0
 8017abe:	4621      	mov	r1, r4
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f7ff fec5 	bl	8017850 <tcp_output_alloc_header>
 8017ac6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d109      	bne.n	8017ae2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	8b5b      	ldrh	r3, [r3, #26]
 8017ad2:	f043 0303 	orr.w	r3, r3, #3
 8017ad6:	b29a      	uxth	r2, r3
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017adc:	f06f 0301 	mvn.w	r3, #1
 8017ae0:	e023      	b.n	8017b2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017ae2:	7dbb      	ldrb	r3, [r7, #22]
 8017ae4:	7dfa      	ldrb	r2, [r7, #23]
 8017ae6:	6939      	ldr	r1, [r7, #16]
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f7ff feef 	bl	80178cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	3304      	adds	r3, #4
 8017af4:	6939      	ldr	r1, [r7, #16]
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f7ff ff26 	bl	8017948 <tcp_output_control_segment>
 8017afc:	4603      	mov	r3, r0
 8017afe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d007      	beq.n	8017b18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	8b5b      	ldrh	r3, [r3, #26]
 8017b0c:	f043 0303 	orr.w	r3, r3, #3
 8017b10:	b29a      	uxth	r2, r3
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	835a      	strh	r2, [r3, #26]
 8017b16:	e006      	b.n	8017b26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	8b5b      	ldrh	r3, [r3, #26]
 8017b1c:	f023 0303 	bic.w	r3, r3, #3
 8017b20:	b29a      	uxth	r2, r3
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	371c      	adds	r7, #28
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd90      	pop	{r4, r7, pc}
 8017b32:	bf00      	nop
 8017b34:	0801de10 	.word	0x0801de10
 8017b38:	0801e5cc 	.word	0x0801e5cc
 8017b3c:	0801de64 	.word	0x0801de64

08017b40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017b40:	b590      	push	{r4, r7, lr}
 8017b42:	b087      	sub	sp, #28
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017b48:	2300      	movs	r3, #0
 8017b4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d106      	bne.n	8017b60 <tcp_keepalive+0x20>
 8017b52:	4b18      	ldr	r3, [pc, #96]	; (8017bb4 <tcp_keepalive+0x74>)
 8017b54:	f640 0224 	movw	r2, #2084	; 0x824
 8017b58:	4917      	ldr	r1, [pc, #92]	; (8017bb8 <tcp_keepalive+0x78>)
 8017b5a:	4818      	ldr	r0, [pc, #96]	; (8017bbc <tcp_keepalive+0x7c>)
 8017b5c:	f003 fe9a 	bl	801b894 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017b60:	7dfb      	ldrb	r3, [r7, #23]
 8017b62:	b29c      	uxth	r4, r3
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b68:	3b01      	subs	r3, #1
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7f9 f9c6 	bl	8010efc <lwip_htonl>
 8017b70:	4603      	mov	r3, r0
 8017b72:	2200      	movs	r2, #0
 8017b74:	4621      	mov	r1, r4
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7ff fe6a 	bl	8017850 <tcp_output_alloc_header>
 8017b7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d102      	bne.n	8017b8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017b84:	f04f 33ff 	mov.w	r3, #4294967295
 8017b88:	e010      	b.n	8017bac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017b8a:	7dfb      	ldrb	r3, [r7, #23]
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	6939      	ldr	r1, [r7, #16]
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f7ff fe9b 	bl	80178cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017b96:	687a      	ldr	r2, [r7, #4]
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	6939      	ldr	r1, [r7, #16]
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7ff fed2 	bl	8017948 <tcp_output_control_segment>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	371c      	adds	r7, #28
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd90      	pop	{r4, r7, pc}
 8017bb4:	0801de10 	.word	0x0801de10
 8017bb8:	0801e5ec 	.word	0x0801e5ec
 8017bbc:	0801de64 	.word	0x0801de64

08017bc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017bc0:	b590      	push	{r4, r7, lr}
 8017bc2:	b08b      	sub	sp, #44	; 0x2c
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017bc8:	2300      	movs	r3, #0
 8017bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d106      	bne.n	8017be2 <tcp_zero_window_probe+0x22>
 8017bd4:	4b4c      	ldr	r3, [pc, #304]	; (8017d08 <tcp_zero_window_probe+0x148>)
 8017bd6:	f640 024f 	movw	r2, #2127	; 0x84f
 8017bda:	494c      	ldr	r1, [pc, #304]	; (8017d0c <tcp_zero_window_probe+0x14c>)
 8017bdc:	484c      	ldr	r0, [pc, #304]	; (8017d10 <tcp_zero_window_probe+0x150>)
 8017bde:	f003 fe59 	bl	801b894 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017be6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017be8:	6a3b      	ldr	r3, [r7, #32]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d101      	bne.n	8017bf2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	e086      	b.n	8017d00 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017bf8:	2bff      	cmp	r3, #255	; 0xff
 8017bfa:	d007      	beq.n	8017c0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017c02:	3301      	adds	r3, #1
 8017c04:	b2da      	uxtb	r2, r3
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017c0c:	6a3b      	ldr	r3, [r7, #32]
 8017c0e:	68db      	ldr	r3, [r3, #12]
 8017c10:	899b      	ldrh	r3, [r3, #12]
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7f9 f95c 	bl	8010ed2 <lwip_htons>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	f003 0301 	and.w	r3, r3, #1
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d005      	beq.n	8017c32 <tcp_zero_window_probe+0x72>
 8017c26:	6a3b      	ldr	r3, [r7, #32]
 8017c28:	891b      	ldrh	r3, [r3, #8]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d101      	bne.n	8017c32 <tcp_zero_window_probe+0x72>
 8017c2e:	2301      	movs	r3, #1
 8017c30:	e000      	b.n	8017c34 <tcp_zero_window_probe+0x74>
 8017c32:	2300      	movs	r3, #0
 8017c34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017c36:	7ffb      	ldrb	r3, [r7, #31]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	bf0c      	ite	eq
 8017c3c:	2301      	moveq	r3, #1
 8017c3e:	2300      	movne	r3, #0
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c48:	b299      	uxth	r1, r3
 8017c4a:	6a3b      	ldr	r3, [r7, #32]
 8017c4c:	68db      	ldr	r3, [r3, #12]
 8017c4e:	685b      	ldr	r3, [r3, #4]
 8017c50:	8bba      	ldrh	r2, [r7, #28]
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	f7ff fdfc 	bl	8017850 <tcp_output_alloc_header>
 8017c58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d102      	bne.n	8017c66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017c60:	f04f 33ff 	mov.w	r3, #4294967295
 8017c64:	e04c      	b.n	8017d00 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017c6c:	7ffb      	ldrb	r3, [r7, #31]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d011      	beq.n	8017c96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	899b      	ldrh	r3, [r3, #12]
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	b21b      	sxth	r3, r3
 8017c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017c7e:	b21c      	sxth	r4, r3
 8017c80:	2011      	movs	r0, #17
 8017c82:	f7f9 f926 	bl	8010ed2 <lwip_htons>
 8017c86:	4603      	mov	r3, r0
 8017c88:	b21b      	sxth	r3, r3
 8017c8a:	4323      	orrs	r3, r4
 8017c8c:	b21b      	sxth	r3, r3
 8017c8e:	b29a      	uxth	r2, r3
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	819a      	strh	r2, [r3, #12]
 8017c94:	e010      	b.n	8017cb8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	3314      	adds	r3, #20
 8017c9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017c9e:	6a3b      	ldr	r3, [r7, #32]
 8017ca0:	6858      	ldr	r0, [r3, #4]
 8017ca2:	6a3b      	ldr	r3, [r7, #32]
 8017ca4:	685b      	ldr	r3, [r3, #4]
 8017ca6:	891a      	ldrh	r2, [r3, #8]
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
 8017caa:	891b      	ldrh	r3, [r3, #8]
 8017cac:	1ad3      	subs	r3, r2, r3
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	6939      	ldr	r1, [r7, #16]
 8017cb4:	f7fa fe54 	bl	8012960 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017cb8:	6a3b      	ldr	r3, [r7, #32]
 8017cba:	68db      	ldr	r3, [r3, #12]
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7f9 f91c 	bl	8010efc <lwip_htonl>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	3301      	adds	r3, #1
 8017cc8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	1ad3      	subs	r3, r2, r3
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	da02      	bge.n	8017cdc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	68fa      	ldr	r2, [r7, #12]
 8017cda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	69b9      	ldr	r1, [r7, #24]
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f7ff fdf1 	bl	80178cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017cea:	687a      	ldr	r2, [r7, #4]
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	3304      	adds	r3, #4
 8017cf0:	69b9      	ldr	r1, [r7, #24]
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f7ff fe28 	bl	8017948 <tcp_output_control_segment>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017cfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	372c      	adds	r7, #44	; 0x2c
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd90      	pop	{r4, r7, pc}
 8017d08:	0801de10 	.word	0x0801de10
 8017d0c:	0801e608 	.word	0x0801e608
 8017d10:	0801de64 	.word	0x0801de64

08017d14 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017d1c:	f7fa ff0e 	bl	8012b3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017d20:	4b0a      	ldr	r3, [pc, #40]	; (8017d4c <tcpip_tcp_timer+0x38>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d103      	bne.n	8017d30 <tcpip_tcp_timer+0x1c>
 8017d28:	4b09      	ldr	r3, [pc, #36]	; (8017d50 <tcpip_tcp_timer+0x3c>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d005      	beq.n	8017d3c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017d30:	2200      	movs	r2, #0
 8017d32:	4908      	ldr	r1, [pc, #32]	; (8017d54 <tcpip_tcp_timer+0x40>)
 8017d34:	20fa      	movs	r0, #250	; 0xfa
 8017d36:	f000 f8f3 	bl	8017f20 <sys_timeout>
 8017d3a:	e003      	b.n	8017d44 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017d3c:	4b06      	ldr	r3, [pc, #24]	; (8017d58 <tcpip_tcp_timer+0x44>)
 8017d3e:	2200      	movs	r2, #0
 8017d40:	601a      	str	r2, [r3, #0]
  }
}
 8017d42:	bf00      	nop
 8017d44:	bf00      	nop
 8017d46:	3708      	adds	r7, #8
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	20008624 	.word	0x20008624
 8017d50:	20008628 	.word	0x20008628
 8017d54:	08017d15 	.word	0x08017d15
 8017d58:	20008670 	.word	0x20008670

08017d5c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017d60:	4b0a      	ldr	r3, [pc, #40]	; (8017d8c <tcp_timer_needed+0x30>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d10f      	bne.n	8017d88 <tcp_timer_needed+0x2c>
 8017d68:	4b09      	ldr	r3, [pc, #36]	; (8017d90 <tcp_timer_needed+0x34>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d103      	bne.n	8017d78 <tcp_timer_needed+0x1c>
 8017d70:	4b08      	ldr	r3, [pc, #32]	; (8017d94 <tcp_timer_needed+0x38>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d007      	beq.n	8017d88 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017d78:	4b04      	ldr	r3, [pc, #16]	; (8017d8c <tcp_timer_needed+0x30>)
 8017d7a:	2201      	movs	r2, #1
 8017d7c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017d7e:	2200      	movs	r2, #0
 8017d80:	4905      	ldr	r1, [pc, #20]	; (8017d98 <tcp_timer_needed+0x3c>)
 8017d82:	20fa      	movs	r0, #250	; 0xfa
 8017d84:	f000 f8cc 	bl	8017f20 <sys_timeout>
  }
}
 8017d88:	bf00      	nop
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	20008670 	.word	0x20008670
 8017d90:	20008624 	.word	0x20008624
 8017d94:	20008628 	.word	0x20008628
 8017d98:	08017d15 	.word	0x08017d15

08017d9c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b086      	sub	sp, #24
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017da8:	2006      	movs	r0, #6
 8017daa:	f7f9 fd09 	bl	80117c0 <memp_malloc>
 8017dae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d109      	bne.n	8017dca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017db6:	693b      	ldr	r3, [r7, #16]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d151      	bne.n	8017e60 <sys_timeout_abs+0xc4>
 8017dbc:	4b2a      	ldr	r3, [pc, #168]	; (8017e68 <sys_timeout_abs+0xcc>)
 8017dbe:	22be      	movs	r2, #190	; 0xbe
 8017dc0:	492a      	ldr	r1, [pc, #168]	; (8017e6c <sys_timeout_abs+0xd0>)
 8017dc2:	482b      	ldr	r0, [pc, #172]	; (8017e70 <sys_timeout_abs+0xd4>)
 8017dc4:	f003 fd66 	bl	801b894 <iprintf>
    return;
 8017dc8:	e04a      	b.n	8017e60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	2200      	movs	r2, #0
 8017dce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	68ba      	ldr	r2, [r7, #8]
 8017dd4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017dd6:	693b      	ldr	r3, [r7, #16]
 8017dd8:	687a      	ldr	r2, [r7, #4]
 8017dda:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	68fa      	ldr	r2, [r7, #12]
 8017de0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017de2:	4b24      	ldr	r3, [pc, #144]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d103      	bne.n	8017df2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017dea:	4a22      	ldr	r2, [pc, #136]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	6013      	str	r3, [r2, #0]
    return;
 8017df0:	e037      	b.n	8017e62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	685a      	ldr	r2, [r3, #4]
 8017df6:	4b1f      	ldr	r3, [pc, #124]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	685b      	ldr	r3, [r3, #4]
 8017dfc:	1ad3      	subs	r3, r2, r3
 8017dfe:	0fdb      	lsrs	r3, r3, #31
 8017e00:	f003 0301 	and.w	r3, r3, #1
 8017e04:	b2db      	uxtb	r3, r3
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d007      	beq.n	8017e1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017e0a:	4b1a      	ldr	r3, [pc, #104]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017e0c:	681a      	ldr	r2, [r3, #0]
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017e12:	4a18      	ldr	r2, [pc, #96]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	6013      	str	r3, [r2, #0]
 8017e18:	e023      	b.n	8017e62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017e1a:	4b16      	ldr	r3, [pc, #88]	; (8017e74 <sys_timeout_abs+0xd8>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	617b      	str	r3, [r7, #20]
 8017e20:	e01a      	b.n	8017e58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d00b      	beq.n	8017e42 <sys_timeout_abs+0xa6>
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	685a      	ldr	r2, [r3, #4]
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	685b      	ldr	r3, [r3, #4]
 8017e34:	1ad3      	subs	r3, r2, r3
 8017e36:	0fdb      	lsrs	r3, r3, #31
 8017e38:	f003 0301 	and.w	r3, r3, #1
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d007      	beq.n	8017e52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	693a      	ldr	r2, [r7, #16]
 8017e4e:	601a      	str	r2, [r3, #0]
        break;
 8017e50:	e007      	b.n	8017e62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	617b      	str	r3, [r7, #20]
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1e1      	bne.n	8017e22 <sys_timeout_abs+0x86>
 8017e5e:	e000      	b.n	8017e62 <sys_timeout_abs+0xc6>
    return;
 8017e60:	bf00      	nop
      }
    }
  }
}
 8017e62:	3718      	adds	r7, #24
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}
 8017e68:	0801e62c 	.word	0x0801e62c
 8017e6c:	0801e660 	.word	0x0801e660
 8017e70:	0801e6a0 	.word	0x0801e6a0
 8017e74:	20008668 	.word	0x20008668

08017e78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b086      	sub	sp, #24
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	4798      	blx	r3

  now = sys_now();
 8017e8a:	f7f2 f951 	bl	800a130 <sys_now>
 8017e8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	4b0f      	ldr	r3, [pc, #60]	; (8017ed4 <lwip_cyclic_timer+0x5c>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	4413      	add	r3, r2
 8017e9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	1ad3      	subs	r3, r2, r3
 8017ea2:	0fdb      	lsrs	r3, r3, #31
 8017ea4:	f003 0301 	and.w	r3, r3, #1
 8017ea8:	b2db      	uxtb	r3, r3
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d009      	beq.n	8017ec2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	4413      	add	r3, r2
 8017eb6:	687a      	ldr	r2, [r7, #4]
 8017eb8:	4907      	ldr	r1, [pc, #28]	; (8017ed8 <lwip_cyclic_timer+0x60>)
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f7ff ff6e 	bl	8017d9c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017ec0:	e004      	b.n	8017ecc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	4904      	ldr	r1, [pc, #16]	; (8017ed8 <lwip_cyclic_timer+0x60>)
 8017ec6:	68f8      	ldr	r0, [r7, #12]
 8017ec8:	f7ff ff68 	bl	8017d9c <sys_timeout_abs>
}
 8017ecc:	bf00      	nop
 8017ece:	3718      	adds	r7, #24
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}
 8017ed4:	2000866c 	.word	0x2000866c
 8017ed8:	08017e79 	.word	0x08017e79

08017edc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	607b      	str	r3, [r7, #4]
 8017ee6:	e00e      	b.n	8017f06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017ee8:	4a0b      	ldr	r2, [pc, #44]	; (8017f18 <sys_timeouts_init+0x3c>)
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	00db      	lsls	r3, r3, #3
 8017ef4:	4a08      	ldr	r2, [pc, #32]	; (8017f18 <sys_timeouts_init+0x3c>)
 8017ef6:	4413      	add	r3, r2
 8017ef8:	461a      	mov	r2, r3
 8017efa:	4908      	ldr	r1, [pc, #32]	; (8017f1c <sys_timeouts_init+0x40>)
 8017efc:	f000 f810 	bl	8017f20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	3301      	adds	r3, #1
 8017f04:	607b      	str	r3, [r7, #4]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2b02      	cmp	r3, #2
 8017f0a:	d9ed      	bls.n	8017ee8 <sys_timeouts_init+0xc>
  }
}
 8017f0c:	bf00      	nop
 8017f0e:	bf00      	nop
 8017f10:	3708      	adds	r7, #8
 8017f12:	46bd      	mov	sp, r7
 8017f14:	bd80      	pop	{r7, pc}
 8017f16:	bf00      	nop
 8017f18:	0801f32c 	.word	0x0801f32c
 8017f1c:	08017e79 	.word	0x08017e79

08017f20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b086      	sub	sp, #24
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	60f8      	str	r0, [r7, #12]
 8017f28:	60b9      	str	r1, [r7, #8]
 8017f2a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f32:	d306      	bcc.n	8017f42 <sys_timeout+0x22>
 8017f34:	4b0a      	ldr	r3, [pc, #40]	; (8017f60 <sys_timeout+0x40>)
 8017f36:	f240 1229 	movw	r2, #297	; 0x129
 8017f3a:	490a      	ldr	r1, [pc, #40]	; (8017f64 <sys_timeout+0x44>)
 8017f3c:	480a      	ldr	r0, [pc, #40]	; (8017f68 <sys_timeout+0x48>)
 8017f3e:	f003 fca9 	bl	801b894 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017f42:	f7f2 f8f5 	bl	800a130 <sys_now>
 8017f46:	4602      	mov	r2, r0
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	4413      	add	r3, r2
 8017f4c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	68b9      	ldr	r1, [r7, #8]
 8017f52:	6978      	ldr	r0, [r7, #20]
 8017f54:	f7ff ff22 	bl	8017d9c <sys_timeout_abs>
#endif
}
 8017f58:	bf00      	nop
 8017f5a:	3718      	adds	r7, #24
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	0801e62c 	.word	0x0801e62c
 8017f64:	0801e6c8 	.word	0x0801e6c8
 8017f68:	0801e6a0 	.word	0x0801e6a0

08017f6c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017f72:	f7f2 f8dd 	bl	800a130 <sys_now>
 8017f76:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017f78:	4b1a      	ldr	r3, [pc, #104]	; (8017fe4 <sys_check_timeouts+0x78>)
 8017f7a:	781b      	ldrb	r3, [r3, #0]
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d001      	beq.n	8017f86 <sys_check_timeouts+0x1a>
 8017f82:	f7f9 ffc9 	bl	8011f18 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017f86:	4b18      	ldr	r3, [pc, #96]	; (8017fe8 <sys_check_timeouts+0x7c>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d022      	beq.n	8017fd8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	685b      	ldr	r3, [r3, #4]
 8017f96:	68fa      	ldr	r2, [r7, #12]
 8017f98:	1ad3      	subs	r3, r2, r3
 8017f9a:	0fdb      	lsrs	r3, r3, #31
 8017f9c:	f003 0301 	and.w	r3, r3, #1
 8017fa0:	b2db      	uxtb	r3, r3
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d11a      	bne.n	8017fdc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	4a0f      	ldr	r2, [pc, #60]	; (8017fe8 <sys_check_timeouts+0x7c>)
 8017fac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	689b      	ldr	r3, [r3, #8]
 8017fb2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	68db      	ldr	r3, [r3, #12]
 8017fb8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	4a0b      	ldr	r2, [pc, #44]	; (8017fec <sys_check_timeouts+0x80>)
 8017fc0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017fc2:	68b9      	ldr	r1, [r7, #8]
 8017fc4:	2006      	movs	r0, #6
 8017fc6:	f7f9 fc6b 	bl	80118a0 <memp_free>
    if (handler != NULL) {
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d0d3      	beq.n	8017f78 <sys_check_timeouts+0xc>
      handler(arg);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6838      	ldr	r0, [r7, #0]
 8017fd4:	4798      	blx	r3
  do {
 8017fd6:	e7cf      	b.n	8017f78 <sys_check_timeouts+0xc>
      return;
 8017fd8:	bf00      	nop
 8017fda:	e000      	b.n	8017fde <sys_check_timeouts+0x72>
      return;
 8017fdc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017fde:	3710      	adds	r7, #16
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}
 8017fe4:	20008615 	.word	0x20008615
 8017fe8:	20008668 	.word	0x20008668
 8017fec:	2000866c 	.word	0x2000866c

08017ff0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017ff4:	f003 fb4e 	bl	801b694 <rand>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018000:	b29b      	uxth	r3, r3
 8018002:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018006:	b29a      	uxth	r2, r3
 8018008:	4b01      	ldr	r3, [pc, #4]	; (8018010 <udp_init+0x20>)
 801800a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801800c:	bf00      	nop
 801800e:	bd80      	pop	{r7, pc}
 8018010:	20000134 	.word	0x20000134

08018014 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b084      	sub	sp, #16
 8018018:	af00      	add	r7, sp, #0
 801801a:	60f8      	str	r0, [r7, #12]
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	4613      	mov	r3, r2
 8018020:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d105      	bne.n	8018034 <udp_input_local_match+0x20>
 8018028:	4b27      	ldr	r3, [pc, #156]	; (80180c8 <udp_input_local_match+0xb4>)
 801802a:	2287      	movs	r2, #135	; 0x87
 801802c:	4927      	ldr	r1, [pc, #156]	; (80180cc <udp_input_local_match+0xb8>)
 801802e:	4828      	ldr	r0, [pc, #160]	; (80180d0 <udp_input_local_match+0xbc>)
 8018030:	f003 fc30 	bl	801b894 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d105      	bne.n	8018046 <udp_input_local_match+0x32>
 801803a:	4b23      	ldr	r3, [pc, #140]	; (80180c8 <udp_input_local_match+0xb4>)
 801803c:	2288      	movs	r2, #136	; 0x88
 801803e:	4925      	ldr	r1, [pc, #148]	; (80180d4 <udp_input_local_match+0xc0>)
 8018040:	4823      	ldr	r0, [pc, #140]	; (80180d0 <udp_input_local_match+0xbc>)
 8018042:	f003 fc27 	bl	801b894 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	7a1b      	ldrb	r3, [r3, #8]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d00b      	beq.n	8018066 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	7a1a      	ldrb	r2, [r3, #8]
 8018052:	4b21      	ldr	r3, [pc, #132]	; (80180d8 <udp_input_local_match+0xc4>)
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801805a:	3301      	adds	r3, #1
 801805c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801805e:	429a      	cmp	r2, r3
 8018060:	d001      	beq.n	8018066 <udp_input_local_match+0x52>
    return 0;
 8018062:	2300      	movs	r3, #0
 8018064:	e02b      	b.n	80180be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018066:	79fb      	ldrb	r3, [r7, #7]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d018      	beq.n	801809e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d013      	beq.n	801809a <udp_input_local_match+0x86>
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d00f      	beq.n	801809a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801807a:	4b17      	ldr	r3, [pc, #92]	; (80180d8 <udp_input_local_match+0xc4>)
 801807c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018082:	d00a      	beq.n	801809a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681a      	ldr	r2, [r3, #0]
 8018088:	4b13      	ldr	r3, [pc, #76]	; (80180d8 <udp_input_local_match+0xc4>)
 801808a:	695b      	ldr	r3, [r3, #20]
 801808c:	405a      	eors	r2, r3
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	3308      	adds	r3, #8
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018096:	2b00      	cmp	r3, #0
 8018098:	d110      	bne.n	80180bc <udp_input_local_match+0xa8>
          return 1;
 801809a:	2301      	movs	r3, #1
 801809c:	e00f      	b.n	80180be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d009      	beq.n	80180b8 <udp_input_local_match+0xa4>
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d005      	beq.n	80180b8 <udp_input_local_match+0xa4>
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	681a      	ldr	r2, [r3, #0]
 80180b0:	4b09      	ldr	r3, [pc, #36]	; (80180d8 <udp_input_local_match+0xc4>)
 80180b2:	695b      	ldr	r3, [r3, #20]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d101      	bne.n	80180bc <udp_input_local_match+0xa8>
        return 1;
 80180b8:	2301      	movs	r3, #1
 80180ba:	e000      	b.n	80180be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80180bc:	2300      	movs	r3, #0
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3710      	adds	r7, #16
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	0801e714 	.word	0x0801e714
 80180cc:	0801e744 	.word	0x0801e744
 80180d0:	0801e768 	.word	0x0801e768
 80180d4:	0801e790 	.word	0x0801e790
 80180d8:	200054e8 	.word	0x200054e8

080180dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80180dc:	b590      	push	{r4, r7, lr}
 80180de:	b08d      	sub	sp, #52	; 0x34
 80180e0:	af02      	add	r7, sp, #8
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80180e6:	2300      	movs	r3, #0
 80180e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d105      	bne.n	80180fc <udp_input+0x20>
 80180f0:	4b7c      	ldr	r3, [pc, #496]	; (80182e4 <udp_input+0x208>)
 80180f2:	22cf      	movs	r2, #207	; 0xcf
 80180f4:	497c      	ldr	r1, [pc, #496]	; (80182e8 <udp_input+0x20c>)
 80180f6:	487d      	ldr	r0, [pc, #500]	; (80182ec <udp_input+0x210>)
 80180f8:	f003 fbcc 	bl	801b894 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d105      	bne.n	801810e <udp_input+0x32>
 8018102:	4b78      	ldr	r3, [pc, #480]	; (80182e4 <udp_input+0x208>)
 8018104:	22d0      	movs	r2, #208	; 0xd0
 8018106:	497a      	ldr	r1, [pc, #488]	; (80182f0 <udp_input+0x214>)
 8018108:	4878      	ldr	r0, [pc, #480]	; (80182ec <udp_input+0x210>)
 801810a:	f003 fbc3 	bl	801b894 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	895b      	ldrh	r3, [r3, #10]
 8018112:	2b07      	cmp	r3, #7
 8018114:	d803      	bhi.n	801811e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018116:	6878      	ldr	r0, [r7, #4]
 8018118:	f7fa fa38 	bl	801258c <pbuf_free>
    goto end;
 801811c:	e0de      	b.n	80182dc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018124:	4b73      	ldr	r3, [pc, #460]	; (80182f4 <udp_input+0x218>)
 8018126:	695b      	ldr	r3, [r3, #20]
 8018128:	4a72      	ldr	r2, [pc, #456]	; (80182f4 <udp_input+0x218>)
 801812a:	6812      	ldr	r2, [r2, #0]
 801812c:	4611      	mov	r1, r2
 801812e:	4618      	mov	r0, r3
 8018130:	f001 fc88 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8018134:	4603      	mov	r3, r0
 8018136:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	b29b      	uxth	r3, r3
 801813e:	4618      	mov	r0, r3
 8018140:	f7f8 fec7 	bl	8010ed2 <lwip_htons>
 8018144:	4603      	mov	r3, r0
 8018146:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	885b      	ldrh	r3, [r3, #2]
 801814c:	b29b      	uxth	r3, r3
 801814e:	4618      	mov	r0, r3
 8018150:	f7f8 febf 	bl	8010ed2 <lwip_htons>
 8018154:	4603      	mov	r3, r0
 8018156:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018158:	2300      	movs	r3, #0
 801815a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801815c:	2300      	movs	r3, #0
 801815e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018160:	2300      	movs	r3, #0
 8018162:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018164:	4b64      	ldr	r3, [pc, #400]	; (80182f8 <udp_input+0x21c>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	627b      	str	r3, [r7, #36]	; 0x24
 801816a:	e054      	b.n	8018216 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816e:	8a5b      	ldrh	r3, [r3, #18]
 8018170:	89fa      	ldrh	r2, [r7, #14]
 8018172:	429a      	cmp	r2, r3
 8018174:	d14a      	bne.n	801820c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018176:	7cfb      	ldrb	r3, [r7, #19]
 8018178:	461a      	mov	r2, r3
 801817a:	6839      	ldr	r1, [r7, #0]
 801817c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801817e:	f7ff ff49 	bl	8018014 <udp_input_local_match>
 8018182:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018184:	2b00      	cmp	r3, #0
 8018186:	d041      	beq.n	801820c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	7c1b      	ldrb	r3, [r3, #16]
 801818c:	f003 0304 	and.w	r3, r3, #4
 8018190:	2b00      	cmp	r3, #0
 8018192:	d11d      	bne.n	80181d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d102      	bne.n	80181a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819c:	61fb      	str	r3, [r7, #28]
 801819e:	e017      	b.n	80181d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80181a0:	7cfb      	ldrb	r3, [r7, #19]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d014      	beq.n	80181d0 <udp_input+0xf4>
 80181a6:	4b53      	ldr	r3, [pc, #332]	; (80182f4 <udp_input+0x218>)
 80181a8:	695b      	ldr	r3, [r3, #20]
 80181aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ae:	d10f      	bne.n	80181d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	3304      	adds	r3, #4
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d008      	beq.n	80181d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c0:	681a      	ldr	r2, [r3, #0]
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	3304      	adds	r3, #4
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d101      	bne.n	80181d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80181cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	8a9b      	ldrh	r3, [r3, #20]
 80181d4:	8a3a      	ldrh	r2, [r7, #16]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d118      	bne.n	801820c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80181da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d005      	beq.n	80181ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80181e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e4:	685a      	ldr	r2, [r3, #4]
 80181e6:	4b43      	ldr	r3, [pc, #268]	; (80182f4 <udp_input+0x218>)
 80181e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d10e      	bne.n	801820c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80181ee:	6a3b      	ldr	r3, [r7, #32]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d014      	beq.n	801821e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80181f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f6:	68da      	ldr	r2, [r3, #12]
 80181f8:	6a3b      	ldr	r3, [r7, #32]
 80181fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80181fc:	4b3e      	ldr	r3, [pc, #248]	; (80182f8 <udp_input+0x21c>)
 80181fe:	681a      	ldr	r2, [r3, #0]
 8018200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018202:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018204:	4a3c      	ldr	r2, [pc, #240]	; (80182f8 <udp_input+0x21c>)
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801820a:	e008      	b.n	801821e <udp_input+0x142>
      }
    }

    prev = pcb;
 801820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018212:	68db      	ldr	r3, [r3, #12]
 8018214:	627b      	str	r3, [r7, #36]	; 0x24
 8018216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018218:	2b00      	cmp	r3, #0
 801821a:	d1a7      	bne.n	801816c <udp_input+0x90>
 801821c:	e000      	b.n	8018220 <udp_input+0x144>
        break;
 801821e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018222:	2b00      	cmp	r3, #0
 8018224:	d101      	bne.n	801822a <udp_input+0x14e>
    pcb = uncon_pcb;
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822c:	2b00      	cmp	r3, #0
 801822e:	d002      	beq.n	8018236 <udp_input+0x15a>
    for_us = 1;
 8018230:	2301      	movs	r3, #1
 8018232:	76fb      	strb	r3, [r7, #27]
 8018234:	e00a      	b.n	801824c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	3304      	adds	r3, #4
 801823a:	681a      	ldr	r2, [r3, #0]
 801823c:	4b2d      	ldr	r3, [pc, #180]	; (80182f4 <udp_input+0x218>)
 801823e:	695b      	ldr	r3, [r3, #20]
 8018240:	429a      	cmp	r2, r3
 8018242:	bf0c      	ite	eq
 8018244:	2301      	moveq	r3, #1
 8018246:	2300      	movne	r3, #0
 8018248:	b2db      	uxtb	r3, r3
 801824a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801824c:	7efb      	ldrb	r3, [r7, #27]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d041      	beq.n	80182d6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018252:	2108      	movs	r1, #8
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f7fa f913 	bl	8012480 <pbuf_remove_header>
 801825a:	4603      	mov	r3, r0
 801825c:	2b00      	cmp	r3, #0
 801825e:	d00a      	beq.n	8018276 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018260:	4b20      	ldr	r3, [pc, #128]	; (80182e4 <udp_input+0x208>)
 8018262:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018266:	4925      	ldr	r1, [pc, #148]	; (80182fc <udp_input+0x220>)
 8018268:	4820      	ldr	r0, [pc, #128]	; (80182ec <udp_input+0x210>)
 801826a:	f003 fb13 	bl	801b894 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f7fa f98c 	bl	801258c <pbuf_free>
      goto end;
 8018274:	e032      	b.n	80182dc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018278:	2b00      	cmp	r3, #0
 801827a:	d012      	beq.n	80182a2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827e:	699b      	ldr	r3, [r3, #24]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d00a      	beq.n	801829a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018286:	699c      	ldr	r4, [r3, #24]
 8018288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828a:	69d8      	ldr	r0, [r3, #28]
 801828c:	8a3b      	ldrh	r3, [r7, #16]
 801828e:	9300      	str	r3, [sp, #0]
 8018290:	4b1b      	ldr	r3, [pc, #108]	; (8018300 <udp_input+0x224>)
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018296:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018298:	e021      	b.n	80182de <udp_input+0x202>
        pbuf_free(p);
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	f7fa f976 	bl	801258c <pbuf_free>
        goto end;
 80182a0:	e01c      	b.n	80182dc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80182a2:	7cfb      	ldrb	r3, [r7, #19]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d112      	bne.n	80182ce <udp_input+0x1f2>
 80182a8:	4b12      	ldr	r3, [pc, #72]	; (80182f4 <udp_input+0x218>)
 80182aa:	695b      	ldr	r3, [r3, #20]
 80182ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182b0:	2be0      	cmp	r3, #224	; 0xe0
 80182b2:	d00c      	beq.n	80182ce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80182b4:	4b0f      	ldr	r3, [pc, #60]	; (80182f4 <udp_input+0x218>)
 80182b6:	899b      	ldrh	r3, [r3, #12]
 80182b8:	3308      	adds	r3, #8
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	b21b      	sxth	r3, r3
 80182be:	4619      	mov	r1, r3
 80182c0:	6878      	ldr	r0, [r7, #4]
 80182c2:	f7fa f950 	bl	8012566 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80182c6:	2103      	movs	r1, #3
 80182c8:	6878      	ldr	r0, [r7, #4]
 80182ca:	f001 f89b 	bl	8019404 <icmp_dest_unreach>
      pbuf_free(p);
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f7fa f95c 	bl	801258c <pbuf_free>
  return;
 80182d4:	e003      	b.n	80182de <udp_input+0x202>
    pbuf_free(p);
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f7fa f958 	bl	801258c <pbuf_free>
  return;
 80182dc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80182de:	372c      	adds	r7, #44	; 0x2c
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd90      	pop	{r4, r7, pc}
 80182e4:	0801e714 	.word	0x0801e714
 80182e8:	0801e7b8 	.word	0x0801e7b8
 80182ec:	0801e768 	.word	0x0801e768
 80182f0:	0801e7d0 	.word	0x0801e7d0
 80182f4:	200054e8 	.word	0x200054e8
 80182f8:	20008674 	.word	0x20008674
 80182fc:	0801e7ec 	.word	0x0801e7ec
 8018300:	200054f8 	.word	0x200054f8

08018304 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018304:	b480      	push	{r7}
 8018306:	b085      	sub	sp, #20
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d01e      	beq.n	8018352 <udp_netif_ip_addr_changed+0x4e>
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d01a      	beq.n	8018352 <udp_netif_ip_addr_changed+0x4e>
 801831c:	683b      	ldr	r3, [r7, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d017      	beq.n	8018352 <udp_netif_ip_addr_changed+0x4e>
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d013      	beq.n	8018352 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801832a:	4b0d      	ldr	r3, [pc, #52]	; (8018360 <udp_netif_ip_addr_changed+0x5c>)
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	60fb      	str	r3, [r7, #12]
 8018330:	e00c      	b.n	801834c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	681a      	ldr	r2, [r3, #0]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	429a      	cmp	r2, r3
 801833c:	d103      	bne.n	8018346 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	68db      	ldr	r3, [r3, #12]
 801834a:	60fb      	str	r3, [r7, #12]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d1ef      	bne.n	8018332 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018352:	bf00      	nop
 8018354:	3714      	adds	r7, #20
 8018356:	46bd      	mov	sp, r7
 8018358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop
 8018360:	20008674 	.word	0x20008674

08018364 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801836c:	4915      	ldr	r1, [pc, #84]	; (80183c4 <etharp_free_entry+0x60>)
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	4613      	mov	r3, r2
 8018372:	005b      	lsls	r3, r3, #1
 8018374:	4413      	add	r3, r2
 8018376:	00db      	lsls	r3, r3, #3
 8018378:	440b      	add	r3, r1
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d013      	beq.n	80183a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018380:	4910      	ldr	r1, [pc, #64]	; (80183c4 <etharp_free_entry+0x60>)
 8018382:	687a      	ldr	r2, [r7, #4]
 8018384:	4613      	mov	r3, r2
 8018386:	005b      	lsls	r3, r3, #1
 8018388:	4413      	add	r3, r2
 801838a:	00db      	lsls	r3, r3, #3
 801838c:	440b      	add	r3, r1
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4618      	mov	r0, r3
 8018392:	f7fa f8fb 	bl	801258c <pbuf_free>
    arp_table[i].q = NULL;
 8018396:	490b      	ldr	r1, [pc, #44]	; (80183c4 <etharp_free_entry+0x60>)
 8018398:	687a      	ldr	r2, [r7, #4]
 801839a:	4613      	mov	r3, r2
 801839c:	005b      	lsls	r3, r3, #1
 801839e:	4413      	add	r3, r2
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	440b      	add	r3, r1
 80183a4:	2200      	movs	r2, #0
 80183a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80183a8:	4906      	ldr	r1, [pc, #24]	; (80183c4 <etharp_free_entry+0x60>)
 80183aa:	687a      	ldr	r2, [r7, #4]
 80183ac:	4613      	mov	r3, r2
 80183ae:	005b      	lsls	r3, r3, #1
 80183b0:	4413      	add	r3, r2
 80183b2:	00db      	lsls	r3, r3, #3
 80183b4:	440b      	add	r3, r1
 80183b6:	3314      	adds	r3, #20
 80183b8:	2200      	movs	r2, #0
 80183ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	20008678 	.word	0x20008678

080183c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183ce:	2300      	movs	r3, #0
 80183d0:	607b      	str	r3, [r7, #4]
 80183d2:	e096      	b.n	8018502 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80183d4:	494f      	ldr	r1, [pc, #316]	; (8018514 <etharp_tmr+0x14c>)
 80183d6:	687a      	ldr	r2, [r7, #4]
 80183d8:	4613      	mov	r3, r2
 80183da:	005b      	lsls	r3, r3, #1
 80183dc:	4413      	add	r3, r2
 80183de:	00db      	lsls	r3, r3, #3
 80183e0:	440b      	add	r3, r1
 80183e2:	3314      	adds	r3, #20
 80183e4:	781b      	ldrb	r3, [r3, #0]
 80183e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80183e8:	78fb      	ldrb	r3, [r7, #3]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	f000 8086 	beq.w	80184fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80183f0:	4948      	ldr	r1, [pc, #288]	; (8018514 <etharp_tmr+0x14c>)
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	4613      	mov	r3, r2
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	4413      	add	r3, r2
 80183fa:	00db      	lsls	r3, r3, #3
 80183fc:	440b      	add	r3, r1
 80183fe:	3312      	adds	r3, #18
 8018400:	881b      	ldrh	r3, [r3, #0]
 8018402:	3301      	adds	r3, #1
 8018404:	b298      	uxth	r0, r3
 8018406:	4943      	ldr	r1, [pc, #268]	; (8018514 <etharp_tmr+0x14c>)
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	4613      	mov	r3, r2
 801840c:	005b      	lsls	r3, r3, #1
 801840e:	4413      	add	r3, r2
 8018410:	00db      	lsls	r3, r3, #3
 8018412:	440b      	add	r3, r1
 8018414:	3312      	adds	r3, #18
 8018416:	4602      	mov	r2, r0
 8018418:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801841a:	493e      	ldr	r1, [pc, #248]	; (8018514 <etharp_tmr+0x14c>)
 801841c:	687a      	ldr	r2, [r7, #4]
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	440b      	add	r3, r1
 8018428:	3312      	adds	r3, #18
 801842a:	881b      	ldrh	r3, [r3, #0]
 801842c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018430:	d215      	bcs.n	801845e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018432:	4938      	ldr	r1, [pc, #224]	; (8018514 <etharp_tmr+0x14c>)
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	4613      	mov	r3, r2
 8018438:	005b      	lsls	r3, r3, #1
 801843a:	4413      	add	r3, r2
 801843c:	00db      	lsls	r3, r3, #3
 801843e:	440b      	add	r3, r1
 8018440:	3314      	adds	r3, #20
 8018442:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018444:	2b01      	cmp	r3, #1
 8018446:	d10e      	bne.n	8018466 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018448:	4932      	ldr	r1, [pc, #200]	; (8018514 <etharp_tmr+0x14c>)
 801844a:	687a      	ldr	r2, [r7, #4]
 801844c:	4613      	mov	r3, r2
 801844e:	005b      	lsls	r3, r3, #1
 8018450:	4413      	add	r3, r2
 8018452:	00db      	lsls	r3, r3, #3
 8018454:	440b      	add	r3, r1
 8018456:	3312      	adds	r3, #18
 8018458:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801845a:	2b04      	cmp	r3, #4
 801845c:	d903      	bls.n	8018466 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	f7ff ff80 	bl	8018364 <etharp_free_entry>
 8018464:	e04a      	b.n	80184fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018466:	492b      	ldr	r1, [pc, #172]	; (8018514 <etharp_tmr+0x14c>)
 8018468:	687a      	ldr	r2, [r7, #4]
 801846a:	4613      	mov	r3, r2
 801846c:	005b      	lsls	r3, r3, #1
 801846e:	4413      	add	r3, r2
 8018470:	00db      	lsls	r3, r3, #3
 8018472:	440b      	add	r3, r1
 8018474:	3314      	adds	r3, #20
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	2b03      	cmp	r3, #3
 801847a:	d10a      	bne.n	8018492 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801847c:	4925      	ldr	r1, [pc, #148]	; (8018514 <etharp_tmr+0x14c>)
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	4613      	mov	r3, r2
 8018482:	005b      	lsls	r3, r3, #1
 8018484:	4413      	add	r3, r2
 8018486:	00db      	lsls	r3, r3, #3
 8018488:	440b      	add	r3, r1
 801848a:	3314      	adds	r3, #20
 801848c:	2204      	movs	r2, #4
 801848e:	701a      	strb	r2, [r3, #0]
 8018490:	e034      	b.n	80184fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018492:	4920      	ldr	r1, [pc, #128]	; (8018514 <etharp_tmr+0x14c>)
 8018494:	687a      	ldr	r2, [r7, #4]
 8018496:	4613      	mov	r3, r2
 8018498:	005b      	lsls	r3, r3, #1
 801849a:	4413      	add	r3, r2
 801849c:	00db      	lsls	r3, r3, #3
 801849e:	440b      	add	r3, r1
 80184a0:	3314      	adds	r3, #20
 80184a2:	781b      	ldrb	r3, [r3, #0]
 80184a4:	2b04      	cmp	r3, #4
 80184a6:	d10a      	bne.n	80184be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80184a8:	491a      	ldr	r1, [pc, #104]	; (8018514 <etharp_tmr+0x14c>)
 80184aa:	687a      	ldr	r2, [r7, #4]
 80184ac:	4613      	mov	r3, r2
 80184ae:	005b      	lsls	r3, r3, #1
 80184b0:	4413      	add	r3, r2
 80184b2:	00db      	lsls	r3, r3, #3
 80184b4:	440b      	add	r3, r1
 80184b6:	3314      	adds	r3, #20
 80184b8:	2202      	movs	r2, #2
 80184ba:	701a      	strb	r2, [r3, #0]
 80184bc:	e01e      	b.n	80184fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80184be:	4915      	ldr	r1, [pc, #84]	; (8018514 <etharp_tmr+0x14c>)
 80184c0:	687a      	ldr	r2, [r7, #4]
 80184c2:	4613      	mov	r3, r2
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	4413      	add	r3, r2
 80184c8:	00db      	lsls	r3, r3, #3
 80184ca:	440b      	add	r3, r1
 80184cc:	3314      	adds	r3, #20
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d113      	bne.n	80184fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80184d4:	490f      	ldr	r1, [pc, #60]	; (8018514 <etharp_tmr+0x14c>)
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	4613      	mov	r3, r2
 80184da:	005b      	lsls	r3, r3, #1
 80184dc:	4413      	add	r3, r2
 80184de:	00db      	lsls	r3, r3, #3
 80184e0:	440b      	add	r3, r1
 80184e2:	3308      	adds	r3, #8
 80184e4:	6818      	ldr	r0, [r3, #0]
 80184e6:	687a      	ldr	r2, [r7, #4]
 80184e8:	4613      	mov	r3, r2
 80184ea:	005b      	lsls	r3, r3, #1
 80184ec:	4413      	add	r3, r2
 80184ee:	00db      	lsls	r3, r3, #3
 80184f0:	4a08      	ldr	r2, [pc, #32]	; (8018514 <etharp_tmr+0x14c>)
 80184f2:	4413      	add	r3, r2
 80184f4:	3304      	adds	r3, #4
 80184f6:	4619      	mov	r1, r3
 80184f8:	f000 fe6e 	bl	80191d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	3301      	adds	r3, #1
 8018500:	607b      	str	r3, [r7, #4]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	2b09      	cmp	r3, #9
 8018506:	f77f af65 	ble.w	80183d4 <etharp_tmr+0xc>
      }
    }
  }
}
 801850a:	bf00      	nop
 801850c:	bf00      	nop
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	20008678 	.word	0x20008678

08018518 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b08a      	sub	sp, #40	; 0x28
 801851c:	af00      	add	r7, sp, #0
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	460b      	mov	r3, r1
 8018522:	607a      	str	r2, [r7, #4]
 8018524:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018526:	230a      	movs	r3, #10
 8018528:	84fb      	strh	r3, [r7, #38]	; 0x26
 801852a:	230a      	movs	r3, #10
 801852c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801852e:	230a      	movs	r3, #10
 8018530:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018536:	230a      	movs	r3, #10
 8018538:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801853a:	2300      	movs	r3, #0
 801853c:	83bb      	strh	r3, [r7, #28]
 801853e:	2300      	movs	r3, #0
 8018540:	837b      	strh	r3, [r7, #26]
 8018542:	2300      	movs	r3, #0
 8018544:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018546:	2300      	movs	r3, #0
 8018548:	843b      	strh	r3, [r7, #32]
 801854a:	e0ae      	b.n	80186aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801854c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018550:	49a6      	ldr	r1, [pc, #664]	; (80187ec <etharp_find_entry+0x2d4>)
 8018552:	4613      	mov	r3, r2
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4413      	add	r3, r2
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	440b      	add	r3, r1
 801855c:	3314      	adds	r3, #20
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018562:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018566:	2b0a      	cmp	r3, #10
 8018568:	d105      	bne.n	8018576 <etharp_find_entry+0x5e>
 801856a:	7dfb      	ldrb	r3, [r7, #23]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d102      	bne.n	8018576 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018570:	8c3b      	ldrh	r3, [r7, #32]
 8018572:	847b      	strh	r3, [r7, #34]	; 0x22
 8018574:	e095      	b.n	80186a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018576:	7dfb      	ldrb	r3, [r7, #23]
 8018578:	2b00      	cmp	r3, #0
 801857a:	f000 8092 	beq.w	80186a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801857e:	7dfb      	ldrb	r3, [r7, #23]
 8018580:	2b01      	cmp	r3, #1
 8018582:	d009      	beq.n	8018598 <etharp_find_entry+0x80>
 8018584:	7dfb      	ldrb	r3, [r7, #23]
 8018586:	2b01      	cmp	r3, #1
 8018588:	d806      	bhi.n	8018598 <etharp_find_entry+0x80>
 801858a:	4b99      	ldr	r3, [pc, #612]	; (80187f0 <etharp_find_entry+0x2d8>)
 801858c:	f240 1223 	movw	r2, #291	; 0x123
 8018590:	4998      	ldr	r1, [pc, #608]	; (80187f4 <etharp_find_entry+0x2dc>)
 8018592:	4899      	ldr	r0, [pc, #612]	; (80187f8 <etharp_find_entry+0x2e0>)
 8018594:	f003 f97e 	bl	801b894 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d020      	beq.n	80185e0 <etharp_find_entry+0xc8>
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	6819      	ldr	r1, [r3, #0]
 80185a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185a6:	4891      	ldr	r0, [pc, #580]	; (80187ec <etharp_find_entry+0x2d4>)
 80185a8:	4613      	mov	r3, r2
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	4403      	add	r3, r0
 80185b2:	3304      	adds	r3, #4
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4299      	cmp	r1, r3
 80185b8:	d112      	bne.n	80185e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d00c      	beq.n	80185da <etharp_find_entry+0xc2>
 80185c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185c4:	4989      	ldr	r1, [pc, #548]	; (80187ec <etharp_find_entry+0x2d4>)
 80185c6:	4613      	mov	r3, r2
 80185c8:	005b      	lsls	r3, r3, #1
 80185ca:	4413      	add	r3, r2
 80185cc:	00db      	lsls	r3, r3, #3
 80185ce:	440b      	add	r3, r1
 80185d0:	3308      	adds	r3, #8
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	687a      	ldr	r2, [r7, #4]
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d102      	bne.n	80185e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80185da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80185de:	e100      	b.n	80187e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80185e0:	7dfb      	ldrb	r3, [r7, #23]
 80185e2:	2b01      	cmp	r3, #1
 80185e4:	d140      	bne.n	8018668 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80185e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185ea:	4980      	ldr	r1, [pc, #512]	; (80187ec <etharp_find_entry+0x2d4>)
 80185ec:	4613      	mov	r3, r2
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	4413      	add	r3, r2
 80185f2:	00db      	lsls	r3, r3, #3
 80185f4:	440b      	add	r3, r1
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d01a      	beq.n	8018632 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80185fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018600:	497a      	ldr	r1, [pc, #488]	; (80187ec <etharp_find_entry+0x2d4>)
 8018602:	4613      	mov	r3, r2
 8018604:	005b      	lsls	r3, r3, #1
 8018606:	4413      	add	r3, r2
 8018608:	00db      	lsls	r3, r3, #3
 801860a:	440b      	add	r3, r1
 801860c:	3312      	adds	r3, #18
 801860e:	881b      	ldrh	r3, [r3, #0]
 8018610:	8bba      	ldrh	r2, [r7, #28]
 8018612:	429a      	cmp	r2, r3
 8018614:	d845      	bhi.n	80186a2 <etharp_find_entry+0x18a>
            old_queue = i;
 8018616:	8c3b      	ldrh	r3, [r7, #32]
 8018618:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801861a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801861e:	4973      	ldr	r1, [pc, #460]	; (80187ec <etharp_find_entry+0x2d4>)
 8018620:	4613      	mov	r3, r2
 8018622:	005b      	lsls	r3, r3, #1
 8018624:	4413      	add	r3, r2
 8018626:	00db      	lsls	r3, r3, #3
 8018628:	440b      	add	r3, r1
 801862a:	3312      	adds	r3, #18
 801862c:	881b      	ldrh	r3, [r3, #0]
 801862e:	83bb      	strh	r3, [r7, #28]
 8018630:	e037      	b.n	80186a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018636:	496d      	ldr	r1, [pc, #436]	; (80187ec <etharp_find_entry+0x2d4>)
 8018638:	4613      	mov	r3, r2
 801863a:	005b      	lsls	r3, r3, #1
 801863c:	4413      	add	r3, r2
 801863e:	00db      	lsls	r3, r3, #3
 8018640:	440b      	add	r3, r1
 8018642:	3312      	adds	r3, #18
 8018644:	881b      	ldrh	r3, [r3, #0]
 8018646:	8b7a      	ldrh	r2, [r7, #26]
 8018648:	429a      	cmp	r2, r3
 801864a:	d82a      	bhi.n	80186a2 <etharp_find_entry+0x18a>
            old_pending = i;
 801864c:	8c3b      	ldrh	r3, [r7, #32]
 801864e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018654:	4965      	ldr	r1, [pc, #404]	; (80187ec <etharp_find_entry+0x2d4>)
 8018656:	4613      	mov	r3, r2
 8018658:	005b      	lsls	r3, r3, #1
 801865a:	4413      	add	r3, r2
 801865c:	00db      	lsls	r3, r3, #3
 801865e:	440b      	add	r3, r1
 8018660:	3312      	adds	r3, #18
 8018662:	881b      	ldrh	r3, [r3, #0]
 8018664:	837b      	strh	r3, [r7, #26]
 8018666:	e01c      	b.n	80186a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018668:	7dfb      	ldrb	r3, [r7, #23]
 801866a:	2b01      	cmp	r3, #1
 801866c:	d919      	bls.n	80186a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801866e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018672:	495e      	ldr	r1, [pc, #376]	; (80187ec <etharp_find_entry+0x2d4>)
 8018674:	4613      	mov	r3, r2
 8018676:	005b      	lsls	r3, r3, #1
 8018678:	4413      	add	r3, r2
 801867a:	00db      	lsls	r3, r3, #3
 801867c:	440b      	add	r3, r1
 801867e:	3312      	adds	r3, #18
 8018680:	881b      	ldrh	r3, [r3, #0]
 8018682:	8b3a      	ldrh	r2, [r7, #24]
 8018684:	429a      	cmp	r2, r3
 8018686:	d80c      	bhi.n	80186a2 <etharp_find_entry+0x18a>
            old_stable = i;
 8018688:	8c3b      	ldrh	r3, [r7, #32]
 801868a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801868c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018690:	4956      	ldr	r1, [pc, #344]	; (80187ec <etharp_find_entry+0x2d4>)
 8018692:	4613      	mov	r3, r2
 8018694:	005b      	lsls	r3, r3, #1
 8018696:	4413      	add	r3, r2
 8018698:	00db      	lsls	r3, r3, #3
 801869a:	440b      	add	r3, r1
 801869c:	3312      	adds	r3, #18
 801869e:	881b      	ldrh	r3, [r3, #0]
 80186a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186a2:	8c3b      	ldrh	r3, [r7, #32]
 80186a4:	3301      	adds	r3, #1
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	843b      	strh	r3, [r7, #32]
 80186aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186ae:	2b09      	cmp	r3, #9
 80186b0:	f77f af4c 	ble.w	801854c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80186b4:	7afb      	ldrb	r3, [r7, #11]
 80186b6:	f003 0302 	and.w	r3, r3, #2
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d108      	bne.n	80186d0 <etharp_find_entry+0x1b8>
 80186be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80186c2:	2b0a      	cmp	r3, #10
 80186c4:	d107      	bne.n	80186d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80186c6:	7afb      	ldrb	r3, [r7, #11]
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d102      	bne.n	80186d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80186d0:	f04f 33ff 	mov.w	r3, #4294967295
 80186d4:	e085      	b.n	80187e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80186d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80186da:	2b09      	cmp	r3, #9
 80186dc:	dc02      	bgt.n	80186e4 <etharp_find_entry+0x1cc>
    i = empty;
 80186de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186e0:	843b      	strh	r3, [r7, #32]
 80186e2:	e039      	b.n	8018758 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80186e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80186e8:	2b09      	cmp	r3, #9
 80186ea:	dc14      	bgt.n	8018716 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80186ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80186f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186f4:	493d      	ldr	r1, [pc, #244]	; (80187ec <etharp_find_entry+0x2d4>)
 80186f6:	4613      	mov	r3, r2
 80186f8:	005b      	lsls	r3, r3, #1
 80186fa:	4413      	add	r3, r2
 80186fc:	00db      	lsls	r3, r3, #3
 80186fe:	440b      	add	r3, r1
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d018      	beq.n	8018738 <etharp_find_entry+0x220>
 8018706:	4b3a      	ldr	r3, [pc, #232]	; (80187f0 <etharp_find_entry+0x2d8>)
 8018708:	f240 126d 	movw	r2, #365	; 0x16d
 801870c:	493b      	ldr	r1, [pc, #236]	; (80187fc <etharp_find_entry+0x2e4>)
 801870e:	483a      	ldr	r0, [pc, #232]	; (80187f8 <etharp_find_entry+0x2e0>)
 8018710:	f003 f8c0 	bl	801b894 <iprintf>
 8018714:	e010      	b.n	8018738 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018716:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801871a:	2b09      	cmp	r3, #9
 801871c:	dc02      	bgt.n	8018724 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801871e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018720:	843b      	strh	r3, [r7, #32]
 8018722:	e009      	b.n	8018738 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018724:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018728:	2b09      	cmp	r3, #9
 801872a:	dc02      	bgt.n	8018732 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801872c:	8bfb      	ldrh	r3, [r7, #30]
 801872e:	843b      	strh	r3, [r7, #32]
 8018730:	e002      	b.n	8018738 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018732:	f04f 33ff 	mov.w	r3, #4294967295
 8018736:	e054      	b.n	80187e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018738:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801873c:	2b09      	cmp	r3, #9
 801873e:	dd06      	ble.n	801874e <etharp_find_entry+0x236>
 8018740:	4b2b      	ldr	r3, [pc, #172]	; (80187f0 <etharp_find_entry+0x2d8>)
 8018742:	f240 127f 	movw	r2, #383	; 0x17f
 8018746:	492e      	ldr	r1, [pc, #184]	; (8018800 <etharp_find_entry+0x2e8>)
 8018748:	482b      	ldr	r0, [pc, #172]	; (80187f8 <etharp_find_entry+0x2e0>)
 801874a:	f003 f8a3 	bl	801b894 <iprintf>
    etharp_free_entry(i);
 801874e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018752:	4618      	mov	r0, r3
 8018754:	f7ff fe06 	bl	8018364 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018758:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801875c:	2b09      	cmp	r3, #9
 801875e:	dd06      	ble.n	801876e <etharp_find_entry+0x256>
 8018760:	4b23      	ldr	r3, [pc, #140]	; (80187f0 <etharp_find_entry+0x2d8>)
 8018762:	f240 1283 	movw	r2, #387	; 0x183
 8018766:	4926      	ldr	r1, [pc, #152]	; (8018800 <etharp_find_entry+0x2e8>)
 8018768:	4823      	ldr	r0, [pc, #140]	; (80187f8 <etharp_find_entry+0x2e0>)
 801876a:	f003 f893 	bl	801b894 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801876e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018772:	491e      	ldr	r1, [pc, #120]	; (80187ec <etharp_find_entry+0x2d4>)
 8018774:	4613      	mov	r3, r2
 8018776:	005b      	lsls	r3, r3, #1
 8018778:	4413      	add	r3, r2
 801877a:	00db      	lsls	r3, r3, #3
 801877c:	440b      	add	r3, r1
 801877e:	3314      	adds	r3, #20
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d006      	beq.n	8018794 <etharp_find_entry+0x27c>
 8018786:	4b1a      	ldr	r3, [pc, #104]	; (80187f0 <etharp_find_entry+0x2d8>)
 8018788:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801878c:	491d      	ldr	r1, [pc, #116]	; (8018804 <etharp_find_entry+0x2ec>)
 801878e:	481a      	ldr	r0, [pc, #104]	; (80187f8 <etharp_find_entry+0x2e0>)
 8018790:	f003 f880 	bl	801b894 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d00b      	beq.n	80187b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801879a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	6819      	ldr	r1, [r3, #0]
 80187a2:	4812      	ldr	r0, [pc, #72]	; (80187ec <etharp_find_entry+0x2d4>)
 80187a4:	4613      	mov	r3, r2
 80187a6:	005b      	lsls	r3, r3, #1
 80187a8:	4413      	add	r3, r2
 80187aa:	00db      	lsls	r3, r3, #3
 80187ac:	4403      	add	r3, r0
 80187ae:	3304      	adds	r3, #4
 80187b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80187b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187b6:	490d      	ldr	r1, [pc, #52]	; (80187ec <etharp_find_entry+0x2d4>)
 80187b8:	4613      	mov	r3, r2
 80187ba:	005b      	lsls	r3, r3, #1
 80187bc:	4413      	add	r3, r2
 80187be:	00db      	lsls	r3, r3, #3
 80187c0:	440b      	add	r3, r1
 80187c2:	3312      	adds	r3, #18
 80187c4:	2200      	movs	r2, #0
 80187c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80187c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187cc:	4907      	ldr	r1, [pc, #28]	; (80187ec <etharp_find_entry+0x2d4>)
 80187ce:	4613      	mov	r3, r2
 80187d0:	005b      	lsls	r3, r3, #1
 80187d2:	4413      	add	r3, r2
 80187d4:	00db      	lsls	r3, r3, #3
 80187d6:	440b      	add	r3, r1
 80187d8:	3308      	adds	r3, #8
 80187da:	687a      	ldr	r2, [r7, #4]
 80187dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80187de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3728      	adds	r7, #40	; 0x28
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	20008678 	.word	0x20008678
 80187f0:	0801ea78 	.word	0x0801ea78
 80187f4:	0801eab0 	.word	0x0801eab0
 80187f8:	0801eaf0 	.word	0x0801eaf0
 80187fc:	0801eb18 	.word	0x0801eb18
 8018800:	0801eb30 	.word	0x0801eb30
 8018804:	0801eb44 	.word	0x0801eb44

08018808 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b088      	sub	sp, #32
 801880c:	af02      	add	r7, sp, #8
 801880e:	60f8      	str	r0, [r7, #12]
 8018810:	60b9      	str	r1, [r7, #8]
 8018812:	607a      	str	r2, [r7, #4]
 8018814:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801881c:	2b06      	cmp	r3, #6
 801881e:	d006      	beq.n	801882e <etharp_update_arp_entry+0x26>
 8018820:	4b48      	ldr	r3, [pc, #288]	; (8018944 <etharp_update_arp_entry+0x13c>)
 8018822:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018826:	4948      	ldr	r1, [pc, #288]	; (8018948 <etharp_update_arp_entry+0x140>)
 8018828:	4848      	ldr	r0, [pc, #288]	; (801894c <etharp_update_arp_entry+0x144>)
 801882a:	f003 f833 	bl	801b894 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d012      	beq.n	801885a <etharp_update_arp_entry+0x52>
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d00e      	beq.n	801885a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	68f9      	ldr	r1, [r7, #12]
 8018842:	4618      	mov	r0, r3
 8018844:	f001 f8fe 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8018848:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801884a:	2b00      	cmp	r3, #0
 801884c:	d105      	bne.n	801885a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018856:	2be0      	cmp	r3, #224	; 0xe0
 8018858:	d102      	bne.n	8018860 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801885a:	f06f 030f 	mvn.w	r3, #15
 801885e:	e06c      	b.n	801893a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018860:	78fb      	ldrb	r3, [r7, #3]
 8018862:	68fa      	ldr	r2, [r7, #12]
 8018864:	4619      	mov	r1, r3
 8018866:	68b8      	ldr	r0, [r7, #8]
 8018868:	f7ff fe56 	bl	8018518 <etharp_find_entry>
 801886c:	4603      	mov	r3, r0
 801886e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018874:	2b00      	cmp	r3, #0
 8018876:	da02      	bge.n	801887e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018878:	8afb      	ldrh	r3, [r7, #22]
 801887a:	b25b      	sxtb	r3, r3
 801887c:	e05d      	b.n	801893a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801887e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018882:	4933      	ldr	r1, [pc, #204]	; (8018950 <etharp_update_arp_entry+0x148>)
 8018884:	4613      	mov	r3, r2
 8018886:	005b      	lsls	r3, r3, #1
 8018888:	4413      	add	r3, r2
 801888a:	00db      	lsls	r3, r3, #3
 801888c:	440b      	add	r3, r1
 801888e:	3314      	adds	r3, #20
 8018890:	2202      	movs	r2, #2
 8018892:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018898:	492d      	ldr	r1, [pc, #180]	; (8018950 <etharp_update_arp_entry+0x148>)
 801889a:	4613      	mov	r3, r2
 801889c:	005b      	lsls	r3, r3, #1
 801889e:	4413      	add	r3, r2
 80188a0:	00db      	lsls	r3, r3, #3
 80188a2:	440b      	add	r3, r1
 80188a4:	3308      	adds	r3, #8
 80188a6:	68fa      	ldr	r2, [r7, #12]
 80188a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80188aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188ae:	4613      	mov	r3, r2
 80188b0:	005b      	lsls	r3, r3, #1
 80188b2:	4413      	add	r3, r2
 80188b4:	00db      	lsls	r3, r3, #3
 80188b6:	3308      	adds	r3, #8
 80188b8:	4a25      	ldr	r2, [pc, #148]	; (8018950 <etharp_update_arp_entry+0x148>)
 80188ba:	4413      	add	r3, r2
 80188bc:	3304      	adds	r3, #4
 80188be:	2206      	movs	r2, #6
 80188c0:	6879      	ldr	r1, [r7, #4]
 80188c2:	4618      	mov	r0, r3
 80188c4:	f003 f8c1 	bl	801ba4a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80188c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188cc:	4920      	ldr	r1, [pc, #128]	; (8018950 <etharp_update_arp_entry+0x148>)
 80188ce:	4613      	mov	r3, r2
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	4413      	add	r3, r2
 80188d4:	00db      	lsls	r3, r3, #3
 80188d6:	440b      	add	r3, r1
 80188d8:	3312      	adds	r3, #18
 80188da:	2200      	movs	r2, #0
 80188dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80188de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188e2:	491b      	ldr	r1, [pc, #108]	; (8018950 <etharp_update_arp_entry+0x148>)
 80188e4:	4613      	mov	r3, r2
 80188e6:	005b      	lsls	r3, r3, #1
 80188e8:	4413      	add	r3, r2
 80188ea:	00db      	lsls	r3, r3, #3
 80188ec:	440b      	add	r3, r1
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d021      	beq.n	8018938 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80188f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80188f8:	4915      	ldr	r1, [pc, #84]	; (8018950 <etharp_update_arp_entry+0x148>)
 80188fa:	4613      	mov	r3, r2
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	4413      	add	r3, r2
 8018900:	00db      	lsls	r3, r3, #3
 8018902:	440b      	add	r3, r1
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801890c:	4910      	ldr	r1, [pc, #64]	; (8018950 <etharp_update_arp_entry+0x148>)
 801890e:	4613      	mov	r3, r2
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	4413      	add	r3, r2
 8018914:	00db      	lsls	r3, r3, #3
 8018916:	440b      	add	r3, r1
 8018918:	2200      	movs	r2, #0
 801891a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018926:	9300      	str	r3, [sp, #0]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6939      	ldr	r1, [r7, #16]
 801892c:	68f8      	ldr	r0, [r7, #12]
 801892e:	f001 ff97 	bl	801a860 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018932:	6938      	ldr	r0, [r7, #16]
 8018934:	f7f9 fe2a 	bl	801258c <pbuf_free>
  }
  return ERR_OK;
 8018938:	2300      	movs	r3, #0
}
 801893a:	4618      	mov	r0, r3
 801893c:	3718      	adds	r7, #24
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	0801ea78 	.word	0x0801ea78
 8018948:	0801eb70 	.word	0x0801eb70
 801894c:	0801eaf0 	.word	0x0801eaf0
 8018950:	20008678 	.word	0x20008678

08018954 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b084      	sub	sp, #16
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801895c:	2300      	movs	r3, #0
 801895e:	60fb      	str	r3, [r7, #12]
 8018960:	e01e      	b.n	80189a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018962:	4913      	ldr	r1, [pc, #76]	; (80189b0 <etharp_cleanup_netif+0x5c>)
 8018964:	68fa      	ldr	r2, [r7, #12]
 8018966:	4613      	mov	r3, r2
 8018968:	005b      	lsls	r3, r3, #1
 801896a:	4413      	add	r3, r2
 801896c:	00db      	lsls	r3, r3, #3
 801896e:	440b      	add	r3, r1
 8018970:	3314      	adds	r3, #20
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018976:	7afb      	ldrb	r3, [r7, #11]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d00e      	beq.n	801899a <etharp_cleanup_netif+0x46>
 801897c:	490c      	ldr	r1, [pc, #48]	; (80189b0 <etharp_cleanup_netif+0x5c>)
 801897e:	68fa      	ldr	r2, [r7, #12]
 8018980:	4613      	mov	r3, r2
 8018982:	005b      	lsls	r3, r3, #1
 8018984:	4413      	add	r3, r2
 8018986:	00db      	lsls	r3, r3, #3
 8018988:	440b      	add	r3, r1
 801898a:	3308      	adds	r3, #8
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	429a      	cmp	r2, r3
 8018992:	d102      	bne.n	801899a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018994:	68f8      	ldr	r0, [r7, #12]
 8018996:	f7ff fce5 	bl	8018364 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	3301      	adds	r3, #1
 801899e:	60fb      	str	r3, [r7, #12]
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2b09      	cmp	r3, #9
 80189a4:	dddd      	ble.n	8018962 <etharp_cleanup_netif+0xe>
    }
  }
}
 80189a6:	bf00      	nop
 80189a8:	bf00      	nop
 80189aa:	3710      	adds	r7, #16
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	20008678 	.word	0x20008678

080189b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80189b4:	b5b0      	push	{r4, r5, r7, lr}
 80189b6:	b08a      	sub	sp, #40	; 0x28
 80189b8:	af04      	add	r7, sp, #16
 80189ba:	6078      	str	r0, [r7, #4]
 80189bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80189be:	683b      	ldr	r3, [r7, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d107      	bne.n	80189d4 <etharp_input+0x20>
 80189c4:	4b3d      	ldr	r3, [pc, #244]	; (8018abc <etharp_input+0x108>)
 80189c6:	f240 228a 	movw	r2, #650	; 0x28a
 80189ca:	493d      	ldr	r1, [pc, #244]	; (8018ac0 <etharp_input+0x10c>)
 80189cc:	483d      	ldr	r0, [pc, #244]	; (8018ac4 <etharp_input+0x110>)
 80189ce:	f002 ff61 	bl	801b894 <iprintf>
 80189d2:	e06f      	b.n	8018ab4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	685b      	ldr	r3, [r3, #4]
 80189d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	881b      	ldrh	r3, [r3, #0]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80189e4:	d10c      	bne.n	8018a00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80189ea:	2b06      	cmp	r3, #6
 80189ec:	d108      	bne.n	8018a00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80189f2:	2b04      	cmp	r3, #4
 80189f4:	d104      	bne.n	8018a00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	885b      	ldrh	r3, [r3, #2]
 80189fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80189fc:	2b08      	cmp	r3, #8
 80189fe:	d003      	beq.n	8018a08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f7f9 fdc3 	bl	801258c <pbuf_free>
    return;
 8018a06:	e055      	b.n	8018ab4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018a08:	693b      	ldr	r3, [r7, #16]
 8018a0a:	330e      	adds	r3, #14
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	3318      	adds	r3, #24
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	3304      	adds	r3, #4
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d102      	bne.n	8018a28 <etharp_input+0x74>
    for_us = 0;
 8018a22:	2300      	movs	r3, #0
 8018a24:	75fb      	strb	r3, [r7, #23]
 8018a26:	e009      	b.n	8018a3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018a28:	68ba      	ldr	r2, [r7, #8]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	3304      	adds	r3, #4
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	429a      	cmp	r2, r3
 8018a32:	bf0c      	ite	eq
 8018a34:	2301      	moveq	r3, #1
 8018a36:	2300      	movne	r3, #0
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	f103 0208 	add.w	r2, r3, #8
 8018a42:	7dfb      	ldrb	r3, [r7, #23]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d001      	beq.n	8018a4c <etharp_input+0x98>
 8018a48:	2301      	movs	r3, #1
 8018a4a:	e000      	b.n	8018a4e <etharp_input+0x9a>
 8018a4c:	2302      	movs	r3, #2
 8018a4e:	f107 010c 	add.w	r1, r7, #12
 8018a52:	6838      	ldr	r0, [r7, #0]
 8018a54:	f7ff fed8 	bl	8018808 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	88db      	ldrh	r3, [r3, #6]
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a62:	d003      	beq.n	8018a6c <etharp_input+0xb8>
 8018a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a68:	d01e      	beq.n	8018aa8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018a6a:	e020      	b.n	8018aae <etharp_input+0xfa>
      if (for_us) {
 8018a6c:	7dfb      	ldrb	r3, [r7, #23]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d01c      	beq.n	8018aac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018a88:	693a      	ldr	r2, [r7, #16]
 8018a8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018a8c:	2102      	movs	r1, #2
 8018a8e:	9103      	str	r1, [sp, #12]
 8018a90:	f107 010c 	add.w	r1, r7, #12
 8018a94:	9102      	str	r1, [sp, #8]
 8018a96:	9201      	str	r2, [sp, #4]
 8018a98:	9300      	str	r3, [sp, #0]
 8018a9a:	462b      	mov	r3, r5
 8018a9c:	4622      	mov	r2, r4
 8018a9e:	4601      	mov	r1, r0
 8018aa0:	6838      	ldr	r0, [r7, #0]
 8018aa2:	f000 faeb 	bl	801907c <etharp_raw>
      break;
 8018aa6:	e001      	b.n	8018aac <etharp_input+0xf8>
      break;
 8018aa8:	bf00      	nop
 8018aaa:	e000      	b.n	8018aae <etharp_input+0xfa>
      break;
 8018aac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	f7f9 fd6c 	bl	801258c <pbuf_free>
}
 8018ab4:	3718      	adds	r7, #24
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aba:	bf00      	nop
 8018abc:	0801ea78 	.word	0x0801ea78
 8018ac0:	0801ebc8 	.word	0x0801ebc8
 8018ac4:	0801eaf0 	.word	0x0801eaf0

08018ac8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b086      	sub	sp, #24
 8018acc:	af02      	add	r7, sp, #8
 8018ace:	60f8      	str	r0, [r7, #12]
 8018ad0:	60b9      	str	r1, [r7, #8]
 8018ad2:	4613      	mov	r3, r2
 8018ad4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018ad6:	79fa      	ldrb	r2, [r7, #7]
 8018ad8:	4944      	ldr	r1, [pc, #272]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018ada:	4613      	mov	r3, r2
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	4413      	add	r3, r2
 8018ae0:	00db      	lsls	r3, r3, #3
 8018ae2:	440b      	add	r3, r1
 8018ae4:	3314      	adds	r3, #20
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	2b01      	cmp	r3, #1
 8018aea:	d806      	bhi.n	8018afa <etharp_output_to_arp_index+0x32>
 8018aec:	4b40      	ldr	r3, [pc, #256]	; (8018bf0 <etharp_output_to_arp_index+0x128>)
 8018aee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018af2:	4940      	ldr	r1, [pc, #256]	; (8018bf4 <etharp_output_to_arp_index+0x12c>)
 8018af4:	4840      	ldr	r0, [pc, #256]	; (8018bf8 <etharp_output_to_arp_index+0x130>)
 8018af6:	f002 fecd 	bl	801b894 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018afa:	79fa      	ldrb	r2, [r7, #7]
 8018afc:	493b      	ldr	r1, [pc, #236]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018afe:	4613      	mov	r3, r2
 8018b00:	005b      	lsls	r3, r3, #1
 8018b02:	4413      	add	r3, r2
 8018b04:	00db      	lsls	r3, r3, #3
 8018b06:	440b      	add	r3, r1
 8018b08:	3314      	adds	r3, #20
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	2b02      	cmp	r3, #2
 8018b0e:	d153      	bne.n	8018bb8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018b10:	79fa      	ldrb	r2, [r7, #7]
 8018b12:	4936      	ldr	r1, [pc, #216]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b14:	4613      	mov	r3, r2
 8018b16:	005b      	lsls	r3, r3, #1
 8018b18:	4413      	add	r3, r2
 8018b1a:	00db      	lsls	r3, r3, #3
 8018b1c:	440b      	add	r3, r1
 8018b1e:	3312      	adds	r3, #18
 8018b20:	881b      	ldrh	r3, [r3, #0]
 8018b22:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018b26:	d919      	bls.n	8018b5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018b28:	79fa      	ldrb	r2, [r7, #7]
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	4a2e      	ldr	r2, [pc, #184]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b34:	4413      	add	r3, r2
 8018b36:	3304      	adds	r3, #4
 8018b38:	4619      	mov	r1, r3
 8018b3a:	68f8      	ldr	r0, [r7, #12]
 8018b3c:	f000 fb4c 	bl	80191d8 <etharp_request>
 8018b40:	4603      	mov	r3, r0
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d138      	bne.n	8018bb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018b46:	79fa      	ldrb	r2, [r7, #7]
 8018b48:	4928      	ldr	r1, [pc, #160]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	3314      	adds	r3, #20
 8018b56:	2203      	movs	r2, #3
 8018b58:	701a      	strb	r2, [r3, #0]
 8018b5a:	e02d      	b.n	8018bb8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018b5c:	79fa      	ldrb	r2, [r7, #7]
 8018b5e:	4923      	ldr	r1, [pc, #140]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b60:	4613      	mov	r3, r2
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	4413      	add	r3, r2
 8018b66:	00db      	lsls	r3, r3, #3
 8018b68:	440b      	add	r3, r1
 8018b6a:	3312      	adds	r3, #18
 8018b6c:	881b      	ldrh	r3, [r3, #0]
 8018b6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018b72:	d321      	bcc.n	8018bb8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018b74:	79fa      	ldrb	r2, [r7, #7]
 8018b76:	4613      	mov	r3, r2
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	4413      	add	r3, r2
 8018b7c:	00db      	lsls	r3, r3, #3
 8018b7e:	4a1b      	ldr	r2, [pc, #108]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b80:	4413      	add	r3, r2
 8018b82:	1d19      	adds	r1, r3, #4
 8018b84:	79fa      	ldrb	r2, [r7, #7]
 8018b86:	4613      	mov	r3, r2
 8018b88:	005b      	lsls	r3, r3, #1
 8018b8a:	4413      	add	r3, r2
 8018b8c:	00db      	lsls	r3, r3, #3
 8018b8e:	3308      	adds	r3, #8
 8018b90:	4a16      	ldr	r2, [pc, #88]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018b92:	4413      	add	r3, r2
 8018b94:	3304      	adds	r3, #4
 8018b96:	461a      	mov	r2, r3
 8018b98:	68f8      	ldr	r0, [r7, #12]
 8018b9a:	f000 fafb 	bl	8019194 <etharp_request_dst>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d109      	bne.n	8018bb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018ba4:	79fa      	ldrb	r2, [r7, #7]
 8018ba6:	4911      	ldr	r1, [pc, #68]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018ba8:	4613      	mov	r3, r2
 8018baa:	005b      	lsls	r3, r3, #1
 8018bac:	4413      	add	r3, r2
 8018bae:	00db      	lsls	r3, r3, #3
 8018bb0:	440b      	add	r3, r1
 8018bb2:	3314      	adds	r3, #20
 8018bb4:	2203      	movs	r2, #3
 8018bb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018bbe:	79fa      	ldrb	r2, [r7, #7]
 8018bc0:	4613      	mov	r3, r2
 8018bc2:	005b      	lsls	r3, r3, #1
 8018bc4:	4413      	add	r3, r2
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	3308      	adds	r3, #8
 8018bca:	4a08      	ldr	r2, [pc, #32]	; (8018bec <etharp_output_to_arp_index+0x124>)
 8018bcc:	4413      	add	r3, r2
 8018bce:	3304      	adds	r3, #4
 8018bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018bd4:	9200      	str	r2, [sp, #0]
 8018bd6:	460a      	mov	r2, r1
 8018bd8:	68b9      	ldr	r1, [r7, #8]
 8018bda:	68f8      	ldr	r0, [r7, #12]
 8018bdc:	f001 fe40 	bl	801a860 <ethernet_output>
 8018be0:	4603      	mov	r3, r0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3710      	adds	r7, #16
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	20008678 	.word	0x20008678
 8018bf0:	0801ea78 	.word	0x0801ea78
 8018bf4:	0801ebe8 	.word	0x0801ebe8
 8018bf8:	0801eaf0 	.word	0x0801eaf0

08018bfc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b08a      	sub	sp, #40	; 0x28
 8018c00:	af02      	add	r7, sp, #8
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d106      	bne.n	8018c20 <etharp_output+0x24>
 8018c12:	4b73      	ldr	r3, [pc, #460]	; (8018de0 <etharp_output+0x1e4>)
 8018c14:	f240 321e 	movw	r2, #798	; 0x31e
 8018c18:	4972      	ldr	r1, [pc, #456]	; (8018de4 <etharp_output+0x1e8>)
 8018c1a:	4873      	ldr	r0, [pc, #460]	; (8018de8 <etharp_output+0x1ec>)
 8018c1c:	f002 fe3a 	bl	801b894 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d106      	bne.n	8018c34 <etharp_output+0x38>
 8018c26:	4b6e      	ldr	r3, [pc, #440]	; (8018de0 <etharp_output+0x1e4>)
 8018c28:	f240 321f 	movw	r2, #799	; 0x31f
 8018c2c:	496f      	ldr	r1, [pc, #444]	; (8018dec <etharp_output+0x1f0>)
 8018c2e:	486e      	ldr	r0, [pc, #440]	; (8018de8 <etharp_output+0x1ec>)
 8018c30:	f002 fe30 	bl	801b894 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d106      	bne.n	8018c48 <etharp_output+0x4c>
 8018c3a:	4b69      	ldr	r3, [pc, #420]	; (8018de0 <etharp_output+0x1e4>)
 8018c3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018c40:	496b      	ldr	r1, [pc, #428]	; (8018df0 <etharp_output+0x1f4>)
 8018c42:	4869      	ldr	r0, [pc, #420]	; (8018de8 <etharp_output+0x1ec>)
 8018c44:	f002 fe26 	bl	801b894 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	68f9      	ldr	r1, [r7, #12]
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f000 fef8 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8018c54:	4603      	mov	r3, r0
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d002      	beq.n	8018c60 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018c5a:	4b66      	ldr	r3, [pc, #408]	; (8018df4 <etharp_output+0x1f8>)
 8018c5c:	61fb      	str	r3, [r7, #28]
 8018c5e:	e0af      	b.n	8018dc0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c68:	2be0      	cmp	r3, #224	; 0xe0
 8018c6a:	d118      	bne.n	8018c9e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018c70:	2300      	movs	r3, #0
 8018c72:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018c74:	235e      	movs	r3, #94	; 0x5e
 8018c76:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	3301      	adds	r3, #1
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	3302      	adds	r3, #2
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	3303      	adds	r3, #3
 8018c92:	781b      	ldrb	r3, [r3, #0]
 8018c94:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018c96:	f107 0310 	add.w	r3, r7, #16
 8018c9a:	61fb      	str	r3, [r7, #28]
 8018c9c:	e090      	b.n	8018dc0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681a      	ldr	r2, [r3, #0]
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	3304      	adds	r3, #4
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	405a      	eors	r2, r3
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	3308      	adds	r3, #8
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	4013      	ands	r3, r2
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d012      	beq.n	8018cdc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018cbc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d00b      	beq.n	8018cdc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	330c      	adds	r3, #12
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d003      	beq.n	8018cd6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	330c      	adds	r3, #12
 8018cd2:	61bb      	str	r3, [r7, #24]
 8018cd4:	e002      	b.n	8018cdc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018cd6:	f06f 0303 	mvn.w	r3, #3
 8018cda:	e07d      	b.n	8018dd8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018cdc:	4b46      	ldr	r3, [pc, #280]	; (8018df8 <etharp_output+0x1fc>)
 8018cde:	781b      	ldrb	r3, [r3, #0]
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	4a46      	ldr	r2, [pc, #280]	; (8018dfc <etharp_output+0x200>)
 8018ce4:	460b      	mov	r3, r1
 8018ce6:	005b      	lsls	r3, r3, #1
 8018ce8:	440b      	add	r3, r1
 8018cea:	00db      	lsls	r3, r3, #3
 8018cec:	4413      	add	r3, r2
 8018cee:	3314      	adds	r3, #20
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d925      	bls.n	8018d42 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018cf6:	4b40      	ldr	r3, [pc, #256]	; (8018df8 <etharp_output+0x1fc>)
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	4a3f      	ldr	r2, [pc, #252]	; (8018dfc <etharp_output+0x200>)
 8018cfe:	460b      	mov	r3, r1
 8018d00:	005b      	lsls	r3, r3, #1
 8018d02:	440b      	add	r3, r1
 8018d04:	00db      	lsls	r3, r3, #3
 8018d06:	4413      	add	r3, r2
 8018d08:	3308      	adds	r3, #8
 8018d0a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018d0c:	68fa      	ldr	r2, [r7, #12]
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d117      	bne.n	8018d42 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018d12:	69bb      	ldr	r3, [r7, #24]
 8018d14:	681a      	ldr	r2, [r3, #0]
 8018d16:	4b38      	ldr	r3, [pc, #224]	; (8018df8 <etharp_output+0x1fc>)
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	4937      	ldr	r1, [pc, #220]	; (8018dfc <etharp_output+0x200>)
 8018d1e:	4603      	mov	r3, r0
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	4403      	add	r3, r0
 8018d24:	00db      	lsls	r3, r3, #3
 8018d26:	440b      	add	r3, r1
 8018d28:	3304      	adds	r3, #4
 8018d2a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d108      	bne.n	8018d42 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018d30:	4b31      	ldr	r3, [pc, #196]	; (8018df8 <etharp_output+0x1fc>)
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	461a      	mov	r2, r3
 8018d36:	68b9      	ldr	r1, [r7, #8]
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f7ff fec5 	bl	8018ac8 <etharp_output_to_arp_index>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	e04a      	b.n	8018dd8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018d42:	2300      	movs	r3, #0
 8018d44:	75fb      	strb	r3, [r7, #23]
 8018d46:	e031      	b.n	8018dac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018d48:	7dfa      	ldrb	r2, [r7, #23]
 8018d4a:	492c      	ldr	r1, [pc, #176]	; (8018dfc <etharp_output+0x200>)
 8018d4c:	4613      	mov	r3, r2
 8018d4e:	005b      	lsls	r3, r3, #1
 8018d50:	4413      	add	r3, r2
 8018d52:	00db      	lsls	r3, r3, #3
 8018d54:	440b      	add	r3, r1
 8018d56:	3314      	adds	r3, #20
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d923      	bls.n	8018da6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018d5e:	7dfa      	ldrb	r2, [r7, #23]
 8018d60:	4926      	ldr	r1, [pc, #152]	; (8018dfc <etharp_output+0x200>)
 8018d62:	4613      	mov	r3, r2
 8018d64:	005b      	lsls	r3, r3, #1
 8018d66:	4413      	add	r3, r2
 8018d68:	00db      	lsls	r3, r3, #3
 8018d6a:	440b      	add	r3, r1
 8018d6c:	3308      	adds	r3, #8
 8018d6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018d70:	68fa      	ldr	r2, [r7, #12]
 8018d72:	429a      	cmp	r2, r3
 8018d74:	d117      	bne.n	8018da6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	6819      	ldr	r1, [r3, #0]
 8018d7a:	7dfa      	ldrb	r2, [r7, #23]
 8018d7c:	481f      	ldr	r0, [pc, #124]	; (8018dfc <etharp_output+0x200>)
 8018d7e:	4613      	mov	r3, r2
 8018d80:	005b      	lsls	r3, r3, #1
 8018d82:	4413      	add	r3, r2
 8018d84:	00db      	lsls	r3, r3, #3
 8018d86:	4403      	add	r3, r0
 8018d88:	3304      	adds	r3, #4
 8018d8a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018d8c:	4299      	cmp	r1, r3
 8018d8e:	d10a      	bne.n	8018da6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018d90:	4a19      	ldr	r2, [pc, #100]	; (8018df8 <etharp_output+0x1fc>)
 8018d92:	7dfb      	ldrb	r3, [r7, #23]
 8018d94:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018d96:	7dfb      	ldrb	r3, [r7, #23]
 8018d98:	461a      	mov	r2, r3
 8018d9a:	68b9      	ldr	r1, [r7, #8]
 8018d9c:	68f8      	ldr	r0, [r7, #12]
 8018d9e:	f7ff fe93 	bl	8018ac8 <etharp_output_to_arp_index>
 8018da2:	4603      	mov	r3, r0
 8018da4:	e018      	b.n	8018dd8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018da6:	7dfb      	ldrb	r3, [r7, #23]
 8018da8:	3301      	adds	r3, #1
 8018daa:	75fb      	strb	r3, [r7, #23]
 8018dac:	7dfb      	ldrb	r3, [r7, #23]
 8018dae:	2b09      	cmp	r3, #9
 8018db0:	d9ca      	bls.n	8018d48 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018db2:	68ba      	ldr	r2, [r7, #8]
 8018db4:	69b9      	ldr	r1, [r7, #24]
 8018db6:	68f8      	ldr	r0, [r7, #12]
 8018db8:	f000 f822 	bl	8018e00 <etharp_query>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	e00b      	b.n	8018dd8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	68b9      	ldr	r1, [r7, #8]
 8018dd0:	68f8      	ldr	r0, [r7, #12]
 8018dd2:	f001 fd45 	bl	801a860 <ethernet_output>
 8018dd6:	4603      	mov	r3, r0
}
 8018dd8:	4618      	mov	r0, r3
 8018dda:	3720      	adds	r7, #32
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	0801ea78 	.word	0x0801ea78
 8018de4:	0801ebc8 	.word	0x0801ebc8
 8018de8:	0801eaf0 	.word	0x0801eaf0
 8018dec:	0801ec18 	.word	0x0801ec18
 8018df0:	0801ebb8 	.word	0x0801ebb8
 8018df4:	0801f348 	.word	0x0801f348
 8018df8:	20008768 	.word	0x20008768
 8018dfc:	20008678 	.word	0x20008678

08018e00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b08c      	sub	sp, #48	; 0x30
 8018e04:	af02      	add	r7, sp, #8
 8018e06:	60f8      	str	r0, [r7, #12]
 8018e08:	60b9      	str	r1, [r7, #8]
 8018e0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	3326      	adds	r3, #38	; 0x26
 8018e10:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018e12:	23ff      	movs	r3, #255	; 0xff
 8018e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018e18:	2300      	movs	r3, #0
 8018e1a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	68f9      	ldr	r1, [r7, #12]
 8018e22:	4618      	mov	r0, r3
 8018e24:	f000 fe0e 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d10c      	bne.n	8018e48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e36:	2be0      	cmp	r3, #224	; 0xe0
 8018e38:	d006      	beq.n	8018e48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018e3a:	68bb      	ldr	r3, [r7, #8]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d003      	beq.n	8018e48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018e40:	68bb      	ldr	r3, [r7, #8]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d102      	bne.n	8018e4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018e48:	f06f 030f 	mvn.w	r3, #15
 8018e4c:	e101      	b.n	8019052 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018e4e:	68fa      	ldr	r2, [r7, #12]
 8018e50:	2101      	movs	r1, #1
 8018e52:	68b8      	ldr	r0, [r7, #8]
 8018e54:	f7ff fb60 	bl	8018518 <etharp_find_entry>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018e5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	da02      	bge.n	8018e6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018e64:	8a7b      	ldrh	r3, [r7, #18]
 8018e66:	b25b      	sxtb	r3, r3
 8018e68:	e0f3      	b.n	8019052 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018e6a:	8a7b      	ldrh	r3, [r7, #18]
 8018e6c:	2b7e      	cmp	r3, #126	; 0x7e
 8018e6e:	d906      	bls.n	8018e7e <etharp_query+0x7e>
 8018e70:	4b7a      	ldr	r3, [pc, #488]	; (801905c <etharp_query+0x25c>)
 8018e72:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018e76:	497a      	ldr	r1, [pc, #488]	; (8019060 <etharp_query+0x260>)
 8018e78:	487a      	ldr	r0, [pc, #488]	; (8019064 <etharp_query+0x264>)
 8018e7a:	f002 fd0b 	bl	801b894 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018e7e:	8a7b      	ldrh	r3, [r7, #18]
 8018e80:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018e82:	7c7a      	ldrb	r2, [r7, #17]
 8018e84:	4978      	ldr	r1, [pc, #480]	; (8019068 <etharp_query+0x268>)
 8018e86:	4613      	mov	r3, r2
 8018e88:	005b      	lsls	r3, r3, #1
 8018e8a:	4413      	add	r3, r2
 8018e8c:	00db      	lsls	r3, r3, #3
 8018e8e:	440b      	add	r3, r1
 8018e90:	3314      	adds	r3, #20
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d115      	bne.n	8018ec4 <etharp_query+0xc4>
    is_new_entry = 1;
 8018e98:	2301      	movs	r3, #1
 8018e9a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018e9c:	7c7a      	ldrb	r2, [r7, #17]
 8018e9e:	4972      	ldr	r1, [pc, #456]	; (8019068 <etharp_query+0x268>)
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	4413      	add	r3, r2
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	440b      	add	r3, r1
 8018eaa:	3314      	adds	r3, #20
 8018eac:	2201      	movs	r2, #1
 8018eae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018eb0:	7c7a      	ldrb	r2, [r7, #17]
 8018eb2:	496d      	ldr	r1, [pc, #436]	; (8019068 <etharp_query+0x268>)
 8018eb4:	4613      	mov	r3, r2
 8018eb6:	005b      	lsls	r3, r3, #1
 8018eb8:	4413      	add	r3, r2
 8018eba:	00db      	lsls	r3, r3, #3
 8018ebc:	440b      	add	r3, r1
 8018ebe:	3308      	adds	r3, #8
 8018ec0:	68fa      	ldr	r2, [r7, #12]
 8018ec2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018ec4:	7c7a      	ldrb	r2, [r7, #17]
 8018ec6:	4968      	ldr	r1, [pc, #416]	; (8019068 <etharp_query+0x268>)
 8018ec8:	4613      	mov	r3, r2
 8018eca:	005b      	lsls	r3, r3, #1
 8018ecc:	4413      	add	r3, r2
 8018ece:	00db      	lsls	r3, r3, #3
 8018ed0:	440b      	add	r3, r1
 8018ed2:	3314      	adds	r3, #20
 8018ed4:	781b      	ldrb	r3, [r3, #0]
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	d011      	beq.n	8018efe <etharp_query+0xfe>
 8018eda:	7c7a      	ldrb	r2, [r7, #17]
 8018edc:	4962      	ldr	r1, [pc, #392]	; (8019068 <etharp_query+0x268>)
 8018ede:	4613      	mov	r3, r2
 8018ee0:	005b      	lsls	r3, r3, #1
 8018ee2:	4413      	add	r3, r2
 8018ee4:	00db      	lsls	r3, r3, #3
 8018ee6:	440b      	add	r3, r1
 8018ee8:	3314      	adds	r3, #20
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d806      	bhi.n	8018efe <etharp_query+0xfe>
 8018ef0:	4b5a      	ldr	r3, [pc, #360]	; (801905c <etharp_query+0x25c>)
 8018ef2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018ef6:	495d      	ldr	r1, [pc, #372]	; (801906c <etharp_query+0x26c>)
 8018ef8:	485a      	ldr	r0, [pc, #360]	; (8019064 <etharp_query+0x264>)
 8018efa:	f002 fccb 	bl	801b894 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018efe:	6a3b      	ldr	r3, [r7, #32]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d102      	bne.n	8018f0a <etharp_query+0x10a>
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d10c      	bne.n	8018f24 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018f0a:	68b9      	ldr	r1, [r7, #8]
 8018f0c:	68f8      	ldr	r0, [r7, #12]
 8018f0e:	f000 f963 	bl	80191d8 <etharp_request>
 8018f12:	4603      	mov	r3, r0
 8018f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d102      	bne.n	8018f24 <etharp_query+0x124>
      return result;
 8018f1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018f22:	e096      	b.n	8019052 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d106      	bne.n	8018f38 <etharp_query+0x138>
 8018f2a:	4b4c      	ldr	r3, [pc, #304]	; (801905c <etharp_query+0x25c>)
 8018f2c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018f30:	494f      	ldr	r1, [pc, #316]	; (8019070 <etharp_query+0x270>)
 8018f32:	484c      	ldr	r0, [pc, #304]	; (8019064 <etharp_query+0x264>)
 8018f34:	f002 fcae 	bl	801b894 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018f38:	7c7a      	ldrb	r2, [r7, #17]
 8018f3a:	494b      	ldr	r1, [pc, #300]	; (8019068 <etharp_query+0x268>)
 8018f3c:	4613      	mov	r3, r2
 8018f3e:	005b      	lsls	r3, r3, #1
 8018f40:	4413      	add	r3, r2
 8018f42:	00db      	lsls	r3, r3, #3
 8018f44:	440b      	add	r3, r1
 8018f46:	3314      	adds	r3, #20
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d917      	bls.n	8018f7e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018f4e:	4a49      	ldr	r2, [pc, #292]	; (8019074 <etharp_query+0x274>)
 8018f50:	7c7b      	ldrb	r3, [r7, #17]
 8018f52:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018f54:	7c7a      	ldrb	r2, [r7, #17]
 8018f56:	4613      	mov	r3, r2
 8018f58:	005b      	lsls	r3, r3, #1
 8018f5a:	4413      	add	r3, r2
 8018f5c:	00db      	lsls	r3, r3, #3
 8018f5e:	3308      	adds	r3, #8
 8018f60:	4a41      	ldr	r2, [pc, #260]	; (8019068 <etharp_query+0x268>)
 8018f62:	4413      	add	r3, r2
 8018f64:	3304      	adds	r3, #4
 8018f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018f6a:	9200      	str	r2, [sp, #0]
 8018f6c:	697a      	ldr	r2, [r7, #20]
 8018f6e:	6879      	ldr	r1, [r7, #4]
 8018f70:	68f8      	ldr	r0, [r7, #12]
 8018f72:	f001 fc75 	bl	801a860 <ethernet_output>
 8018f76:	4603      	mov	r3, r0
 8018f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f7c:	e067      	b.n	801904e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018f7e:	7c7a      	ldrb	r2, [r7, #17]
 8018f80:	4939      	ldr	r1, [pc, #228]	; (8019068 <etharp_query+0x268>)
 8018f82:	4613      	mov	r3, r2
 8018f84:	005b      	lsls	r3, r3, #1
 8018f86:	4413      	add	r3, r2
 8018f88:	00db      	lsls	r3, r3, #3
 8018f8a:	440b      	add	r3, r1
 8018f8c:	3314      	adds	r3, #20
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	2b01      	cmp	r3, #1
 8018f92:	d15c      	bne.n	801904e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018f94:	2300      	movs	r3, #0
 8018f96:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018f9c:	e01c      	b.n	8018fd8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018f9e:	69fb      	ldr	r3, [r7, #28]
 8018fa0:	895a      	ldrh	r2, [r3, #10]
 8018fa2:	69fb      	ldr	r3, [r7, #28]
 8018fa4:	891b      	ldrh	r3, [r3, #8]
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	d10a      	bne.n	8018fc0 <etharp_query+0x1c0>
 8018faa:	69fb      	ldr	r3, [r7, #28]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d006      	beq.n	8018fc0 <etharp_query+0x1c0>
 8018fb2:	4b2a      	ldr	r3, [pc, #168]	; (801905c <etharp_query+0x25c>)
 8018fb4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018fb8:	492f      	ldr	r1, [pc, #188]	; (8019078 <etharp_query+0x278>)
 8018fba:	482a      	ldr	r0, [pc, #168]	; (8019064 <etharp_query+0x264>)
 8018fbc:	f002 fc6a 	bl	801b894 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018fc0:	69fb      	ldr	r3, [r7, #28]
 8018fc2:	7b1b      	ldrb	r3, [r3, #12]
 8018fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d002      	beq.n	8018fd2 <etharp_query+0x1d2>
        copy_needed = 1;
 8018fcc:	2301      	movs	r3, #1
 8018fce:	61bb      	str	r3, [r7, #24]
        break;
 8018fd0:	e005      	b.n	8018fde <etharp_query+0x1de>
      }
      p = p->next;
 8018fd2:	69fb      	ldr	r3, [r7, #28]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018fd8:	69fb      	ldr	r3, [r7, #28]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d1df      	bne.n	8018f9e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018fde:	69bb      	ldr	r3, [r7, #24]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d007      	beq.n	8018ff4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018fe4:	687a      	ldr	r2, [r7, #4]
 8018fe6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018fea:	200e      	movs	r0, #14
 8018fec:	f7f9 fd2a 	bl	8012a44 <pbuf_clone>
 8018ff0:	61f8      	str	r0, [r7, #28]
 8018ff2:	e004      	b.n	8018ffe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ff8:	69f8      	ldr	r0, [r7, #28]
 8018ffa:	f7f9 fb67 	bl	80126cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d021      	beq.n	8019048 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019004:	7c7a      	ldrb	r2, [r7, #17]
 8019006:	4918      	ldr	r1, [pc, #96]	; (8019068 <etharp_query+0x268>)
 8019008:	4613      	mov	r3, r2
 801900a:	005b      	lsls	r3, r3, #1
 801900c:	4413      	add	r3, r2
 801900e:	00db      	lsls	r3, r3, #3
 8019010:	440b      	add	r3, r1
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d00a      	beq.n	801902e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019018:	7c7a      	ldrb	r2, [r7, #17]
 801901a:	4913      	ldr	r1, [pc, #76]	; (8019068 <etharp_query+0x268>)
 801901c:	4613      	mov	r3, r2
 801901e:	005b      	lsls	r3, r3, #1
 8019020:	4413      	add	r3, r2
 8019022:	00db      	lsls	r3, r3, #3
 8019024:	440b      	add	r3, r1
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	4618      	mov	r0, r3
 801902a:	f7f9 faaf 	bl	801258c <pbuf_free>
      }
      arp_table[i].q = p;
 801902e:	7c7a      	ldrb	r2, [r7, #17]
 8019030:	490d      	ldr	r1, [pc, #52]	; (8019068 <etharp_query+0x268>)
 8019032:	4613      	mov	r3, r2
 8019034:	005b      	lsls	r3, r3, #1
 8019036:	4413      	add	r3, r2
 8019038:	00db      	lsls	r3, r3, #3
 801903a:	440b      	add	r3, r1
 801903c:	69fa      	ldr	r2, [r7, #28]
 801903e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019040:	2300      	movs	r3, #0
 8019042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019046:	e002      	b.n	801904e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019048:	23ff      	movs	r3, #255	; 0xff
 801904a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801904e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019052:	4618      	mov	r0, r3
 8019054:	3728      	adds	r7, #40	; 0x28
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop
 801905c:	0801ea78 	.word	0x0801ea78
 8019060:	0801ec24 	.word	0x0801ec24
 8019064:	0801eaf0 	.word	0x0801eaf0
 8019068:	20008678 	.word	0x20008678
 801906c:	0801ec34 	.word	0x0801ec34
 8019070:	0801ec18 	.word	0x0801ec18
 8019074:	20008768 	.word	0x20008768
 8019078:	0801ec5c 	.word	0x0801ec5c

0801907c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b08a      	sub	sp, #40	; 0x28
 8019080:	af02      	add	r7, sp, #8
 8019082:	60f8      	str	r0, [r7, #12]
 8019084:	60b9      	str	r1, [r7, #8]
 8019086:	607a      	str	r2, [r7, #4]
 8019088:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801908a:	2300      	movs	r3, #0
 801908c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d106      	bne.n	80190a2 <etharp_raw+0x26>
 8019094:	4b3a      	ldr	r3, [pc, #232]	; (8019180 <etharp_raw+0x104>)
 8019096:	f240 4257 	movw	r2, #1111	; 0x457
 801909a:	493a      	ldr	r1, [pc, #232]	; (8019184 <etharp_raw+0x108>)
 801909c:	483a      	ldr	r0, [pc, #232]	; (8019188 <etharp_raw+0x10c>)
 801909e:	f002 fbf9 	bl	801b894 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80190a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190a6:	211c      	movs	r1, #28
 80190a8:	200e      	movs	r0, #14
 80190aa:	f7f8 ff8b 	bl	8011fc4 <pbuf_alloc>
 80190ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d102      	bne.n	80190bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80190b6:	f04f 33ff 	mov.w	r3, #4294967295
 80190ba:	e05d      	b.n	8019178 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80190bc:	69bb      	ldr	r3, [r7, #24]
 80190be:	895b      	ldrh	r3, [r3, #10]
 80190c0:	2b1b      	cmp	r3, #27
 80190c2:	d806      	bhi.n	80190d2 <etharp_raw+0x56>
 80190c4:	4b2e      	ldr	r3, [pc, #184]	; (8019180 <etharp_raw+0x104>)
 80190c6:	f240 4262 	movw	r2, #1122	; 0x462
 80190ca:	4930      	ldr	r1, [pc, #192]	; (801918c <etharp_raw+0x110>)
 80190cc:	482e      	ldr	r0, [pc, #184]	; (8019188 <etharp_raw+0x10c>)
 80190ce:	f002 fbe1 	bl	801b894 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80190d2:	69bb      	ldr	r3, [r7, #24]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80190d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80190da:	4618      	mov	r0, r3
 80190dc:	f7f7 fef9 	bl	8010ed2 <lwip_htons>
 80190e0:	4603      	mov	r3, r0
 80190e2:	461a      	mov	r2, r3
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80190ee:	2b06      	cmp	r3, #6
 80190f0:	d006      	beq.n	8019100 <etharp_raw+0x84>
 80190f2:	4b23      	ldr	r3, [pc, #140]	; (8019180 <etharp_raw+0x104>)
 80190f4:	f240 4269 	movw	r2, #1129	; 0x469
 80190f8:	4925      	ldr	r1, [pc, #148]	; (8019190 <etharp_raw+0x114>)
 80190fa:	4823      	ldr	r0, [pc, #140]	; (8019188 <etharp_raw+0x10c>)
 80190fc:	f002 fbca 	bl	801b894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019100:	697b      	ldr	r3, [r7, #20]
 8019102:	3308      	adds	r3, #8
 8019104:	2206      	movs	r2, #6
 8019106:	6839      	ldr	r1, [r7, #0]
 8019108:	4618      	mov	r0, r3
 801910a:	f002 fc9e 	bl	801ba4a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	3312      	adds	r3, #18
 8019112:	2206      	movs	r2, #6
 8019114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019116:	4618      	mov	r0, r3
 8019118:	f002 fc97 	bl	801ba4a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	330e      	adds	r3, #14
 8019120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019122:	6812      	ldr	r2, [r2, #0]
 8019124:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019126:	697b      	ldr	r3, [r7, #20]
 8019128:	3318      	adds	r3, #24
 801912a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801912c:	6812      	ldr	r2, [r2, #0]
 801912e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019130:	697b      	ldr	r3, [r7, #20]
 8019132:	2200      	movs	r2, #0
 8019134:	701a      	strb	r2, [r3, #0]
 8019136:	2200      	movs	r2, #0
 8019138:	f042 0201 	orr.w	r2, r2, #1
 801913c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801913e:	697b      	ldr	r3, [r7, #20]
 8019140:	2200      	movs	r2, #0
 8019142:	f042 0208 	orr.w	r2, r2, #8
 8019146:	709a      	strb	r2, [r3, #2]
 8019148:	2200      	movs	r2, #0
 801914a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	2206      	movs	r2, #6
 8019150:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019152:	697b      	ldr	r3, [r7, #20]
 8019154:	2204      	movs	r2, #4
 8019156:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019158:	f640 0306 	movw	r3, #2054	; 0x806
 801915c:	9300      	str	r3, [sp, #0]
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	68ba      	ldr	r2, [r7, #8]
 8019162:	69b9      	ldr	r1, [r7, #24]
 8019164:	68f8      	ldr	r0, [r7, #12]
 8019166:	f001 fb7b 	bl	801a860 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801916a:	69b8      	ldr	r0, [r7, #24]
 801916c:	f7f9 fa0e 	bl	801258c <pbuf_free>
  p = NULL;
 8019170:	2300      	movs	r3, #0
 8019172:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019174:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019178:	4618      	mov	r0, r3
 801917a:	3720      	adds	r7, #32
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	0801ea78 	.word	0x0801ea78
 8019184:	0801ebc8 	.word	0x0801ebc8
 8019188:	0801eaf0 	.word	0x0801eaf0
 801918c:	0801ec78 	.word	0x0801ec78
 8019190:	0801ecac 	.word	0x0801ecac

08019194 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b088      	sub	sp, #32
 8019198:	af04      	add	r7, sp, #16
 801919a:	60f8      	str	r0, [r7, #12]
 801919c:	60b9      	str	r1, [r7, #8]
 801919e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80191b0:	2201      	movs	r2, #1
 80191b2:	9203      	str	r2, [sp, #12]
 80191b4:	68ba      	ldr	r2, [r7, #8]
 80191b6:	9202      	str	r2, [sp, #8]
 80191b8:	4a06      	ldr	r2, [pc, #24]	; (80191d4 <etharp_request_dst+0x40>)
 80191ba:	9201      	str	r2, [sp, #4]
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	4603      	mov	r3, r0
 80191c0:	687a      	ldr	r2, [r7, #4]
 80191c2:	68f8      	ldr	r0, [r7, #12]
 80191c4:	f7ff ff5a 	bl	801907c <etharp_raw>
 80191c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3710      	adds	r7, #16
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
 80191d2:	bf00      	nop
 80191d4:	0801f350 	.word	0x0801f350

080191d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b082      	sub	sp, #8
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80191e2:	4a05      	ldr	r2, [pc, #20]	; (80191f8 <etharp_request+0x20>)
 80191e4:	6839      	ldr	r1, [r7, #0]
 80191e6:	6878      	ldr	r0, [r7, #4]
 80191e8:	f7ff ffd4 	bl	8019194 <etharp_request_dst>
 80191ec:	4603      	mov	r3, r0
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3708      	adds	r7, #8
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	0801f348 	.word	0x0801f348

080191fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b08e      	sub	sp, #56	; 0x38
 8019200:	af04      	add	r7, sp, #16
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019206:	4b79      	ldr	r3, [pc, #484]	; (80193ec <icmp_input+0x1f0>)
 8019208:	689b      	ldr	r3, [r3, #8]
 801920a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801920e:	781b      	ldrb	r3, [r3, #0]
 8019210:	f003 030f 	and.w	r3, r3, #15
 8019214:	b2db      	uxtb	r3, r3
 8019216:	009b      	lsls	r3, r3, #2
 8019218:	b2db      	uxtb	r3, r3
 801921a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801921c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801921e:	2b13      	cmp	r3, #19
 8019220:	f240 80cd 	bls.w	80193be <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	895b      	ldrh	r3, [r3, #10]
 8019228:	2b03      	cmp	r3, #3
 801922a:	f240 80ca 	bls.w	80193c2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019238:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801923c:	2b00      	cmp	r3, #0
 801923e:	f000 80b7 	beq.w	80193b0 <icmp_input+0x1b4>
 8019242:	2b08      	cmp	r3, #8
 8019244:	f040 80b7 	bne.w	80193b6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019248:	4b69      	ldr	r3, [pc, #420]	; (80193f0 <icmp_input+0x1f4>)
 801924a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801924c:	4b67      	ldr	r3, [pc, #412]	; (80193ec <icmp_input+0x1f0>)
 801924e:	695b      	ldr	r3, [r3, #20]
 8019250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019254:	2be0      	cmp	r3, #224	; 0xe0
 8019256:	f000 80bb 	beq.w	80193d0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801925a:	4b64      	ldr	r3, [pc, #400]	; (80193ec <icmp_input+0x1f0>)
 801925c:	695b      	ldr	r3, [r3, #20]
 801925e:	4a63      	ldr	r2, [pc, #396]	; (80193ec <icmp_input+0x1f0>)
 8019260:	6812      	ldr	r2, [r2, #0]
 8019262:	4611      	mov	r1, r2
 8019264:	4618      	mov	r0, r3
 8019266:	f000 fbed 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 801926a:	4603      	mov	r3, r0
 801926c:	2b00      	cmp	r3, #0
 801926e:	f040 80b1 	bne.w	80193d4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	891b      	ldrh	r3, [r3, #8]
 8019276:	2b07      	cmp	r3, #7
 8019278:	f240 80a5 	bls.w	80193c6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801927c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801927e:	330e      	adds	r3, #14
 8019280:	4619      	mov	r1, r3
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	f7f9 f8ec 	bl	8012460 <pbuf_add_header>
 8019288:	4603      	mov	r3, r0
 801928a:	2b00      	cmp	r3, #0
 801928c:	d04b      	beq.n	8019326 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	891a      	ldrh	r2, [r3, #8]
 8019292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019294:	4413      	add	r3, r2
 8019296:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	891b      	ldrh	r3, [r3, #8]
 801929c:	8b7a      	ldrh	r2, [r7, #26]
 801929e:	429a      	cmp	r2, r3
 80192a0:	f0c0 809a 	bcc.w	80193d8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80192a4:	8b7b      	ldrh	r3, [r7, #26]
 80192a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80192aa:	4619      	mov	r1, r3
 80192ac:	200e      	movs	r0, #14
 80192ae:	f7f8 fe89 	bl	8011fc4 <pbuf_alloc>
 80192b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	f000 8090 	beq.w	80193dc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	895b      	ldrh	r3, [r3, #10]
 80192c0:	461a      	mov	r2, r3
 80192c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192c4:	3308      	adds	r3, #8
 80192c6:	429a      	cmp	r2, r3
 80192c8:	d203      	bcs.n	80192d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80192ca:	6978      	ldr	r0, [r7, #20]
 80192cc:	f7f9 f95e 	bl	801258c <pbuf_free>
          goto icmperr;
 80192d0:	e085      	b.n	80193de <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	685b      	ldr	r3, [r3, #4]
 80192d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80192d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80192da:	4618      	mov	r0, r3
 80192dc:	f002 fbb5 	bl	801ba4a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80192e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192e2:	4619      	mov	r1, r3
 80192e4:	6978      	ldr	r0, [r7, #20]
 80192e6:	f7f9 f8cb 	bl	8012480 <pbuf_remove_header>
 80192ea:	4603      	mov	r3, r0
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d009      	beq.n	8019304 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80192f0:	4b40      	ldr	r3, [pc, #256]	; (80193f4 <icmp_input+0x1f8>)
 80192f2:	22b6      	movs	r2, #182	; 0xb6
 80192f4:	4940      	ldr	r1, [pc, #256]	; (80193f8 <icmp_input+0x1fc>)
 80192f6:	4841      	ldr	r0, [pc, #260]	; (80193fc <icmp_input+0x200>)
 80192f8:	f002 facc 	bl	801b894 <iprintf>
          pbuf_free(r);
 80192fc:	6978      	ldr	r0, [r7, #20]
 80192fe:	f7f9 f945 	bl	801258c <pbuf_free>
          goto icmperr;
 8019302:	e06c      	b.n	80193de <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019304:	6879      	ldr	r1, [r7, #4]
 8019306:	6978      	ldr	r0, [r7, #20]
 8019308:	f7f9 fa58 	bl	80127bc <pbuf_copy>
 801930c:	4603      	mov	r3, r0
 801930e:	2b00      	cmp	r3, #0
 8019310:	d003      	beq.n	801931a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019312:	6978      	ldr	r0, [r7, #20]
 8019314:	f7f9 f93a 	bl	801258c <pbuf_free>
          goto icmperr;
 8019318:	e061      	b.n	80193de <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f7f9 f936 	bl	801258c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	607b      	str	r3, [r7, #4]
 8019324:	e00f      	b.n	8019346 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019328:	330e      	adds	r3, #14
 801932a:	4619      	mov	r1, r3
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f7f9 f8a7 	bl	8012480 <pbuf_remove_header>
 8019332:	4603      	mov	r3, r0
 8019334:	2b00      	cmp	r3, #0
 8019336:	d006      	beq.n	8019346 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019338:	4b2e      	ldr	r3, [pc, #184]	; (80193f4 <icmp_input+0x1f8>)
 801933a:	22c7      	movs	r2, #199	; 0xc7
 801933c:	4930      	ldr	r1, [pc, #192]	; (8019400 <icmp_input+0x204>)
 801933e:	482f      	ldr	r0, [pc, #188]	; (80193fc <icmp_input+0x200>)
 8019340:	f002 faa8 	bl	801b894 <iprintf>
          goto icmperr;
 8019344:	e04b      	b.n	80193de <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801934c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801934e:	4619      	mov	r1, r3
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	f7f9 f885 	bl	8012460 <pbuf_add_header>
 8019356:	4603      	mov	r3, r0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d12b      	bne.n	80193b4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	685b      	ldr	r3, [r3, #4]
 8019360:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019362:	69fb      	ldr	r3, [r7, #28]
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801936a:	4b20      	ldr	r3, [pc, #128]	; (80193ec <icmp_input+0x1f0>)
 801936c:	691a      	ldr	r2, [r3, #16]
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	2200      	movs	r2, #0
 8019376:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019378:	693b      	ldr	r3, [r7, #16]
 801937a:	2200      	movs	r2, #0
 801937c:	709a      	strb	r2, [r3, #2]
 801937e:	2200      	movs	r2, #0
 8019380:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	22ff      	movs	r2, #255	; 0xff
 8019386:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	2200      	movs	r2, #0
 801938c:	729a      	strb	r2, [r3, #10]
 801938e:	2200      	movs	r2, #0
 8019390:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	9302      	str	r3, [sp, #8]
 8019396:	2301      	movs	r3, #1
 8019398:	9301      	str	r3, [sp, #4]
 801939a:	2300      	movs	r3, #0
 801939c:	9300      	str	r3, [sp, #0]
 801939e:	23ff      	movs	r3, #255	; 0xff
 80193a0:	2200      	movs	r2, #0
 80193a2:	69f9      	ldr	r1, [r7, #28]
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f000 fa75 	bl	8019894 <ip4_output_if>
 80193aa:	4603      	mov	r3, r0
 80193ac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80193ae:	e001      	b.n	80193b4 <icmp_input+0x1b8>
      break;
 80193b0:	bf00      	nop
 80193b2:	e000      	b.n	80193b6 <icmp_input+0x1ba>
      break;
 80193b4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80193b6:	6878      	ldr	r0, [r7, #4]
 80193b8:	f7f9 f8e8 	bl	801258c <pbuf_free>
  return;
 80193bc:	e013      	b.n	80193e6 <icmp_input+0x1ea>
    goto lenerr;
 80193be:	bf00      	nop
 80193c0:	e002      	b.n	80193c8 <icmp_input+0x1cc>
    goto lenerr;
 80193c2:	bf00      	nop
 80193c4:	e000      	b.n	80193c8 <icmp_input+0x1cc>
        goto lenerr;
 80193c6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80193c8:	6878      	ldr	r0, [r7, #4]
 80193ca:	f7f9 f8df 	bl	801258c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193ce:	e00a      	b.n	80193e6 <icmp_input+0x1ea>
        goto icmperr;
 80193d0:	bf00      	nop
 80193d2:	e004      	b.n	80193de <icmp_input+0x1e2>
        goto icmperr;
 80193d4:	bf00      	nop
 80193d6:	e002      	b.n	80193de <icmp_input+0x1e2>
          goto icmperr;
 80193d8:	bf00      	nop
 80193da:	e000      	b.n	80193de <icmp_input+0x1e2>
          goto icmperr;
 80193dc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f7f9 f8d4 	bl	801258c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193e4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80193e6:	3728      	adds	r7, #40	; 0x28
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}
 80193ec:	200054e8 	.word	0x200054e8
 80193f0:	200054fc 	.word	0x200054fc
 80193f4:	0801ecf0 	.word	0x0801ecf0
 80193f8:	0801ed28 	.word	0x0801ed28
 80193fc:	0801ed60 	.word	0x0801ed60
 8019400:	0801ed88 	.word	0x0801ed88

08019404 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	460b      	mov	r3, r1
 801940e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019410:	78fb      	ldrb	r3, [r7, #3]
 8019412:	461a      	mov	r2, r3
 8019414:	2103      	movs	r1, #3
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	f000 f814 	bl	8019444 <icmp_send_response>
}
 801941c:	bf00      	nop
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}

08019424 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	460b      	mov	r3, r1
 801942e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019430:	78fb      	ldrb	r3, [r7, #3]
 8019432:	461a      	mov	r2, r3
 8019434:	210b      	movs	r1, #11
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f804 	bl	8019444 <icmp_send_response>
}
 801943c:	bf00      	nop
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}

08019444 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b08c      	sub	sp, #48	; 0x30
 8019448:	af04      	add	r7, sp, #16
 801944a:	6078      	str	r0, [r7, #4]
 801944c:	460b      	mov	r3, r1
 801944e:	70fb      	strb	r3, [r7, #3]
 8019450:	4613      	mov	r3, r2
 8019452:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019454:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019458:	2124      	movs	r1, #36	; 0x24
 801945a:	2022      	movs	r0, #34	; 0x22
 801945c:	f7f8 fdb2 	bl	8011fc4 <pbuf_alloc>
 8019460:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019462:	69fb      	ldr	r3, [r7, #28]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d04c      	beq.n	8019502 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019468:	69fb      	ldr	r3, [r7, #28]
 801946a:	895b      	ldrh	r3, [r3, #10]
 801946c:	2b23      	cmp	r3, #35	; 0x23
 801946e:	d806      	bhi.n	801947e <icmp_send_response+0x3a>
 8019470:	4b26      	ldr	r3, [pc, #152]	; (801950c <icmp_send_response+0xc8>)
 8019472:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019476:	4926      	ldr	r1, [pc, #152]	; (8019510 <icmp_send_response+0xcc>)
 8019478:	4826      	ldr	r0, [pc, #152]	; (8019514 <icmp_send_response+0xd0>)
 801947a:	f002 fa0b 	bl	801b894 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	685b      	ldr	r3, [r3, #4]
 8019482:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019484:	69fb      	ldr	r3, [r7, #28]
 8019486:	685b      	ldr	r3, [r3, #4]
 8019488:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	78fa      	ldrb	r2, [r7, #3]
 801948e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	78ba      	ldrb	r2, [r7, #2]
 8019494:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	2200      	movs	r2, #0
 801949a:	711a      	strb	r2, [r3, #4]
 801949c:	2200      	movs	r2, #0
 801949e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80194a0:	697b      	ldr	r3, [r7, #20]
 80194a2:	2200      	movs	r2, #0
 80194a4:	719a      	strb	r2, [r3, #6]
 80194a6:	2200      	movs	r2, #0
 80194a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80194aa:	69fb      	ldr	r3, [r7, #28]
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	f103 0008 	add.w	r0, r3, #8
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	685b      	ldr	r3, [r3, #4]
 80194b6:	221c      	movs	r2, #28
 80194b8:	4619      	mov	r1, r3
 80194ba:	f002 fac6 	bl	801ba4a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	68db      	ldr	r3, [r3, #12]
 80194c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80194c4:	f107 030c 	add.w	r3, r7, #12
 80194c8:	4618      	mov	r0, r3
 80194ca:	f000 f825 	bl	8019518 <ip4_route>
 80194ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80194d0:	693b      	ldr	r3, [r7, #16]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d011      	beq.n	80194fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	2200      	movs	r2, #0
 80194da:	709a      	strb	r2, [r3, #2]
 80194dc:	2200      	movs	r2, #0
 80194de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80194e0:	f107 020c 	add.w	r2, r7, #12
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	9302      	str	r3, [sp, #8]
 80194e8:	2301      	movs	r3, #1
 80194ea:	9301      	str	r3, [sp, #4]
 80194ec:	2300      	movs	r3, #0
 80194ee:	9300      	str	r3, [sp, #0]
 80194f0:	23ff      	movs	r3, #255	; 0xff
 80194f2:	2100      	movs	r1, #0
 80194f4:	69f8      	ldr	r0, [r7, #28]
 80194f6:	f000 f9cd 	bl	8019894 <ip4_output_if>
  }
  pbuf_free(q);
 80194fa:	69f8      	ldr	r0, [r7, #28]
 80194fc:	f7f9 f846 	bl	801258c <pbuf_free>
 8019500:	e000      	b.n	8019504 <icmp_send_response+0xc0>
    return;
 8019502:	bf00      	nop
}
 8019504:	3720      	adds	r7, #32
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
 801950a:	bf00      	nop
 801950c:	0801ecf0 	.word	0x0801ecf0
 8019510:	0801edbc 	.word	0x0801edbc
 8019514:	0801ed60 	.word	0x0801ed60

08019518 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019518:	b480      	push	{r7}
 801951a:	b085      	sub	sp, #20
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019520:	4b33      	ldr	r3, [pc, #204]	; (80195f0 <ip4_route+0xd8>)
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	60fb      	str	r3, [r7, #12]
 8019526:	e036      	b.n	8019596 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801952e:	f003 0301 	and.w	r3, r3, #1
 8019532:	b2db      	uxtb	r3, r3
 8019534:	2b00      	cmp	r3, #0
 8019536:	d02b      	beq.n	8019590 <ip4_route+0x78>
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801953e:	089b      	lsrs	r3, r3, #2
 8019540:	f003 0301 	and.w	r3, r3, #1
 8019544:	b2db      	uxtb	r3, r3
 8019546:	2b00      	cmp	r3, #0
 8019548:	d022      	beq.n	8019590 <ip4_route+0x78>
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	3304      	adds	r3, #4
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d01d      	beq.n	8019590 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681a      	ldr	r2, [r3, #0]
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	3304      	adds	r3, #4
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	405a      	eors	r2, r3
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	3308      	adds	r3, #8
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	4013      	ands	r3, r2
 8019568:	2b00      	cmp	r3, #0
 801956a:	d101      	bne.n	8019570 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	e038      	b.n	80195e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019576:	f003 0302 	and.w	r3, r3, #2
 801957a:	2b00      	cmp	r3, #0
 801957c:	d108      	bne.n	8019590 <ip4_route+0x78>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681a      	ldr	r2, [r3, #0]
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	330c      	adds	r3, #12
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	429a      	cmp	r2, r3
 801958a:	d101      	bne.n	8019590 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	e028      	b.n	80195e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	60fb      	str	r3, [r7, #12]
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d1c5      	bne.n	8019528 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801959c:	4b15      	ldr	r3, [pc, #84]	; (80195f4 <ip4_route+0xdc>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d01a      	beq.n	80195da <ip4_route+0xc2>
 80195a4:	4b13      	ldr	r3, [pc, #76]	; (80195f4 <ip4_route+0xdc>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195ac:	f003 0301 	and.w	r3, r3, #1
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d012      	beq.n	80195da <ip4_route+0xc2>
 80195b4:	4b0f      	ldr	r3, [pc, #60]	; (80195f4 <ip4_route+0xdc>)
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195bc:	f003 0304 	and.w	r3, r3, #4
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d00a      	beq.n	80195da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195c4:	4b0b      	ldr	r3, [pc, #44]	; (80195f4 <ip4_route+0xdc>)
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	3304      	adds	r3, #4
 80195ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d004      	beq.n	80195da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	2b7f      	cmp	r3, #127	; 0x7f
 80195d8:	d101      	bne.n	80195de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80195da:	2300      	movs	r3, #0
 80195dc:	e001      	b.n	80195e2 <ip4_route+0xca>
  }

  return netif_default;
 80195de:	4b05      	ldr	r3, [pc, #20]	; (80195f4 <ip4_route+0xdc>)
 80195e0:	681b      	ldr	r3, [r3, #0]
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3714      	adds	r7, #20
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr
 80195ee:	bf00      	nop
 80195f0:	2000860c 	.word	0x2000860c
 80195f4:	20008610 	.word	0x20008610

080195f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b082      	sub	sp, #8
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019606:	f003 0301 	and.w	r3, r3, #1
 801960a:	b2db      	uxtb	r3, r3
 801960c:	2b00      	cmp	r3, #0
 801960e:	d016      	beq.n	801963e <ip4_input_accept+0x46>
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	3304      	adds	r3, #4
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d011      	beq.n	801963e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801961a:	4b0b      	ldr	r3, [pc, #44]	; (8019648 <ip4_input_accept+0x50>)
 801961c:	695a      	ldr	r2, [r3, #20]
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	3304      	adds	r3, #4
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	429a      	cmp	r2, r3
 8019626:	d008      	beq.n	801963a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019628:	4b07      	ldr	r3, [pc, #28]	; (8019648 <ip4_input_accept+0x50>)
 801962a:	695b      	ldr	r3, [r3, #20]
 801962c:	6879      	ldr	r1, [r7, #4]
 801962e:	4618      	mov	r0, r3
 8019630:	f000 fa08 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8019634:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019636:	2b00      	cmp	r3, #0
 8019638:	d001      	beq.n	801963e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801963a:	2301      	movs	r3, #1
 801963c:	e000      	b.n	8019640 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801963e:	2300      	movs	r3, #0
}
 8019640:	4618      	mov	r0, r3
 8019642:	3708      	adds	r7, #8
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}
 8019648:	200054e8 	.word	0x200054e8

0801964c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b086      	sub	sp, #24
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	091b      	lsrs	r3, r3, #4
 8019662:	b2db      	uxtb	r3, r3
 8019664:	2b04      	cmp	r3, #4
 8019666:	d004      	beq.n	8019672 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7f8 ff8f 	bl	801258c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801966e:	2300      	movs	r3, #0
 8019670:	e107      	b.n	8019882 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019672:	697b      	ldr	r3, [r7, #20]
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	f003 030f 	and.w	r3, r3, #15
 801967a:	b2db      	uxtb	r3, r3
 801967c:	009b      	lsls	r3, r3, #2
 801967e:	b2db      	uxtb	r3, r3
 8019680:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	885b      	ldrh	r3, [r3, #2]
 8019686:	b29b      	uxth	r3, r3
 8019688:	4618      	mov	r0, r3
 801968a:	f7f7 fc22 	bl	8010ed2 <lwip_htons>
 801968e:	4603      	mov	r3, r0
 8019690:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	891b      	ldrh	r3, [r3, #8]
 8019696:	89ba      	ldrh	r2, [r7, #12]
 8019698:	429a      	cmp	r2, r3
 801969a:	d204      	bcs.n	80196a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801969c:	89bb      	ldrh	r3, [r7, #12]
 801969e:	4619      	mov	r1, r3
 80196a0:	6878      	ldr	r0, [r7, #4]
 80196a2:	f7f8 fded 	bl	8012280 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	895b      	ldrh	r3, [r3, #10]
 80196aa:	89fa      	ldrh	r2, [r7, #14]
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d807      	bhi.n	80196c0 <ip4_input+0x74>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	891b      	ldrh	r3, [r3, #8]
 80196b4:	89ba      	ldrh	r2, [r7, #12]
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d802      	bhi.n	80196c0 <ip4_input+0x74>
 80196ba:	89fb      	ldrh	r3, [r7, #14]
 80196bc:	2b13      	cmp	r3, #19
 80196be:	d804      	bhi.n	80196ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80196c0:	6878      	ldr	r0, [r7, #4]
 80196c2:	f7f8 ff63 	bl	801258c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80196c6:	2300      	movs	r3, #0
 80196c8:	e0db      	b.n	8019882 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	691b      	ldr	r3, [r3, #16]
 80196ce:	4a6f      	ldr	r2, [pc, #444]	; (801988c <ip4_input+0x240>)
 80196d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	68db      	ldr	r3, [r3, #12]
 80196d6:	4a6d      	ldr	r2, [pc, #436]	; (801988c <ip4_input+0x240>)
 80196d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80196da:	4b6c      	ldr	r3, [pc, #432]	; (801988c <ip4_input+0x240>)
 80196dc:	695b      	ldr	r3, [r3, #20]
 80196de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196e2:	2be0      	cmp	r3, #224	; 0xe0
 80196e4:	d112      	bne.n	801970c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196ec:	f003 0301 	and.w	r3, r3, #1
 80196f0:	b2db      	uxtb	r3, r3
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d007      	beq.n	8019706 <ip4_input+0xba>
 80196f6:	683b      	ldr	r3, [r7, #0]
 80196f8:	3304      	adds	r3, #4
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d002      	beq.n	8019706 <ip4_input+0xba>
      netif = inp;
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	613b      	str	r3, [r7, #16]
 8019704:	e02a      	b.n	801975c <ip4_input+0x110>
    } else {
      netif = NULL;
 8019706:	2300      	movs	r3, #0
 8019708:	613b      	str	r3, [r7, #16]
 801970a:	e027      	b.n	801975c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801970c:	6838      	ldr	r0, [r7, #0]
 801970e:	f7ff ff73 	bl	80195f8 <ip4_input_accept>
 8019712:	4603      	mov	r3, r0
 8019714:	2b00      	cmp	r3, #0
 8019716:	d002      	beq.n	801971e <ip4_input+0xd2>
      netif = inp;
 8019718:	683b      	ldr	r3, [r7, #0]
 801971a:	613b      	str	r3, [r7, #16]
 801971c:	e01e      	b.n	801975c <ip4_input+0x110>
    } else {
      netif = NULL;
 801971e:	2300      	movs	r3, #0
 8019720:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019722:	4b5a      	ldr	r3, [pc, #360]	; (801988c <ip4_input+0x240>)
 8019724:	695b      	ldr	r3, [r3, #20]
 8019726:	b2db      	uxtb	r3, r3
 8019728:	2b7f      	cmp	r3, #127	; 0x7f
 801972a:	d017      	beq.n	801975c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801972c:	4b58      	ldr	r3, [pc, #352]	; (8019890 <ip4_input+0x244>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	613b      	str	r3, [r7, #16]
 8019732:	e00e      	b.n	8019752 <ip4_input+0x106>
          if (netif == inp) {
 8019734:	693a      	ldr	r2, [r7, #16]
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	429a      	cmp	r2, r3
 801973a:	d006      	beq.n	801974a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801973c:	6938      	ldr	r0, [r7, #16]
 801973e:	f7ff ff5b 	bl	80195f8 <ip4_input_accept>
 8019742:	4603      	mov	r3, r0
 8019744:	2b00      	cmp	r3, #0
 8019746:	d108      	bne.n	801975a <ip4_input+0x10e>
 8019748:	e000      	b.n	801974c <ip4_input+0x100>
            continue;
 801974a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801974c:	693b      	ldr	r3, [r7, #16]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	613b      	str	r3, [r7, #16]
 8019752:	693b      	ldr	r3, [r7, #16]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d1ed      	bne.n	8019734 <ip4_input+0xe8>
 8019758:	e000      	b.n	801975c <ip4_input+0x110>
            break;
 801975a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801975c:	4b4b      	ldr	r3, [pc, #300]	; (801988c <ip4_input+0x240>)
 801975e:	691b      	ldr	r3, [r3, #16]
 8019760:	6839      	ldr	r1, [r7, #0]
 8019762:	4618      	mov	r0, r3
 8019764:	f000 f96e 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 8019768:	4603      	mov	r3, r0
 801976a:	2b00      	cmp	r3, #0
 801976c:	d105      	bne.n	801977a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801976e:	4b47      	ldr	r3, [pc, #284]	; (801988c <ip4_input+0x240>)
 8019770:	691b      	ldr	r3, [r3, #16]
 8019772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019776:	2be0      	cmp	r3, #224	; 0xe0
 8019778:	d104      	bne.n	8019784 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7f8 ff06 	bl	801258c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019780:	2300      	movs	r3, #0
 8019782:	e07e      	b.n	8019882 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019784:	693b      	ldr	r3, [r7, #16]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d104      	bne.n	8019794 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801978a:	6878      	ldr	r0, [r7, #4]
 801978c:	f7f8 fefe 	bl	801258c <pbuf_free>
    return ERR_OK;
 8019790:	2300      	movs	r3, #0
 8019792:	e076      	b.n	8019882 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	88db      	ldrh	r3, [r3, #6]
 8019798:	b29b      	uxth	r3, r3
 801979a:	461a      	mov	r2, r3
 801979c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80197a0:	4013      	ands	r3, r2
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d00b      	beq.n	80197be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f000 fc92 	bl	801a0d0 <ip4_reass>
 80197ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d101      	bne.n	80197b8 <ip4_input+0x16c>
      return ERR_OK;
 80197b4:	2300      	movs	r3, #0
 80197b6:	e064      	b.n	8019882 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	685b      	ldr	r3, [r3, #4]
 80197bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80197be:	4a33      	ldr	r2, [pc, #204]	; (801988c <ip4_input+0x240>)
 80197c0:	693b      	ldr	r3, [r7, #16]
 80197c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80197c4:	4a31      	ldr	r2, [pc, #196]	; (801988c <ip4_input+0x240>)
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80197ca:	4a30      	ldr	r2, [pc, #192]	; (801988c <ip4_input+0x240>)
 80197cc:	697b      	ldr	r3, [r7, #20]
 80197ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	f003 030f 	and.w	r3, r3, #15
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	009b      	lsls	r3, r3, #2
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	b29a      	uxth	r2, r3
 80197e0:	4b2a      	ldr	r3, [pc, #168]	; (801988c <ip4_input+0x240>)
 80197e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80197e4:	89fb      	ldrh	r3, [r7, #14]
 80197e6:	4619      	mov	r1, r3
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	f7f8 fe49 	bl	8012480 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	7a5b      	ldrb	r3, [r3, #9]
 80197f2:	2b11      	cmp	r3, #17
 80197f4:	d006      	beq.n	8019804 <ip4_input+0x1b8>
 80197f6:	2b11      	cmp	r3, #17
 80197f8:	dc13      	bgt.n	8019822 <ip4_input+0x1d6>
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d00c      	beq.n	8019818 <ip4_input+0x1cc>
 80197fe:	2b06      	cmp	r3, #6
 8019800:	d005      	beq.n	801980e <ip4_input+0x1c2>
 8019802:	e00e      	b.n	8019822 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019804:	6839      	ldr	r1, [r7, #0]
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f7fe fc68 	bl	80180dc <udp_input>
        break;
 801980c:	e026      	b.n	801985c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801980e:	6839      	ldr	r1, [r7, #0]
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f7fa fce3 	bl	80141dc <tcp_input>
        break;
 8019816:	e021      	b.n	801985c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019818:	6839      	ldr	r1, [r7, #0]
 801981a:	6878      	ldr	r0, [r7, #4]
 801981c:	f7ff fcee 	bl	80191fc <icmp_input>
        break;
 8019820:	e01c      	b.n	801985c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019822:	4b1a      	ldr	r3, [pc, #104]	; (801988c <ip4_input+0x240>)
 8019824:	695b      	ldr	r3, [r3, #20]
 8019826:	6939      	ldr	r1, [r7, #16]
 8019828:	4618      	mov	r0, r3
 801982a:	f000 f90b 	bl	8019a44 <ip4_addr_isbroadcast_u32>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d10f      	bne.n	8019854 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019834:	4b15      	ldr	r3, [pc, #84]	; (801988c <ip4_input+0x240>)
 8019836:	695b      	ldr	r3, [r3, #20]
 8019838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801983c:	2be0      	cmp	r3, #224	; 0xe0
 801983e:	d009      	beq.n	8019854 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019844:	4619      	mov	r1, r3
 8019846:	6878      	ldr	r0, [r7, #4]
 8019848:	f7f8 fe8d 	bl	8012566 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801984c:	2102      	movs	r1, #2
 801984e:	6878      	ldr	r0, [r7, #4]
 8019850:	f7ff fdd8 	bl	8019404 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019854:	6878      	ldr	r0, [r7, #4]
 8019856:	f7f8 fe99 	bl	801258c <pbuf_free>
        break;
 801985a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801985c:	4b0b      	ldr	r3, [pc, #44]	; (801988c <ip4_input+0x240>)
 801985e:	2200      	movs	r2, #0
 8019860:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019862:	4b0a      	ldr	r3, [pc, #40]	; (801988c <ip4_input+0x240>)
 8019864:	2200      	movs	r2, #0
 8019866:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019868:	4b08      	ldr	r3, [pc, #32]	; (801988c <ip4_input+0x240>)
 801986a:	2200      	movs	r2, #0
 801986c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801986e:	4b07      	ldr	r3, [pc, #28]	; (801988c <ip4_input+0x240>)
 8019870:	2200      	movs	r2, #0
 8019872:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019874:	4b05      	ldr	r3, [pc, #20]	; (801988c <ip4_input+0x240>)
 8019876:	2200      	movs	r2, #0
 8019878:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801987a:	4b04      	ldr	r3, [pc, #16]	; (801988c <ip4_input+0x240>)
 801987c:	2200      	movs	r2, #0
 801987e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	3718      	adds	r7, #24
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	200054e8 	.word	0x200054e8
 8019890:	2000860c 	.word	0x2000860c

08019894 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b08a      	sub	sp, #40	; 0x28
 8019898:	af04      	add	r7, sp, #16
 801989a:	60f8      	str	r0, [r7, #12]
 801989c:	60b9      	str	r1, [r7, #8]
 801989e:	607a      	str	r2, [r7, #4]
 80198a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80198a2:	68bb      	ldr	r3, [r7, #8]
 80198a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d009      	beq.n	80198c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d003      	beq.n	80198ba <ip4_output_if+0x26>
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d102      	bne.n	80198c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80198ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198bc:	3304      	adds	r3, #4
 80198be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80198c0:	78fa      	ldrb	r2, [r7, #3]
 80198c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c4:	9302      	str	r3, [sp, #8]
 80198c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80198ca:	9301      	str	r3, [sp, #4]
 80198cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80198d0:	9300      	str	r3, [sp, #0]
 80198d2:	4613      	mov	r3, r2
 80198d4:	687a      	ldr	r2, [r7, #4]
 80198d6:	6979      	ldr	r1, [r7, #20]
 80198d8:	68f8      	ldr	r0, [r7, #12]
 80198da:	f000 f805 	bl	80198e8 <ip4_output_if_src>
 80198de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	3718      	adds	r7, #24
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b088      	sub	sp, #32
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	60f8      	str	r0, [r7, #12]
 80198f0:	60b9      	str	r1, [r7, #8]
 80198f2:	607a      	str	r2, [r7, #4]
 80198f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	7b9b      	ldrb	r3, [r3, #14]
 80198fa:	2b01      	cmp	r3, #1
 80198fc:	d006      	beq.n	801990c <ip4_output_if_src+0x24>
 80198fe:	4b4b      	ldr	r3, [pc, #300]	; (8019a2c <ip4_output_if_src+0x144>)
 8019900:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019904:	494a      	ldr	r1, [pc, #296]	; (8019a30 <ip4_output_if_src+0x148>)
 8019906:	484b      	ldr	r0, [pc, #300]	; (8019a34 <ip4_output_if_src+0x14c>)
 8019908:	f001 ffc4 	bl	801b894 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d060      	beq.n	80199d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019912:	2314      	movs	r3, #20
 8019914:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019916:	2114      	movs	r1, #20
 8019918:	68f8      	ldr	r0, [r7, #12]
 801991a:	f7f8 fda1 	bl	8012460 <pbuf_add_header>
 801991e:	4603      	mov	r3, r0
 8019920:	2b00      	cmp	r3, #0
 8019922:	d002      	beq.n	801992a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019924:	f06f 0301 	mvn.w	r3, #1
 8019928:	e07c      	b.n	8019a24 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	895b      	ldrh	r3, [r3, #10]
 8019934:	2b13      	cmp	r3, #19
 8019936:	d806      	bhi.n	8019946 <ip4_output_if_src+0x5e>
 8019938:	4b3c      	ldr	r3, [pc, #240]	; (8019a2c <ip4_output_if_src+0x144>)
 801993a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801993e:	493e      	ldr	r1, [pc, #248]	; (8019a38 <ip4_output_if_src+0x150>)
 8019940:	483c      	ldr	r0, [pc, #240]	; (8019a34 <ip4_output_if_src+0x14c>)
 8019942:	f001 ffa7 	bl	801b894 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019946:	69fb      	ldr	r3, [r7, #28]
 8019948:	78fa      	ldrb	r2, [r7, #3]
 801994a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801994c:	69fb      	ldr	r3, [r7, #28]
 801994e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019952:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681a      	ldr	r2, [r3, #0]
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801995c:	8b7b      	ldrh	r3, [r7, #26]
 801995e:	089b      	lsrs	r3, r3, #2
 8019960:	b29b      	uxth	r3, r3
 8019962:	b2db      	uxtb	r3, r3
 8019964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019968:	b2da      	uxtb	r2, r3
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019974:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	891b      	ldrh	r3, [r3, #8]
 801997a:	4618      	mov	r0, r3
 801997c:	f7f7 faa9 	bl	8010ed2 <lwip_htons>
 8019980:	4603      	mov	r3, r0
 8019982:	461a      	mov	r2, r3
 8019984:	69fb      	ldr	r3, [r7, #28]
 8019986:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019988:	69fb      	ldr	r3, [r7, #28]
 801998a:	2200      	movs	r2, #0
 801998c:	719a      	strb	r2, [r3, #6]
 801998e:	2200      	movs	r2, #0
 8019990:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019992:	4b2a      	ldr	r3, [pc, #168]	; (8019a3c <ip4_output_if_src+0x154>)
 8019994:	881b      	ldrh	r3, [r3, #0]
 8019996:	4618      	mov	r0, r3
 8019998:	f7f7 fa9b 	bl	8010ed2 <lwip_htons>
 801999c:	4603      	mov	r3, r0
 801999e:	461a      	mov	r2, r3
 80199a0:	69fb      	ldr	r3, [r7, #28]
 80199a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80199a4:	4b25      	ldr	r3, [pc, #148]	; (8019a3c <ip4_output_if_src+0x154>)
 80199a6:	881b      	ldrh	r3, [r3, #0]
 80199a8:	3301      	adds	r3, #1
 80199aa:	b29a      	uxth	r2, r3
 80199ac:	4b23      	ldr	r3, [pc, #140]	; (8019a3c <ip4_output_if_src+0x154>)
 80199ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80199b0:	68bb      	ldr	r3, [r7, #8]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d104      	bne.n	80199c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80199b6:	4b22      	ldr	r3, [pc, #136]	; (8019a40 <ip4_output_if_src+0x158>)
 80199b8:	681a      	ldr	r2, [r3, #0]
 80199ba:	69fb      	ldr	r3, [r7, #28]
 80199bc:	60da      	str	r2, [r3, #12]
 80199be:	e003      	b.n	80199c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	681a      	ldr	r2, [r3, #0]
 80199c4:	69fb      	ldr	r3, [r7, #28]
 80199c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80199c8:	69fb      	ldr	r3, [r7, #28]
 80199ca:	2200      	movs	r2, #0
 80199cc:	729a      	strb	r2, [r3, #10]
 80199ce:	2200      	movs	r2, #0
 80199d0:	72da      	strb	r2, [r3, #11]
 80199d2:	e00f      	b.n	80199f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	895b      	ldrh	r3, [r3, #10]
 80199d8:	2b13      	cmp	r3, #19
 80199da:	d802      	bhi.n	80199e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80199dc:	f06f 0301 	mvn.w	r3, #1
 80199e0:	e020      	b.n	8019a24 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	685b      	ldr	r3, [r3, #4]
 80199e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80199e8:	69fb      	ldr	r3, [r7, #28]
 80199ea:	691b      	ldr	r3, [r3, #16]
 80199ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80199ee:	f107 0314 	add.w	r3, r7, #20
 80199f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80199f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d00c      	beq.n	8019a16 <ip4_output_if_src+0x12e>
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	891a      	ldrh	r2, [r3, #8]
 8019a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019a04:	429a      	cmp	r2, r3
 8019a06:	d906      	bls.n	8019a16 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019a08:	687a      	ldr	r2, [r7, #4]
 8019a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019a0c:	68f8      	ldr	r0, [r7, #12]
 8019a0e:	f000 fd53 	bl	801a4b8 <ip4_frag>
 8019a12:	4603      	mov	r3, r0
 8019a14:	e006      	b.n	8019a24 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a18:	695b      	ldr	r3, [r3, #20]
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	68f9      	ldr	r1, [r7, #12]
 8019a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a20:	4798      	blx	r3
 8019a22:	4603      	mov	r3, r0
}
 8019a24:	4618      	mov	r0, r3
 8019a26:	3720      	adds	r7, #32
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	0801ede8 	.word	0x0801ede8
 8019a30:	0801ee1c 	.word	0x0801ee1c
 8019a34:	0801ee28 	.word	0x0801ee28
 8019a38:	0801ee50 	.word	0x0801ee50
 8019a3c:	2000876a 	.word	0x2000876a
 8019a40:	0801f344 	.word	0x0801f344

08019a44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b085      	sub	sp, #20
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
 8019a4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a58:	d002      	beq.n	8019a60 <ip4_addr_isbroadcast_u32+0x1c>
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d101      	bne.n	8019a64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019a60:	2301      	movs	r3, #1
 8019a62:	e02a      	b.n	8019aba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a6a:	f003 0302 	and.w	r3, r3, #2
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d101      	bne.n	8019a76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019a72:	2300      	movs	r3, #0
 8019a74:	e021      	b.n	8019aba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	3304      	adds	r3, #4
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	687a      	ldr	r2, [r7, #4]
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d101      	bne.n	8019a86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019a82:	2300      	movs	r3, #0
 8019a84:	e019      	b.n	8019aba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019a86:	68fa      	ldr	r2, [r7, #12]
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	3304      	adds	r3, #4
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	405a      	eors	r2, r3
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	3308      	adds	r3, #8
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	4013      	ands	r3, r2
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d10d      	bne.n	8019ab8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	3308      	adds	r3, #8
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	43da      	mvns	r2, r3
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	3308      	adds	r3, #8
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	d101      	bne.n	8019ab8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	e000      	b.n	8019aba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019ab8:	2300      	movs	r3, #0
  }
}
 8019aba:	4618      	mov	r0, r3
 8019abc:	3714      	adds	r7, #20
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac4:	4770      	bx	lr
	...

08019ac8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b084      	sub	sp, #16
 8019acc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019ad2:	4b12      	ldr	r3, [pc, #72]	; (8019b1c <ip_reass_tmr+0x54>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019ad8:	e018      	b.n	8019b0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	7fdb      	ldrb	r3, [r3, #31]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d00b      	beq.n	8019afa <ip_reass_tmr+0x32>
      r->timer--;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	7fdb      	ldrb	r3, [r3, #31]
 8019ae6:	3b01      	subs	r3, #1
 8019ae8:	b2da      	uxtb	r2, r3
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	60fb      	str	r3, [r7, #12]
 8019af8:	e008      	b.n	8019b0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019b04:	68b9      	ldr	r1, [r7, #8]
 8019b06:	6878      	ldr	r0, [r7, #4]
 8019b08:	f000 f80a 	bl	8019b20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d1e3      	bne.n	8019ada <ip_reass_tmr+0x12>
    }
  }
}
 8019b12:	bf00      	nop
 8019b14:	bf00      	nop
 8019b16:	3710      	adds	r7, #16
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}
 8019b1c:	2000876c 	.word	0x2000876c

08019b20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b088      	sub	sp, #32
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
 8019b28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019b2e:	683a      	ldr	r2, [r7, #0]
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d105      	bne.n	8019b42 <ip_reass_free_complete_datagram+0x22>
 8019b36:	4b45      	ldr	r3, [pc, #276]	; (8019c4c <ip_reass_free_complete_datagram+0x12c>)
 8019b38:	22ab      	movs	r2, #171	; 0xab
 8019b3a:	4945      	ldr	r1, [pc, #276]	; (8019c50 <ip_reass_free_complete_datagram+0x130>)
 8019b3c:	4845      	ldr	r0, [pc, #276]	; (8019c54 <ip_reass_free_complete_datagram+0x134>)
 8019b3e:	f001 fea9 	bl	801b894 <iprintf>
  if (prev != NULL) {
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d00a      	beq.n	8019b5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	687a      	ldr	r2, [r7, #4]
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	d005      	beq.n	8019b5e <ip_reass_free_complete_datagram+0x3e>
 8019b52:	4b3e      	ldr	r3, [pc, #248]	; (8019c4c <ip_reass_free_complete_datagram+0x12c>)
 8019b54:	22ad      	movs	r2, #173	; 0xad
 8019b56:	4940      	ldr	r1, [pc, #256]	; (8019c58 <ip_reass_free_complete_datagram+0x138>)
 8019b58:	483e      	ldr	r0, [pc, #248]	; (8019c54 <ip_reass_free_complete_datagram+0x134>)
 8019b5a:	f001 fe9b 	bl	801b894 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	685b      	ldr	r3, [r3, #4]
 8019b62:	685b      	ldr	r3, [r3, #4]
 8019b64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019b66:	697b      	ldr	r3, [r7, #20]
 8019b68:	889b      	ldrh	r3, [r3, #4]
 8019b6a:	b29b      	uxth	r3, r3
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d12a      	bne.n	8019bc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	685b      	ldr	r3, [r3, #4]
 8019b74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	681a      	ldr	r2, [r3, #0]
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019b7e:	69bb      	ldr	r3, [r7, #24]
 8019b80:	6858      	ldr	r0, [r3, #4]
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	3308      	adds	r3, #8
 8019b86:	2214      	movs	r2, #20
 8019b88:	4619      	mov	r1, r3
 8019b8a:	f001 ff5e 	bl	801ba4a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019b8e:	2101      	movs	r1, #1
 8019b90:	69b8      	ldr	r0, [r7, #24]
 8019b92:	f7ff fc47 	bl	8019424 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019b96:	69b8      	ldr	r0, [r7, #24]
 8019b98:	f7f8 fd80 	bl	801269c <pbuf_clen>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ba0:	8bfa      	ldrh	r2, [r7, #30]
 8019ba2:	8a7b      	ldrh	r3, [r7, #18]
 8019ba4:	4413      	add	r3, r2
 8019ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019baa:	db05      	blt.n	8019bb8 <ip_reass_free_complete_datagram+0x98>
 8019bac:	4b27      	ldr	r3, [pc, #156]	; (8019c4c <ip_reass_free_complete_datagram+0x12c>)
 8019bae:	22bc      	movs	r2, #188	; 0xbc
 8019bb0:	492a      	ldr	r1, [pc, #168]	; (8019c5c <ip_reass_free_complete_datagram+0x13c>)
 8019bb2:	4828      	ldr	r0, [pc, #160]	; (8019c54 <ip_reass_free_complete_datagram+0x134>)
 8019bb4:	f001 fe6e 	bl	801b894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019bb8:	8bfa      	ldrh	r2, [r7, #30]
 8019bba:	8a7b      	ldrh	r3, [r7, #18]
 8019bbc:	4413      	add	r3, r2
 8019bbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019bc0:	69b8      	ldr	r0, [r7, #24]
 8019bc2:	f7f8 fce3 	bl	801258c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	685b      	ldr	r3, [r3, #4]
 8019bca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019bcc:	e01f      	b.n	8019c0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019bce:	69bb      	ldr	r3, [r7, #24]
 8019bd0:	685b      	ldr	r3, [r3, #4]
 8019bd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019bd4:	69bb      	ldr	r3, [r7, #24]
 8019bd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019bde:	68f8      	ldr	r0, [r7, #12]
 8019be0:	f7f8 fd5c 	bl	801269c <pbuf_clen>
 8019be4:	4603      	mov	r3, r0
 8019be6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019be8:	8bfa      	ldrh	r2, [r7, #30]
 8019bea:	8a7b      	ldrh	r3, [r7, #18]
 8019bec:	4413      	add	r3, r2
 8019bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019bf2:	db05      	blt.n	8019c00 <ip_reass_free_complete_datagram+0xe0>
 8019bf4:	4b15      	ldr	r3, [pc, #84]	; (8019c4c <ip_reass_free_complete_datagram+0x12c>)
 8019bf6:	22cc      	movs	r2, #204	; 0xcc
 8019bf8:	4918      	ldr	r1, [pc, #96]	; (8019c5c <ip_reass_free_complete_datagram+0x13c>)
 8019bfa:	4816      	ldr	r0, [pc, #88]	; (8019c54 <ip_reass_free_complete_datagram+0x134>)
 8019bfc:	f001 fe4a 	bl	801b894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019c00:	8bfa      	ldrh	r2, [r7, #30]
 8019c02:	8a7b      	ldrh	r3, [r7, #18]
 8019c04:	4413      	add	r3, r2
 8019c06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019c08:	68f8      	ldr	r0, [r7, #12]
 8019c0a:	f7f8 fcbf 	bl	801258c <pbuf_free>
  while (p != NULL) {
 8019c0e:	69bb      	ldr	r3, [r7, #24]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d1dc      	bne.n	8019bce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019c14:	6839      	ldr	r1, [r7, #0]
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f000 f8c2 	bl	8019da0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019c1c:	4b10      	ldr	r3, [pc, #64]	; (8019c60 <ip_reass_free_complete_datagram+0x140>)
 8019c1e:	881b      	ldrh	r3, [r3, #0]
 8019c20:	8bfa      	ldrh	r2, [r7, #30]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d905      	bls.n	8019c32 <ip_reass_free_complete_datagram+0x112>
 8019c26:	4b09      	ldr	r3, [pc, #36]	; (8019c4c <ip_reass_free_complete_datagram+0x12c>)
 8019c28:	22d2      	movs	r2, #210	; 0xd2
 8019c2a:	490e      	ldr	r1, [pc, #56]	; (8019c64 <ip_reass_free_complete_datagram+0x144>)
 8019c2c:	4809      	ldr	r0, [pc, #36]	; (8019c54 <ip_reass_free_complete_datagram+0x134>)
 8019c2e:	f001 fe31 	bl	801b894 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019c32:	4b0b      	ldr	r3, [pc, #44]	; (8019c60 <ip_reass_free_complete_datagram+0x140>)
 8019c34:	881a      	ldrh	r2, [r3, #0]
 8019c36:	8bfb      	ldrh	r3, [r7, #30]
 8019c38:	1ad3      	subs	r3, r2, r3
 8019c3a:	b29a      	uxth	r2, r3
 8019c3c:	4b08      	ldr	r3, [pc, #32]	; (8019c60 <ip_reass_free_complete_datagram+0x140>)
 8019c3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019c40:	8bfb      	ldrh	r3, [r7, #30]
}
 8019c42:	4618      	mov	r0, r3
 8019c44:	3720      	adds	r7, #32
 8019c46:	46bd      	mov	sp, r7
 8019c48:	bd80      	pop	{r7, pc}
 8019c4a:	bf00      	nop
 8019c4c:	0801ee80 	.word	0x0801ee80
 8019c50:	0801eebc 	.word	0x0801eebc
 8019c54:	0801eec8 	.word	0x0801eec8
 8019c58:	0801eef0 	.word	0x0801eef0
 8019c5c:	0801ef04 	.word	0x0801ef04
 8019c60:	20008770 	.word	0x20008770
 8019c64:	0801ef24 	.word	0x0801ef24

08019c68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b08a      	sub	sp, #40	; 0x28
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
 8019c70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019c72:	2300      	movs	r3, #0
 8019c74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019c76:	2300      	movs	r3, #0
 8019c78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019c7e:	2300      	movs	r3, #0
 8019c80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019c82:	2300      	movs	r3, #0
 8019c84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019c86:	4b28      	ldr	r3, [pc, #160]	; (8019d28 <ip_reass_remove_oldest_datagram+0xc0>)
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c8c:	e030      	b.n	8019cf0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c90:	695a      	ldr	r2, [r3, #20]
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	68db      	ldr	r3, [r3, #12]
 8019c96:	429a      	cmp	r2, r3
 8019c98:	d10c      	bne.n	8019cb4 <ip_reass_remove_oldest_datagram+0x4c>
 8019c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c9c:	699a      	ldr	r2, [r3, #24]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	691b      	ldr	r3, [r3, #16]
 8019ca2:	429a      	cmp	r2, r3
 8019ca4:	d106      	bne.n	8019cb4 <ip_reass_remove_oldest_datagram+0x4c>
 8019ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca8:	899a      	ldrh	r2, [r3, #12]
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	889b      	ldrh	r3, [r3, #4]
 8019cae:	b29b      	uxth	r3, r3
 8019cb0:	429a      	cmp	r2, r3
 8019cb2:	d014      	beq.n	8019cde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019cba:	6a3b      	ldr	r3, [r7, #32]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d104      	bne.n	8019cca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019cc4:	69fb      	ldr	r3, [r7, #28]
 8019cc6:	61bb      	str	r3, [r7, #24]
 8019cc8:	e009      	b.n	8019cde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ccc:	7fda      	ldrb	r2, [r3, #31]
 8019cce:	6a3b      	ldr	r3, [r7, #32]
 8019cd0:	7fdb      	ldrb	r3, [r3, #31]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	d803      	bhi.n	8019cde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019cda:	69fb      	ldr	r3, [r7, #28]
 8019cdc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d001      	beq.n	8019cea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d1cb      	bne.n	8019c8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019cf6:	6a3b      	ldr	r3, [r7, #32]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d008      	beq.n	8019d0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019cfc:	69b9      	ldr	r1, [r7, #24]
 8019cfe:	6a38      	ldr	r0, [r7, #32]
 8019d00:	f7ff ff0e 	bl	8019b20 <ip_reass_free_complete_datagram>
 8019d04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019d06:	697a      	ldr	r2, [r7, #20]
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	4413      	add	r3, r2
 8019d0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019d0e:	697a      	ldr	r2, [r7, #20]
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	da02      	bge.n	8019d1c <ip_reass_remove_oldest_datagram+0xb4>
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	dcac      	bgt.n	8019c76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019d1c:	697b      	ldr	r3, [r7, #20]
}
 8019d1e:	4618      	mov	r0, r3
 8019d20:	3728      	adds	r7, #40	; 0x28
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bd80      	pop	{r7, pc}
 8019d26:	bf00      	nop
 8019d28:	2000876c 	.word	0x2000876c

08019d2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b084      	sub	sp, #16
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019d36:	2004      	movs	r0, #4
 8019d38:	f7f7 fd42 	bl	80117c0 <memp_malloc>
 8019d3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d110      	bne.n	8019d66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019d44:	6839      	ldr	r1, [r7, #0]
 8019d46:	6878      	ldr	r0, [r7, #4]
 8019d48:	f7ff ff8e 	bl	8019c68 <ip_reass_remove_oldest_datagram>
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	4293      	cmp	r3, r2
 8019d52:	dc03      	bgt.n	8019d5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019d54:	2004      	movs	r0, #4
 8019d56:	f7f7 fd33 	bl	80117c0 <memp_malloc>
 8019d5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d101      	bne.n	8019d66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019d62:	2300      	movs	r3, #0
 8019d64:	e016      	b.n	8019d94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019d66:	2220      	movs	r2, #32
 8019d68:	2100      	movs	r1, #0
 8019d6a:	68f8      	ldr	r0, [r7, #12]
 8019d6c:	f001 fdf7 	bl	801b95e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	220f      	movs	r2, #15
 8019d74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019d76:	4b09      	ldr	r3, [pc, #36]	; (8019d9c <ip_reass_enqueue_new_datagram+0x70>)
 8019d78:	681a      	ldr	r2, [r3, #0]
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019d7e:	4a07      	ldr	r2, [pc, #28]	; (8019d9c <ip_reass_enqueue_new_datagram+0x70>)
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	3308      	adds	r3, #8
 8019d88:	2214      	movs	r2, #20
 8019d8a:	6879      	ldr	r1, [r7, #4]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f001 fe5c 	bl	801ba4a <memcpy>
  return ipr;
 8019d92:	68fb      	ldr	r3, [r7, #12]
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	3710      	adds	r7, #16
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	2000876c 	.word	0x2000876c

08019da0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
 8019da8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019daa:	4b10      	ldr	r3, [pc, #64]	; (8019dec <ip_reass_dequeue_datagram+0x4c>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	429a      	cmp	r2, r3
 8019db2:	d104      	bne.n	8019dbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4a0c      	ldr	r2, [pc, #48]	; (8019dec <ip_reass_dequeue_datagram+0x4c>)
 8019dba:	6013      	str	r3, [r2, #0]
 8019dbc:	e00d      	b.n	8019dda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d106      	bne.n	8019dd2 <ip_reass_dequeue_datagram+0x32>
 8019dc4:	4b0a      	ldr	r3, [pc, #40]	; (8019df0 <ip_reass_dequeue_datagram+0x50>)
 8019dc6:	f240 1245 	movw	r2, #325	; 0x145
 8019dca:	490a      	ldr	r1, [pc, #40]	; (8019df4 <ip_reass_dequeue_datagram+0x54>)
 8019dcc:	480a      	ldr	r0, [pc, #40]	; (8019df8 <ip_reass_dequeue_datagram+0x58>)
 8019dce:	f001 fd61 	bl	801b894 <iprintf>
    prev->next = ipr->next;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681a      	ldr	r2, [r3, #0]
 8019dd6:	683b      	ldr	r3, [r7, #0]
 8019dd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019dda:	6879      	ldr	r1, [r7, #4]
 8019ddc:	2004      	movs	r0, #4
 8019dde:	f7f7 fd5f 	bl	80118a0 <memp_free>
}
 8019de2:	bf00      	nop
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	2000876c 	.word	0x2000876c
 8019df0:	0801ee80 	.word	0x0801ee80
 8019df4:	0801ef48 	.word	0x0801ef48
 8019df8:	0801eec8 	.word	0x0801eec8

08019dfc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b08c      	sub	sp, #48	; 0x30
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	60f8      	str	r0, [r7, #12]
 8019e04:	60b9      	str	r1, [r7, #8]
 8019e06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019e08:	2300      	movs	r3, #0
 8019e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019e10:	68bb      	ldr	r3, [r7, #8]
 8019e12:	685b      	ldr	r3, [r3, #4]
 8019e14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019e16:	69fb      	ldr	r3, [r7, #28]
 8019e18:	885b      	ldrh	r3, [r3, #2]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7f7 f858 	bl	8010ed2 <lwip_htons>
 8019e22:	4603      	mov	r3, r0
 8019e24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019e26:	69fb      	ldr	r3, [r7, #28]
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	f003 030f 	and.w	r3, r3, #15
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	009b      	lsls	r3, r3, #2
 8019e32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019e34:	7e7b      	ldrb	r3, [r7, #25]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	8b7a      	ldrh	r2, [r7, #26]
 8019e3a:	429a      	cmp	r2, r3
 8019e3c:	d202      	bcs.n	8019e44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e42:	e135      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019e44:	7e7b      	ldrb	r3, [r7, #25]
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	8b7a      	ldrh	r2, [r7, #26]
 8019e4a:	1ad3      	subs	r3, r2, r3
 8019e4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019e4e:	69fb      	ldr	r3, [r7, #28]
 8019e50:	88db      	ldrh	r3, [r3, #6]
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7f7 f83c 	bl	8010ed2 <lwip_htons>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	00db      	lsls	r3, r3, #3
 8019e64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	685b      	ldr	r3, [r3, #4]
 8019e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e6e:	2200      	movs	r2, #0
 8019e70:	701a      	strb	r2, [r3, #0]
 8019e72:	2200      	movs	r2, #0
 8019e74:	705a      	strb	r2, [r3, #1]
 8019e76:	2200      	movs	r2, #0
 8019e78:	709a      	strb	r2, [r3, #2]
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e80:	8afa      	ldrh	r2, [r7, #22]
 8019e82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019e84:	8afa      	ldrh	r2, [r7, #22]
 8019e86:	8b7b      	ldrh	r3, [r7, #26]
 8019e88:	4413      	add	r3, r2
 8019e8a:	b29a      	uxth	r2, r3
 8019e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e92:	88db      	ldrh	r3, [r3, #6]
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	8afa      	ldrh	r2, [r7, #22]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d902      	bls.n	8019ea2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea0:	e106      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ea8:	e068      	b.n	8019f7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb2:	889b      	ldrh	r3, [r3, #4]
 8019eb4:	b29a      	uxth	r2, r3
 8019eb6:	693b      	ldr	r3, [r7, #16]
 8019eb8:	889b      	ldrh	r3, [r3, #4]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	d235      	bcs.n	8019f2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ec4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d020      	beq.n	8019f0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ece:	889b      	ldrh	r3, [r3, #4]
 8019ed0:	b29a      	uxth	r2, r3
 8019ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed4:	88db      	ldrh	r3, [r3, #6]
 8019ed6:	b29b      	uxth	r3, r3
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d307      	bcc.n	8019eec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ede:	88db      	ldrh	r3, [r3, #6]
 8019ee0:	b29a      	uxth	r2, r3
 8019ee2:	693b      	ldr	r3, [r7, #16]
 8019ee4:	889b      	ldrh	r3, [r3, #4]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d902      	bls.n	8019ef2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019eec:	f04f 33ff 	mov.w	r3, #4294967295
 8019ef0:	e0de      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef4:	68ba      	ldr	r2, [r7, #8]
 8019ef6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efa:	88db      	ldrh	r3, [r3, #6]
 8019efc:	b29a      	uxth	r2, r3
 8019efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f00:	889b      	ldrh	r3, [r3, #4]
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d03d      	beq.n	8019f84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019f08:	2300      	movs	r3, #0
 8019f0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019f0c:	e03a      	b.n	8019f84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f10:	88db      	ldrh	r3, [r3, #6]
 8019f12:	b29a      	uxth	r2, r3
 8019f14:	693b      	ldr	r3, [r7, #16]
 8019f16:	889b      	ldrh	r3, [r3, #4]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d902      	bls.n	8019f24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f22:	e0c5      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	68ba      	ldr	r2, [r7, #8]
 8019f28:	605a      	str	r2, [r3, #4]
      break;
 8019f2a:	e02b      	b.n	8019f84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2e:	889b      	ldrh	r3, [r3, #4]
 8019f30:	b29a      	uxth	r2, r3
 8019f32:	693b      	ldr	r3, [r7, #16]
 8019f34:	889b      	ldrh	r3, [r3, #4]
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d102      	bne.n	8019f42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f40:	e0b6      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f44:	889b      	ldrh	r3, [r3, #4]
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	88db      	ldrh	r3, [r3, #6]
 8019f4c:	b29b      	uxth	r3, r3
 8019f4e:	429a      	cmp	r2, r3
 8019f50:	d202      	bcs.n	8019f58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019f52:	f04f 33ff 	mov.w	r3, #4294967295
 8019f56:	e0ab      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d009      	beq.n	8019f72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f60:	88db      	ldrh	r3, [r3, #6]
 8019f62:	b29a      	uxth	r2, r3
 8019f64:	693b      	ldr	r3, [r7, #16]
 8019f66:	889b      	ldrh	r3, [r3, #4]
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d001      	beq.n	8019f72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019f6e:	2300      	movs	r3, #0
 8019f70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019f72:	693b      	ldr	r3, [r7, #16]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d193      	bne.n	8019eaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019f82:	e000      	b.n	8019f86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019f84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d12d      	bne.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d01c      	beq.n	8019fcc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f94:	88db      	ldrh	r3, [r3, #6]
 8019f96:	b29a      	uxth	r2, r3
 8019f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9a:	889b      	ldrh	r3, [r3, #4]
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d906      	bls.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019fa2:	4b45      	ldr	r3, [pc, #276]	; (801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fa4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019fa8:	4944      	ldr	r1, [pc, #272]	; (801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019faa:	4845      	ldr	r0, [pc, #276]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fac:	f001 fc72 	bl	801b894 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb2:	68ba      	ldr	r2, [r7, #8]
 8019fb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb8:	88db      	ldrh	r3, [r3, #6]
 8019fba:	b29a      	uxth	r2, r3
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	889b      	ldrh	r3, [r3, #4]
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d010      	beq.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	623b      	str	r3, [r7, #32]
 8019fca:	e00d      	b.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d006      	beq.n	8019fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019fd4:	4b38      	ldr	r3, [pc, #224]	; (801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fd6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019fda:	493a      	ldr	r1, [pc, #232]	; (801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019fdc:	4838      	ldr	r0, [pc, #224]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fde:	f001 fc59 	bl	801b894 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	68ba      	ldr	r2, [r7, #8]
 8019fe6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d105      	bne.n	8019ffa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	7f9b      	ldrb	r3, [r3, #30]
 8019ff2:	f003 0301 	and.w	r3, r3, #1
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d059      	beq.n	801a0ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019ffa:	6a3b      	ldr	r3, [r7, #32]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d04f      	beq.n	801a0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	685b      	ldr	r3, [r3, #4]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d006      	beq.n	801a016 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	685b      	ldr	r3, [r3, #4]
 801a00c:	685b      	ldr	r3, [r3, #4]
 801a00e:	889b      	ldrh	r3, [r3, #4]
 801a010:	b29b      	uxth	r3, r3
 801a012:	2b00      	cmp	r3, #0
 801a014:	d002      	beq.n	801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a016:	2300      	movs	r3, #0
 801a018:	623b      	str	r3, [r7, #32]
 801a01a:	e041      	b.n	801a0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a026:	e012      	b.n	801a04e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02a:	685b      	ldr	r3, [r3, #4]
 801a02c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a030:	88db      	ldrh	r3, [r3, #6]
 801a032:	b29a      	uxth	r2, r3
 801a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a036:	889b      	ldrh	r3, [r3, #4]
 801a038:	b29b      	uxth	r3, r3
 801a03a:	429a      	cmp	r2, r3
 801a03c:	d002      	beq.n	801a044 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a03e:	2300      	movs	r3, #0
 801a040:	623b      	str	r3, [r7, #32]
            break;
 801a042:	e007      	b.n	801a054 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a046:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1e9      	bne.n	801a028 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a054:	6a3b      	ldr	r3, [r7, #32]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d022      	beq.n	801a0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	685b      	ldr	r3, [r3, #4]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d106      	bne.n	801a070 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a062:	4b15      	ldr	r3, [pc, #84]	; (801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a064:	f240 12df 	movw	r2, #479	; 0x1df
 801a068:	4917      	ldr	r1, [pc, #92]	; (801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a06a:	4815      	ldr	r0, [pc, #84]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a06c:	f001 fc12 	bl	801b894 <iprintf>
          LWIP_ASSERT("sanity check",
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a078:	429a      	cmp	r2, r3
 801a07a:	d106      	bne.n	801a08a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a07c:	4b0e      	ldr	r3, [pc, #56]	; (801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a07e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a082:	4911      	ldr	r1, [pc, #68]	; (801a0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a084:	480e      	ldr	r0, [pc, #56]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a086:	f001 fc05 	bl	801b894 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d006      	beq.n	801a0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a092:	4b09      	ldr	r3, [pc, #36]	; (801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a094:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a098:	490c      	ldr	r1, [pc, #48]	; (801a0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a09a:	4809      	ldr	r0, [pc, #36]	; (801a0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a09c:	f001 fbfa 	bl	801b894 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a0a0:	6a3b      	ldr	r3, [r7, #32]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	bf14      	ite	ne
 801a0a6:	2301      	movne	r3, #1
 801a0a8:	2300      	moveq	r3, #0
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	e000      	b.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a0ae:	2300      	movs	r3, #0
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3730      	adds	r7, #48	; 0x30
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	0801ee80 	.word	0x0801ee80
 801a0bc:	0801ef64 	.word	0x0801ef64
 801a0c0:	0801eec8 	.word	0x0801eec8
 801a0c4:	0801ef84 	.word	0x0801ef84
 801a0c8:	0801efbc 	.word	0x0801efbc
 801a0cc:	0801efcc 	.word	0x0801efcc

0801a0d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b08e      	sub	sp, #56	; 0x38
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	685b      	ldr	r3, [r3, #4]
 801a0dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	f003 030f 	and.w	r3, r3, #15
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	009b      	lsls	r3, r3, #2
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	2b14      	cmp	r3, #20
 801a0ee:	f040 8171 	bne.w	801a3d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f4:	88db      	ldrh	r3, [r3, #6]
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f6 feea 	bl	8010ed2 <lwip_htons>
 801a0fe:	4603      	mov	r3, r0
 801a100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a104:	b29b      	uxth	r3, r3
 801a106:	00db      	lsls	r3, r3, #3
 801a108:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a10c:	885b      	ldrh	r3, [r3, #2]
 801a10e:	b29b      	uxth	r3, r3
 801a110:	4618      	mov	r0, r3
 801a112:	f7f6 fede 	bl	8010ed2 <lwip_htons>
 801a116:	4603      	mov	r3, r0
 801a118:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a11c:	781b      	ldrb	r3, [r3, #0]
 801a11e:	f003 030f 	and.w	r3, r3, #15
 801a122:	b2db      	uxtb	r3, r3
 801a124:	009b      	lsls	r3, r3, #2
 801a126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a12a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a12e:	b29b      	uxth	r3, r3
 801a130:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a132:	429a      	cmp	r2, r3
 801a134:	f0c0 8150 	bcc.w	801a3d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a13c:	b29b      	uxth	r3, r3
 801a13e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a140:	1ad3      	subs	r3, r2, r3
 801a142:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	f7f8 faa9 	bl	801269c <pbuf_clen>
 801a14a:	4603      	mov	r3, r0
 801a14c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a14e:	4b8c      	ldr	r3, [pc, #560]	; (801a380 <ip4_reass+0x2b0>)
 801a150:	881b      	ldrh	r3, [r3, #0]
 801a152:	461a      	mov	r2, r3
 801a154:	8c3b      	ldrh	r3, [r7, #32]
 801a156:	4413      	add	r3, r2
 801a158:	2b0a      	cmp	r3, #10
 801a15a:	dd10      	ble.n	801a17e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a15c:	8c3b      	ldrh	r3, [r7, #32]
 801a15e:	4619      	mov	r1, r3
 801a160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a162:	f7ff fd81 	bl	8019c68 <ip_reass_remove_oldest_datagram>
 801a166:	4603      	mov	r3, r0
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f000 8137 	beq.w	801a3dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a16e:	4b84      	ldr	r3, [pc, #528]	; (801a380 <ip4_reass+0x2b0>)
 801a170:	881b      	ldrh	r3, [r3, #0]
 801a172:	461a      	mov	r2, r3
 801a174:	8c3b      	ldrh	r3, [r7, #32]
 801a176:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a178:	2b0a      	cmp	r3, #10
 801a17a:	f300 812f 	bgt.w	801a3dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a17e:	4b81      	ldr	r3, [pc, #516]	; (801a384 <ip4_reass+0x2b4>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	633b      	str	r3, [r7, #48]	; 0x30
 801a184:	e015      	b.n	801a1b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a188:	695a      	ldr	r2, [r3, #20]
 801a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a18c:	68db      	ldr	r3, [r3, #12]
 801a18e:	429a      	cmp	r2, r3
 801a190:	d10c      	bne.n	801a1ac <ip4_reass+0xdc>
 801a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a194:	699a      	ldr	r2, [r3, #24]
 801a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a198:	691b      	ldr	r3, [r3, #16]
 801a19a:	429a      	cmp	r2, r3
 801a19c:	d106      	bne.n	801a1ac <ip4_reass+0xdc>
 801a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1a0:	899a      	ldrh	r2, [r3, #12]
 801a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a4:	889b      	ldrh	r3, [r3, #4]
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d006      	beq.n	801a1ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	633b      	str	r3, [r7, #48]	; 0x30
 801a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d1e6      	bne.n	801a186 <ip4_reass+0xb6>
 801a1b8:	e000      	b.n	801a1bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a1ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d109      	bne.n	801a1d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a1c2:	8c3b      	ldrh	r3, [r7, #32]
 801a1c4:	4619      	mov	r1, r3
 801a1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1c8:	f7ff fdb0 	bl	8019d2c <ip_reass_enqueue_new_datagram>
 801a1cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d11c      	bne.n	801a20e <ip4_reass+0x13e>
      goto nullreturn;
 801a1d4:	e105      	b.n	801a3e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d8:	88db      	ldrh	r3, [r3, #6]
 801a1da:	b29b      	uxth	r3, r3
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f7f6 fe78 	bl	8010ed2 <lwip_htons>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d110      	bne.n	801a20e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ee:	89db      	ldrh	r3, [r3, #14]
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7f6 fe6e 	bl	8010ed2 <lwip_htons>
 801a1f6:	4603      	mov	r3, r0
 801a1f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d006      	beq.n	801a20e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a202:	3308      	adds	r3, #8
 801a204:	2214      	movs	r2, #20
 801a206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a208:	4618      	mov	r0, r3
 801a20a:	f001 fc1e 	bl	801ba4a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a210:	88db      	ldrh	r3, [r3, #6]
 801a212:	b29b      	uxth	r3, r3
 801a214:	f003 0320 	and.w	r3, r3, #32
 801a218:	2b00      	cmp	r3, #0
 801a21a:	bf0c      	ite	eq
 801a21c:	2301      	moveq	r3, #1
 801a21e:	2300      	movne	r3, #0
 801a220:	b2db      	uxtb	r3, r3
 801a222:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a224:	69fb      	ldr	r3, [r7, #28]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d00e      	beq.n	801a248 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a22a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a22c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a22e:	4413      	add	r3, r2
 801a230:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a232:	8b7a      	ldrh	r2, [r7, #26]
 801a234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a236:	429a      	cmp	r2, r3
 801a238:	f0c0 80a0 	bcc.w	801a37c <ip4_reass+0x2ac>
 801a23c:	8b7b      	ldrh	r3, [r7, #26]
 801a23e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a242:	4293      	cmp	r3, r2
 801a244:	f200 809a 	bhi.w	801a37c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a248:	69fa      	ldr	r2, [r7, #28]
 801a24a:	6879      	ldr	r1, [r7, #4]
 801a24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a24e:	f7ff fdd5 	bl	8019dfc <ip_reass_chain_frag_into_datagram_and_validate>
 801a252:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a25a:	f000 809b 	beq.w	801a394 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a25e:	4b48      	ldr	r3, [pc, #288]	; (801a380 <ip4_reass+0x2b0>)
 801a260:	881a      	ldrh	r2, [r3, #0]
 801a262:	8c3b      	ldrh	r3, [r7, #32]
 801a264:	4413      	add	r3, r2
 801a266:	b29a      	uxth	r2, r3
 801a268:	4b45      	ldr	r3, [pc, #276]	; (801a380 <ip4_reass+0x2b0>)
 801a26a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a26c:	69fb      	ldr	r3, [r7, #28]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d00d      	beq.n	801a28e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a272:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a276:	4413      	add	r3, r2
 801a278:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a27c:	8a7a      	ldrh	r2, [r7, #18]
 801a27e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a282:	7f9b      	ldrb	r3, [r3, #30]
 801a284:	f043 0301 	orr.w	r3, r3, #1
 801a288:	b2da      	uxtb	r2, r3
 801a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a28c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	2b01      	cmp	r3, #1
 801a292:	d171      	bne.n	801a378 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a296:	8b9b      	ldrh	r3, [r3, #28]
 801a298:	3314      	adds	r3, #20
 801a29a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29e:	685b      	ldr	r3, [r3, #4]
 801a2a0:	685b      	ldr	r3, [r3, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2a8:	685b      	ldr	r3, [r3, #4]
 801a2aa:	685b      	ldr	r3, [r3, #4]
 801a2ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b0:	3308      	adds	r3, #8
 801a2b2:	2214      	movs	r2, #20
 801a2b4:	4619      	mov	r1, r3
 801a2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a2b8:	f001 fbc7 	bl	801ba4a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a2bc:	8a3b      	ldrh	r3, [r7, #16]
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7f6 fe07 	bl	8010ed2 <lwip_htons>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	719a      	strb	r2, [r3, #6]
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d8:	2200      	movs	r2, #0
 801a2da:	729a      	strb	r2, [r3, #10]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a2e6:	e00d      	b.n	801a304 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2ea:	685b      	ldr	r3, [r3, #4]
 801a2ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a2ee:	2114      	movs	r1, #20
 801a2f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a2f2:	f7f8 f8c5 	bl	8012480 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a2f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f7f8 fa09 	bl	8012710 <pbuf_cat>
      r = iprh->next_pbuf;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a306:	2b00      	cmp	r3, #0
 801a308:	d1ee      	bne.n	801a2e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a30a:	4b1e      	ldr	r3, [pc, #120]	; (801a384 <ip4_reass+0x2b4>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a310:	429a      	cmp	r2, r3
 801a312:	d102      	bne.n	801a31a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a314:	2300      	movs	r3, #0
 801a316:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a318:	e010      	b.n	801a33c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a31a:	4b1a      	ldr	r3, [pc, #104]	; (801a384 <ip4_reass+0x2b4>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a320:	e007      	b.n	801a332 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a328:	429a      	cmp	r2, r3
 801a32a:	d006      	beq.n	801a33a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	2b00      	cmp	r3, #0
 801a336:	d1f4      	bne.n	801a322 <ip4_reass+0x252>
 801a338:	e000      	b.n	801a33c <ip4_reass+0x26c>
          break;
 801a33a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a33c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a33e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a340:	f7ff fd2e 	bl	8019da0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a344:	6878      	ldr	r0, [r7, #4]
 801a346:	f7f8 f9a9 	bl	801269c <pbuf_clen>
 801a34a:	4603      	mov	r3, r0
 801a34c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a34e:	4b0c      	ldr	r3, [pc, #48]	; (801a380 <ip4_reass+0x2b0>)
 801a350:	881b      	ldrh	r3, [r3, #0]
 801a352:	8c3a      	ldrh	r2, [r7, #32]
 801a354:	429a      	cmp	r2, r3
 801a356:	d906      	bls.n	801a366 <ip4_reass+0x296>
 801a358:	4b0b      	ldr	r3, [pc, #44]	; (801a388 <ip4_reass+0x2b8>)
 801a35a:	f240 229b 	movw	r2, #667	; 0x29b
 801a35e:	490b      	ldr	r1, [pc, #44]	; (801a38c <ip4_reass+0x2bc>)
 801a360:	480b      	ldr	r0, [pc, #44]	; (801a390 <ip4_reass+0x2c0>)
 801a362:	f001 fa97 	bl	801b894 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a366:	4b06      	ldr	r3, [pc, #24]	; (801a380 <ip4_reass+0x2b0>)
 801a368:	881a      	ldrh	r2, [r3, #0]
 801a36a:	8c3b      	ldrh	r3, [r7, #32]
 801a36c:	1ad3      	subs	r3, r2, r3
 801a36e:	b29a      	uxth	r2, r3
 801a370:	4b03      	ldr	r3, [pc, #12]	; (801a380 <ip4_reass+0x2b0>)
 801a372:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	e038      	b.n	801a3ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a378:	2300      	movs	r3, #0
 801a37a:	e036      	b.n	801a3ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a37c:	bf00      	nop
 801a37e:	e00a      	b.n	801a396 <ip4_reass+0x2c6>
 801a380:	20008770 	.word	0x20008770
 801a384:	2000876c 	.word	0x2000876c
 801a388:	0801ee80 	.word	0x0801ee80
 801a38c:	0801eff0 	.word	0x0801eff0
 801a390:	0801eec8 	.word	0x0801eec8
    goto nullreturn_ipr;
 801a394:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d106      	bne.n	801a3aa <ip4_reass+0x2da>
 801a39c:	4b15      	ldr	r3, [pc, #84]	; (801a3f4 <ip4_reass+0x324>)
 801a39e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a3a2:	4915      	ldr	r1, [pc, #84]	; (801a3f8 <ip4_reass+0x328>)
 801a3a4:	4815      	ldr	r0, [pc, #84]	; (801a3fc <ip4_reass+0x32c>)
 801a3a6:	f001 fa75 	bl	801b894 <iprintf>
  if (ipr->p == NULL) {
 801a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3ac:	685b      	ldr	r3, [r3, #4]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d116      	bne.n	801a3e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a3b2:	4b13      	ldr	r3, [pc, #76]	; (801a400 <ip4_reass+0x330>)
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a3b8:	429a      	cmp	r2, r3
 801a3ba:	d006      	beq.n	801a3ca <ip4_reass+0x2fa>
 801a3bc:	4b0d      	ldr	r3, [pc, #52]	; (801a3f4 <ip4_reass+0x324>)
 801a3be:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a3c2:	4910      	ldr	r1, [pc, #64]	; (801a404 <ip4_reass+0x334>)
 801a3c4:	480d      	ldr	r0, [pc, #52]	; (801a3fc <ip4_reass+0x32c>)
 801a3c6:	f001 fa65 	bl	801b894 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a3ca:	2100      	movs	r1, #0
 801a3cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a3ce:	f7ff fce7 	bl	8019da0 <ip_reass_dequeue_datagram>
 801a3d2:	e006      	b.n	801a3e2 <ip4_reass+0x312>
    goto nullreturn;
 801a3d4:	bf00      	nop
 801a3d6:	e004      	b.n	801a3e2 <ip4_reass+0x312>
    goto nullreturn;
 801a3d8:	bf00      	nop
 801a3da:	e002      	b.n	801a3e2 <ip4_reass+0x312>
      goto nullreturn;
 801a3dc:	bf00      	nop
 801a3de:	e000      	b.n	801a3e2 <ip4_reass+0x312>
  }

nullreturn:
 801a3e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f7f8 f8d2 	bl	801258c <pbuf_free>
  return NULL;
 801a3e8:	2300      	movs	r3, #0
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3738      	adds	r7, #56	; 0x38
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}
 801a3f2:	bf00      	nop
 801a3f4:	0801ee80 	.word	0x0801ee80
 801a3f8:	0801f00c 	.word	0x0801f00c
 801a3fc:	0801eec8 	.word	0x0801eec8
 801a400:	2000876c 	.word	0x2000876c
 801a404:	0801f018 	.word	0x0801f018

0801a408 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a40c:	2005      	movs	r0, #5
 801a40e:	f7f7 f9d7 	bl	80117c0 <memp_malloc>
 801a412:	4603      	mov	r3, r0
}
 801a414:	4618      	mov	r0, r3
 801a416:	bd80      	pop	{r7, pc}

0801a418 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b082      	sub	sp, #8
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d106      	bne.n	801a434 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a426:	4b07      	ldr	r3, [pc, #28]	; (801a444 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a428:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a42c:	4906      	ldr	r1, [pc, #24]	; (801a448 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a42e:	4807      	ldr	r0, [pc, #28]	; (801a44c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a430:	f001 fa30 	bl	801b894 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a434:	6879      	ldr	r1, [r7, #4]
 801a436:	2005      	movs	r0, #5
 801a438:	f7f7 fa32 	bl	80118a0 <memp_free>
}
 801a43c:	bf00      	nop
 801a43e:	3708      	adds	r7, #8
 801a440:	46bd      	mov	sp, r7
 801a442:	bd80      	pop	{r7, pc}
 801a444:	0801ee80 	.word	0x0801ee80
 801a448:	0801f038 	.word	0x0801f038
 801a44c:	0801eec8 	.word	0x0801eec8

0801a450 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d106      	bne.n	801a470 <ipfrag_free_pbuf_custom+0x20>
 801a462:	4b11      	ldr	r3, [pc, #68]	; (801a4a8 <ipfrag_free_pbuf_custom+0x58>)
 801a464:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a468:	4910      	ldr	r1, [pc, #64]	; (801a4ac <ipfrag_free_pbuf_custom+0x5c>)
 801a46a:	4811      	ldr	r0, [pc, #68]	; (801a4b0 <ipfrag_free_pbuf_custom+0x60>)
 801a46c:	f001 fa12 	bl	801b894 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a470:	68fa      	ldr	r2, [r7, #12]
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	429a      	cmp	r2, r3
 801a476:	d006      	beq.n	801a486 <ipfrag_free_pbuf_custom+0x36>
 801a478:	4b0b      	ldr	r3, [pc, #44]	; (801a4a8 <ipfrag_free_pbuf_custom+0x58>)
 801a47a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a47e:	490d      	ldr	r1, [pc, #52]	; (801a4b4 <ipfrag_free_pbuf_custom+0x64>)
 801a480:	480b      	ldr	r0, [pc, #44]	; (801a4b0 <ipfrag_free_pbuf_custom+0x60>)
 801a482:	f001 fa07 	bl	801b894 <iprintf>
  if (pcr->original != NULL) {
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	695b      	ldr	r3, [r3, #20]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d004      	beq.n	801a498 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	695b      	ldr	r3, [r3, #20]
 801a492:	4618      	mov	r0, r3
 801a494:	f7f8 f87a 	bl	801258c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a498:	68f8      	ldr	r0, [r7, #12]
 801a49a:	f7ff ffbd 	bl	801a418 <ip_frag_free_pbuf_custom_ref>
}
 801a49e:	bf00      	nop
 801a4a0:	3710      	adds	r7, #16
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd80      	pop	{r7, pc}
 801a4a6:	bf00      	nop
 801a4a8:	0801ee80 	.word	0x0801ee80
 801a4ac:	0801f044 	.word	0x0801f044
 801a4b0:	0801eec8 	.word	0x0801eec8
 801a4b4:	0801f050 	.word	0x0801f050

0801a4b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b094      	sub	sp, #80	; 0x50
 801a4bc:	af02      	add	r7, sp, #8
 801a4be:	60f8      	str	r0, [r7, #12]
 801a4c0:	60b9      	str	r1, [r7, #8]
 801a4c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a4ce:	3b14      	subs	r3, #20
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	da00      	bge.n	801a4d6 <ip4_frag+0x1e>
 801a4d4:	3307      	adds	r3, #7
 801a4d6:	10db      	asrs	r3, r3, #3
 801a4d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a4da:	2314      	movs	r3, #20
 801a4dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	685b      	ldr	r3, [r3, #4]
 801a4e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	f003 030f 	and.w	r3, r3, #15
 801a4f0:	b2db      	uxtb	r3, r3
 801a4f2:	009b      	lsls	r3, r3, #2
 801a4f4:	b2db      	uxtb	r3, r3
 801a4f6:	2b14      	cmp	r3, #20
 801a4f8:	d002      	beq.n	801a500 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a4fa:	f06f 0305 	mvn.w	r3, #5
 801a4fe:	e110      	b.n	801a722 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	895b      	ldrh	r3, [r3, #10]
 801a504:	2b13      	cmp	r3, #19
 801a506:	d809      	bhi.n	801a51c <ip4_frag+0x64>
 801a508:	4b88      	ldr	r3, [pc, #544]	; (801a72c <ip4_frag+0x274>)
 801a50a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a50e:	4988      	ldr	r1, [pc, #544]	; (801a730 <ip4_frag+0x278>)
 801a510:	4888      	ldr	r0, [pc, #544]	; (801a734 <ip4_frag+0x27c>)
 801a512:	f001 f9bf 	bl	801b894 <iprintf>
 801a516:	f06f 0305 	mvn.w	r3, #5
 801a51a:	e102      	b.n	801a722 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51e:	88db      	ldrh	r3, [r3, #6]
 801a520:	b29b      	uxth	r3, r3
 801a522:	4618      	mov	r0, r3
 801a524:	f7f6 fcd5 	bl	8010ed2 <lwip_htons>
 801a528:	4603      	mov	r3, r0
 801a52a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a52c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a52e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a532:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a536:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a53c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	891b      	ldrh	r3, [r3, #8]
 801a542:	3b14      	subs	r3, #20
 801a544:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a548:	e0e1      	b.n	801a70e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a54a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a54c:	00db      	lsls	r3, r3, #3
 801a54e:	b29b      	uxth	r3, r3
 801a550:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a554:	4293      	cmp	r3, r2
 801a556:	bf28      	it	cs
 801a558:	4613      	movcs	r3, r2
 801a55a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a55c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a560:	2114      	movs	r1, #20
 801a562:	200e      	movs	r0, #14
 801a564:	f7f7 fd2e 	bl	8011fc4 <pbuf_alloc>
 801a568:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	f000 80d5 	beq.w	801a71c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a574:	895b      	ldrh	r3, [r3, #10]
 801a576:	2b13      	cmp	r3, #19
 801a578:	d806      	bhi.n	801a588 <ip4_frag+0xd0>
 801a57a:	4b6c      	ldr	r3, [pc, #432]	; (801a72c <ip4_frag+0x274>)
 801a57c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a580:	496d      	ldr	r1, [pc, #436]	; (801a738 <ip4_frag+0x280>)
 801a582:	486c      	ldr	r0, [pc, #432]	; (801a734 <ip4_frag+0x27c>)
 801a584:	f001 f986 	bl	801b894 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a58a:	685b      	ldr	r3, [r3, #4]
 801a58c:	2214      	movs	r2, #20
 801a58e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a590:	4618      	mov	r0, r3
 801a592:	f001 fa5a 	bl	801ba4a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a598:	685b      	ldr	r3, [r3, #4]
 801a59a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a59c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a59e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a5a2:	e064      	b.n	801a66e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	895a      	ldrh	r2, [r3, #10]
 801a5a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a5aa:	1ad3      	subs	r3, r2, r3
 801a5ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	895b      	ldrh	r3, [r3, #10]
 801a5b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d906      	bls.n	801a5c6 <ip4_frag+0x10e>
 801a5b8:	4b5c      	ldr	r3, [pc, #368]	; (801a72c <ip4_frag+0x274>)
 801a5ba:	f240 322d 	movw	r2, #813	; 0x32d
 801a5be:	495f      	ldr	r1, [pc, #380]	; (801a73c <ip4_frag+0x284>)
 801a5c0:	485c      	ldr	r0, [pc, #368]	; (801a734 <ip4_frag+0x27c>)
 801a5c2:	f001 f967 	bl	801b894 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a5c6:	8bfa      	ldrh	r2, [r7, #30]
 801a5c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	bf28      	it	cs
 801a5d0:	4613      	movcs	r3, r2
 801a5d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a5d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d105      	bne.n	801a5ea <ip4_frag+0x132>
        poff = 0;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	60fb      	str	r3, [r7, #12]
        continue;
 801a5e8:	e041      	b.n	801a66e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a5ea:	f7ff ff0d 	bl	801a408 <ip_frag_alloc_pbuf_custom_ref>
 801a5ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a5f0:	69bb      	ldr	r3, [r7, #24]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d103      	bne.n	801a5fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5f8:	f7f7 ffc8 	bl	801258c <pbuf_free>
        goto memerr;
 801a5fc:	e08f      	b.n	801a71e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a5fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a604:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a606:	4413      	add	r3, r2
 801a608:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a60c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a610:	9201      	str	r2, [sp, #4]
 801a612:	9300      	str	r3, [sp, #0]
 801a614:	4603      	mov	r3, r0
 801a616:	2241      	movs	r2, #65	; 0x41
 801a618:	2000      	movs	r0, #0
 801a61a:	f7f7 fdfd 	bl	8012218 <pbuf_alloced_custom>
 801a61e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d106      	bne.n	801a634 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a626:	69b8      	ldr	r0, [r7, #24]
 801a628:	f7ff fef6 	bl	801a418 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a62e:	f7f7 ffad 	bl	801258c <pbuf_free>
        goto memerr;
 801a632:	e074      	b.n	801a71e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a634:	68f8      	ldr	r0, [r7, #12]
 801a636:	f7f8 f849 	bl	80126cc <pbuf_ref>
      pcr->original = p;
 801a63a:	69bb      	ldr	r3, [r7, #24]
 801a63c:	68fa      	ldr	r2, [r7, #12]
 801a63e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a640:	69bb      	ldr	r3, [r7, #24]
 801a642:	4a3f      	ldr	r2, [pc, #252]	; (801a740 <ip4_frag+0x288>)
 801a644:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a646:	6979      	ldr	r1, [r7, #20]
 801a648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a64a:	f7f8 f861 	bl	8012710 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a64e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a652:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a656:	1ad3      	subs	r3, r2, r3
 801a658:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a65c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a660:	2b00      	cmp	r3, #0
 801a662:	d004      	beq.n	801a66e <ip4_frag+0x1b6>
        poff = 0;
 801a664:	2300      	movs	r3, #0
 801a666:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a66e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a672:	2b00      	cmp	r3, #0
 801a674:	d196      	bne.n	801a5a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a676:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a678:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a67c:	4413      	add	r3, r2
 801a67e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a684:	f1a3 0213 	sub.w	r2, r3, #19
 801a688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a68c:	429a      	cmp	r2, r3
 801a68e:	bfcc      	ite	gt
 801a690:	2301      	movgt	r3, #1
 801a692:	2300      	movle	r3, #0
 801a694:	b2db      	uxtb	r3, r3
 801a696:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a698:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a6a2:	6a3b      	ldr	r3, [r7, #32]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d002      	beq.n	801a6ae <ip4_frag+0x1f6>
 801a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d003      	beq.n	801a6b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a6ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a6b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a6b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7f6 fc0a 	bl	8010ed2 <lwip_htons>
 801a6be:	4603      	mov	r3, r0
 801a6c0:	461a      	mov	r2, r3
 801a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a6c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a6c8:	3314      	adds	r3, #20
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f7f6 fc00 	bl	8010ed2 <lwip_htons>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	461a      	mov	r2, r3
 801a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6dc:	2200      	movs	r2, #0
 801a6de:	729a      	strb	r2, [r3, #10]
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	695b      	ldr	r3, [r3, #20]
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a6ec:	68b8      	ldr	r0, [r7, #8]
 801a6ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a6f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a6f2:	f7f7 ff4b 	bl	801258c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a6f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a6fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a6fc:	1ad3      	subs	r3, r2, r3
 801a6fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a702:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a706:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a708:	4413      	add	r3, r2
 801a70a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a70e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a712:	2b00      	cmp	r3, #0
 801a714:	f47f af19 	bne.w	801a54a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a718:	2300      	movs	r3, #0
 801a71a:	e002      	b.n	801a722 <ip4_frag+0x26a>
      goto memerr;
 801a71c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a71e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a722:	4618      	mov	r0, r3
 801a724:	3748      	adds	r7, #72	; 0x48
 801a726:	46bd      	mov	sp, r7
 801a728:	bd80      	pop	{r7, pc}
 801a72a:	bf00      	nop
 801a72c:	0801ee80 	.word	0x0801ee80
 801a730:	0801f05c 	.word	0x0801f05c
 801a734:	0801eec8 	.word	0x0801eec8
 801a738:	0801f078 	.word	0x0801f078
 801a73c:	0801f098 	.word	0x0801f098
 801a740:	0801a451 	.word	0x0801a451

0801a744 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b086      	sub	sp, #24
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
 801a74c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a74e:	230e      	movs	r3, #14
 801a750:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	895b      	ldrh	r3, [r3, #10]
 801a756:	2b0e      	cmp	r3, #14
 801a758:	d96e      	bls.n	801a838 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	7bdb      	ldrb	r3, [r3, #15]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d106      	bne.n	801a770 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a768:	3301      	adds	r3, #1
 801a76a:	b2da      	uxtb	r2, r3
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	685b      	ldr	r3, [r3, #4]
 801a774:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a776:	693b      	ldr	r3, [r7, #16]
 801a778:	7b1a      	ldrb	r2, [r3, #12]
 801a77a:	7b5b      	ldrb	r3, [r3, #13]
 801a77c:	021b      	lsls	r3, r3, #8
 801a77e:	4313      	orrs	r3, r2
 801a780:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a782:	693b      	ldr	r3, [r7, #16]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	f003 0301 	and.w	r3, r3, #1
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d023      	beq.n	801a7d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a78e:	693b      	ldr	r3, [r7, #16]
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	2b01      	cmp	r3, #1
 801a794:	d10f      	bne.n	801a7b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	785b      	ldrb	r3, [r3, #1]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d11b      	bne.n	801a7d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a79e:	693b      	ldr	r3, [r7, #16]
 801a7a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a7a2:	2b5e      	cmp	r3, #94	; 0x5e
 801a7a4:	d117      	bne.n	801a7d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	7b5b      	ldrb	r3, [r3, #13]
 801a7aa:	f043 0310 	orr.w	r3, r3, #16
 801a7ae:	b2da      	uxtb	r2, r3
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	735a      	strb	r2, [r3, #13]
 801a7b4:	e00f      	b.n	801a7d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	2206      	movs	r2, #6
 801a7ba:	4928      	ldr	r1, [pc, #160]	; (801a85c <ethernet_input+0x118>)
 801a7bc:	4618      	mov	r0, r3
 801a7be:	f001 f8be 	bl	801b93e <memcmp>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d106      	bne.n	801a7d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	7b5b      	ldrb	r3, [r3, #13]
 801a7cc:	f043 0308 	orr.w	r3, r3, #8
 801a7d0:	b2da      	uxtb	r2, r3
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a7d6:	89fb      	ldrh	r3, [r7, #14]
 801a7d8:	2b08      	cmp	r3, #8
 801a7da:	d003      	beq.n	801a7e4 <ethernet_input+0xa0>
 801a7dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a7e0:	d014      	beq.n	801a80c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a7e2:	e032      	b.n	801a84a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a7e4:	683b      	ldr	r3, [r7, #0]
 801a7e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a7ea:	f003 0308 	and.w	r3, r3, #8
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d024      	beq.n	801a83c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a7f2:	8afb      	ldrh	r3, [r7, #22]
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	6878      	ldr	r0, [r7, #4]
 801a7f8:	f7f7 fe42 	bl	8012480 <pbuf_remove_header>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d11e      	bne.n	801a840 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a802:	6839      	ldr	r1, [r7, #0]
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f7fe ff21 	bl	801964c <ip4_input>
      break;
 801a80a:	e013      	b.n	801a834 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a80c:	683b      	ldr	r3, [r7, #0]
 801a80e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a812:	f003 0308 	and.w	r3, r3, #8
 801a816:	2b00      	cmp	r3, #0
 801a818:	d014      	beq.n	801a844 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a81a:	8afb      	ldrh	r3, [r7, #22]
 801a81c:	4619      	mov	r1, r3
 801a81e:	6878      	ldr	r0, [r7, #4]
 801a820:	f7f7 fe2e 	bl	8012480 <pbuf_remove_header>
 801a824:	4603      	mov	r3, r0
 801a826:	2b00      	cmp	r3, #0
 801a828:	d10e      	bne.n	801a848 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a82a:	6839      	ldr	r1, [r7, #0]
 801a82c:	6878      	ldr	r0, [r7, #4]
 801a82e:	f7fe f8c1 	bl	80189b4 <etharp_input>
      break;
 801a832:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a834:	2300      	movs	r3, #0
 801a836:	e00c      	b.n	801a852 <ethernet_input+0x10e>
    goto free_and_return;
 801a838:	bf00      	nop
 801a83a:	e006      	b.n	801a84a <ethernet_input+0x106>
        goto free_and_return;
 801a83c:	bf00      	nop
 801a83e:	e004      	b.n	801a84a <ethernet_input+0x106>
        goto free_and_return;
 801a840:	bf00      	nop
 801a842:	e002      	b.n	801a84a <ethernet_input+0x106>
        goto free_and_return;
 801a844:	bf00      	nop
 801a846:	e000      	b.n	801a84a <ethernet_input+0x106>
        goto free_and_return;
 801a848:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a84a:	6878      	ldr	r0, [r7, #4]
 801a84c:	f7f7 fe9e 	bl	801258c <pbuf_free>
  return ERR_OK;
 801a850:	2300      	movs	r3, #0
}
 801a852:	4618      	mov	r0, r3
 801a854:	3718      	adds	r7, #24
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	0801f348 	.word	0x0801f348

0801a860 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a860:	b580      	push	{r7, lr}
 801a862:	b086      	sub	sp, #24
 801a864:	af00      	add	r7, sp, #0
 801a866:	60f8      	str	r0, [r7, #12]
 801a868:	60b9      	str	r1, [r7, #8]
 801a86a:	607a      	str	r2, [r7, #4]
 801a86c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a86e:	8c3b      	ldrh	r3, [r7, #32]
 801a870:	4618      	mov	r0, r3
 801a872:	f7f6 fb2e 	bl	8010ed2 <lwip_htons>
 801a876:	4603      	mov	r3, r0
 801a878:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a87a:	210e      	movs	r1, #14
 801a87c:	68b8      	ldr	r0, [r7, #8]
 801a87e:	f7f7 fdef 	bl	8012460 <pbuf_add_header>
 801a882:	4603      	mov	r3, r0
 801a884:	2b00      	cmp	r3, #0
 801a886:	d125      	bne.n	801a8d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a88e:	693b      	ldr	r3, [r7, #16]
 801a890:	8afa      	ldrh	r2, [r7, #22]
 801a892:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a894:	693b      	ldr	r3, [r7, #16]
 801a896:	2206      	movs	r2, #6
 801a898:	6839      	ldr	r1, [r7, #0]
 801a89a:	4618      	mov	r0, r3
 801a89c:	f001 f8d5 	bl	801ba4a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a8a0:	693b      	ldr	r3, [r7, #16]
 801a8a2:	3306      	adds	r3, #6
 801a8a4:	2206      	movs	r2, #6
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f001 f8ce 	bl	801ba4a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a8b4:	2b06      	cmp	r3, #6
 801a8b6:	d006      	beq.n	801a8c6 <ethernet_output+0x66>
 801a8b8:	4b0a      	ldr	r3, [pc, #40]	; (801a8e4 <ethernet_output+0x84>)
 801a8ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a8be:	490a      	ldr	r1, [pc, #40]	; (801a8e8 <ethernet_output+0x88>)
 801a8c0:	480a      	ldr	r0, [pc, #40]	; (801a8ec <ethernet_output+0x8c>)
 801a8c2:	f000 ffe7 	bl	801b894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	699b      	ldr	r3, [r3, #24]
 801a8ca:	68b9      	ldr	r1, [r7, #8]
 801a8cc:	68f8      	ldr	r0, [r7, #12]
 801a8ce:	4798      	blx	r3
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	e002      	b.n	801a8da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a8d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a8d6:	f06f 0301 	mvn.w	r3, #1
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	3718      	adds	r7, #24
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bd80      	pop	{r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	0801f0a8 	.word	0x0801f0a8
 801a8e8:	0801f0e0 	.word	0x0801f0e0
 801a8ec:	0801f114 	.word	0x0801f114

0801a8f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a8f4:	2201      	movs	r2, #1
 801a8f6:	4924      	ldr	r1, [pc, #144]	; (801a988 <MX_USB_DEVICE_Init+0x98>)
 801a8f8:	4824      	ldr	r0, [pc, #144]	; (801a98c <MX_USB_DEVICE_Init+0x9c>)
 801a8fa:	f7f2 fa84 	bl	800ce06 <USBD_Init>
 801a8fe:	4603      	mov	r3, r0
 801a900:	2b00      	cmp	r3, #0
 801a902:	d001      	beq.n	801a908 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a904:	f7e6 f84c 	bl	80009a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 801a908:	4921      	ldr	r1, [pc, #132]	; (801a990 <MX_USB_DEVICE_Init+0xa0>)
 801a90a:	4820      	ldr	r0, [pc, #128]	; (801a98c <MX_USB_DEVICE_Init+0x9c>)
 801a90c:	f7f2 faab 	bl	800ce66 <USBD_RegisterClass>
 801a910:	4603      	mov	r3, r0
 801a912:	2b00      	cmp	r3, #0
 801a914:	d001      	beq.n	801a91a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a916:	f7e6 f843 	bl	80009a0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 801a91a:	491e      	ldr	r1, [pc, #120]	; (801a994 <MX_USB_DEVICE_Init+0xa4>)
 801a91c:	481b      	ldr	r0, [pc, #108]	; (801a98c <MX_USB_DEVICE_Init+0x9c>)
 801a91e:	f7f0 fd27 	bl	800b370 <USBD_MSC_RegisterStorage>
 801a922:	4603      	mov	r3, r0
 801a924:	2b00      	cmp	r3, #0
 801a926:	d001      	beq.n	801a92c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a928:	f7e6 f83a 	bl	80009a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a92c:	4817      	ldr	r0, [pc, #92]	; (801a98c <MX_USB_DEVICE_Init+0x9c>)
 801a92e:	f7f2 fad0 	bl	800ced2 <USBD_Start>
 801a932:	4603      	mov	r3, r0
 801a934:	2b00      	cmp	r3, #0
 801a936:	d001      	beq.n	801a93c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a938:	f7e6 f832 	bl	80009a0 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a93c:	2200      	movs	r2, #0
 801a93e:	4916      	ldr	r1, [pc, #88]	; (801a998 <MX_USB_DEVICE_Init+0xa8>)
 801a940:	4816      	ldr	r0, [pc, #88]	; (801a99c <MX_USB_DEVICE_Init+0xac>)
 801a942:	f7f2 fa60 	bl	800ce06 <USBD_Init>
 801a946:	4603      	mov	r3, r0
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d001      	beq.n	801a950 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 801a94c:	f7e6 f828 	bl	80009a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a950:	4913      	ldr	r1, [pc, #76]	; (801a9a0 <MX_USB_DEVICE_Init+0xb0>)
 801a952:	4812      	ldr	r0, [pc, #72]	; (801a99c <MX_USB_DEVICE_Init+0xac>)
 801a954:	f7f2 fa87 	bl	800ce66 <USBD_RegisterClass>
 801a958:	4603      	mov	r3, r0
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d001      	beq.n	801a962 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 801a95e:	f7e6 f81f 	bl	80009a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a962:	4910      	ldr	r1, [pc, #64]	; (801a9a4 <MX_USB_DEVICE_Init+0xb4>)
 801a964:	480d      	ldr	r0, [pc, #52]	; (801a99c <MX_USB_DEVICE_Init+0xac>)
 801a966:	f7f0 f9db 	bl	800ad20 <USBD_CDC_RegisterInterface>
 801a96a:	4603      	mov	r3, r0
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d001      	beq.n	801a974 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 801a970:	f7e6 f816 	bl	80009a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a974:	4809      	ldr	r0, [pc, #36]	; (801a99c <MX_USB_DEVICE_Init+0xac>)
 801a976:	f7f2 faac 	bl	800ced2 <USBD_Start>
 801a97a:	4603      	mov	r3, r0
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d001      	beq.n	801a984 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 801a980:	f7e6 f80e 	bl	80009a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a984:	bf00      	nop
 801a986:	bd80      	pop	{r7, pc}
 801a988:	2000017c 	.word	0x2000017c
 801a98c:	20008774 	.word	0x20008774
 801a990:	200000ac 	.word	0x200000ac
 801a994:	200001cc 	.word	0x200001cc
 801a998:	2000014c 	.word	0x2000014c
 801a99c:	20008a50 	.word	0x20008a50
 801a9a0:	2000002c 	.word	0x2000002c
 801a9a4:	20000138 	.word	0x20000138

0801a9a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	4905      	ldr	r1, [pc, #20]	; (801a9c4 <CDC_Init_FS+0x1c>)
 801a9b0:	4805      	ldr	r0, [pc, #20]	; (801a9c8 <CDC_Init_FS+0x20>)
 801a9b2:	f7f0 f9cf 	bl	800ad54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a9b6:	4905      	ldr	r1, [pc, #20]	; (801a9cc <CDC_Init_FS+0x24>)
 801a9b8:	4803      	ldr	r0, [pc, #12]	; (801a9c8 <CDC_Init_FS+0x20>)
 801a9ba:	f7f0 f9ed 	bl	800ad98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a9be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	bd80      	pop	{r7, pc}
 801a9c4:	2000952c 	.word	0x2000952c
 801a9c8:	20008a50 	.word	0x20008a50
 801a9cc:	20008d2c 	.word	0x20008d2c

0801a9d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a9d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9de:	4770      	bx	lr

0801a9e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a9e0:	b480      	push	{r7}
 801a9e2:	b083      	sub	sp, #12
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	6039      	str	r1, [r7, #0]
 801a9ea:	71fb      	strb	r3, [r7, #7]
 801a9ec:	4613      	mov	r3, r2
 801a9ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a9f0:	79fb      	ldrb	r3, [r7, #7]
 801a9f2:	2b23      	cmp	r3, #35	; 0x23
 801a9f4:	d84a      	bhi.n	801aa8c <CDC_Control_FS+0xac>
 801a9f6:	a201      	add	r2, pc, #4	; (adr r2, 801a9fc <CDC_Control_FS+0x1c>)
 801a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9fc:	0801aa8d 	.word	0x0801aa8d
 801aa00:	0801aa8d 	.word	0x0801aa8d
 801aa04:	0801aa8d 	.word	0x0801aa8d
 801aa08:	0801aa8d 	.word	0x0801aa8d
 801aa0c:	0801aa8d 	.word	0x0801aa8d
 801aa10:	0801aa8d 	.word	0x0801aa8d
 801aa14:	0801aa8d 	.word	0x0801aa8d
 801aa18:	0801aa8d 	.word	0x0801aa8d
 801aa1c:	0801aa8d 	.word	0x0801aa8d
 801aa20:	0801aa8d 	.word	0x0801aa8d
 801aa24:	0801aa8d 	.word	0x0801aa8d
 801aa28:	0801aa8d 	.word	0x0801aa8d
 801aa2c:	0801aa8d 	.word	0x0801aa8d
 801aa30:	0801aa8d 	.word	0x0801aa8d
 801aa34:	0801aa8d 	.word	0x0801aa8d
 801aa38:	0801aa8d 	.word	0x0801aa8d
 801aa3c:	0801aa8d 	.word	0x0801aa8d
 801aa40:	0801aa8d 	.word	0x0801aa8d
 801aa44:	0801aa8d 	.word	0x0801aa8d
 801aa48:	0801aa8d 	.word	0x0801aa8d
 801aa4c:	0801aa8d 	.word	0x0801aa8d
 801aa50:	0801aa8d 	.word	0x0801aa8d
 801aa54:	0801aa8d 	.word	0x0801aa8d
 801aa58:	0801aa8d 	.word	0x0801aa8d
 801aa5c:	0801aa8d 	.word	0x0801aa8d
 801aa60:	0801aa8d 	.word	0x0801aa8d
 801aa64:	0801aa8d 	.word	0x0801aa8d
 801aa68:	0801aa8d 	.word	0x0801aa8d
 801aa6c:	0801aa8d 	.word	0x0801aa8d
 801aa70:	0801aa8d 	.word	0x0801aa8d
 801aa74:	0801aa8d 	.word	0x0801aa8d
 801aa78:	0801aa8d 	.word	0x0801aa8d
 801aa7c:	0801aa8d 	.word	0x0801aa8d
 801aa80:	0801aa8d 	.word	0x0801aa8d
 801aa84:	0801aa8d 	.word	0x0801aa8d
 801aa88:	0801aa8d 	.word	0x0801aa8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801aa8c:	bf00      	nop
  }

  return (USBD_OK);
 801aa8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801aa90:	4618      	mov	r0, r3
 801aa92:	370c      	adds	r7, #12
 801aa94:	46bd      	mov	sp, r7
 801aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9a:	4770      	bx	lr

0801aa9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b082      	sub	sp, #8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801aaa6:	6879      	ldr	r1, [r7, #4]
 801aaa8:	4805      	ldr	r0, [pc, #20]	; (801aac0 <CDC_Receive_FS+0x24>)
 801aaaa:	f7f0 f975 	bl	800ad98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801aaae:	4804      	ldr	r0, [pc, #16]	; (801aac0 <CDC_Receive_FS+0x24>)
 801aab0:	f7f0 f990 	bl	800add4 <USBD_CDC_ReceivePacket>
  //memcpy(UserRxBufferFS, Buf, *Len);
#ifdef COM_PORT
  wr = 1;
  byteNum++;
#endif
  return (USBD_OK);
 801aab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3708      	adds	r7, #8
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
 801aabe:	bf00      	nop
 801aac0:	20008a50 	.word	0x20008a50

0801aac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801aac4:	b480      	push	{r7}
 801aac6:	b087      	sub	sp, #28
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	60f8      	str	r0, [r7, #12]
 801aacc:	60b9      	str	r1, [r7, #8]
 801aace:	4613      	mov	r3, r2
 801aad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801aad2:	2300      	movs	r3, #0
 801aad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801aad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aada:	4618      	mov	r0, r3
 801aadc:	371c      	adds	r7, #28
 801aade:	46bd      	mov	sp, r7
 801aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae4:	4770      	bx	lr
	...

0801aae8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b083      	sub	sp, #12
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	4603      	mov	r3, r0
 801aaf0:	6039      	str	r1, [r7, #0]
 801aaf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	2212      	movs	r2, #18
 801aaf8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801aafa:	4b03      	ldr	r3, [pc, #12]	; (801ab08 <USBD_HS_DeviceDescriptor+0x20>)
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	370c      	adds	r7, #12
 801ab00:	46bd      	mov	sp, r7
 801ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab06:	4770      	bx	lr
 801ab08:	20000198 	.word	0x20000198

0801ab0c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab0c:	b480      	push	{r7}
 801ab0e:	b083      	sub	sp, #12
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	4603      	mov	r3, r0
 801ab14:	6039      	str	r1, [r7, #0]
 801ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	2204      	movs	r2, #4
 801ab1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ab1e:	4b03      	ldr	r3, [pc, #12]	; (801ab2c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	370c      	adds	r7, #12
 801ab24:	46bd      	mov	sp, r7
 801ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2a:	4770      	bx	lr
 801ab2c:	200001ac 	.word	0x200001ac

0801ab30 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	4603      	mov	r3, r0
 801ab38:	6039      	str	r1, [r7, #0]
 801ab3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ab3c:	79fb      	ldrb	r3, [r7, #7]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d105      	bne.n	801ab4e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801ab42:	683a      	ldr	r2, [r7, #0]
 801ab44:	4907      	ldr	r1, [pc, #28]	; (801ab64 <USBD_HS_ProductStrDescriptor+0x34>)
 801ab46:	4808      	ldr	r0, [pc, #32]	; (801ab68 <USBD_HS_ProductStrDescriptor+0x38>)
 801ab48:	f7f3 fb76 	bl	800e238 <USBD_GetString>
 801ab4c:	e004      	b.n	801ab58 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801ab4e:	683a      	ldr	r2, [r7, #0]
 801ab50:	4904      	ldr	r1, [pc, #16]	; (801ab64 <USBD_HS_ProductStrDescriptor+0x34>)
 801ab52:	4805      	ldr	r0, [pc, #20]	; (801ab68 <USBD_HS_ProductStrDescriptor+0x38>)
 801ab54:	f7f3 fb70 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab58:	4b02      	ldr	r3, [pc, #8]	; (801ab64 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	3708      	adds	r7, #8
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}
 801ab62:	bf00      	nop
 801ab64:	20009d2c 	.word	0x20009d2c
 801ab68:	0801f13c 	.word	0x0801f13c

0801ab6c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	4603      	mov	r3, r0
 801ab74:	6039      	str	r1, [r7, #0]
 801ab76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ab78:	683a      	ldr	r2, [r7, #0]
 801ab7a:	4904      	ldr	r1, [pc, #16]	; (801ab8c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801ab7c:	4804      	ldr	r0, [pc, #16]	; (801ab90 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801ab7e:	f7f3 fb5b 	bl	800e238 <USBD_GetString>
  return USBD_StrDesc;
 801ab82:	4b02      	ldr	r3, [pc, #8]	; (801ab8c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	3708      	adds	r7, #8
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	20009d2c 	.word	0x20009d2c
 801ab90:	0801f150 	.word	0x0801f150

0801ab94 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b082      	sub	sp, #8
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	6039      	str	r1, [r7, #0]
 801ab9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801aba0:	683b      	ldr	r3, [r7, #0]
 801aba2:	221a      	movs	r2, #26
 801aba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801aba6:	f000 f8e7 	bl	801ad78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801abaa:	4b02      	ldr	r3, [pc, #8]	; (801abb4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801abac:	4618      	mov	r0, r3
 801abae:	3708      	adds	r7, #8
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}
 801abb4:	200001b0 	.word	0x200001b0

0801abb8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b082      	sub	sp, #8
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	4603      	mov	r3, r0
 801abc0:	6039      	str	r1, [r7, #0]
 801abc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801abc4:	79fb      	ldrb	r3, [r7, #7]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d105      	bne.n	801abd6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801abca:	683a      	ldr	r2, [r7, #0]
 801abcc:	4907      	ldr	r1, [pc, #28]	; (801abec <USBD_HS_ConfigStrDescriptor+0x34>)
 801abce:	4808      	ldr	r0, [pc, #32]	; (801abf0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801abd0:	f7f3 fb32 	bl	800e238 <USBD_GetString>
 801abd4:	e004      	b.n	801abe0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801abd6:	683a      	ldr	r2, [r7, #0]
 801abd8:	4904      	ldr	r1, [pc, #16]	; (801abec <USBD_HS_ConfigStrDescriptor+0x34>)
 801abda:	4805      	ldr	r0, [pc, #20]	; (801abf0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801abdc:	f7f3 fb2c 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801abe0:	4b02      	ldr	r3, [pc, #8]	; (801abec <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	3708      	adds	r7, #8
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	20009d2c 	.word	0x20009d2c
 801abf0:	0801f164 	.word	0x0801f164

0801abf4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b082      	sub	sp, #8
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	4603      	mov	r3, r0
 801abfc:	6039      	str	r1, [r7, #0]
 801abfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ac00:	79fb      	ldrb	r3, [r7, #7]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d105      	bne.n	801ac12 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ac06:	683a      	ldr	r2, [r7, #0]
 801ac08:	4907      	ldr	r1, [pc, #28]	; (801ac28 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ac0a:	4808      	ldr	r0, [pc, #32]	; (801ac2c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ac0c:	f7f3 fb14 	bl	800e238 <USBD_GetString>
 801ac10:	e004      	b.n	801ac1c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ac12:	683a      	ldr	r2, [r7, #0]
 801ac14:	4904      	ldr	r1, [pc, #16]	; (801ac28 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ac16:	4805      	ldr	r0, [pc, #20]	; (801ac2c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ac18:	f7f3 fb0e 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac1c:	4b02      	ldr	r3, [pc, #8]	; (801ac28 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801ac1e:	4618      	mov	r0, r3
 801ac20:	3708      	adds	r7, #8
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	20009d2c 	.word	0x20009d2c
 801ac2c:	0801f170 	.word	0x0801f170

0801ac30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac30:	b480      	push	{r7}
 801ac32:	b083      	sub	sp, #12
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	4603      	mov	r3, r0
 801ac38:	6039      	str	r1, [r7, #0]
 801ac3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ac3c:	683b      	ldr	r3, [r7, #0]
 801ac3e:	2212      	movs	r2, #18
 801ac40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ac42:	4b03      	ldr	r3, [pc, #12]	; (801ac50 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	370c      	adds	r7, #12
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4e:	4770      	bx	lr
 801ac50:	20000168 	.word	0x20000168

0801ac54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac54:	b480      	push	{r7}
 801ac56:	b083      	sub	sp, #12
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	6039      	str	r1, [r7, #0]
 801ac5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ac60:	683b      	ldr	r3, [r7, #0]
 801ac62:	2204      	movs	r2, #4
 801ac64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ac66:	4b03      	ldr	r3, [pc, #12]	; (801ac74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	370c      	adds	r7, #12
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac72:	4770      	bx	lr
 801ac74:	200001ac 	.word	0x200001ac

0801ac78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b082      	sub	sp, #8
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	4603      	mov	r3, r0
 801ac80:	6039      	str	r1, [r7, #0]
 801ac82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ac84:	79fb      	ldrb	r3, [r7, #7]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d105      	bne.n	801ac96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ac8a:	683a      	ldr	r2, [r7, #0]
 801ac8c:	4907      	ldr	r1, [pc, #28]	; (801acac <USBD_FS_ProductStrDescriptor+0x34>)
 801ac8e:	4808      	ldr	r0, [pc, #32]	; (801acb0 <USBD_FS_ProductStrDescriptor+0x38>)
 801ac90:	f7f3 fad2 	bl	800e238 <USBD_GetString>
 801ac94:	e004      	b.n	801aca0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ac96:	683a      	ldr	r2, [r7, #0]
 801ac98:	4904      	ldr	r1, [pc, #16]	; (801acac <USBD_FS_ProductStrDescriptor+0x34>)
 801ac9a:	4805      	ldr	r0, [pc, #20]	; (801acb0 <USBD_FS_ProductStrDescriptor+0x38>)
 801ac9c:	f7f3 facc 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aca0:	4b02      	ldr	r3, [pc, #8]	; (801acac <USBD_FS_ProductStrDescriptor+0x34>)
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3708      	adds	r7, #8
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}
 801acaa:	bf00      	nop
 801acac:	20009d2c 	.word	0x20009d2c
 801acb0:	0801f180 	.word	0x0801f180

0801acb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b082      	sub	sp, #8
 801acb8:	af00      	add	r7, sp, #0
 801acba:	4603      	mov	r3, r0
 801acbc:	6039      	str	r1, [r7, #0]
 801acbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801acc0:	683a      	ldr	r2, [r7, #0]
 801acc2:	4904      	ldr	r1, [pc, #16]	; (801acd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801acc4:	4804      	ldr	r0, [pc, #16]	; (801acd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801acc6:	f7f3 fab7 	bl	800e238 <USBD_GetString>
  return USBD_StrDesc;
 801acca:	4b02      	ldr	r3, [pc, #8]	; (801acd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801accc:	4618      	mov	r0, r3
 801acce:	3708      	adds	r7, #8
 801acd0:	46bd      	mov	sp, r7
 801acd2:	bd80      	pop	{r7, pc}
 801acd4:	20009d2c 	.word	0x20009d2c
 801acd8:	0801f150 	.word	0x0801f150

0801acdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b082      	sub	sp, #8
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	4603      	mov	r3, r0
 801ace4:	6039      	str	r1, [r7, #0]
 801ace6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ace8:	683b      	ldr	r3, [r7, #0]
 801acea:	221a      	movs	r2, #26
 801acec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801acee:	f000 f843 	bl	801ad78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801acf2:	4b02      	ldr	r3, [pc, #8]	; (801acfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801acf4:	4618      	mov	r0, r3
 801acf6:	3708      	adds	r7, #8
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}
 801acfc:	200001b0 	.word	0x200001b0

0801ad00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b082      	sub	sp, #8
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	4603      	mov	r3, r0
 801ad08:	6039      	str	r1, [r7, #0]
 801ad0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ad0c:	79fb      	ldrb	r3, [r7, #7]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d105      	bne.n	801ad1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ad12:	683a      	ldr	r2, [r7, #0]
 801ad14:	4907      	ldr	r1, [pc, #28]	; (801ad34 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ad16:	4808      	ldr	r0, [pc, #32]	; (801ad38 <USBD_FS_ConfigStrDescriptor+0x38>)
 801ad18:	f7f3 fa8e 	bl	800e238 <USBD_GetString>
 801ad1c:	e004      	b.n	801ad28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ad1e:	683a      	ldr	r2, [r7, #0]
 801ad20:	4904      	ldr	r1, [pc, #16]	; (801ad34 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ad22:	4805      	ldr	r0, [pc, #20]	; (801ad38 <USBD_FS_ConfigStrDescriptor+0x38>)
 801ad24:	f7f3 fa88 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ad28:	4b02      	ldr	r3, [pc, #8]	; (801ad34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	3708      	adds	r7, #8
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	bd80      	pop	{r7, pc}
 801ad32:	bf00      	nop
 801ad34:	20009d2c 	.word	0x20009d2c
 801ad38:	0801f198 	.word	0x0801f198

0801ad3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	4603      	mov	r3, r0
 801ad44:	6039      	str	r1, [r7, #0]
 801ad46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ad48:	79fb      	ldrb	r3, [r7, #7]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d105      	bne.n	801ad5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ad4e:	683a      	ldr	r2, [r7, #0]
 801ad50:	4907      	ldr	r1, [pc, #28]	; (801ad70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ad52:	4808      	ldr	r0, [pc, #32]	; (801ad74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ad54:	f7f3 fa70 	bl	800e238 <USBD_GetString>
 801ad58:	e004      	b.n	801ad64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ad5a:	683a      	ldr	r2, [r7, #0]
 801ad5c:	4904      	ldr	r1, [pc, #16]	; (801ad70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ad5e:	4805      	ldr	r0, [pc, #20]	; (801ad74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ad60:	f7f3 fa6a 	bl	800e238 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ad64:	4b02      	ldr	r3, [pc, #8]	; (801ad70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ad66:	4618      	mov	r0, r3
 801ad68:	3708      	adds	r7, #8
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop
 801ad70:	20009d2c 	.word	0x20009d2c
 801ad74:	0801f1a4 	.word	0x0801f1a4

0801ad78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b084      	sub	sp, #16
 801ad7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ad7e:	4b0f      	ldr	r3, [pc, #60]	; (801adbc <Get_SerialNum+0x44>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ad84:	4b0e      	ldr	r3, [pc, #56]	; (801adc0 <Get_SerialNum+0x48>)
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ad8a:	4b0e      	ldr	r3, [pc, #56]	; (801adc4 <Get_SerialNum+0x4c>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ad90:	68fa      	ldr	r2, [r7, #12]
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	4413      	add	r3, r2
 801ad96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d009      	beq.n	801adb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ad9e:	2208      	movs	r2, #8
 801ada0:	4909      	ldr	r1, [pc, #36]	; (801adc8 <Get_SerialNum+0x50>)
 801ada2:	68f8      	ldr	r0, [r7, #12]
 801ada4:	f000 f814 	bl	801add0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ada8:	2204      	movs	r2, #4
 801adaa:	4908      	ldr	r1, [pc, #32]	; (801adcc <Get_SerialNum+0x54>)
 801adac:	68b8      	ldr	r0, [r7, #8]
 801adae:	f000 f80f 	bl	801add0 <IntToUnicode>
  }
}
 801adb2:	bf00      	nop
 801adb4:	3710      	adds	r7, #16
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	1fff7a10 	.word	0x1fff7a10
 801adc0:	1fff7a14 	.word	0x1fff7a14
 801adc4:	1fff7a18 	.word	0x1fff7a18
 801adc8:	200001b2 	.word	0x200001b2
 801adcc:	200001c2 	.word	0x200001c2

0801add0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801add0:	b480      	push	{r7}
 801add2:	b087      	sub	sp, #28
 801add4:	af00      	add	r7, sp, #0
 801add6:	60f8      	str	r0, [r7, #12]
 801add8:	60b9      	str	r1, [r7, #8]
 801adda:	4613      	mov	r3, r2
 801addc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801adde:	2300      	movs	r3, #0
 801ade0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ade2:	2300      	movs	r3, #0
 801ade4:	75fb      	strb	r3, [r7, #23]
 801ade6:	e027      	b.n	801ae38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	0f1b      	lsrs	r3, r3, #28
 801adec:	2b09      	cmp	r3, #9
 801adee:	d80b      	bhi.n	801ae08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	0f1b      	lsrs	r3, r3, #28
 801adf4:	b2da      	uxtb	r2, r3
 801adf6:	7dfb      	ldrb	r3, [r7, #23]
 801adf8:	005b      	lsls	r3, r3, #1
 801adfa:	4619      	mov	r1, r3
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	440b      	add	r3, r1
 801ae00:	3230      	adds	r2, #48	; 0x30
 801ae02:	b2d2      	uxtb	r2, r2
 801ae04:	701a      	strb	r2, [r3, #0]
 801ae06:	e00a      	b.n	801ae1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	0f1b      	lsrs	r3, r3, #28
 801ae0c:	b2da      	uxtb	r2, r3
 801ae0e:	7dfb      	ldrb	r3, [r7, #23]
 801ae10:	005b      	lsls	r3, r3, #1
 801ae12:	4619      	mov	r1, r3
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	440b      	add	r3, r1
 801ae18:	3237      	adds	r2, #55	; 0x37
 801ae1a:	b2d2      	uxtb	r2, r2
 801ae1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	011b      	lsls	r3, r3, #4
 801ae22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ae24:	7dfb      	ldrb	r3, [r7, #23]
 801ae26:	005b      	lsls	r3, r3, #1
 801ae28:	3301      	adds	r3, #1
 801ae2a:	68ba      	ldr	r2, [r7, #8]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	2200      	movs	r2, #0
 801ae30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ae32:	7dfb      	ldrb	r3, [r7, #23]
 801ae34:	3301      	adds	r3, #1
 801ae36:	75fb      	strb	r3, [r7, #23]
 801ae38:	7dfa      	ldrb	r2, [r7, #23]
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d3d3      	bcc.n	801ade8 <IntToUnicode+0x18>
  }
}
 801ae40:	bf00      	nop
 801ae42:	bf00      	nop
 801ae44:	371c      	adds	r7, #28
 801ae46:	46bd      	mov	sp, r7
 801ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4c:	4770      	bx	lr

0801ae4e <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 801ae4e:	b480      	push	{r7}
 801ae50:	b083      	sub	sp, #12
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	4603      	mov	r3, r0
 801ae56:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 801ae58:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	370c      	adds	r7, #12
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae64:	4770      	bx	lr

0801ae66 <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ae66:	b480      	push	{r7}
 801ae68:	b085      	sub	sp, #20
 801ae6a:	af00      	add	r7, sp, #0
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	60b9      	str	r1, [r7, #8]
 801ae70:	607a      	str	r2, [r7, #4]
 801ae72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801ae7a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae82:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801ae84:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	3714      	adds	r7, #20
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae90:	4770      	bx	lr

0801ae92 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 801ae92:	b480      	push	{r7}
 801ae94:	b083      	sub	sp, #12
 801ae96:	af00      	add	r7, sp, #0
 801ae98:	4603      	mov	r3, r0
 801ae9a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 801ae9c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	370c      	adds	r7, #12
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr

0801aeaa <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 801aeaa:	b480      	push	{r7}
 801aeac:	b083      	sub	sp, #12
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 801aeb4:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	370c      	adds	r7, #12
 801aeba:	46bd      	mov	sp, r7
 801aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec0:	4770      	bx	lr

0801aec2 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801aec2:	b480      	push	{r7}
 801aec4:	b085      	sub	sp, #20
 801aec6:	af00      	add	r7, sp, #0
 801aec8:	60b9      	str	r1, [r7, #8]
 801aeca:	607a      	str	r2, [r7, #4]
 801aecc:	461a      	mov	r2, r3
 801aece:	4603      	mov	r3, r0
 801aed0:	73fb      	strb	r3, [r7, #15]
 801aed2:	4613      	mov	r3, r2
 801aed4:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801aed6:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 801aed8:	4618      	mov	r0, r3
 801aeda:	3714      	adds	r7, #20
 801aedc:	46bd      	mov	sp, r7
 801aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee2:	4770      	bx	lr

0801aee4 <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801aee4:	b480      	push	{r7}
 801aee6:	b085      	sub	sp, #20
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60b9      	str	r1, [r7, #8]
 801aeec:	607a      	str	r2, [r7, #4]
 801aeee:	461a      	mov	r2, r3
 801aef0:	4603      	mov	r3, r0
 801aef2:	73fb      	strb	r3, [r7, #15]
 801aef4:	4613      	mov	r3, r2
 801aef6:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801aef8:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3714      	adds	r7, #20
 801aefe:	46bd      	mov	sp, r7
 801af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af04:	4770      	bx	lr

0801af06 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 801af06:	b480      	push	{r7}
 801af08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 801af0a:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 801af0c:	4618      	mov	r0, r3
 801af0e:	46bd      	mov	sp, r7
 801af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af14:	4770      	bx	lr
	...

0801af18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b08c      	sub	sp, #48	; 0x30
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801af20:	f107 031c 	add.w	r3, r7, #28
 801af24:	2200      	movs	r2, #0
 801af26:	601a      	str	r2, [r3, #0]
 801af28:	605a      	str	r2, [r3, #4]
 801af2a:	609a      	str	r2, [r3, #8]
 801af2c:	60da      	str	r2, [r3, #12]
 801af2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801af38:	d13b      	bne.n	801afb2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801af3a:	2300      	movs	r3, #0
 801af3c:	61bb      	str	r3, [r7, #24]
 801af3e:	4b3c      	ldr	r3, [pc, #240]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af42:	4a3b      	ldr	r2, [pc, #236]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af44:	f043 0301 	orr.w	r3, r3, #1
 801af48:	6313      	str	r3, [r2, #48]	; 0x30
 801af4a:	4b39      	ldr	r3, [pc, #228]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af4e:	f003 0301 	and.w	r3, r3, #1
 801af52:	61bb      	str	r3, [r7, #24]
 801af54:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801af56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801af5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af5c:	2302      	movs	r3, #2
 801af5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af60:	2300      	movs	r3, #0
 801af62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801af64:	2303      	movs	r3, #3
 801af66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801af68:	230a      	movs	r3, #10
 801af6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801af6c:	f107 031c 	add.w	r3, r7, #28
 801af70:	4619      	mov	r1, r3
 801af72:	4830      	ldr	r0, [pc, #192]	; (801b034 <HAL_PCD_MspInit+0x11c>)
 801af74:	f7e7 ffea 	bl	8002f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801af78:	4b2d      	ldr	r3, [pc, #180]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af7c:	4a2c      	ldr	r2, [pc, #176]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af82:	6353      	str	r3, [r2, #52]	; 0x34
 801af84:	2300      	movs	r3, #0
 801af86:	617b      	str	r3, [r7, #20]
 801af88:	4b29      	ldr	r3, [pc, #164]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af8c:	4a28      	ldr	r2, [pc, #160]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801af92:	6453      	str	r3, [r2, #68]	; 0x44
 801af94:	4b26      	ldr	r3, [pc, #152]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801af96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801af9c:	617b      	str	r3, [r7, #20]
 801af9e:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801afa0:	2200      	movs	r2, #0
 801afa2:	2100      	movs	r1, #0
 801afa4:	2043      	movs	r0, #67	; 0x43
 801afa6:	f7e6 fa96 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801afaa:	2043      	movs	r0, #67	; 0x43
 801afac:	f7e6 faaf 	bl	800150e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801afb0:	e039      	b.n	801b026 <HAL_PCD_MspInit+0x10e>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	4a20      	ldr	r2, [pc, #128]	; (801b038 <HAL_PCD_MspInit+0x120>)
 801afb8:	4293      	cmp	r3, r2
 801afba:	d134      	bne.n	801b026 <HAL_PCD_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801afbc:	2300      	movs	r3, #0
 801afbe:	613b      	str	r3, [r7, #16]
 801afc0:	4b1b      	ldr	r3, [pc, #108]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801afc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afc4:	4a1a      	ldr	r2, [pc, #104]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801afc6:	f043 0302 	orr.w	r3, r3, #2
 801afca:	6313      	str	r3, [r2, #48]	; 0x30
 801afcc:	4b18      	ldr	r3, [pc, #96]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801afce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afd0:	f003 0302 	and.w	r3, r3, #2
 801afd4:	613b      	str	r3, [r7, #16]
 801afd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801afd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801afdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801afde:	2302      	movs	r3, #2
 801afe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afe2:	2300      	movs	r3, #0
 801afe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801afe6:	2303      	movs	r3, #3
 801afe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801afea:	230c      	movs	r3, #12
 801afec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801afee:	f107 031c 	add.w	r3, r7, #28
 801aff2:	4619      	mov	r1, r3
 801aff4:	4811      	ldr	r0, [pc, #68]	; (801b03c <HAL_PCD_MspInit+0x124>)
 801aff6:	f7e7 ffa9 	bl	8002f4c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801affa:	2300      	movs	r3, #0
 801affc:	60fb      	str	r3, [r7, #12]
 801affe:	4b0c      	ldr	r3, [pc, #48]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b002:	4a0b      	ldr	r2, [pc, #44]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801b004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b008:	6313      	str	r3, [r2, #48]	; 0x30
 801b00a:	4b09      	ldr	r3, [pc, #36]	; (801b030 <HAL_PCD_MspInit+0x118>)
 801b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b012:	60fb      	str	r3, [r7, #12]
 801b014:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801b016:	2200      	movs	r2, #0
 801b018:	2100      	movs	r1, #0
 801b01a:	204d      	movs	r0, #77	; 0x4d
 801b01c:	f7e6 fa5b 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801b020:	204d      	movs	r0, #77	; 0x4d
 801b022:	f7e6 fa74 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 801b026:	bf00      	nop
 801b028:	3730      	adds	r7, #48	; 0x30
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bd80      	pop	{r7, pc}
 801b02e:	bf00      	nop
 801b030:	40023800 	.word	0x40023800
 801b034:	40020000 	.word	0x40020000
 801b038:	40040000 	.word	0x40040000
 801b03c:	40020400 	.word	0x40020400

0801b040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b082      	sub	sp, #8
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801b054:	4619      	mov	r1, r3
 801b056:	4610      	mov	r0, r2
 801b058:	f7f1 ff88 	bl	800cf6c <USBD_LL_SetupStage>
}
 801b05c:	bf00      	nop
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}

0801b064 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
 801b06c:	460b      	mov	r3, r1
 801b06e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801b076:	78fa      	ldrb	r2, [r7, #3]
 801b078:	6879      	ldr	r1, [r7, #4]
 801b07a:	4613      	mov	r3, r2
 801b07c:	00db      	lsls	r3, r3, #3
 801b07e:	4413      	add	r3, r2
 801b080:	009b      	lsls	r3, r3, #2
 801b082:	440b      	add	r3, r1
 801b084:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801b088:	681a      	ldr	r2, [r3, #0]
 801b08a:	78fb      	ldrb	r3, [r7, #3]
 801b08c:	4619      	mov	r1, r3
 801b08e:	f7f1 ffc2 	bl	800d016 <USBD_LL_DataOutStage>
}
 801b092:	bf00      	nop
 801b094:	3708      	adds	r7, #8
 801b096:	46bd      	mov	sp, r7
 801b098:	bd80      	pop	{r7, pc}

0801b09a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b09a:	b580      	push	{r7, lr}
 801b09c:	b082      	sub	sp, #8
 801b09e:	af00      	add	r7, sp, #0
 801b0a0:	6078      	str	r0, [r7, #4]
 801b0a2:	460b      	mov	r3, r1
 801b0a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801b0ac:	78fa      	ldrb	r2, [r7, #3]
 801b0ae:	6879      	ldr	r1, [r7, #4]
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	00db      	lsls	r3, r3, #3
 801b0b4:	4413      	add	r3, r2
 801b0b6:	009b      	lsls	r3, r3, #2
 801b0b8:	440b      	add	r3, r1
 801b0ba:	3320      	adds	r3, #32
 801b0bc:	681a      	ldr	r2, [r3, #0]
 801b0be:	78fb      	ldrb	r3, [r7, #3]
 801b0c0:	4619      	mov	r1, r3
 801b0c2:	f7f2 f85b 	bl	800d17c <USBD_LL_DataInStage>
}
 801b0c6:	bf00      	nop
 801b0c8:	3708      	adds	r7, #8
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	bd80      	pop	{r7, pc}

0801b0ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b0ce:	b580      	push	{r7, lr}
 801b0d0:	b082      	sub	sp, #8
 801b0d2:	af00      	add	r7, sp, #0
 801b0d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7f2 f995 	bl	800d40c <USBD_LL_SOF>
}
 801b0e2:	bf00      	nop
 801b0e4:	3708      	adds	r7, #8
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}

0801b0ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b0ea:	b580      	push	{r7, lr}
 801b0ec:	b084      	sub	sp, #16
 801b0ee:	af00      	add	r7, sp, #0
 801b0f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	79db      	ldrb	r3, [r3, #7]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d102      	bne.n	801b104 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b0fe:	2300      	movs	r3, #0
 801b100:	73fb      	strb	r3, [r7, #15]
 801b102:	e008      	b.n	801b116 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	79db      	ldrb	r3, [r3, #7]
 801b108:	2b02      	cmp	r3, #2
 801b10a:	d102      	bne.n	801b112 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b10c:	2301      	movs	r3, #1
 801b10e:	73fb      	strb	r3, [r7, #15]
 801b110:	e001      	b.n	801b116 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b112:	f7e5 fc45 	bl	80009a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b11c:	7bfa      	ldrb	r2, [r7, #15]
 801b11e:	4611      	mov	r1, r2
 801b120:	4618      	mov	r0, r3
 801b122:	f7f2 f92f 	bl	800d384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7f2 f8d7 	bl	800d2e0 <USBD_LL_Reset>
}
 801b132:	bf00      	nop
 801b134:	3710      	adds	r7, #16
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
	...

0801b13c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b082      	sub	sp, #8
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b14a:	4618      	mov	r0, r3
 801b14c:	f7f2 f92a 	bl	800d3a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	687a      	ldr	r2, [r7, #4]
 801b15c:	6812      	ldr	r2, [r2, #0]
 801b15e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b162:	f043 0301 	orr.w	r3, r3, #1
 801b166:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	7adb      	ldrb	r3, [r3, #11]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d005      	beq.n	801b17c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b170:	4b04      	ldr	r3, [pc, #16]	; (801b184 <HAL_PCD_SuspendCallback+0x48>)
 801b172:	691b      	ldr	r3, [r3, #16]
 801b174:	4a03      	ldr	r2, [pc, #12]	; (801b184 <HAL_PCD_SuspendCallback+0x48>)
 801b176:	f043 0306 	orr.w	r3, r3, #6
 801b17a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b17c:	bf00      	nop
 801b17e:	3708      	adds	r7, #8
 801b180:	46bd      	mov	sp, r7
 801b182:	bd80      	pop	{r7, pc}
 801b184:	e000ed00 	.word	0xe000ed00

0801b188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b082      	sub	sp, #8
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b196:	4618      	mov	r0, r3
 801b198:	f7f2 f920 	bl	800d3dc <USBD_LL_Resume>
}
 801b19c:	bf00      	nop
 801b19e:	3708      	adds	r7, #8
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b082      	sub	sp, #8
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	460b      	mov	r3, r1
 801b1ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b1b6:	78fa      	ldrb	r2, [r7, #3]
 801b1b8:	4611      	mov	r1, r2
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7f2 f978 	bl	800d4b0 <USBD_LL_IsoOUTIncomplete>
}
 801b1c0:	bf00      	nop
 801b1c2:	3708      	adds	r7, #8
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}

0801b1c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b082      	sub	sp, #8
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	6078      	str	r0, [r7, #4]
 801b1d0:	460b      	mov	r3, r1
 801b1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b1da:	78fa      	ldrb	r2, [r7, #3]
 801b1dc:	4611      	mov	r1, r2
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f7f2 f934 	bl	800d44c <USBD_LL_IsoINIncomplete>
}
 801b1e4:	bf00      	nop
 801b1e6:	3708      	adds	r7, #8
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7f2 f98a 	bl	800d514 <USBD_LL_DevConnected>
}
 801b200:	bf00      	nop
 801b202:	3708      	adds	r7, #8
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}

0801b208 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b082      	sub	sp, #8
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801b216:	4618      	mov	r0, r3
 801b218:	f7f2 f987 	bl	800d52a <USBD_LL_DevDisconnected>
}
 801b21c:	bf00      	nop
 801b21e:	3708      	adds	r7, #8
 801b220:	46bd      	mov	sp, r7
 801b222:	bd80      	pop	{r7, pc}

0801b224 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b082      	sub	sp, #8
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	781b      	ldrb	r3, [r3, #0]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d13c      	bne.n	801b2ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b234:	4a43      	ldr	r2, [pc, #268]	; (801b344 <USBD_LL_Init+0x120>)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	4a41      	ldr	r2, [pc, #260]	; (801b344 <USBD_LL_Init+0x120>)
 801b240:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b244:	4b3f      	ldr	r3, [pc, #252]	; (801b344 <USBD_LL_Init+0x120>)
 801b246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801b24a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b24c:	4b3d      	ldr	r3, [pc, #244]	; (801b344 <USBD_LL_Init+0x120>)
 801b24e:	2204      	movs	r2, #4
 801b250:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b252:	4b3c      	ldr	r3, [pc, #240]	; (801b344 <USBD_LL_Init+0x120>)
 801b254:	2202      	movs	r2, #2
 801b256:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b258:	4b3a      	ldr	r3, [pc, #232]	; (801b344 <USBD_LL_Init+0x120>)
 801b25a:	2200      	movs	r2, #0
 801b25c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b25e:	4b39      	ldr	r3, [pc, #228]	; (801b344 <USBD_LL_Init+0x120>)
 801b260:	2202      	movs	r2, #2
 801b262:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b264:	4b37      	ldr	r3, [pc, #220]	; (801b344 <USBD_LL_Init+0x120>)
 801b266:	2200      	movs	r2, #0
 801b268:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b26a:	4b36      	ldr	r3, [pc, #216]	; (801b344 <USBD_LL_Init+0x120>)
 801b26c:	2200      	movs	r2, #0
 801b26e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b270:	4b34      	ldr	r3, [pc, #208]	; (801b344 <USBD_LL_Init+0x120>)
 801b272:	2200      	movs	r2, #0
 801b274:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b276:	4b33      	ldr	r3, [pc, #204]	; (801b344 <USBD_LL_Init+0x120>)
 801b278:	2200      	movs	r2, #0
 801b27a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b27c:	4b31      	ldr	r3, [pc, #196]	; (801b344 <USBD_LL_Init+0x120>)
 801b27e:	2200      	movs	r2, #0
 801b280:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b282:	4830      	ldr	r0, [pc, #192]	; (801b344 <USBD_LL_Init+0x120>)
 801b284:	f7e7 fffe 	bl	8003284 <HAL_PCD_Init>
 801b288:	4603      	mov	r3, r0
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d001      	beq.n	801b292 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b28e:	f7e5 fb87 	bl	80009a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b292:	2180      	movs	r1, #128	; 0x80
 801b294:	482b      	ldr	r0, [pc, #172]	; (801b344 <USBD_LL_Init+0x120>)
 801b296:	f7e9 fa56 	bl	8004746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b29a:	2240      	movs	r2, #64	; 0x40
 801b29c:	2100      	movs	r1, #0
 801b29e:	4829      	ldr	r0, [pc, #164]	; (801b344 <USBD_LL_Init+0x120>)
 801b2a0:	f7e9 fa0a 	bl	80046b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b2a4:	2280      	movs	r2, #128	; 0x80
 801b2a6:	2101      	movs	r1, #1
 801b2a8:	4826      	ldr	r0, [pc, #152]	; (801b344 <USBD_LL_Init+0x120>)
 801b2aa:	f7e9 fa05 	bl	80046b8 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	781b      	ldrb	r3, [r3, #0]
 801b2b2:	2b01      	cmp	r3, #1
 801b2b4:	d140      	bne.n	801b338 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801b2b6:	4a24      	ldr	r2, [pc, #144]	; (801b348 <USBD_LL_Init+0x124>)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	4a21      	ldr	r2, [pc, #132]	; (801b348 <USBD_LL_Init+0x124>)
 801b2c2:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801b2c6:	4b20      	ldr	r3, [pc, #128]	; (801b348 <USBD_LL_Init+0x124>)
 801b2c8:	4a20      	ldr	r2, [pc, #128]	; (801b34c <USBD_LL_Init+0x128>)
 801b2ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 801b2cc:	4b1e      	ldr	r3, [pc, #120]	; (801b348 <USBD_LL_Init+0x124>)
 801b2ce:	2206      	movs	r2, #6
 801b2d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801b2d2:	4b1d      	ldr	r3, [pc, #116]	; (801b348 <USBD_LL_Init+0x124>)
 801b2d4:	2202      	movs	r2, #2
 801b2d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801b2d8:	4b1b      	ldr	r3, [pc, #108]	; (801b348 <USBD_LL_Init+0x124>)
 801b2da:	2200      	movs	r2, #0
 801b2dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801b2de:	4b1a      	ldr	r3, [pc, #104]	; (801b348 <USBD_LL_Init+0x124>)
 801b2e0:	2202      	movs	r2, #2
 801b2e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801b2e4:	4b18      	ldr	r3, [pc, #96]	; (801b348 <USBD_LL_Init+0x124>)
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801b2ea:	4b17      	ldr	r3, [pc, #92]	; (801b348 <USBD_LL_Init+0x124>)
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801b2f0:	4b15      	ldr	r3, [pc, #84]	; (801b348 <USBD_LL_Init+0x124>)
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801b2f6:	4b14      	ldr	r3, [pc, #80]	; (801b348 <USBD_LL_Init+0x124>)
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801b2fc:	4b12      	ldr	r3, [pc, #72]	; (801b348 <USBD_LL_Init+0x124>)
 801b2fe:	2200      	movs	r2, #0
 801b300:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801b302:	4b11      	ldr	r3, [pc, #68]	; (801b348 <USBD_LL_Init+0x124>)
 801b304:	2200      	movs	r2, #0
 801b306:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801b308:	480f      	ldr	r0, [pc, #60]	; (801b348 <USBD_LL_Init+0x124>)
 801b30a:	f7e7 ffbb 	bl	8003284 <HAL_PCD_Init>
 801b30e:	4603      	mov	r3, r0
 801b310:	2b00      	cmp	r3, #0
 801b312:	d001      	beq.n	801b318 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 801b314:	f7e5 fb44 	bl	80009a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801b318:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b31c:	480a      	ldr	r0, [pc, #40]	; (801b348 <USBD_LL_Init+0x124>)
 801b31e:	f7e9 fa12 	bl	8004746 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801b322:	2280      	movs	r2, #128	; 0x80
 801b324:	2100      	movs	r1, #0
 801b326:	4808      	ldr	r0, [pc, #32]	; (801b348 <USBD_LL_Init+0x124>)
 801b328:	f7e9 f9c6 	bl	80046b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801b32c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801b330:	2101      	movs	r1, #1
 801b332:	4805      	ldr	r0, [pc, #20]	; (801b348 <USBD_LL_Init+0x124>)
 801b334:	f7e9 f9c0 	bl	80046b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b338:	2300      	movs	r3, #0
}
 801b33a:	4618      	mov	r0, r3
 801b33c:	3708      	adds	r7, #8
 801b33e:	46bd      	mov	sp, r7
 801b340:	bd80      	pop	{r7, pc}
 801b342:	bf00      	nop
 801b344:	20009f2c 	.word	0x20009f2c
 801b348:	2000a410 	.word	0x2000a410
 801b34c:	40040000 	.word	0x40040000

0801b350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b084      	sub	sp, #16
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b358:	2300      	movs	r3, #0
 801b35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b35c:	2300      	movs	r3, #0
 801b35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b366:	4618      	mov	r0, r3
 801b368:	f7e8 f89b 	bl	80034a2 <HAL_PCD_Start>
 801b36c:	4603      	mov	r3, r0
 801b36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b370:	7bfb      	ldrb	r3, [r7, #15]
 801b372:	4618      	mov	r0, r3
 801b374:	f000 f962 	bl	801b63c <USBD_Get_USB_Status>
 801b378:	4603      	mov	r3, r0
 801b37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b37c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b37e:	4618      	mov	r0, r3
 801b380:	3710      	adds	r7, #16
 801b382:	46bd      	mov	sp, r7
 801b384:	bd80      	pop	{r7, pc}

0801b386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b386:	b580      	push	{r7, lr}
 801b388:	b084      	sub	sp, #16
 801b38a:	af00      	add	r7, sp, #0
 801b38c:	6078      	str	r0, [r7, #4]
 801b38e:	4608      	mov	r0, r1
 801b390:	4611      	mov	r1, r2
 801b392:	461a      	mov	r2, r3
 801b394:	4603      	mov	r3, r0
 801b396:	70fb      	strb	r3, [r7, #3]
 801b398:	460b      	mov	r3, r1
 801b39a:	70bb      	strb	r3, [r7, #2]
 801b39c:	4613      	mov	r3, r2
 801b39e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b3ae:	78bb      	ldrb	r3, [r7, #2]
 801b3b0:	883a      	ldrh	r2, [r7, #0]
 801b3b2:	78f9      	ldrb	r1, [r7, #3]
 801b3b4:	f7e8 fd6f 	bl	8003e96 <HAL_PCD_EP_Open>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b3bc:	7bfb      	ldrb	r3, [r7, #15]
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f000 f93c 	bl	801b63c <USBD_Get_USB_Status>
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	3710      	adds	r7, #16
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}

0801b3d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b3d2:	b580      	push	{r7, lr}
 801b3d4:	b084      	sub	sp, #16
 801b3d6:	af00      	add	r7, sp, #0
 801b3d8:	6078      	str	r0, [r7, #4]
 801b3da:	460b      	mov	r3, r1
 801b3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b3de:	2300      	movs	r3, #0
 801b3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b3ec:	78fa      	ldrb	r2, [r7, #3]
 801b3ee:	4611      	mov	r1, r2
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7e8 fdb8 	bl	8003f66 <HAL_PCD_EP_Close>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b3fa:	7bfb      	ldrb	r3, [r7, #15]
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f000 f91d 	bl	801b63c <USBD_Get_USB_Status>
 801b402:	4603      	mov	r3, r0
 801b404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b406:	7bbb      	ldrb	r3, [r7, #14]
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3710      	adds	r7, #16
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}

0801b410 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b084      	sub	sp, #16
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
 801b418:	460b      	mov	r3, r1
 801b41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b41c:	2300      	movs	r3, #0
 801b41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b420:	2300      	movs	r3, #0
 801b422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b42a:	78fa      	ldrb	r2, [r7, #3]
 801b42c:	4611      	mov	r1, r2
 801b42e:	4618      	mov	r0, r3
 801b430:	f7e8 ff5a 	bl	80042e8 <HAL_PCD_EP_Flush>
 801b434:	4603      	mov	r3, r0
 801b436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b438:	7bfb      	ldrb	r3, [r7, #15]
 801b43a:	4618      	mov	r0, r3
 801b43c:	f000 f8fe 	bl	801b63c <USBD_Get_USB_Status>
 801b440:	4603      	mov	r3, r0
 801b442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b444:	7bbb      	ldrb	r3, [r7, #14]
}
 801b446:	4618      	mov	r0, r3
 801b448:	3710      	adds	r7, #16
 801b44a:	46bd      	mov	sp, r7
 801b44c:	bd80      	pop	{r7, pc}

0801b44e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b44e:	b580      	push	{r7, lr}
 801b450:	b084      	sub	sp, #16
 801b452:	af00      	add	r7, sp, #0
 801b454:	6078      	str	r0, [r7, #4]
 801b456:	460b      	mov	r3, r1
 801b458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b45a:	2300      	movs	r3, #0
 801b45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b45e:	2300      	movs	r3, #0
 801b460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b468:	78fa      	ldrb	r2, [r7, #3]
 801b46a:	4611      	mov	r1, r2
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7e8 fe51 	bl	8004114 <HAL_PCD_EP_SetStall>
 801b472:	4603      	mov	r3, r0
 801b474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b476:	7bfb      	ldrb	r3, [r7, #15]
 801b478:	4618      	mov	r0, r3
 801b47a:	f000 f8df 	bl	801b63c <USBD_Get_USB_Status>
 801b47e:	4603      	mov	r3, r0
 801b480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b482:	7bbb      	ldrb	r3, [r7, #14]
}
 801b484:	4618      	mov	r0, r3
 801b486:	3710      	adds	r7, #16
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}

0801b48c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
 801b494:	460b      	mov	r3, r1
 801b496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b498:	2300      	movs	r3, #0
 801b49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b49c:	2300      	movs	r3, #0
 801b49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b4a6:	78fa      	ldrb	r2, [r7, #3]
 801b4a8:	4611      	mov	r1, r2
 801b4aa:	4618      	mov	r0, r3
 801b4ac:	f7e8 fe95 	bl	80041da <HAL_PCD_EP_ClrStall>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b4b4:	7bfb      	ldrb	r3, [r7, #15]
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f000 f8c0 	bl	801b63c <USBD_Get_USB_Status>
 801b4bc:	4603      	mov	r3, r0
 801b4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	3710      	adds	r7, #16
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	bd80      	pop	{r7, pc}

0801b4ca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b4ca:	b480      	push	{r7}
 801b4cc:	b085      	sub	sp, #20
 801b4ce:	af00      	add	r7, sp, #0
 801b4d0:	6078      	str	r0, [r7, #4]
 801b4d2:	460b      	mov	r3, r1
 801b4d4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b4dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b4de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	da0b      	bge.n	801b4fe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b4e6:	78fb      	ldrb	r3, [r7, #3]
 801b4e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b4ec:	68f9      	ldr	r1, [r7, #12]
 801b4ee:	4613      	mov	r3, r2
 801b4f0:	00db      	lsls	r3, r3, #3
 801b4f2:	4413      	add	r3, r2
 801b4f4:	009b      	lsls	r3, r3, #2
 801b4f6:	440b      	add	r3, r1
 801b4f8:	3316      	adds	r3, #22
 801b4fa:	781b      	ldrb	r3, [r3, #0]
 801b4fc:	e00b      	b.n	801b516 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b4fe:	78fb      	ldrb	r3, [r7, #3]
 801b500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b504:	68f9      	ldr	r1, [r7, #12]
 801b506:	4613      	mov	r3, r2
 801b508:	00db      	lsls	r3, r3, #3
 801b50a:	4413      	add	r3, r2
 801b50c:	009b      	lsls	r3, r3, #2
 801b50e:	440b      	add	r3, r1
 801b510:	f203 2356 	addw	r3, r3, #598	; 0x256
 801b514:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b516:	4618      	mov	r0, r3
 801b518:	3714      	adds	r7, #20
 801b51a:	46bd      	mov	sp, r7
 801b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b520:	4770      	bx	lr

0801b522 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b522:	b580      	push	{r7, lr}
 801b524:	b084      	sub	sp, #16
 801b526:	af00      	add	r7, sp, #0
 801b528:	6078      	str	r0, [r7, #4]
 801b52a:	460b      	mov	r3, r1
 801b52c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b52e:	2300      	movs	r3, #0
 801b530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b532:	2300      	movs	r3, #0
 801b534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b53c:	78fa      	ldrb	r2, [r7, #3]
 801b53e:	4611      	mov	r1, r2
 801b540:	4618      	mov	r0, r3
 801b542:	f7e8 fc84 	bl	8003e4e <HAL_PCD_SetAddress>
 801b546:	4603      	mov	r3, r0
 801b548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b54a:	7bfb      	ldrb	r3, [r7, #15]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f000 f875 	bl	801b63c <USBD_Get_USB_Status>
 801b552:	4603      	mov	r3, r0
 801b554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b556:	7bbb      	ldrb	r3, [r7, #14]
}
 801b558:	4618      	mov	r0, r3
 801b55a:	3710      	adds	r7, #16
 801b55c:	46bd      	mov	sp, r7
 801b55e:	bd80      	pop	{r7, pc}

0801b560 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b560:	b580      	push	{r7, lr}
 801b562:	b086      	sub	sp, #24
 801b564:	af00      	add	r7, sp, #0
 801b566:	60f8      	str	r0, [r7, #12]
 801b568:	607a      	str	r2, [r7, #4]
 801b56a:	603b      	str	r3, [r7, #0]
 801b56c:	460b      	mov	r3, r1
 801b56e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b570:	2300      	movs	r3, #0
 801b572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b574:	2300      	movs	r3, #0
 801b576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b57e:	7af9      	ldrb	r1, [r7, #11]
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	687a      	ldr	r2, [r7, #4]
 801b584:	f7e8 fd8c 	bl	80040a0 <HAL_PCD_EP_Transmit>
 801b588:	4603      	mov	r3, r0
 801b58a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b58c:	7dfb      	ldrb	r3, [r7, #23]
 801b58e:	4618      	mov	r0, r3
 801b590:	f000 f854 	bl	801b63c <USBD_Get_USB_Status>
 801b594:	4603      	mov	r3, r0
 801b596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b598:	7dbb      	ldrb	r3, [r7, #22]
}
 801b59a:	4618      	mov	r0, r3
 801b59c:	3718      	adds	r7, #24
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bd80      	pop	{r7, pc}

0801b5a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b5a2:	b580      	push	{r7, lr}
 801b5a4:	b086      	sub	sp, #24
 801b5a6:	af00      	add	r7, sp, #0
 801b5a8:	60f8      	str	r0, [r7, #12]
 801b5aa:	607a      	str	r2, [r7, #4]
 801b5ac:	603b      	str	r3, [r7, #0]
 801b5ae:	460b      	mov	r3, r1
 801b5b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b5c0:	7af9      	ldrb	r1, [r7, #11]
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	687a      	ldr	r2, [r7, #4]
 801b5c6:	f7e8 fd18 	bl	8003ffa <HAL_PCD_EP_Receive>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b5ce:	7dfb      	ldrb	r3, [r7, #23]
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f000 f833 	bl	801b63c <USBD_Get_USB_Status>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b5da:	7dbb      	ldrb	r3, [r7, #22]
}
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3718      	adds	r7, #24
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b082      	sub	sp, #8
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	460b      	mov	r3, r1
 801b5ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b5f6:	78fa      	ldrb	r2, [r7, #3]
 801b5f8:	4611      	mov	r1, r2
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7e8 fd38 	bl	8004070 <HAL_PCD_EP_GetRxCount>
 801b600:	4603      	mov	r3, r0
}
 801b602:	4618      	mov	r0, r3
 801b604:	3708      	adds	r7, #8
 801b606:	46bd      	mov	sp, r7
 801b608:	bd80      	pop	{r7, pc}
	...

0801b60c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b60c:	b480      	push	{r7}
 801b60e:	b083      	sub	sp, #12
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b614:	4b03      	ldr	r3, [pc, #12]	; (801b624 <USBD_static_malloc+0x18>)
}
 801b616:	4618      	mov	r0, r3
 801b618:	370c      	adds	r7, #12
 801b61a:	46bd      	mov	sp, r7
 801b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b620:	4770      	bx	lr
 801b622:	bf00      	nop
 801b624:	2000a8f4 	.word	0x2000a8f4

0801b628 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b628:	b480      	push	{r7}
 801b62a:	b083      	sub	sp, #12
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]

}
 801b630:	bf00      	nop
 801b632:	370c      	adds	r7, #12
 801b634:	46bd      	mov	sp, r7
 801b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63a:	4770      	bx	lr

0801b63c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b63c:	b480      	push	{r7}
 801b63e:	b085      	sub	sp, #20
 801b640:	af00      	add	r7, sp, #0
 801b642:	4603      	mov	r3, r0
 801b644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b646:	2300      	movs	r3, #0
 801b648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b64a:	79fb      	ldrb	r3, [r7, #7]
 801b64c:	2b03      	cmp	r3, #3
 801b64e:	d817      	bhi.n	801b680 <USBD_Get_USB_Status+0x44>
 801b650:	a201      	add	r2, pc, #4	; (adr r2, 801b658 <USBD_Get_USB_Status+0x1c>)
 801b652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b656:	bf00      	nop
 801b658:	0801b669 	.word	0x0801b669
 801b65c:	0801b66f 	.word	0x0801b66f
 801b660:	0801b675 	.word	0x0801b675
 801b664:	0801b67b 	.word	0x0801b67b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b668:	2300      	movs	r3, #0
 801b66a:	73fb      	strb	r3, [r7, #15]
    break;
 801b66c:	e00b      	b.n	801b686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b66e:	2303      	movs	r3, #3
 801b670:	73fb      	strb	r3, [r7, #15]
    break;
 801b672:	e008      	b.n	801b686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b674:	2301      	movs	r3, #1
 801b676:	73fb      	strb	r3, [r7, #15]
    break;
 801b678:	e005      	b.n	801b686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b67a:	2303      	movs	r3, #3
 801b67c:	73fb      	strb	r3, [r7, #15]
    break;
 801b67e:	e002      	b.n	801b686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b680:	2303      	movs	r3, #3
 801b682:	73fb      	strb	r3, [r7, #15]
    break;
 801b684:	bf00      	nop
  }
  return usb_status;
 801b686:	7bfb      	ldrb	r3, [r7, #15]
}
 801b688:	4618      	mov	r0, r3
 801b68a:	3714      	adds	r7, #20
 801b68c:	46bd      	mov	sp, r7
 801b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b692:	4770      	bx	lr

0801b694 <rand>:
 801b694:	4b16      	ldr	r3, [pc, #88]	; (801b6f0 <rand+0x5c>)
 801b696:	b510      	push	{r4, lr}
 801b698:	681c      	ldr	r4, [r3, #0]
 801b69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b69c:	b9b3      	cbnz	r3, 801b6cc <rand+0x38>
 801b69e:	2018      	movs	r0, #24
 801b6a0:	f000 fa4c 	bl	801bb3c <malloc>
 801b6a4:	4602      	mov	r2, r0
 801b6a6:	6320      	str	r0, [r4, #48]	; 0x30
 801b6a8:	b920      	cbnz	r0, 801b6b4 <rand+0x20>
 801b6aa:	4b12      	ldr	r3, [pc, #72]	; (801b6f4 <rand+0x60>)
 801b6ac:	4812      	ldr	r0, [pc, #72]	; (801b6f8 <rand+0x64>)
 801b6ae:	2152      	movs	r1, #82	; 0x52
 801b6b0:	f000 f9da 	bl	801ba68 <__assert_func>
 801b6b4:	4911      	ldr	r1, [pc, #68]	; (801b6fc <rand+0x68>)
 801b6b6:	4b12      	ldr	r3, [pc, #72]	; (801b700 <rand+0x6c>)
 801b6b8:	e9c0 1300 	strd	r1, r3, [r0]
 801b6bc:	4b11      	ldr	r3, [pc, #68]	; (801b704 <rand+0x70>)
 801b6be:	6083      	str	r3, [r0, #8]
 801b6c0:	230b      	movs	r3, #11
 801b6c2:	8183      	strh	r3, [r0, #12]
 801b6c4:	2100      	movs	r1, #0
 801b6c6:	2001      	movs	r0, #1
 801b6c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b6cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b6ce:	480e      	ldr	r0, [pc, #56]	; (801b708 <rand+0x74>)
 801b6d0:	690b      	ldr	r3, [r1, #16]
 801b6d2:	694c      	ldr	r4, [r1, #20]
 801b6d4:	4a0d      	ldr	r2, [pc, #52]	; (801b70c <rand+0x78>)
 801b6d6:	4358      	muls	r0, r3
 801b6d8:	fb02 0004 	mla	r0, r2, r4, r0
 801b6dc:	fba3 3202 	umull	r3, r2, r3, r2
 801b6e0:	3301      	adds	r3, #1
 801b6e2:	eb40 0002 	adc.w	r0, r0, r2
 801b6e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b6ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b6ee:	bd10      	pop	{r4, pc}
 801b6f0:	20000244 	.word	0x20000244
 801b6f4:	0801f37c 	.word	0x0801f37c
 801b6f8:	0801f393 	.word	0x0801f393
 801b6fc:	abcd330e 	.word	0xabcd330e
 801b700:	e66d1234 	.word	0xe66d1234
 801b704:	0005deec 	.word	0x0005deec
 801b708:	5851f42d 	.word	0x5851f42d
 801b70c:	4c957f2d 	.word	0x4c957f2d

0801b710 <std>:
 801b710:	2300      	movs	r3, #0
 801b712:	b510      	push	{r4, lr}
 801b714:	4604      	mov	r4, r0
 801b716:	e9c0 3300 	strd	r3, r3, [r0]
 801b71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b71e:	6083      	str	r3, [r0, #8]
 801b720:	8181      	strh	r1, [r0, #12]
 801b722:	6643      	str	r3, [r0, #100]	; 0x64
 801b724:	81c2      	strh	r2, [r0, #14]
 801b726:	6183      	str	r3, [r0, #24]
 801b728:	4619      	mov	r1, r3
 801b72a:	2208      	movs	r2, #8
 801b72c:	305c      	adds	r0, #92	; 0x5c
 801b72e:	f000 f916 	bl	801b95e <memset>
 801b732:	4b0d      	ldr	r3, [pc, #52]	; (801b768 <std+0x58>)
 801b734:	6263      	str	r3, [r4, #36]	; 0x24
 801b736:	4b0d      	ldr	r3, [pc, #52]	; (801b76c <std+0x5c>)
 801b738:	62a3      	str	r3, [r4, #40]	; 0x28
 801b73a:	4b0d      	ldr	r3, [pc, #52]	; (801b770 <std+0x60>)
 801b73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b73e:	4b0d      	ldr	r3, [pc, #52]	; (801b774 <std+0x64>)
 801b740:	6323      	str	r3, [r4, #48]	; 0x30
 801b742:	4b0d      	ldr	r3, [pc, #52]	; (801b778 <std+0x68>)
 801b744:	6224      	str	r4, [r4, #32]
 801b746:	429c      	cmp	r4, r3
 801b748:	d006      	beq.n	801b758 <std+0x48>
 801b74a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b74e:	4294      	cmp	r4, r2
 801b750:	d002      	beq.n	801b758 <std+0x48>
 801b752:	33d0      	adds	r3, #208	; 0xd0
 801b754:	429c      	cmp	r4, r3
 801b756:	d105      	bne.n	801b764 <std+0x54>
 801b758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b760:	f000 b970 	b.w	801ba44 <__retarget_lock_init_recursive>
 801b764:	bd10      	pop	{r4, pc}
 801b766:	bf00      	nop
 801b768:	0801b8b9 	.word	0x0801b8b9
 801b76c:	0801b8db 	.word	0x0801b8db
 801b770:	0801b913 	.word	0x0801b913
 801b774:	0801b937 	.word	0x0801b937
 801b778:	2000ab14 	.word	0x2000ab14

0801b77c <stdio_exit_handler>:
 801b77c:	4a02      	ldr	r2, [pc, #8]	; (801b788 <stdio_exit_handler+0xc>)
 801b77e:	4903      	ldr	r1, [pc, #12]	; (801b78c <stdio_exit_handler+0x10>)
 801b780:	4803      	ldr	r0, [pc, #12]	; (801b790 <stdio_exit_handler+0x14>)
 801b782:	f000 b869 	b.w	801b858 <_fwalk_sglue>
 801b786:	bf00      	nop
 801b788:	200001ec 	.word	0x200001ec
 801b78c:	0801c359 	.word	0x0801c359
 801b790:	200001f8 	.word	0x200001f8

0801b794 <cleanup_stdio>:
 801b794:	6841      	ldr	r1, [r0, #4]
 801b796:	4b0c      	ldr	r3, [pc, #48]	; (801b7c8 <cleanup_stdio+0x34>)
 801b798:	4299      	cmp	r1, r3
 801b79a:	b510      	push	{r4, lr}
 801b79c:	4604      	mov	r4, r0
 801b79e:	d001      	beq.n	801b7a4 <cleanup_stdio+0x10>
 801b7a0:	f000 fdda 	bl	801c358 <_fflush_r>
 801b7a4:	68a1      	ldr	r1, [r4, #8]
 801b7a6:	4b09      	ldr	r3, [pc, #36]	; (801b7cc <cleanup_stdio+0x38>)
 801b7a8:	4299      	cmp	r1, r3
 801b7aa:	d002      	beq.n	801b7b2 <cleanup_stdio+0x1e>
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f000 fdd3 	bl	801c358 <_fflush_r>
 801b7b2:	68e1      	ldr	r1, [r4, #12]
 801b7b4:	4b06      	ldr	r3, [pc, #24]	; (801b7d0 <cleanup_stdio+0x3c>)
 801b7b6:	4299      	cmp	r1, r3
 801b7b8:	d004      	beq.n	801b7c4 <cleanup_stdio+0x30>
 801b7ba:	4620      	mov	r0, r4
 801b7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7c0:	f000 bdca 	b.w	801c358 <_fflush_r>
 801b7c4:	bd10      	pop	{r4, pc}
 801b7c6:	bf00      	nop
 801b7c8:	2000ab14 	.word	0x2000ab14
 801b7cc:	2000ab7c 	.word	0x2000ab7c
 801b7d0:	2000abe4 	.word	0x2000abe4

0801b7d4 <global_stdio_init.part.0>:
 801b7d4:	b510      	push	{r4, lr}
 801b7d6:	4b0b      	ldr	r3, [pc, #44]	; (801b804 <global_stdio_init.part.0+0x30>)
 801b7d8:	4c0b      	ldr	r4, [pc, #44]	; (801b808 <global_stdio_init.part.0+0x34>)
 801b7da:	4a0c      	ldr	r2, [pc, #48]	; (801b80c <global_stdio_init.part.0+0x38>)
 801b7dc:	601a      	str	r2, [r3, #0]
 801b7de:	4620      	mov	r0, r4
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	2104      	movs	r1, #4
 801b7e4:	f7ff ff94 	bl	801b710 <std>
 801b7e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b7ec:	2201      	movs	r2, #1
 801b7ee:	2109      	movs	r1, #9
 801b7f0:	f7ff ff8e 	bl	801b710 <std>
 801b7f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b7f8:	2202      	movs	r2, #2
 801b7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7fe:	2112      	movs	r1, #18
 801b800:	f7ff bf86 	b.w	801b710 <std>
 801b804:	2000ac4c 	.word	0x2000ac4c
 801b808:	2000ab14 	.word	0x2000ab14
 801b80c:	0801b77d 	.word	0x0801b77d

0801b810 <__sfp_lock_acquire>:
 801b810:	4801      	ldr	r0, [pc, #4]	; (801b818 <__sfp_lock_acquire+0x8>)
 801b812:	f000 b918 	b.w	801ba46 <__retarget_lock_acquire_recursive>
 801b816:	bf00      	nop
 801b818:	2000ac55 	.word	0x2000ac55

0801b81c <__sfp_lock_release>:
 801b81c:	4801      	ldr	r0, [pc, #4]	; (801b824 <__sfp_lock_release+0x8>)
 801b81e:	f000 b913 	b.w	801ba48 <__retarget_lock_release_recursive>
 801b822:	bf00      	nop
 801b824:	2000ac55 	.word	0x2000ac55

0801b828 <__sinit>:
 801b828:	b510      	push	{r4, lr}
 801b82a:	4604      	mov	r4, r0
 801b82c:	f7ff fff0 	bl	801b810 <__sfp_lock_acquire>
 801b830:	6a23      	ldr	r3, [r4, #32]
 801b832:	b11b      	cbz	r3, 801b83c <__sinit+0x14>
 801b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b838:	f7ff bff0 	b.w	801b81c <__sfp_lock_release>
 801b83c:	4b04      	ldr	r3, [pc, #16]	; (801b850 <__sinit+0x28>)
 801b83e:	6223      	str	r3, [r4, #32]
 801b840:	4b04      	ldr	r3, [pc, #16]	; (801b854 <__sinit+0x2c>)
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d1f5      	bne.n	801b834 <__sinit+0xc>
 801b848:	f7ff ffc4 	bl	801b7d4 <global_stdio_init.part.0>
 801b84c:	e7f2      	b.n	801b834 <__sinit+0xc>
 801b84e:	bf00      	nop
 801b850:	0801b795 	.word	0x0801b795
 801b854:	2000ac4c 	.word	0x2000ac4c

0801b858 <_fwalk_sglue>:
 801b858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b85c:	4607      	mov	r7, r0
 801b85e:	4688      	mov	r8, r1
 801b860:	4614      	mov	r4, r2
 801b862:	2600      	movs	r6, #0
 801b864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b868:	f1b9 0901 	subs.w	r9, r9, #1
 801b86c:	d505      	bpl.n	801b87a <_fwalk_sglue+0x22>
 801b86e:	6824      	ldr	r4, [r4, #0]
 801b870:	2c00      	cmp	r4, #0
 801b872:	d1f7      	bne.n	801b864 <_fwalk_sglue+0xc>
 801b874:	4630      	mov	r0, r6
 801b876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b87a:	89ab      	ldrh	r3, [r5, #12]
 801b87c:	2b01      	cmp	r3, #1
 801b87e:	d907      	bls.n	801b890 <_fwalk_sglue+0x38>
 801b880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b884:	3301      	adds	r3, #1
 801b886:	d003      	beq.n	801b890 <_fwalk_sglue+0x38>
 801b888:	4629      	mov	r1, r5
 801b88a:	4638      	mov	r0, r7
 801b88c:	47c0      	blx	r8
 801b88e:	4306      	orrs	r6, r0
 801b890:	3568      	adds	r5, #104	; 0x68
 801b892:	e7e9      	b.n	801b868 <_fwalk_sglue+0x10>

0801b894 <iprintf>:
 801b894:	b40f      	push	{r0, r1, r2, r3}
 801b896:	b507      	push	{r0, r1, r2, lr}
 801b898:	4906      	ldr	r1, [pc, #24]	; (801b8b4 <iprintf+0x20>)
 801b89a:	ab04      	add	r3, sp, #16
 801b89c:	6808      	ldr	r0, [r1, #0]
 801b89e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8a2:	6881      	ldr	r1, [r0, #8]
 801b8a4:	9301      	str	r3, [sp, #4]
 801b8a6:	f000 fa27 	bl	801bcf8 <_vfiprintf_r>
 801b8aa:	b003      	add	sp, #12
 801b8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8b0:	b004      	add	sp, #16
 801b8b2:	4770      	bx	lr
 801b8b4:	20000244 	.word	0x20000244

0801b8b8 <__sread>:
 801b8b8:	b510      	push	{r4, lr}
 801b8ba:	460c      	mov	r4, r1
 801b8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8c0:	f000 f878 	bl	801b9b4 <_read_r>
 801b8c4:	2800      	cmp	r0, #0
 801b8c6:	bfab      	itete	ge
 801b8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b8ca:	89a3      	ldrhlt	r3, [r4, #12]
 801b8cc:	181b      	addge	r3, r3, r0
 801b8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b8d2:	bfac      	ite	ge
 801b8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b8d6:	81a3      	strhlt	r3, [r4, #12]
 801b8d8:	bd10      	pop	{r4, pc}

0801b8da <__swrite>:
 801b8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8de:	461f      	mov	r7, r3
 801b8e0:	898b      	ldrh	r3, [r1, #12]
 801b8e2:	05db      	lsls	r3, r3, #23
 801b8e4:	4605      	mov	r5, r0
 801b8e6:	460c      	mov	r4, r1
 801b8e8:	4616      	mov	r6, r2
 801b8ea:	d505      	bpl.n	801b8f8 <__swrite+0x1e>
 801b8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8f0:	2302      	movs	r3, #2
 801b8f2:	2200      	movs	r2, #0
 801b8f4:	f000 f84c 	bl	801b990 <_lseek_r>
 801b8f8:	89a3      	ldrh	r3, [r4, #12]
 801b8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b902:	81a3      	strh	r3, [r4, #12]
 801b904:	4632      	mov	r2, r6
 801b906:	463b      	mov	r3, r7
 801b908:	4628      	mov	r0, r5
 801b90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b90e:	f000 b863 	b.w	801b9d8 <_write_r>

0801b912 <__sseek>:
 801b912:	b510      	push	{r4, lr}
 801b914:	460c      	mov	r4, r1
 801b916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b91a:	f000 f839 	bl	801b990 <_lseek_r>
 801b91e:	1c43      	adds	r3, r0, #1
 801b920:	89a3      	ldrh	r3, [r4, #12]
 801b922:	bf15      	itete	ne
 801b924:	6560      	strne	r0, [r4, #84]	; 0x54
 801b926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b92e:	81a3      	strheq	r3, [r4, #12]
 801b930:	bf18      	it	ne
 801b932:	81a3      	strhne	r3, [r4, #12]
 801b934:	bd10      	pop	{r4, pc}

0801b936 <__sclose>:
 801b936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b93a:	f000 b819 	b.w	801b970 <_close_r>

0801b93e <memcmp>:
 801b93e:	b510      	push	{r4, lr}
 801b940:	3901      	subs	r1, #1
 801b942:	4402      	add	r2, r0
 801b944:	4290      	cmp	r0, r2
 801b946:	d101      	bne.n	801b94c <memcmp+0xe>
 801b948:	2000      	movs	r0, #0
 801b94a:	e005      	b.n	801b958 <memcmp+0x1a>
 801b94c:	7803      	ldrb	r3, [r0, #0]
 801b94e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b952:	42a3      	cmp	r3, r4
 801b954:	d001      	beq.n	801b95a <memcmp+0x1c>
 801b956:	1b18      	subs	r0, r3, r4
 801b958:	bd10      	pop	{r4, pc}
 801b95a:	3001      	adds	r0, #1
 801b95c:	e7f2      	b.n	801b944 <memcmp+0x6>

0801b95e <memset>:
 801b95e:	4402      	add	r2, r0
 801b960:	4603      	mov	r3, r0
 801b962:	4293      	cmp	r3, r2
 801b964:	d100      	bne.n	801b968 <memset+0xa>
 801b966:	4770      	bx	lr
 801b968:	f803 1b01 	strb.w	r1, [r3], #1
 801b96c:	e7f9      	b.n	801b962 <memset+0x4>
	...

0801b970 <_close_r>:
 801b970:	b538      	push	{r3, r4, r5, lr}
 801b972:	4d06      	ldr	r5, [pc, #24]	; (801b98c <_close_r+0x1c>)
 801b974:	2300      	movs	r3, #0
 801b976:	4604      	mov	r4, r0
 801b978:	4608      	mov	r0, r1
 801b97a:	602b      	str	r3, [r5, #0]
 801b97c:	f7e5 fa31 	bl	8000de2 <_close>
 801b980:	1c43      	adds	r3, r0, #1
 801b982:	d102      	bne.n	801b98a <_close_r+0x1a>
 801b984:	682b      	ldr	r3, [r5, #0]
 801b986:	b103      	cbz	r3, 801b98a <_close_r+0x1a>
 801b988:	6023      	str	r3, [r4, #0]
 801b98a:	bd38      	pop	{r3, r4, r5, pc}
 801b98c:	2000ac50 	.word	0x2000ac50

0801b990 <_lseek_r>:
 801b990:	b538      	push	{r3, r4, r5, lr}
 801b992:	4d07      	ldr	r5, [pc, #28]	; (801b9b0 <_lseek_r+0x20>)
 801b994:	4604      	mov	r4, r0
 801b996:	4608      	mov	r0, r1
 801b998:	4611      	mov	r1, r2
 801b99a:	2200      	movs	r2, #0
 801b99c:	602a      	str	r2, [r5, #0]
 801b99e:	461a      	mov	r2, r3
 801b9a0:	f7e5 fa46 	bl	8000e30 <_lseek>
 801b9a4:	1c43      	adds	r3, r0, #1
 801b9a6:	d102      	bne.n	801b9ae <_lseek_r+0x1e>
 801b9a8:	682b      	ldr	r3, [r5, #0]
 801b9aa:	b103      	cbz	r3, 801b9ae <_lseek_r+0x1e>
 801b9ac:	6023      	str	r3, [r4, #0]
 801b9ae:	bd38      	pop	{r3, r4, r5, pc}
 801b9b0:	2000ac50 	.word	0x2000ac50

0801b9b4 <_read_r>:
 801b9b4:	b538      	push	{r3, r4, r5, lr}
 801b9b6:	4d07      	ldr	r5, [pc, #28]	; (801b9d4 <_read_r+0x20>)
 801b9b8:	4604      	mov	r4, r0
 801b9ba:	4608      	mov	r0, r1
 801b9bc:	4611      	mov	r1, r2
 801b9be:	2200      	movs	r2, #0
 801b9c0:	602a      	str	r2, [r5, #0]
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	f7e5 f9d4 	bl	8000d70 <_read>
 801b9c8:	1c43      	adds	r3, r0, #1
 801b9ca:	d102      	bne.n	801b9d2 <_read_r+0x1e>
 801b9cc:	682b      	ldr	r3, [r5, #0]
 801b9ce:	b103      	cbz	r3, 801b9d2 <_read_r+0x1e>
 801b9d0:	6023      	str	r3, [r4, #0]
 801b9d2:	bd38      	pop	{r3, r4, r5, pc}
 801b9d4:	2000ac50 	.word	0x2000ac50

0801b9d8 <_write_r>:
 801b9d8:	b538      	push	{r3, r4, r5, lr}
 801b9da:	4d07      	ldr	r5, [pc, #28]	; (801b9f8 <_write_r+0x20>)
 801b9dc:	4604      	mov	r4, r0
 801b9de:	4608      	mov	r0, r1
 801b9e0:	4611      	mov	r1, r2
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	602a      	str	r2, [r5, #0]
 801b9e6:	461a      	mov	r2, r3
 801b9e8:	f7e5 f9df 	bl	8000daa <_write>
 801b9ec:	1c43      	adds	r3, r0, #1
 801b9ee:	d102      	bne.n	801b9f6 <_write_r+0x1e>
 801b9f0:	682b      	ldr	r3, [r5, #0]
 801b9f2:	b103      	cbz	r3, 801b9f6 <_write_r+0x1e>
 801b9f4:	6023      	str	r3, [r4, #0]
 801b9f6:	bd38      	pop	{r3, r4, r5, pc}
 801b9f8:	2000ac50 	.word	0x2000ac50

0801b9fc <__libc_init_array>:
 801b9fc:	b570      	push	{r4, r5, r6, lr}
 801b9fe:	4d0d      	ldr	r5, [pc, #52]	; (801ba34 <__libc_init_array+0x38>)
 801ba00:	4c0d      	ldr	r4, [pc, #52]	; (801ba38 <__libc_init_array+0x3c>)
 801ba02:	1b64      	subs	r4, r4, r5
 801ba04:	10a4      	asrs	r4, r4, #2
 801ba06:	2600      	movs	r6, #0
 801ba08:	42a6      	cmp	r6, r4
 801ba0a:	d109      	bne.n	801ba20 <__libc_init_array+0x24>
 801ba0c:	4d0b      	ldr	r5, [pc, #44]	; (801ba3c <__libc_init_array+0x40>)
 801ba0e:	4c0c      	ldr	r4, [pc, #48]	; (801ba40 <__libc_init_array+0x44>)
 801ba10:	f000 fe52 	bl	801c6b8 <_init>
 801ba14:	1b64      	subs	r4, r4, r5
 801ba16:	10a4      	asrs	r4, r4, #2
 801ba18:	2600      	movs	r6, #0
 801ba1a:	42a6      	cmp	r6, r4
 801ba1c:	d105      	bne.n	801ba2a <__libc_init_array+0x2e>
 801ba1e:	bd70      	pop	{r4, r5, r6, pc}
 801ba20:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba24:	4798      	blx	r3
 801ba26:	3601      	adds	r6, #1
 801ba28:	e7ee      	b.n	801ba08 <__libc_init_array+0xc>
 801ba2a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba2e:	4798      	blx	r3
 801ba30:	3601      	adds	r6, #1
 801ba32:	e7f2      	b.n	801ba1a <__libc_init_array+0x1e>
 801ba34:	0801f464 	.word	0x0801f464
 801ba38:	0801f464 	.word	0x0801f464
 801ba3c:	0801f464 	.word	0x0801f464
 801ba40:	0801f468 	.word	0x0801f468

0801ba44 <__retarget_lock_init_recursive>:
 801ba44:	4770      	bx	lr

0801ba46 <__retarget_lock_acquire_recursive>:
 801ba46:	4770      	bx	lr

0801ba48 <__retarget_lock_release_recursive>:
 801ba48:	4770      	bx	lr

0801ba4a <memcpy>:
 801ba4a:	440a      	add	r2, r1
 801ba4c:	4291      	cmp	r1, r2
 801ba4e:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba52:	d100      	bne.n	801ba56 <memcpy+0xc>
 801ba54:	4770      	bx	lr
 801ba56:	b510      	push	{r4, lr}
 801ba58:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba60:	4291      	cmp	r1, r2
 801ba62:	d1f9      	bne.n	801ba58 <memcpy+0xe>
 801ba64:	bd10      	pop	{r4, pc}
	...

0801ba68 <__assert_func>:
 801ba68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba6a:	4614      	mov	r4, r2
 801ba6c:	461a      	mov	r2, r3
 801ba6e:	4b09      	ldr	r3, [pc, #36]	; (801ba94 <__assert_func+0x2c>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	4605      	mov	r5, r0
 801ba74:	68d8      	ldr	r0, [r3, #12]
 801ba76:	b14c      	cbz	r4, 801ba8c <__assert_func+0x24>
 801ba78:	4b07      	ldr	r3, [pc, #28]	; (801ba98 <__assert_func+0x30>)
 801ba7a:	9100      	str	r1, [sp, #0]
 801ba7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba80:	4906      	ldr	r1, [pc, #24]	; (801ba9c <__assert_func+0x34>)
 801ba82:	462b      	mov	r3, r5
 801ba84:	f000 fc90 	bl	801c3a8 <fiprintf>
 801ba88:	f000 fd46 	bl	801c518 <abort>
 801ba8c:	4b04      	ldr	r3, [pc, #16]	; (801baa0 <__assert_func+0x38>)
 801ba8e:	461c      	mov	r4, r3
 801ba90:	e7f3      	b.n	801ba7a <__assert_func+0x12>
 801ba92:	bf00      	nop
 801ba94:	20000244 	.word	0x20000244
 801ba98:	0801f3eb 	.word	0x0801f3eb
 801ba9c:	0801f3f8 	.word	0x0801f3f8
 801baa0:	0801f426 	.word	0x0801f426

0801baa4 <_free_r>:
 801baa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801baa6:	2900      	cmp	r1, #0
 801baa8:	d044      	beq.n	801bb34 <_free_r+0x90>
 801baaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801baae:	9001      	str	r0, [sp, #4]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	f1a1 0404 	sub.w	r4, r1, #4
 801bab6:	bfb8      	it	lt
 801bab8:	18e4      	addlt	r4, r4, r3
 801baba:	f000 f8e7 	bl	801bc8c <__malloc_lock>
 801babe:	4a1e      	ldr	r2, [pc, #120]	; (801bb38 <_free_r+0x94>)
 801bac0:	9801      	ldr	r0, [sp, #4]
 801bac2:	6813      	ldr	r3, [r2, #0]
 801bac4:	b933      	cbnz	r3, 801bad4 <_free_r+0x30>
 801bac6:	6063      	str	r3, [r4, #4]
 801bac8:	6014      	str	r4, [r2, #0]
 801baca:	b003      	add	sp, #12
 801bacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bad0:	f000 b8e2 	b.w	801bc98 <__malloc_unlock>
 801bad4:	42a3      	cmp	r3, r4
 801bad6:	d908      	bls.n	801baea <_free_r+0x46>
 801bad8:	6825      	ldr	r5, [r4, #0]
 801bada:	1961      	adds	r1, r4, r5
 801badc:	428b      	cmp	r3, r1
 801bade:	bf01      	itttt	eq
 801bae0:	6819      	ldreq	r1, [r3, #0]
 801bae2:	685b      	ldreq	r3, [r3, #4]
 801bae4:	1949      	addeq	r1, r1, r5
 801bae6:	6021      	streq	r1, [r4, #0]
 801bae8:	e7ed      	b.n	801bac6 <_free_r+0x22>
 801baea:	461a      	mov	r2, r3
 801baec:	685b      	ldr	r3, [r3, #4]
 801baee:	b10b      	cbz	r3, 801baf4 <_free_r+0x50>
 801baf0:	42a3      	cmp	r3, r4
 801baf2:	d9fa      	bls.n	801baea <_free_r+0x46>
 801baf4:	6811      	ldr	r1, [r2, #0]
 801baf6:	1855      	adds	r5, r2, r1
 801baf8:	42a5      	cmp	r5, r4
 801bafa:	d10b      	bne.n	801bb14 <_free_r+0x70>
 801bafc:	6824      	ldr	r4, [r4, #0]
 801bafe:	4421      	add	r1, r4
 801bb00:	1854      	adds	r4, r2, r1
 801bb02:	42a3      	cmp	r3, r4
 801bb04:	6011      	str	r1, [r2, #0]
 801bb06:	d1e0      	bne.n	801baca <_free_r+0x26>
 801bb08:	681c      	ldr	r4, [r3, #0]
 801bb0a:	685b      	ldr	r3, [r3, #4]
 801bb0c:	6053      	str	r3, [r2, #4]
 801bb0e:	440c      	add	r4, r1
 801bb10:	6014      	str	r4, [r2, #0]
 801bb12:	e7da      	b.n	801baca <_free_r+0x26>
 801bb14:	d902      	bls.n	801bb1c <_free_r+0x78>
 801bb16:	230c      	movs	r3, #12
 801bb18:	6003      	str	r3, [r0, #0]
 801bb1a:	e7d6      	b.n	801baca <_free_r+0x26>
 801bb1c:	6825      	ldr	r5, [r4, #0]
 801bb1e:	1961      	adds	r1, r4, r5
 801bb20:	428b      	cmp	r3, r1
 801bb22:	bf04      	itt	eq
 801bb24:	6819      	ldreq	r1, [r3, #0]
 801bb26:	685b      	ldreq	r3, [r3, #4]
 801bb28:	6063      	str	r3, [r4, #4]
 801bb2a:	bf04      	itt	eq
 801bb2c:	1949      	addeq	r1, r1, r5
 801bb2e:	6021      	streq	r1, [r4, #0]
 801bb30:	6054      	str	r4, [r2, #4]
 801bb32:	e7ca      	b.n	801baca <_free_r+0x26>
 801bb34:	b003      	add	sp, #12
 801bb36:	bd30      	pop	{r4, r5, pc}
 801bb38:	2000ac58 	.word	0x2000ac58

0801bb3c <malloc>:
 801bb3c:	4b02      	ldr	r3, [pc, #8]	; (801bb48 <malloc+0xc>)
 801bb3e:	4601      	mov	r1, r0
 801bb40:	6818      	ldr	r0, [r3, #0]
 801bb42:	f000 b823 	b.w	801bb8c <_malloc_r>
 801bb46:	bf00      	nop
 801bb48:	20000244 	.word	0x20000244

0801bb4c <sbrk_aligned>:
 801bb4c:	b570      	push	{r4, r5, r6, lr}
 801bb4e:	4e0e      	ldr	r6, [pc, #56]	; (801bb88 <sbrk_aligned+0x3c>)
 801bb50:	460c      	mov	r4, r1
 801bb52:	6831      	ldr	r1, [r6, #0]
 801bb54:	4605      	mov	r5, r0
 801bb56:	b911      	cbnz	r1, 801bb5e <sbrk_aligned+0x12>
 801bb58:	f000 fcce 	bl	801c4f8 <_sbrk_r>
 801bb5c:	6030      	str	r0, [r6, #0]
 801bb5e:	4621      	mov	r1, r4
 801bb60:	4628      	mov	r0, r5
 801bb62:	f000 fcc9 	bl	801c4f8 <_sbrk_r>
 801bb66:	1c43      	adds	r3, r0, #1
 801bb68:	d00a      	beq.n	801bb80 <sbrk_aligned+0x34>
 801bb6a:	1cc4      	adds	r4, r0, #3
 801bb6c:	f024 0403 	bic.w	r4, r4, #3
 801bb70:	42a0      	cmp	r0, r4
 801bb72:	d007      	beq.n	801bb84 <sbrk_aligned+0x38>
 801bb74:	1a21      	subs	r1, r4, r0
 801bb76:	4628      	mov	r0, r5
 801bb78:	f000 fcbe 	bl	801c4f8 <_sbrk_r>
 801bb7c:	3001      	adds	r0, #1
 801bb7e:	d101      	bne.n	801bb84 <sbrk_aligned+0x38>
 801bb80:	f04f 34ff 	mov.w	r4, #4294967295
 801bb84:	4620      	mov	r0, r4
 801bb86:	bd70      	pop	{r4, r5, r6, pc}
 801bb88:	2000ac5c 	.word	0x2000ac5c

0801bb8c <_malloc_r>:
 801bb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb90:	1ccd      	adds	r5, r1, #3
 801bb92:	f025 0503 	bic.w	r5, r5, #3
 801bb96:	3508      	adds	r5, #8
 801bb98:	2d0c      	cmp	r5, #12
 801bb9a:	bf38      	it	cc
 801bb9c:	250c      	movcc	r5, #12
 801bb9e:	2d00      	cmp	r5, #0
 801bba0:	4607      	mov	r7, r0
 801bba2:	db01      	blt.n	801bba8 <_malloc_r+0x1c>
 801bba4:	42a9      	cmp	r1, r5
 801bba6:	d905      	bls.n	801bbb4 <_malloc_r+0x28>
 801bba8:	230c      	movs	r3, #12
 801bbaa:	603b      	str	r3, [r7, #0]
 801bbac:	2600      	movs	r6, #0
 801bbae:	4630      	mov	r0, r6
 801bbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bc88 <_malloc_r+0xfc>
 801bbb8:	f000 f868 	bl	801bc8c <__malloc_lock>
 801bbbc:	f8d8 3000 	ldr.w	r3, [r8]
 801bbc0:	461c      	mov	r4, r3
 801bbc2:	bb5c      	cbnz	r4, 801bc1c <_malloc_r+0x90>
 801bbc4:	4629      	mov	r1, r5
 801bbc6:	4638      	mov	r0, r7
 801bbc8:	f7ff ffc0 	bl	801bb4c <sbrk_aligned>
 801bbcc:	1c43      	adds	r3, r0, #1
 801bbce:	4604      	mov	r4, r0
 801bbd0:	d155      	bne.n	801bc7e <_malloc_r+0xf2>
 801bbd2:	f8d8 4000 	ldr.w	r4, [r8]
 801bbd6:	4626      	mov	r6, r4
 801bbd8:	2e00      	cmp	r6, #0
 801bbda:	d145      	bne.n	801bc68 <_malloc_r+0xdc>
 801bbdc:	2c00      	cmp	r4, #0
 801bbde:	d048      	beq.n	801bc72 <_malloc_r+0xe6>
 801bbe0:	6823      	ldr	r3, [r4, #0]
 801bbe2:	4631      	mov	r1, r6
 801bbe4:	4638      	mov	r0, r7
 801bbe6:	eb04 0903 	add.w	r9, r4, r3
 801bbea:	f000 fc85 	bl	801c4f8 <_sbrk_r>
 801bbee:	4581      	cmp	r9, r0
 801bbf0:	d13f      	bne.n	801bc72 <_malloc_r+0xe6>
 801bbf2:	6821      	ldr	r1, [r4, #0]
 801bbf4:	1a6d      	subs	r5, r5, r1
 801bbf6:	4629      	mov	r1, r5
 801bbf8:	4638      	mov	r0, r7
 801bbfa:	f7ff ffa7 	bl	801bb4c <sbrk_aligned>
 801bbfe:	3001      	adds	r0, #1
 801bc00:	d037      	beq.n	801bc72 <_malloc_r+0xe6>
 801bc02:	6823      	ldr	r3, [r4, #0]
 801bc04:	442b      	add	r3, r5
 801bc06:	6023      	str	r3, [r4, #0]
 801bc08:	f8d8 3000 	ldr.w	r3, [r8]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d038      	beq.n	801bc82 <_malloc_r+0xf6>
 801bc10:	685a      	ldr	r2, [r3, #4]
 801bc12:	42a2      	cmp	r2, r4
 801bc14:	d12b      	bne.n	801bc6e <_malloc_r+0xe2>
 801bc16:	2200      	movs	r2, #0
 801bc18:	605a      	str	r2, [r3, #4]
 801bc1a:	e00f      	b.n	801bc3c <_malloc_r+0xb0>
 801bc1c:	6822      	ldr	r2, [r4, #0]
 801bc1e:	1b52      	subs	r2, r2, r5
 801bc20:	d41f      	bmi.n	801bc62 <_malloc_r+0xd6>
 801bc22:	2a0b      	cmp	r2, #11
 801bc24:	d917      	bls.n	801bc56 <_malloc_r+0xca>
 801bc26:	1961      	adds	r1, r4, r5
 801bc28:	42a3      	cmp	r3, r4
 801bc2a:	6025      	str	r5, [r4, #0]
 801bc2c:	bf18      	it	ne
 801bc2e:	6059      	strne	r1, [r3, #4]
 801bc30:	6863      	ldr	r3, [r4, #4]
 801bc32:	bf08      	it	eq
 801bc34:	f8c8 1000 	streq.w	r1, [r8]
 801bc38:	5162      	str	r2, [r4, r5]
 801bc3a:	604b      	str	r3, [r1, #4]
 801bc3c:	4638      	mov	r0, r7
 801bc3e:	f104 060b 	add.w	r6, r4, #11
 801bc42:	f000 f829 	bl	801bc98 <__malloc_unlock>
 801bc46:	f026 0607 	bic.w	r6, r6, #7
 801bc4a:	1d23      	adds	r3, r4, #4
 801bc4c:	1af2      	subs	r2, r6, r3
 801bc4e:	d0ae      	beq.n	801bbae <_malloc_r+0x22>
 801bc50:	1b9b      	subs	r3, r3, r6
 801bc52:	50a3      	str	r3, [r4, r2]
 801bc54:	e7ab      	b.n	801bbae <_malloc_r+0x22>
 801bc56:	42a3      	cmp	r3, r4
 801bc58:	6862      	ldr	r2, [r4, #4]
 801bc5a:	d1dd      	bne.n	801bc18 <_malloc_r+0x8c>
 801bc5c:	f8c8 2000 	str.w	r2, [r8]
 801bc60:	e7ec      	b.n	801bc3c <_malloc_r+0xb0>
 801bc62:	4623      	mov	r3, r4
 801bc64:	6864      	ldr	r4, [r4, #4]
 801bc66:	e7ac      	b.n	801bbc2 <_malloc_r+0x36>
 801bc68:	4634      	mov	r4, r6
 801bc6a:	6876      	ldr	r6, [r6, #4]
 801bc6c:	e7b4      	b.n	801bbd8 <_malloc_r+0x4c>
 801bc6e:	4613      	mov	r3, r2
 801bc70:	e7cc      	b.n	801bc0c <_malloc_r+0x80>
 801bc72:	230c      	movs	r3, #12
 801bc74:	603b      	str	r3, [r7, #0]
 801bc76:	4638      	mov	r0, r7
 801bc78:	f000 f80e 	bl	801bc98 <__malloc_unlock>
 801bc7c:	e797      	b.n	801bbae <_malloc_r+0x22>
 801bc7e:	6025      	str	r5, [r4, #0]
 801bc80:	e7dc      	b.n	801bc3c <_malloc_r+0xb0>
 801bc82:	605b      	str	r3, [r3, #4]
 801bc84:	deff      	udf	#255	; 0xff
 801bc86:	bf00      	nop
 801bc88:	2000ac58 	.word	0x2000ac58

0801bc8c <__malloc_lock>:
 801bc8c:	4801      	ldr	r0, [pc, #4]	; (801bc94 <__malloc_lock+0x8>)
 801bc8e:	f7ff beda 	b.w	801ba46 <__retarget_lock_acquire_recursive>
 801bc92:	bf00      	nop
 801bc94:	2000ac54 	.word	0x2000ac54

0801bc98 <__malloc_unlock>:
 801bc98:	4801      	ldr	r0, [pc, #4]	; (801bca0 <__malloc_unlock+0x8>)
 801bc9a:	f7ff bed5 	b.w	801ba48 <__retarget_lock_release_recursive>
 801bc9e:	bf00      	nop
 801bca0:	2000ac54 	.word	0x2000ac54

0801bca4 <__sfputc_r>:
 801bca4:	6893      	ldr	r3, [r2, #8]
 801bca6:	3b01      	subs	r3, #1
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	b410      	push	{r4}
 801bcac:	6093      	str	r3, [r2, #8]
 801bcae:	da08      	bge.n	801bcc2 <__sfputc_r+0x1e>
 801bcb0:	6994      	ldr	r4, [r2, #24]
 801bcb2:	42a3      	cmp	r3, r4
 801bcb4:	db01      	blt.n	801bcba <__sfputc_r+0x16>
 801bcb6:	290a      	cmp	r1, #10
 801bcb8:	d103      	bne.n	801bcc2 <__sfputc_r+0x1e>
 801bcba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcbe:	f000 bb85 	b.w	801c3cc <__swbuf_r>
 801bcc2:	6813      	ldr	r3, [r2, #0]
 801bcc4:	1c58      	adds	r0, r3, #1
 801bcc6:	6010      	str	r0, [r2, #0]
 801bcc8:	7019      	strb	r1, [r3, #0]
 801bcca:	4608      	mov	r0, r1
 801bccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcd0:	4770      	bx	lr

0801bcd2 <__sfputs_r>:
 801bcd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcd4:	4606      	mov	r6, r0
 801bcd6:	460f      	mov	r7, r1
 801bcd8:	4614      	mov	r4, r2
 801bcda:	18d5      	adds	r5, r2, r3
 801bcdc:	42ac      	cmp	r4, r5
 801bcde:	d101      	bne.n	801bce4 <__sfputs_r+0x12>
 801bce0:	2000      	movs	r0, #0
 801bce2:	e007      	b.n	801bcf4 <__sfputs_r+0x22>
 801bce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bce8:	463a      	mov	r2, r7
 801bcea:	4630      	mov	r0, r6
 801bcec:	f7ff ffda 	bl	801bca4 <__sfputc_r>
 801bcf0:	1c43      	adds	r3, r0, #1
 801bcf2:	d1f3      	bne.n	801bcdc <__sfputs_r+0xa>
 801bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bcf8 <_vfiprintf_r>:
 801bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcfc:	460d      	mov	r5, r1
 801bcfe:	b09d      	sub	sp, #116	; 0x74
 801bd00:	4614      	mov	r4, r2
 801bd02:	4698      	mov	r8, r3
 801bd04:	4606      	mov	r6, r0
 801bd06:	b118      	cbz	r0, 801bd10 <_vfiprintf_r+0x18>
 801bd08:	6a03      	ldr	r3, [r0, #32]
 801bd0a:	b90b      	cbnz	r3, 801bd10 <_vfiprintf_r+0x18>
 801bd0c:	f7ff fd8c 	bl	801b828 <__sinit>
 801bd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd12:	07d9      	lsls	r1, r3, #31
 801bd14:	d405      	bmi.n	801bd22 <_vfiprintf_r+0x2a>
 801bd16:	89ab      	ldrh	r3, [r5, #12]
 801bd18:	059a      	lsls	r2, r3, #22
 801bd1a:	d402      	bmi.n	801bd22 <_vfiprintf_r+0x2a>
 801bd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd1e:	f7ff fe92 	bl	801ba46 <__retarget_lock_acquire_recursive>
 801bd22:	89ab      	ldrh	r3, [r5, #12]
 801bd24:	071b      	lsls	r3, r3, #28
 801bd26:	d501      	bpl.n	801bd2c <_vfiprintf_r+0x34>
 801bd28:	692b      	ldr	r3, [r5, #16]
 801bd2a:	b99b      	cbnz	r3, 801bd54 <_vfiprintf_r+0x5c>
 801bd2c:	4629      	mov	r1, r5
 801bd2e:	4630      	mov	r0, r6
 801bd30:	f000 fb8a 	bl	801c448 <__swsetup_r>
 801bd34:	b170      	cbz	r0, 801bd54 <_vfiprintf_r+0x5c>
 801bd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd38:	07dc      	lsls	r4, r3, #31
 801bd3a:	d504      	bpl.n	801bd46 <_vfiprintf_r+0x4e>
 801bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd40:	b01d      	add	sp, #116	; 0x74
 801bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd46:	89ab      	ldrh	r3, [r5, #12]
 801bd48:	0598      	lsls	r0, r3, #22
 801bd4a:	d4f7      	bmi.n	801bd3c <_vfiprintf_r+0x44>
 801bd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd4e:	f7ff fe7b 	bl	801ba48 <__retarget_lock_release_recursive>
 801bd52:	e7f3      	b.n	801bd3c <_vfiprintf_r+0x44>
 801bd54:	2300      	movs	r3, #0
 801bd56:	9309      	str	r3, [sp, #36]	; 0x24
 801bd58:	2320      	movs	r3, #32
 801bd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd62:	2330      	movs	r3, #48	; 0x30
 801bd64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bf18 <_vfiprintf_r+0x220>
 801bd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd6c:	f04f 0901 	mov.w	r9, #1
 801bd70:	4623      	mov	r3, r4
 801bd72:	469a      	mov	sl, r3
 801bd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd78:	b10a      	cbz	r2, 801bd7e <_vfiprintf_r+0x86>
 801bd7a:	2a25      	cmp	r2, #37	; 0x25
 801bd7c:	d1f9      	bne.n	801bd72 <_vfiprintf_r+0x7a>
 801bd7e:	ebba 0b04 	subs.w	fp, sl, r4
 801bd82:	d00b      	beq.n	801bd9c <_vfiprintf_r+0xa4>
 801bd84:	465b      	mov	r3, fp
 801bd86:	4622      	mov	r2, r4
 801bd88:	4629      	mov	r1, r5
 801bd8a:	4630      	mov	r0, r6
 801bd8c:	f7ff ffa1 	bl	801bcd2 <__sfputs_r>
 801bd90:	3001      	adds	r0, #1
 801bd92:	f000 80a9 	beq.w	801bee8 <_vfiprintf_r+0x1f0>
 801bd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd98:	445a      	add	r2, fp
 801bd9a:	9209      	str	r2, [sp, #36]	; 0x24
 801bd9c:	f89a 3000 	ldrb.w	r3, [sl]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	f000 80a1 	beq.w	801bee8 <_vfiprintf_r+0x1f0>
 801bda6:	2300      	movs	r3, #0
 801bda8:	f04f 32ff 	mov.w	r2, #4294967295
 801bdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bdb0:	f10a 0a01 	add.w	sl, sl, #1
 801bdb4:	9304      	str	r3, [sp, #16]
 801bdb6:	9307      	str	r3, [sp, #28]
 801bdb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdbc:	931a      	str	r3, [sp, #104]	; 0x68
 801bdbe:	4654      	mov	r4, sl
 801bdc0:	2205      	movs	r2, #5
 801bdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdc6:	4854      	ldr	r0, [pc, #336]	; (801bf18 <_vfiprintf_r+0x220>)
 801bdc8:	f7e4 fa02 	bl	80001d0 <memchr>
 801bdcc:	9a04      	ldr	r2, [sp, #16]
 801bdce:	b9d8      	cbnz	r0, 801be08 <_vfiprintf_r+0x110>
 801bdd0:	06d1      	lsls	r1, r2, #27
 801bdd2:	bf44      	itt	mi
 801bdd4:	2320      	movmi	r3, #32
 801bdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdda:	0713      	lsls	r3, r2, #28
 801bddc:	bf44      	itt	mi
 801bdde:	232b      	movmi	r3, #43	; 0x2b
 801bde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bde4:	f89a 3000 	ldrb.w	r3, [sl]
 801bde8:	2b2a      	cmp	r3, #42	; 0x2a
 801bdea:	d015      	beq.n	801be18 <_vfiprintf_r+0x120>
 801bdec:	9a07      	ldr	r2, [sp, #28]
 801bdee:	4654      	mov	r4, sl
 801bdf0:	2000      	movs	r0, #0
 801bdf2:	f04f 0c0a 	mov.w	ip, #10
 801bdf6:	4621      	mov	r1, r4
 801bdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdfc:	3b30      	subs	r3, #48	; 0x30
 801bdfe:	2b09      	cmp	r3, #9
 801be00:	d94d      	bls.n	801be9e <_vfiprintf_r+0x1a6>
 801be02:	b1b0      	cbz	r0, 801be32 <_vfiprintf_r+0x13a>
 801be04:	9207      	str	r2, [sp, #28]
 801be06:	e014      	b.n	801be32 <_vfiprintf_r+0x13a>
 801be08:	eba0 0308 	sub.w	r3, r0, r8
 801be0c:	fa09 f303 	lsl.w	r3, r9, r3
 801be10:	4313      	orrs	r3, r2
 801be12:	9304      	str	r3, [sp, #16]
 801be14:	46a2      	mov	sl, r4
 801be16:	e7d2      	b.n	801bdbe <_vfiprintf_r+0xc6>
 801be18:	9b03      	ldr	r3, [sp, #12]
 801be1a:	1d19      	adds	r1, r3, #4
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	9103      	str	r1, [sp, #12]
 801be20:	2b00      	cmp	r3, #0
 801be22:	bfbb      	ittet	lt
 801be24:	425b      	neglt	r3, r3
 801be26:	f042 0202 	orrlt.w	r2, r2, #2
 801be2a:	9307      	strge	r3, [sp, #28]
 801be2c:	9307      	strlt	r3, [sp, #28]
 801be2e:	bfb8      	it	lt
 801be30:	9204      	strlt	r2, [sp, #16]
 801be32:	7823      	ldrb	r3, [r4, #0]
 801be34:	2b2e      	cmp	r3, #46	; 0x2e
 801be36:	d10c      	bne.n	801be52 <_vfiprintf_r+0x15a>
 801be38:	7863      	ldrb	r3, [r4, #1]
 801be3a:	2b2a      	cmp	r3, #42	; 0x2a
 801be3c:	d134      	bne.n	801bea8 <_vfiprintf_r+0x1b0>
 801be3e:	9b03      	ldr	r3, [sp, #12]
 801be40:	1d1a      	adds	r2, r3, #4
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	9203      	str	r2, [sp, #12]
 801be46:	2b00      	cmp	r3, #0
 801be48:	bfb8      	it	lt
 801be4a:	f04f 33ff 	movlt.w	r3, #4294967295
 801be4e:	3402      	adds	r4, #2
 801be50:	9305      	str	r3, [sp, #20]
 801be52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bf28 <_vfiprintf_r+0x230>
 801be56:	7821      	ldrb	r1, [r4, #0]
 801be58:	2203      	movs	r2, #3
 801be5a:	4650      	mov	r0, sl
 801be5c:	f7e4 f9b8 	bl	80001d0 <memchr>
 801be60:	b138      	cbz	r0, 801be72 <_vfiprintf_r+0x17a>
 801be62:	9b04      	ldr	r3, [sp, #16]
 801be64:	eba0 000a 	sub.w	r0, r0, sl
 801be68:	2240      	movs	r2, #64	; 0x40
 801be6a:	4082      	lsls	r2, r0
 801be6c:	4313      	orrs	r3, r2
 801be6e:	3401      	adds	r4, #1
 801be70:	9304      	str	r3, [sp, #16]
 801be72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be76:	4829      	ldr	r0, [pc, #164]	; (801bf1c <_vfiprintf_r+0x224>)
 801be78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be7c:	2206      	movs	r2, #6
 801be7e:	f7e4 f9a7 	bl	80001d0 <memchr>
 801be82:	2800      	cmp	r0, #0
 801be84:	d03f      	beq.n	801bf06 <_vfiprintf_r+0x20e>
 801be86:	4b26      	ldr	r3, [pc, #152]	; (801bf20 <_vfiprintf_r+0x228>)
 801be88:	bb1b      	cbnz	r3, 801bed2 <_vfiprintf_r+0x1da>
 801be8a:	9b03      	ldr	r3, [sp, #12]
 801be8c:	3307      	adds	r3, #7
 801be8e:	f023 0307 	bic.w	r3, r3, #7
 801be92:	3308      	adds	r3, #8
 801be94:	9303      	str	r3, [sp, #12]
 801be96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be98:	443b      	add	r3, r7
 801be9a:	9309      	str	r3, [sp, #36]	; 0x24
 801be9c:	e768      	b.n	801bd70 <_vfiprintf_r+0x78>
 801be9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bea2:	460c      	mov	r4, r1
 801bea4:	2001      	movs	r0, #1
 801bea6:	e7a6      	b.n	801bdf6 <_vfiprintf_r+0xfe>
 801bea8:	2300      	movs	r3, #0
 801beaa:	3401      	adds	r4, #1
 801beac:	9305      	str	r3, [sp, #20]
 801beae:	4619      	mov	r1, r3
 801beb0:	f04f 0c0a 	mov.w	ip, #10
 801beb4:	4620      	mov	r0, r4
 801beb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801beba:	3a30      	subs	r2, #48	; 0x30
 801bebc:	2a09      	cmp	r2, #9
 801bebe:	d903      	bls.n	801bec8 <_vfiprintf_r+0x1d0>
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d0c6      	beq.n	801be52 <_vfiprintf_r+0x15a>
 801bec4:	9105      	str	r1, [sp, #20]
 801bec6:	e7c4      	b.n	801be52 <_vfiprintf_r+0x15a>
 801bec8:	fb0c 2101 	mla	r1, ip, r1, r2
 801becc:	4604      	mov	r4, r0
 801bece:	2301      	movs	r3, #1
 801bed0:	e7f0      	b.n	801beb4 <_vfiprintf_r+0x1bc>
 801bed2:	ab03      	add	r3, sp, #12
 801bed4:	9300      	str	r3, [sp, #0]
 801bed6:	462a      	mov	r2, r5
 801bed8:	4b12      	ldr	r3, [pc, #72]	; (801bf24 <_vfiprintf_r+0x22c>)
 801beda:	a904      	add	r1, sp, #16
 801bedc:	4630      	mov	r0, r6
 801bede:	f3af 8000 	nop.w
 801bee2:	4607      	mov	r7, r0
 801bee4:	1c78      	adds	r0, r7, #1
 801bee6:	d1d6      	bne.n	801be96 <_vfiprintf_r+0x19e>
 801bee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801beea:	07d9      	lsls	r1, r3, #31
 801beec:	d405      	bmi.n	801befa <_vfiprintf_r+0x202>
 801beee:	89ab      	ldrh	r3, [r5, #12]
 801bef0:	059a      	lsls	r2, r3, #22
 801bef2:	d402      	bmi.n	801befa <_vfiprintf_r+0x202>
 801bef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bef6:	f7ff fda7 	bl	801ba48 <__retarget_lock_release_recursive>
 801befa:	89ab      	ldrh	r3, [r5, #12]
 801befc:	065b      	lsls	r3, r3, #25
 801befe:	f53f af1d 	bmi.w	801bd3c <_vfiprintf_r+0x44>
 801bf02:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf04:	e71c      	b.n	801bd40 <_vfiprintf_r+0x48>
 801bf06:	ab03      	add	r3, sp, #12
 801bf08:	9300      	str	r3, [sp, #0]
 801bf0a:	462a      	mov	r2, r5
 801bf0c:	4b05      	ldr	r3, [pc, #20]	; (801bf24 <_vfiprintf_r+0x22c>)
 801bf0e:	a904      	add	r1, sp, #16
 801bf10:	4630      	mov	r0, r6
 801bf12:	f000 f879 	bl	801c008 <_printf_i>
 801bf16:	e7e4      	b.n	801bee2 <_vfiprintf_r+0x1ea>
 801bf18:	0801f427 	.word	0x0801f427
 801bf1c:	0801f431 	.word	0x0801f431
 801bf20:	00000000 	.word	0x00000000
 801bf24:	0801bcd3 	.word	0x0801bcd3
 801bf28:	0801f42d 	.word	0x0801f42d

0801bf2c <_printf_common>:
 801bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf30:	4616      	mov	r6, r2
 801bf32:	4699      	mov	r9, r3
 801bf34:	688a      	ldr	r2, [r1, #8]
 801bf36:	690b      	ldr	r3, [r1, #16]
 801bf38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf3c:	4293      	cmp	r3, r2
 801bf3e:	bfb8      	it	lt
 801bf40:	4613      	movlt	r3, r2
 801bf42:	6033      	str	r3, [r6, #0]
 801bf44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bf48:	4607      	mov	r7, r0
 801bf4a:	460c      	mov	r4, r1
 801bf4c:	b10a      	cbz	r2, 801bf52 <_printf_common+0x26>
 801bf4e:	3301      	adds	r3, #1
 801bf50:	6033      	str	r3, [r6, #0]
 801bf52:	6823      	ldr	r3, [r4, #0]
 801bf54:	0699      	lsls	r1, r3, #26
 801bf56:	bf42      	ittt	mi
 801bf58:	6833      	ldrmi	r3, [r6, #0]
 801bf5a:	3302      	addmi	r3, #2
 801bf5c:	6033      	strmi	r3, [r6, #0]
 801bf5e:	6825      	ldr	r5, [r4, #0]
 801bf60:	f015 0506 	ands.w	r5, r5, #6
 801bf64:	d106      	bne.n	801bf74 <_printf_common+0x48>
 801bf66:	f104 0a19 	add.w	sl, r4, #25
 801bf6a:	68e3      	ldr	r3, [r4, #12]
 801bf6c:	6832      	ldr	r2, [r6, #0]
 801bf6e:	1a9b      	subs	r3, r3, r2
 801bf70:	42ab      	cmp	r3, r5
 801bf72:	dc26      	bgt.n	801bfc2 <_printf_common+0x96>
 801bf74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bf78:	1e13      	subs	r3, r2, #0
 801bf7a:	6822      	ldr	r2, [r4, #0]
 801bf7c:	bf18      	it	ne
 801bf7e:	2301      	movne	r3, #1
 801bf80:	0692      	lsls	r2, r2, #26
 801bf82:	d42b      	bmi.n	801bfdc <_printf_common+0xb0>
 801bf84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf88:	4649      	mov	r1, r9
 801bf8a:	4638      	mov	r0, r7
 801bf8c:	47c0      	blx	r8
 801bf8e:	3001      	adds	r0, #1
 801bf90:	d01e      	beq.n	801bfd0 <_printf_common+0xa4>
 801bf92:	6823      	ldr	r3, [r4, #0]
 801bf94:	6922      	ldr	r2, [r4, #16]
 801bf96:	f003 0306 	and.w	r3, r3, #6
 801bf9a:	2b04      	cmp	r3, #4
 801bf9c:	bf02      	ittt	eq
 801bf9e:	68e5      	ldreq	r5, [r4, #12]
 801bfa0:	6833      	ldreq	r3, [r6, #0]
 801bfa2:	1aed      	subeq	r5, r5, r3
 801bfa4:	68a3      	ldr	r3, [r4, #8]
 801bfa6:	bf0c      	ite	eq
 801bfa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bfac:	2500      	movne	r5, #0
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	bfc4      	itt	gt
 801bfb2:	1a9b      	subgt	r3, r3, r2
 801bfb4:	18ed      	addgt	r5, r5, r3
 801bfb6:	2600      	movs	r6, #0
 801bfb8:	341a      	adds	r4, #26
 801bfba:	42b5      	cmp	r5, r6
 801bfbc:	d11a      	bne.n	801bff4 <_printf_common+0xc8>
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	e008      	b.n	801bfd4 <_printf_common+0xa8>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	4652      	mov	r2, sl
 801bfc6:	4649      	mov	r1, r9
 801bfc8:	4638      	mov	r0, r7
 801bfca:	47c0      	blx	r8
 801bfcc:	3001      	adds	r0, #1
 801bfce:	d103      	bne.n	801bfd8 <_printf_common+0xac>
 801bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfd8:	3501      	adds	r5, #1
 801bfda:	e7c6      	b.n	801bf6a <_printf_common+0x3e>
 801bfdc:	18e1      	adds	r1, r4, r3
 801bfde:	1c5a      	adds	r2, r3, #1
 801bfe0:	2030      	movs	r0, #48	; 0x30
 801bfe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bfe6:	4422      	add	r2, r4
 801bfe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bfec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bff0:	3302      	adds	r3, #2
 801bff2:	e7c7      	b.n	801bf84 <_printf_common+0x58>
 801bff4:	2301      	movs	r3, #1
 801bff6:	4622      	mov	r2, r4
 801bff8:	4649      	mov	r1, r9
 801bffa:	4638      	mov	r0, r7
 801bffc:	47c0      	blx	r8
 801bffe:	3001      	adds	r0, #1
 801c000:	d0e6      	beq.n	801bfd0 <_printf_common+0xa4>
 801c002:	3601      	adds	r6, #1
 801c004:	e7d9      	b.n	801bfba <_printf_common+0x8e>
	...

0801c008 <_printf_i>:
 801c008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c00c:	7e0f      	ldrb	r7, [r1, #24]
 801c00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c010:	2f78      	cmp	r7, #120	; 0x78
 801c012:	4691      	mov	r9, r2
 801c014:	4680      	mov	r8, r0
 801c016:	460c      	mov	r4, r1
 801c018:	469a      	mov	sl, r3
 801c01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c01e:	d807      	bhi.n	801c030 <_printf_i+0x28>
 801c020:	2f62      	cmp	r7, #98	; 0x62
 801c022:	d80a      	bhi.n	801c03a <_printf_i+0x32>
 801c024:	2f00      	cmp	r7, #0
 801c026:	f000 80d4 	beq.w	801c1d2 <_printf_i+0x1ca>
 801c02a:	2f58      	cmp	r7, #88	; 0x58
 801c02c:	f000 80c0 	beq.w	801c1b0 <_printf_i+0x1a8>
 801c030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c038:	e03a      	b.n	801c0b0 <_printf_i+0xa8>
 801c03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c03e:	2b15      	cmp	r3, #21
 801c040:	d8f6      	bhi.n	801c030 <_printf_i+0x28>
 801c042:	a101      	add	r1, pc, #4	; (adr r1, 801c048 <_printf_i+0x40>)
 801c044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c048:	0801c0a1 	.word	0x0801c0a1
 801c04c:	0801c0b5 	.word	0x0801c0b5
 801c050:	0801c031 	.word	0x0801c031
 801c054:	0801c031 	.word	0x0801c031
 801c058:	0801c031 	.word	0x0801c031
 801c05c:	0801c031 	.word	0x0801c031
 801c060:	0801c0b5 	.word	0x0801c0b5
 801c064:	0801c031 	.word	0x0801c031
 801c068:	0801c031 	.word	0x0801c031
 801c06c:	0801c031 	.word	0x0801c031
 801c070:	0801c031 	.word	0x0801c031
 801c074:	0801c1b9 	.word	0x0801c1b9
 801c078:	0801c0e1 	.word	0x0801c0e1
 801c07c:	0801c173 	.word	0x0801c173
 801c080:	0801c031 	.word	0x0801c031
 801c084:	0801c031 	.word	0x0801c031
 801c088:	0801c1db 	.word	0x0801c1db
 801c08c:	0801c031 	.word	0x0801c031
 801c090:	0801c0e1 	.word	0x0801c0e1
 801c094:	0801c031 	.word	0x0801c031
 801c098:	0801c031 	.word	0x0801c031
 801c09c:	0801c17b 	.word	0x0801c17b
 801c0a0:	682b      	ldr	r3, [r5, #0]
 801c0a2:	1d1a      	adds	r2, r3, #4
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	602a      	str	r2, [r5, #0]
 801c0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c0b0:	2301      	movs	r3, #1
 801c0b2:	e09f      	b.n	801c1f4 <_printf_i+0x1ec>
 801c0b4:	6820      	ldr	r0, [r4, #0]
 801c0b6:	682b      	ldr	r3, [r5, #0]
 801c0b8:	0607      	lsls	r7, r0, #24
 801c0ba:	f103 0104 	add.w	r1, r3, #4
 801c0be:	6029      	str	r1, [r5, #0]
 801c0c0:	d501      	bpl.n	801c0c6 <_printf_i+0xbe>
 801c0c2:	681e      	ldr	r6, [r3, #0]
 801c0c4:	e003      	b.n	801c0ce <_printf_i+0xc6>
 801c0c6:	0646      	lsls	r6, r0, #25
 801c0c8:	d5fb      	bpl.n	801c0c2 <_printf_i+0xba>
 801c0ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c0ce:	2e00      	cmp	r6, #0
 801c0d0:	da03      	bge.n	801c0da <_printf_i+0xd2>
 801c0d2:	232d      	movs	r3, #45	; 0x2d
 801c0d4:	4276      	negs	r6, r6
 801c0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c0da:	485a      	ldr	r0, [pc, #360]	; (801c244 <_printf_i+0x23c>)
 801c0dc:	230a      	movs	r3, #10
 801c0de:	e012      	b.n	801c106 <_printf_i+0xfe>
 801c0e0:	682b      	ldr	r3, [r5, #0]
 801c0e2:	6820      	ldr	r0, [r4, #0]
 801c0e4:	1d19      	adds	r1, r3, #4
 801c0e6:	6029      	str	r1, [r5, #0]
 801c0e8:	0605      	lsls	r5, r0, #24
 801c0ea:	d501      	bpl.n	801c0f0 <_printf_i+0xe8>
 801c0ec:	681e      	ldr	r6, [r3, #0]
 801c0ee:	e002      	b.n	801c0f6 <_printf_i+0xee>
 801c0f0:	0641      	lsls	r1, r0, #25
 801c0f2:	d5fb      	bpl.n	801c0ec <_printf_i+0xe4>
 801c0f4:	881e      	ldrh	r6, [r3, #0]
 801c0f6:	4853      	ldr	r0, [pc, #332]	; (801c244 <_printf_i+0x23c>)
 801c0f8:	2f6f      	cmp	r7, #111	; 0x6f
 801c0fa:	bf0c      	ite	eq
 801c0fc:	2308      	moveq	r3, #8
 801c0fe:	230a      	movne	r3, #10
 801c100:	2100      	movs	r1, #0
 801c102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c106:	6865      	ldr	r5, [r4, #4]
 801c108:	60a5      	str	r5, [r4, #8]
 801c10a:	2d00      	cmp	r5, #0
 801c10c:	bfa2      	ittt	ge
 801c10e:	6821      	ldrge	r1, [r4, #0]
 801c110:	f021 0104 	bicge.w	r1, r1, #4
 801c114:	6021      	strge	r1, [r4, #0]
 801c116:	b90e      	cbnz	r6, 801c11c <_printf_i+0x114>
 801c118:	2d00      	cmp	r5, #0
 801c11a:	d04b      	beq.n	801c1b4 <_printf_i+0x1ac>
 801c11c:	4615      	mov	r5, r2
 801c11e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c122:	fb03 6711 	mls	r7, r3, r1, r6
 801c126:	5dc7      	ldrb	r7, [r0, r7]
 801c128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c12c:	4637      	mov	r7, r6
 801c12e:	42bb      	cmp	r3, r7
 801c130:	460e      	mov	r6, r1
 801c132:	d9f4      	bls.n	801c11e <_printf_i+0x116>
 801c134:	2b08      	cmp	r3, #8
 801c136:	d10b      	bne.n	801c150 <_printf_i+0x148>
 801c138:	6823      	ldr	r3, [r4, #0]
 801c13a:	07de      	lsls	r6, r3, #31
 801c13c:	d508      	bpl.n	801c150 <_printf_i+0x148>
 801c13e:	6923      	ldr	r3, [r4, #16]
 801c140:	6861      	ldr	r1, [r4, #4]
 801c142:	4299      	cmp	r1, r3
 801c144:	bfde      	ittt	le
 801c146:	2330      	movle	r3, #48	; 0x30
 801c148:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c14c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c150:	1b52      	subs	r2, r2, r5
 801c152:	6122      	str	r2, [r4, #16]
 801c154:	f8cd a000 	str.w	sl, [sp]
 801c158:	464b      	mov	r3, r9
 801c15a:	aa03      	add	r2, sp, #12
 801c15c:	4621      	mov	r1, r4
 801c15e:	4640      	mov	r0, r8
 801c160:	f7ff fee4 	bl	801bf2c <_printf_common>
 801c164:	3001      	adds	r0, #1
 801c166:	d14a      	bne.n	801c1fe <_printf_i+0x1f6>
 801c168:	f04f 30ff 	mov.w	r0, #4294967295
 801c16c:	b004      	add	sp, #16
 801c16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c172:	6823      	ldr	r3, [r4, #0]
 801c174:	f043 0320 	orr.w	r3, r3, #32
 801c178:	6023      	str	r3, [r4, #0]
 801c17a:	4833      	ldr	r0, [pc, #204]	; (801c248 <_printf_i+0x240>)
 801c17c:	2778      	movs	r7, #120	; 0x78
 801c17e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c182:	6823      	ldr	r3, [r4, #0]
 801c184:	6829      	ldr	r1, [r5, #0]
 801c186:	061f      	lsls	r7, r3, #24
 801c188:	f851 6b04 	ldr.w	r6, [r1], #4
 801c18c:	d402      	bmi.n	801c194 <_printf_i+0x18c>
 801c18e:	065f      	lsls	r7, r3, #25
 801c190:	bf48      	it	mi
 801c192:	b2b6      	uxthmi	r6, r6
 801c194:	07df      	lsls	r7, r3, #31
 801c196:	bf48      	it	mi
 801c198:	f043 0320 	orrmi.w	r3, r3, #32
 801c19c:	6029      	str	r1, [r5, #0]
 801c19e:	bf48      	it	mi
 801c1a0:	6023      	strmi	r3, [r4, #0]
 801c1a2:	b91e      	cbnz	r6, 801c1ac <_printf_i+0x1a4>
 801c1a4:	6823      	ldr	r3, [r4, #0]
 801c1a6:	f023 0320 	bic.w	r3, r3, #32
 801c1aa:	6023      	str	r3, [r4, #0]
 801c1ac:	2310      	movs	r3, #16
 801c1ae:	e7a7      	b.n	801c100 <_printf_i+0xf8>
 801c1b0:	4824      	ldr	r0, [pc, #144]	; (801c244 <_printf_i+0x23c>)
 801c1b2:	e7e4      	b.n	801c17e <_printf_i+0x176>
 801c1b4:	4615      	mov	r5, r2
 801c1b6:	e7bd      	b.n	801c134 <_printf_i+0x12c>
 801c1b8:	682b      	ldr	r3, [r5, #0]
 801c1ba:	6826      	ldr	r6, [r4, #0]
 801c1bc:	6961      	ldr	r1, [r4, #20]
 801c1be:	1d18      	adds	r0, r3, #4
 801c1c0:	6028      	str	r0, [r5, #0]
 801c1c2:	0635      	lsls	r5, r6, #24
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	d501      	bpl.n	801c1cc <_printf_i+0x1c4>
 801c1c8:	6019      	str	r1, [r3, #0]
 801c1ca:	e002      	b.n	801c1d2 <_printf_i+0x1ca>
 801c1cc:	0670      	lsls	r0, r6, #25
 801c1ce:	d5fb      	bpl.n	801c1c8 <_printf_i+0x1c0>
 801c1d0:	8019      	strh	r1, [r3, #0]
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	6123      	str	r3, [r4, #16]
 801c1d6:	4615      	mov	r5, r2
 801c1d8:	e7bc      	b.n	801c154 <_printf_i+0x14c>
 801c1da:	682b      	ldr	r3, [r5, #0]
 801c1dc:	1d1a      	adds	r2, r3, #4
 801c1de:	602a      	str	r2, [r5, #0]
 801c1e0:	681d      	ldr	r5, [r3, #0]
 801c1e2:	6862      	ldr	r2, [r4, #4]
 801c1e4:	2100      	movs	r1, #0
 801c1e6:	4628      	mov	r0, r5
 801c1e8:	f7e3 fff2 	bl	80001d0 <memchr>
 801c1ec:	b108      	cbz	r0, 801c1f2 <_printf_i+0x1ea>
 801c1ee:	1b40      	subs	r0, r0, r5
 801c1f0:	6060      	str	r0, [r4, #4]
 801c1f2:	6863      	ldr	r3, [r4, #4]
 801c1f4:	6123      	str	r3, [r4, #16]
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1fc:	e7aa      	b.n	801c154 <_printf_i+0x14c>
 801c1fe:	6923      	ldr	r3, [r4, #16]
 801c200:	462a      	mov	r2, r5
 801c202:	4649      	mov	r1, r9
 801c204:	4640      	mov	r0, r8
 801c206:	47d0      	blx	sl
 801c208:	3001      	adds	r0, #1
 801c20a:	d0ad      	beq.n	801c168 <_printf_i+0x160>
 801c20c:	6823      	ldr	r3, [r4, #0]
 801c20e:	079b      	lsls	r3, r3, #30
 801c210:	d413      	bmi.n	801c23a <_printf_i+0x232>
 801c212:	68e0      	ldr	r0, [r4, #12]
 801c214:	9b03      	ldr	r3, [sp, #12]
 801c216:	4298      	cmp	r0, r3
 801c218:	bfb8      	it	lt
 801c21a:	4618      	movlt	r0, r3
 801c21c:	e7a6      	b.n	801c16c <_printf_i+0x164>
 801c21e:	2301      	movs	r3, #1
 801c220:	4632      	mov	r2, r6
 801c222:	4649      	mov	r1, r9
 801c224:	4640      	mov	r0, r8
 801c226:	47d0      	blx	sl
 801c228:	3001      	adds	r0, #1
 801c22a:	d09d      	beq.n	801c168 <_printf_i+0x160>
 801c22c:	3501      	adds	r5, #1
 801c22e:	68e3      	ldr	r3, [r4, #12]
 801c230:	9903      	ldr	r1, [sp, #12]
 801c232:	1a5b      	subs	r3, r3, r1
 801c234:	42ab      	cmp	r3, r5
 801c236:	dcf2      	bgt.n	801c21e <_printf_i+0x216>
 801c238:	e7eb      	b.n	801c212 <_printf_i+0x20a>
 801c23a:	2500      	movs	r5, #0
 801c23c:	f104 0619 	add.w	r6, r4, #25
 801c240:	e7f5      	b.n	801c22e <_printf_i+0x226>
 801c242:	bf00      	nop
 801c244:	0801f438 	.word	0x0801f438
 801c248:	0801f449 	.word	0x0801f449

0801c24c <__sflush_r>:
 801c24c:	898a      	ldrh	r2, [r1, #12]
 801c24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c252:	4605      	mov	r5, r0
 801c254:	0710      	lsls	r0, r2, #28
 801c256:	460c      	mov	r4, r1
 801c258:	d458      	bmi.n	801c30c <__sflush_r+0xc0>
 801c25a:	684b      	ldr	r3, [r1, #4]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	dc05      	bgt.n	801c26c <__sflush_r+0x20>
 801c260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c262:	2b00      	cmp	r3, #0
 801c264:	dc02      	bgt.n	801c26c <__sflush_r+0x20>
 801c266:	2000      	movs	r0, #0
 801c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c26c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c26e:	2e00      	cmp	r6, #0
 801c270:	d0f9      	beq.n	801c266 <__sflush_r+0x1a>
 801c272:	2300      	movs	r3, #0
 801c274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c278:	682f      	ldr	r7, [r5, #0]
 801c27a:	6a21      	ldr	r1, [r4, #32]
 801c27c:	602b      	str	r3, [r5, #0]
 801c27e:	d032      	beq.n	801c2e6 <__sflush_r+0x9a>
 801c280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c282:	89a3      	ldrh	r3, [r4, #12]
 801c284:	075a      	lsls	r2, r3, #29
 801c286:	d505      	bpl.n	801c294 <__sflush_r+0x48>
 801c288:	6863      	ldr	r3, [r4, #4]
 801c28a:	1ac0      	subs	r0, r0, r3
 801c28c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c28e:	b10b      	cbz	r3, 801c294 <__sflush_r+0x48>
 801c290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c292:	1ac0      	subs	r0, r0, r3
 801c294:	2300      	movs	r3, #0
 801c296:	4602      	mov	r2, r0
 801c298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c29a:	6a21      	ldr	r1, [r4, #32]
 801c29c:	4628      	mov	r0, r5
 801c29e:	47b0      	blx	r6
 801c2a0:	1c43      	adds	r3, r0, #1
 801c2a2:	89a3      	ldrh	r3, [r4, #12]
 801c2a4:	d106      	bne.n	801c2b4 <__sflush_r+0x68>
 801c2a6:	6829      	ldr	r1, [r5, #0]
 801c2a8:	291d      	cmp	r1, #29
 801c2aa:	d82b      	bhi.n	801c304 <__sflush_r+0xb8>
 801c2ac:	4a29      	ldr	r2, [pc, #164]	; (801c354 <__sflush_r+0x108>)
 801c2ae:	410a      	asrs	r2, r1
 801c2b0:	07d6      	lsls	r6, r2, #31
 801c2b2:	d427      	bmi.n	801c304 <__sflush_r+0xb8>
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	6062      	str	r2, [r4, #4]
 801c2b8:	04d9      	lsls	r1, r3, #19
 801c2ba:	6922      	ldr	r2, [r4, #16]
 801c2bc:	6022      	str	r2, [r4, #0]
 801c2be:	d504      	bpl.n	801c2ca <__sflush_r+0x7e>
 801c2c0:	1c42      	adds	r2, r0, #1
 801c2c2:	d101      	bne.n	801c2c8 <__sflush_r+0x7c>
 801c2c4:	682b      	ldr	r3, [r5, #0]
 801c2c6:	b903      	cbnz	r3, 801c2ca <__sflush_r+0x7e>
 801c2c8:	6560      	str	r0, [r4, #84]	; 0x54
 801c2ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c2cc:	602f      	str	r7, [r5, #0]
 801c2ce:	2900      	cmp	r1, #0
 801c2d0:	d0c9      	beq.n	801c266 <__sflush_r+0x1a>
 801c2d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c2d6:	4299      	cmp	r1, r3
 801c2d8:	d002      	beq.n	801c2e0 <__sflush_r+0x94>
 801c2da:	4628      	mov	r0, r5
 801c2dc:	f7ff fbe2 	bl	801baa4 <_free_r>
 801c2e0:	2000      	movs	r0, #0
 801c2e2:	6360      	str	r0, [r4, #52]	; 0x34
 801c2e4:	e7c0      	b.n	801c268 <__sflush_r+0x1c>
 801c2e6:	2301      	movs	r3, #1
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	47b0      	blx	r6
 801c2ec:	1c41      	adds	r1, r0, #1
 801c2ee:	d1c8      	bne.n	801c282 <__sflush_r+0x36>
 801c2f0:	682b      	ldr	r3, [r5, #0]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d0c5      	beq.n	801c282 <__sflush_r+0x36>
 801c2f6:	2b1d      	cmp	r3, #29
 801c2f8:	d001      	beq.n	801c2fe <__sflush_r+0xb2>
 801c2fa:	2b16      	cmp	r3, #22
 801c2fc:	d101      	bne.n	801c302 <__sflush_r+0xb6>
 801c2fe:	602f      	str	r7, [r5, #0]
 801c300:	e7b1      	b.n	801c266 <__sflush_r+0x1a>
 801c302:	89a3      	ldrh	r3, [r4, #12]
 801c304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c308:	81a3      	strh	r3, [r4, #12]
 801c30a:	e7ad      	b.n	801c268 <__sflush_r+0x1c>
 801c30c:	690f      	ldr	r7, [r1, #16]
 801c30e:	2f00      	cmp	r7, #0
 801c310:	d0a9      	beq.n	801c266 <__sflush_r+0x1a>
 801c312:	0793      	lsls	r3, r2, #30
 801c314:	680e      	ldr	r6, [r1, #0]
 801c316:	bf08      	it	eq
 801c318:	694b      	ldreq	r3, [r1, #20]
 801c31a:	600f      	str	r7, [r1, #0]
 801c31c:	bf18      	it	ne
 801c31e:	2300      	movne	r3, #0
 801c320:	eba6 0807 	sub.w	r8, r6, r7
 801c324:	608b      	str	r3, [r1, #8]
 801c326:	f1b8 0f00 	cmp.w	r8, #0
 801c32a:	dd9c      	ble.n	801c266 <__sflush_r+0x1a>
 801c32c:	6a21      	ldr	r1, [r4, #32]
 801c32e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c330:	4643      	mov	r3, r8
 801c332:	463a      	mov	r2, r7
 801c334:	4628      	mov	r0, r5
 801c336:	47b0      	blx	r6
 801c338:	2800      	cmp	r0, #0
 801c33a:	dc06      	bgt.n	801c34a <__sflush_r+0xfe>
 801c33c:	89a3      	ldrh	r3, [r4, #12]
 801c33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c342:	81a3      	strh	r3, [r4, #12]
 801c344:	f04f 30ff 	mov.w	r0, #4294967295
 801c348:	e78e      	b.n	801c268 <__sflush_r+0x1c>
 801c34a:	4407      	add	r7, r0
 801c34c:	eba8 0800 	sub.w	r8, r8, r0
 801c350:	e7e9      	b.n	801c326 <__sflush_r+0xda>
 801c352:	bf00      	nop
 801c354:	dfbffffe 	.word	0xdfbffffe

0801c358 <_fflush_r>:
 801c358:	b538      	push	{r3, r4, r5, lr}
 801c35a:	690b      	ldr	r3, [r1, #16]
 801c35c:	4605      	mov	r5, r0
 801c35e:	460c      	mov	r4, r1
 801c360:	b913      	cbnz	r3, 801c368 <_fflush_r+0x10>
 801c362:	2500      	movs	r5, #0
 801c364:	4628      	mov	r0, r5
 801c366:	bd38      	pop	{r3, r4, r5, pc}
 801c368:	b118      	cbz	r0, 801c372 <_fflush_r+0x1a>
 801c36a:	6a03      	ldr	r3, [r0, #32]
 801c36c:	b90b      	cbnz	r3, 801c372 <_fflush_r+0x1a>
 801c36e:	f7ff fa5b 	bl	801b828 <__sinit>
 801c372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d0f3      	beq.n	801c362 <_fflush_r+0xa>
 801c37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c37c:	07d0      	lsls	r0, r2, #31
 801c37e:	d404      	bmi.n	801c38a <_fflush_r+0x32>
 801c380:	0599      	lsls	r1, r3, #22
 801c382:	d402      	bmi.n	801c38a <_fflush_r+0x32>
 801c384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c386:	f7ff fb5e 	bl	801ba46 <__retarget_lock_acquire_recursive>
 801c38a:	4628      	mov	r0, r5
 801c38c:	4621      	mov	r1, r4
 801c38e:	f7ff ff5d 	bl	801c24c <__sflush_r>
 801c392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c394:	07da      	lsls	r2, r3, #31
 801c396:	4605      	mov	r5, r0
 801c398:	d4e4      	bmi.n	801c364 <_fflush_r+0xc>
 801c39a:	89a3      	ldrh	r3, [r4, #12]
 801c39c:	059b      	lsls	r3, r3, #22
 801c39e:	d4e1      	bmi.n	801c364 <_fflush_r+0xc>
 801c3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c3a2:	f7ff fb51 	bl	801ba48 <__retarget_lock_release_recursive>
 801c3a6:	e7dd      	b.n	801c364 <_fflush_r+0xc>

0801c3a8 <fiprintf>:
 801c3a8:	b40e      	push	{r1, r2, r3}
 801c3aa:	b503      	push	{r0, r1, lr}
 801c3ac:	4601      	mov	r1, r0
 801c3ae:	ab03      	add	r3, sp, #12
 801c3b0:	4805      	ldr	r0, [pc, #20]	; (801c3c8 <fiprintf+0x20>)
 801c3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3b6:	6800      	ldr	r0, [r0, #0]
 801c3b8:	9301      	str	r3, [sp, #4]
 801c3ba:	f7ff fc9d 	bl	801bcf8 <_vfiprintf_r>
 801c3be:	b002      	add	sp, #8
 801c3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3c4:	b003      	add	sp, #12
 801c3c6:	4770      	bx	lr
 801c3c8:	20000244 	.word	0x20000244

0801c3cc <__swbuf_r>:
 801c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ce:	460e      	mov	r6, r1
 801c3d0:	4614      	mov	r4, r2
 801c3d2:	4605      	mov	r5, r0
 801c3d4:	b118      	cbz	r0, 801c3de <__swbuf_r+0x12>
 801c3d6:	6a03      	ldr	r3, [r0, #32]
 801c3d8:	b90b      	cbnz	r3, 801c3de <__swbuf_r+0x12>
 801c3da:	f7ff fa25 	bl	801b828 <__sinit>
 801c3de:	69a3      	ldr	r3, [r4, #24]
 801c3e0:	60a3      	str	r3, [r4, #8]
 801c3e2:	89a3      	ldrh	r3, [r4, #12]
 801c3e4:	071a      	lsls	r2, r3, #28
 801c3e6:	d525      	bpl.n	801c434 <__swbuf_r+0x68>
 801c3e8:	6923      	ldr	r3, [r4, #16]
 801c3ea:	b31b      	cbz	r3, 801c434 <__swbuf_r+0x68>
 801c3ec:	6823      	ldr	r3, [r4, #0]
 801c3ee:	6922      	ldr	r2, [r4, #16]
 801c3f0:	1a98      	subs	r0, r3, r2
 801c3f2:	6963      	ldr	r3, [r4, #20]
 801c3f4:	b2f6      	uxtb	r6, r6
 801c3f6:	4283      	cmp	r3, r0
 801c3f8:	4637      	mov	r7, r6
 801c3fa:	dc04      	bgt.n	801c406 <__swbuf_r+0x3a>
 801c3fc:	4621      	mov	r1, r4
 801c3fe:	4628      	mov	r0, r5
 801c400:	f7ff ffaa 	bl	801c358 <_fflush_r>
 801c404:	b9e0      	cbnz	r0, 801c440 <__swbuf_r+0x74>
 801c406:	68a3      	ldr	r3, [r4, #8]
 801c408:	3b01      	subs	r3, #1
 801c40a:	60a3      	str	r3, [r4, #8]
 801c40c:	6823      	ldr	r3, [r4, #0]
 801c40e:	1c5a      	adds	r2, r3, #1
 801c410:	6022      	str	r2, [r4, #0]
 801c412:	701e      	strb	r6, [r3, #0]
 801c414:	6962      	ldr	r2, [r4, #20]
 801c416:	1c43      	adds	r3, r0, #1
 801c418:	429a      	cmp	r2, r3
 801c41a:	d004      	beq.n	801c426 <__swbuf_r+0x5a>
 801c41c:	89a3      	ldrh	r3, [r4, #12]
 801c41e:	07db      	lsls	r3, r3, #31
 801c420:	d506      	bpl.n	801c430 <__swbuf_r+0x64>
 801c422:	2e0a      	cmp	r6, #10
 801c424:	d104      	bne.n	801c430 <__swbuf_r+0x64>
 801c426:	4621      	mov	r1, r4
 801c428:	4628      	mov	r0, r5
 801c42a:	f7ff ff95 	bl	801c358 <_fflush_r>
 801c42e:	b938      	cbnz	r0, 801c440 <__swbuf_r+0x74>
 801c430:	4638      	mov	r0, r7
 801c432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c434:	4621      	mov	r1, r4
 801c436:	4628      	mov	r0, r5
 801c438:	f000 f806 	bl	801c448 <__swsetup_r>
 801c43c:	2800      	cmp	r0, #0
 801c43e:	d0d5      	beq.n	801c3ec <__swbuf_r+0x20>
 801c440:	f04f 37ff 	mov.w	r7, #4294967295
 801c444:	e7f4      	b.n	801c430 <__swbuf_r+0x64>
	...

0801c448 <__swsetup_r>:
 801c448:	b538      	push	{r3, r4, r5, lr}
 801c44a:	4b2a      	ldr	r3, [pc, #168]	; (801c4f4 <__swsetup_r+0xac>)
 801c44c:	4605      	mov	r5, r0
 801c44e:	6818      	ldr	r0, [r3, #0]
 801c450:	460c      	mov	r4, r1
 801c452:	b118      	cbz	r0, 801c45c <__swsetup_r+0x14>
 801c454:	6a03      	ldr	r3, [r0, #32]
 801c456:	b90b      	cbnz	r3, 801c45c <__swsetup_r+0x14>
 801c458:	f7ff f9e6 	bl	801b828 <__sinit>
 801c45c:	89a3      	ldrh	r3, [r4, #12]
 801c45e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c462:	0718      	lsls	r0, r3, #28
 801c464:	d422      	bmi.n	801c4ac <__swsetup_r+0x64>
 801c466:	06d9      	lsls	r1, r3, #27
 801c468:	d407      	bmi.n	801c47a <__swsetup_r+0x32>
 801c46a:	2309      	movs	r3, #9
 801c46c:	602b      	str	r3, [r5, #0]
 801c46e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c472:	81a3      	strh	r3, [r4, #12]
 801c474:	f04f 30ff 	mov.w	r0, #4294967295
 801c478:	e034      	b.n	801c4e4 <__swsetup_r+0x9c>
 801c47a:	0758      	lsls	r0, r3, #29
 801c47c:	d512      	bpl.n	801c4a4 <__swsetup_r+0x5c>
 801c47e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c480:	b141      	cbz	r1, 801c494 <__swsetup_r+0x4c>
 801c482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c486:	4299      	cmp	r1, r3
 801c488:	d002      	beq.n	801c490 <__swsetup_r+0x48>
 801c48a:	4628      	mov	r0, r5
 801c48c:	f7ff fb0a 	bl	801baa4 <_free_r>
 801c490:	2300      	movs	r3, #0
 801c492:	6363      	str	r3, [r4, #52]	; 0x34
 801c494:	89a3      	ldrh	r3, [r4, #12]
 801c496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c49a:	81a3      	strh	r3, [r4, #12]
 801c49c:	2300      	movs	r3, #0
 801c49e:	6063      	str	r3, [r4, #4]
 801c4a0:	6923      	ldr	r3, [r4, #16]
 801c4a2:	6023      	str	r3, [r4, #0]
 801c4a4:	89a3      	ldrh	r3, [r4, #12]
 801c4a6:	f043 0308 	orr.w	r3, r3, #8
 801c4aa:	81a3      	strh	r3, [r4, #12]
 801c4ac:	6923      	ldr	r3, [r4, #16]
 801c4ae:	b94b      	cbnz	r3, 801c4c4 <__swsetup_r+0x7c>
 801c4b0:	89a3      	ldrh	r3, [r4, #12]
 801c4b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c4b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c4ba:	d003      	beq.n	801c4c4 <__swsetup_r+0x7c>
 801c4bc:	4621      	mov	r1, r4
 801c4be:	4628      	mov	r0, r5
 801c4c0:	f000 f857 	bl	801c572 <__smakebuf_r>
 801c4c4:	89a0      	ldrh	r0, [r4, #12]
 801c4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c4ca:	f010 0301 	ands.w	r3, r0, #1
 801c4ce:	d00a      	beq.n	801c4e6 <__swsetup_r+0x9e>
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	60a3      	str	r3, [r4, #8]
 801c4d4:	6963      	ldr	r3, [r4, #20]
 801c4d6:	425b      	negs	r3, r3
 801c4d8:	61a3      	str	r3, [r4, #24]
 801c4da:	6923      	ldr	r3, [r4, #16]
 801c4dc:	b943      	cbnz	r3, 801c4f0 <__swsetup_r+0xa8>
 801c4de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c4e2:	d1c4      	bne.n	801c46e <__swsetup_r+0x26>
 801c4e4:	bd38      	pop	{r3, r4, r5, pc}
 801c4e6:	0781      	lsls	r1, r0, #30
 801c4e8:	bf58      	it	pl
 801c4ea:	6963      	ldrpl	r3, [r4, #20]
 801c4ec:	60a3      	str	r3, [r4, #8]
 801c4ee:	e7f4      	b.n	801c4da <__swsetup_r+0x92>
 801c4f0:	2000      	movs	r0, #0
 801c4f2:	e7f7      	b.n	801c4e4 <__swsetup_r+0x9c>
 801c4f4:	20000244 	.word	0x20000244

0801c4f8 <_sbrk_r>:
 801c4f8:	b538      	push	{r3, r4, r5, lr}
 801c4fa:	4d06      	ldr	r5, [pc, #24]	; (801c514 <_sbrk_r+0x1c>)
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	4604      	mov	r4, r0
 801c500:	4608      	mov	r0, r1
 801c502:	602b      	str	r3, [r5, #0]
 801c504:	f7e4 fca2 	bl	8000e4c <_sbrk>
 801c508:	1c43      	adds	r3, r0, #1
 801c50a:	d102      	bne.n	801c512 <_sbrk_r+0x1a>
 801c50c:	682b      	ldr	r3, [r5, #0]
 801c50e:	b103      	cbz	r3, 801c512 <_sbrk_r+0x1a>
 801c510:	6023      	str	r3, [r4, #0]
 801c512:	bd38      	pop	{r3, r4, r5, pc}
 801c514:	2000ac50 	.word	0x2000ac50

0801c518 <abort>:
 801c518:	b508      	push	{r3, lr}
 801c51a:	2006      	movs	r0, #6
 801c51c:	f000 f88e 	bl	801c63c <raise>
 801c520:	2001      	movs	r0, #1
 801c522:	f7e4 fc1b 	bl	8000d5c <_exit>

0801c526 <__swhatbuf_r>:
 801c526:	b570      	push	{r4, r5, r6, lr}
 801c528:	460c      	mov	r4, r1
 801c52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c52e:	2900      	cmp	r1, #0
 801c530:	b096      	sub	sp, #88	; 0x58
 801c532:	4615      	mov	r5, r2
 801c534:	461e      	mov	r6, r3
 801c536:	da0d      	bge.n	801c554 <__swhatbuf_r+0x2e>
 801c538:	89a3      	ldrh	r3, [r4, #12]
 801c53a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c53e:	f04f 0100 	mov.w	r1, #0
 801c542:	bf0c      	ite	eq
 801c544:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c548:	2340      	movne	r3, #64	; 0x40
 801c54a:	2000      	movs	r0, #0
 801c54c:	6031      	str	r1, [r6, #0]
 801c54e:	602b      	str	r3, [r5, #0]
 801c550:	b016      	add	sp, #88	; 0x58
 801c552:	bd70      	pop	{r4, r5, r6, pc}
 801c554:	466a      	mov	r2, sp
 801c556:	f000 f879 	bl	801c64c <_fstat_r>
 801c55a:	2800      	cmp	r0, #0
 801c55c:	dbec      	blt.n	801c538 <__swhatbuf_r+0x12>
 801c55e:	9901      	ldr	r1, [sp, #4]
 801c560:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c564:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c568:	4259      	negs	r1, r3
 801c56a:	4159      	adcs	r1, r3
 801c56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c570:	e7eb      	b.n	801c54a <__swhatbuf_r+0x24>

0801c572 <__smakebuf_r>:
 801c572:	898b      	ldrh	r3, [r1, #12]
 801c574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c576:	079d      	lsls	r5, r3, #30
 801c578:	4606      	mov	r6, r0
 801c57a:	460c      	mov	r4, r1
 801c57c:	d507      	bpl.n	801c58e <__smakebuf_r+0x1c>
 801c57e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c582:	6023      	str	r3, [r4, #0]
 801c584:	6123      	str	r3, [r4, #16]
 801c586:	2301      	movs	r3, #1
 801c588:	6163      	str	r3, [r4, #20]
 801c58a:	b002      	add	sp, #8
 801c58c:	bd70      	pop	{r4, r5, r6, pc}
 801c58e:	ab01      	add	r3, sp, #4
 801c590:	466a      	mov	r2, sp
 801c592:	f7ff ffc8 	bl	801c526 <__swhatbuf_r>
 801c596:	9900      	ldr	r1, [sp, #0]
 801c598:	4605      	mov	r5, r0
 801c59a:	4630      	mov	r0, r6
 801c59c:	f7ff faf6 	bl	801bb8c <_malloc_r>
 801c5a0:	b948      	cbnz	r0, 801c5b6 <__smakebuf_r+0x44>
 801c5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5a6:	059a      	lsls	r2, r3, #22
 801c5a8:	d4ef      	bmi.n	801c58a <__smakebuf_r+0x18>
 801c5aa:	f023 0303 	bic.w	r3, r3, #3
 801c5ae:	f043 0302 	orr.w	r3, r3, #2
 801c5b2:	81a3      	strh	r3, [r4, #12]
 801c5b4:	e7e3      	b.n	801c57e <__smakebuf_r+0xc>
 801c5b6:	89a3      	ldrh	r3, [r4, #12]
 801c5b8:	6020      	str	r0, [r4, #0]
 801c5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c5be:	81a3      	strh	r3, [r4, #12]
 801c5c0:	9b00      	ldr	r3, [sp, #0]
 801c5c2:	6163      	str	r3, [r4, #20]
 801c5c4:	9b01      	ldr	r3, [sp, #4]
 801c5c6:	6120      	str	r0, [r4, #16]
 801c5c8:	b15b      	cbz	r3, 801c5e2 <__smakebuf_r+0x70>
 801c5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5ce:	4630      	mov	r0, r6
 801c5d0:	f000 f84e 	bl	801c670 <_isatty_r>
 801c5d4:	b128      	cbz	r0, 801c5e2 <__smakebuf_r+0x70>
 801c5d6:	89a3      	ldrh	r3, [r4, #12]
 801c5d8:	f023 0303 	bic.w	r3, r3, #3
 801c5dc:	f043 0301 	orr.w	r3, r3, #1
 801c5e0:	81a3      	strh	r3, [r4, #12]
 801c5e2:	89a3      	ldrh	r3, [r4, #12]
 801c5e4:	431d      	orrs	r5, r3
 801c5e6:	81a5      	strh	r5, [r4, #12]
 801c5e8:	e7cf      	b.n	801c58a <__smakebuf_r+0x18>

0801c5ea <_raise_r>:
 801c5ea:	291f      	cmp	r1, #31
 801c5ec:	b538      	push	{r3, r4, r5, lr}
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	460d      	mov	r5, r1
 801c5f2:	d904      	bls.n	801c5fe <_raise_r+0x14>
 801c5f4:	2316      	movs	r3, #22
 801c5f6:	6003      	str	r3, [r0, #0]
 801c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5fc:	bd38      	pop	{r3, r4, r5, pc}
 801c5fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c600:	b112      	cbz	r2, 801c608 <_raise_r+0x1e>
 801c602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c606:	b94b      	cbnz	r3, 801c61c <_raise_r+0x32>
 801c608:	4620      	mov	r0, r4
 801c60a:	f000 f853 	bl	801c6b4 <_getpid_r>
 801c60e:	462a      	mov	r2, r5
 801c610:	4601      	mov	r1, r0
 801c612:	4620      	mov	r0, r4
 801c614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c618:	f000 b83a 	b.w	801c690 <_kill_r>
 801c61c:	2b01      	cmp	r3, #1
 801c61e:	d00a      	beq.n	801c636 <_raise_r+0x4c>
 801c620:	1c59      	adds	r1, r3, #1
 801c622:	d103      	bne.n	801c62c <_raise_r+0x42>
 801c624:	2316      	movs	r3, #22
 801c626:	6003      	str	r3, [r0, #0]
 801c628:	2001      	movs	r0, #1
 801c62a:	e7e7      	b.n	801c5fc <_raise_r+0x12>
 801c62c:	2400      	movs	r4, #0
 801c62e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c632:	4628      	mov	r0, r5
 801c634:	4798      	blx	r3
 801c636:	2000      	movs	r0, #0
 801c638:	e7e0      	b.n	801c5fc <_raise_r+0x12>
	...

0801c63c <raise>:
 801c63c:	4b02      	ldr	r3, [pc, #8]	; (801c648 <raise+0xc>)
 801c63e:	4601      	mov	r1, r0
 801c640:	6818      	ldr	r0, [r3, #0]
 801c642:	f7ff bfd2 	b.w	801c5ea <_raise_r>
 801c646:	bf00      	nop
 801c648:	20000244 	.word	0x20000244

0801c64c <_fstat_r>:
 801c64c:	b538      	push	{r3, r4, r5, lr}
 801c64e:	4d07      	ldr	r5, [pc, #28]	; (801c66c <_fstat_r+0x20>)
 801c650:	2300      	movs	r3, #0
 801c652:	4604      	mov	r4, r0
 801c654:	4608      	mov	r0, r1
 801c656:	4611      	mov	r1, r2
 801c658:	602b      	str	r3, [r5, #0]
 801c65a:	f7e4 fbce 	bl	8000dfa <_fstat>
 801c65e:	1c43      	adds	r3, r0, #1
 801c660:	d102      	bne.n	801c668 <_fstat_r+0x1c>
 801c662:	682b      	ldr	r3, [r5, #0]
 801c664:	b103      	cbz	r3, 801c668 <_fstat_r+0x1c>
 801c666:	6023      	str	r3, [r4, #0]
 801c668:	bd38      	pop	{r3, r4, r5, pc}
 801c66a:	bf00      	nop
 801c66c:	2000ac50 	.word	0x2000ac50

0801c670 <_isatty_r>:
 801c670:	b538      	push	{r3, r4, r5, lr}
 801c672:	4d06      	ldr	r5, [pc, #24]	; (801c68c <_isatty_r+0x1c>)
 801c674:	2300      	movs	r3, #0
 801c676:	4604      	mov	r4, r0
 801c678:	4608      	mov	r0, r1
 801c67a:	602b      	str	r3, [r5, #0]
 801c67c:	f7e4 fbcd 	bl	8000e1a <_isatty>
 801c680:	1c43      	adds	r3, r0, #1
 801c682:	d102      	bne.n	801c68a <_isatty_r+0x1a>
 801c684:	682b      	ldr	r3, [r5, #0]
 801c686:	b103      	cbz	r3, 801c68a <_isatty_r+0x1a>
 801c688:	6023      	str	r3, [r4, #0]
 801c68a:	bd38      	pop	{r3, r4, r5, pc}
 801c68c:	2000ac50 	.word	0x2000ac50

0801c690 <_kill_r>:
 801c690:	b538      	push	{r3, r4, r5, lr}
 801c692:	4d07      	ldr	r5, [pc, #28]	; (801c6b0 <_kill_r+0x20>)
 801c694:	2300      	movs	r3, #0
 801c696:	4604      	mov	r4, r0
 801c698:	4608      	mov	r0, r1
 801c69a:	4611      	mov	r1, r2
 801c69c:	602b      	str	r3, [r5, #0]
 801c69e:	f7e4 fb4b 	bl	8000d38 <_kill>
 801c6a2:	1c43      	adds	r3, r0, #1
 801c6a4:	d102      	bne.n	801c6ac <_kill_r+0x1c>
 801c6a6:	682b      	ldr	r3, [r5, #0]
 801c6a8:	b103      	cbz	r3, 801c6ac <_kill_r+0x1c>
 801c6aa:	6023      	str	r3, [r4, #0]
 801c6ac:	bd38      	pop	{r3, r4, r5, pc}
 801c6ae:	bf00      	nop
 801c6b0:	2000ac50 	.word	0x2000ac50

0801c6b4 <_getpid_r>:
 801c6b4:	f7e4 bb38 	b.w	8000d28 <_getpid>

0801c6b8 <_init>:
 801c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ba:	bf00      	nop
 801c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6be:	bc08      	pop	{r3}
 801c6c0:	469e      	mov	lr, r3
 801c6c2:	4770      	bx	lr

0801c6c4 <_fini>:
 801c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6c6:	bf00      	nop
 801c6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6ca:	bc08      	pop	{r3}
 801c6cc:	469e      	mov	lr, r3
 801c6ce:	4770      	bx	lr
